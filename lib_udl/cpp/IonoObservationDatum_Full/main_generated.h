// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationDatum_Full;
struct IonoObservationDatum_FullBuilder;

/// /// Array to support sparse data collections.
struct IonoObservationDatum_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationDatum_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NOTES = 4,
    VT_DATA = 6
  };
  /// Notes for the datum with details of what the data is, units, etc.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Array to support sparse data collections.
  /// Example: /// Example: [1.1, 2.1, 3.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *data() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfStrings(data()) &&
           verifier.EndTable();
  }
};

struct IonoObservationDatum_FullBuilder {
  typedef IonoObservationDatum_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(IonoObservationDatum_Full::VT_NOTES, notes);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data) {
    fbb_.AddOffset(IonoObservationDatum_Full::VT_DATA, data);
  }
  explicit IonoObservationDatum_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationDatum_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationDatum_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationDatum_Full> CreateIonoObservationDatum_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> data = 0) {
  IonoObservationDatum_FullBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_notes(notes);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationDatum_Full> CreateIonoObservationDatum_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *notes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *data = nullptr) {
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto data__ = data ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*data) : 0;
  return CreateIonoObservationDatum_Full(
      _fbb,
      notes__,
      data__);
}

inline const IonoObservationDatum_Full *GetIonoObservationDatum_Full(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationDatum_Full>(buf);
}

inline const IonoObservationDatum_Full *GetSizePrefixedIonoObservationDatum_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationDatum_Full>(buf);
}

inline const char *IonoObservationDatum_FullIdentifier() {
  return "IONO";
}

inline bool IonoObservationDatum_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDatum_FullIdentifier());
}

inline bool SizePrefixedIonoObservationDatum_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDatum_FullIdentifier(), true);
}

inline bool VerifyIonoObservationDatum_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationDatum_Full>(IonoObservationDatum_FullIdentifier());
}

inline bool VerifySizePrefixedIonoObservationDatum_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationDatum_Full>(IonoObservationDatum_FullIdentifier());
}

inline void FinishIonoObservationDatum_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDatum_Full> root) {
  fbb.Finish(root, IonoObservationDatum_FullIdentifier());
}

inline void FinishSizePrefixedIonoObservationDatum_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDatum_Full> root) {
  fbb.FinishSizePrefixed(root, IonoObservationDatum_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
