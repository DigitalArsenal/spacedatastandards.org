// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SubStatus_Abridged;
struct SubStatus_AbridgedBuilder;

enum SubStatus_Abridged_type_Enum : int8_t {
  /// No description available.
  SubStatus_Abridged_type_Enum_MWCAP = 0,
  /// No description available.
  SubStatus_Abridged_type_Enum_SSCAP = 1,
  /// No description available.
  SubStatus_Abridged_type_Enum_MDCAP = 2,
  SubStatus_Abridged_type_Enum_MIN = SubStatus_Abridged_type_Enum_MWCAP,
  SubStatus_Abridged_type_Enum_MAX = SubStatus_Abridged_type_Enum_MDCAP
};

inline const SubStatus_Abridged_type_Enum (&EnumValuesSubStatus_Abridged_type_Enum())[3] {
  static const SubStatus_Abridged_type_Enum values[] = {
    SubStatus_Abridged_type_Enum_MWCAP,
    SubStatus_Abridged_type_Enum_SSCAP,
    SubStatus_Abridged_type_Enum_MDCAP
  };
  return values;
}

inline const char * const *EnumNamesSubStatus_Abridged_type_Enum() {
  static const char * const names[4] = {
    "MWCAP",
    "SSCAP",
    "MDCAP",
    nullptr
  };
  return names;
}

inline const char *EnumNameSubStatus_Abridged_type_Enum(SubStatus_Abridged_type_Enum e) {
  if (::flatbuffers::IsOutRange(e, SubStatus_Abridged_type_Enum_MWCAP, SubStatus_Abridged_type_Enum_MDCAP)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSubStatus_Abridged_type_Enum()[index];
}

enum SubStatus_Abridged_status_Enum : int8_t {
  /// No description available.
  SubStatus_Abridged_status_Enum_FMC = 0,
  /// No description available.
  SubStatus_Abridged_status_Enum_NMC = 1,
  /// No description available.
  SubStatus_Abridged_status_Enum_PMC = 2,
  /// No description available.
  SubStatus_Abridged_status_Enum_UNK = 3,
  SubStatus_Abridged_status_Enum_MIN = SubStatus_Abridged_status_Enum_FMC,
  SubStatus_Abridged_status_Enum_MAX = SubStatus_Abridged_status_Enum_UNK
};

inline const SubStatus_Abridged_status_Enum (&EnumValuesSubStatus_Abridged_status_Enum())[4] {
  static const SubStatus_Abridged_status_Enum values[] = {
    SubStatus_Abridged_status_Enum_FMC,
    SubStatus_Abridged_status_Enum_NMC,
    SubStatus_Abridged_status_Enum_PMC,
    SubStatus_Abridged_status_Enum_UNK
  };
  return values;
}

inline const char * const *EnumNamesSubStatus_Abridged_status_Enum() {
  static const char * const names[5] = {
    "FMC",
    "NMC",
    "PMC",
    "UNK",
    nullptr
  };
  return names;
}

inline const char *EnumNameSubStatus_Abridged_status_Enum(SubStatus_Abridged_status_Enum e) {
  if (::flatbuffers::IsOutRange(e, SubStatus_Abridged_status_Enum_FMC, SubStatus_Abridged_status_Enum_UNK)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSubStatus_Abridged_status_Enum()[index];
}

enum SubStatus_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SubStatus_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SubStatus_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SubStatus_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SubStatus_Abridged_dataMode_Enum_EXERCISE = 3,
  SubStatus_Abridged_dataMode_Enum_MIN = SubStatus_Abridged_dataMode_Enum_REAL,
  SubStatus_Abridged_dataMode_Enum_MAX = SubStatus_Abridged_dataMode_Enum_EXERCISE
};

inline const SubStatus_Abridged_dataMode_Enum (&EnumValuesSubStatus_Abridged_dataMode_Enum())[4] {
  static const SubStatus_Abridged_dataMode_Enum values[] = {
    SubStatus_Abridged_dataMode_Enum_REAL,
    SubStatus_Abridged_dataMode_Enum_TEST,
    SubStatus_Abridged_dataMode_Enum_SIMULATED,
    SubStatus_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSubStatus_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSubStatus_Abridged_dataMode_Enum(SubStatus_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SubStatus_Abridged_dataMode_Enum_REAL, SubStatus_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSubStatus_Abridged_dataMode_Enum()[index];
}

/// /// Additional sub-system or capability status for the parent entity.
struct SubStatus_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SubStatus_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_STATUSID = 10,
    VT_STATUS = 12,
    VT_NOTES = 14,
    VT_SOURCE = 16,
    VT_ORIGIN = 18,
    VT_ORIGNETWORK = 20,
    VT_DATAMODE = 22,
    VT_CREATEDAT = 24,
    VT_CREATEDBY = 26
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SUBSTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Parent entity's sub-system or capability status: mwCap, mdCap, ssCap, etc.
  /// Example: /// Example: mdCap
  /// Constraints: Minimum length = 1, Maximum length = 16
  SubStatus_Abridged_type_Enum type() const {
    return static_cast<SubStatus_Abridged_type_Enum>(GetField<int8_t>(VT_TYPE, 0));
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Id of the parent status.
  /// Example: /// Example: REF-STATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *statusId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUSID);
  }
  /// Status of the sub-system/capability, e.g. FMC, NMC, PMC, UNK.
  /// Example: /// Example: FMC
  /// Constraints: Minimum length = 1, Maximum length = 16
  SubStatus_Abridged_status_Enum status() const {
    return static_cast<SubStatus_Abridged_status_Enum>(GetField<int8_t>(VT_STATUS, 0));
  }
  /// Descriptions and/or comments associated with the sub-status.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 1, Maximum length = 4096
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: TST1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SubStatus_Abridged_dataMode_Enum dataMode() const {
    return static_cast<SubStatus_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_STATUSID) &&
           verifier.VerifyString(statusId()) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct SubStatus_AbridgedBuilder {
  typedef SubStatus_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SubStatus_Abridged::VT_ID, id);
  }
  void add_type(SubStatus_Abridged_type_Enum type) {
    fbb_.AddElement<int8_t>(SubStatus_Abridged::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SubStatus_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_statusId(::flatbuffers::Offset<::flatbuffers::String> statusId) {
    fbb_.AddOffset(SubStatus_Abridged::VT_STATUSID, statusId);
  }
  void add_status(SubStatus_Abridged_status_Enum status) {
    fbb_.AddElement<int8_t>(SubStatus_Abridged::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(SubStatus_Abridged::VT_NOTES, notes);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SubStatus_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SubStatus_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SubStatus_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SubStatus_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SubStatus_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SubStatus_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SubStatus_Abridged::VT_CREATEDBY, createdBy);
  }
  explicit SubStatus_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SubStatus_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SubStatus_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SubStatus_Abridged> CreateSubStatus_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    SubStatus_Abridged_type_Enum type = SubStatus_Abridged_type_Enum_MWCAP,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> statusId = 0,
    SubStatus_Abridged_status_Enum status = SubStatus_Abridged_status_Enum_FMC,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SubStatus_Abridged_dataMode_Enum dataMode = SubStatus_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  SubStatus_AbridgedBuilder builder_(_fbb);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_notes(notes);
  builder_.add_statusId(statusId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_status(status);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SubStatus_Abridged> CreateSubStatus_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    SubStatus_Abridged_type_Enum type = SubStatus_Abridged_type_Enum_MWCAP,
    const char *classificationMarking = nullptr,
    const char *statusId = nullptr,
    SubStatus_Abridged_status_Enum status = SubStatus_Abridged_status_Enum_FMC,
    const char *notes = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SubStatus_Abridged_dataMode_Enum dataMode = SubStatus_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto statusId__ = statusId ? _fbb.CreateString(statusId) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateSubStatus_Abridged(
      _fbb,
      id__,
      type,
      classificationMarking__,
      statusId__,
      status,
      notes__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const SubStatus_Abridged *GetSubStatus_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SubStatus_Abridged>(buf);
}

inline const SubStatus_Abridged *GetSizePrefixedSubStatus_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SubStatus_Abridged>(buf);
}

inline const char *SubStatus_AbridgedIdentifier() {
  return "SUBS";
}

inline bool SubStatus_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SubStatus_AbridgedIdentifier());
}

inline bool SizePrefixedSubStatus_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SubStatus_AbridgedIdentifier(), true);
}

inline bool VerifySubStatus_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SubStatus_Abridged>(SubStatus_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSubStatus_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SubStatus_Abridged>(SubStatus_AbridgedIdentifier());
}

inline void FinishSubStatus_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SubStatus_Abridged> root) {
  fbb.Finish(root, SubStatus_AbridgedIdentifier());
}

inline void FinishSizePrefixedSubStatus_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SubStatus_Abridged> root) {
  fbb.FinishSizePrefixed(root, SubStatus_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
