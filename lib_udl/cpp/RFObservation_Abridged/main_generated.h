// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RFObservation_Abridged;
struct RFObservation_AbridgedBuilder;

enum RFObservation_Abridged_polarityType_Enum : int8_t {
  /// No description available.
  RFObservation_Abridged_polarityType_Enum_H = 0,
  /// No description available.
  RFObservation_Abridged_polarityType_Enum_V = 1,
  /// No description available.
  RFObservation_Abridged_polarityType_Enum_R = 2,
  /// No description available.
  RFObservation_Abridged_polarityType_Enum_L = 3,
  RFObservation_Abridged_polarityType_Enum_MIN = RFObservation_Abridged_polarityType_Enum_H,
  RFObservation_Abridged_polarityType_Enum_MAX = RFObservation_Abridged_polarityType_Enum_L
};

inline const RFObservation_Abridged_polarityType_Enum (&EnumValuesRFObservation_Abridged_polarityType_Enum())[4] {
  static const RFObservation_Abridged_polarityType_Enum values[] = {
    RFObservation_Abridged_polarityType_Enum_H,
    RFObservation_Abridged_polarityType_Enum_V,
    RFObservation_Abridged_polarityType_Enum_R,
    RFObservation_Abridged_polarityType_Enum_L
  };
  return values;
}

inline const char * const *EnumNamesRFObservation_Abridged_polarityType_Enum() {
  static const char * const names[5] = {
    "H",
    "V",
    "R",
    "L",
    nullptr
  };
  return names;
}

inline const char *EnumNameRFObservation_Abridged_polarityType_Enum(RFObservation_Abridged_polarityType_Enum e) {
  if (::flatbuffers::IsOutRange(e, RFObservation_Abridged_polarityType_Enum_H, RFObservation_Abridged_polarityType_Enum_L)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRFObservation_Abridged_polarityType_Enum()[index];
}

enum RFObservation_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  RFObservation_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  RFObservation_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  RFObservation_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  RFObservation_Abridged_dataMode_Enum_EXERCISE = 3,
  RFObservation_Abridged_dataMode_Enum_MIN = RFObservation_Abridged_dataMode_Enum_REAL,
  RFObservation_Abridged_dataMode_Enum_MAX = RFObservation_Abridged_dataMode_Enum_EXERCISE
};

inline const RFObservation_Abridged_dataMode_Enum (&EnumValuesRFObservation_Abridged_dataMode_Enum())[4] {
  static const RFObservation_Abridged_dataMode_Enum values[] = {
    RFObservation_Abridged_dataMode_Enum_REAL,
    RFObservation_Abridged_dataMode_Enum_TEST,
    RFObservation_Abridged_dataMode_Enum_SIMULATED,
    RFObservation_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesRFObservation_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameRFObservation_Abridged_dataMode_Enum(RFObservation_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, RFObservation_Abridged_dataMode_Enum_REAL, RFObservation_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRFObservation_Abridged_dataMode_Enum()[index];
}

/// /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
struct RFObservation_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RFObservation_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_OBTIME = 8,
    VT_IDONORBIT = 10,
    VT_IDSENSOR = 12,
    VT_TYPE = 14,
    VT_SATNO = 16,
    VT_TASKID = 18,
    VT_TRANSACTIONID = 20,
    VT_TRACKID = 22,
    VT_ORIGOBJECTID = 24,
    VT_ORIGSENSORID = 26,
    VT_UCT = 28,
    VT_TRANSPONDER = 30,
    VT_AZIMUTH = 32,
    VT_AZIMUTHUNC = 34,
    VT_AZIMUTHRATE = 36,
    VT_ELEVATION = 38,
    VT_ELEVATIONUNC = 40,
    VT_ELEVATIONRATE = 42,
    VT_RANGE = 44,
    VT_RANGEUNC = 46,
    VT_RANGERATE = 48,
    VT_RANGERATEUNC = 50,
    VT_TRACKRANGE = 52,
    VT_SENLAT = 54,
    VT_SENLON = 56,
    VT_SENALT = 58,
    VT_ELNOT = 60,
    VT_FREQUENCY = 62,
    VT_NOMINALFREQUENCY = 64,
    VT_STARTFREQUENCY = 66,
    VT_ENDFREQUENCY = 68,
    VT_RELATIVECARRIERPOWER = 70,
    VT_SPECTRUMANALYZERPOWER = 72,
    VT_RELATIVENOISEFLOOR = 74,
    VT_REFERENCELEVEL = 76,
    VT_PGRI = 78,
    VT_CONFIDENCE = 80,
    VT_INCOMING = 82,
    VT_SWITCHPOINT = 84,
    VT_BAUDRATE = 86,
    VT_SNR = 88,
    VT_NOMINALSNR = 90,
    VT_POLARITY = 92,
    VT_POLARITYTYPE = 94,
    VT_CHANNEL = 96,
    VT_POWEROVERNOISE = 98,
    VT_NOMINALPOWEROVERNOISE = 100,
    VT_BANDWIDTH = 102,
    VT_NOMINALBANDWIDTH = 104,
    VT_RESOLUTIONBANDWIDTH = 106,
    VT_VIDEOBANDWIDTH = 108,
    VT_EIRP = 110,
    VT_NOMINALEIRP = 112,
    VT_MINPSD = 114,
    VT_MAXPSD = 116,
    VT_FREQUENCYSHIFT = 118,
    VT_PEAK = 120,
    VT_ANTENNANAME = 122,
    VT_DETECTIONSTATUS = 124,
    VT_COLLECTIONMODE = 126,
    VT_RAWFILEURI = 128,
    VT_SOURCE = 130,
    VT_ORIGIN = 132,
    VT_DATAMODE = 134,
    VT_CREATEDAT = 136,
    VT_CREATEDBY = 138,
    VT_NOISEPWRDENSITY = 140,
    VT_CARRIERSTANDARD = 142,
    VT_MODULATION = 144,
    VT_INNERCODINGRATE = 146,
    VT_OUTERCODINGRATE = 148,
    VT_TRANSMITFILTERTYPE = 150,
    VT_TRANSMITFILTERROLLOFF = 152,
    VT_SYMBOLTONOISERATIO = 154,
    VT_BITERRORRATE = 156,
    VT_ORIGNETWORK = 158,
    VT_SOURCEDL = 160,
    VT_DESCRIPTOR = 162,
    VT_URL = 164
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RFOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTIME);
  }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
  /// Example: /// Example: RF
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 32258
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *taskId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TASKID);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// Optional identifier of the track to which this observation belongs.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *trackId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRACKID);
  }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIG-OBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIG-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool uct() const {
    return GetField<uint8_t>(VT_UCT, 0) != 0;
  }
  /// Optional identifier provided by observation source to indicate the transponder used for this measurement.
  /// Example: /// Example: TRANSPONDER-A
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transponder() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSPONDER);
  }
  /// azimuth angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double azimuth() const {
    return GetField<double>(VT_AZIMUTH, 0.0);
  }
  /// One sigma uncertainty in the azimuth angle measurement, in degrees.
  /// Example: /// Example: 2.1
  /// Constraints: No constraints specified.
  double azimuthUnc() const {
    return GetField<double>(VT_AZIMUTHUNC, 0.0);
  }
  /// Rate of change of the azimuth in degrees per second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double azimuthRate() const {
    return GetField<double>(VT_AZIMUTHRATE, 0.0);
  }
  /// elevation in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double elevation() const {
    return GetField<double>(VT_ELEVATION, 0.0);
  }
  /// One sigma uncertainty in the elevation angle measurement, in degrees.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double elevationUnc() const {
    return GetField<double>(VT_ELEVATIONUNC, 0.0);
  }
  /// Rate of change of the elevation in degrees per second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double elevationRate() const {
    return GetField<double>(VT_ELEVATIONRATE, 0.0);
  }
  /// Target range in km.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double range() const {
    return GetField<double>(VT_RANGE, 0.0);
  }
  /// One sigma uncertainty in the range measurement, in kilometers.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double rangeUnc() const {
    return GetField<double>(VT_RANGEUNC, 0.0);
  }
  /// Rate of change of the range in km/sec.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double rangeRate() const {
    return GetField<double>(VT_RANGERATE, 0.0);
  }
  /// One sigma uncertainty in the range rate measurement, in kilometers/second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double rangeRateUnc() const {
    return GetField<double>(VT_RANGERATEUNC, 0.0);
  }
  /// Target track or apparent range in km.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double trackRange() const {
    return GetField<double>(VT_TRACKRANGE, 0.0);
  }
  /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.2
  /// Constraints: No constraints specified.
  double senlat() const {
    return GetField<double>(VT_SENLAT, 0.0);
  }
  /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.3
  /// Constraints: No constraints specified.
  double senlon() const {
    return GetField<double>(VT_SENLON, 0.0);
  }
  /// Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double senalt() const {
    return GetField<double>(VT_SENALT, 0.0);
  }
  /// ELINT notation.
  /// Example: /// Example: Ex. ELINT
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *elnot() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ELNOT);
  }
  /// Center carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double frequency() const {
    return GetField<double>(VT_FREQUENCY, 0.0);
  }
  /// Nominal or expected center carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double nominalFrequency() const {
    return GetField<double>(VT_NOMINALFREQUENCY, 0.0);
  }
  /// Start carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double startFrequency() const {
    return GetField<double>(VT_STARTFREQUENCY, 0.0);
  }
  /// End carrier frequency in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double endFrequency() const {
    return GetField<double>(VT_ENDFREQUENCY, 0.0);
  }
  /// Measured power of the center carrier frequency in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double relativeCarrierPower() const {
    return GetField<double>(VT_RELATIVECARRIERPOWER, 0.0);
  }
  /// Measured spectrum analyzer power of the center carrier frequency in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double spectrumAnalyzerPower() const {
    return GetField<double>(VT_SPECTRUMANALYZERPOWER, 0.0);
  }
  /// The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double relativeNoiseFloor() const {
    return GetField<double>(VT_RELATIVENOISEFLOOR, 0.0);
  }
  /// Reference signal level, in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double referenceLevel() const {
    return GetField<double>(VT_REFERENCELEVEL, 0.0);
  }
  /// A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double pgri() const {
    return GetField<double>(VT_PGRI, 0.0);
  }
  /// Confidence in the signal and its measurements and characterization.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double confidence() const {
    return GetField<double>(VT_CONFIDENCE, 0.0);
  }
  /// True if the signal is incoming, false if outgoing.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool incoming() const {
    return GetField<uint8_t>(VT_INCOMING, 0) != 0;
  }
  /// Switch Point of the RFObservation record.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t switchPoint() const {
    return GetField<int32_t>(VT_SWITCHPOINT, 0);
  }
  /// Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double baudRate() const {
    return GetField<double>(VT_BAUDRATE, 0.0);
  }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double snr() const {
    return GetField<double>(VT_SNR, 0.0);
  }
  /// Nominal or expected signal to noise ratio, in dB.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double nominalSnr() const {
    return GetField<double>(VT_NOMINALSNR, 0.0);
  }
  /// The antenna pointing dependent polarizer angle, in degrees.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double polarity() const {
    return GetField<double>(VT_POLARITY, 0.0);
  }
  /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
  /// Example: /// Example: H
  /// Constraints: Minimum length = 0, Maximum length = 16
  RFObservation_Abridged_polarityType_Enum polarityType() const {
    return static_cast<RFObservation_Abridged_polarityType_Enum>(GetField<int8_t>(VT_POLARITYTYPE, 0));
  }
  /// Channel of the RFObservation record.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t channel() const {
    return GetField<int32_t>(VT_CHANNEL, 0);
  }
  /// Measured carrier power over noise (dBW/Hz).
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double powerOverNoise() const {
    return GetField<double>(VT_POWEROVERNOISE, 0.0);
  }
  /// Expected carrier power over noise (dBW/Hz).
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double nominalPowerOverNoise() const {
    return GetField<double>(VT_NOMINALPOWEROVERNOISE, 0.0);
  }
  /// Measured bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double bandwidth() const {
    return GetField<double>(VT_BANDWIDTH, 0.0);
  }
  /// Expected bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double nominalBandwidth() const {
    return GetField<double>(VT_NOMINALBANDWIDTH, 0.0);
  }
  /// Resolution bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double resolutionBandwidth() const {
    return GetField<double>(VT_RESOLUTIONBANDWIDTH, 0.0);
  }
  /// Video bandwidth in Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double videoBandwidth() const {
    return GetField<double>(VT_VIDEOBANDWIDTH, 0.0);
  }
  /// Measured Equivalent Isotopically Radiated Power in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double eirp() const {
    return GetField<double>(VT_EIRP, 0.0);
  }
  /// Expected Equivalent Isotopically Radiated Power in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double nominalEirp() const {
    return GetField<double>(VT_NOMINALEIRP, 0.0);
  }
  /// Minimum measured PSD value of the trace in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double minPSD() const {
    return GetField<double>(VT_MINPSD, 0.0);
  }
  /// Maximum measured PSD value of the trace in dBW.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxPSD() const {
    return GetField<double>(VT_MAXPSD, 0.0);
  }
  /// Frequency Shift of the RFObservation record.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double frequencyShift() const {
    return GetField<double>(VT_FREQUENCYSHIFT, 0.0);
  }
  /// Peak of the RFObservation record.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool peak() const {
    return GetField<uint8_t>(VT_PEAK, 0) != 0;
  }
  /// Antenna name of the RFObservation record.
  /// Example: /// Example: Antenna1
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *antennaName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ANTENNANAME);
  }
  /// Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
  /// Example: /// Example: DETECTED
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *detectionStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DETECTIONSTATUS);
  }
  /// Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
  /// Example: /// Example: SURVEY
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *collectionMode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLLECTIONMODE);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  RFObservation_Abridged_dataMode_Enum dataMode() const {
    return static_cast<RFObservation_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Noise power density, in dBW-Hz.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double noisePwrDensity() const {
    return GetField<double>(VT_NOISEPWRDENSITY, 0.0);
  }
  /// Carrier standard (e.g. DVB-S2, 802.11g, etc.).
  /// Example: /// Example: DVB-S2
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *carrierStandard() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CARRIERSTANDARD);
  }
  /// Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
  /// Example: /// Example: Auto
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *modulation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODULATION);
  }
  /// Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  int32_t innerCodingRate() const {
    return GetField<int32_t>(VT_INNERCODINGRATE, 0);
  }
  /// Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  int32_t outerCodingRate() const {
    return GetField<int32_t>(VT_OUTERCODINGRATE, 0);
  }
  /// Transmit pulse shaping filter typ (e.g. RRC).
  /// Example: /// Example: RRC
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *transmitFilterType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSMITFILTERTYPE);
  }
  /// Transmit pulse shaping filter roll-off value.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double transmitFilterRollOff() const {
    return GetField<double>(VT_TRANSMITFILTERROLLOFF, 0.0);
  }
  /// Symbol to noise ratio, in dB.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double symbolToNoiseRatio() const {
    return GetField<double>(VT_SYMBOLTONOISERATIO, 0.0);
  }
  /// The ratio of bit errors per number of received bits.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double bitErrorRate() const {
    return GetField<double>(VT_BITERRORRATE, 0.0);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *descriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// Optional URL containing additional information on this observation.
  /// Example: /// Example: https://some-url
  /// Constraints: Minimum length = 0, Maximum length = 2048
  const ::flatbuffers::String *url() const {
    return GetPointer<const ::flatbuffers::String *>(VT_URL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_OBTIME) &&
           verifier.VerifyString(obTime()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_TASKID) &&
           verifier.VerifyString(taskId()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_TRACKID) &&
           verifier.VerifyString(trackId()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyField<uint8_t>(verifier, VT_UCT, 1) &&
           VerifyOffset(verifier, VT_TRANSPONDER) &&
           verifier.VerifyString(transponder()) &&
           VerifyField<double>(verifier, VT_AZIMUTH, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHUNC, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHRATE, 8) &&
           VerifyField<double>(verifier, VT_ELEVATION, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONUNC, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONRATE, 8) &&
           VerifyField<double>(verifier, VT_RANGE, 8) &&
           VerifyField<double>(verifier, VT_RANGEUNC, 8) &&
           VerifyField<double>(verifier, VT_RANGERATE, 8) &&
           VerifyField<double>(verifier, VT_RANGERATEUNC, 8) &&
           VerifyField<double>(verifier, VT_TRACKRANGE, 8) &&
           VerifyField<double>(verifier, VT_SENLAT, 8) &&
           VerifyField<double>(verifier, VT_SENLON, 8) &&
           VerifyField<double>(verifier, VT_SENALT, 8) &&
           VerifyOffset(verifier, VT_ELNOT) &&
           verifier.VerifyString(elnot()) &&
           VerifyField<double>(verifier, VT_FREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_NOMINALFREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_STARTFREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_ENDFREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_RELATIVECARRIERPOWER, 8) &&
           VerifyField<double>(verifier, VT_SPECTRUMANALYZERPOWER, 8) &&
           VerifyField<double>(verifier, VT_RELATIVENOISEFLOOR, 8) &&
           VerifyField<double>(verifier, VT_REFERENCELEVEL, 8) &&
           VerifyField<double>(verifier, VT_PGRI, 8) &&
           VerifyField<double>(verifier, VT_CONFIDENCE, 8) &&
           VerifyField<uint8_t>(verifier, VT_INCOMING, 1) &&
           VerifyField<int32_t>(verifier, VT_SWITCHPOINT, 4) &&
           VerifyField<double>(verifier, VT_BAUDRATE, 8) &&
           VerifyField<double>(verifier, VT_SNR, 8) &&
           VerifyField<double>(verifier, VT_NOMINALSNR, 8) &&
           VerifyField<double>(verifier, VT_POLARITY, 8) &&
           VerifyField<int8_t>(verifier, VT_POLARITYTYPE, 1) &&
           VerifyField<int32_t>(verifier, VT_CHANNEL, 4) &&
           VerifyField<double>(verifier, VT_POWEROVERNOISE, 8) &&
           VerifyField<double>(verifier, VT_NOMINALPOWEROVERNOISE, 8) &&
           VerifyField<double>(verifier, VT_BANDWIDTH, 8) &&
           VerifyField<double>(verifier, VT_NOMINALBANDWIDTH, 8) &&
           VerifyField<double>(verifier, VT_RESOLUTIONBANDWIDTH, 8) &&
           VerifyField<double>(verifier, VT_VIDEOBANDWIDTH, 8) &&
           VerifyField<double>(verifier, VT_EIRP, 8) &&
           VerifyField<double>(verifier, VT_NOMINALEIRP, 8) &&
           VerifyField<double>(verifier, VT_MINPSD, 8) &&
           VerifyField<double>(verifier, VT_MAXPSD, 8) &&
           VerifyField<double>(verifier, VT_FREQUENCYSHIFT, 8) &&
           VerifyField<uint8_t>(verifier, VT_PEAK, 1) &&
           VerifyOffset(verifier, VT_ANTENNANAME) &&
           verifier.VerifyString(antennaName()) &&
           VerifyOffset(verifier, VT_DETECTIONSTATUS) &&
           verifier.VerifyString(detectionStatus()) &&
           VerifyOffset(verifier, VT_COLLECTIONMODE) &&
           verifier.VerifyString(collectionMode()) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyField<double>(verifier, VT_NOISEPWRDENSITY, 8) &&
           VerifyOffset(verifier, VT_CARRIERSTANDARD) &&
           verifier.VerifyString(carrierStandard()) &&
           VerifyOffset(verifier, VT_MODULATION) &&
           verifier.VerifyString(modulation()) &&
           VerifyField<int32_t>(verifier, VT_INNERCODINGRATE, 4) &&
           VerifyField<int32_t>(verifier, VT_OUTERCODINGRATE, 4) &&
           VerifyOffset(verifier, VT_TRANSMITFILTERTYPE) &&
           verifier.VerifyString(transmitFilterType()) &&
           VerifyField<double>(verifier, VT_TRANSMITFILTERROLLOFF, 8) &&
           VerifyField<double>(verifier, VT_SYMBOLTONOISERATIO, 8) &&
           VerifyField<double>(verifier, VT_BITERRORRATE, 8) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(descriptor()) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           verifier.EndTable();
  }
};

struct RFObservation_AbridgedBuilder {
  typedef RFObservation_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(RFObservation_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(RFObservation_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_obTime(::flatbuffers::Offset<::flatbuffers::String> obTime) {
    fbb_.AddOffset(RFObservation_Abridged::VT_OBTIME, obTime);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(RFObservation_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(RFObservation_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(RFObservation_Abridged::VT_TYPE, type);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(RFObservation_Abridged::VT_SATNO, satNo, 0);
  }
  void add_taskId(::flatbuffers::Offset<::flatbuffers::String> taskId) {
    fbb_.AddOffset(RFObservation_Abridged::VT_TASKID, taskId);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(RFObservation_Abridged::VT_TRANSACTIONID, transactionId);
  }
  void add_trackId(::flatbuffers::Offset<::flatbuffers::String> trackId) {
    fbb_.AddOffset(RFObservation_Abridged::VT_TRACKID, trackId);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(RFObservation_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(RFObservation_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  void add_uct(bool uct) {
    fbb_.AddElement<uint8_t>(RFObservation_Abridged::VT_UCT, static_cast<uint8_t>(uct), 0);
  }
  void add_transponder(::flatbuffers::Offset<::flatbuffers::String> transponder) {
    fbb_.AddOffset(RFObservation_Abridged::VT_TRANSPONDER, transponder);
  }
  void add_azimuth(double azimuth) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_AZIMUTH, azimuth, 0.0);
  }
  void add_azimuthUnc(double azimuthUnc) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_AZIMUTHUNC, azimuthUnc, 0.0);
  }
  void add_azimuthRate(double azimuthRate) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_AZIMUTHRATE, azimuthRate, 0.0);
  }
  void add_elevation(double elevation) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_ELEVATION, elevation, 0.0);
  }
  void add_elevationUnc(double elevationUnc) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_ELEVATIONUNC, elevationUnc, 0.0);
  }
  void add_elevationRate(double elevationRate) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_ELEVATIONRATE, elevationRate, 0.0);
  }
  void add_range(double range) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_RANGE, range, 0.0);
  }
  void add_rangeUnc(double rangeUnc) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_RANGEUNC, rangeUnc, 0.0);
  }
  void add_rangeRate(double rangeRate) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_RANGERATE, rangeRate, 0.0);
  }
  void add_rangeRateUnc(double rangeRateUnc) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_RANGERATEUNC, rangeRateUnc, 0.0);
  }
  void add_trackRange(double trackRange) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_TRACKRANGE, trackRange, 0.0);
  }
  void add_senlat(double senlat) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_SENLAT, senlat, 0.0);
  }
  void add_senlon(double senlon) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_SENLON, senlon, 0.0);
  }
  void add_senalt(double senalt) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_SENALT, senalt, 0.0);
  }
  void add_elnot(::flatbuffers::Offset<::flatbuffers::String> elnot) {
    fbb_.AddOffset(RFObservation_Abridged::VT_ELNOT, elnot);
  }
  void add_frequency(double frequency) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_FREQUENCY, frequency, 0.0);
  }
  void add_nominalFrequency(double nominalFrequency) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_NOMINALFREQUENCY, nominalFrequency, 0.0);
  }
  void add_startFrequency(double startFrequency) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_STARTFREQUENCY, startFrequency, 0.0);
  }
  void add_endFrequency(double endFrequency) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_ENDFREQUENCY, endFrequency, 0.0);
  }
  void add_relativeCarrierPower(double relativeCarrierPower) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_RELATIVECARRIERPOWER, relativeCarrierPower, 0.0);
  }
  void add_spectrumAnalyzerPower(double spectrumAnalyzerPower) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_SPECTRUMANALYZERPOWER, spectrumAnalyzerPower, 0.0);
  }
  void add_relativeNoiseFloor(double relativeNoiseFloor) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_RELATIVENOISEFLOOR, relativeNoiseFloor, 0.0);
  }
  void add_referenceLevel(double referenceLevel) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_REFERENCELEVEL, referenceLevel, 0.0);
  }
  void add_pgri(double pgri) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_PGRI, pgri, 0.0);
  }
  void add_confidence(double confidence) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_CONFIDENCE, confidence, 0.0);
  }
  void add_incoming(bool incoming) {
    fbb_.AddElement<uint8_t>(RFObservation_Abridged::VT_INCOMING, static_cast<uint8_t>(incoming), 0);
  }
  void add_switchPoint(int32_t switchPoint) {
    fbb_.AddElement<int32_t>(RFObservation_Abridged::VT_SWITCHPOINT, switchPoint, 0);
  }
  void add_baudRate(double baudRate) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_BAUDRATE, baudRate, 0.0);
  }
  void add_snr(double snr) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_SNR, snr, 0.0);
  }
  void add_nominalSnr(double nominalSnr) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_NOMINALSNR, nominalSnr, 0.0);
  }
  void add_polarity(double polarity) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_POLARITY, polarity, 0.0);
  }
  void add_polarityType(RFObservation_Abridged_polarityType_Enum polarityType) {
    fbb_.AddElement<int8_t>(RFObservation_Abridged::VT_POLARITYTYPE, static_cast<int8_t>(polarityType), 0);
  }
  void add_channel(int32_t channel) {
    fbb_.AddElement<int32_t>(RFObservation_Abridged::VT_CHANNEL, channel, 0);
  }
  void add_powerOverNoise(double powerOverNoise) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_POWEROVERNOISE, powerOverNoise, 0.0);
  }
  void add_nominalPowerOverNoise(double nominalPowerOverNoise) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_NOMINALPOWEROVERNOISE, nominalPowerOverNoise, 0.0);
  }
  void add_bandwidth(double bandwidth) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_BANDWIDTH, bandwidth, 0.0);
  }
  void add_nominalBandwidth(double nominalBandwidth) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_NOMINALBANDWIDTH, nominalBandwidth, 0.0);
  }
  void add_resolutionBandwidth(double resolutionBandwidth) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_RESOLUTIONBANDWIDTH, resolutionBandwidth, 0.0);
  }
  void add_videoBandwidth(double videoBandwidth) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_VIDEOBANDWIDTH, videoBandwidth, 0.0);
  }
  void add_eirp(double eirp) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_EIRP, eirp, 0.0);
  }
  void add_nominalEirp(double nominalEirp) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_NOMINALEIRP, nominalEirp, 0.0);
  }
  void add_minPSD(double minPSD) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_MINPSD, minPSD, 0.0);
  }
  void add_maxPSD(double maxPSD) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_MAXPSD, maxPSD, 0.0);
  }
  void add_frequencyShift(double frequencyShift) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_FREQUENCYSHIFT, frequencyShift, 0.0);
  }
  void add_peak(bool peak) {
    fbb_.AddElement<uint8_t>(RFObservation_Abridged::VT_PEAK, static_cast<uint8_t>(peak), 0);
  }
  void add_antennaName(::flatbuffers::Offset<::flatbuffers::String> antennaName) {
    fbb_.AddOffset(RFObservation_Abridged::VT_ANTENNANAME, antennaName);
  }
  void add_detectionStatus(::flatbuffers::Offset<::flatbuffers::String> detectionStatus) {
    fbb_.AddOffset(RFObservation_Abridged::VT_DETECTIONSTATUS, detectionStatus);
  }
  void add_collectionMode(::flatbuffers::Offset<::flatbuffers::String> collectionMode) {
    fbb_.AddOffset(RFObservation_Abridged::VT_COLLECTIONMODE, collectionMode);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(RFObservation_Abridged::VT_RAWFILEURI, rawFileURI);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(RFObservation_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(RFObservation_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(RFObservation_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(RFObservation_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(RFObservation_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(RFObservation_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_noisePwrDensity(double noisePwrDensity) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_NOISEPWRDENSITY, noisePwrDensity, 0.0);
  }
  void add_carrierStandard(::flatbuffers::Offset<::flatbuffers::String> carrierStandard) {
    fbb_.AddOffset(RFObservation_Abridged::VT_CARRIERSTANDARD, carrierStandard);
  }
  void add_modulation(::flatbuffers::Offset<::flatbuffers::String> modulation) {
    fbb_.AddOffset(RFObservation_Abridged::VT_MODULATION, modulation);
  }
  void add_innerCodingRate(int32_t innerCodingRate) {
    fbb_.AddElement<int32_t>(RFObservation_Abridged::VT_INNERCODINGRATE, innerCodingRate, 0);
  }
  void add_outerCodingRate(int32_t outerCodingRate) {
    fbb_.AddElement<int32_t>(RFObservation_Abridged::VT_OUTERCODINGRATE, outerCodingRate, 0);
  }
  void add_transmitFilterType(::flatbuffers::Offset<::flatbuffers::String> transmitFilterType) {
    fbb_.AddOffset(RFObservation_Abridged::VT_TRANSMITFILTERTYPE, transmitFilterType);
  }
  void add_transmitFilterRollOff(double transmitFilterRollOff) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_TRANSMITFILTERROLLOFF, transmitFilterRollOff, 0.0);
  }
  void add_symbolToNoiseRatio(double symbolToNoiseRatio) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_SYMBOLTONOISERATIO, symbolToNoiseRatio, 0.0);
  }
  void add_bitErrorRate(double bitErrorRate) {
    fbb_.AddElement<double>(RFObservation_Abridged::VT_BITERRORRATE, bitErrorRate, 0.0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(RFObservation_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(RFObservation_Abridged::VT_SOURCEDL, sourceDL);
  }
  void add_descriptor(::flatbuffers::Offset<::flatbuffers::String> descriptor) {
    fbb_.AddOffset(RFObservation_Abridged::VT_DESCRIPTOR, descriptor);
  }
  void add_url(::flatbuffers::Offset<::flatbuffers::String> url) {
    fbb_.AddOffset(RFObservation_Abridged::VT_URL, url);
  }
  explicit RFObservation_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RFObservation_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RFObservation_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RFObservation_Abridged> CreateRFObservation_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> taskId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trackId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    bool uct = false,
    ::flatbuffers::Offset<::flatbuffers::String> transponder = 0,
    double azimuth = 0.0,
    double azimuthUnc = 0.0,
    double azimuthRate = 0.0,
    double elevation = 0.0,
    double elevationUnc = 0.0,
    double elevationRate = 0.0,
    double range = 0.0,
    double rangeUnc = 0.0,
    double rangeRate = 0.0,
    double rangeRateUnc = 0.0,
    double trackRange = 0.0,
    double senlat = 0.0,
    double senlon = 0.0,
    double senalt = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> elnot = 0,
    double frequency = 0.0,
    double nominalFrequency = 0.0,
    double startFrequency = 0.0,
    double endFrequency = 0.0,
    double relativeCarrierPower = 0.0,
    double spectrumAnalyzerPower = 0.0,
    double relativeNoiseFloor = 0.0,
    double referenceLevel = 0.0,
    double pgri = 0.0,
    double confidence = 0.0,
    bool incoming = false,
    int32_t switchPoint = 0,
    double baudRate = 0.0,
    double snr = 0.0,
    double nominalSnr = 0.0,
    double polarity = 0.0,
    RFObservation_Abridged_polarityType_Enum polarityType = RFObservation_Abridged_polarityType_Enum_H,
    int32_t channel = 0,
    double powerOverNoise = 0.0,
    double nominalPowerOverNoise = 0.0,
    double bandwidth = 0.0,
    double nominalBandwidth = 0.0,
    double resolutionBandwidth = 0.0,
    double videoBandwidth = 0.0,
    double eirp = 0.0,
    double nominalEirp = 0.0,
    double minPSD = 0.0,
    double maxPSD = 0.0,
    double frequencyShift = 0.0,
    bool peak = false,
    ::flatbuffers::Offset<::flatbuffers::String> antennaName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> detectionStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> collectionMode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    RFObservation_Abridged_dataMode_Enum dataMode = RFObservation_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    double noisePwrDensity = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> carrierStandard = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modulation = 0,
    int32_t innerCodingRate = 0,
    int32_t outerCodingRate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transmitFilterType = 0,
    double transmitFilterRollOff = 0.0,
    double symbolToNoiseRatio = 0.0,
    double bitErrorRate = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> descriptor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> url = 0) {
  RFObservation_AbridgedBuilder builder_(_fbb);
  builder_.add_bitErrorRate(bitErrorRate);
  builder_.add_symbolToNoiseRatio(symbolToNoiseRatio);
  builder_.add_transmitFilterRollOff(transmitFilterRollOff);
  builder_.add_noisePwrDensity(noisePwrDensity);
  builder_.add_frequencyShift(frequencyShift);
  builder_.add_maxPSD(maxPSD);
  builder_.add_minPSD(minPSD);
  builder_.add_nominalEirp(nominalEirp);
  builder_.add_eirp(eirp);
  builder_.add_videoBandwidth(videoBandwidth);
  builder_.add_resolutionBandwidth(resolutionBandwidth);
  builder_.add_nominalBandwidth(nominalBandwidth);
  builder_.add_bandwidth(bandwidth);
  builder_.add_nominalPowerOverNoise(nominalPowerOverNoise);
  builder_.add_powerOverNoise(powerOverNoise);
  builder_.add_polarity(polarity);
  builder_.add_nominalSnr(nominalSnr);
  builder_.add_snr(snr);
  builder_.add_baudRate(baudRate);
  builder_.add_confidence(confidence);
  builder_.add_pgri(pgri);
  builder_.add_referenceLevel(referenceLevel);
  builder_.add_relativeNoiseFloor(relativeNoiseFloor);
  builder_.add_spectrumAnalyzerPower(spectrumAnalyzerPower);
  builder_.add_relativeCarrierPower(relativeCarrierPower);
  builder_.add_endFrequency(endFrequency);
  builder_.add_startFrequency(startFrequency);
  builder_.add_nominalFrequency(nominalFrequency);
  builder_.add_frequency(frequency);
  builder_.add_senalt(senalt);
  builder_.add_senlon(senlon);
  builder_.add_senlat(senlat);
  builder_.add_trackRange(trackRange);
  builder_.add_rangeRateUnc(rangeRateUnc);
  builder_.add_rangeRate(rangeRate);
  builder_.add_rangeUnc(rangeUnc);
  builder_.add_range(range);
  builder_.add_elevationRate(elevationRate);
  builder_.add_elevationUnc(elevationUnc);
  builder_.add_elevation(elevation);
  builder_.add_azimuthRate(azimuthRate);
  builder_.add_azimuthUnc(azimuthUnc);
  builder_.add_azimuth(azimuth);
  builder_.add_url(url);
  builder_.add_descriptor(descriptor);
  builder_.add_sourceDL(sourceDL);
  builder_.add_origNetwork(origNetwork);
  builder_.add_transmitFilterType(transmitFilterType);
  builder_.add_outerCodingRate(outerCodingRate);
  builder_.add_innerCodingRate(innerCodingRate);
  builder_.add_modulation(modulation);
  builder_.add_carrierStandard(carrierStandard);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_collectionMode(collectionMode);
  builder_.add_detectionStatus(detectionStatus);
  builder_.add_antennaName(antennaName);
  builder_.add_channel(channel);
  builder_.add_switchPoint(switchPoint);
  builder_.add_elnot(elnot);
  builder_.add_transponder(transponder);
  builder_.add_origSensorId(origSensorId);
  builder_.add_origObjectId(origObjectId);
  builder_.add_trackId(trackId);
  builder_.add_transactionId(transactionId);
  builder_.add_taskId(taskId);
  builder_.add_satNo(satNo);
  builder_.add_type(type);
  builder_.add_idSensor(idSensor);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_obTime(obTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_peak(peak);
  builder_.add_polarityType(polarityType);
  builder_.add_incoming(incoming);
  builder_.add_uct(uct);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RFObservation_Abridged> CreateRFObservation_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *obTime = nullptr,
    const char *idOnOrbit = nullptr,
    const char *idSensor = nullptr,
    const char *type = nullptr,
    int32_t satNo = 0,
    const char *taskId = nullptr,
    const char *transactionId = nullptr,
    const char *trackId = nullptr,
    const char *origObjectId = nullptr,
    const char *origSensorId = nullptr,
    bool uct = false,
    const char *transponder = nullptr,
    double azimuth = 0.0,
    double azimuthUnc = 0.0,
    double azimuthRate = 0.0,
    double elevation = 0.0,
    double elevationUnc = 0.0,
    double elevationRate = 0.0,
    double range = 0.0,
    double rangeUnc = 0.0,
    double rangeRate = 0.0,
    double rangeRateUnc = 0.0,
    double trackRange = 0.0,
    double senlat = 0.0,
    double senlon = 0.0,
    double senalt = 0.0,
    const char *elnot = nullptr,
    double frequency = 0.0,
    double nominalFrequency = 0.0,
    double startFrequency = 0.0,
    double endFrequency = 0.0,
    double relativeCarrierPower = 0.0,
    double spectrumAnalyzerPower = 0.0,
    double relativeNoiseFloor = 0.0,
    double referenceLevel = 0.0,
    double pgri = 0.0,
    double confidence = 0.0,
    bool incoming = false,
    int32_t switchPoint = 0,
    double baudRate = 0.0,
    double snr = 0.0,
    double nominalSnr = 0.0,
    double polarity = 0.0,
    RFObservation_Abridged_polarityType_Enum polarityType = RFObservation_Abridged_polarityType_Enum_H,
    int32_t channel = 0,
    double powerOverNoise = 0.0,
    double nominalPowerOverNoise = 0.0,
    double bandwidth = 0.0,
    double nominalBandwidth = 0.0,
    double resolutionBandwidth = 0.0,
    double videoBandwidth = 0.0,
    double eirp = 0.0,
    double nominalEirp = 0.0,
    double minPSD = 0.0,
    double maxPSD = 0.0,
    double frequencyShift = 0.0,
    bool peak = false,
    const char *antennaName = nullptr,
    const char *detectionStatus = nullptr,
    const char *collectionMode = nullptr,
    const char *rawFileURI = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    RFObservation_Abridged_dataMode_Enum dataMode = RFObservation_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    double noisePwrDensity = 0.0,
    const char *carrierStandard = nullptr,
    const char *modulation = nullptr,
    int32_t innerCodingRate = 0,
    int32_t outerCodingRate = 0,
    const char *transmitFilterType = nullptr,
    double transmitFilterRollOff = 0.0,
    double symbolToNoiseRatio = 0.0,
    double bitErrorRate = 0.0,
    const char *origNetwork = nullptr,
    const char *sourceDL = nullptr,
    const char *descriptor = nullptr,
    const char *url = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto obTime__ = obTime ? _fbb.CreateString(obTime) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto taskId__ = taskId ? _fbb.CreateString(taskId) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto trackId__ = trackId ? _fbb.CreateString(trackId) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto transponder__ = transponder ? _fbb.CreateString(transponder) : 0;
  auto elnot__ = elnot ? _fbb.CreateString(elnot) : 0;
  auto antennaName__ = antennaName ? _fbb.CreateString(antennaName) : 0;
  auto detectionStatus__ = detectionStatus ? _fbb.CreateString(detectionStatus) : 0;
  auto collectionMode__ = collectionMode ? _fbb.CreateString(collectionMode) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto carrierStandard__ = carrierStandard ? _fbb.CreateString(carrierStandard) : 0;
  auto modulation__ = modulation ? _fbb.CreateString(modulation) : 0;
  auto transmitFilterType__ = transmitFilterType ? _fbb.CreateString(transmitFilterType) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto descriptor__ = descriptor ? _fbb.CreateString(descriptor) : 0;
  auto url__ = url ? _fbb.CreateString(url) : 0;
  return CreateRFObservation_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      obTime__,
      idOnOrbit__,
      idSensor__,
      type__,
      satNo,
      taskId__,
      transactionId__,
      trackId__,
      origObjectId__,
      origSensorId__,
      uct,
      transponder__,
      azimuth,
      azimuthUnc,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationRate,
      range,
      rangeUnc,
      rangeRate,
      rangeRateUnc,
      trackRange,
      senlat,
      senlon,
      senalt,
      elnot__,
      frequency,
      nominalFrequency,
      startFrequency,
      endFrequency,
      relativeCarrierPower,
      spectrumAnalyzerPower,
      relativeNoiseFloor,
      referenceLevel,
      pgri,
      confidence,
      incoming,
      switchPoint,
      baudRate,
      snr,
      nominalSnr,
      polarity,
      polarityType,
      channel,
      powerOverNoise,
      nominalPowerOverNoise,
      bandwidth,
      nominalBandwidth,
      resolutionBandwidth,
      videoBandwidth,
      eirp,
      nominalEirp,
      minPSD,
      maxPSD,
      frequencyShift,
      peak,
      antennaName__,
      detectionStatus__,
      collectionMode__,
      rawFileURI__,
      source__,
      origin__,
      dataMode,
      createdAt__,
      createdBy__,
      noisePwrDensity,
      carrierStandard__,
      modulation__,
      innerCodingRate,
      outerCodingRate,
      transmitFilterType__,
      transmitFilterRollOff,
      symbolToNoiseRatio,
      bitErrorRate,
      origNetwork__,
      sourceDL__,
      descriptor__,
      url__);
}

inline const RFObservation_Abridged *GetRFObservation_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<RFObservation_Abridged>(buf);
}

inline const RFObservation_Abridged *GetSizePrefixedRFObservation_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RFObservation_Abridged>(buf);
}

inline const char *RFObservation_AbridgedIdentifier() {
  return "RFOB";
}

inline bool RFObservation_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFObservation_AbridgedIdentifier());
}

inline bool SizePrefixedRFObservation_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFObservation_AbridgedIdentifier(), true);
}

inline bool VerifyRFObservation_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RFObservation_Abridged>(RFObservation_AbridgedIdentifier());
}

inline bool VerifySizePrefixedRFObservation_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RFObservation_Abridged>(RFObservation_AbridgedIdentifier());
}

inline void FinishRFObservation_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFObservation_Abridged> root) {
  fbb.Finish(root, RFObservation_AbridgedIdentifier());
}

inline void FinishSizePrefixedRFObservation_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFObservation_Abridged> root) {
  fbb.FinishSizePrefixed(root, RFObservation_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
