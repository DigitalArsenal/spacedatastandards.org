// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct OnorbitThruster_Abridged;
struct OnorbitThruster_AbridgedBuilder;

enum OnorbitThruster_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  OnorbitThruster_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  OnorbitThruster_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  OnorbitThruster_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  OnorbitThruster_Abridged_dataMode_Enum_EXERCISE = 3,
  OnorbitThruster_Abridged_dataMode_Enum_MIN = OnorbitThruster_Abridged_dataMode_Enum_REAL,
  OnorbitThruster_Abridged_dataMode_Enum_MAX = OnorbitThruster_Abridged_dataMode_Enum_EXERCISE
};

inline const OnorbitThruster_Abridged_dataMode_Enum (&EnumValuesOnorbitThruster_Abridged_dataMode_Enum())[4] {
  static const OnorbitThruster_Abridged_dataMode_Enum values[] = {
    OnorbitThruster_Abridged_dataMode_Enum_REAL,
    OnorbitThruster_Abridged_dataMode_Enum_TEST,
    OnorbitThruster_Abridged_dataMode_Enum_SIMULATED,
    OnorbitThruster_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesOnorbitThruster_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameOnorbitThruster_Abridged_dataMode_Enum(OnorbitThruster_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, OnorbitThruster_Abridged_dataMode_Enum_REAL, OnorbitThruster_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOnorbitThruster_Abridged_dataMode_Enum()[index];
}

/// /// No description available.
struct OnorbitThruster_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OnorbitThruster_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDONORBIT = 6,
    VT_IDENGINE = 8,
    VT_CLASSIFICATIONMARKING = 10,
    VT_TYPE = 12,
    VT_QUANTITY = 14,
    VT_CREATEDAT = 16,
    VT_CREATEDBY = 18,
    VT_SOURCE = 20,
    VT_ORIGIN = 22,
    VT_DATAMODE = 24,
    VT_ENGINE = 26,
    VT_ORIGNETWORK = 28
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONORBITTHRUSTER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// ID of the on-orbit object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// ID of the Engine.
  /// Example: /// Example: ENGINE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idEngine() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENGINE);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The type of thruster associated with this record (e.g. LAE, Hydrazine REA, etc.).
  /// Example: /// Example: Hydrazine REA
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The number of engines/thrusters on the spacecraft of the type identified by idEngine.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t quantity() const {
    return GetField<int32_t>(VT_QUANTITY, 0);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  OnorbitThruster_Abridged_dataMode_Enum dataMode() const {
    return static_cast<OnorbitThruster_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *engine() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENGINE);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_IDENGINE) &&
           verifier.VerifyString(idEngine()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<int32_t>(verifier, VT_QUANTITY, 4) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ENGINE) &&
           verifier.VerifyString(engine()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct OnorbitThruster_AbridgedBuilder {
  typedef OnorbitThruster_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_ID, id);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_idEngine(::flatbuffers::Offset<::flatbuffers::String> idEngine) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_IDENGINE, idEngine);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_TYPE, type);
  }
  void add_quantity(int32_t quantity) {
    fbb_.AddElement<int32_t>(OnorbitThruster_Abridged::VT_QUANTITY, quantity, 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_ORIGIN, origin);
  }
  void add_dataMode(OnorbitThruster_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(OnorbitThruster_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_engine(::flatbuffers::Offset<::flatbuffers::String> engine) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_ENGINE, engine);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(OnorbitThruster_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  explicit OnorbitThruster_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<OnorbitThruster_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<OnorbitThruster_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<OnorbitThruster_Abridged> CreateOnorbitThruster_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEngine = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    int32_t quantity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    OnorbitThruster_Abridged_dataMode_Enum dataMode = OnorbitThruster_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> engine = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  OnorbitThruster_AbridgedBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_engine(engine);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_quantity(quantity);
  builder_.add_type(type);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idEngine(idEngine);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<OnorbitThruster_Abridged> CreateOnorbitThruster_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idOnOrbit = nullptr,
    const char *idEngine = nullptr,
    const char *classificationMarking = nullptr,
    const char *type = nullptr,
    int32_t quantity = 0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    OnorbitThruster_Abridged_dataMode_Enum dataMode = OnorbitThruster_Abridged_dataMode_Enum_REAL,
    const char *engine = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto idEngine__ = idEngine ? _fbb.CreateString(idEngine) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto engine__ = engine ? _fbb.CreateString(engine) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateOnorbitThruster_Abridged(
      _fbb,
      id__,
      idOnOrbit__,
      idEngine__,
      classificationMarking__,
      type__,
      quantity,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      engine__,
      origNetwork__);
}

inline const OnorbitThruster_Abridged *GetOnorbitThruster_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<OnorbitThruster_Abridged>(buf);
}

inline const OnorbitThruster_Abridged *GetSizePrefixedOnorbitThruster_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<OnorbitThruster_Abridged>(buf);
}

inline const char *OnorbitThruster_AbridgedIdentifier() {
  return "ONOR";
}

inline bool OnorbitThruster_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitThruster_AbridgedIdentifier());
}

inline bool SizePrefixedOnorbitThruster_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, OnorbitThruster_AbridgedIdentifier(), true);
}

inline bool VerifyOnorbitThruster_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OnorbitThruster_Abridged>(OnorbitThruster_AbridgedIdentifier());
}

inline bool VerifySizePrefixedOnorbitThruster_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OnorbitThruster_Abridged>(OnorbitThruster_AbridgedIdentifier());
}

inline void FinishOnorbitThruster_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitThruster_Abridged> root) {
  fbb.Finish(root, OnorbitThruster_AbridgedIdentifier());
}

inline void FinishSizePrefixedOnorbitThruster_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<OnorbitThruster_Abridged> root) {
  fbb.FinishSizePrefixed(root, OnorbitThruster_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
