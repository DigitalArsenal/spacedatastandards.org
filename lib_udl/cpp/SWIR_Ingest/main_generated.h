// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SWIR_Ingest;
struct SWIR_IngestBuilder;

enum SWIR_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SWIR_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SWIR_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SWIR_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SWIR_Ingest_dataMode_Enum_EXERCISE = 3,
  SWIR_Ingest_dataMode_Enum_MIN = SWIR_Ingest_dataMode_Enum_REAL,
  SWIR_Ingest_dataMode_Enum_MAX = SWIR_Ingest_dataMode_Enum_EXERCISE
};

inline const SWIR_Ingest_dataMode_Enum (&EnumValuesSWIR_Ingest_dataMode_Enum())[4] {
  static const SWIR_Ingest_dataMode_Enum values[] = {
    SWIR_Ingest_dataMode_Enum_REAL,
    SWIR_Ingest_dataMode_Enum_TEST,
    SWIR_Ingest_dataMode_Enum_SIMULATED,
    SWIR_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSWIR_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSWIR_Ingest_dataMode_Enum(SWIR_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SWIR_Ingest_dataMode_Enum_REAL, SWIR_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSWIR_Ingest_dataMode_Enum()[index];
}

/// /// Data representing observed short wave infrared (SWIR) measurements.
struct SWIR_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SWIR_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_TS = 10,
    VT_SOLARPHASEANGLE = 12,
    VT_LAT = 14,
    VT_LON = 16,
    VT_LOCATIONNAME = 18,
    VT_BADWAVE = 20,
    VT_WAVELENGTHS = 22,
    VT_ABSFLUXES = 24,
    VT_RATIOWAVELENGTHS = 26,
    VT_FLUXRATIOS = 28,
    VT_ORIGOBJECTID = 30,
    VT_SOURCE = 32,
    VT_ORIGIN = 34,
    VT_SATNO = 36,
    VT_DATAMODE = 38,
    VT_CREATEDAT = 40,
    VT_CREATEDBY = 42,
    VT_ORIGNETWORK = 44
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SWIR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the target on-orbit object.
  /// Example: /// Example: 45234
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Data timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double solarPhaseAngle() const {
    return GetField<double>(VT_SOLARPHASEANGLE, 0.0);
  }
  /// Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 70.55208
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 81.18191
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Location/name of the observing sensor.
  /// Example: /// Example: AeroTel
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *locationName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOCATIONNAME);
  }
  /// User comments concerning sensor or data limitations.
  /// Example: /// Example: Example Comments
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *badWave() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BADWAVE);
  }
  /// Array of wavelengths, in microns. This array should correspond with the same-sized array of absFluxes.
  /// Example: /// Example: [1.23, 4.56]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *wavelengths() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_WAVELENGTHS);
  }
  /// Array of absolute flux measurement data, in Watts per square centimeter per micron. This array should correspond with the same-sized array of wavelengths.
  /// Example: /// Example: [1.23, 4.56]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *absFluxes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ABSFLUXES);
  }
  /// Array of ratio wavelength data. This array should correspond with the same-sized array of fluxRatios.
  /// Example: /// Example: [1.23, 4.56]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ratioWavelengths() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RATIOWAVELENGTHS);
  }
  /// Array of flux ratio data. This array should correspond with the same-sized array of ratioWavelengths.
  /// Example: /// Example: [1.23, 4.56]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *fluxRatios() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_FLUXRATIOS);
  }
  /// Original object ID or Catalog Number provided by source.
  /// Example: /// Example: WildBlue-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 25544
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SWIR_Ingest_dataMode_Enum dataMode() const {
    return static_cast<SWIR_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyField<double>(verifier, VT_SOLARPHASEANGLE, 8) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyOffset(verifier, VT_LOCATIONNAME) &&
           verifier.VerifyString(locationName()) &&
           VerifyOffset(verifier, VT_BADWAVE) &&
           verifier.VerifyString(badWave()) &&
           VerifyOffset(verifier, VT_WAVELENGTHS) &&
           verifier.VerifyVector(wavelengths()) &&
           verifier.VerifyVectorOfStrings(wavelengths()) &&
           VerifyOffset(verifier, VT_ABSFLUXES) &&
           verifier.VerifyVector(absFluxes()) &&
           verifier.VerifyVectorOfStrings(absFluxes()) &&
           VerifyOffset(verifier, VT_RATIOWAVELENGTHS) &&
           verifier.VerifyVector(ratioWavelengths()) &&
           verifier.VerifyVectorOfStrings(ratioWavelengths()) &&
           VerifyOffset(verifier, VT_FLUXRATIOS) &&
           verifier.VerifyVector(fluxRatios()) &&
           verifier.VerifyVectorOfStrings(fluxRatios()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct SWIR_IngestBuilder {
  typedef SWIR_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SWIR_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SWIR_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(SWIR_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(SWIR_Ingest::VT_TS, ts);
  }
  void add_solarPhaseAngle(double solarPhaseAngle) {
    fbb_.AddElement<double>(SWIR_Ingest::VT_SOLARPHASEANGLE, solarPhaseAngle, 0.0);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(SWIR_Ingest::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(SWIR_Ingest::VT_LON, lon, 0.0);
  }
  void add_locationName(::flatbuffers::Offset<::flatbuffers::String> locationName) {
    fbb_.AddOffset(SWIR_Ingest::VT_LOCATIONNAME, locationName);
  }
  void add_badWave(::flatbuffers::Offset<::flatbuffers::String> badWave) {
    fbb_.AddOffset(SWIR_Ingest::VT_BADWAVE, badWave);
  }
  void add_wavelengths(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> wavelengths) {
    fbb_.AddOffset(SWIR_Ingest::VT_WAVELENGTHS, wavelengths);
  }
  void add_absFluxes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> absFluxes) {
    fbb_.AddOffset(SWIR_Ingest::VT_ABSFLUXES, absFluxes);
  }
  void add_ratioWavelengths(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ratioWavelengths) {
    fbb_.AddOffset(SWIR_Ingest::VT_RATIOWAVELENGTHS, ratioWavelengths);
  }
  void add_fluxRatios(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> fluxRatios) {
    fbb_.AddOffset(SWIR_Ingest::VT_FLUXRATIOS, fluxRatios);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(SWIR_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SWIR_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SWIR_Ingest::VT_ORIGIN, origin);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(SWIR_Ingest::VT_SATNO, satNo, 0);
  }
  void add_dataMode(SWIR_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SWIR_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SWIR_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SWIR_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SWIR_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  explicit SWIR_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SWIR_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SWIR_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SWIR_Ingest> CreateSWIR_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    double solarPhaseAngle = 0.0,
    double lat = 0.0,
    double lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> locationName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> badWave = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> wavelengths = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> absFluxes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ratioWavelengths = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> fluxRatios = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    int32_t satNo = 0,
    SWIR_Ingest_dataMode_Enum dataMode = SWIR_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  SWIR_IngestBuilder builder_(_fbb);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_solarPhaseAngle(solarPhaseAngle);
  builder_.add_origNetwork(origNetwork);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_satNo(satNo);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_origObjectId(origObjectId);
  builder_.add_fluxRatios(fluxRatios);
  builder_.add_ratioWavelengths(ratioWavelengths);
  builder_.add_absFluxes(absFluxes);
  builder_.add_wavelengths(wavelengths);
  builder_.add_badWave(badWave);
  builder_.add_locationName(locationName);
  builder_.add_ts(ts);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SWIR_Ingest> CreateSWIR_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    const char *ts = nullptr,
    double solarPhaseAngle = 0.0,
    double lat = 0.0,
    double lon = 0.0,
    const char *locationName = nullptr,
    const char *badWave = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *wavelengths = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *absFluxes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ratioWavelengths = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *fluxRatios = nullptr,
    const char *origObjectId = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    int32_t satNo = 0,
    SWIR_Ingest_dataMode_Enum dataMode = SWIR_Ingest_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto locationName__ = locationName ? _fbb.CreateString(locationName) : 0;
  auto badWave__ = badWave ? _fbb.CreateString(badWave) : 0;
  auto wavelengths__ = wavelengths ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*wavelengths) : 0;
  auto absFluxes__ = absFluxes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*absFluxes) : 0;
  auto ratioWavelengths__ = ratioWavelengths ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ratioWavelengths) : 0;
  auto fluxRatios__ = fluxRatios ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*fluxRatios) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSWIR_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      ts__,
      solarPhaseAngle,
      lat,
      lon,
      locationName__,
      badWave__,
      wavelengths__,
      absFluxes__,
      ratioWavelengths__,
      fluxRatios__,
      origObjectId__,
      source__,
      origin__,
      satNo,
      dataMode,
      createdAt__,
      createdBy__,
      origNetwork__);
}

inline const SWIR_Ingest *GetSWIR_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<SWIR_Ingest>(buf);
}

inline const SWIR_Ingest *GetSizePrefixedSWIR_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SWIR_Ingest>(buf);
}

inline const char *SWIR_IngestIdentifier() {
  return "SWIR";
}

inline bool SWIR_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SWIR_IngestIdentifier());
}

inline bool SizePrefixedSWIR_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SWIR_IngestIdentifier(), true);
}

inline bool VerifySWIR_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SWIR_Ingest>(SWIR_IngestIdentifier());
}

inline bool VerifySizePrefixedSWIR_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SWIR_Ingest>(SWIR_IngestIdentifier());
}

inline void FinishSWIR_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SWIR_Ingest> root) {
  fbb.Finish(root, SWIR_IngestIdentifier());
}

inline void FinishSizePrefixedSWIR_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SWIR_Ingest> root) {
  fbb.FinishSizePrefixed(root, SWIR_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
