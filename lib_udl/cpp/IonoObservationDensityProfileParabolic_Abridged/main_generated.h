// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationDensityProfileParabolic_Abridged;
struct IonoObservationDensityProfileParabolic_AbridgedBuilder;

/// /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
struct IonoObservationDensityProfileParabolic_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationDensityProfileParabolic_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DESCRIPTION = 4,
    VT_PARABOLICITEMS = 6
  };
  /// General description of the QP computation algorithm.
  /// Example: /// Example: Best-fit algorithm in NHPC software.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Describes the E, F1, and F2 layers as parabolic-shape segments.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *parabolicItems() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PARABOLICITEMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_PARABOLICITEMS) &&
           verifier.VerifyVector(parabolicItems()) &&
           verifier.VerifyVectorOfStrings(parabolicItems()) &&
           verifier.EndTable();
  }
};

struct IonoObservationDensityProfileParabolic_AbridgedBuilder {
  typedef IonoObservationDensityProfileParabolic_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(IonoObservationDensityProfileParabolic_Abridged::VT_DESCRIPTION, description);
  }
  void add_parabolicItems(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> parabolicItems) {
    fbb_.AddOffset(IonoObservationDensityProfileParabolic_Abridged::VT_PARABOLICITEMS, parabolicItems);
  }
  explicit IonoObservationDensityProfileParabolic_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationDensityProfileParabolic_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationDensityProfileParabolic_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationDensityProfileParabolic_Abridged> CreateIonoObservationDensityProfileParabolic_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> parabolicItems = 0) {
  IonoObservationDensityProfileParabolic_AbridgedBuilder builder_(_fbb);
  builder_.add_parabolicItems(parabolicItems);
  builder_.add_description(description);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationDensityProfileParabolic_Abridged> CreateIonoObservationDensityProfileParabolic_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *description = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *parabolicItems = nullptr) {
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto parabolicItems__ = parabolicItems ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*parabolicItems) : 0;
  return CreateIonoObservationDensityProfileParabolic_Abridged(
      _fbb,
      description__,
      parabolicItems__);
}

inline const IonoObservationDensityProfileParabolic_Abridged *GetIonoObservationDensityProfileParabolic_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationDensityProfileParabolic_Abridged>(buf);
}

inline const IonoObservationDensityProfileParabolic_Abridged *GetSizePrefixedIonoObservationDensityProfileParabolic_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationDensityProfileParabolic_Abridged>(buf);
}

inline const char *IonoObservationDensityProfileParabolic_AbridgedIdentifier() {
  return "IONO";
}

inline bool IonoObservationDensityProfileParabolic_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileParabolic_AbridgedIdentifier());
}

inline bool SizePrefixedIonoObservationDensityProfileParabolic_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileParabolic_AbridgedIdentifier(), true);
}

inline bool VerifyIonoObservationDensityProfileParabolic_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationDensityProfileParabolic_Abridged>(IonoObservationDensityProfileParabolic_AbridgedIdentifier());
}

inline bool VerifySizePrefixedIonoObservationDensityProfileParabolic_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationDensityProfileParabolic_Abridged>(IonoObservationDensityProfileParabolic_AbridgedIdentifier());
}

inline void FinishIonoObservationDensityProfileParabolic_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileParabolic_Abridged> root) {
  fbb.Finish(root, IonoObservationDensityProfileParabolic_AbridgedIdentifier());
}

inline void FinishSizePrefixedIonoObservationDensityProfileParabolic_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileParabolic_Abridged> root) {
  fbb.FinishSizePrefixed(root, IonoObservationDensityProfileParabolic_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
