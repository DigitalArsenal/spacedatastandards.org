// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct FlightPlanAirRefuelEvents_Ingest;
struct FlightPlanAirRefuelEvents_IngestBuilder;

/// /// Collection of air refueling events occurring on this flight.
struct FlightPlanAirRefuelEvents_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlightPlanAirRefuelEvents_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ARDEGRADE = 4,
    VT_ARNUM = 6,
    VT_AREXCHANGEDFUEL = 8,
    VT_DIVERTFUEL = 10,
    VT_EXITFUEL = 12
  };
  /// Additional degrade for air refueling, cumulative with fuelDegrade field percent.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  double arDegrade() const {
    return GetField<double>(VT_ARDEGRADE, 0.0);
  }
  /// The number of this air refueling event within the flight plan.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t arNum() const {
    return GetField<int32_t>(VT_ARNUM, 0);
  }
  /// Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  double arExchangedFuel() const {
    return GetField<double>(VT_AREXCHANGEDFUEL, 0.0);
  }
  /// Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
  /// Example: /// Example: 143000.1
  /// Constraints: No constraints specified.
  double divertFuel() const {
    return GetField<double>(VT_DIVERTFUEL, 0.0);
  }
  /// Fuel remaining at the air refueling exit in pounds.
  /// Example: /// Example: 160000.1
  /// Constraints: No constraints specified.
  double exitFuel() const {
    return GetField<double>(VT_EXITFUEL, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_ARDEGRADE, 8) &&
           VerifyField<int32_t>(verifier, VT_ARNUM, 4) &&
           VerifyField<double>(verifier, VT_AREXCHANGEDFUEL, 8) &&
           VerifyField<double>(verifier, VT_DIVERTFUEL, 8) &&
           VerifyField<double>(verifier, VT_EXITFUEL, 8) &&
           verifier.EndTable();
  }
};

struct FlightPlanAirRefuelEvents_IngestBuilder {
  typedef FlightPlanAirRefuelEvents_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_arDegrade(double arDegrade) {
    fbb_.AddElement<double>(FlightPlanAirRefuelEvents_Ingest::VT_ARDEGRADE, arDegrade, 0.0);
  }
  void add_arNum(int32_t arNum) {
    fbb_.AddElement<int32_t>(FlightPlanAirRefuelEvents_Ingest::VT_ARNUM, arNum, 0);
  }
  void add_arExchangedFuel(double arExchangedFuel) {
    fbb_.AddElement<double>(FlightPlanAirRefuelEvents_Ingest::VT_AREXCHANGEDFUEL, arExchangedFuel, 0.0);
  }
  void add_divertFuel(double divertFuel) {
    fbb_.AddElement<double>(FlightPlanAirRefuelEvents_Ingest::VT_DIVERTFUEL, divertFuel, 0.0);
  }
  void add_exitFuel(double exitFuel) {
    fbb_.AddElement<double>(FlightPlanAirRefuelEvents_Ingest::VT_EXITFUEL, exitFuel, 0.0);
  }
  explicit FlightPlanAirRefuelEvents_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlightPlanAirRefuelEvents_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlightPlanAirRefuelEvents_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlightPlanAirRefuelEvents_Ingest> CreateFlightPlanAirRefuelEvents_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    double arDegrade = 0.0,
    int32_t arNum = 0,
    double arExchangedFuel = 0.0,
    double divertFuel = 0.0,
    double exitFuel = 0.0) {
  FlightPlanAirRefuelEvents_IngestBuilder builder_(_fbb);
  builder_.add_exitFuel(exitFuel);
  builder_.add_divertFuel(divertFuel);
  builder_.add_arExchangedFuel(arExchangedFuel);
  builder_.add_arDegrade(arDegrade);
  builder_.add_arNum(arNum);
  return builder_.Finish();
}

inline const FlightPlanAirRefuelEvents_Ingest *GetFlightPlanAirRefuelEvents_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<FlightPlanAirRefuelEvents_Ingest>(buf);
}

inline const FlightPlanAirRefuelEvents_Ingest *GetSizePrefixedFlightPlanAirRefuelEvents_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlightPlanAirRefuelEvents_Ingest>(buf);
}

inline const char *FlightPlanAirRefuelEvents_IngestIdentifier() {
  return "FLIG";
}

inline bool FlightPlanAirRefuelEvents_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanAirRefuelEvents_IngestIdentifier());
}

inline bool SizePrefixedFlightPlanAirRefuelEvents_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanAirRefuelEvents_IngestIdentifier(), true);
}

inline bool VerifyFlightPlanAirRefuelEvents_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlightPlanAirRefuelEvents_Ingest>(FlightPlanAirRefuelEvents_IngestIdentifier());
}

inline bool VerifySizePrefixedFlightPlanAirRefuelEvents_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlightPlanAirRefuelEvents_Ingest>(FlightPlanAirRefuelEvents_IngestIdentifier());
}

inline void FinishFlightPlanAirRefuelEvents_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanAirRefuelEvents_Ingest> root) {
  fbb.Finish(root, FlightPlanAirRefuelEvents_IngestIdentifier());
}

inline void FinishSizePrefixedFlightPlanAirRefuelEvents_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanAirRefuelEvents_Ingest> root) {
  fbb.FinishSizePrefixed(root, FlightPlanAirRefuelEvents_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
