// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct GroundImagery_Full;
struct GroundImagery_FullBuilder;

enum GroundImagery_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  GroundImagery_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  GroundImagery_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  GroundImagery_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  GroundImagery_Full_dataMode_Enum_EXERCISE = 3,
  GroundImagery_Full_dataMode_Enum_MIN = GroundImagery_Full_dataMode_Enum_REAL,
  GroundImagery_Full_dataMode_Enum_MAX = GroundImagery_Full_dataMode_Enum_EXERCISE
};

inline const GroundImagery_Full_dataMode_Enum (&EnumValuesGroundImagery_Full_dataMode_Enum())[4] {
  static const GroundImagery_Full_dataMode_Enum values[] = {
    GroundImagery_Full_dataMode_Enum_REAL,
    GroundImagery_Full_dataMode_Enum_TEST,
    GroundImagery_Full_dataMode_Enum_SIMULATED,
    GroundImagery_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesGroundImagery_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameGroundImagery_Full_dataMode_Enum(GroundImagery_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, GroundImagery_Full_dataMode_Enum_REAL, GroundImagery_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGroundImagery_Full_dataMode_Enum()[index];
}

/// /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
struct GroundImagery_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroundImagery_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDSENSOR = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_IMAGETIME = 10,
    VT_FILENAME = 12,
    VT_REGION = 14,
    VT_REGIONTEXT = 16,
    VT_REGIONGEOJSON = 18,
    VT_REGIONTYPE = 20,
    VT_REGIONNDIMS = 22,
    VT_REGIONSRID = 24,
    VT_ORIGSENSORID = 26,
    VT_SUBJECTID = 28,
    VT_NAME = 30,
    VT_SOURCE = 32,
    VT_ORIGIN = 34,
    VT_ORIGNETWORK = 36,
    VT_SOURCEDL = 38,
    VT_DATAMODE = 40,
    VT_CREATEDAT = 42,
    VT_CREATEDBY = 44,
    VT_UPDATEDAT = 46,
    VT_UPDATEDBY = 48,
    VT_TRANSACTIONID = 50,
    VT_TAGS = 52,
    VT_KEYWORDS = 54,
    VT_NOTES = 56,
    VT_FORMAT = 58,
    VT_FILESIZE = 60,
    VT_CHECKSUMVALUE = 62
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GROUNDIMAGERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Optional ID of the sensor that produced this ground image.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Timestamp the image was captured/produced.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *imageTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGETIME);
  }
  /// Name of the image file.
  /// Example: /// Example: Example file name
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  /// Geographical region or polygon (lon/lat pairs) of the image as projected on the ground in geoJSON or geoText format. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both regionText and regionGeoJSON fields appropriately. When omitted, regionText or regionGeoJSON is expected.
  /// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
  /// Constraints: Minimum length = 0, Maximum length = 65535
  const ::flatbuffers::String *region() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REGION);
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: Minimum length = 0, Maximum length = 65535
  const ::flatbuffers::String *regionText() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REGIONTEXT);
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: Minimum length = 0, Maximum length = 65535
  const ::flatbuffers::String *regionGeoJSON() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REGIONGEOJSON);
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Polygon
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *regionType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REGIONTYPE);
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t regionNDims() const {
    return GetField<int32_t>(VT_REGIONNDIMS, 0);
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  int32_t regionSRid() const {
    return GetField<int32_t>(VT_REGIONSRID, 0);
  }
  /// Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
  /// Example: /// Example: SUBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *subjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUBJECTID);
  }
  /// Optional name/description associated with this image.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  GroundImagery_Full_dataMode_Enum dataMode() const {
    return static_cast<GroundImagery_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Read-only time the row was updated in the database, set automatically by the system on update.
  /// Example: /// Example: 2018-01-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Optional array of keywords for this image.
  /// Example: /// Example: ['KEYWORD1', 'KEYWORD2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *keywords() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_KEYWORDS);
  }
  /// Description and notes of the image.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Optional, field indicating type of image, NITF, PNG, etc.
  /// Example: /// Example: PNG
  /// Constraints: Minimum length = 1, Maximum length = 16
  const ::flatbuffers::String *format() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FORMAT);
  }
  /// Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int64_t filesize() const {
    return GetField<int64_t>(VT_FILESIZE, 0);
  }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
  /// Constraints: Minimum length = 1, Maximum length = 256
  const ::flatbuffers::String *checksumValue() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHECKSUMVALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IMAGETIME) &&
           verifier.VerifyString(imageTime()) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyOffset(verifier, VT_REGION) &&
           verifier.VerifyString(region()) &&
           VerifyOffset(verifier, VT_REGIONTEXT) &&
           verifier.VerifyString(regionText()) &&
           VerifyOffset(verifier, VT_REGIONGEOJSON) &&
           verifier.VerifyString(regionGeoJSON()) &&
           VerifyOffset(verifier, VT_REGIONTYPE) &&
           verifier.VerifyString(regionType()) &&
           VerifyField<int32_t>(verifier, VT_REGIONNDIMS, 4) &&
           VerifyField<int32_t>(verifier, VT_REGIONSRID, 4) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_SUBJECTID) &&
           verifier.VerifyString(subjectId()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_KEYWORDS) &&
           verifier.VerifyVector(keywords()) &&
           verifier.VerifyVectorOfStrings(keywords()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_FORMAT) &&
           verifier.VerifyString(format()) &&
           VerifyField<int64_t>(verifier, VT_FILESIZE, 8) &&
           VerifyOffset(verifier, VT_CHECKSUMVALUE) &&
           verifier.VerifyString(checksumValue()) &&
           verifier.EndTable();
  }
};

struct GroundImagery_FullBuilder {
  typedef GroundImagery_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(GroundImagery_Full::VT_ID, id);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(GroundImagery_Full::VT_IDSENSOR, idSensor);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(GroundImagery_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_imageTime(::flatbuffers::Offset<::flatbuffers::String> imageTime) {
    fbb_.AddOffset(GroundImagery_Full::VT_IMAGETIME, imageTime);
  }
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(GroundImagery_Full::VT_FILENAME, filename);
  }
  void add_region(::flatbuffers::Offset<::flatbuffers::String> region) {
    fbb_.AddOffset(GroundImagery_Full::VT_REGION, region);
  }
  void add_regionText(::flatbuffers::Offset<::flatbuffers::String> regionText) {
    fbb_.AddOffset(GroundImagery_Full::VT_REGIONTEXT, regionText);
  }
  void add_regionGeoJSON(::flatbuffers::Offset<::flatbuffers::String> regionGeoJSON) {
    fbb_.AddOffset(GroundImagery_Full::VT_REGIONGEOJSON, regionGeoJSON);
  }
  void add_regionType(::flatbuffers::Offset<::flatbuffers::String> regionType) {
    fbb_.AddOffset(GroundImagery_Full::VT_REGIONTYPE, regionType);
  }
  void add_regionNDims(int32_t regionNDims) {
    fbb_.AddElement<int32_t>(GroundImagery_Full::VT_REGIONNDIMS, regionNDims, 0);
  }
  void add_regionSRid(int32_t regionSRid) {
    fbb_.AddElement<int32_t>(GroundImagery_Full::VT_REGIONSRID, regionSRid, 0);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(GroundImagery_Full::VT_ORIGSENSORID, origSensorId);
  }
  void add_subjectId(::flatbuffers::Offset<::flatbuffers::String> subjectId) {
    fbb_.AddOffset(GroundImagery_Full::VT_SUBJECTID, subjectId);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(GroundImagery_Full::VT_NAME, name);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(GroundImagery_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(GroundImagery_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(GroundImagery_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(GroundImagery_Full::VT_SOURCEDL, sourceDL);
  }
  void add_dataMode(GroundImagery_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(GroundImagery_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(GroundImagery_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(GroundImagery_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(GroundImagery_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(GroundImagery_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(GroundImagery_Full::VT_TRANSACTIONID, transactionId);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(GroundImagery_Full::VT_TAGS, tags);
  }
  void add_keywords(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keywords) {
    fbb_.AddOffset(GroundImagery_Full::VT_KEYWORDS, keywords);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(GroundImagery_Full::VT_NOTES, notes);
  }
  void add_format(::flatbuffers::Offset<::flatbuffers::String> format) {
    fbb_.AddOffset(GroundImagery_Full::VT_FORMAT, format);
  }
  void add_filesize(int64_t filesize) {
    fbb_.AddElement<int64_t>(GroundImagery_Full::VT_FILESIZE, filesize, 0);
  }
  void add_checksumValue(::flatbuffers::Offset<::flatbuffers::String> checksumValue) {
    fbb_.AddOffset(GroundImagery_Full::VT_CHECKSUMVALUE, checksumValue);
  }
  explicit GroundImagery_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GroundImagery_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GroundImagery_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GroundImagery_Full> CreateGroundImagery_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> imageTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    ::flatbuffers::Offset<::flatbuffers::String> region = 0,
    ::flatbuffers::Offset<::flatbuffers::String> regionText = 0,
    ::flatbuffers::Offset<::flatbuffers::String> regionGeoJSON = 0,
    ::flatbuffers::Offset<::flatbuffers::String> regionType = 0,
    int32_t regionNDims = 0,
    int32_t regionSRid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> subjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    GroundImagery_Full_dataMode_Enum dataMode = GroundImagery_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> keywords = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> format = 0,
    int64_t filesize = 0,
    ::flatbuffers::Offset<::flatbuffers::String> checksumValue = 0) {
  GroundImagery_FullBuilder builder_(_fbb);
  builder_.add_filesize(filesize);
  builder_.add_checksumValue(checksumValue);
  builder_.add_format(format);
  builder_.add_notes(notes);
  builder_.add_keywords(keywords);
  builder_.add_tags(tags);
  builder_.add_transactionId(transactionId);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_sourceDL(sourceDL);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_name(name);
  builder_.add_subjectId(subjectId);
  builder_.add_origSensorId(origSensorId);
  builder_.add_regionSRid(regionSRid);
  builder_.add_regionNDims(regionNDims);
  builder_.add_regionType(regionType);
  builder_.add_regionGeoJSON(regionGeoJSON);
  builder_.add_regionText(regionText);
  builder_.add_region(region);
  builder_.add_filename(filename);
  builder_.add_imageTime(imageTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idSensor(idSensor);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GroundImagery_Full> CreateGroundImagery_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idSensor = nullptr,
    const char *classificationMarking = nullptr,
    const char *imageTime = nullptr,
    const char *filename = nullptr,
    const char *region = nullptr,
    const char *regionText = nullptr,
    const char *regionGeoJSON = nullptr,
    const char *regionType = nullptr,
    int32_t regionNDims = 0,
    int32_t regionSRid = 0,
    const char *origSensorId = nullptr,
    const char *subjectId = nullptr,
    const char *name = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    const char *sourceDL = nullptr,
    GroundImagery_Full_dataMode_Enum dataMode = GroundImagery_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *transactionId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *keywords = nullptr,
    const char *notes = nullptr,
    const char *format = nullptr,
    int64_t filesize = 0,
    const char *checksumValue = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto imageTime__ = imageTime ? _fbb.CreateString(imageTime) : 0;
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto region__ = region ? _fbb.CreateString(region) : 0;
  auto regionText__ = regionText ? _fbb.CreateString(regionText) : 0;
  auto regionGeoJSON__ = regionGeoJSON ? _fbb.CreateString(regionGeoJSON) : 0;
  auto regionType__ = regionType ? _fbb.CreateString(regionType) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto subjectId__ = subjectId ? _fbb.CreateString(subjectId) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto keywords__ = keywords ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*keywords) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto format__ = format ? _fbb.CreateString(format) : 0;
  auto checksumValue__ = checksumValue ? _fbb.CreateString(checksumValue) : 0;
  return CreateGroundImagery_Full(
      _fbb,
      id__,
      idSensor__,
      classificationMarking__,
      imageTime__,
      filename__,
      region__,
      regionText__,
      regionGeoJSON__,
      regionType__,
      regionNDims,
      regionSRid,
      origSensorId__,
      subjectId__,
      name__,
      source__,
      origin__,
      origNetwork__,
      sourceDL__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      transactionId__,
      tags__,
      keywords__,
      notes__,
      format__,
      filesize,
      checksumValue__);
}

inline const GroundImagery_Full *GetGroundImagery_Full(const void *buf) {
  return ::flatbuffers::GetRoot<GroundImagery_Full>(buf);
}

inline const GroundImagery_Full *GetSizePrefixedGroundImagery_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GroundImagery_Full>(buf);
}

inline const char *GroundImagery_FullIdentifier() {
  return "GROU";
}

inline bool GroundImagery_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GroundImagery_FullIdentifier());
}

inline bool SizePrefixedGroundImagery_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GroundImagery_FullIdentifier(), true);
}

inline bool VerifyGroundImagery_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GroundImagery_Full>(GroundImagery_FullIdentifier());
}

inline bool VerifySizePrefixedGroundImagery_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GroundImagery_Full>(GroundImagery_FullIdentifier());
}

inline void FinishGroundImagery_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GroundImagery_Full> root) {
  fbb.Finish(root, GroundImagery_FullIdentifier());
}

inline void FinishSizePrefixedGroundImagery_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GroundImagery_Full> root) {
  fbb.FinishSizePrefixed(root, GroundImagery_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
