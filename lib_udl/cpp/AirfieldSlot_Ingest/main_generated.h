// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirfieldSlot_Ingest;
struct AirfieldSlot_IngestBuilder;

enum AirfieldSlot_Ingest_type_Enum : int8_t {
  /// No description available.
  AirfieldSlot_Ingest_type_Enum_WORKING = 0,
  /// No description available.
  AirfieldSlot_Ingest_type_Enum_PARKING = 1,
  /// No description available.
  AirfieldSlot_Ingest_type_Enum_TAKEOFF = 2,
  /// No description available.
  AirfieldSlot_Ingest_type_Enum_LANDING = 3,
  /// No description available.
  AirfieldSlot_Ingest_type_Enum_OTHER = 4,
  AirfieldSlot_Ingest_type_Enum_MIN = AirfieldSlot_Ingest_type_Enum_WORKING,
  AirfieldSlot_Ingest_type_Enum_MAX = AirfieldSlot_Ingest_type_Enum_OTHER
};

inline const AirfieldSlot_Ingest_type_Enum (&EnumValuesAirfieldSlot_Ingest_type_Enum())[5] {
  static const AirfieldSlot_Ingest_type_Enum values[] = {
    AirfieldSlot_Ingest_type_Enum_WORKING,
    AirfieldSlot_Ingest_type_Enum_PARKING,
    AirfieldSlot_Ingest_type_Enum_TAKEOFF,
    AirfieldSlot_Ingest_type_Enum_LANDING,
    AirfieldSlot_Ingest_type_Enum_OTHER
  };
  return values;
}

inline const char * const *EnumNamesAirfieldSlot_Ingest_type_Enum() {
  static const char * const names[6] = {
    "WORKING",
    "PARKING",
    "TAKEOFF",
    "LANDING",
    "OTHER",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirfieldSlot_Ingest_type_Enum(AirfieldSlot_Ingest_type_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirfieldSlot_Ingest_type_Enum_WORKING, AirfieldSlot_Ingest_type_Enum_OTHER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirfieldSlot_Ingest_type_Enum()[index];
}

enum AirfieldSlot_Ingest_acSlotCat_Enum : int8_t {
  /// No description available.
  AirfieldSlot_Ingest_acSlotCat_Enum_WIDE = 0,
  /// No description available.
  AirfieldSlot_Ingest_acSlotCat_Enum_NARROW = 1,
  /// No description available.
  AirfieldSlot_Ingest_acSlotCat_Enum_HELO = 2,
  /// No description available.
  AirfieldSlot_Ingest_acSlotCat_Enum_ALL = 3,
  /// No description available.
  AirfieldSlot_Ingest_acSlotCat_Enum_OTHER = 4,
  AirfieldSlot_Ingest_acSlotCat_Enum_MIN = AirfieldSlot_Ingest_acSlotCat_Enum_WIDE,
  AirfieldSlot_Ingest_acSlotCat_Enum_MAX = AirfieldSlot_Ingest_acSlotCat_Enum_OTHER
};

inline const AirfieldSlot_Ingest_acSlotCat_Enum (&EnumValuesAirfieldSlot_Ingest_acSlotCat_Enum())[5] {
  static const AirfieldSlot_Ingest_acSlotCat_Enum values[] = {
    AirfieldSlot_Ingest_acSlotCat_Enum_WIDE,
    AirfieldSlot_Ingest_acSlotCat_Enum_NARROW,
    AirfieldSlot_Ingest_acSlotCat_Enum_HELO,
    AirfieldSlot_Ingest_acSlotCat_Enum_ALL,
    AirfieldSlot_Ingest_acSlotCat_Enum_OTHER
  };
  return values;
}

inline const char * const *EnumNamesAirfieldSlot_Ingest_acSlotCat_Enum() {
  static const char * const names[6] = {
    "WIDE",
    "NARROW",
    "HELO",
    "ALL",
    "OTHER",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirfieldSlot_Ingest_acSlotCat_Enum(AirfieldSlot_Ingest_acSlotCat_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirfieldSlot_Ingest_acSlotCat_Enum_WIDE, AirfieldSlot_Ingest_acSlotCat_Enum_OTHER)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirfieldSlot_Ingest_acSlotCat_Enum()[index];
}

enum AirfieldSlot_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AirfieldSlot_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AirfieldSlot_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AirfieldSlot_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AirfieldSlot_Ingest_dataMode_Enum_EXERCISE = 3,
  AirfieldSlot_Ingest_dataMode_Enum_MIN = AirfieldSlot_Ingest_dataMode_Enum_REAL,
  AirfieldSlot_Ingest_dataMode_Enum_MAX = AirfieldSlot_Ingest_dataMode_Enum_EXERCISE
};

inline const AirfieldSlot_Ingest_dataMode_Enum (&EnumValuesAirfieldSlot_Ingest_dataMode_Enum())[4] {
  static const AirfieldSlot_Ingest_dataMode_Enum values[] = {
    AirfieldSlot_Ingest_dataMode_Enum_REAL,
    AirfieldSlot_Ingest_dataMode_Enum_TEST,
    AirfieldSlot_Ingest_dataMode_Enum_SIMULATED,
    AirfieldSlot_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAirfieldSlot_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirfieldSlot_Ingest_dataMode_Enum(AirfieldSlot_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirfieldSlot_Ingest_dataMode_Enum_REAL, AirfieldSlot_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirfieldSlot_Ingest_dataMode_Enum()[index];
}

/// /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
struct AirfieldSlot_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirfieldSlot_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_AIRFIELDNAME = 8,
    VT_ICAO = 10,
    VT_IDAIRFIELD = 12,
    VT_ALTAIRFIELDID = 14,
    VT_NAME = 16,
    VT_TYPE = 18,
    VT_ACSLOTCAT = 20,
    VT_CAPACITY = 22,
    VT_STARTTIME = 24,
    VT_ENDTIME = 26,
    VT_MINSEPARATION = 28,
    VT_NOTES = 30,
    VT_CREATEDAT = 32,
    VT_CREATEDBY = 34,
    VT_SOURCEDL = 36,
    VT_SOURCE = 38,
    VT_ORIGIN = 40,
    VT_ORIGNETWORK = 42,
    VT_DATAMODE = 44
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The name of the airfield where this slot is located.
  /// Example: /// Example: USAF Academy AFLD
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *airfieldName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRFIELDNAME);
  }
  /// The International Civil Aviation Organization (ICAO) code of the airfield.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *icao() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICAO);
  }
  /// Unique identifier of the Airfield for which this slot information applies.
  /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idAirfield() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDAIRFIELD);
  }
  /// Alternate airfield identifier provided by the source.
  /// Example: /// Example: ALT-AIRFIELD-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *altAirfieldId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTAIRFIELDID);
  }
  /// Name of this slot.
  /// Example: /// Example: Apron 5
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
  /// Example: /// Example: WORKING
  /// Constraints: Minimum length = 0, Maximum length = 7
  AirfieldSlot_Ingest_type_Enum type() const {
    return static_cast<AirfieldSlot_Ingest_type_Enum>(GetField<int8_t>(VT_TYPE, 0));
  }
  /// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
  /// Example: /// Example: WIDE
  /// Constraints: Minimum length = 0, Maximum length = 6
  AirfieldSlot_Ingest_acSlotCat_Enum acSlotCat() const {
    return static_cast<AirfieldSlot_Ingest_acSlotCat_Enum>(GetField<int8_t>(VT_ACSLOTCAT, 0));
  }
  /// Number of aircraft that can fit in this slot at the same time.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t capacity() const {
    return GetField<int32_t>(VT_CAPACITY, 0);
  }
  /// Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  /// Example: /// Example: 0000Z
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  /// Example: /// Example: 2359Z
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  int32_t minSeparation() const {
    return GetField<int32_t>(VT_MINSEPARATION, 0);
  }
  /// Optional notes/comments for this airfield slot.
  /// Example: /// Example: Notes for an airfield slot.
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AirfieldSlot_Ingest_dataMode_Enum dataMode() const {
    return static_cast<AirfieldSlot_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_AIRFIELDNAME) &&
           verifier.VerifyString(airfieldName()) &&
           VerifyOffset(verifier, VT_ICAO) &&
           verifier.VerifyString(icao()) &&
           VerifyOffset(verifier, VT_IDAIRFIELD) &&
           verifier.VerifyString(idAirfield()) &&
           VerifyOffset(verifier, VT_ALTAIRFIELDID) &&
           verifier.VerifyString(altAirfieldId()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int8_t>(verifier, VT_TYPE, 1) &&
           VerifyField<int8_t>(verifier, VT_ACSLOTCAT, 1) &&
           VerifyField<int32_t>(verifier, VT_CAPACITY, 4) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyField<int32_t>(verifier, VT_MINSEPARATION, 4) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct AirfieldSlot_IngestBuilder {
  typedef AirfieldSlot_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_airfieldName(::flatbuffers::Offset<::flatbuffers::String> airfieldName) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_AIRFIELDNAME, airfieldName);
  }
  void add_icao(::flatbuffers::Offset<::flatbuffers::String> icao) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_ICAO, icao);
  }
  void add_idAirfield(::flatbuffers::Offset<::flatbuffers::String> idAirfield) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_IDAIRFIELD, idAirfield);
  }
  void add_altAirfieldId(::flatbuffers::Offset<::flatbuffers::String> altAirfieldId) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_ALTAIRFIELDID, altAirfieldId);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_NAME, name);
  }
  void add_type(AirfieldSlot_Ingest_type_Enum type) {
    fbb_.AddElement<int8_t>(AirfieldSlot_Ingest::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_acSlotCat(AirfieldSlot_Ingest_acSlotCat_Enum acSlotCat) {
    fbb_.AddElement<int8_t>(AirfieldSlot_Ingest::VT_ACSLOTCAT, static_cast<int8_t>(acSlotCat), 0);
  }
  void add_capacity(int32_t capacity) {
    fbb_.AddElement<int32_t>(AirfieldSlot_Ingest::VT_CAPACITY, capacity, 0);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_ENDTIME, endTime);
  }
  void add_minSeparation(int32_t minSeparation) {
    fbb_.AddElement<int32_t>(AirfieldSlot_Ingest::VT_MINSEPARATION, minSeparation, 0);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AirfieldSlot_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(AirfieldSlot_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AirfieldSlot_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit AirfieldSlot_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirfieldSlot_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirfieldSlot_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirfieldSlot_Ingest> CreateAirfieldSlot_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> airfieldName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> icao = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAirfield = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altAirfieldId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    AirfieldSlot_Ingest_type_Enum type = AirfieldSlot_Ingest_type_Enum_WORKING,
    AirfieldSlot_Ingest_acSlotCat_Enum acSlotCat = AirfieldSlot_Ingest_acSlotCat_Enum_WIDE,
    int32_t capacity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    int32_t minSeparation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    AirfieldSlot_Ingest_dataMode_Enum dataMode = AirfieldSlot_Ingest_dataMode_Enum_REAL) {
  AirfieldSlot_IngestBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_minSeparation(minSeparation);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_capacity(capacity);
  builder_.add_name(name);
  builder_.add_altAirfieldId(altAirfieldId);
  builder_.add_idAirfield(idAirfield);
  builder_.add_icao(icao);
  builder_.add_airfieldName(airfieldName);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_acSlotCat(acSlotCat);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirfieldSlot_Ingest> CreateAirfieldSlot_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *airfieldName = nullptr,
    const char *icao = nullptr,
    const char *idAirfield = nullptr,
    const char *altAirfieldId = nullptr,
    const char *name = nullptr,
    AirfieldSlot_Ingest_type_Enum type = AirfieldSlot_Ingest_type_Enum_WORKING,
    AirfieldSlot_Ingest_acSlotCat_Enum acSlotCat = AirfieldSlot_Ingest_acSlotCat_Enum_WIDE,
    int32_t capacity = 0,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    int32_t minSeparation = 0,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    AirfieldSlot_Ingest_dataMode_Enum dataMode = AirfieldSlot_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto airfieldName__ = airfieldName ? _fbb.CreateString(airfieldName) : 0;
  auto icao__ = icao ? _fbb.CreateString(icao) : 0;
  auto idAirfield__ = idAirfield ? _fbb.CreateString(idAirfield) : 0;
  auto altAirfieldId__ = altAirfieldId ? _fbb.CreateString(altAirfieldId) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAirfieldSlot_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      airfieldName__,
      icao__,
      idAirfield__,
      altAirfieldId__,
      name__,
      type,
      acSlotCat,
      capacity,
      startTime__,
      endTime__,
      minSeparation,
      notes__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const AirfieldSlot_Ingest *GetAirfieldSlot_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AirfieldSlot_Ingest>(buf);
}

inline const AirfieldSlot_Ingest *GetSizePrefixedAirfieldSlot_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirfieldSlot_Ingest>(buf);
}

inline const char *AirfieldSlot_IngestIdentifier() {
  return "AIRF";
}

inline bool AirfieldSlot_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirfieldSlot_IngestIdentifier());
}

inline bool SizePrefixedAirfieldSlot_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirfieldSlot_IngestIdentifier(), true);
}

inline bool VerifyAirfieldSlot_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirfieldSlot_Ingest>(AirfieldSlot_IngestIdentifier());
}

inline bool VerifySizePrefixedAirfieldSlot_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirfieldSlot_Ingest>(AirfieldSlot_IngestIdentifier());
}

inline void FinishAirfieldSlot_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirfieldSlot_Ingest> root) {
  fbb.Finish(root, AirfieldSlot_IngestIdentifier());
}

inline void FinishSizePrefixedAirfieldSlot_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirfieldSlot_Ingest> root) {
  fbb.FinishSizePrefixed(root, AirfieldSlot_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
