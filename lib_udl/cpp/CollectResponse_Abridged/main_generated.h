// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct CollectResponse_Abridged;
struct CollectResponse_AbridgedBuilder;

enum CollectResponse_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  CollectResponse_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  CollectResponse_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  CollectResponse_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  CollectResponse_Abridged_dataMode_Enum_EXERCISE = 3,
  CollectResponse_Abridged_dataMode_Enum_MIN = CollectResponse_Abridged_dataMode_Enum_REAL,
  CollectResponse_Abridged_dataMode_Enum_MAX = CollectResponse_Abridged_dataMode_Enum_EXERCISE
};

inline const CollectResponse_Abridged_dataMode_Enum (&EnumValuesCollectResponse_Abridged_dataMode_Enum())[4] {
  static const CollectResponse_Abridged_dataMode_Enum values[] = {
    CollectResponse_Abridged_dataMode_Enum_REAL,
    CollectResponse_Abridged_dataMode_Enum_TEST,
    CollectResponse_Abridged_dataMode_Enum_SIMULATED,
    CollectResponse_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesCollectResponse_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameCollectResponse_Abridged_dataMode_Enum(CollectResponse_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, CollectResponse_Abridged_dataMode_Enum_REAL, CollectResponse_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCollectResponse_Abridged_dataMode_Enum()[index];
}

/// /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
struct CollectResponse_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CollectResponse_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDREQUEST = 8,
    VT_IDONORBIT = 10,
    VT_ORIGOBJECTID = 12,
    VT_SATNO = 14,
    VT_TASKID = 16,
    VT_IDPLAN = 18,
    VT_EXTERNALID = 20,
    VT_STATUS = 22,
    VT_ACTUALSTARTTIME = 24,
    VT_ACTUALENDTIME = 26,
    VT_ALTSTARTTIME = 28,
    VT_ALTENDTIME = 30,
    VT_ERRCODE = 32,
    VT_SRCTYPS = 34,
    VT_SRCIDS = 36,
    VT_NOTES = 38,
    VT_CREATEDAT = 40,
    VT_CREATEDBY = 42,
    VT_SOURCE = 44,
    VT_ORIGIN = 46,
    VT_ORIGNETWORK = 48,
    VT_IDSENSOR = 50,
    VT_ORIGSENSORID = 52,
    VT_DATAMODE = 54
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: COLLECTRESPONSE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the request associated with this response.
  /// Example: /// Example: REF-REQUEST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idRequest() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDREQUEST);
  }
  /// Unique identifier of the target on-orbit object associated with this response.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional task ID associated with the request/response.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *taskId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TASKID);
  }
  /// Unique identifier of the parent plan or schedule associated with the request/response.
  /// Example: /// Example: REF-PLAN-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idPlan() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDPLAN);
  }
  /// UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
  /// Example: /// Example: EXTERNAL-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALID);
  }
  /// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
  /// ACCEPTED: The collect or contact request has been received and accepted.
  /// CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
  /// COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
  /// COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
  /// DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
  /// FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
  /// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
  /// PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
  /// REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
  /// SCHEDULED: The request was received and has been scheduled for execution.
  /// Example: /// Example: ACCEPTED
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// The actual start time of the collect or contact, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALSTARTTIME);
  }
  /// The actual end time of the collect or contact, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T18:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actualEndTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTUALENDTIME);
  }
  /// Proposed alternative start time, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *altStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTSTARTTIME);
  }
  /// Proposed alternative end time, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T18:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *altEndTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTENDTIME);
  }
  /// Error code associated with this request/response.
  /// Example: /// Example: ERROR CODE
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *errCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ERRCODE);
  }
  /// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['DOA', 'DWELL']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['DOA_ID', 'DWELL_ID']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// Notes or comments associated with this response.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  CollectResponse_Abridged_dataMode_Enum dataMode() const {
    return static_cast<CollectResponse_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDREQUEST) &&
           verifier.VerifyString(idRequest()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_TASKID) &&
           verifier.VerifyString(taskId()) &&
           VerifyOffset(verifier, VT_IDPLAN) &&
           verifier.VerifyString(idPlan()) &&
           VerifyOffset(verifier, VT_EXTERNALID) &&
           verifier.VerifyString(externalId()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_ACTUALSTARTTIME) &&
           verifier.VerifyString(actualStartTime()) &&
           VerifyOffset(verifier, VT_ACTUALENDTIME) &&
           verifier.VerifyString(actualEndTime()) &&
           VerifyOffset(verifier, VT_ALTSTARTTIME) &&
           verifier.VerifyString(altStartTime()) &&
           VerifyOffset(verifier, VT_ALTENDTIME) &&
           verifier.VerifyString(altEndTime()) &&
           VerifyOffset(verifier, VT_ERRCODE) &&
           verifier.VerifyString(errCode()) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct CollectResponse_AbridgedBuilder {
  typedef CollectResponse_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idRequest(::flatbuffers::Offset<::flatbuffers::String> idRequest) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_IDREQUEST, idRequest);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(CollectResponse_Abridged::VT_SATNO, satNo, 0);
  }
  void add_taskId(::flatbuffers::Offset<::flatbuffers::String> taskId) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_TASKID, taskId);
  }
  void add_idPlan(::flatbuffers::Offset<::flatbuffers::String> idPlan) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_IDPLAN, idPlan);
  }
  void add_externalId(::flatbuffers::Offset<::flatbuffers::String> externalId) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_EXTERNALID, externalId);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_STATUS, status);
  }
  void add_actualStartTime(::flatbuffers::Offset<::flatbuffers::String> actualStartTime) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ACTUALSTARTTIME, actualStartTime);
  }
  void add_actualEndTime(::flatbuffers::Offset<::flatbuffers::String> actualEndTime) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ACTUALENDTIME, actualEndTime);
  }
  void add_altStartTime(::flatbuffers::Offset<::flatbuffers::String> altStartTime) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ALTSTARTTIME, altStartTime);
  }
  void add_altEndTime(::flatbuffers::Offset<::flatbuffers::String> altEndTime) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ALTENDTIME, altEndTime);
  }
  void add_errCode(::flatbuffers::Offset<::flatbuffers::String> errCode) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ERRCODE, errCode);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_SRCIDS, srcIds);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(CollectResponse_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  void add_dataMode(CollectResponse_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(CollectResponse_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit CollectResponse_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CollectResponse_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CollectResponse_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CollectResponse_Abridged> CreateCollectResponse_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idRequest = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> taskId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idPlan = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actualEndTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altEndTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> errCode = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    CollectResponse_Abridged_dataMode_Enum dataMode = CollectResponse_Abridged_dataMode_Enum_REAL) {
  CollectResponse_AbridgedBuilder builder_(_fbb);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_errCode(errCode);
  builder_.add_altEndTime(altEndTime);
  builder_.add_altStartTime(altStartTime);
  builder_.add_actualEndTime(actualEndTime);
  builder_.add_actualStartTime(actualStartTime);
  builder_.add_status(status);
  builder_.add_externalId(externalId);
  builder_.add_idPlan(idPlan);
  builder_.add_taskId(taskId);
  builder_.add_satNo(satNo);
  builder_.add_origObjectId(origObjectId);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_idRequest(idRequest);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CollectResponse_Abridged> CreateCollectResponse_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idRequest = nullptr,
    const char *idOnOrbit = nullptr,
    const char *origObjectId = nullptr,
    int32_t satNo = 0,
    const char *taskId = nullptr,
    const char *idPlan = nullptr,
    const char *externalId = nullptr,
    const char *status = nullptr,
    const char *actualStartTime = nullptr,
    const char *actualEndTime = nullptr,
    const char *altStartTime = nullptr,
    const char *altEndTime = nullptr,
    const char *errCode = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    CollectResponse_Abridged_dataMode_Enum dataMode = CollectResponse_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idRequest__ = idRequest ? _fbb.CreateString(idRequest) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto taskId__ = taskId ? _fbb.CreateString(taskId) : 0;
  auto idPlan__ = idPlan ? _fbb.CreateString(idPlan) : 0;
  auto externalId__ = externalId ? _fbb.CreateString(externalId) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto actualStartTime__ = actualStartTime ? _fbb.CreateString(actualStartTime) : 0;
  auto actualEndTime__ = actualEndTime ? _fbb.CreateString(actualEndTime) : 0;
  auto altStartTime__ = altStartTime ? _fbb.CreateString(altStartTime) : 0;
  auto altEndTime__ = altEndTime ? _fbb.CreateString(altEndTime) : 0;
  auto errCode__ = errCode ? _fbb.CreateString(errCode) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  return CreateCollectResponse_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idRequest__,
      idOnOrbit__,
      origObjectId__,
      satNo,
      taskId__,
      idPlan__,
      externalId__,
      status__,
      actualStartTime__,
      actualEndTime__,
      altStartTime__,
      altEndTime__,
      errCode__,
      srcTyps__,
      srcIds__,
      notes__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      idSensor__,
      origSensorId__,
      dataMode);
}

inline const CollectResponse_Abridged *GetCollectResponse_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<CollectResponse_Abridged>(buf);
}

inline const CollectResponse_Abridged *GetSizePrefixedCollectResponse_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CollectResponse_Abridged>(buf);
}

inline const char *CollectResponse_AbridgedIdentifier() {
  return "COLL";
}

inline bool CollectResponse_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CollectResponse_AbridgedIdentifier());
}

inline bool SizePrefixedCollectResponse_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CollectResponse_AbridgedIdentifier(), true);
}

inline bool VerifyCollectResponse_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CollectResponse_Abridged>(CollectResponse_AbridgedIdentifier());
}

inline bool VerifySizePrefixedCollectResponse_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CollectResponse_Abridged>(CollectResponse_AbridgedIdentifier());
}

inline void FinishCollectResponse_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CollectResponse_Abridged> root) {
  fbb.Finish(root, CollectResponse_AbridgedIdentifier());
}

inline void FinishSizePrefixedCollectResponse_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CollectResponse_Abridged> root) {
  fbb.FinishSizePrefixed(root, CollectResponse_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
