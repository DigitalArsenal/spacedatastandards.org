// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EffectRequest_Ingest;
struct EffectRequest_IngestBuilder;

enum EffectRequest_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  EffectRequest_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  EffectRequest_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  EffectRequest_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  EffectRequest_Ingest_dataMode_Enum_EXERCISE = 3,
  EffectRequest_Ingest_dataMode_Enum_MIN = EffectRequest_Ingest_dataMode_Enum_REAL,
  EffectRequest_Ingest_dataMode_Enum_MAX = EffectRequest_Ingest_dataMode_Enum_EXERCISE
};

inline const EffectRequest_Ingest_dataMode_Enum (&EnumValuesEffectRequest_Ingest_dataMode_Enum())[4] {
  static const EffectRequest_Ingest_dataMode_Enum values[] = {
    EffectRequest_Ingest_dataMode_Enum_REAL,
    EffectRequest_Ingest_dataMode_Enum_TEST,
    EffectRequest_Ingest_dataMode_Enum_SIMULATED,
    EffectRequest_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEffectRequest_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEffectRequest_Ingest_dataMode_Enum(EffectRequest_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, EffectRequest_Ingest_dataMode_Enum_REAL, EffectRequest_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEffectRequest_Ingest_dataMode_Enum()[index];
}

/// /// A request for various effects on a target.
struct EffectRequest_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EffectRequest_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_EXTERNALREQUESTID = 8,
    VT_EFFECTLIST = 10,
    VT_STATE = 12,
    VT_CONTEXT = 14,
    VT_STARTTIME = 16,
    VT_ENDTIME = 18,
    VT_DEADLINETYPE = 20,
    VT_TARGETSRCTYPE = 22,
    VT_TARGETSRCID = 24,
    VT_PRIORITY = 26,
    VT_MODELCLASS = 28,
    VT_METRICTYPES = 30,
    VT_METRICWEIGHTS = 32,
    VT_CREATEDAT = 34,
    VT_CREATEDBY = 36,
    VT_SOURCE = 38,
    VT_ORIGIN = 40,
    VT_DATAMODE = 42,
    VT_ORIGNETWORK = 44
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EFFECTREQUEST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The extenal system identifier of this request. A human readable unique id.
  /// Example: /// Example: EXTERNALREQUEST-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *externalRequestId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTERNALREQUESTID);
  }
  /// List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
  /// Example: /// Example: ['COVER', 'DECEIVE']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *effectList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EFFECTLIST);
  }
  /// State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
  /// Example: /// Example: CREATED
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *state() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATE);
  }
  /// Specific descriptive instantiation of the effect, e.g., playbook to be used.
  /// Example: /// Example: Example Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *context() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTEXT);
  }
  /// The time the effect should start, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *startTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STARTTIME);
  }
  /// The time the effect should end, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *endTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDTIME);
  }
  /// The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
  /// BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
  /// IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
  /// NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
  /// NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
  /// Example: /// Example: NoLaterThan
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *deadlineType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEADLINETYPE);
  }
  /// The source type of the targetId identifier (POI, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *targetSrcType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGETSRCTYPE);
  }
  /// The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: TARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *targetSrcId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGETSRCID);
  }
  /// The priority (LOW, MEDIUM, HIGH) of this request.
  /// Example: /// Example: LOW
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *priority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIORITY);
  }
  /// The type or class of the preference model used to evaluate this offer.
  /// Example: /// Example: Preference model
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *modelClass() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODELCLASS);
  }
  /// Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  /// Example: /// Example: ['COST', 'RISK']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *metricTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_METRICTYPES);
  }
  /// Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  /// Example: /// Example: [0.5, 0.6]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *metricWeights() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_METRICWEIGHTS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  EffectRequest_Ingest_dataMode_Enum dataMode() const {
    return static_cast<EffectRequest_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_EXTERNALREQUESTID) &&
           verifier.VerifyString(externalRequestId()) &&
           VerifyOffset(verifier, VT_EFFECTLIST) &&
           verifier.VerifyVector(effectList()) &&
           verifier.VerifyVectorOfStrings(effectList()) &&
           VerifyOffset(verifier, VT_STATE) &&
           verifier.VerifyString(state()) &&
           VerifyOffset(verifier, VT_CONTEXT) &&
           verifier.VerifyString(context()) &&
           VerifyOffset(verifier, VT_STARTTIME) &&
           verifier.VerifyString(startTime()) &&
           VerifyOffset(verifier, VT_ENDTIME) &&
           verifier.VerifyString(endTime()) &&
           VerifyOffset(verifier, VT_DEADLINETYPE) &&
           verifier.VerifyString(deadlineType()) &&
           VerifyOffset(verifier, VT_TARGETSRCTYPE) &&
           verifier.VerifyString(targetSrcType()) &&
           VerifyOffset(verifier, VT_TARGETSRCID) &&
           verifier.VerifyString(targetSrcId()) &&
           VerifyOffset(verifier, VT_PRIORITY) &&
           verifier.VerifyString(priority()) &&
           VerifyOffset(verifier, VT_MODELCLASS) &&
           verifier.VerifyString(modelClass()) &&
           VerifyOffset(verifier, VT_METRICTYPES) &&
           verifier.VerifyVector(metricTypes()) &&
           verifier.VerifyVectorOfStrings(metricTypes()) &&
           VerifyOffset(verifier, VT_METRICWEIGHTS) &&
           verifier.VerifyVector(metricWeights()) &&
           verifier.VerifyVectorOfStrings(metricWeights()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct EffectRequest_IngestBuilder {
  typedef EffectRequest_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_externalRequestId(::flatbuffers::Offset<::flatbuffers::String> externalRequestId) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_EXTERNALREQUESTID, externalRequestId);
  }
  void add_effectList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> effectList) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_EFFECTLIST, effectList);
  }
  void add_state(::flatbuffers::Offset<::flatbuffers::String> state) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_STATE, state);
  }
  void add_context(::flatbuffers::Offset<::flatbuffers::String> context) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_CONTEXT, context);
  }
  void add_startTime(::flatbuffers::Offset<::flatbuffers::String> startTime) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_STARTTIME, startTime);
  }
  void add_endTime(::flatbuffers::Offset<::flatbuffers::String> endTime) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_ENDTIME, endTime);
  }
  void add_deadlineType(::flatbuffers::Offset<::flatbuffers::String> deadlineType) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_DEADLINETYPE, deadlineType);
  }
  void add_targetSrcType(::flatbuffers::Offset<::flatbuffers::String> targetSrcType) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_TARGETSRCTYPE, targetSrcType);
  }
  void add_targetSrcId(::flatbuffers::Offset<::flatbuffers::String> targetSrcId) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_TARGETSRCID, targetSrcId);
  }
  void add_priority(::flatbuffers::Offset<::flatbuffers::String> priority) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_PRIORITY, priority);
  }
  void add_modelClass(::flatbuffers::Offset<::flatbuffers::String> modelClass) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_MODELCLASS, modelClass);
  }
  void add_metricTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metricTypes) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_METRICTYPES, metricTypes);
  }
  void add_metricWeights(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metricWeights) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_METRICWEIGHTS, metricWeights);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(EffectRequest_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(EffectRequest_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(EffectRequest_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  explicit EffectRequest_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EffectRequest_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EffectRequest_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EffectRequest_Ingest> CreateEffectRequest_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> externalRequestId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> effectList = 0,
    ::flatbuffers::Offset<::flatbuffers::String> state = 0,
    ::flatbuffers::Offset<::flatbuffers::String> context = 0,
    ::flatbuffers::Offset<::flatbuffers::String> startTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> deadlineType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> targetSrcType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> targetSrcId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> priority = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modelClass = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metricTypes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> metricWeights = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    EffectRequest_Ingest_dataMode_Enum dataMode = EffectRequest_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  EffectRequest_IngestBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_metricWeights(metricWeights);
  builder_.add_metricTypes(metricTypes);
  builder_.add_modelClass(modelClass);
  builder_.add_priority(priority);
  builder_.add_targetSrcId(targetSrcId);
  builder_.add_targetSrcType(targetSrcType);
  builder_.add_deadlineType(deadlineType);
  builder_.add_endTime(endTime);
  builder_.add_startTime(startTime);
  builder_.add_context(context);
  builder_.add_state(state);
  builder_.add_effectList(effectList);
  builder_.add_externalRequestId(externalRequestId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EffectRequest_Ingest> CreateEffectRequest_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *externalRequestId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *effectList = nullptr,
    const char *state = nullptr,
    const char *context = nullptr,
    const char *startTime = nullptr,
    const char *endTime = nullptr,
    const char *deadlineType = nullptr,
    const char *targetSrcType = nullptr,
    const char *targetSrcId = nullptr,
    const char *priority = nullptr,
    const char *modelClass = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *metricTypes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *metricWeights = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    EffectRequest_Ingest_dataMode_Enum dataMode = EffectRequest_Ingest_dataMode_Enum_REAL,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto externalRequestId__ = externalRequestId ? _fbb.CreateString(externalRequestId) : 0;
  auto effectList__ = effectList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*effectList) : 0;
  auto state__ = state ? _fbb.CreateString(state) : 0;
  auto context__ = context ? _fbb.CreateString(context) : 0;
  auto startTime__ = startTime ? _fbb.CreateString(startTime) : 0;
  auto endTime__ = endTime ? _fbb.CreateString(endTime) : 0;
  auto deadlineType__ = deadlineType ? _fbb.CreateString(deadlineType) : 0;
  auto targetSrcType__ = targetSrcType ? _fbb.CreateString(targetSrcType) : 0;
  auto targetSrcId__ = targetSrcId ? _fbb.CreateString(targetSrcId) : 0;
  auto priority__ = priority ? _fbb.CreateString(priority) : 0;
  auto modelClass__ = modelClass ? _fbb.CreateString(modelClass) : 0;
  auto metricTypes__ = metricTypes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*metricTypes) : 0;
  auto metricWeights__ = metricWeights ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*metricWeights) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateEffectRequest_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      externalRequestId__,
      effectList__,
      state__,
      context__,
      startTime__,
      endTime__,
      deadlineType__,
      targetSrcType__,
      targetSrcId__,
      priority__,
      modelClass__,
      metricTypes__,
      metricWeights__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__);
}

inline const EffectRequest_Ingest *GetEffectRequest_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<EffectRequest_Ingest>(buf);
}

inline const EffectRequest_Ingest *GetSizePrefixedEffectRequest_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EffectRequest_Ingest>(buf);
}

inline const char *EffectRequest_IngestIdentifier() {
  return "EFFE";
}

inline bool EffectRequest_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectRequest_IngestIdentifier());
}

inline bool SizePrefixedEffectRequest_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectRequest_IngestIdentifier(), true);
}

inline bool VerifyEffectRequest_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EffectRequest_Ingest>(EffectRequest_IngestIdentifier());
}

inline bool VerifySizePrefixedEffectRequest_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EffectRequest_Ingest>(EffectRequest_IngestIdentifier());
}

inline void FinishEffectRequest_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectRequest_Ingest> root) {
  fbb.Finish(root, EffectRequest_IngestIdentifier());
}

inline void FinishSizePrefixedEffectRequest_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectRequest_Ingest> root) {
  fbb.FinishSizePrefixed(root, EffectRequest_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
