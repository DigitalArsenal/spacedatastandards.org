// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct GNSSObservation_Full;
struct GNSSObservation_FullBuilder;

/// /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
struct GNSSObservation_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GNSSObservation_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GNSSSATID = 4,
    VT_TRACKINGSTATUS = 6,
    VT_AGCSTATE = 8,
    VT_OBSCODESET = 10,
    VT_OB = 12
  };
  /// RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
  /// G - GPS (NN = PRN)
  /// R - GLONASS (NN = Slot Number)
  /// S - SBAS Payload (NN = PRN-100)
  /// E - Galileo (NN = PRN)
  /// C - BeiDou (NN = PRN)
  /// J - QZSS (NN = PRN - 1923)
  /// I - IRNSS (NN = PRN)
  /// Example: /// Example: GEJ
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *gnssSatId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GNSSSATID);
  }
  /// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t trackingStatus() const {
    return GetField<int32_t>(VT_TRACKINGSTATUS, 0);
  }
  /// GNSS Automatic Gain Control State.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  int32_t agcState() const {
    return GetField<int32_t>(VT_AGCSTATE, 0);
  }
  /// The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
  /// Example: /// Example: ['S1C', 'C1C', 'C1D']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *obsCodeSet() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OBSCODESET);
  }
  /// Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
  /// Example: /// Example: [42.1, 1000.0, 0.9]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ob() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OB);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GNSSSATID) &&
           verifier.VerifyString(gnssSatId()) &&
           VerifyField<int32_t>(verifier, VT_TRACKINGSTATUS, 4) &&
           VerifyField<int32_t>(verifier, VT_AGCSTATE, 4) &&
           VerifyOffset(verifier, VT_OBSCODESET) &&
           verifier.VerifyVector(obsCodeSet()) &&
           verifier.VerifyVectorOfStrings(obsCodeSet()) &&
           VerifyOffset(verifier, VT_OB) &&
           verifier.VerifyVector(ob()) &&
           verifier.VerifyVectorOfStrings(ob()) &&
           verifier.EndTable();
  }
};

struct GNSSObservation_FullBuilder {
  typedef GNSSObservation_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_gnssSatId(::flatbuffers::Offset<::flatbuffers::String> gnssSatId) {
    fbb_.AddOffset(GNSSObservation_Full::VT_GNSSSATID, gnssSatId);
  }
  void add_trackingStatus(int32_t trackingStatus) {
    fbb_.AddElement<int32_t>(GNSSObservation_Full::VT_TRACKINGSTATUS, trackingStatus, 0);
  }
  void add_agcState(int32_t agcState) {
    fbb_.AddElement<int32_t>(GNSSObservation_Full::VT_AGCSTATE, agcState, 0);
  }
  void add_obsCodeSet(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> obsCodeSet) {
    fbb_.AddOffset(GNSSObservation_Full::VT_OBSCODESET, obsCodeSet);
  }
  void add_ob(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ob) {
    fbb_.AddOffset(GNSSObservation_Full::VT_OB, ob);
  }
  explicit GNSSObservation_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GNSSObservation_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GNSSObservation_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GNSSObservation_Full> CreateGNSSObservation_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> gnssSatId = 0,
    int32_t trackingStatus = 0,
    int32_t agcState = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> obsCodeSet = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ob = 0) {
  GNSSObservation_FullBuilder builder_(_fbb);
  builder_.add_ob(ob);
  builder_.add_obsCodeSet(obsCodeSet);
  builder_.add_agcState(agcState);
  builder_.add_trackingStatus(trackingStatus);
  builder_.add_gnssSatId(gnssSatId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GNSSObservation_Full> CreateGNSSObservation_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *gnssSatId = nullptr,
    int32_t trackingStatus = 0,
    int32_t agcState = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *obsCodeSet = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ob = nullptr) {
  auto gnssSatId__ = gnssSatId ? _fbb.CreateString(gnssSatId) : 0;
  auto obsCodeSet__ = obsCodeSet ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*obsCodeSet) : 0;
  auto ob__ = ob ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ob) : 0;
  return CreateGNSSObservation_Full(
      _fbb,
      gnssSatId__,
      trackingStatus,
      agcState,
      obsCodeSet__,
      ob__);
}

inline const GNSSObservation_Full *GetGNSSObservation_Full(const void *buf) {
  return ::flatbuffers::GetRoot<GNSSObservation_Full>(buf);
}

inline const GNSSObservation_Full *GetSizePrefixedGNSSObservation_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GNSSObservation_Full>(buf);
}

inline const char *GNSSObservation_FullIdentifier() {
  return "GNSS";
}

inline bool GNSSObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GNSSObservation_FullIdentifier());
}

inline bool SizePrefixedGNSSObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GNSSObservation_FullIdentifier(), true);
}

inline bool VerifyGNSSObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GNSSObservation_Full>(GNSSObservation_FullIdentifier());
}

inline bool VerifySizePrefixedGNSSObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GNSSObservation_Full>(GNSSObservation_FullIdentifier());
}

inline void FinishGNSSObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNSSObservation_Full> root) {
  fbb.Finish(root, GNSSObservation_FullIdentifier());
}

inline void FinishSizePrefixedGNSSObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNSSObservation_Full> root) {
  fbb.FinishSizePrefixed(root, GNSSObservation_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
