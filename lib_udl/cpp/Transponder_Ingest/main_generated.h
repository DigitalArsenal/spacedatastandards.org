// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Transponder_Ingest;
struct Transponder_IngestBuilder;

enum Transponder_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Transponder_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Transponder_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Transponder_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Transponder_Ingest_dataMode_Enum_EXERCISE = 3,
  Transponder_Ingest_dataMode_Enum_MIN = Transponder_Ingest_dataMode_Enum_REAL,
  Transponder_Ingest_dataMode_Enum_MAX = Transponder_Ingest_dataMode_Enum_EXERCISE
};

inline const Transponder_Ingest_dataMode_Enum (&EnumValuesTransponder_Ingest_dataMode_Enum())[4] {
  static const Transponder_Ingest_dataMode_Enum values[] = {
    Transponder_Ingest_dataMode_Enum_REAL,
    Transponder_Ingest_dataMode_Enum_TEST,
    Transponder_Ingest_dataMode_Enum_SIMULATED,
    Transponder_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesTransponder_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameTransponder_Ingest_dataMode_Enum(Transponder_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Transponder_Ingest_dataMode_Enum_REAL, Transponder_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTransponder_Ingest_dataMode_Enum()[index];
}

/// /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
struct Transponder_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Transponder_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDCOMM = 6,
    VT_NAME = 8,
    VT_CLASSIFICATIONMARKING = 10,
    VT_NID = 12,
    VT_TID = 14,
    VT_TTF = 16,
    VT_SYMBOLRATE = 18,
    VT_FEC = 20,
    VT_MODULATION = 22,
    VT_FORMAT = 24,
    VT_SYSTEM = 26,
    VT_SOURCE = 28,
    VT_ORIGIN = 30,
    VT_ORIGNETWORK = 32,
    VT_DATAMODE = 34,
    VT_CREATEDAT = 36,
    VT_CREATEDBY = 38
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: TRANSPONDER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// ID of the parent Comm object for this transponder.
  /// Example: /// Example: REF-COMM-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idComm() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDCOMM);
  }
  /// Optional name of the transponder.
  /// Example: /// Example: AA10
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Optional external network id as provided data source.
  /// Example: /// Example: N-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *nid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NID);
  }
  /// Optional external transponder id as provided data source.
  /// Example: /// Example: T-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *tid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TID);
  }
  /// Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
  /// Example: /// Example: 1.53261520047876
  /// Constraints: No constraints specified.
  double ttf() const {
    return GetField<double>(VT_TTF, 0.0);
  }
  /// Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
  /// Example: /// Example: 4.0
  /// Constraints: No constraints specified.
  double symbolRate() const {
    return GetField<double>(VT_SYMBOLRATE, 0.0);
  }
  /// Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t fec() const {
    return GetField<int32_t>(VT_FEC, 0);
  }
  /// Transponder modulation, e.g. Auto, QPSK, 8PSK.
  /// Example: /// Example: Auto
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *modulation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODULATION);
  }
  /// Format.
  /// Example: /// Example: format
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *format() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FORMAT);
  }
  /// Transponder system, e.g. DVB-S, DVB-S2.
  /// Example: /// Example: DVB-S
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *system() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYSTEM);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Transponder_Ingest_dataMode_Enum dataMode() const {
    return static_cast<Transponder_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDCOMM) &&
           verifier.VerifyString(idComm()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_NID) &&
           verifier.VerifyString(nid()) &&
           VerifyOffset(verifier, VT_TID) &&
           verifier.VerifyString(tid()) &&
           VerifyField<double>(verifier, VT_TTF, 8) &&
           VerifyField<double>(verifier, VT_SYMBOLRATE, 8) &&
           VerifyField<int32_t>(verifier, VT_FEC, 4) &&
           VerifyOffset(verifier, VT_MODULATION) &&
           verifier.VerifyString(modulation()) &&
           VerifyOffset(verifier, VT_FORMAT) &&
           verifier.VerifyString(format()) &&
           VerifyOffset(verifier, VT_SYSTEM) &&
           verifier.VerifyString(system()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct Transponder_IngestBuilder {
  typedef Transponder_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Transponder_Ingest::VT_ID, id);
  }
  void add_idComm(::flatbuffers::Offset<::flatbuffers::String> idComm) {
    fbb_.AddOffset(Transponder_Ingest::VT_IDCOMM, idComm);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Transponder_Ingest::VT_NAME, name);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Transponder_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_nid(::flatbuffers::Offset<::flatbuffers::String> nid) {
    fbb_.AddOffset(Transponder_Ingest::VT_NID, nid);
  }
  void add_tid(::flatbuffers::Offset<::flatbuffers::String> tid) {
    fbb_.AddOffset(Transponder_Ingest::VT_TID, tid);
  }
  void add_ttf(double ttf) {
    fbb_.AddElement<double>(Transponder_Ingest::VT_TTF, ttf, 0.0);
  }
  void add_symbolRate(double symbolRate) {
    fbb_.AddElement<double>(Transponder_Ingest::VT_SYMBOLRATE, symbolRate, 0.0);
  }
  void add_fec(int32_t fec) {
    fbb_.AddElement<int32_t>(Transponder_Ingest::VT_FEC, fec, 0);
  }
  void add_modulation(::flatbuffers::Offset<::flatbuffers::String> modulation) {
    fbb_.AddOffset(Transponder_Ingest::VT_MODULATION, modulation);
  }
  void add_format(::flatbuffers::Offset<::flatbuffers::String> format) {
    fbb_.AddOffset(Transponder_Ingest::VT_FORMAT, format);
  }
  void add_system(::flatbuffers::Offset<::flatbuffers::String> system) {
    fbb_.AddOffset(Transponder_Ingest::VT_SYSTEM, system);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Transponder_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Transponder_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Transponder_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Transponder_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Transponder_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Transponder_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Transponder_Ingest::VT_CREATEDBY, createdBy);
  }
  explicit Transponder_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Transponder_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Transponder_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Transponder_Ingest> CreateTransponder_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idComm = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tid = 0,
    double ttf = 0.0,
    double symbolRate = 0.0,
    int32_t fec = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modulation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> format = 0,
    ::flatbuffers::Offset<::flatbuffers::String> system = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Transponder_Ingest_dataMode_Enum dataMode = Transponder_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  Transponder_IngestBuilder builder_(_fbb);
  builder_.add_symbolRate(symbolRate);
  builder_.add_ttf(ttf);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_system(system);
  builder_.add_format(format);
  builder_.add_modulation(modulation);
  builder_.add_fec(fec);
  builder_.add_tid(tid);
  builder_.add_nid(nid);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_name(name);
  builder_.add_idComm(idComm);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Transponder_Ingest> CreateTransponder_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idComm = nullptr,
    const char *name = nullptr,
    const char *classificationMarking = nullptr,
    const char *nid = nullptr,
    const char *tid = nullptr,
    double ttf = 0.0,
    double symbolRate = 0.0,
    int32_t fec = 0,
    const char *modulation = nullptr,
    const char *format = nullptr,
    const char *system = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Transponder_Ingest_dataMode_Enum dataMode = Transponder_Ingest_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idComm__ = idComm ? _fbb.CreateString(idComm) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto nid__ = nid ? _fbb.CreateString(nid) : 0;
  auto tid__ = tid ? _fbb.CreateString(tid) : 0;
  auto modulation__ = modulation ? _fbb.CreateString(modulation) : 0;
  auto format__ = format ? _fbb.CreateString(format) : 0;
  auto system__ = system ? _fbb.CreateString(system) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateTransponder_Ingest(
      _fbb,
      id__,
      idComm__,
      name__,
      classificationMarking__,
      nid__,
      tid__,
      ttf,
      symbolRate,
      fec,
      modulation__,
      format__,
      system__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const Transponder_Ingest *GetTransponder_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<Transponder_Ingest>(buf);
}

inline const Transponder_Ingest *GetSizePrefixedTransponder_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Transponder_Ingest>(buf);
}

inline const char *Transponder_IngestIdentifier() {
  return "TRAN";
}

inline bool Transponder_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Transponder_IngestIdentifier());
}

inline bool SizePrefixedTransponder_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Transponder_IngestIdentifier(), true);
}

inline bool VerifyTransponder_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Transponder_Ingest>(Transponder_IngestIdentifier());
}

inline bool VerifySizePrefixedTransponder_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Transponder_Ingest>(Transponder_IngestIdentifier());
}

inline void FinishTransponder_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Transponder_Ingest> root) {
  fbb.Finish(root, Transponder_IngestIdentifier());
}

inline void FinishSizePrefixedTransponder_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Transponder_Ingest> root) {
  fbb.FinishSizePrefixed(root, Transponder_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
