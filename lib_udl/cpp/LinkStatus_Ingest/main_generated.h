// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LinkStatus_Ingest;
struct LinkStatus_IngestBuilder;

enum LinkStatus_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  LinkStatus_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  LinkStatus_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  LinkStatus_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  LinkStatus_Ingest_dataMode_Enum_EXERCISE = 3,
  LinkStatus_Ingest_dataMode_Enum_MIN = LinkStatus_Ingest_dataMode_Enum_REAL,
  LinkStatus_Ingest_dataMode_Enum_MAX = LinkStatus_Ingest_dataMode_Enum_EXERCISE
};

inline const LinkStatus_Ingest_dataMode_Enum (&EnumValuesLinkStatus_Ingest_dataMode_Enum())[4] {
  static const LinkStatus_Ingest_dataMode_Enum values[] = {
    LinkStatus_Ingest_dataMode_Enum_REAL,
    LinkStatus_Ingest_dataMode_Enum_TEST,
    LinkStatus_Ingest_dataMode_Enum_SIMULATED,
    LinkStatus_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesLinkStatus_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameLinkStatus_Ingest_dataMode_Enum(LinkStatus_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, LinkStatus_Ingest_dataMode_Enum_REAL, LinkStatus_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesLinkStatus_Ingest_dataMode_Enum()[index];
}

/// /// Captures link status.
struct LinkStatus_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LinkStatus_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT1 = 8,
    VT_IDONORBIT2 = 10,
    VT_LINKSTARTTIME = 12,
    VT_LINKSTOPTIME = 14,
    VT_CONSTELLATION = 16,
    VT_LINKNAME = 18,
    VT_LINKTYPE = 20,
    VT_BAND = 22,
    VT_IDBEAM1 = 24,
    VT_ENDPOINT1NAME = 26,
    VT_ENDPOINT1LAT = 28,
    VT_ENDPOINT1LON = 30,
    VT_IDBEAM2 = 32,
    VT_ENDPOINT2NAME = 34,
    VT_ENDPOINT2LAT = 36,
    VT_ENDPOINT2LON = 38,
    VT_DATARATE1TO2 = 40,
    VT_DATARATE2TO1 = 42,
    VT_LINKSTATE = 44,
    VT_SYSCAP = 46,
    VT_OPSCAP = 48,
    VT_CREATEDAT = 50,
    VT_CREATEDBY = 52,
    VT_SOURCE = 54,
    VT_ORIGIN = 56,
    VT_ORIGNETWORK = 58,
    VT_DATAMODE = 60,
    VT_SATNO1 = 62,
    VT_SATNO2 = 64
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LINKSTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
  /// Example: /// Example: REF-ONORBIT1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT1);
  }
  /// Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
  /// Example: /// Example: REF-ONORBIT2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT2);
  }
  /// The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *linkStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKSTARTTIME);
  }
  /// The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *linkStopTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKSTOPTIME);
  }
  /// The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
  /// Example: /// Example: Fornax
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *constellation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONSTELLATION);
  }
  /// The name or description of the link.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *linkName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKNAME);
  }
  /// The type of the link.
  /// Example: /// Example: Example link
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *linkType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKTYPE);
  }
  /// The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
  /// Example: /// Example: MIL-KA
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *band() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BAND);
  }
  /// The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
  /// Example: /// Example: REF-BEAM1-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idBeam1() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDBEAM1);
  }
  /// The name or description of link endpoint-1, corresponding to beam-1.
  /// Example: /// Example: Example endpoint
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *endPoint1Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDPOINT1NAME);
  }
  /// Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double endPoint1Lat() const {
    return GetField<double>(VT_ENDPOINT1LAT, 0.0);
  }
  /// Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.23
  /// Constraints: No constraints specified.
  double endPoint1Lon() const {
    return GetField<double>(VT_ENDPOINT1LON, 0.0);
  }
  /// The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
  /// Example: /// Example: REF-BEAM2-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idBeam2() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDBEAM2);
  }
  /// The name or description of link endpoint-2, corresponding to beam-2.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *endPoint2Name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENDPOINT2NAME);
  }
  /// Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double endPoint2Lat() const {
    return GetField<double>(VT_ENDPOINT2LAT, 0.0);
  }
  /// Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.23
  /// Constraints: No constraints specified.
  double endPoint2Lon() const {
    return GetField<double>(VT_ENDPOINT2LON, 0.0);
  }
  /// The endpoint-1 to endpoint-2 data rate, in kbps.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double dataRate1To2() const {
    return GetField<double>(VT_DATARATE1TO2, 0.0);
  }
  /// The endpoint-2 to endpoint-1 data rate, in kbps.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double dataRate2To1() const {
    return GetField<double>(VT_DATARATE2TO1, 0.0);
  }
  /// The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
  /// Example: /// Example: DEGRADED-WEATHER
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *linkState() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LINKSTATE);
  }
  /// The SYSCAP mission status of the system(s) forming the link.
  /// Example: /// Example: Example status
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *sysCap() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SYSCAP);
  }
  /// The OPSCAP mission status of the system(s) forming the link.
  /// Example: /// Example: Example status
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *opsCap() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPSCAP);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  LinkStatus_Ingest_dataMode_Enum dataMode() const {
    return static_cast<LinkStatus_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Satellite/catalog number of the target on-orbit primary object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t satNo1() const {
    return GetField<int32_t>(VT_SATNO1, 0);
  }
  /// Satellite/catalog number of the target on-orbit secondary object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t satNo2() const {
    return GetField<int32_t>(VT_SATNO2, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT1) &&
           verifier.VerifyString(idOnOrbit1()) &&
           VerifyOffset(verifier, VT_IDONORBIT2) &&
           verifier.VerifyString(idOnOrbit2()) &&
           VerifyOffset(verifier, VT_LINKSTARTTIME) &&
           verifier.VerifyString(linkStartTime()) &&
           VerifyOffset(verifier, VT_LINKSTOPTIME) &&
           verifier.VerifyString(linkStopTime()) &&
           VerifyOffset(verifier, VT_CONSTELLATION) &&
           verifier.VerifyString(constellation()) &&
           VerifyOffset(verifier, VT_LINKNAME) &&
           verifier.VerifyString(linkName()) &&
           VerifyOffset(verifier, VT_LINKTYPE) &&
           verifier.VerifyString(linkType()) &&
           VerifyOffset(verifier, VT_BAND) &&
           verifier.VerifyString(band()) &&
           VerifyOffset(verifier, VT_IDBEAM1) &&
           verifier.VerifyString(idBeam1()) &&
           VerifyOffset(verifier, VT_ENDPOINT1NAME) &&
           verifier.VerifyString(endPoint1Name()) &&
           VerifyField<double>(verifier, VT_ENDPOINT1LAT, 8) &&
           VerifyField<double>(verifier, VT_ENDPOINT1LON, 8) &&
           VerifyOffset(verifier, VT_IDBEAM2) &&
           verifier.VerifyString(idBeam2()) &&
           VerifyOffset(verifier, VT_ENDPOINT2NAME) &&
           verifier.VerifyString(endPoint2Name()) &&
           VerifyField<double>(verifier, VT_ENDPOINT2LAT, 8) &&
           VerifyField<double>(verifier, VT_ENDPOINT2LON, 8) &&
           VerifyField<double>(verifier, VT_DATARATE1TO2, 8) &&
           VerifyField<double>(verifier, VT_DATARATE2TO1, 8) &&
           VerifyOffset(verifier, VT_LINKSTATE) &&
           verifier.VerifyString(linkState()) &&
           VerifyOffset(verifier, VT_SYSCAP) &&
           verifier.VerifyString(sysCap()) &&
           VerifyOffset(verifier, VT_OPSCAP) &&
           verifier.VerifyString(opsCap()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyField<int32_t>(verifier, VT_SATNO1, 4) &&
           VerifyField<int32_t>(verifier, VT_SATNO2, 4) &&
           verifier.EndTable();
  }
};

struct LinkStatus_IngestBuilder {
  typedef LinkStatus_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit1(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit1) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_IDONORBIT1, idOnOrbit1);
  }
  void add_idOnOrbit2(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit2) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_IDONORBIT2, idOnOrbit2);
  }
  void add_linkStartTime(::flatbuffers::Offset<::flatbuffers::String> linkStartTime) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_LINKSTARTTIME, linkStartTime);
  }
  void add_linkStopTime(::flatbuffers::Offset<::flatbuffers::String> linkStopTime) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_LINKSTOPTIME, linkStopTime);
  }
  void add_constellation(::flatbuffers::Offset<::flatbuffers::String> constellation) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_CONSTELLATION, constellation);
  }
  void add_linkName(::flatbuffers::Offset<::flatbuffers::String> linkName) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_LINKNAME, linkName);
  }
  void add_linkType(::flatbuffers::Offset<::flatbuffers::String> linkType) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_LINKTYPE, linkType);
  }
  void add_band(::flatbuffers::Offset<::flatbuffers::String> band) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_BAND, band);
  }
  void add_idBeam1(::flatbuffers::Offset<::flatbuffers::String> idBeam1) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_IDBEAM1, idBeam1);
  }
  void add_endPoint1Name(::flatbuffers::Offset<::flatbuffers::String> endPoint1Name) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_ENDPOINT1NAME, endPoint1Name);
  }
  void add_endPoint1Lat(double endPoint1Lat) {
    fbb_.AddElement<double>(LinkStatus_Ingest::VT_ENDPOINT1LAT, endPoint1Lat, 0.0);
  }
  void add_endPoint1Lon(double endPoint1Lon) {
    fbb_.AddElement<double>(LinkStatus_Ingest::VT_ENDPOINT1LON, endPoint1Lon, 0.0);
  }
  void add_idBeam2(::flatbuffers::Offset<::flatbuffers::String> idBeam2) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_IDBEAM2, idBeam2);
  }
  void add_endPoint2Name(::flatbuffers::Offset<::flatbuffers::String> endPoint2Name) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_ENDPOINT2NAME, endPoint2Name);
  }
  void add_endPoint2Lat(double endPoint2Lat) {
    fbb_.AddElement<double>(LinkStatus_Ingest::VT_ENDPOINT2LAT, endPoint2Lat, 0.0);
  }
  void add_endPoint2Lon(double endPoint2Lon) {
    fbb_.AddElement<double>(LinkStatus_Ingest::VT_ENDPOINT2LON, endPoint2Lon, 0.0);
  }
  void add_dataRate1To2(double dataRate1To2) {
    fbb_.AddElement<double>(LinkStatus_Ingest::VT_DATARATE1TO2, dataRate1To2, 0.0);
  }
  void add_dataRate2To1(double dataRate2To1) {
    fbb_.AddElement<double>(LinkStatus_Ingest::VT_DATARATE2TO1, dataRate2To1, 0.0);
  }
  void add_linkState(::flatbuffers::Offset<::flatbuffers::String> linkState) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_LINKSTATE, linkState);
  }
  void add_sysCap(::flatbuffers::Offset<::flatbuffers::String> sysCap) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_SYSCAP, sysCap);
  }
  void add_opsCap(::flatbuffers::Offset<::flatbuffers::String> opsCap) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_OPSCAP, opsCap);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(LinkStatus_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(LinkStatus_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(LinkStatus_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_satNo1(int32_t satNo1) {
    fbb_.AddElement<int32_t>(LinkStatus_Ingest::VT_SATNO1, satNo1, 0);
  }
  void add_satNo2(int32_t satNo2) {
    fbb_.AddElement<int32_t>(LinkStatus_Ingest::VT_SATNO2, satNo2, 0);
  }
  explicit LinkStatus_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LinkStatus_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LinkStatus_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LinkStatus_Ingest> CreateLinkStatus_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkStopTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> constellation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> linkType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> band = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idBeam1 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endPoint1Name = 0,
    double endPoint1Lat = 0.0,
    double endPoint1Lon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> idBeam2 = 0,
    ::flatbuffers::Offset<::flatbuffers::String> endPoint2Name = 0,
    double endPoint2Lat = 0.0,
    double endPoint2Lon = 0.0,
    double dataRate1To2 = 0.0,
    double dataRate2To1 = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> linkState = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sysCap = 0,
    ::flatbuffers::Offset<::flatbuffers::String> opsCap = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    LinkStatus_Ingest_dataMode_Enum dataMode = LinkStatus_Ingest_dataMode_Enum_REAL,
    int32_t satNo1 = 0,
    int32_t satNo2 = 0) {
  LinkStatus_IngestBuilder builder_(_fbb);
  builder_.add_dataRate2To1(dataRate2To1);
  builder_.add_dataRate1To2(dataRate1To2);
  builder_.add_endPoint2Lon(endPoint2Lon);
  builder_.add_endPoint2Lat(endPoint2Lat);
  builder_.add_endPoint1Lon(endPoint1Lon);
  builder_.add_endPoint1Lat(endPoint1Lat);
  builder_.add_satNo2(satNo2);
  builder_.add_satNo1(satNo1);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_opsCap(opsCap);
  builder_.add_sysCap(sysCap);
  builder_.add_linkState(linkState);
  builder_.add_endPoint2Name(endPoint2Name);
  builder_.add_idBeam2(idBeam2);
  builder_.add_endPoint1Name(endPoint1Name);
  builder_.add_idBeam1(idBeam1);
  builder_.add_band(band);
  builder_.add_linkType(linkType);
  builder_.add_linkName(linkName);
  builder_.add_constellation(constellation);
  builder_.add_linkStopTime(linkStopTime);
  builder_.add_linkStartTime(linkStartTime);
  builder_.add_idOnOrbit2(idOnOrbit2);
  builder_.add_idOnOrbit1(idOnOrbit1);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LinkStatus_Ingest> CreateLinkStatus_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit1 = nullptr,
    const char *idOnOrbit2 = nullptr,
    const char *linkStartTime = nullptr,
    const char *linkStopTime = nullptr,
    const char *constellation = nullptr,
    const char *linkName = nullptr,
    const char *linkType = nullptr,
    const char *band = nullptr,
    const char *idBeam1 = nullptr,
    const char *endPoint1Name = nullptr,
    double endPoint1Lat = 0.0,
    double endPoint1Lon = 0.0,
    const char *idBeam2 = nullptr,
    const char *endPoint2Name = nullptr,
    double endPoint2Lat = 0.0,
    double endPoint2Lon = 0.0,
    double dataRate1To2 = 0.0,
    double dataRate2To1 = 0.0,
    const char *linkState = nullptr,
    const char *sysCap = nullptr,
    const char *opsCap = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    LinkStatus_Ingest_dataMode_Enum dataMode = LinkStatus_Ingest_dataMode_Enum_REAL,
    int32_t satNo1 = 0,
    int32_t satNo2 = 0) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit1__ = idOnOrbit1 ? _fbb.CreateString(idOnOrbit1) : 0;
  auto idOnOrbit2__ = idOnOrbit2 ? _fbb.CreateString(idOnOrbit2) : 0;
  auto linkStartTime__ = linkStartTime ? _fbb.CreateString(linkStartTime) : 0;
  auto linkStopTime__ = linkStopTime ? _fbb.CreateString(linkStopTime) : 0;
  auto constellation__ = constellation ? _fbb.CreateString(constellation) : 0;
  auto linkName__ = linkName ? _fbb.CreateString(linkName) : 0;
  auto linkType__ = linkType ? _fbb.CreateString(linkType) : 0;
  auto band__ = band ? _fbb.CreateString(band) : 0;
  auto idBeam1__ = idBeam1 ? _fbb.CreateString(idBeam1) : 0;
  auto endPoint1Name__ = endPoint1Name ? _fbb.CreateString(endPoint1Name) : 0;
  auto idBeam2__ = idBeam2 ? _fbb.CreateString(idBeam2) : 0;
  auto endPoint2Name__ = endPoint2Name ? _fbb.CreateString(endPoint2Name) : 0;
  auto linkState__ = linkState ? _fbb.CreateString(linkState) : 0;
  auto sysCap__ = sysCap ? _fbb.CreateString(sysCap) : 0;
  auto opsCap__ = opsCap ? _fbb.CreateString(opsCap) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateLinkStatus_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit1__,
      idOnOrbit2__,
      linkStartTime__,
      linkStopTime__,
      constellation__,
      linkName__,
      linkType__,
      band__,
      idBeam1__,
      endPoint1Name__,
      endPoint1Lat,
      endPoint1Lon,
      idBeam2__,
      endPoint2Name__,
      endPoint2Lat,
      endPoint2Lon,
      dataRate1To2,
      dataRate2To1,
      linkState__,
      sysCap__,
      opsCap__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      satNo1,
      satNo2);
}

inline const LinkStatus_Ingest *GetLinkStatus_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LinkStatus_Ingest>(buf);
}

inline const LinkStatus_Ingest *GetSizePrefixedLinkStatus_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LinkStatus_Ingest>(buf);
}

inline const char *LinkStatus_IngestIdentifier() {
  return "LINK";
}

inline bool LinkStatus_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LinkStatus_IngestIdentifier());
}

inline bool SizePrefixedLinkStatus_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LinkStatus_IngestIdentifier(), true);
}

inline bool VerifyLinkStatus_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LinkStatus_Ingest>(LinkStatus_IngestIdentifier());
}

inline bool VerifySizePrefixedLinkStatus_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LinkStatus_Ingest>(LinkStatus_IngestIdentifier());
}

inline void FinishLinkStatus_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LinkStatus_Ingest> root) {
  fbb.Finish(root, LinkStatus_IngestIdentifier());
}

inline void FinishSizePrefixedLinkStatus_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LinkStatus_Ingest> root) {
  fbb.FinishSizePrefixed(root, LinkStatus_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
