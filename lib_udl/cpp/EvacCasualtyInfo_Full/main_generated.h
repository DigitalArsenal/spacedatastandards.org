// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacCasualtyInfo_Full;
struct EvacCasualtyInfo_FullBuilder;

/// /// Identity and medical information on the patient to be evacuated.
struct EvacCasualtyInfo_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacCasualtyInfo_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PRIORITY = 4,
    VT_EVACTYPE = 6,
    VT_CASUALTYTYPE = 8,
    VT_BODYPART = 10,
    VT_CONTAMTYPE = 12,
    VT_SPECMEDEQUIP = 14,
    VT_CASUALTYKEY = 16,
    VT_PATIENTSTATUS = 18,
    VT_PATIENTIDENTITY = 20,
    VT_NATIONALITY = 22,
    VT_PAYGRADE = 24,
    VT_NAME = 26,
    VT_AGE = 28,
    VT_GENDER = 30,
    VT_LAST4SSN = 32,
    VT_BLOODTYPE = 34,
    VT_SERVICE = 36,
    VT_CALLSIGN = 38,
    VT_OCCSPECIALITY = 40,
    VT_BURIALLOCATION = 42,
    VT_COLLECTIONPOINT = 44,
    VT_CAREPROVIDERURN = 46,
    VT_DISPOSITIONTYPE = 48,
    VT_DISPOSITION = 50,
    VT_REPORTGEN = 52,
    VT_REPORTTIME = 54,
    VT_COMMENTS = 56,
    VT_ETIOLOGY = 58,
    VT_TREATMENT = 60,
    VT_VITALSIGNDATA = 62,
    VT_HEALTHSTATE = 64,
    VT_CONDITION = 66,
    VT_MEDICATION = 68,
    VT_INJURY = 70,
    VT_ALLERGY = 72
  };
  /// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
  /// Example: /// Example: ROUTINE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *priority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIORITY);
  }
  /// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
  /// Example: /// Example: GROUND
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *evacType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVACTYPE);
  }
  /// The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
  /// Example: /// Example: DENTAL
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *casualtyType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CASUALTYTYPE);
  }
  /// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
  /// Example: /// Example: FACE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *bodyPart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODYPART);
  }
  /// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
  /// Example: /// Example: NONE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *contamType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONTAMTYPE);
  }
  /// Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
  /// Example: /// Example: ['OXYGEN', 'HOIST']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *specMedEquip() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SPECMEDEQUIP);
  }
  /// Optional casualty key.
  /// Example: /// Example: casualty-007
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *casualtyKey() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CASUALTYKEY);
  }
  /// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
  /// Example: /// Example: US CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *patientStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PATIENTSTATUS);
  }
  /// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
  /// Example: /// Example: FRIEND CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *patientIdentity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PATIENTIDENTITY);
  }
  /// The country code indicating the citizenship of the patient.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *nationality() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NATIONALITY);
  }
  /// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
  /// Example: /// Example: CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *payGrade() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAYGRADE);
  }
  /// The patient common or legal name.
  /// Example: /// Example: John Smith
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// The patient age, in years.
  /// Example: /// Example: 35
  /// Constraints: No constraints specified.
  int32_t age() const {
    return GetField<int32_t>(VT_AGE, 0);
  }
  /// The patient sex (MALE, FEMALE).
  /// Example: /// Example: MALE
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *gender() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GENDER);
  }
  /// Last 4 characters of the patient social security code, or equivalent.
  /// Example: /// Example: 1234
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *last4SSN() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAST4SSN);
  }
  /// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
  /// Example: /// Example: O NEG
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *bloodType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BLOODTYPE);
  }
  /// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
  /// Example: /// Example: CIV
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *service() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERVICE);
  }
  /// The call sign of this patient.
  /// Example: /// Example: SHARK
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// The career field of this patient.
  /// Example: /// Example: Healthcare
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *occSpeciality() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OCCSPECIALITY);
  }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [-33.123, 150.33, 0.24]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *burialLocation() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_BURIALLOCATION);
  }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [12.44, 122.55, 0.98]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *collectionPoint() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COLLECTIONPOINT);
  }
  /// Unique identifier for the patient care provider.
  /// Example: /// Example: CARE_PROVIDER-1
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *careProviderUrn() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CAREPROVIDERURN);
  }
  /// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
  /// Example: /// Example: EVACUATE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *dispositionType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DISPOSITIONTYPE);
  }
  /// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
  /// Example: /// Example: EVACUATE WOUNDED
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *disposition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DISPOSITION);
  }
  /// The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
  /// Example: /// Example: DEVICE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *reportGen() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTGEN);
  }
  /// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *reportTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTTIME);
  }
  /// Additional comments on the  patient's casualty information.
  /// Example: /// Example: Comments relating to this casualty info.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *comments() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENTS);
  }
  /// Medical condition causation information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *etiology() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ETIOLOGY);
  }
  /// Treatment information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *treatment() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TREATMENT);
  }
  /// Information obtained for vital signs.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *vitalSignData() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_VITALSIGNDATA);
  }
  /// Health state information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *healthState() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_HEALTHSTATE);
  }
  /// Health condition information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *condition() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CONDITION);
  }
  /// Medication specifics.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *medication() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MEDICATION);
  }
  /// Injury specifics.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *injury() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INJURY);
  }
  /// Allergy information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *allergy() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ALLERGY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PRIORITY) &&
           verifier.VerifyString(priority()) &&
           VerifyOffset(verifier, VT_EVACTYPE) &&
           verifier.VerifyString(evacType()) &&
           VerifyOffset(verifier, VT_CASUALTYTYPE) &&
           verifier.VerifyString(casualtyType()) &&
           VerifyOffset(verifier, VT_BODYPART) &&
           verifier.VerifyString(bodyPart()) &&
           VerifyOffset(verifier, VT_CONTAMTYPE) &&
           verifier.VerifyString(contamType()) &&
           VerifyOffset(verifier, VT_SPECMEDEQUIP) &&
           verifier.VerifyVector(specMedEquip()) &&
           verifier.VerifyVectorOfStrings(specMedEquip()) &&
           VerifyOffset(verifier, VT_CASUALTYKEY) &&
           verifier.VerifyString(casualtyKey()) &&
           VerifyOffset(verifier, VT_PATIENTSTATUS) &&
           verifier.VerifyString(patientStatus()) &&
           VerifyOffset(verifier, VT_PATIENTIDENTITY) &&
           verifier.VerifyString(patientIdentity()) &&
           VerifyOffset(verifier, VT_NATIONALITY) &&
           verifier.VerifyString(nationality()) &&
           VerifyOffset(verifier, VT_PAYGRADE) &&
           verifier.VerifyString(payGrade()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<int32_t>(verifier, VT_AGE, 4) &&
           VerifyOffset(verifier, VT_GENDER) &&
           verifier.VerifyString(gender()) &&
           VerifyOffset(verifier, VT_LAST4SSN) &&
           verifier.VerifyString(last4SSN()) &&
           VerifyOffset(verifier, VT_BLOODTYPE) &&
           verifier.VerifyString(bloodType()) &&
           VerifyOffset(verifier, VT_SERVICE) &&
           verifier.VerifyString(service()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_OCCSPECIALITY) &&
           verifier.VerifyString(occSpeciality()) &&
           VerifyOffset(verifier, VT_BURIALLOCATION) &&
           verifier.VerifyVector(burialLocation()) &&
           verifier.VerifyVectorOfStrings(burialLocation()) &&
           VerifyOffset(verifier, VT_COLLECTIONPOINT) &&
           verifier.VerifyVector(collectionPoint()) &&
           verifier.VerifyVectorOfStrings(collectionPoint()) &&
           VerifyOffset(verifier, VT_CAREPROVIDERURN) &&
           verifier.VerifyString(careProviderUrn()) &&
           VerifyOffset(verifier, VT_DISPOSITIONTYPE) &&
           verifier.VerifyString(dispositionType()) &&
           VerifyOffset(verifier, VT_DISPOSITION) &&
           verifier.VerifyString(disposition()) &&
           VerifyOffset(verifier, VT_REPORTGEN) &&
           verifier.VerifyString(reportGen()) &&
           VerifyOffset(verifier, VT_REPORTTIME) &&
           verifier.VerifyString(reportTime()) &&
           VerifyOffset(verifier, VT_COMMENTS) &&
           verifier.VerifyString(comments()) &&
           VerifyOffset(verifier, VT_ETIOLOGY) &&
           verifier.VerifyVector(etiology()) &&
           verifier.VerifyVectorOfStrings(etiology()) &&
           VerifyOffset(verifier, VT_TREATMENT) &&
           verifier.VerifyVector(treatment()) &&
           verifier.VerifyVectorOfStrings(treatment()) &&
           VerifyOffset(verifier, VT_VITALSIGNDATA) &&
           verifier.VerifyVector(vitalSignData()) &&
           verifier.VerifyVectorOfStrings(vitalSignData()) &&
           VerifyOffset(verifier, VT_HEALTHSTATE) &&
           verifier.VerifyVector(healthState()) &&
           verifier.VerifyVectorOfStrings(healthState()) &&
           VerifyOffset(verifier, VT_CONDITION) &&
           verifier.VerifyVector(condition()) &&
           verifier.VerifyVectorOfStrings(condition()) &&
           VerifyOffset(verifier, VT_MEDICATION) &&
           verifier.VerifyVector(medication()) &&
           verifier.VerifyVectorOfStrings(medication()) &&
           VerifyOffset(verifier, VT_INJURY) &&
           verifier.VerifyVector(injury()) &&
           verifier.VerifyVectorOfStrings(injury()) &&
           VerifyOffset(verifier, VT_ALLERGY) &&
           verifier.VerifyVector(allergy()) &&
           verifier.VerifyVectorOfStrings(allergy()) &&
           verifier.EndTable();
  }
};

struct EvacCasualtyInfo_FullBuilder {
  typedef EvacCasualtyInfo_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_priority(::flatbuffers::Offset<::flatbuffers::String> priority) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_PRIORITY, priority);
  }
  void add_evacType(::flatbuffers::Offset<::flatbuffers::String> evacType) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_EVACTYPE, evacType);
  }
  void add_casualtyType(::flatbuffers::Offset<::flatbuffers::String> casualtyType) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_CASUALTYTYPE, casualtyType);
  }
  void add_bodyPart(::flatbuffers::Offset<::flatbuffers::String> bodyPart) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_BODYPART, bodyPart);
  }
  void add_contamType(::flatbuffers::Offset<::flatbuffers::String> contamType) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_CONTAMTYPE, contamType);
  }
  void add_specMedEquip(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specMedEquip) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_SPECMEDEQUIP, specMedEquip);
  }
  void add_casualtyKey(::flatbuffers::Offset<::flatbuffers::String> casualtyKey) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_CASUALTYKEY, casualtyKey);
  }
  void add_patientStatus(::flatbuffers::Offset<::flatbuffers::String> patientStatus) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_PATIENTSTATUS, patientStatus);
  }
  void add_patientIdentity(::flatbuffers::Offset<::flatbuffers::String> patientIdentity) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_PATIENTIDENTITY, patientIdentity);
  }
  void add_nationality(::flatbuffers::Offset<::flatbuffers::String> nationality) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_NATIONALITY, nationality);
  }
  void add_payGrade(::flatbuffers::Offset<::flatbuffers::String> payGrade) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_PAYGRADE, payGrade);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_NAME, name);
  }
  void add_age(int32_t age) {
    fbb_.AddElement<int32_t>(EvacCasualtyInfo_Full::VT_AGE, age, 0);
  }
  void add_gender(::flatbuffers::Offset<::flatbuffers::String> gender) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_GENDER, gender);
  }
  void add_last4SSN(::flatbuffers::Offset<::flatbuffers::String> last4SSN) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_LAST4SSN, last4SSN);
  }
  void add_bloodType(::flatbuffers::Offset<::flatbuffers::String> bloodType) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_BLOODTYPE, bloodType);
  }
  void add_service(::flatbuffers::Offset<::flatbuffers::String> service) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_SERVICE, service);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_CALLSIGN, callSign);
  }
  void add_occSpeciality(::flatbuffers::Offset<::flatbuffers::String> occSpeciality) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_OCCSPECIALITY, occSpeciality);
  }
  void add_burialLocation(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> burialLocation) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_BURIALLOCATION, burialLocation);
  }
  void add_collectionPoint(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> collectionPoint) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_COLLECTIONPOINT, collectionPoint);
  }
  void add_careProviderUrn(::flatbuffers::Offset<::flatbuffers::String> careProviderUrn) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_CAREPROVIDERURN, careProviderUrn);
  }
  void add_dispositionType(::flatbuffers::Offset<::flatbuffers::String> dispositionType) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_DISPOSITIONTYPE, dispositionType);
  }
  void add_disposition(::flatbuffers::Offset<::flatbuffers::String> disposition) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_DISPOSITION, disposition);
  }
  void add_reportGen(::flatbuffers::Offset<::flatbuffers::String> reportGen) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_REPORTGEN, reportGen);
  }
  void add_reportTime(::flatbuffers::Offset<::flatbuffers::String> reportTime) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_REPORTTIME, reportTime);
  }
  void add_comments(::flatbuffers::Offset<::flatbuffers::String> comments) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_COMMENTS, comments);
  }
  void add_etiology(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> etiology) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_ETIOLOGY, etiology);
  }
  void add_treatment(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> treatment) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_TREATMENT, treatment);
  }
  void add_vitalSignData(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> vitalSignData) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_VITALSIGNDATA, vitalSignData);
  }
  void add_healthState(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> healthState) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_HEALTHSTATE, healthState);
  }
  void add_condition(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> condition) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_CONDITION, condition);
  }
  void add_medication(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> medication) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_MEDICATION, medication);
  }
  void add_injury(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> injury) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_INJURY, injury);
  }
  void add_allergy(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> allergy) {
    fbb_.AddOffset(EvacCasualtyInfo_Full::VT_ALLERGY, allergy);
  }
  explicit EvacCasualtyInfo_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacCasualtyInfo_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacCasualtyInfo_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacCasualtyInfo_Full> CreateEvacCasualtyInfo_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> priority = 0,
    ::flatbuffers::Offset<::flatbuffers::String> evacType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> casualtyType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bodyPart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> contamType = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> specMedEquip = 0,
    ::flatbuffers::Offset<::flatbuffers::String> casualtyKey = 0,
    ::flatbuffers::Offset<::flatbuffers::String> patientStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> patientIdentity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nationality = 0,
    ::flatbuffers::Offset<::flatbuffers::String> payGrade = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    int32_t age = 0,
    ::flatbuffers::Offset<::flatbuffers::String> gender = 0,
    ::flatbuffers::Offset<::flatbuffers::String> last4SSN = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bloodType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> service = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> occSpeciality = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> burialLocation = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> collectionPoint = 0,
    ::flatbuffers::Offset<::flatbuffers::String> careProviderUrn = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dispositionType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> disposition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportGen = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> comments = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> etiology = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> treatment = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> vitalSignData = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> healthState = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> condition = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> medication = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> injury = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> allergy = 0) {
  EvacCasualtyInfo_FullBuilder builder_(_fbb);
  builder_.add_allergy(allergy);
  builder_.add_injury(injury);
  builder_.add_medication(medication);
  builder_.add_condition(condition);
  builder_.add_healthState(healthState);
  builder_.add_vitalSignData(vitalSignData);
  builder_.add_treatment(treatment);
  builder_.add_etiology(etiology);
  builder_.add_comments(comments);
  builder_.add_reportTime(reportTime);
  builder_.add_reportGen(reportGen);
  builder_.add_disposition(disposition);
  builder_.add_dispositionType(dispositionType);
  builder_.add_careProviderUrn(careProviderUrn);
  builder_.add_collectionPoint(collectionPoint);
  builder_.add_burialLocation(burialLocation);
  builder_.add_occSpeciality(occSpeciality);
  builder_.add_callSign(callSign);
  builder_.add_service(service);
  builder_.add_bloodType(bloodType);
  builder_.add_last4SSN(last4SSN);
  builder_.add_gender(gender);
  builder_.add_age(age);
  builder_.add_name(name);
  builder_.add_payGrade(payGrade);
  builder_.add_nationality(nationality);
  builder_.add_patientIdentity(patientIdentity);
  builder_.add_patientStatus(patientStatus);
  builder_.add_casualtyKey(casualtyKey);
  builder_.add_specMedEquip(specMedEquip);
  builder_.add_contamType(contamType);
  builder_.add_bodyPart(bodyPart);
  builder_.add_casualtyType(casualtyType);
  builder_.add_evacType(evacType);
  builder_.add_priority(priority);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacCasualtyInfo_Full> CreateEvacCasualtyInfo_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *priority = nullptr,
    const char *evacType = nullptr,
    const char *casualtyType = nullptr,
    const char *bodyPart = nullptr,
    const char *contamType = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *specMedEquip = nullptr,
    const char *casualtyKey = nullptr,
    const char *patientStatus = nullptr,
    const char *patientIdentity = nullptr,
    const char *nationality = nullptr,
    const char *payGrade = nullptr,
    const char *name = nullptr,
    int32_t age = 0,
    const char *gender = nullptr,
    const char *last4SSN = nullptr,
    const char *bloodType = nullptr,
    const char *service = nullptr,
    const char *callSign = nullptr,
    const char *occSpeciality = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *burialLocation = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *collectionPoint = nullptr,
    const char *careProviderUrn = nullptr,
    const char *dispositionType = nullptr,
    const char *disposition = nullptr,
    const char *reportGen = nullptr,
    const char *reportTime = nullptr,
    const char *comments = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *etiology = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *treatment = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *vitalSignData = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *healthState = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *condition = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *medication = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *injury = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *allergy = nullptr) {
  auto priority__ = priority ? _fbb.CreateString(priority) : 0;
  auto evacType__ = evacType ? _fbb.CreateString(evacType) : 0;
  auto casualtyType__ = casualtyType ? _fbb.CreateString(casualtyType) : 0;
  auto bodyPart__ = bodyPart ? _fbb.CreateString(bodyPart) : 0;
  auto contamType__ = contamType ? _fbb.CreateString(contamType) : 0;
  auto specMedEquip__ = specMedEquip ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*specMedEquip) : 0;
  auto casualtyKey__ = casualtyKey ? _fbb.CreateString(casualtyKey) : 0;
  auto patientStatus__ = patientStatus ? _fbb.CreateString(patientStatus) : 0;
  auto patientIdentity__ = patientIdentity ? _fbb.CreateString(patientIdentity) : 0;
  auto nationality__ = nationality ? _fbb.CreateString(nationality) : 0;
  auto payGrade__ = payGrade ? _fbb.CreateString(payGrade) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto gender__ = gender ? _fbb.CreateString(gender) : 0;
  auto last4SSN__ = last4SSN ? _fbb.CreateString(last4SSN) : 0;
  auto bloodType__ = bloodType ? _fbb.CreateString(bloodType) : 0;
  auto service__ = service ? _fbb.CreateString(service) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto occSpeciality__ = occSpeciality ? _fbb.CreateString(occSpeciality) : 0;
  auto burialLocation__ = burialLocation ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*burialLocation) : 0;
  auto collectionPoint__ = collectionPoint ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*collectionPoint) : 0;
  auto careProviderUrn__ = careProviderUrn ? _fbb.CreateString(careProviderUrn) : 0;
  auto dispositionType__ = dispositionType ? _fbb.CreateString(dispositionType) : 0;
  auto disposition__ = disposition ? _fbb.CreateString(disposition) : 0;
  auto reportGen__ = reportGen ? _fbb.CreateString(reportGen) : 0;
  auto reportTime__ = reportTime ? _fbb.CreateString(reportTime) : 0;
  auto comments__ = comments ? _fbb.CreateString(comments) : 0;
  auto etiology__ = etiology ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*etiology) : 0;
  auto treatment__ = treatment ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*treatment) : 0;
  auto vitalSignData__ = vitalSignData ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*vitalSignData) : 0;
  auto healthState__ = healthState ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*healthState) : 0;
  auto condition__ = condition ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*condition) : 0;
  auto medication__ = medication ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*medication) : 0;
  auto injury__ = injury ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*injury) : 0;
  auto allergy__ = allergy ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*allergy) : 0;
  return CreateEvacCasualtyInfo_Full(
      _fbb,
      priority__,
      evacType__,
      casualtyType__,
      bodyPart__,
      contamType__,
      specMedEquip__,
      casualtyKey__,
      patientStatus__,
      patientIdentity__,
      nationality__,
      payGrade__,
      name__,
      age,
      gender__,
      last4SSN__,
      bloodType__,
      service__,
      callSign__,
      occSpeciality__,
      burialLocation__,
      collectionPoint__,
      careProviderUrn__,
      dispositionType__,
      disposition__,
      reportGen__,
      reportTime__,
      comments__,
      etiology__,
      treatment__,
      vitalSignData__,
      healthState__,
      condition__,
      medication__,
      injury__,
      allergy__);
}

inline const EvacCasualtyInfo_Full *GetEvacCasualtyInfo_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EvacCasualtyInfo_Full>(buf);
}

inline const EvacCasualtyInfo_Full *GetSizePrefixedEvacCasualtyInfo_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacCasualtyInfo_Full>(buf);
}

inline const char *EvacCasualtyInfo_FullIdentifier() {
  return "EVAC";
}

inline bool EvacCasualtyInfo_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacCasualtyInfo_FullIdentifier());
}

inline bool SizePrefixedEvacCasualtyInfo_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacCasualtyInfo_FullIdentifier(), true);
}

inline bool VerifyEvacCasualtyInfo_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacCasualtyInfo_Full>(EvacCasualtyInfo_FullIdentifier());
}

inline bool VerifySizePrefixedEvacCasualtyInfo_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacCasualtyInfo_Full>(EvacCasualtyInfo_FullIdentifier());
}

inline void FinishEvacCasualtyInfo_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacCasualtyInfo_Full> root) {
  fbb.Finish(root, EvacCasualtyInfo_FullIdentifier());
}

inline void FinishSizePrefixedEvacCasualtyInfo_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacCasualtyInfo_Full> root) {
  fbb.FinishSizePrefixed(root, EvacCasualtyInfo_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
