// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct GEOStatus_Ingest;
struct GEOStatus_IngestBuilder;

enum GEOStatus_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  GEOStatus_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  GEOStatus_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  GEOStatus_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  GEOStatus_Ingest_dataMode_Enum_EXERCISE = 3,
  GEOStatus_Ingest_dataMode_Enum_MIN = GEOStatus_Ingest_dataMode_Enum_REAL,
  GEOStatus_Ingest_dataMode_Enum_MAX = GEOStatus_Ingest_dataMode_Enum_EXERCISE
};

inline const GEOStatus_Ingest_dataMode_Enum (&EnumValuesGEOStatus_Ingest_dataMode_Enum())[4] {
  static const GEOStatus_Ingest_dataMode_Enum values[] = {
    GEOStatus_Ingest_dataMode_Enum_REAL,
    GEOStatus_Ingest_dataMode_Enum_TEST,
    GEOStatus_Ingest_dataMode_Enum_SIMULATED,
    GEOStatus_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesGEOStatus_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameGEOStatus_Ingest_dataMode_Enum(GEOStatus_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, GEOStatus_Ingest_dataMode_Enum_REAL, GEOStatus_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGEOStatus_Ingest_dataMode_Enum()[index];
}

/// /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
struct GEOStatus_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GEOStatus_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_ORIGOBJECTID = 10,
    VT_SS = 12,
    VT_SC = 14,
    VT_RELATIVEENERGY = 16,
    VT_LONGITUDERATE = 18,
    VT_LONGITUDEMIN = 20,
    VT_LONGITUDEMAX = 22,
    VT_CONFIDENCELEVEL = 24,
    VT_PLANECHANGESTATUS = 26,
    VT_TROUGHTYPE = 28,
    VT_LOSTFLAG = 30,
    VT_SEMIANNUALCORRFLAG = 32,
    VT_OBJECTSTATUS = 34,
    VT_RAWFILEURI = 36,
    VT_CREATEDAT = 38,
    VT_CREATEDBY = 40,
    VT_SOURCE = 42,
    VT_ORIGIN = 44,
    VT_DATAMODE = 46,
    VT_SATNO = 48,
    VT_ORIGNETWORK = 50
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GEOSTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the object on-orbit object.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Sine of inclination times the sine of right ascension.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double ss() const {
    return GetField<double>(VT_SS, 0.0);
  }
  /// Sine of inclination times the cosine of right ascension.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double sc() const {
    return GetField<double>(VT_SC, 0.0);
  }
  /// Objects displacement from geostationary orbit in deg^2/day^2.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double relativeEnergy() const {
    return GetField<double>(VT_RELATIVEENERGY, 0.0);
  }
  /// Corrective or overriding long term trend for longitudinal change in degrees/day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double longitudeRate() const {
    return GetField<double>(VT_LONGITUDERATE, 0.0);
  }
  /// Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  double longitudeMin() const {
    return GetField<double>(VT_LONGITUDEMIN, 0.0);
  }
  /// Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  /// Example: /// Example: 1.01
  /// Constraints: No constraints specified.
  double longitudeMax() const {
    return GetField<double>(VT_LONGITUDEMAX, 0.0);
  }
  /// Indicates the confidence level in the entry.  (Low, Medium, High).
  /// Example: /// Example: Low
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *confidenceLevel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENCELEVEL);
  }
  /// Geosynchronous plane changing status.  (Current, Never, Former, Future).
  /// Example: /// Example: Current
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *planeChangeStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANECHANGESTATUS);
  }
  /// Indicates the trough (gravity well) or drift direction of a space object:
  /// 255 - Influenced by 255° longitude trough. 
  /// 75 - Influenced by 75° longitude trough. 
  /// Both - Oscillating between both 255 and 75 troughs. 
  /// East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
  /// West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
  /// Example: /// Example: West
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *troughType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TROUGHTYPE);
  }
  /// Lost space object indicator.  (True or False).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool lostFlag() const {
    return GetField<uint8_t>(VT_LOSTFLAG, 0) != 0;
  }
  /// Semi-annual correction.  (True or False).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool semiAnnualCorrFlag() const {
    return GetField<uint8_t>(VT_SEMIANNUALCORRFLAG, 0) != 0;
  }
  /// Space object status.  (Active, Dead, Unknown).
  /// Example: /// Example: Active
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *objectStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJECTSTATUS);
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *rawFileURI() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RAWFILEURI);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  GEOStatus_Ingest_dataMode_Enum dataMode() const {
    return static_cast<GEOStatus_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 21
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyField<double>(verifier, VT_SS, 8) &&
           VerifyField<double>(verifier, VT_SC, 8) &&
           VerifyField<double>(verifier, VT_RELATIVEENERGY, 8) &&
           VerifyField<double>(verifier, VT_LONGITUDERATE, 8) &&
           VerifyField<double>(verifier, VT_LONGITUDEMIN, 8) &&
           VerifyField<double>(verifier, VT_LONGITUDEMAX, 8) &&
           VerifyOffset(verifier, VT_CONFIDENCELEVEL) &&
           verifier.VerifyString(confidenceLevel()) &&
           VerifyOffset(verifier, VT_PLANECHANGESTATUS) &&
           verifier.VerifyString(planeChangeStatus()) &&
           VerifyOffset(verifier, VT_TROUGHTYPE) &&
           verifier.VerifyString(troughType()) &&
           VerifyField<uint8_t>(verifier, VT_LOSTFLAG, 1) &&
           VerifyField<uint8_t>(verifier, VT_SEMIANNUALCORRFLAG, 1) &&
           VerifyOffset(verifier, VT_OBJECTSTATUS) &&
           verifier.VerifyString(objectStatus()) &&
           VerifyOffset(verifier, VT_RAWFILEURI) &&
           verifier.VerifyString(rawFileURI()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           verifier.EndTable();
  }
};

struct GEOStatus_IngestBuilder {
  typedef GEOStatus_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  void add_ss(double ss) {
    fbb_.AddElement<double>(GEOStatus_Ingest::VT_SS, ss, 0.0);
  }
  void add_sc(double sc) {
    fbb_.AddElement<double>(GEOStatus_Ingest::VT_SC, sc, 0.0);
  }
  void add_relativeEnergy(double relativeEnergy) {
    fbb_.AddElement<double>(GEOStatus_Ingest::VT_RELATIVEENERGY, relativeEnergy, 0.0);
  }
  void add_longitudeRate(double longitudeRate) {
    fbb_.AddElement<double>(GEOStatus_Ingest::VT_LONGITUDERATE, longitudeRate, 0.0);
  }
  void add_longitudeMin(double longitudeMin) {
    fbb_.AddElement<double>(GEOStatus_Ingest::VT_LONGITUDEMIN, longitudeMin, 0.0);
  }
  void add_longitudeMax(double longitudeMax) {
    fbb_.AddElement<double>(GEOStatus_Ingest::VT_LONGITUDEMAX, longitudeMax, 0.0);
  }
  void add_confidenceLevel(::flatbuffers::Offset<::flatbuffers::String> confidenceLevel) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_CONFIDENCELEVEL, confidenceLevel);
  }
  void add_planeChangeStatus(::flatbuffers::Offset<::flatbuffers::String> planeChangeStatus) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_PLANECHANGESTATUS, planeChangeStatus);
  }
  void add_troughType(::flatbuffers::Offset<::flatbuffers::String> troughType) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_TROUGHTYPE, troughType);
  }
  void add_lostFlag(bool lostFlag) {
    fbb_.AddElement<uint8_t>(GEOStatus_Ingest::VT_LOSTFLAG, static_cast<uint8_t>(lostFlag), 0);
  }
  void add_semiAnnualCorrFlag(bool semiAnnualCorrFlag) {
    fbb_.AddElement<uint8_t>(GEOStatus_Ingest::VT_SEMIANNUALCORRFLAG, static_cast<uint8_t>(semiAnnualCorrFlag), 0);
  }
  void add_objectStatus(::flatbuffers::Offset<::flatbuffers::String> objectStatus) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_OBJECTSTATUS, objectStatus);
  }
  void add_rawFileURI(::flatbuffers::Offset<::flatbuffers::String> rawFileURI) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_RAWFILEURI, rawFileURI);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(GEOStatus_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(GEOStatus_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(GEOStatus_Ingest::VT_SATNO, satNo, 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(GEOStatus_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  explicit GEOStatus_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GEOStatus_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GEOStatus_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GEOStatus_Ingest> CreateGEOStatus_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    double ss = 0.0,
    double sc = 0.0,
    double relativeEnergy = 0.0,
    double longitudeRate = 0.0,
    double longitudeMin = 0.0,
    double longitudeMax = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> confidenceLevel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> planeChangeStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> troughType = 0,
    bool lostFlag = false,
    bool semiAnnualCorrFlag = false,
    ::flatbuffers::Offset<::flatbuffers::String> objectStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> rawFileURI = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    GEOStatus_Ingest_dataMode_Enum dataMode = GEOStatus_Ingest_dataMode_Enum_REAL,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0) {
  GEOStatus_IngestBuilder builder_(_fbb);
  builder_.add_longitudeMax(longitudeMax);
  builder_.add_longitudeMin(longitudeMin);
  builder_.add_longitudeRate(longitudeRate);
  builder_.add_relativeEnergy(relativeEnergy);
  builder_.add_sc(sc);
  builder_.add_ss(ss);
  builder_.add_origNetwork(origNetwork);
  builder_.add_satNo(satNo);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_rawFileURI(rawFileURI);
  builder_.add_objectStatus(objectStatus);
  builder_.add_troughType(troughType);
  builder_.add_planeChangeStatus(planeChangeStatus);
  builder_.add_confidenceLevel(confidenceLevel);
  builder_.add_origObjectId(origObjectId);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_semiAnnualCorrFlag(semiAnnualCorrFlag);
  builder_.add_lostFlag(lostFlag);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GEOStatus_Ingest> CreateGEOStatus_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    const char *origObjectId = nullptr,
    double ss = 0.0,
    double sc = 0.0,
    double relativeEnergy = 0.0,
    double longitudeRate = 0.0,
    double longitudeMin = 0.0,
    double longitudeMax = 0.0,
    const char *confidenceLevel = nullptr,
    const char *planeChangeStatus = nullptr,
    const char *troughType = nullptr,
    bool lostFlag = false,
    bool semiAnnualCorrFlag = false,
    const char *objectStatus = nullptr,
    const char *rawFileURI = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    GEOStatus_Ingest_dataMode_Enum dataMode = GEOStatus_Ingest_dataMode_Enum_REAL,
    int32_t satNo = 0,
    const char *origNetwork = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto confidenceLevel__ = confidenceLevel ? _fbb.CreateString(confidenceLevel) : 0;
  auto planeChangeStatus__ = planeChangeStatus ? _fbb.CreateString(planeChangeStatus) : 0;
  auto troughType__ = troughType ? _fbb.CreateString(troughType) : 0;
  auto objectStatus__ = objectStatus ? _fbb.CreateString(objectStatus) : 0;
  auto rawFileURI__ = rawFileURI ? _fbb.CreateString(rawFileURI) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateGEOStatus_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      origObjectId__,
      ss,
      sc,
      relativeEnergy,
      longitudeRate,
      longitudeMin,
      longitudeMax,
      confidenceLevel__,
      planeChangeStatus__,
      troughType__,
      lostFlag,
      semiAnnualCorrFlag,
      objectStatus__,
      rawFileURI__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      satNo,
      origNetwork__);
}

inline const GEOStatus_Ingest *GetGEOStatus_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<GEOStatus_Ingest>(buf);
}

inline const GEOStatus_Ingest *GetSizePrefixedGEOStatus_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GEOStatus_Ingest>(buf);
}

inline const char *GEOStatus_IngestIdentifier() {
  return "GEOS";
}

inline bool GEOStatus_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GEOStatus_IngestIdentifier());
}

inline bool SizePrefixedGEOStatus_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GEOStatus_IngestIdentifier(), true);
}

inline bool VerifyGEOStatus_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GEOStatus_Ingest>(GEOStatus_IngestIdentifier());
}

inline bool VerifySizePrefixedGEOStatus_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GEOStatus_Ingest>(GEOStatus_IngestIdentifier());
}

inline void FinishGEOStatus_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GEOStatus_Ingest> root) {
  fbb.Finish(root, GEOStatus_IngestIdentifier());
}

inline void FinishSizePrefixedGEOStatus_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GEOStatus_Ingest> root) {
  fbb.FinishSizePrefixed(root, GEOStatus_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
