// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct GNSSObservationSet_Ingest;
struct GNSSObservationSet_IngestBuilder;

enum GNSSObservationSet_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  GNSSObservationSet_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  GNSSObservationSet_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  GNSSObservationSet_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  GNSSObservationSet_Ingest_dataMode_Enum_EXERCISE = 3,
  GNSSObservationSet_Ingest_dataMode_Enum_MIN = GNSSObservationSet_Ingest_dataMode_Enum_REAL,
  GNSSObservationSet_Ingest_dataMode_Enum_MAX = GNSSObservationSet_Ingest_dataMode_Enum_EXERCISE
};

inline const GNSSObservationSet_Ingest_dataMode_Enum (&EnumValuesGNSSObservationSet_Ingest_dataMode_Enum())[4] {
  static const GNSSObservationSet_Ingest_dataMode_Enum values[] = {
    GNSSObservationSet_Ingest_dataMode_Enum_REAL,
    GNSSObservationSet_Ingest_dataMode_Enum_TEST,
    GNSSObservationSet_Ingest_dataMode_Enum_SIMULATED,
    GNSSObservationSet_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesGNSSObservationSet_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameGNSSObservationSet_Ingest_dataMode_Enum(GNSSObservationSet_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, GNSSObservationSet_Ingest_dataMode_Enum_REAL, GNSSObservationSet_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesGNSSObservationSet_Ingest_dataMode_Enum()[index];
}

/// /// Set of GNSSObservation data.
struct GNSSObservationSet_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GNSSObservationSet_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_MARKERTYPE = 8,
    VT_IDONORBIT = 10,
    VT_SATNO = 12,
    VT_ORIGOBJECTID = 14,
    VT_TS = 16,
    VT_OUTAGE = 18,
    VT_GDOP = 20,
    VT_HDOP = 22,
    VT_PDOP = 24,
    VT_TDOP = 26,
    VT_VDOP = 28,
    VT_ESID = 30,
    VT_RECEIVER = 32,
    VT_BORESIGHT = 34,
    VT_QUAT = 36,
    VT_LAT = 38,
    VT_LON = 40,
    VT_ALT = 42,
    VT_SATVELOCITY = 44,
    VT_OBSCODES = 46,
    VT_TRACKINGSTATUS = 48,
    VT_NAVIGATIONSTATUS = 50,
    VT_AGCSTATE = 52,
    VT_SRCTYPS = 54,
    VT_SRCIDS = 56,
    VT_TAGS = 58,
    VT_TRANSACTIONID = 60,
    VT_CREATEDAT = 62,
    VT_CREATEDBY = 64,
    VT_SOURCE = 66,
    VT_ORIGIN = 68,
    VT_DATAMODE = 70,
    VT_ORIGNETWORK = 72,
    VT_GNSSOBSERVATIONLIST = 74
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GNSSObSet-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
  /// Example: /// Example: SPACEBORNE
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *markerType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MARKERTYPE);
  }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
  /// Example: /// Example: 2022-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// Time, in seconds, that the receiver has been unable to compute a GNSS fix.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  int32_t outage() const {
    return GetField<int32_t>(VT_OUTAGE, 0);
  }
  /// Geometric Dilution of Precision.
  /// Example: /// Example: 0.33
  /// Constraints: No constraints specified.
  double gDop() const {
    return GetField<double>(VT_GDOP, 0.0);
  }
  /// Horizontal Dilution of Precision.
  /// Example: /// Example: 0.03
  /// Constraints: No constraints specified.
  double hDop() const {
    return GetField<double>(VT_HDOP, 0.0);
  }
  /// Position Dilution of Precision.
  /// Example: /// Example: 0.002
  /// Constraints: No constraints specified.
  double pDop() const {
    return GetField<double>(VT_PDOP, 0.0);
  }
  /// Time Dilution of Precision.
  /// Example: /// Example: 0.05
  /// Constraints: No constraints specified.
  double tDop() const {
    return GetField<double>(VT_TDOP, 0.0);
  }
  /// Vertical Dilution of Precision.
  /// Example: /// Example: 0.03
  /// Constraints: No constraints specified.
  double vDop() const {
    return GetField<double>(VT_VDOP, 0.0);
  }
  /// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
  /// Example: /// Example: ES-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *esId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESID);
  }
  /// The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
  /// Example: /// Example: RECEIVER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *receiver() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVER);
  }
  /// unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  /// Example: /// Example: [1.23, 3.23]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *boresight() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_BORESIGHT);
  }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *quat() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_QUAT);
  }
  /// WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 32.021
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 125.123
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  double alt() const {
    return GetField<double>(VT_ALT, 0.0);
  }
  /// Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
  /// Example: /// Example: [2.03, 0.003, 0.12]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *satVelocity() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SATVELOCITY);
  }
  /// Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
  /// Example: /// Example: ['ACL']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *obsCodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OBSCODES);
  }
  /// Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  int32_t trackingStatus() const {
    return GetField<int32_t>(VT_TRACKINGSTATUS, 0);
  }
  /// The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
  /// Example: /// Example: degraded
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *navigationStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAVIGATIONSTATUS);
  }
  /// GNSS Automatic Gain Control State.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  int32_t agcState() const {
    return GetField<int32_t>(VT_AGCSTATE, 0);
  }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SV', 'SV']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
  /// Example: /// Example: ['SV_ID', 'SV_ID']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  GNSSObservationSet_Ingest_dataMode_Enum dataMode() const {
    return static_cast<GNSSObservationSet_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// GNSSObservations associated with this GNSSObservationSet.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *gnssObservationList() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_GNSSOBSERVATIONLIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_MARKERTYPE) &&
           verifier.VerifyString(markerType()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyField<int32_t>(verifier, VT_OUTAGE, 4) &&
           VerifyField<double>(verifier, VT_GDOP, 8) &&
           VerifyField<double>(verifier, VT_HDOP, 8) &&
           VerifyField<double>(verifier, VT_PDOP, 8) &&
           VerifyField<double>(verifier, VT_TDOP, 8) &&
           VerifyField<double>(verifier, VT_VDOP, 8) &&
           VerifyOffset(verifier, VT_ESID) &&
           verifier.VerifyString(esId()) &&
           VerifyOffset(verifier, VT_RECEIVER) &&
           verifier.VerifyString(receiver()) &&
           VerifyOffset(verifier, VT_BORESIGHT) &&
           verifier.VerifyVector(boresight()) &&
           verifier.VerifyVectorOfStrings(boresight()) &&
           VerifyOffset(verifier, VT_QUAT) &&
           verifier.VerifyVector(quat()) &&
           verifier.VerifyVectorOfStrings(quat()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ALT, 8) &&
           VerifyOffset(verifier, VT_SATVELOCITY) &&
           verifier.VerifyVector(satVelocity()) &&
           verifier.VerifyVectorOfStrings(satVelocity()) &&
           VerifyOffset(verifier, VT_OBSCODES) &&
           verifier.VerifyVector(obsCodes()) &&
           verifier.VerifyVectorOfStrings(obsCodes()) &&
           VerifyField<int32_t>(verifier, VT_TRACKINGSTATUS, 4) &&
           VerifyOffset(verifier, VT_NAVIGATIONSTATUS) &&
           verifier.VerifyString(navigationStatus()) &&
           VerifyField<int32_t>(verifier, VT_AGCSTATE, 4) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_GNSSOBSERVATIONLIST) &&
           verifier.VerifyVector(gnssObservationList()) &&
           verifier.VerifyVectorOfStrings(gnssObservationList()) &&
           verifier.EndTable();
  }
};

struct GNSSObservationSet_IngestBuilder {
  typedef GNSSObservationSet_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_markerType(::flatbuffers::Offset<::flatbuffers::String> markerType) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_MARKERTYPE, markerType);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(GNSSObservationSet_Ingest::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_TS, ts);
  }
  void add_outage(int32_t outage) {
    fbb_.AddElement<int32_t>(GNSSObservationSet_Ingest::VT_OUTAGE, outage, 0);
  }
  void add_gDop(double gDop) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_GDOP, gDop, 0.0);
  }
  void add_hDop(double hDop) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_HDOP, hDop, 0.0);
  }
  void add_pDop(double pDop) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_PDOP, pDop, 0.0);
  }
  void add_tDop(double tDop) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_TDOP, tDop, 0.0);
  }
  void add_vDop(double vDop) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_VDOP, vDop, 0.0);
  }
  void add_esId(::flatbuffers::Offset<::flatbuffers::String> esId) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_ESID, esId);
  }
  void add_receiver(::flatbuffers::Offset<::flatbuffers::String> receiver) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_RECEIVER, receiver);
  }
  void add_boresight(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> boresight) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_BORESIGHT, boresight);
  }
  void add_quat(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> quat) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_QUAT, quat);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_LON, lon, 0.0);
  }
  void add_alt(double alt) {
    fbb_.AddElement<double>(GNSSObservationSet_Ingest::VT_ALT, alt, 0.0);
  }
  void add_satVelocity(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> satVelocity) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_SATVELOCITY, satVelocity);
  }
  void add_obsCodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> obsCodes) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_OBSCODES, obsCodes);
  }
  void add_trackingStatus(int32_t trackingStatus) {
    fbb_.AddElement<int32_t>(GNSSObservationSet_Ingest::VT_TRACKINGSTATUS, trackingStatus, 0);
  }
  void add_navigationStatus(::flatbuffers::Offset<::flatbuffers::String> navigationStatus) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_NAVIGATIONSTATUS, navigationStatus);
  }
  void add_agcState(int32_t agcState) {
    fbb_.AddElement<int32_t>(GNSSObservationSet_Ingest::VT_AGCSTATE, agcState, 0);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_SRCIDS, srcIds);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_TAGS, tags);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_TRANSACTIONID, transactionId);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_ORIGIN, origin);
  }
  void add_dataMode(GNSSObservationSet_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(GNSSObservationSet_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_gnssObservationList(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> gnssObservationList) {
    fbb_.AddOffset(GNSSObservationSet_Ingest::VT_GNSSOBSERVATIONLIST, gnssObservationList);
  }
  explicit GNSSObservationSet_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GNSSObservationSet_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GNSSObservationSet_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GNSSObservationSet_Ingest> CreateGNSSObservationSet_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> markerType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    int32_t outage = 0,
    double gDop = 0.0,
    double hDop = 0.0,
    double pDop = 0.0,
    double tDop = 0.0,
    double vDop = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> esId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receiver = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> boresight = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> quat = 0,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> satVelocity = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> obsCodes = 0,
    int32_t trackingStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> navigationStatus = 0,
    int32_t agcState = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    GNSSObservationSet_Ingest_dataMode_Enum dataMode = GNSSObservationSet_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> gnssObservationList = 0) {
  GNSSObservationSet_IngestBuilder builder_(_fbb);
  builder_.add_alt(alt);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_vDop(vDop);
  builder_.add_tDop(tDop);
  builder_.add_pDop(pDop);
  builder_.add_hDop(hDop);
  builder_.add_gDop(gDop);
  builder_.add_gnssObservationList(gnssObservationList);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_transactionId(transactionId);
  builder_.add_tags(tags);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_agcState(agcState);
  builder_.add_navigationStatus(navigationStatus);
  builder_.add_trackingStatus(trackingStatus);
  builder_.add_obsCodes(obsCodes);
  builder_.add_satVelocity(satVelocity);
  builder_.add_quat(quat);
  builder_.add_boresight(boresight);
  builder_.add_receiver(receiver);
  builder_.add_esId(esId);
  builder_.add_outage(outage);
  builder_.add_ts(ts);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_markerType(markerType);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<GNSSObservationSet_Ingest> CreateGNSSObservationSet_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *markerType = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *ts = nullptr,
    int32_t outage = 0,
    double gDop = 0.0,
    double hDop = 0.0,
    double pDop = 0.0,
    double tDop = 0.0,
    double vDop = 0.0,
    const char *esId = nullptr,
    const char *receiver = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *boresight = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *quat = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *satVelocity = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *obsCodes = nullptr,
    int32_t trackingStatus = 0,
    const char *navigationStatus = nullptr,
    int32_t agcState = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *transactionId = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    GNSSObservationSet_Ingest_dataMode_Enum dataMode = GNSSObservationSet_Ingest_dataMode_Enum_REAL,
    const char *origNetwork = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *gnssObservationList = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto markerType__ = markerType ? _fbb.CreateString(markerType) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto esId__ = esId ? _fbb.CreateString(esId) : 0;
  auto receiver__ = receiver ? _fbb.CreateString(receiver) : 0;
  auto boresight__ = boresight ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*boresight) : 0;
  auto quat__ = quat ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*quat) : 0;
  auto satVelocity__ = satVelocity ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*satVelocity) : 0;
  auto obsCodes__ = obsCodes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*obsCodes) : 0;
  auto navigationStatus__ = navigationStatus ? _fbb.CreateString(navigationStatus) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto gnssObservationList__ = gnssObservationList ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*gnssObservationList) : 0;
  return CreateGNSSObservationSet_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      markerType__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      ts__,
      outage,
      gDop,
      hDop,
      pDop,
      tDop,
      vDop,
      esId__,
      receiver__,
      boresight__,
      quat__,
      lat,
      lon,
      alt,
      satVelocity__,
      obsCodes__,
      trackingStatus,
      navigationStatus__,
      agcState,
      srcTyps__,
      srcIds__,
      tags__,
      transactionId__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      dataMode,
      origNetwork__,
      gnssObservationList__);
}

inline const GNSSObservationSet_Ingest *GetGNSSObservationSet_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<GNSSObservationSet_Ingest>(buf);
}

inline const GNSSObservationSet_Ingest *GetSizePrefixedGNSSObservationSet_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GNSSObservationSet_Ingest>(buf);
}

inline const char *GNSSObservationSet_IngestIdentifier() {
  return "GNSS";
}

inline bool GNSSObservationSet_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GNSSObservationSet_IngestIdentifier());
}

inline bool SizePrefixedGNSSObservationSet_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, GNSSObservationSet_IngestIdentifier(), true);
}

inline bool VerifyGNSSObservationSet_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GNSSObservationSet_Ingest>(GNSSObservationSet_IngestIdentifier());
}

inline bool VerifySizePrefixedGNSSObservationSet_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GNSSObservationSet_Ingest>(GNSSObservationSet_IngestIdentifier());
}

inline void FinishGNSSObservationSet_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNSSObservationSet_Ingest> root) {
  fbb.Finish(root, GNSSObservationSet_IngestIdentifier());
}

inline void FinishSizePrefixedGNSSObservationSet_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GNSSObservationSet_Ingest> root) {
  fbb.FinishSizePrefixed(root, GNSSObservationSet_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
