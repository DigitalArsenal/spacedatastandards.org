// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationScalerInfo_Full;
struct IonoObservationScalerInfo_FullBuilder;

/// /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
struct IonoObservationScalerInfo_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationScalerInfo_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_NAME = 6,
    VT_ORGANIZATION = 8,
    VT_VERSION = 10,
    VT_CONFIDENCESCORE = 12,
    VT_CONFIDENCELEVEL = 14
  };
  /// Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
  /// Example: /// Example: MANUAL
  /// Constraints: Minimum length = 0, Maximum length = 9
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Scaler name.
  /// Example: /// Example: ARTIST-4
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Scaler organization.
  /// Example: /// Example: UML
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *organization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORGANIZATION);
  }
  /// Scaler version.
  /// Example: /// Example: 500200.1
  /// Constraints: No constraints specified.
  double version() const {
    return GetField<double>(VT_VERSION, 0.0);
  }
  /// Scaler confidence score.
  /// Example: /// Example: 75
  /// Constraints: No constraints specified.
  int32_t confidenceScore() const {
    return GetField<int32_t>(VT_CONFIDENCESCORE, 0);
  }
  /// Scaler confidence level.
  /// Example: /// Example: 11
  /// Constraints: No constraints specified.
  int32_t confidenceLevel() const {
    return GetField<int32_t>(VT_CONFIDENCELEVEL, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ORGANIZATION) &&
           verifier.VerifyString(organization()) &&
           VerifyField<double>(verifier, VT_VERSION, 8) &&
           VerifyField<int32_t>(verifier, VT_CONFIDENCESCORE, 4) &&
           VerifyField<int32_t>(verifier, VT_CONFIDENCELEVEL, 4) &&
           verifier.EndTable();
  }
};

struct IonoObservationScalerInfo_FullBuilder {
  typedef IonoObservationScalerInfo_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(IonoObservationScalerInfo_Full::VT_TYPE, type);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(IonoObservationScalerInfo_Full::VT_NAME, name);
  }
  void add_organization(::flatbuffers::Offset<::flatbuffers::String> organization) {
    fbb_.AddOffset(IonoObservationScalerInfo_Full::VT_ORGANIZATION, organization);
  }
  void add_version(double version) {
    fbb_.AddElement<double>(IonoObservationScalerInfo_Full::VT_VERSION, version, 0.0);
  }
  void add_confidenceScore(int32_t confidenceScore) {
    fbb_.AddElement<int32_t>(IonoObservationScalerInfo_Full::VT_CONFIDENCESCORE, confidenceScore, 0);
  }
  void add_confidenceLevel(int32_t confidenceLevel) {
    fbb_.AddElement<int32_t>(IonoObservationScalerInfo_Full::VT_CONFIDENCELEVEL, confidenceLevel, 0);
  }
  explicit IonoObservationScalerInfo_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationScalerInfo_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationScalerInfo_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationScalerInfo_Full> CreateIonoObservationScalerInfo_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> organization = 0,
    double version = 0.0,
    int32_t confidenceScore = 0,
    int32_t confidenceLevel = 0) {
  IonoObservationScalerInfo_FullBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_confidenceLevel(confidenceLevel);
  builder_.add_confidenceScore(confidenceScore);
  builder_.add_organization(organization);
  builder_.add_name(name);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationScalerInfo_Full> CreateIonoObservationScalerInfo_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *name = nullptr,
    const char *organization = nullptr,
    double version = 0.0,
    int32_t confidenceScore = 0,
    int32_t confidenceLevel = 0) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto organization__ = organization ? _fbb.CreateString(organization) : 0;
  return CreateIonoObservationScalerInfo_Full(
      _fbb,
      type__,
      name__,
      organization__,
      version,
      confidenceScore,
      confidenceLevel);
}

inline const IonoObservationScalerInfo_Full *GetIonoObservationScalerInfo_Full(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationScalerInfo_Full>(buf);
}

inline const IonoObservationScalerInfo_Full *GetSizePrefixedIonoObservationScalerInfo_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationScalerInfo_Full>(buf);
}

inline const char *IonoObservationScalerInfo_FullIdentifier() {
  return "IONO";
}

inline bool IonoObservationScalerInfo_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationScalerInfo_FullIdentifier());
}

inline bool SizePrefixedIonoObservationScalerInfo_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationScalerInfo_FullIdentifier(), true);
}

inline bool VerifyIonoObservationScalerInfo_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationScalerInfo_Full>(IonoObservationScalerInfo_FullIdentifier());
}

inline bool VerifySizePrefixedIonoObservationScalerInfo_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationScalerInfo_Full>(IonoObservationScalerInfo_FullIdentifier());
}

inline void FinishIonoObservationScalerInfo_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationScalerInfo_Full> root) {
  fbb.Finish(root, IonoObservationScalerInfo_FullIdentifier());
}

inline void FinishSizePrefixedIonoObservationScalerInfo_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationScalerInfo_Full> root) {
  fbb.FinishSizePrefixed(root, IonoObservationScalerInfo_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
