// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ISRCollectionPlanned_Full;
struct ISRCollectionPlanned_FullBuilder;

/// /// Planned start and stop for the collection.
struct ISRCollectionPlanned_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ISRCollectionPlanned_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_START = 4,
    VT_STOP = 6,
    VT_ADDITIONAL = 8
  };
  /// Start time of collection, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *start() const {
    return GetPointer<const ::flatbuffers::String *>(VT_START);
  }
  /// Stop time of collection, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *stop() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STOP);
  }
  /// Additional start and stop for the collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *additional() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ADDITIONAL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_START) &&
           verifier.VerifyString(start()) &&
           VerifyOffset(verifier, VT_STOP) &&
           verifier.VerifyString(stop()) &&
           VerifyOffset(verifier, VT_ADDITIONAL) &&
           verifier.VerifyVector(additional()) &&
           verifier.VerifyVectorOfStrings(additional()) &&
           verifier.EndTable();
  }
};

struct ISRCollectionPlanned_FullBuilder {
  typedef ISRCollectionPlanned_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_start(::flatbuffers::Offset<::flatbuffers::String> start) {
    fbb_.AddOffset(ISRCollectionPlanned_Full::VT_START, start);
  }
  void add_stop(::flatbuffers::Offset<::flatbuffers::String> stop) {
    fbb_.AddOffset(ISRCollectionPlanned_Full::VT_STOP, stop);
  }
  void add_additional(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> additional) {
    fbb_.AddOffset(ISRCollectionPlanned_Full::VT_ADDITIONAL, additional);
  }
  explicit ISRCollectionPlanned_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ISRCollectionPlanned_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ISRCollectionPlanned_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ISRCollectionPlanned_Full> CreateISRCollectionPlanned_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> start = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stop = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> additional = 0) {
  ISRCollectionPlanned_FullBuilder builder_(_fbb);
  builder_.add_additional(additional);
  builder_.add_stop(stop);
  builder_.add_start(start);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ISRCollectionPlanned_Full> CreateISRCollectionPlanned_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *start = nullptr,
    const char *stop = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *additional = nullptr) {
  auto start__ = start ? _fbb.CreateString(start) : 0;
  auto stop__ = stop ? _fbb.CreateString(stop) : 0;
  auto additional__ = additional ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*additional) : 0;
  return CreateISRCollectionPlanned_Full(
      _fbb,
      start__,
      stop__,
      additional__);
}

inline const ISRCollectionPlanned_Full *GetISRCollectionPlanned_Full(const void *buf) {
  return ::flatbuffers::GetRoot<ISRCollectionPlanned_Full>(buf);
}

inline const ISRCollectionPlanned_Full *GetSizePrefixedISRCollectionPlanned_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ISRCollectionPlanned_Full>(buf);
}

inline const char *ISRCollectionPlanned_FullIdentifier() {
  return "ISRC";
}

inline bool ISRCollectionPlanned_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionPlanned_FullIdentifier());
}

inline bool SizePrefixedISRCollectionPlanned_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionPlanned_FullIdentifier(), true);
}

inline bool VerifyISRCollectionPlanned_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ISRCollectionPlanned_Full>(ISRCollectionPlanned_FullIdentifier());
}

inline bool VerifySizePrefixedISRCollectionPlanned_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ISRCollectionPlanned_Full>(ISRCollectionPlanned_FullIdentifier());
}

inline void FinishISRCollectionPlanned_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionPlanned_Full> root) {
  fbb.Finish(root, ISRCollectionPlanned_FullIdentifier());
}

inline void FinishSizePrefixedISRCollectionPlanned_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionPlanned_Full> root) {
  fbb.FinishSizePrefixed(root, ISRCollectionPlanned_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
