// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SeradataRadarPayload_Ingest;
struct SeradataRadarPayload_IngestBuilder;

enum SeradataRadarPayload_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SeradataRadarPayload_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SeradataRadarPayload_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SeradataRadarPayload_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SeradataRadarPayload_Ingest_dataMode_Enum_EXERCISE = 3,
  SeradataRadarPayload_Ingest_dataMode_Enum_MIN = SeradataRadarPayload_Ingest_dataMode_Enum_REAL,
  SeradataRadarPayload_Ingest_dataMode_Enum_MAX = SeradataRadarPayload_Ingest_dataMode_Enum_EXERCISE
};

inline const SeradataRadarPayload_Ingest_dataMode_Enum (&EnumValuesSeradataRadarPayload_Ingest_dataMode_Enum())[4] {
  static const SeradataRadarPayload_Ingest_dataMode_Enum values[] = {
    SeradataRadarPayload_Ingest_dataMode_Enum_REAL,
    SeradataRadarPayload_Ingest_dataMode_Enum_TEST,
    SeradataRadarPayload_Ingest_dataMode_Enum_SIMULATED,
    SeradataRadarPayload_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSeradataRadarPayload_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSeradataRadarPayload_Ingest_dataMode_Enum(SeradataRadarPayload_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SeradataRadarPayload_Ingest_dataMode_Enum_REAL, SeradataRadarPayload_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSeradataRadarPayload_Ingest_dataMode_Enum()[index];
}

/// /// Details for an radar payload from  Seradata.
struct SeradataRadarPayload_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SeradataRadarPayload_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_SPACECRAFTID = 8,
    VT_IDSENSOR = 10,
    VT_HOSTEDFORCOMPANYORGID = 12,
    VT_MANUFACTURERORGID = 14,
    VT_CATEGORY = 16,
    VT_NAME = 18,
    VT_FREQUENCYBAND = 20,
    VT_FREQUENCY = 22,
    VT_WAVELENGTH = 24,
    VT_BESTRESOLUTION = 26,
    VT_SWATHWIDTH = 28,
    VT_RECORDERSIZE = 30,
    VT_FIELDOFVIEW = 32,
    VT_FIELDOFREGARD = 34,
    VT_POINTINGMETHOD = 36,
    VT_GROUNDSTATIONS = 38,
    VT_GROUNDSTATIONLOCATIONS = 40,
    VT_TRANSMITPOLARIZATION = 42,
    VT_RECEIVEPOLARIZATION = 44,
    VT_DUTYCYCLE = 46,
    VT_PARTNERSPACECRAFT = 48,
    VT_CONSTELLATIONINTERFEROMETRICCAPABILITY = 50,
    VT_NOTES = 52,
    VT_BANDWIDTH = 54,
    VT_CREATEDAT = 56,
    VT_CREATEDBY = 58,
    VT_SOURCE = 60,
    VT_ORIGIN = 62,
    VT_ORIGNETWORK = 64,
    VT_DATAMODE = 66
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATARADARPAYLOAD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: 12345
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *spacecraftId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPACECRAFTID);
  }
  /// UUID of the Sensor record.
  /// Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *hostedForCompanyOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOSTEDFORCOMPANYORGID);
  }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Radar category, e.g. SAR, Surface Search, etc.
  /// Example: /// Example: SAR
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *category() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CATEGORY);
  }
  /// Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
  /// Example: /// Example: ALT
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  /// Example: /// Example: X
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *frequencyBand() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FREQUENCYBAND);
  }
  /// Frequency in giga hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double frequency() const {
    return GetField<double>(VT_FREQUENCY, 0.0);
  }
  /// Wave length in meters.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double waveLength() const {
    return GetField<double>(VT_WAVELENGTH, 0.0);
  }
  /// Best resolution in meters.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double bestResolution() const {
    return GetField<double>(VT_BESTRESOLUTION, 0.0);
  }
  /// Swath width in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double swathWidth() const {
    return GetField<double>(VT_SWATHWIDTH, 0.0);
  }
  /// Recorder size, e.g. 256.
  /// Example: /// Example: 256
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *recorderSize() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECORDERSIZE);
  }
  /// Field of view of this radar in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double fieldOfView() const {
    return GetField<double>(VT_FIELDOFVIEW, 0.0);
  }
  /// Field of regard of this radar in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double fieldOfRegard() const {
    return GetField<double>(VT_FIELDOFREGARD, 0.0);
  }
  /// Point method for this radar, e.g. Spacecraft.
  /// Example: /// Example: Spacecraft
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *pointingMethod() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POINTINGMETHOD);
  }
  /// Ground Station info for this payload.
  /// Example: /// Example: groundStations
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *groundStations() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUNDSTATIONS);
  }
  /// Ground Station Locations for this payload.
  /// Example: /// Example: 51,42N-44,35E
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *groundStationLocations() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUNDSTATIONLOCATIONS);
  }
  /// Transmit polarization, e.g. Lin Dual, Lin vert, etc.
  /// Example: /// Example: Lin Dual
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *transmitPolarization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSMITPOLARIZATION);
  }
  /// Receive polarization, e.g. Lin Dual, Lin vert, etc.
  /// Example: /// Example: Lin Dual
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *receivePolarization() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVEPOLARIZATION);
  }
  /// Duty cycle.
  /// Example: /// Example: dutyCycle
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *dutyCycle() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DUTYCYCLE);
  }
  /// Partner seradata-spacecraft.
  /// Example: /// Example: partnerSpacecraft
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *partnerSpacecraft() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTNERSPACECRAFT);
  }
  /// Constellation interferometric capability.
  /// Example: /// Example: constellationInterferometricCapability
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *constellationInterferometricCapability() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONSTELLATIONINTERFEROMETRICCAPABILITY);
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Radar bandwidth in mega hertz.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double bandwidth() const {
    return GetField<double>(VT_BANDWIDTH, 0.0);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SeradataRadarPayload_Ingest_dataMode_Enum dataMode() const {
    return static_cast<SeradataRadarPayload_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_SPACECRAFTID) &&
           verifier.VerifyString(spacecraftId()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_HOSTEDFORCOMPANYORGID) &&
           verifier.VerifyString(hostedForCompanyOrgId()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_CATEGORY) &&
           verifier.VerifyString(category()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_FREQUENCYBAND) &&
           verifier.VerifyString(frequencyBand()) &&
           VerifyField<double>(verifier, VT_FREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_WAVELENGTH, 8) &&
           VerifyField<double>(verifier, VT_BESTRESOLUTION, 8) &&
           VerifyField<double>(verifier, VT_SWATHWIDTH, 8) &&
           VerifyOffset(verifier, VT_RECORDERSIZE) &&
           verifier.VerifyString(recorderSize()) &&
           VerifyField<double>(verifier, VT_FIELDOFVIEW, 8) &&
           VerifyField<double>(verifier, VT_FIELDOFREGARD, 8) &&
           VerifyOffset(verifier, VT_POINTINGMETHOD) &&
           verifier.VerifyString(pointingMethod()) &&
           VerifyOffset(verifier, VT_GROUNDSTATIONS) &&
           verifier.VerifyString(groundStations()) &&
           VerifyOffset(verifier, VT_GROUNDSTATIONLOCATIONS) &&
           verifier.VerifyString(groundStationLocations()) &&
           VerifyOffset(verifier, VT_TRANSMITPOLARIZATION) &&
           verifier.VerifyString(transmitPolarization()) &&
           VerifyOffset(verifier, VT_RECEIVEPOLARIZATION) &&
           verifier.VerifyString(receivePolarization()) &&
           VerifyOffset(verifier, VT_DUTYCYCLE) &&
           verifier.VerifyString(dutyCycle()) &&
           VerifyOffset(verifier, VT_PARTNERSPACECRAFT) &&
           verifier.VerifyString(partnerSpacecraft()) &&
           VerifyOffset(verifier, VT_CONSTELLATIONINTERFEROMETRICCAPABILITY) &&
           verifier.VerifyString(constellationInterferometricCapability()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyField<double>(verifier, VT_BANDWIDTH, 8) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct SeradataRadarPayload_IngestBuilder {
  typedef SeradataRadarPayload_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_spacecraftId(::flatbuffers::Offset<::flatbuffers::String> spacecraftId) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_SPACECRAFTID, spacecraftId);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_IDSENSOR, idSensor);
  }
  void add_hostedForCompanyOrgId(::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_category(::flatbuffers::Offset<::flatbuffers::String> category) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_CATEGORY, category);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_NAME, name);
  }
  void add_frequencyBand(::flatbuffers::Offset<::flatbuffers::String> frequencyBand) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_FREQUENCYBAND, frequencyBand);
  }
  void add_frequency(double frequency) {
    fbb_.AddElement<double>(SeradataRadarPayload_Ingest::VT_FREQUENCY, frequency, 0.0);
  }
  void add_waveLength(double waveLength) {
    fbb_.AddElement<double>(SeradataRadarPayload_Ingest::VT_WAVELENGTH, waveLength, 0.0);
  }
  void add_bestResolution(double bestResolution) {
    fbb_.AddElement<double>(SeradataRadarPayload_Ingest::VT_BESTRESOLUTION, bestResolution, 0.0);
  }
  void add_swathWidth(double swathWidth) {
    fbb_.AddElement<double>(SeradataRadarPayload_Ingest::VT_SWATHWIDTH, swathWidth, 0.0);
  }
  void add_recorderSize(::flatbuffers::Offset<::flatbuffers::String> recorderSize) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_RECORDERSIZE, recorderSize);
  }
  void add_fieldOfView(double fieldOfView) {
    fbb_.AddElement<double>(SeradataRadarPayload_Ingest::VT_FIELDOFVIEW, fieldOfView, 0.0);
  }
  void add_fieldOfRegard(double fieldOfRegard) {
    fbb_.AddElement<double>(SeradataRadarPayload_Ingest::VT_FIELDOFREGARD, fieldOfRegard, 0.0);
  }
  void add_pointingMethod(::flatbuffers::Offset<::flatbuffers::String> pointingMethod) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_POINTINGMETHOD, pointingMethod);
  }
  void add_groundStations(::flatbuffers::Offset<::flatbuffers::String> groundStations) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_GROUNDSTATIONS, groundStations);
  }
  void add_groundStationLocations(::flatbuffers::Offset<::flatbuffers::String> groundStationLocations) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_GROUNDSTATIONLOCATIONS, groundStationLocations);
  }
  void add_transmitPolarization(::flatbuffers::Offset<::flatbuffers::String> transmitPolarization) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_TRANSMITPOLARIZATION, transmitPolarization);
  }
  void add_receivePolarization(::flatbuffers::Offset<::flatbuffers::String> receivePolarization) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_RECEIVEPOLARIZATION, receivePolarization);
  }
  void add_dutyCycle(::flatbuffers::Offset<::flatbuffers::String> dutyCycle) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_DUTYCYCLE, dutyCycle);
  }
  void add_partnerSpacecraft(::flatbuffers::Offset<::flatbuffers::String> partnerSpacecraft) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_PARTNERSPACECRAFT, partnerSpacecraft);
  }
  void add_constellationInterferometricCapability(::flatbuffers::Offset<::flatbuffers::String> constellationInterferometricCapability) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_CONSTELLATIONINTERFEROMETRICCAPABILITY, constellationInterferometricCapability);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_NOTES, notes);
  }
  void add_bandwidth(double bandwidth) {
    fbb_.AddElement<double>(SeradataRadarPayload_Ingest::VT_BANDWIDTH, bandwidth, 0.0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SeradataRadarPayload_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SeradataRadarPayload_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SeradataRadarPayload_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit SeradataRadarPayload_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SeradataRadarPayload_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SeradataRadarPayload_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SeradataRadarPayload_Ingest> CreateSeradataRadarPayload_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spacecraftId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> category = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> frequencyBand = 0,
    double frequency = 0.0,
    double waveLength = 0.0,
    double bestResolution = 0.0,
    double swathWidth = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> recorderSize = 0,
    double fieldOfView = 0.0,
    double fieldOfRegard = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> pointingMethod = 0,
    ::flatbuffers::Offset<::flatbuffers::String> groundStations = 0,
    ::flatbuffers::Offset<::flatbuffers::String> groundStationLocations = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transmitPolarization = 0,
    ::flatbuffers::Offset<::flatbuffers::String> receivePolarization = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dutyCycle = 0,
    ::flatbuffers::Offset<::flatbuffers::String> partnerSpacecraft = 0,
    ::flatbuffers::Offset<::flatbuffers::String> constellationInterferometricCapability = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    double bandwidth = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SeradataRadarPayload_Ingest_dataMode_Enum dataMode = SeradataRadarPayload_Ingest_dataMode_Enum_REAL) {
  SeradataRadarPayload_IngestBuilder builder_(_fbb);
  builder_.add_bandwidth(bandwidth);
  builder_.add_fieldOfRegard(fieldOfRegard);
  builder_.add_fieldOfView(fieldOfView);
  builder_.add_swathWidth(swathWidth);
  builder_.add_bestResolution(bestResolution);
  builder_.add_waveLength(waveLength);
  builder_.add_frequency(frequency);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_constellationInterferometricCapability(constellationInterferometricCapability);
  builder_.add_partnerSpacecraft(partnerSpacecraft);
  builder_.add_dutyCycle(dutyCycle);
  builder_.add_receivePolarization(receivePolarization);
  builder_.add_transmitPolarization(transmitPolarization);
  builder_.add_groundStationLocations(groundStationLocations);
  builder_.add_groundStations(groundStations);
  builder_.add_pointingMethod(pointingMethod);
  builder_.add_recorderSize(recorderSize);
  builder_.add_frequencyBand(frequencyBand);
  builder_.add_name(name);
  builder_.add_category(category);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_hostedForCompanyOrgId(hostedForCompanyOrgId);
  builder_.add_idSensor(idSensor);
  builder_.add_spacecraftId(spacecraftId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SeradataRadarPayload_Ingest> CreateSeradataRadarPayload_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *spacecraftId = nullptr,
    const char *idSensor = nullptr,
    const char *hostedForCompanyOrgId = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *category = nullptr,
    const char *name = nullptr,
    const char *frequencyBand = nullptr,
    double frequency = 0.0,
    double waveLength = 0.0,
    double bestResolution = 0.0,
    double swathWidth = 0.0,
    const char *recorderSize = nullptr,
    double fieldOfView = 0.0,
    double fieldOfRegard = 0.0,
    const char *pointingMethod = nullptr,
    const char *groundStations = nullptr,
    const char *groundStationLocations = nullptr,
    const char *transmitPolarization = nullptr,
    const char *receivePolarization = nullptr,
    const char *dutyCycle = nullptr,
    const char *partnerSpacecraft = nullptr,
    const char *constellationInterferometricCapability = nullptr,
    const char *notes = nullptr,
    double bandwidth = 0.0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SeradataRadarPayload_Ingest_dataMode_Enum dataMode = SeradataRadarPayload_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto spacecraftId__ = spacecraftId ? _fbb.CreateString(spacecraftId) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto hostedForCompanyOrgId__ = hostedForCompanyOrgId ? _fbb.CreateString(hostedForCompanyOrgId) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto category__ = category ? _fbb.CreateString(category) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto frequencyBand__ = frequencyBand ? _fbb.CreateString(frequencyBand) : 0;
  auto recorderSize__ = recorderSize ? _fbb.CreateString(recorderSize) : 0;
  auto pointingMethod__ = pointingMethod ? _fbb.CreateString(pointingMethod) : 0;
  auto groundStations__ = groundStations ? _fbb.CreateString(groundStations) : 0;
  auto groundStationLocations__ = groundStationLocations ? _fbb.CreateString(groundStationLocations) : 0;
  auto transmitPolarization__ = transmitPolarization ? _fbb.CreateString(transmitPolarization) : 0;
  auto receivePolarization__ = receivePolarization ? _fbb.CreateString(receivePolarization) : 0;
  auto dutyCycle__ = dutyCycle ? _fbb.CreateString(dutyCycle) : 0;
  auto partnerSpacecraft__ = partnerSpacecraft ? _fbb.CreateString(partnerSpacecraft) : 0;
  auto constellationInterferometricCapability__ = constellationInterferometricCapability ? _fbb.CreateString(constellationInterferometricCapability) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSeradataRadarPayload_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      spacecraftId__,
      idSensor__,
      hostedForCompanyOrgId__,
      manufacturerOrgId__,
      category__,
      name__,
      frequencyBand__,
      frequency,
      waveLength,
      bestResolution,
      swathWidth,
      recorderSize__,
      fieldOfView,
      fieldOfRegard,
      pointingMethod__,
      groundStations__,
      groundStationLocations__,
      transmitPolarization__,
      receivePolarization__,
      dutyCycle__,
      partnerSpacecraft__,
      constellationInterferometricCapability__,
      notes__,
      bandwidth,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const SeradataRadarPayload_Ingest *GetSeradataRadarPayload_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<SeradataRadarPayload_Ingest>(buf);
}

inline const SeradataRadarPayload_Ingest *GetSizePrefixedSeradataRadarPayload_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SeradataRadarPayload_Ingest>(buf);
}

inline const char *SeradataRadarPayload_IngestIdentifier() {
  return "SERA";
}

inline bool SeradataRadarPayload_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataRadarPayload_IngestIdentifier());
}

inline bool SizePrefixedSeradataRadarPayload_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataRadarPayload_IngestIdentifier(), true);
}

inline bool VerifySeradataRadarPayload_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SeradataRadarPayload_Ingest>(SeradataRadarPayload_IngestIdentifier());
}

inline bool VerifySizePrefixedSeradataRadarPayload_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SeradataRadarPayload_Ingest>(SeradataRadarPayload_IngestIdentifier());
}

inline void FinishSeradataRadarPayload_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataRadarPayload_Ingest> root) {
  fbb.Finish(root, SeradataRadarPayload_IngestIdentifier());
}

inline void FinishSizePrefixedSeradataRadarPayload_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataRadarPayload_Ingest> root) {
  fbb.FinishSizePrefixed(root, SeradataRadarPayload_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
