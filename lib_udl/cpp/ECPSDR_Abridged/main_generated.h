// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ECPSDR_Abridged;
struct ECPSDR_AbridgedBuilder;

enum ECPSDR_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  ECPSDR_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ECPSDR_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  ECPSDR_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ECPSDR_Abridged_dataMode_Enum_EXERCISE = 3,
  ECPSDR_Abridged_dataMode_Enum_MIN = ECPSDR_Abridged_dataMode_Enum_REAL,
  ECPSDR_Abridged_dataMode_Enum_MAX = ECPSDR_Abridged_dataMode_Enum_EXERCISE
};

inline const ECPSDR_Abridged_dataMode_Enum (&EnumValuesECPSDR_Abridged_dataMode_Enum())[4] {
  static const ECPSDR_Abridged_dataMode_Enum values[] = {
    ECPSDR_Abridged_dataMode_Enum_REAL,
    ECPSDR_Abridged_dataMode_Enum_TEST,
    ECPSDR_Abridged_dataMode_Enum_SIMULATED,
    ECPSDR_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesECPSDR_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameECPSDR_Abridged_dataMode_Enum(ECPSDR_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, ECPSDR_Abridged_dataMode_Enum_REAL, ECPSDR_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesECPSDR_Abridged_dataMode_Enum()[index];
}

/// /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
struct ECPSDR_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ECPSDR_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_SATNO = 10,
    VT_ORIGOBJECTID = 12,
    VT_IDSENSOR = 14,
    VT_ORIGSENSORID = 16,
    VT_TYPE = 18,
    VT_MSGTIME = 20,
    VT_OBTIME = 22,
    VT_RETRANSMIT = 24,
    VT_SENMODE = 26,
    VT_DOSBIAS = 28,
    VT_ASL5VCURRMON = 30,
    VT_DSL5VCURRMON = 32,
    VT_PSTEMPMON = 34,
    VT_CDSPLATEVMON = 36,
    VT_CDSREFVMON = 38,
    VT_MPTEMP = 40,
    VT_VREF = 42,
    VT_PD1SIGLEV = 44,
    VT_PD2SIGLEV = 46,
    VT_ESDTRIGCOUNTL = 48,
    VT_ESDTRIGCOUNTH = 50,
    VT_LOWLETL = 52,
    VT_LOWLETM = 54,
    VT_MEDLET1L = 56,
    VT_MEDLET1M = 58,
    VT_MEDLET2L = 60,
    VT_MEDLET2M = 62,
    VT_MEDLET3L = 64,
    VT_MEDLET3M = 66,
    VT_MEDLET4L = 68,
    VT_MEDLET4M = 70,
    VT_HILETL = 72,
    VT_HILETM = 74,
    VT_SURFDOSL = 76,
    VT_SURFDOSM = 78,
    VT_SURFDOSH = 80,
    VT_SURFDOSCHARGEL = 82,
    VT_SURFDOSCHARGEH = 84,
    VT_SURFDOSSTAT = 86,
    VT_CDSTHROTTLE = 88,
    VT_CDSTHRESHOLD = 90,
    VT_CHECKSUM = 92,
    VT_TRANSIENTDATA = 94,
    VT_CREATEDAT = 96,
    VT_CREATEDBY = 98,
    VT_SOURCE = 100,
    VT_ORIGIN = 102,
    VT_ORIGNETWORK = 104,
    VT_DATAMODE = 106
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ECPSDR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the on-orbit satellite hosting the sensor.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/catalog number of the on-orbit satellite hosting the sensor.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// The type of data associated with this record (STANDARD, TRANSIENT).
  /// Example: /// Example: STANDARD
  /// Constraints: Minimum length = 1, Maximum length = 12
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *msgTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGTIME);
  }
  /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTIME);
  }
  /// Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool retransmit() const {
    return GetField<uint8_t>(VT_RETRANSMIT, 0) != 0;
  }
  /// The sensor mode associated with this measurements (NORMAL, TEST).
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 0, Maximum length = 12
  const ::flatbuffers::String *senMode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENMODE);
  }
  /// Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t dosBias() const {
    return GetField<int32_t>(VT_DOSBIAS, 0);
  }
  /// Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t asl5VCurrMon() const {
    return GetField<int32_t>(VT_ASL5VCURRMON, 0);
  }
  /// Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t dsl5VCurrMon() const {
    return GetField<int32_t>(VT_DSL5VCURRMON, 0);
  }
  /// Power supply temperature monitor.  This is sensor status telemetry.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t psTempMon() const {
    return GetField<int32_t>(VT_PSTEMPMON, 0);
  }
  /// CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t cdsPlateVMon() const {
    return GetField<int32_t>(VT_CDSPLATEVMON, 0);
  }
  /// CDS reference voltage monitor.  See vRef for conversion factor to Volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t cdsRefVMon() const {
    return GetField<int32_t>(VT_CDSREFVMON, 0);
  }
  /// Unitless sensor mounting plate temperature.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t mpTemp() const {
    return GetField<int32_t>(VT_MPTEMP, 0);
  }
  /// Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t vRef() const {
    return GetField<int32_t>(VT_VREF, 0);
  }
  /// Photodiode 1 signal level.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t pd1SigLev() const {
    return GetField<int32_t>(VT_PD1SIGLEV, 0);
  }
  /// Photodiode 2 signal level.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t pd2SigLev() const {
    return GetField<int32_t>(VT_PD2SIGLEV, 0);
  }
  /// Number of ESD triggers, low byte of 2-byte counter.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t esdTrigCountL() const {
    return GetField<int32_t>(VT_ESDTRIGCOUNTL, 0);
  }
  /// Number of ESD triggers, high byte of 2-byte counter.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t esdTrigCountH() const {
    return GetField<int32_t>(VT_ESDTRIGCOUNTH, 0);
  }
  /// LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t lowLetL() const {
    return GetField<int32_t>(VT_LOWLETL, 0);
  }
  /// LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t lowLetM() const {
    return GetField<int32_t>(VT_LOWLETM, 0);
  }
  /// MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet1L() const {
    return GetField<int32_t>(VT_MEDLET1L, 0);
  }
  /// MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet1M() const {
    return GetField<int32_t>(VT_MEDLET1M, 0);
  }
  /// MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet2L() const {
    return GetField<int32_t>(VT_MEDLET2L, 0);
  }
  /// MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet2M() const {
    return GetField<int32_t>(VT_MEDLET2M, 0);
  }
  /// MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet3L() const {
    return GetField<int32_t>(VT_MEDLET3L, 0);
  }
  /// MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet3M() const {
    return GetField<int32_t>(VT_MEDLET3M, 0);
  }
  /// MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet4L() const {
    return GetField<int32_t>(VT_MEDLET4L, 0);
  }
  /// MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t medLet4M() const {
    return GetField<int32_t>(VT_MEDLET4M, 0);
  }
  /// HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t hiLetL() const {
    return GetField<int32_t>(VT_HILETL, 0);
  }
  /// Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t hiLetM() const {
    return GetField<int32_t>(VT_HILETM, 0);
  }
  /// Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t surfDosL() const {
    return GetField<int32_t>(VT_SURFDOSL, 0);
  }
  /// Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t surfDosM() const {
    return GetField<int32_t>(VT_SURFDOSM, 0);
  }
  /// Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t surfDosH() const {
    return GetField<int32_t>(VT_SURFDOSH, 0);
  }
  /// Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t surfDosChargeL() const {
    return GetField<int32_t>(VT_SURFDOSCHARGEL, 0);
  }
  /// Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t surfDosChargeH() const {
    return GetField<int32_t>(VT_SURFDOSCHARGEH, 0);
  }
  /// Surface dosimeter status byte.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t surfDosStat() const {
    return GetField<int32_t>(VT_SURFDOSSTAT, 0);
  }
  /// CDS throttle number of seconds between CDS transient capture readouts.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t cdsThrottle() const {
    return GetField<int32_t>(VT_CDSTHROTTLE, 0);
  }
  /// CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t cdsThreshold() const {
    return GetField<int32_t>(VT_CDSTHRESHOLD, 0);
  }
  /// Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t checksum() const {
    return GetField<int32_t>(VT_CHECKSUM, 0);
  }
  /// Array of 144 digitized samples of ESD waveform for transient packets.
  /// Example: /// Example: [1, 2, 3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *transientData() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TRANSIENTDATA);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  ECPSDR_Abridged_dataMode_Enum dataMode() const {
    return static_cast<ECPSDR_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_MSGTIME) &&
           verifier.VerifyString(msgTime()) &&
           VerifyOffset(verifier, VT_OBTIME) &&
           verifier.VerifyString(obTime()) &&
           VerifyField<uint8_t>(verifier, VT_RETRANSMIT, 1) &&
           VerifyOffset(verifier, VT_SENMODE) &&
           verifier.VerifyString(senMode()) &&
           VerifyField<int32_t>(verifier, VT_DOSBIAS, 4) &&
           VerifyField<int32_t>(verifier, VT_ASL5VCURRMON, 4) &&
           VerifyField<int32_t>(verifier, VT_DSL5VCURRMON, 4) &&
           VerifyField<int32_t>(verifier, VT_PSTEMPMON, 4) &&
           VerifyField<int32_t>(verifier, VT_CDSPLATEVMON, 4) &&
           VerifyField<int32_t>(verifier, VT_CDSREFVMON, 4) &&
           VerifyField<int32_t>(verifier, VT_MPTEMP, 4) &&
           VerifyField<int32_t>(verifier, VT_VREF, 4) &&
           VerifyField<int32_t>(verifier, VT_PD1SIGLEV, 4) &&
           VerifyField<int32_t>(verifier, VT_PD2SIGLEV, 4) &&
           VerifyField<int32_t>(verifier, VT_ESDTRIGCOUNTL, 4) &&
           VerifyField<int32_t>(verifier, VT_ESDTRIGCOUNTH, 4) &&
           VerifyField<int32_t>(verifier, VT_LOWLETL, 4) &&
           VerifyField<int32_t>(verifier, VT_LOWLETM, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET1L, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET1M, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET2L, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET2M, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET3L, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET3M, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET4L, 4) &&
           VerifyField<int32_t>(verifier, VT_MEDLET4M, 4) &&
           VerifyField<int32_t>(verifier, VT_HILETL, 4) &&
           VerifyField<int32_t>(verifier, VT_HILETM, 4) &&
           VerifyField<int32_t>(verifier, VT_SURFDOSL, 4) &&
           VerifyField<int32_t>(verifier, VT_SURFDOSM, 4) &&
           VerifyField<int32_t>(verifier, VT_SURFDOSH, 4) &&
           VerifyField<int32_t>(verifier, VT_SURFDOSCHARGEL, 4) &&
           VerifyField<int32_t>(verifier, VT_SURFDOSCHARGEH, 4) &&
           VerifyField<int32_t>(verifier, VT_SURFDOSSTAT, 4) &&
           VerifyField<int32_t>(verifier, VT_CDSTHROTTLE, 4) &&
           VerifyField<int32_t>(verifier, VT_CDSTHRESHOLD, 4) &&
           VerifyField<int32_t>(verifier, VT_CHECKSUM, 4) &&
           VerifyOffset(verifier, VT_TRANSIENTDATA) &&
           verifier.VerifyVector(transientData()) &&
           verifier.VerifyVectorOfStrings(transientData()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct ECPSDR_AbridgedBuilder {
  typedef ECPSDR_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_TYPE, type);
  }
  void add_msgTime(::flatbuffers::Offset<::flatbuffers::String> msgTime) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_MSGTIME, msgTime);
  }
  void add_obTime(::flatbuffers::Offset<::flatbuffers::String> obTime) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_OBTIME, obTime);
  }
  void add_retransmit(bool retransmit) {
    fbb_.AddElement<uint8_t>(ECPSDR_Abridged::VT_RETRANSMIT, static_cast<uint8_t>(retransmit), 0);
  }
  void add_senMode(::flatbuffers::Offset<::flatbuffers::String> senMode) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_SENMODE, senMode);
  }
  void add_dosBias(int32_t dosBias) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_DOSBIAS, dosBias, 0);
  }
  void add_asl5VCurrMon(int32_t asl5VCurrMon) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_ASL5VCURRMON, asl5VCurrMon, 0);
  }
  void add_dsl5VCurrMon(int32_t dsl5VCurrMon) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_DSL5VCURRMON, dsl5VCurrMon, 0);
  }
  void add_psTempMon(int32_t psTempMon) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_PSTEMPMON, psTempMon, 0);
  }
  void add_cdsPlateVMon(int32_t cdsPlateVMon) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_CDSPLATEVMON, cdsPlateVMon, 0);
  }
  void add_cdsRefVMon(int32_t cdsRefVMon) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_CDSREFVMON, cdsRefVMon, 0);
  }
  void add_mpTemp(int32_t mpTemp) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MPTEMP, mpTemp, 0);
  }
  void add_vRef(int32_t vRef) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_VREF, vRef, 0);
  }
  void add_pd1SigLev(int32_t pd1SigLev) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_PD1SIGLEV, pd1SigLev, 0);
  }
  void add_pd2SigLev(int32_t pd2SigLev) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_PD2SIGLEV, pd2SigLev, 0);
  }
  void add_esdTrigCountL(int32_t esdTrigCountL) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_ESDTRIGCOUNTL, esdTrigCountL, 0);
  }
  void add_esdTrigCountH(int32_t esdTrigCountH) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_ESDTRIGCOUNTH, esdTrigCountH, 0);
  }
  void add_lowLetL(int32_t lowLetL) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_LOWLETL, lowLetL, 0);
  }
  void add_lowLetM(int32_t lowLetM) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_LOWLETM, lowLetM, 0);
  }
  void add_medLet1L(int32_t medLet1L) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET1L, medLet1L, 0);
  }
  void add_medLet1M(int32_t medLet1M) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET1M, medLet1M, 0);
  }
  void add_medLet2L(int32_t medLet2L) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET2L, medLet2L, 0);
  }
  void add_medLet2M(int32_t medLet2M) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET2M, medLet2M, 0);
  }
  void add_medLet3L(int32_t medLet3L) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET3L, medLet3L, 0);
  }
  void add_medLet3M(int32_t medLet3M) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET3M, medLet3M, 0);
  }
  void add_medLet4L(int32_t medLet4L) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET4L, medLet4L, 0);
  }
  void add_medLet4M(int32_t medLet4M) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_MEDLET4M, medLet4M, 0);
  }
  void add_hiLetL(int32_t hiLetL) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_HILETL, hiLetL, 0);
  }
  void add_hiLetM(int32_t hiLetM) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_HILETM, hiLetM, 0);
  }
  void add_surfDosL(int32_t surfDosL) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_SURFDOSL, surfDosL, 0);
  }
  void add_surfDosM(int32_t surfDosM) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_SURFDOSM, surfDosM, 0);
  }
  void add_surfDosH(int32_t surfDosH) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_SURFDOSH, surfDosH, 0);
  }
  void add_surfDosChargeL(int32_t surfDosChargeL) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_SURFDOSCHARGEL, surfDosChargeL, 0);
  }
  void add_surfDosChargeH(int32_t surfDosChargeH) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_SURFDOSCHARGEH, surfDosChargeH, 0);
  }
  void add_surfDosStat(int32_t surfDosStat) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_SURFDOSSTAT, surfDosStat, 0);
  }
  void add_cdsThrottle(int32_t cdsThrottle) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_CDSTHROTTLE, cdsThrottle, 0);
  }
  void add_cdsThreshold(int32_t cdsThreshold) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_CDSTHRESHOLD, cdsThreshold, 0);
  }
  void add_checksum(int32_t checksum) {
    fbb_.AddElement<int32_t>(ECPSDR_Abridged::VT_CHECKSUM, checksum, 0);
  }
  void add_transientData(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> transientData) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_TRANSIENTDATA, transientData);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(ECPSDR_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(ECPSDR_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(ECPSDR_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit ECPSDR_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ECPSDR_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ECPSDR_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ECPSDR_Abridged> CreateECPSDR_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obTime = 0,
    bool retransmit = false,
    ::flatbuffers::Offset<::flatbuffers::String> senMode = 0,
    int32_t dosBias = 0,
    int32_t asl5VCurrMon = 0,
    int32_t dsl5VCurrMon = 0,
    int32_t psTempMon = 0,
    int32_t cdsPlateVMon = 0,
    int32_t cdsRefVMon = 0,
    int32_t mpTemp = 0,
    int32_t vRef = 0,
    int32_t pd1SigLev = 0,
    int32_t pd2SigLev = 0,
    int32_t esdTrigCountL = 0,
    int32_t esdTrigCountH = 0,
    int32_t lowLetL = 0,
    int32_t lowLetM = 0,
    int32_t medLet1L = 0,
    int32_t medLet1M = 0,
    int32_t medLet2L = 0,
    int32_t medLet2M = 0,
    int32_t medLet3L = 0,
    int32_t medLet3M = 0,
    int32_t medLet4L = 0,
    int32_t medLet4M = 0,
    int32_t hiLetL = 0,
    int32_t hiLetM = 0,
    int32_t surfDosL = 0,
    int32_t surfDosM = 0,
    int32_t surfDosH = 0,
    int32_t surfDosChargeL = 0,
    int32_t surfDosChargeH = 0,
    int32_t surfDosStat = 0,
    int32_t cdsThrottle = 0,
    int32_t cdsThreshold = 0,
    int32_t checksum = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> transientData = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ECPSDR_Abridged_dataMode_Enum dataMode = ECPSDR_Abridged_dataMode_Enum_REAL) {
  ECPSDR_AbridgedBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_transientData(transientData);
  builder_.add_checksum(checksum);
  builder_.add_cdsThreshold(cdsThreshold);
  builder_.add_cdsThrottle(cdsThrottle);
  builder_.add_surfDosStat(surfDosStat);
  builder_.add_surfDosChargeH(surfDosChargeH);
  builder_.add_surfDosChargeL(surfDosChargeL);
  builder_.add_surfDosH(surfDosH);
  builder_.add_surfDosM(surfDosM);
  builder_.add_surfDosL(surfDosL);
  builder_.add_hiLetM(hiLetM);
  builder_.add_hiLetL(hiLetL);
  builder_.add_medLet4M(medLet4M);
  builder_.add_medLet4L(medLet4L);
  builder_.add_medLet3M(medLet3M);
  builder_.add_medLet3L(medLet3L);
  builder_.add_medLet2M(medLet2M);
  builder_.add_medLet2L(medLet2L);
  builder_.add_medLet1M(medLet1M);
  builder_.add_medLet1L(medLet1L);
  builder_.add_lowLetM(lowLetM);
  builder_.add_lowLetL(lowLetL);
  builder_.add_esdTrigCountH(esdTrigCountH);
  builder_.add_esdTrigCountL(esdTrigCountL);
  builder_.add_pd2SigLev(pd2SigLev);
  builder_.add_pd1SigLev(pd1SigLev);
  builder_.add_vRef(vRef);
  builder_.add_mpTemp(mpTemp);
  builder_.add_cdsRefVMon(cdsRefVMon);
  builder_.add_cdsPlateVMon(cdsPlateVMon);
  builder_.add_psTempMon(psTempMon);
  builder_.add_dsl5VCurrMon(dsl5VCurrMon);
  builder_.add_asl5VCurrMon(asl5VCurrMon);
  builder_.add_dosBias(dosBias);
  builder_.add_senMode(senMode);
  builder_.add_obTime(obTime);
  builder_.add_msgTime(msgTime);
  builder_.add_type(type);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_retransmit(retransmit);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ECPSDR_Abridged> CreateECPSDR_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    const char *type = nullptr,
    const char *msgTime = nullptr,
    const char *obTime = nullptr,
    bool retransmit = false,
    const char *senMode = nullptr,
    int32_t dosBias = 0,
    int32_t asl5VCurrMon = 0,
    int32_t dsl5VCurrMon = 0,
    int32_t psTempMon = 0,
    int32_t cdsPlateVMon = 0,
    int32_t cdsRefVMon = 0,
    int32_t mpTemp = 0,
    int32_t vRef = 0,
    int32_t pd1SigLev = 0,
    int32_t pd2SigLev = 0,
    int32_t esdTrigCountL = 0,
    int32_t esdTrigCountH = 0,
    int32_t lowLetL = 0,
    int32_t lowLetM = 0,
    int32_t medLet1L = 0,
    int32_t medLet1M = 0,
    int32_t medLet2L = 0,
    int32_t medLet2M = 0,
    int32_t medLet3L = 0,
    int32_t medLet3M = 0,
    int32_t medLet4L = 0,
    int32_t medLet4M = 0,
    int32_t hiLetL = 0,
    int32_t hiLetM = 0,
    int32_t surfDosL = 0,
    int32_t surfDosM = 0,
    int32_t surfDosH = 0,
    int32_t surfDosChargeL = 0,
    int32_t surfDosChargeH = 0,
    int32_t surfDosStat = 0,
    int32_t cdsThrottle = 0,
    int32_t cdsThreshold = 0,
    int32_t checksum = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *transientData = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    ECPSDR_Abridged_dataMode_Enum dataMode = ECPSDR_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto msgTime__ = msgTime ? _fbb.CreateString(msgTime) : 0;
  auto obTime__ = obTime ? _fbb.CreateString(obTime) : 0;
  auto senMode__ = senMode ? _fbb.CreateString(senMode) : 0;
  auto transientData__ = transientData ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*transientData) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateECPSDR_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      idSensor__,
      origSensorId__,
      type__,
      msgTime__,
      obTime__,
      retransmit,
      senMode__,
      dosBias,
      asl5VCurrMon,
      dsl5VCurrMon,
      psTempMon,
      cdsPlateVMon,
      cdsRefVMon,
      mpTemp,
      vRef,
      pd1SigLev,
      pd2SigLev,
      esdTrigCountL,
      esdTrigCountH,
      lowLetL,
      lowLetM,
      medLet1L,
      medLet1M,
      medLet2L,
      medLet2M,
      medLet3L,
      medLet3M,
      medLet4L,
      medLet4M,
      hiLetL,
      hiLetM,
      surfDosL,
      surfDosM,
      surfDosH,
      surfDosChargeL,
      surfDosChargeH,
      surfDosStat,
      cdsThrottle,
      cdsThreshold,
      checksum,
      transientData__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const ECPSDR_Abridged *GetECPSDR_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<ECPSDR_Abridged>(buf);
}

inline const ECPSDR_Abridged *GetSizePrefixedECPSDR_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ECPSDR_Abridged>(buf);
}

inline const char *ECPSDR_AbridgedIdentifier() {
  return "ECPS";
}

inline bool ECPSDR_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ECPSDR_AbridgedIdentifier());
}

inline bool SizePrefixedECPSDR_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ECPSDR_AbridgedIdentifier(), true);
}

inline bool VerifyECPSDR_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ECPSDR_Abridged>(ECPSDR_AbridgedIdentifier());
}

inline bool VerifySizePrefixedECPSDR_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ECPSDR_Abridged>(ECPSDR_AbridgedIdentifier());
}

inline void FinishECPSDR_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ECPSDR_Abridged> root) {
  fbb.Finish(root, ECPSDR_AbridgedIdentifier());
}

inline void FinishSizePrefixedECPSDR_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ECPSDR_Abridged> root) {
  fbb.FinishSizePrefixed(root, ECPSDR_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
