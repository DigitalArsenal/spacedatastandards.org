// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AircraftMissionTasking_Ingest;
struct AircraftMissionTasking_IngestBuilder;

/// /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
struct AircraftMissionTasking_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AircraftMissionTasking_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COUNTRYCODE = 4,
    VT_TASKEDSERVICE = 6,
    VT_UNITDESIGNATOR = 8,
    VT_UNITLOCNAME = 10,
    VT_RESMSNIND = 12,
    VT_AMCMSNNUM = 14,
    VT_PKGID = 16,
    VT_MSNCOMMANDER = 18,
    VT_MSNNUM = 20,
    VT_PRIMSNTYPE = 22,
    VT_SECMSNTYPE = 24,
    VT_ALERTSTATUS = 26,
    VT_DEPLOCNAME = 28,
    VT_DEPLOCUTM = 30,
    VT_DEPLOCLAT = 32,
    VT_DEPLOCLON = 34,
    VT_DEPTIME = 36,
    VT_RCVYLOCNAME = 38,
    VT_RCVYLOCUTM = 40,
    VT_RCVYLOCLAT = 42,
    VT_RCVYLOCLON = 44,
    VT_RCVYTIME = 46,
    VT_INDACTASKING = 48,
    VT_ACMSNLOCSEG = 50
  };
  /// The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 1, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// The service tasked with conducting this aircraft mission tasking for the exercise or operation.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 1, Maximum length = 1
  const ::flatbuffers::String *taskedService() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TASKEDSERVICE);
  }
  /// The designator of the unit that is tasked to perform this aircraft mission tasking.
  /// Example: /// Example: AMPHIB5DIV
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *unitDesignator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNITDESIGNATOR);
  }
  /// The tasked units location expressed as an ICAO or a place name.
  /// Example: /// Example: ICAO:KXXQ
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *unitLocName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNITLOCNAME);
  }
  /// An indicator of whether a mission is or will be a residual mission.
  /// Example: /// Example: N
  /// Constraints: Minimum length = 0, Maximum length = 1
  const ::flatbuffers::String *resMsnInd() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RESMSNIND);
  }
  /// The AMC number assigned to identify one aircraft from another.
  /// Example: /// Example: AMC:JJXD123HA045
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *amcMsnNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMCMSNNUM);
  }
  /// The identifier for the composite set of missions for this operation/exercise.
  /// Example: /// Example: ZZ
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *pkgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PKGID);
  }
  /// The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
  /// Example: /// Example: MC
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *msnCommander() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNCOMMANDER);
  }
  /// The mission number assigned to this mission.
  /// Example: /// Example: D123HA
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *msnNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNNUM);
  }
  /// The code for the preferred type or designator for a tasked air mission.
  /// Example: /// Example: CAS
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *priMsnType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIMSNTYPE);
  }
  /// The code for the alternative type of a tasked air mission.
  /// Example: /// Example: SEAD
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *secMsnType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECMSNTYPE);
  }
  /// The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
  /// Example: /// Example: 30
  /// Constraints: No constraints specified.
  int32_t alertStatus() const {
    return GetField<int32_t>(VT_ALERTSTATUS, 0);
  }
  /// The location or name specified for the departure of the tasked air mission.
  /// Example: /// Example: ICAO:KBIF
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *depLocName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPLOCNAME);
  }
  /// The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
  /// Example: /// Example: 32WDL123123
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *depLocUTM() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPLOCUTM);
  }
  /// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: 35.123
  /// Constraints: No constraints specified.
  double depLocLat() const {
    return GetField<double>(VT_DEPLOCLAT, 0.0);
  }
  /// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: 79.2354
  /// Constraints: No constraints specified.
  double depLocLon() const {
    return GetField<double>(VT_DEPLOCLON, 0.0);
  }
  /// The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *depTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEPTIME);
  }
  /// An array of locations specified for the recovery of the tasked air mission represented by varying formats.
  /// Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocName() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RCVYLOCNAME);
  }
  /// An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
  /// Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocUTM() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RCVYLOCUTM);
  }
  /// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: [48.8584, 40.7554]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocLat() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RCVYLOCLAT);
  }
  /// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: [2.2945, -73.9866]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocLon() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RCVYLOCLON);
  }
  /// An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyTime() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RCVYTIME);
  }
  /// A collection of the individual aircraft assigned to this aircraft mission tasking.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *indACTasking() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INDACTASKING);
  }
  /// A collection of aircraft mission location information for this aircraft mission tasking.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *acMsnLocSeg() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACMSNLOCSEG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_TASKEDSERVICE) &&
           verifier.VerifyString(taskedService()) &&
           VerifyOffset(verifier, VT_UNITDESIGNATOR) &&
           verifier.VerifyString(unitDesignator()) &&
           VerifyOffset(verifier, VT_UNITLOCNAME) &&
           verifier.VerifyString(unitLocName()) &&
           VerifyOffset(verifier, VT_RESMSNIND) &&
           verifier.VerifyString(resMsnInd()) &&
           VerifyOffset(verifier, VT_AMCMSNNUM) &&
           verifier.VerifyString(amcMsnNum()) &&
           VerifyOffset(verifier, VT_PKGID) &&
           verifier.VerifyString(pkgId()) &&
           VerifyOffset(verifier, VT_MSNCOMMANDER) &&
           verifier.VerifyString(msnCommander()) &&
           VerifyOffset(verifier, VT_MSNNUM) &&
           verifier.VerifyString(msnNum()) &&
           VerifyOffset(verifier, VT_PRIMSNTYPE) &&
           verifier.VerifyString(priMsnType()) &&
           VerifyOffset(verifier, VT_SECMSNTYPE) &&
           verifier.VerifyString(secMsnType()) &&
           VerifyField<int32_t>(verifier, VT_ALERTSTATUS, 4) &&
           VerifyOffset(verifier, VT_DEPLOCNAME) &&
           verifier.VerifyString(depLocName()) &&
           VerifyOffset(verifier, VT_DEPLOCUTM) &&
           verifier.VerifyString(depLocUTM()) &&
           VerifyField<double>(verifier, VT_DEPLOCLAT, 8) &&
           VerifyField<double>(verifier, VT_DEPLOCLON, 8) &&
           VerifyOffset(verifier, VT_DEPTIME) &&
           verifier.VerifyString(depTime()) &&
           VerifyOffset(verifier, VT_RCVYLOCNAME) &&
           verifier.VerifyVector(rcvyLocName()) &&
           verifier.VerifyVectorOfStrings(rcvyLocName()) &&
           VerifyOffset(verifier, VT_RCVYLOCUTM) &&
           verifier.VerifyVector(rcvyLocUTM()) &&
           verifier.VerifyVectorOfStrings(rcvyLocUTM()) &&
           VerifyOffset(verifier, VT_RCVYLOCLAT) &&
           verifier.VerifyVector(rcvyLocLat()) &&
           verifier.VerifyVectorOfStrings(rcvyLocLat()) &&
           VerifyOffset(verifier, VT_RCVYLOCLON) &&
           verifier.VerifyVector(rcvyLocLon()) &&
           verifier.VerifyVectorOfStrings(rcvyLocLon()) &&
           VerifyOffset(verifier, VT_RCVYTIME) &&
           verifier.VerifyVector(rcvyTime()) &&
           verifier.VerifyVectorOfStrings(rcvyTime()) &&
           VerifyOffset(verifier, VT_INDACTASKING) &&
           verifier.VerifyVector(indACTasking()) &&
           verifier.VerifyVectorOfStrings(indACTasking()) &&
           VerifyOffset(verifier, VT_ACMSNLOCSEG) &&
           verifier.VerifyVector(acMsnLocSeg()) &&
           verifier.VerifyVectorOfStrings(acMsnLocSeg()) &&
           verifier.EndTable();
  }
};

struct AircraftMissionTasking_IngestBuilder {
  typedef AircraftMissionTasking_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_COUNTRYCODE, countryCode);
  }
  void add_taskedService(::flatbuffers::Offset<::flatbuffers::String> taskedService) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_TASKEDSERVICE, taskedService);
  }
  void add_unitDesignator(::flatbuffers::Offset<::flatbuffers::String> unitDesignator) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_UNITDESIGNATOR, unitDesignator);
  }
  void add_unitLocName(::flatbuffers::Offset<::flatbuffers::String> unitLocName) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_UNITLOCNAME, unitLocName);
  }
  void add_resMsnInd(::flatbuffers::Offset<::flatbuffers::String> resMsnInd) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_RESMSNIND, resMsnInd);
  }
  void add_amcMsnNum(::flatbuffers::Offset<::flatbuffers::String> amcMsnNum) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_AMCMSNNUM, amcMsnNum);
  }
  void add_pkgId(::flatbuffers::Offset<::flatbuffers::String> pkgId) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_PKGID, pkgId);
  }
  void add_msnCommander(::flatbuffers::Offset<::flatbuffers::String> msnCommander) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_MSNCOMMANDER, msnCommander);
  }
  void add_msnNum(::flatbuffers::Offset<::flatbuffers::String> msnNum) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_MSNNUM, msnNum);
  }
  void add_priMsnType(::flatbuffers::Offset<::flatbuffers::String> priMsnType) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_PRIMSNTYPE, priMsnType);
  }
  void add_secMsnType(::flatbuffers::Offset<::flatbuffers::String> secMsnType) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_SECMSNTYPE, secMsnType);
  }
  void add_alertStatus(int32_t alertStatus) {
    fbb_.AddElement<int32_t>(AircraftMissionTasking_Ingest::VT_ALERTSTATUS, alertStatus, 0);
  }
  void add_depLocName(::flatbuffers::Offset<::flatbuffers::String> depLocName) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_DEPLOCNAME, depLocName);
  }
  void add_depLocUTM(::flatbuffers::Offset<::flatbuffers::String> depLocUTM) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_DEPLOCUTM, depLocUTM);
  }
  void add_depLocLat(double depLocLat) {
    fbb_.AddElement<double>(AircraftMissionTasking_Ingest::VT_DEPLOCLAT, depLocLat, 0.0);
  }
  void add_depLocLon(double depLocLon) {
    fbb_.AddElement<double>(AircraftMissionTasking_Ingest::VT_DEPLOCLON, depLocLon, 0.0);
  }
  void add_depTime(::flatbuffers::Offset<::flatbuffers::String> depTime) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_DEPTIME, depTime);
  }
  void add_rcvyLocName(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocName) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_RCVYLOCNAME, rcvyLocName);
  }
  void add_rcvyLocUTM(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocUTM) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_RCVYLOCUTM, rcvyLocUTM);
  }
  void add_rcvyLocLat(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocLat) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_RCVYLOCLAT, rcvyLocLat);
  }
  void add_rcvyLocLon(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocLon) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_RCVYLOCLON, rcvyLocLon);
  }
  void add_rcvyTime(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyTime) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_RCVYTIME, rcvyTime);
  }
  void add_indACTasking(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> indACTasking) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_INDACTASKING, indACTasking);
  }
  void add_acMsnLocSeg(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acMsnLocSeg) {
    fbb_.AddOffset(AircraftMissionTasking_Ingest::VT_ACMSNLOCSEG, acMsnLocSeg);
  }
  explicit AircraftMissionTasking_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AircraftMissionTasking_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AircraftMissionTasking_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AircraftMissionTasking_Ingest> CreateAircraftMissionTasking_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> taskedService = 0,
    ::flatbuffers::Offset<::flatbuffers::String> unitDesignator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> unitLocName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> resMsnInd = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amcMsnNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pkgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnCommander = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> priMsnType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> secMsnType = 0,
    int32_t alertStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depLocName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> depLocUTM = 0,
    double depLocLat = 0.0,
    double depLocLon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> depTime = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocName = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocUTM = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocLat = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyLocLon = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rcvyTime = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> indACTasking = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> acMsnLocSeg = 0) {
  AircraftMissionTasking_IngestBuilder builder_(_fbb);
  builder_.add_depLocLon(depLocLon);
  builder_.add_depLocLat(depLocLat);
  builder_.add_acMsnLocSeg(acMsnLocSeg);
  builder_.add_indACTasking(indACTasking);
  builder_.add_rcvyTime(rcvyTime);
  builder_.add_rcvyLocLon(rcvyLocLon);
  builder_.add_rcvyLocLat(rcvyLocLat);
  builder_.add_rcvyLocUTM(rcvyLocUTM);
  builder_.add_rcvyLocName(rcvyLocName);
  builder_.add_depTime(depTime);
  builder_.add_depLocUTM(depLocUTM);
  builder_.add_depLocName(depLocName);
  builder_.add_alertStatus(alertStatus);
  builder_.add_secMsnType(secMsnType);
  builder_.add_priMsnType(priMsnType);
  builder_.add_msnNum(msnNum);
  builder_.add_msnCommander(msnCommander);
  builder_.add_pkgId(pkgId);
  builder_.add_amcMsnNum(amcMsnNum);
  builder_.add_resMsnInd(resMsnInd);
  builder_.add_unitLocName(unitLocName);
  builder_.add_unitDesignator(unitDesignator);
  builder_.add_taskedService(taskedService);
  builder_.add_countryCode(countryCode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AircraftMissionTasking_Ingest> CreateAircraftMissionTasking_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *countryCode = nullptr,
    const char *taskedService = nullptr,
    const char *unitDesignator = nullptr,
    const char *unitLocName = nullptr,
    const char *resMsnInd = nullptr,
    const char *amcMsnNum = nullptr,
    const char *pkgId = nullptr,
    const char *msnCommander = nullptr,
    const char *msnNum = nullptr,
    const char *priMsnType = nullptr,
    const char *secMsnType = nullptr,
    int32_t alertStatus = 0,
    const char *depLocName = nullptr,
    const char *depLocUTM = nullptr,
    double depLocLat = 0.0,
    double depLocLon = 0.0,
    const char *depTime = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocName = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocUTM = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocLat = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyLocLon = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rcvyTime = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *indACTasking = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *acMsnLocSeg = nullptr) {
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto taskedService__ = taskedService ? _fbb.CreateString(taskedService) : 0;
  auto unitDesignator__ = unitDesignator ? _fbb.CreateString(unitDesignator) : 0;
  auto unitLocName__ = unitLocName ? _fbb.CreateString(unitLocName) : 0;
  auto resMsnInd__ = resMsnInd ? _fbb.CreateString(resMsnInd) : 0;
  auto amcMsnNum__ = amcMsnNum ? _fbb.CreateString(amcMsnNum) : 0;
  auto pkgId__ = pkgId ? _fbb.CreateString(pkgId) : 0;
  auto msnCommander__ = msnCommander ? _fbb.CreateString(msnCommander) : 0;
  auto msnNum__ = msnNum ? _fbb.CreateString(msnNum) : 0;
  auto priMsnType__ = priMsnType ? _fbb.CreateString(priMsnType) : 0;
  auto secMsnType__ = secMsnType ? _fbb.CreateString(secMsnType) : 0;
  auto depLocName__ = depLocName ? _fbb.CreateString(depLocName) : 0;
  auto depLocUTM__ = depLocUTM ? _fbb.CreateString(depLocUTM) : 0;
  auto depTime__ = depTime ? _fbb.CreateString(depTime) : 0;
  auto rcvyLocName__ = rcvyLocName ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rcvyLocName) : 0;
  auto rcvyLocUTM__ = rcvyLocUTM ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rcvyLocUTM) : 0;
  auto rcvyLocLat__ = rcvyLocLat ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rcvyLocLat) : 0;
  auto rcvyLocLon__ = rcvyLocLon ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rcvyLocLon) : 0;
  auto rcvyTime__ = rcvyTime ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rcvyTime) : 0;
  auto indACTasking__ = indACTasking ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*indACTasking) : 0;
  auto acMsnLocSeg__ = acMsnLocSeg ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*acMsnLocSeg) : 0;
  return CreateAircraftMissionTasking_Ingest(
      _fbb,
      countryCode__,
      taskedService__,
      unitDesignator__,
      unitLocName__,
      resMsnInd__,
      amcMsnNum__,
      pkgId__,
      msnCommander__,
      msnNum__,
      priMsnType__,
      secMsnType__,
      alertStatus,
      depLocName__,
      depLocUTM__,
      depLocLat,
      depLocLon,
      depTime__,
      rcvyLocName__,
      rcvyLocUTM__,
      rcvyLocLat__,
      rcvyLocLon__,
      rcvyTime__,
      indACTasking__,
      acMsnLocSeg__);
}

inline const AircraftMissionTasking_Ingest *GetAircraftMissionTasking_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<AircraftMissionTasking_Ingest>(buf);
}

inline const AircraftMissionTasking_Ingest *GetSizePrefixedAircraftMissionTasking_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AircraftMissionTasking_Ingest>(buf);
}

inline const char *AircraftMissionTasking_IngestIdentifier() {
  return "AIRC";
}

inline bool AircraftMissionTasking_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionTasking_IngestIdentifier());
}

inline bool SizePrefixedAircraftMissionTasking_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AircraftMissionTasking_IngestIdentifier(), true);
}

inline bool VerifyAircraftMissionTasking_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AircraftMissionTasking_Ingest>(AircraftMissionTasking_IngestIdentifier());
}

inline bool VerifySizePrefixedAircraftMissionTasking_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AircraftMissionTasking_Ingest>(AircraftMissionTasking_IngestIdentifier());
}

inline void FinishAircraftMissionTasking_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionTasking_Ingest> root) {
  fbb.Finish(root, AircraftMissionTasking_IngestIdentifier());
}

inline void FinishSizePrefixedAircraftMissionTasking_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AircraftMissionTasking_Ingest> root) {
  fbb.FinishSizePrefixed(root, AircraftMissionTasking_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
