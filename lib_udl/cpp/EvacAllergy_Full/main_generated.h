// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacAllergy_Full;
struct EvacAllergy_FullBuilder;

/// /// Allergy information.
struct EvacAllergy_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacAllergy_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_COMMENTS = 6
  };
  /// Type of patient allergy (e.g.  PENICILLIN, SULFA, OTHER).
  /// Example: /// Example: PENICILLIN
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Additional comments on the  patient's allergy information.
  /// Example: /// Example: Comments on the patient's allergies.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *comments() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_COMMENTS) &&
           verifier.VerifyString(comments()) &&
           verifier.EndTable();
  }
};

struct EvacAllergy_FullBuilder {
  typedef EvacAllergy_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EvacAllergy_Full::VT_TYPE, type);
  }
  void add_comments(::flatbuffers::Offset<::flatbuffers::String> comments) {
    fbb_.AddOffset(EvacAllergy_Full::VT_COMMENTS, comments);
  }
  explicit EvacAllergy_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacAllergy_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacAllergy_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacAllergy_Full> CreateEvacAllergy_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> comments = 0) {
  EvacAllergy_FullBuilder builder_(_fbb);
  builder_.add_comments(comments);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacAllergy_Full> CreateEvacAllergy_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *comments = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto comments__ = comments ? _fbb.CreateString(comments) : 0;
  return CreateEvacAllergy_Full(
      _fbb,
      type__,
      comments__);
}

inline const EvacAllergy_Full *GetEvacAllergy_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EvacAllergy_Full>(buf);
}

inline const EvacAllergy_Full *GetSizePrefixedEvacAllergy_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacAllergy_Full>(buf);
}

inline const char *EvacAllergy_FullIdentifier() {
  return "EVAC";
}

inline bool EvacAllergy_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacAllergy_FullIdentifier());
}

inline bool SizePrefixedEvacAllergy_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacAllergy_FullIdentifier(), true);
}

inline bool VerifyEvacAllergy_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacAllergy_Full>(EvacAllergy_FullIdentifier());
}

inline bool VerifySizePrefixedEvacAllergy_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacAllergy_Full>(EvacAllergy_FullIdentifier());
}

inline void FinishEvacAllergy_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacAllergy_Full> root) {
  fbb.Finish(root, EvacAllergy_FullIdentifier());
}

inline void FinishSizePrefixedEvacAllergy_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacAllergy_Full> root) {
  fbb.FinishSizePrefixed(root, EvacAllergy_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
