// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Sensor_Full;
struct Sensor_FullBuilder;

enum Sensor_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Sensor_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Sensor_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Sensor_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Sensor_Full_dataMode_Enum_EXERCISE = 3,
  Sensor_Full_dataMode_Enum_MIN = Sensor_Full_dataMode_Enum_REAL,
  Sensor_Full_dataMode_Enum_MAX = Sensor_Full_dataMode_Enum_EXERCISE
};

inline const Sensor_Full_dataMode_Enum (&EnumValuesSensor_Full_dataMode_Enum())[4] {
  static const Sensor_Full_dataMode_Enum values[] = {
    Sensor_Full_dataMode_Enum_REAL,
    Sensor_Full_dataMode_Enum_TEST,
    Sensor_Full_dataMode_Enum_SIMULATED,
    Sensor_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSensor_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSensor_Full_dataMode_Enum(Sensor_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Sensor_Full_dataMode_Enum_REAL, Sensor_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSensor_Full_dataMode_Enum()[index];
}

/// /// Model representation of observation data for electro-optical based sensor phenomenologies.
struct Sensor_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Sensor_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDSENSOR = 4,
    VT_SENSORNAME = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_SENSORNUMBER = 10,
    VT_SHORTNAME = 12,
    VT_DATACONTROL = 14,
    VT_AFID = 16,
    VT_ASRTYPE = 18,
    VT_SOURCE = 20,
    VT_ORIGIN = 22,
    VT_ORIGNETWORK = 24,
    VT_DATAMODE = 26,
    VT_CREATEDAT = 28,
    VT_CREATEDBY = 30,
    VT_UPDATEDAT = 32,
    VT_UPDATEDBY = 34,
    VT_ACTIVE = 36,
    VT_SENSORCHARACTERISTICS = 38,
    VT_SENSORSTATS = 40,
    VT_SENSORLIMITSCOLLECTION = 42,
    VT_ENTITY = 44,
    VT_IDENTITY = 46,
    VT_SENSOROBSERVATIONTYPE = 48,
    VT_SENSORTYPE = 50
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Unique name of this sensor.
  /// Example: /// Example: SENSOR_NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *sensorName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENSORNAME);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  int32_t sensorNumber() const {
    return GetField<int32_t>(VT_SENSORNUMBER, 0);
  }
  /// Optional short name for the sensor.
  /// Example: /// Example: SNR-1
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *shortName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHORTNAME);
  }
  /// Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
  /// Example: /// Example: observations
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *dataControl() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATACONTROL);
  }
  /// Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
  /// Example: /// Example: AF-ID
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *afId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AFID);
  }
  /// The sensor type at the site. Optional field, intended primarily for ASRs.
  /// Example: /// Example: SENSOR_TYPE
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *asrType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASRTYPE);
  }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Sensor_Full_dataMode_Enum dataMode() const {
    return static_cast<Sensor_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Optional flag indicating if the sensor is active.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool active() const {
    return GetField<uint8_t>(VT_ACTIVE, 0) != 0;
  }
  /// Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorcharacteristics() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENSORCHARACTERISTICS);
  }
  /// Collection of SensorStats which contain statistics of a sensor.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorStats() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENSORSTATS);
  }
  /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorlimitsCollection() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENSORLIMITSCOLLECTION);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *entity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY);
  }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idEntity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sensorObservationType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENSOROBSERVATIONTYPE);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sensorType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENSORTYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_SENSORNAME) &&
           verifier.VerifyString(sensorName()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyField<int32_t>(verifier, VT_SENSORNUMBER, 4) &&
           VerifyOffset(verifier, VT_SHORTNAME) &&
           verifier.VerifyString(shortName()) &&
           VerifyOffset(verifier, VT_DATACONTROL) &&
           verifier.VerifyString(dataControl()) &&
           VerifyOffset(verifier, VT_AFID) &&
           verifier.VerifyString(afId()) &&
           VerifyOffset(verifier, VT_ASRTYPE) &&
           verifier.VerifyString(asrType()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyField<uint8_t>(verifier, VT_ACTIVE, 1) &&
           VerifyOffset(verifier, VT_SENSORCHARACTERISTICS) &&
           verifier.VerifyVector(sensorcharacteristics()) &&
           verifier.VerifyVectorOfStrings(sensorcharacteristics()) &&
           VerifyOffset(verifier, VT_SENSORSTATS) &&
           verifier.VerifyVector(sensorStats()) &&
           verifier.VerifyVectorOfStrings(sensorStats()) &&
           VerifyOffset(verifier, VT_SENSORLIMITSCOLLECTION) &&
           verifier.VerifyVector(sensorlimitsCollection()) &&
           verifier.VerifyVectorOfStrings(sensorlimitsCollection()) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyString(entity()) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(idEntity()) &&
           VerifyOffset(verifier, VT_SENSOROBSERVATIONTYPE) &&
           verifier.VerifyString(sensorObservationType()) &&
           VerifyOffset(verifier, VT_SENSORTYPE) &&
           verifier.VerifyString(sensorType()) &&
           verifier.EndTable();
  }
};

struct Sensor_FullBuilder {
  typedef Sensor_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(Sensor_Full::VT_IDSENSOR, idSensor);
  }
  void add_sensorName(::flatbuffers::Offset<::flatbuffers::String> sensorName) {
    fbb_.AddOffset(Sensor_Full::VT_SENSORNAME, sensorName);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Sensor_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_sensorNumber(int32_t sensorNumber) {
    fbb_.AddElement<int32_t>(Sensor_Full::VT_SENSORNUMBER, sensorNumber, 0);
  }
  void add_shortName(::flatbuffers::Offset<::flatbuffers::String> shortName) {
    fbb_.AddOffset(Sensor_Full::VT_SHORTNAME, shortName);
  }
  void add_dataControl(::flatbuffers::Offset<::flatbuffers::String> dataControl) {
    fbb_.AddOffset(Sensor_Full::VT_DATACONTROL, dataControl);
  }
  void add_afId(::flatbuffers::Offset<::flatbuffers::String> afId) {
    fbb_.AddOffset(Sensor_Full::VT_AFID, afId);
  }
  void add_asrType(::flatbuffers::Offset<::flatbuffers::String> asrType) {
    fbb_.AddOffset(Sensor_Full::VT_ASRTYPE, asrType);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Sensor_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Sensor_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Sensor_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Sensor_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Sensor_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Sensor_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Sensor_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Sensor_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Sensor_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_active(bool active) {
    fbb_.AddElement<uint8_t>(Sensor_Full::VT_ACTIVE, static_cast<uint8_t>(active), 0);
  }
  void add_sensorcharacteristics(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorcharacteristics) {
    fbb_.AddOffset(Sensor_Full::VT_SENSORCHARACTERISTICS, sensorcharacteristics);
  }
  void add_sensorStats(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorStats) {
    fbb_.AddOffset(Sensor_Full::VT_SENSORSTATS, sensorStats);
  }
  void add_sensorlimitsCollection(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorlimitsCollection) {
    fbb_.AddOffset(Sensor_Full::VT_SENSORLIMITSCOLLECTION, sensorlimitsCollection);
  }
  void add_entity(::flatbuffers::Offset<::flatbuffers::String> entity) {
    fbb_.AddOffset(Sensor_Full::VT_ENTITY, entity);
  }
  void add_idEntity(::flatbuffers::Offset<::flatbuffers::String> idEntity) {
    fbb_.AddOffset(Sensor_Full::VT_IDENTITY, idEntity);
  }
  void add_sensorObservationType(::flatbuffers::Offset<::flatbuffers::String> sensorObservationType) {
    fbb_.AddOffset(Sensor_Full::VT_SENSOROBSERVATIONTYPE, sensorObservationType);
  }
  void add_sensorType(::flatbuffers::Offset<::flatbuffers::String> sensorType) {
    fbb_.AddOffset(Sensor_Full::VT_SENSORTYPE, sensorType);
  }
  explicit Sensor_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Sensor_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Sensor_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Sensor_Full> CreateSensor_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sensorName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    int32_t sensorNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> shortName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dataControl = 0,
    ::flatbuffers::Offset<::flatbuffers::String> afId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> asrType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Sensor_Full_dataMode_Enum dataMode = Sensor_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    bool active = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorcharacteristics = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorStats = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> sensorlimitsCollection = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEntity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sensorObservationType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sensorType = 0) {
  Sensor_FullBuilder builder_(_fbb);
  builder_.add_sensorType(sensorType);
  builder_.add_sensorObservationType(sensorObservationType);
  builder_.add_idEntity(idEntity);
  builder_.add_entity(entity);
  builder_.add_sensorlimitsCollection(sensorlimitsCollection);
  builder_.add_sensorStats(sensorStats);
  builder_.add_sensorcharacteristics(sensorcharacteristics);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_asrType(asrType);
  builder_.add_afId(afId);
  builder_.add_dataControl(dataControl);
  builder_.add_shortName(shortName);
  builder_.add_sensorNumber(sensorNumber);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_sensorName(sensorName);
  builder_.add_idSensor(idSensor);
  builder_.add_active(active);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Sensor_Full> CreateSensor_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *idSensor = nullptr,
    const char *sensorName = nullptr,
    const char *classificationMarking = nullptr,
    int32_t sensorNumber = 0,
    const char *shortName = nullptr,
    const char *dataControl = nullptr,
    const char *afId = nullptr,
    const char *asrType = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Sensor_Full_dataMode_Enum dataMode = Sensor_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    bool active = false,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorcharacteristics = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorStats = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *sensorlimitsCollection = nullptr,
    const char *entity = nullptr,
    const char *idEntity = nullptr,
    const char *sensorObservationType = nullptr,
    const char *sensorType = nullptr) {
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto sensorName__ = sensorName ? _fbb.CreateString(sensorName) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto shortName__ = shortName ? _fbb.CreateString(shortName) : 0;
  auto dataControl__ = dataControl ? _fbb.CreateString(dataControl) : 0;
  auto afId__ = afId ? _fbb.CreateString(afId) : 0;
  auto asrType__ = asrType ? _fbb.CreateString(asrType) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sensorcharacteristics__ = sensorcharacteristics ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sensorcharacteristics) : 0;
  auto sensorStats__ = sensorStats ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sensorStats) : 0;
  auto sensorlimitsCollection__ = sensorlimitsCollection ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*sensorlimitsCollection) : 0;
  auto entity__ = entity ? _fbb.CreateString(entity) : 0;
  auto idEntity__ = idEntity ? _fbb.CreateString(idEntity) : 0;
  auto sensorObservationType__ = sensorObservationType ? _fbb.CreateString(sensorObservationType) : 0;
  auto sensorType__ = sensorType ? _fbb.CreateString(sensorType) : 0;
  return CreateSensor_Full(
      _fbb,
      idSensor__,
      sensorName__,
      classificationMarking__,
      sensorNumber,
      shortName__,
      dataControl__,
      afId__,
      asrType__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      active,
      sensorcharacteristics__,
      sensorStats__,
      sensorlimitsCollection__,
      entity__,
      idEntity__,
      sensorObservationType__,
      sensorType__);
}

inline const Sensor_Full *GetSensor_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Sensor_Full>(buf);
}

inline const Sensor_Full *GetSizePrefixedSensor_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Sensor_Full>(buf);
}

inline const char *Sensor_FullIdentifier() {
  return "SENS";
}

inline bool Sensor_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Sensor_FullIdentifier());
}

inline bool SizePrefixedSensor_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Sensor_FullIdentifier(), true);
}

inline bool VerifySensor_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Sensor_Full>(Sensor_FullIdentifier());
}

inline bool VerifySizePrefixedSensor_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Sensor_Full>(Sensor_FullIdentifier());
}

inline void FinishSensor_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Sensor_Full> root) {
  fbb.Finish(root, Sensor_FullIdentifier());
}

inline void FinishSizePrefixedSensor_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Sensor_Full> root) {
  fbb.FinishSizePrefixed(root, Sensor_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
