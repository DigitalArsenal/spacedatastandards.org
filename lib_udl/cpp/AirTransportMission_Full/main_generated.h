// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AirTransportMission_Full;
struct AirTransportMission_FullBuilder;

enum AirTransportMission_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AirTransportMission_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AirTransportMission_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AirTransportMission_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AirTransportMission_Full_dataMode_Enum_EXERCISE = 3,
  AirTransportMission_Full_dataMode_Enum_MIN = AirTransportMission_Full_dataMode_Enum_REAL,
  AirTransportMission_Full_dataMode_Enum_MAX = AirTransportMission_Full_dataMode_Enum_EXERCISE
};

inline const AirTransportMission_Full_dataMode_Enum (&EnumValuesAirTransportMission_Full_dataMode_Enum())[4] {
  static const AirTransportMission_Full_dataMode_Enum values[] = {
    AirTransportMission_Full_dataMode_Enum_REAL,
    AirTransportMission_Full_dataMode_Enum_TEST,
    AirTransportMission_Full_dataMode_Enum_SIMULATED,
    AirTransportMission_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAirTransportMission_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirTransportMission_Full_dataMode_Enum(AirTransportMission_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AirTransportMission_Full_dataMode_Enum_REAL, AirTransportMission_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirTransportMission_Full_dataMode_Enum()[index];
}

/// /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
struct AirTransportMission_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AirTransportMission_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ORIGMISSIONID = 8,
    VT_AMCMISSIONID = 10,
    VT_GDSSMISSIONID = 12,
    VT_PREVMISSIONID = 14,
    VT_PREVAMCMISSIONID = 16,
    VT_NEXTMISSIONID = 18,
    VT_NEXTAMCMISSIONID = 20,
    VT_OBJECTIVE = 22,
    VT_PURPOSE = 24,
    VT_JCSPRIORITY = 26,
    VT_CW = 28,
    VT_TYPE = 30,
    VT_FIRSTPICKUP = 32,
    VT_LASTDROPOFF = 34,
    VT_ALIAS = 36,
    VT_CALLSIGN = 38,
    VT_OPERATION = 40,
    VT_NAF = 42,
    VT_ALLOCATEDUNIT = 44,
    VT_LOADCATEGORYTYPE = 46,
    VT_STATE = 48,
    VT_SOURCESYSDEVIATION = 50,
    VT_APACSID = 52,
    VT_DIPWORKSHEETNAME = 54,
    VT_CREATEDAT = 56,
    VT_CREATEDBY = 58,
    VT_UPDATEDAT = 60,
    VT_UPDATEDBY = 62,
    VT_SOURCEDL = 64,
    VT_SOURCE = 66,
    VT_ORIGIN = 68,
    VT_DATAMODE = 70,
    VT_ORIGNETWORK = 72,
    VT_REQUIREMENTS = 74,
    VT_REMARKS = 76,
    VT_HAZMAT = 78,
    VT_AIRCRAFTSORTIES = 80
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The mission identifier provided by the originating source.
  /// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGMISSIONID);
  }
  /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
  /// Example: /// Example: AJM7939B1123
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *amcMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMCMISSIONID);
  }
  /// Global Decision Support System (GDSS) mission unique identifier.
  /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *gdssMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GDSSMISSIONID);
  }
  /// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *prevMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREVMISSIONID);
  }
  /// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: AJM7939B1122
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *prevAMCMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PREVAMCMISSIONID);
  }
  /// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *nextMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NEXTMISSIONID);
  }
  /// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: AJM7939B1124
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *nextAMCMissionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NEXTAMCMISSIONID);
  }
  /// A description of this mission's objective.
  /// Example: /// Example: Deliver water to island X.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *objective() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBJECTIVE);
  }
  /// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
  /// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *purpose() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PURPOSE);
  }
  /// Highest Joint Chiefs of Staff priority of this mission.
  /// Example: /// Example: 1A3
  /// Constraints: Minimum length = 3, Maximum length = 3
  const ::flatbuffers::String *jcsPriority() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JCSPRIORITY);
  }
  /// Flag indicating this is a close watch mission.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  bool cw() const {
    return GetField<uint8_t>(VT_CW, 0) != 0;
  }
  /// The type of mission (e.g. SAAM, CHNL, etc.).
  /// Example: /// Example: SAAM
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
  /// Example: /// Example: KFAY
  /// Constraints: Minimum length = 4, Maximum length = 4
  const ::flatbuffers::String *firstPickUp() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FIRSTPICKUP);
  }
  /// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
  /// Example: /// Example: PGUA
  /// Constraints: Minimum length = 4, Maximum length = 4
  const ::flatbuffers::String *lastDropOff() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTDROPOFF);
  }
  /// Mission alias.
  /// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
  /// Constraints: Minimum length = 0, Maximum length = 48
  const ::flatbuffers::String *alias() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALIAS);
  }
  /// The call sign for this mission.
  /// Example: /// Example: RCH123
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// The name of the operation that this mission supports.
  /// Example: /// Example: Golden Eye
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *operation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATION);
  }
  /// Numbered Air Force (NAF) organization that owns the mission.
  /// Example: /// Example: 18AF
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *naf() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAF);
  }
  /// The unit the mission is allocated to.
  /// Example: /// Example: 437 AEW
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *allocatedUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALLOCATEDUNIT);
  }
  /// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
  /// Example: /// Example: MIXED
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *loadCategoryType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOADCATEGORYTYPE);
  }
  /// Current state of the mission.
  /// Example: /// Example: EXECUTION
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *state() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATE);
  }
  /// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
  /// Example: /// Example: -90.12
  /// Constraints: No constraints specified.
  double sourceSysDeviation() const {
    return GetField<double>(VT_SOURCESYSDEVIATION, 0.0);
  }
  /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
  /// Example: /// Example: 1083034
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *apacsId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APACSID);
  }
  /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  /// Example: /// Example: G2-182402-AB
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *dipWorksheetName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DIPWORKSHEETNAME);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AirTransportMission_Full_dataMode_Enum dataMode() const {
    return static_cast<AirTransportMission_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *requirements() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REQUIREMENTS);
  }
  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *remarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REMARKS);
  }
  /// Collection of Hazardous Material information associated with this Air Transport Mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *hazMat() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_HAZMAT);
  }
  /// The Aircraft Sortie Records linked to this mission. Do not set this field to send data to the UDL. This field is set by the UDL when returning full Air Transport Mission records.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *aircraftSorties() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_AIRCRAFTSORTIES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ORIGMISSIONID) &&
           verifier.VerifyString(origMissionId()) &&
           VerifyOffset(verifier, VT_AMCMISSIONID) &&
           verifier.VerifyString(amcMissionId()) &&
           VerifyOffset(verifier, VT_GDSSMISSIONID) &&
           verifier.VerifyString(gdssMissionId()) &&
           VerifyOffset(verifier, VT_PREVMISSIONID) &&
           verifier.VerifyString(prevMissionId()) &&
           VerifyOffset(verifier, VT_PREVAMCMISSIONID) &&
           verifier.VerifyString(prevAMCMissionId()) &&
           VerifyOffset(verifier, VT_NEXTMISSIONID) &&
           verifier.VerifyString(nextMissionId()) &&
           VerifyOffset(verifier, VT_NEXTAMCMISSIONID) &&
           verifier.VerifyString(nextAMCMissionId()) &&
           VerifyOffset(verifier, VT_OBJECTIVE) &&
           verifier.VerifyString(objective()) &&
           VerifyOffset(verifier, VT_PURPOSE) &&
           verifier.VerifyString(purpose()) &&
           VerifyOffset(verifier, VT_JCSPRIORITY) &&
           verifier.VerifyString(jcsPriority()) &&
           VerifyField<uint8_t>(verifier, VT_CW, 1) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_FIRSTPICKUP) &&
           verifier.VerifyString(firstPickUp()) &&
           VerifyOffset(verifier, VT_LASTDROPOFF) &&
           verifier.VerifyString(lastDropOff()) &&
           VerifyOffset(verifier, VT_ALIAS) &&
           verifier.VerifyString(alias()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_OPERATION) &&
           verifier.VerifyString(operation()) &&
           VerifyOffset(verifier, VT_NAF) &&
           verifier.VerifyString(naf()) &&
           VerifyOffset(verifier, VT_ALLOCATEDUNIT) &&
           verifier.VerifyString(allocatedUnit()) &&
           VerifyOffset(verifier, VT_LOADCATEGORYTYPE) &&
           verifier.VerifyString(loadCategoryType()) &&
           VerifyOffset(verifier, VT_STATE) &&
           verifier.VerifyString(state()) &&
           VerifyField<double>(verifier, VT_SOURCESYSDEVIATION, 8) &&
           VerifyOffset(verifier, VT_APACSID) &&
           verifier.VerifyString(apacsId()) &&
           VerifyOffset(verifier, VT_DIPWORKSHEETNAME) &&
           verifier.VerifyString(dipWorksheetName()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_REQUIREMENTS) &&
           verifier.VerifyVector(requirements()) &&
           verifier.VerifyVectorOfStrings(requirements()) &&
           VerifyOffset(verifier, VT_REMARKS) &&
           verifier.VerifyVector(remarks()) &&
           verifier.VerifyVectorOfStrings(remarks()) &&
           VerifyOffset(verifier, VT_HAZMAT) &&
           verifier.VerifyVector(hazMat()) &&
           verifier.VerifyVectorOfStrings(hazMat()) &&
           VerifyOffset(verifier, VT_AIRCRAFTSORTIES) &&
           verifier.VerifyVector(aircraftSorties()) &&
           verifier.VerifyVectorOfStrings(aircraftSorties()) &&
           verifier.EndTable();
  }
};

struct AirTransportMission_FullBuilder {
  typedef AirTransportMission_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AirTransportMission_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AirTransportMission_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_origMissionId(::flatbuffers::Offset<::flatbuffers::String> origMissionId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_ORIGMISSIONID, origMissionId);
  }
  void add_amcMissionId(::flatbuffers::Offset<::flatbuffers::String> amcMissionId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_AMCMISSIONID, amcMissionId);
  }
  void add_gdssMissionId(::flatbuffers::Offset<::flatbuffers::String> gdssMissionId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_GDSSMISSIONID, gdssMissionId);
  }
  void add_prevMissionId(::flatbuffers::Offset<::flatbuffers::String> prevMissionId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_PREVMISSIONID, prevMissionId);
  }
  void add_prevAMCMissionId(::flatbuffers::Offset<::flatbuffers::String> prevAMCMissionId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_PREVAMCMISSIONID, prevAMCMissionId);
  }
  void add_nextMissionId(::flatbuffers::Offset<::flatbuffers::String> nextMissionId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_NEXTMISSIONID, nextMissionId);
  }
  void add_nextAMCMissionId(::flatbuffers::Offset<::flatbuffers::String> nextAMCMissionId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_NEXTAMCMISSIONID, nextAMCMissionId);
  }
  void add_objective(::flatbuffers::Offset<::flatbuffers::String> objective) {
    fbb_.AddOffset(AirTransportMission_Full::VT_OBJECTIVE, objective);
  }
  void add_purpose(::flatbuffers::Offset<::flatbuffers::String> purpose) {
    fbb_.AddOffset(AirTransportMission_Full::VT_PURPOSE, purpose);
  }
  void add_jcsPriority(::flatbuffers::Offset<::flatbuffers::String> jcsPriority) {
    fbb_.AddOffset(AirTransportMission_Full::VT_JCSPRIORITY, jcsPriority);
  }
  void add_cw(bool cw) {
    fbb_.AddElement<uint8_t>(AirTransportMission_Full::VT_CW, static_cast<uint8_t>(cw), 0);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(AirTransportMission_Full::VT_TYPE, type);
  }
  void add_firstPickUp(::flatbuffers::Offset<::flatbuffers::String> firstPickUp) {
    fbb_.AddOffset(AirTransportMission_Full::VT_FIRSTPICKUP, firstPickUp);
  }
  void add_lastDropOff(::flatbuffers::Offset<::flatbuffers::String> lastDropOff) {
    fbb_.AddOffset(AirTransportMission_Full::VT_LASTDROPOFF, lastDropOff);
  }
  void add_alias(::flatbuffers::Offset<::flatbuffers::String> alias) {
    fbb_.AddOffset(AirTransportMission_Full::VT_ALIAS, alias);
  }
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(AirTransportMission_Full::VT_CALLSIGN, callSign);
  }
  void add_operation(::flatbuffers::Offset<::flatbuffers::String> operation) {
    fbb_.AddOffset(AirTransportMission_Full::VT_OPERATION, operation);
  }
  void add_naf(::flatbuffers::Offset<::flatbuffers::String> naf) {
    fbb_.AddOffset(AirTransportMission_Full::VT_NAF, naf);
  }
  void add_allocatedUnit(::flatbuffers::Offset<::flatbuffers::String> allocatedUnit) {
    fbb_.AddOffset(AirTransportMission_Full::VT_ALLOCATEDUNIT, allocatedUnit);
  }
  void add_loadCategoryType(::flatbuffers::Offset<::flatbuffers::String> loadCategoryType) {
    fbb_.AddOffset(AirTransportMission_Full::VT_LOADCATEGORYTYPE, loadCategoryType);
  }
  void add_state(::flatbuffers::Offset<::flatbuffers::String> state) {
    fbb_.AddOffset(AirTransportMission_Full::VT_STATE, state);
  }
  void add_sourceSysDeviation(double sourceSysDeviation) {
    fbb_.AddElement<double>(AirTransportMission_Full::VT_SOURCESYSDEVIATION, sourceSysDeviation, 0.0);
  }
  void add_apacsId(::flatbuffers::Offset<::flatbuffers::String> apacsId) {
    fbb_.AddOffset(AirTransportMission_Full::VT_APACSID, apacsId);
  }
  void add_dipWorksheetName(::flatbuffers::Offset<::flatbuffers::String> dipWorksheetName) {
    fbb_.AddOffset(AirTransportMission_Full::VT_DIPWORKSHEETNAME, dipWorksheetName);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AirTransportMission_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AirTransportMission_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(AirTransportMission_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(AirTransportMission_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(AirTransportMission_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AirTransportMission_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AirTransportMission_Full::VT_ORIGIN, origin);
  }
  void add_dataMode(AirTransportMission_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AirTransportMission_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AirTransportMission_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_requirements(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> requirements) {
    fbb_.AddOffset(AirTransportMission_Full::VT_REQUIREMENTS, requirements);
  }
  void add_remarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> remarks) {
    fbb_.AddOffset(AirTransportMission_Full::VT_REMARKS, remarks);
  }
  void add_hazMat(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hazMat) {
    fbb_.AddOffset(AirTransportMission_Full::VT_HAZMAT, hazMat);
  }
  void add_aircraftSorties(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> aircraftSorties) {
    fbb_.AddOffset(AirTransportMission_Full::VT_AIRCRAFTSORTIES, aircraftSorties);
  }
  explicit AirTransportMission_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AirTransportMission_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AirTransportMission_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AirTransportMission_Full> CreateAirTransportMission_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amcMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> gdssMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> prevMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> prevAMCMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nextMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> nextAMCMissionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> objective = 0,
    ::flatbuffers::Offset<::flatbuffers::String> purpose = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jcsPriority = 0,
    bool cw = false,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> firstPickUp = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastDropOff = 0,
    ::flatbuffers::Offset<::flatbuffers::String> alias = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> operation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> naf = 0,
    ::flatbuffers::Offset<::flatbuffers::String> allocatedUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> loadCategoryType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> state = 0,
    double sourceSysDeviation = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> apacsId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dipWorksheetName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    AirTransportMission_Full_dataMode_Enum dataMode = AirTransportMission_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> requirements = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> remarks = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> hazMat = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> aircraftSorties = 0) {
  AirTransportMission_FullBuilder builder_(_fbb);
  builder_.add_sourceSysDeviation(sourceSysDeviation);
  builder_.add_aircraftSorties(aircraftSorties);
  builder_.add_hazMat(hazMat);
  builder_.add_remarks(remarks);
  builder_.add_requirements(requirements);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_dipWorksheetName(dipWorksheetName);
  builder_.add_apacsId(apacsId);
  builder_.add_state(state);
  builder_.add_loadCategoryType(loadCategoryType);
  builder_.add_allocatedUnit(allocatedUnit);
  builder_.add_naf(naf);
  builder_.add_operation(operation);
  builder_.add_callSign(callSign);
  builder_.add_alias(alias);
  builder_.add_lastDropOff(lastDropOff);
  builder_.add_firstPickUp(firstPickUp);
  builder_.add_type(type);
  builder_.add_jcsPriority(jcsPriority);
  builder_.add_purpose(purpose);
  builder_.add_objective(objective);
  builder_.add_nextAMCMissionId(nextAMCMissionId);
  builder_.add_nextMissionId(nextMissionId);
  builder_.add_prevAMCMissionId(prevAMCMissionId);
  builder_.add_prevMissionId(prevMissionId);
  builder_.add_gdssMissionId(gdssMissionId);
  builder_.add_amcMissionId(amcMissionId);
  builder_.add_origMissionId(origMissionId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_cw(cw);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AirTransportMission_Full> CreateAirTransportMission_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *origMissionId = nullptr,
    const char *amcMissionId = nullptr,
    const char *gdssMissionId = nullptr,
    const char *prevMissionId = nullptr,
    const char *prevAMCMissionId = nullptr,
    const char *nextMissionId = nullptr,
    const char *nextAMCMissionId = nullptr,
    const char *objective = nullptr,
    const char *purpose = nullptr,
    const char *jcsPriority = nullptr,
    bool cw = false,
    const char *type = nullptr,
    const char *firstPickUp = nullptr,
    const char *lastDropOff = nullptr,
    const char *alias = nullptr,
    const char *callSign = nullptr,
    const char *operation = nullptr,
    const char *naf = nullptr,
    const char *allocatedUnit = nullptr,
    const char *loadCategoryType = nullptr,
    const char *state = nullptr,
    double sourceSysDeviation = 0.0,
    const char *apacsId = nullptr,
    const char *dipWorksheetName = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    AirTransportMission_Full_dataMode_Enum dataMode = AirTransportMission_Full_dataMode_Enum_REAL,
    const char *origNetwork = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *requirements = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *remarks = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *hazMat = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *aircraftSorties = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto origMissionId__ = origMissionId ? _fbb.CreateString(origMissionId) : 0;
  auto amcMissionId__ = amcMissionId ? _fbb.CreateString(amcMissionId) : 0;
  auto gdssMissionId__ = gdssMissionId ? _fbb.CreateString(gdssMissionId) : 0;
  auto prevMissionId__ = prevMissionId ? _fbb.CreateString(prevMissionId) : 0;
  auto prevAMCMissionId__ = prevAMCMissionId ? _fbb.CreateString(prevAMCMissionId) : 0;
  auto nextMissionId__ = nextMissionId ? _fbb.CreateString(nextMissionId) : 0;
  auto nextAMCMissionId__ = nextAMCMissionId ? _fbb.CreateString(nextAMCMissionId) : 0;
  auto objective__ = objective ? _fbb.CreateString(objective) : 0;
  auto purpose__ = purpose ? _fbb.CreateString(purpose) : 0;
  auto jcsPriority__ = jcsPriority ? _fbb.CreateString(jcsPriority) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto firstPickUp__ = firstPickUp ? _fbb.CreateString(firstPickUp) : 0;
  auto lastDropOff__ = lastDropOff ? _fbb.CreateString(lastDropOff) : 0;
  auto alias__ = alias ? _fbb.CreateString(alias) : 0;
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto operation__ = operation ? _fbb.CreateString(operation) : 0;
  auto naf__ = naf ? _fbb.CreateString(naf) : 0;
  auto allocatedUnit__ = allocatedUnit ? _fbb.CreateString(allocatedUnit) : 0;
  auto loadCategoryType__ = loadCategoryType ? _fbb.CreateString(loadCategoryType) : 0;
  auto state__ = state ? _fbb.CreateString(state) : 0;
  auto apacsId__ = apacsId ? _fbb.CreateString(apacsId) : 0;
  auto dipWorksheetName__ = dipWorksheetName ? _fbb.CreateString(dipWorksheetName) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto requirements__ = requirements ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*requirements) : 0;
  auto remarks__ = remarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*remarks) : 0;
  auto hazMat__ = hazMat ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*hazMat) : 0;
  auto aircraftSorties__ = aircraftSorties ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*aircraftSorties) : 0;
  return CreateAirTransportMission_Full(
      _fbb,
      id__,
      classificationMarking__,
      origMissionId__,
      amcMissionId__,
      gdssMissionId__,
      prevMissionId__,
      prevAMCMissionId__,
      nextMissionId__,
      nextAMCMissionId__,
      objective__,
      purpose__,
      jcsPriority__,
      cw,
      type__,
      firstPickUp__,
      lastDropOff__,
      alias__,
      callSign__,
      operation__,
      naf__,
      allocatedUnit__,
      loadCategoryType__,
      state__,
      sourceSysDeviation,
      apacsId__,
      dipWorksheetName__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      sourceDL__,
      source__,
      origin__,
      dataMode,
      origNetwork__,
      requirements__,
      remarks__,
      hazMat__,
      aircraftSorties__);
}

inline const AirTransportMission_Full *GetAirTransportMission_Full(const void *buf) {
  return ::flatbuffers::GetRoot<AirTransportMission_Full>(buf);
}

inline const AirTransportMission_Full *GetSizePrefixedAirTransportMission_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AirTransportMission_Full>(buf);
}

inline const char *AirTransportMission_FullIdentifier() {
  return "AIRT";
}

inline bool AirTransportMission_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirTransportMission_FullIdentifier());
}

inline bool SizePrefixedAirTransportMission_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AirTransportMission_FullIdentifier(), true);
}

inline bool VerifyAirTransportMission_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AirTransportMission_Full>(AirTransportMission_FullIdentifier());
}

inline bool VerifySizePrefixedAirTransportMission_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AirTransportMission_Full>(AirTransportMission_FullIdentifier());
}

inline void FinishAirTransportMission_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirTransportMission_Full> root) {
  fbb.Finish(root, AirTransportMission_FullIdentifier());
}

inline void FinishSizePrefixedAirTransportMission_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AirTransportMission_Full> root) {
  fbb.FinishSizePrefixed(root, AirTransportMission_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
