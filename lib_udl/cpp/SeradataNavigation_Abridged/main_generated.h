// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SeradataNavigation_Abridged;
struct SeradataNavigation_AbridgedBuilder;

enum SeradataNavigation_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SeradataNavigation_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SeradataNavigation_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SeradataNavigation_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SeradataNavigation_Abridged_dataMode_Enum_EXERCISE = 3,
  SeradataNavigation_Abridged_dataMode_Enum_MIN = SeradataNavigation_Abridged_dataMode_Enum_REAL,
  SeradataNavigation_Abridged_dataMode_Enum_MAX = SeradataNavigation_Abridged_dataMode_Enum_EXERCISE
};

inline const SeradataNavigation_Abridged_dataMode_Enum (&EnumValuesSeradataNavigation_Abridged_dataMode_Enum())[4] {
  static const SeradataNavigation_Abridged_dataMode_Enum values[] = {
    SeradataNavigation_Abridged_dataMode_Enum_REAL,
    SeradataNavigation_Abridged_dataMode_Enum_TEST,
    SeradataNavigation_Abridged_dataMode_Enum_SIMULATED,
    SeradataNavigation_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSeradataNavigation_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSeradataNavigation_Abridged_dataMode_Enum(SeradataNavigation_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SeradataNavigation_Abridged_dataMode_Enum_REAL, SeradataNavigation_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSeradataNavigation_Abridged_dataMode_Enum()[index];
}

/// /// Details for a navigation payload from  Seradata.
struct SeradataNavigation_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SeradataNavigation_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDNAVIGATION = 8,
    VT_SPACECRAFTID = 10,
    VT_HOSTEDFORCOMPANYORGID = 12,
    VT_MANUFACTURERORGID = 14,
    VT_PAYLOADTYPE = 16,
    VT_MODES = 18,
    VT_MODEFREQUENCY = 20,
    VT_LOCATIONACCURACY = 22,
    VT_PARTNERSPACECRAFTID = 24,
    VT_AREACOVERAGE = 26,
    VT_NOTES = 28,
    VT_NAME = 30,
    VT_CLOCKTYPE = 32,
    VT_CREATEDAT = 34,
    VT_CREATEDBY = 36,
    VT_SOURCE = 38,
    VT_ORIGIN = 40,
    VT_ORIGNETWORK = 42,
    VT_DATAMODE = 44
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATANAVIGATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// UUID of the parent Navigation record.
  /// Example: /// Example: idNavigation
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idNavigation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDNAVIGATION);
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *spacecraftId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPACECRAFTID);
  }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *hostedForCompanyOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOSTEDFORCOMPANYORGID);
  }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Navigation payload type, e.g. WAAS, GAGAN, etc.
  /// Example: /// Example: WAAS
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *payloadType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PAYLOADTYPE);
  }
  /// Modes of operation.
  /// Example: /// Example: Military
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *modes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODES);
  }
  /// Frequency for this payload.
  /// Example: /// Example: 1234
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *modeFrequency() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODEFREQUENCY);
  }
  /// Location accuracy in meters.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double locationAccuracy() const {
    return GetField<double>(VT_LOCATIONACCURACY, 0.0);
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: partnerSpacecraftId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *partnerSpacecraftId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PARTNERSPACECRAFTID);
  }
  /// Area of coverage, e.g. Worldwide, India, etc.
  /// Example: /// Example: Worldwide
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *areaCoverage() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AREACOVERAGE);
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Sensor name from Seradata, e.g. WAAS GEO-5, etc.
  /// Example: /// Example: WAAS GEO-5
  /// Constraints: Minimum length = 0, Maximum length = 50
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
  /// Example: /// Example: Rubidium
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *clockType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLOCKTYPE);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SeradataNavigation_Abridged_dataMode_Enum dataMode() const {
    return static_cast<SeradataNavigation_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDNAVIGATION) &&
           verifier.VerifyString(idNavigation()) &&
           VerifyOffset(verifier, VT_SPACECRAFTID) &&
           verifier.VerifyString(spacecraftId()) &&
           VerifyOffset(verifier, VT_HOSTEDFORCOMPANYORGID) &&
           verifier.VerifyString(hostedForCompanyOrgId()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_PAYLOADTYPE) &&
           verifier.VerifyString(payloadType()) &&
           VerifyOffset(verifier, VT_MODES) &&
           verifier.VerifyString(modes()) &&
           VerifyOffset(verifier, VT_MODEFREQUENCY) &&
           verifier.VerifyString(modeFrequency()) &&
           VerifyField<double>(verifier, VT_LOCATIONACCURACY, 8) &&
           VerifyOffset(verifier, VT_PARTNERSPACECRAFTID) &&
           verifier.VerifyString(partnerSpacecraftId()) &&
           VerifyOffset(verifier, VT_AREACOVERAGE) &&
           verifier.VerifyString(areaCoverage()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CLOCKTYPE) &&
           verifier.VerifyString(clockType()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct SeradataNavigation_AbridgedBuilder {
  typedef SeradataNavigation_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idNavigation(::flatbuffers::Offset<::flatbuffers::String> idNavigation) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_IDNAVIGATION, idNavigation);
  }
  void add_spacecraftId(::flatbuffers::Offset<::flatbuffers::String> spacecraftId) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_SPACECRAFTID, spacecraftId);
  }
  void add_hostedForCompanyOrgId(::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_payloadType(::flatbuffers::Offset<::flatbuffers::String> payloadType) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_PAYLOADTYPE, payloadType);
  }
  void add_modes(::flatbuffers::Offset<::flatbuffers::String> modes) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_MODES, modes);
  }
  void add_modeFrequency(::flatbuffers::Offset<::flatbuffers::String> modeFrequency) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_MODEFREQUENCY, modeFrequency);
  }
  void add_locationAccuracy(double locationAccuracy) {
    fbb_.AddElement<double>(SeradataNavigation_Abridged::VT_LOCATIONACCURACY, locationAccuracy, 0.0);
  }
  void add_partnerSpacecraftId(::flatbuffers::Offset<::flatbuffers::String> partnerSpacecraftId) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_PARTNERSPACECRAFTID, partnerSpacecraftId);
  }
  void add_areaCoverage(::flatbuffers::Offset<::flatbuffers::String> areaCoverage) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_AREACOVERAGE, areaCoverage);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_NOTES, notes);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_NAME, name);
  }
  void add_clockType(::flatbuffers::Offset<::flatbuffers::String> clockType) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_CLOCKTYPE, clockType);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SeradataNavigation_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(SeradataNavigation_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SeradataNavigation_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit SeradataNavigation_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SeradataNavigation_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SeradataNavigation_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SeradataNavigation_Abridged> CreateSeradataNavigation_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idNavigation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spacecraftId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hostedForCompanyOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> payloadType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modeFrequency = 0,
    double locationAccuracy = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> partnerSpacecraftId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> areaCoverage = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> clockType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    SeradataNavigation_Abridged_dataMode_Enum dataMode = SeradataNavigation_Abridged_dataMode_Enum_REAL) {
  SeradataNavigation_AbridgedBuilder builder_(_fbb);
  builder_.add_locationAccuracy(locationAccuracy);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_clockType(clockType);
  builder_.add_name(name);
  builder_.add_notes(notes);
  builder_.add_areaCoverage(areaCoverage);
  builder_.add_partnerSpacecraftId(partnerSpacecraftId);
  builder_.add_modeFrequency(modeFrequency);
  builder_.add_modes(modes);
  builder_.add_payloadType(payloadType);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_hostedForCompanyOrgId(hostedForCompanyOrgId);
  builder_.add_spacecraftId(spacecraftId);
  builder_.add_idNavigation(idNavigation);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SeradataNavigation_Abridged> CreateSeradataNavigation_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idNavigation = nullptr,
    const char *spacecraftId = nullptr,
    const char *hostedForCompanyOrgId = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *payloadType = nullptr,
    const char *modes = nullptr,
    const char *modeFrequency = nullptr,
    double locationAccuracy = 0.0,
    const char *partnerSpacecraftId = nullptr,
    const char *areaCoverage = nullptr,
    const char *notes = nullptr,
    const char *name = nullptr,
    const char *clockType = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    SeradataNavigation_Abridged_dataMode_Enum dataMode = SeradataNavigation_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idNavigation__ = idNavigation ? _fbb.CreateString(idNavigation) : 0;
  auto spacecraftId__ = spacecraftId ? _fbb.CreateString(spacecraftId) : 0;
  auto hostedForCompanyOrgId__ = hostedForCompanyOrgId ? _fbb.CreateString(hostedForCompanyOrgId) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto payloadType__ = payloadType ? _fbb.CreateString(payloadType) : 0;
  auto modes__ = modes ? _fbb.CreateString(modes) : 0;
  auto modeFrequency__ = modeFrequency ? _fbb.CreateString(modeFrequency) : 0;
  auto partnerSpacecraftId__ = partnerSpacecraftId ? _fbb.CreateString(partnerSpacecraftId) : 0;
  auto areaCoverage__ = areaCoverage ? _fbb.CreateString(areaCoverage) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto clockType__ = clockType ? _fbb.CreateString(clockType) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateSeradataNavigation_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idNavigation__,
      spacecraftId__,
      hostedForCompanyOrgId__,
      manufacturerOrgId__,
      payloadType__,
      modes__,
      modeFrequency__,
      locationAccuracy,
      partnerSpacecraftId__,
      areaCoverage__,
      notes__,
      name__,
      clockType__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const SeradataNavigation_Abridged *GetSeradataNavigation_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SeradataNavigation_Abridged>(buf);
}

inline const SeradataNavigation_Abridged *GetSizePrefixedSeradataNavigation_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SeradataNavigation_Abridged>(buf);
}

inline const char *SeradataNavigation_AbridgedIdentifier() {
  return "SERA";
}

inline bool SeradataNavigation_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataNavigation_AbridgedIdentifier());
}

inline bool SizePrefixedSeradataNavigation_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SeradataNavigation_AbridgedIdentifier(), true);
}

inline bool VerifySeradataNavigation_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SeradataNavigation_Abridged>(SeradataNavigation_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSeradataNavigation_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SeradataNavigation_Abridged>(SeradataNavigation_AbridgedIdentifier());
}

inline void FinishSeradataNavigation_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataNavigation_Abridged> root) {
  fbb.Finish(root, SeradataNavigation_AbridgedIdentifier());
}

inline void FinishSizePrefixedSeradataNavigation_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SeradataNavigation_Abridged> root) {
  fbb.FinishSizePrefixed(root, SeradataNavigation_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
