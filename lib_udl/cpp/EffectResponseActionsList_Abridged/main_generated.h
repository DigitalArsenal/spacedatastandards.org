// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EffectResponseActionsList_Abridged;
struct EffectResponseActionsList_AbridgedBuilder;

/// /// List of actions associated with this effect response.
struct EffectResponseActionsList_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EffectResponseActionsList_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SUMMARY = 4,
    VT_ACTIONID = 6,
    VT_ACTIONSTARTTIME = 8,
    VT_ACTIONENDTIME = 10,
    VT_TOTSTARTTIME = 12,
    VT_TOTENDTIME = 14,
    VT_ACTIONACTORSRCTYPE = 16,
    VT_ACTIONACTORSRCID = 18,
    VT_EFFECTOR = 20,
    VT_TARGETSRCTYPE = 22,
    VT_TARGETSRCID = 24,
    VT_ACTORINTERCEPTLAT = 26,
    VT_ACTORINTERCEPTLON = 28,
    VT_ACTORINTERCEPTALT = 30,
    VT_WEAPONINTERCEPTLAT = 32,
    VT_WEAPONINTERCEPTLON = 34,
    VT_WEAPONINTERCEPTALT = 36,
    VT_ACTIONMETRICS = 38
  };
  /// A summary string describing different aspects of the action.
  /// Example: /// Example: Example summary
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *summary() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUMMARY);
  }
  /// Identifier of this action.
  /// Example: /// Example: ACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *actionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIONID);
  }
  /// The desired start time of this task, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actionStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIONSTARTTIME);
  }
  /// The desired end time of this task, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actionEndTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIONENDTIME);
  }
  /// The start time of the asset TOT (time over target), in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *totStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOTSTARTTIME);
  }
  /// The end time of the asset TOT (time over target), in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *totEndTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TOTENDTIME);
  }
  /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  /// Example: /// Example: AIRCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *actionActorSrcType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIONACTORSRCTYPE);
  }
  /// The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
  /// Example: /// Example: ACTIONACTORSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *actionActorSrcId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIONACTORSRCID);
  }
  /// The type of munition or sensor used by this asset/actor.
  /// Example: /// Example: SENSOR1
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *effector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFECTOR);
  }
  /// The source type of the targetId identifier (POI, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *targetSrcType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGETSRCTYPE);
  }
  /// The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: TARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *targetSrcId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGETSRCID);
  }
  /// The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  double actorInterceptLat() const {
    return GetField<double>(VT_ACTORINTERCEPTLAT, 0.0);
  }
  /// The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  double actorInterceptLon() const {
    return GetField<double>(VT_ACTORINTERCEPTLON, 0.0);
  }
  /// The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double actorInterceptAlt() const {
    return GetField<double>(VT_ACTORINTERCEPTALT, 0.0);
  }
  /// The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  double weaponInterceptLat() const {
    return GetField<double>(VT_WEAPONINTERCEPTLAT, 0.0);
  }
  /// The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  double weaponInterceptLon() const {
    return GetField<double>(VT_WEAPONINTERCEPTLON, 0.0);
  }
  /// The WGS-84 altitude of the weapon destination location, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double weaponInterceptAlt() const {
    return GetField<double>(VT_WEAPONINTERCEPTALT, 0.0);
  }
  /// List of metrics associated with this action.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *actionMetrics() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ACTIONMETRICS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SUMMARY) &&
           verifier.VerifyString(summary()) &&
           VerifyOffset(verifier, VT_ACTIONID) &&
           verifier.VerifyString(actionId()) &&
           VerifyOffset(verifier, VT_ACTIONSTARTTIME) &&
           verifier.VerifyString(actionStartTime()) &&
           VerifyOffset(verifier, VT_ACTIONENDTIME) &&
           verifier.VerifyString(actionEndTime()) &&
           VerifyOffset(verifier, VT_TOTSTARTTIME) &&
           verifier.VerifyString(totStartTime()) &&
           VerifyOffset(verifier, VT_TOTENDTIME) &&
           verifier.VerifyString(totEndTime()) &&
           VerifyOffset(verifier, VT_ACTIONACTORSRCTYPE) &&
           verifier.VerifyString(actionActorSrcType()) &&
           VerifyOffset(verifier, VT_ACTIONACTORSRCID) &&
           verifier.VerifyString(actionActorSrcId()) &&
           VerifyOffset(verifier, VT_EFFECTOR) &&
           verifier.VerifyString(effector()) &&
           VerifyOffset(verifier, VT_TARGETSRCTYPE) &&
           verifier.VerifyString(targetSrcType()) &&
           VerifyOffset(verifier, VT_TARGETSRCID) &&
           verifier.VerifyString(targetSrcId()) &&
           VerifyField<double>(verifier, VT_ACTORINTERCEPTLAT, 8) &&
           VerifyField<double>(verifier, VT_ACTORINTERCEPTLON, 8) &&
           VerifyField<double>(verifier, VT_ACTORINTERCEPTALT, 8) &&
           VerifyField<double>(verifier, VT_WEAPONINTERCEPTLAT, 8) &&
           VerifyField<double>(verifier, VT_WEAPONINTERCEPTLON, 8) &&
           VerifyField<double>(verifier, VT_WEAPONINTERCEPTALT, 8) &&
           VerifyOffset(verifier, VT_ACTIONMETRICS) &&
           verifier.VerifyVector(actionMetrics()) &&
           verifier.VerifyVectorOfStrings(actionMetrics()) &&
           verifier.EndTable();
  }
};

struct EffectResponseActionsList_AbridgedBuilder {
  typedef EffectResponseActionsList_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_summary(::flatbuffers::Offset<::flatbuffers::String> summary) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_SUMMARY, summary);
  }
  void add_actionId(::flatbuffers::Offset<::flatbuffers::String> actionId) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_ACTIONID, actionId);
  }
  void add_actionStartTime(::flatbuffers::Offset<::flatbuffers::String> actionStartTime) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_ACTIONSTARTTIME, actionStartTime);
  }
  void add_actionEndTime(::flatbuffers::Offset<::flatbuffers::String> actionEndTime) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_ACTIONENDTIME, actionEndTime);
  }
  void add_totStartTime(::flatbuffers::Offset<::flatbuffers::String> totStartTime) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_TOTSTARTTIME, totStartTime);
  }
  void add_totEndTime(::flatbuffers::Offset<::flatbuffers::String> totEndTime) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_TOTENDTIME, totEndTime);
  }
  void add_actionActorSrcType(::flatbuffers::Offset<::flatbuffers::String> actionActorSrcType) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_ACTIONACTORSRCTYPE, actionActorSrcType);
  }
  void add_actionActorSrcId(::flatbuffers::Offset<::flatbuffers::String> actionActorSrcId) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_ACTIONACTORSRCID, actionActorSrcId);
  }
  void add_effector(::flatbuffers::Offset<::flatbuffers::String> effector) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_EFFECTOR, effector);
  }
  void add_targetSrcType(::flatbuffers::Offset<::flatbuffers::String> targetSrcType) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_TARGETSRCTYPE, targetSrcType);
  }
  void add_targetSrcId(::flatbuffers::Offset<::flatbuffers::String> targetSrcId) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_TARGETSRCID, targetSrcId);
  }
  void add_actorInterceptLat(double actorInterceptLat) {
    fbb_.AddElement<double>(EffectResponseActionsList_Abridged::VT_ACTORINTERCEPTLAT, actorInterceptLat, 0.0);
  }
  void add_actorInterceptLon(double actorInterceptLon) {
    fbb_.AddElement<double>(EffectResponseActionsList_Abridged::VT_ACTORINTERCEPTLON, actorInterceptLon, 0.0);
  }
  void add_actorInterceptAlt(double actorInterceptAlt) {
    fbb_.AddElement<double>(EffectResponseActionsList_Abridged::VT_ACTORINTERCEPTALT, actorInterceptAlt, 0.0);
  }
  void add_weaponInterceptLat(double weaponInterceptLat) {
    fbb_.AddElement<double>(EffectResponseActionsList_Abridged::VT_WEAPONINTERCEPTLAT, weaponInterceptLat, 0.0);
  }
  void add_weaponInterceptLon(double weaponInterceptLon) {
    fbb_.AddElement<double>(EffectResponseActionsList_Abridged::VT_WEAPONINTERCEPTLON, weaponInterceptLon, 0.0);
  }
  void add_weaponInterceptAlt(double weaponInterceptAlt) {
    fbb_.AddElement<double>(EffectResponseActionsList_Abridged::VT_WEAPONINTERCEPTALT, weaponInterceptAlt, 0.0);
  }
  void add_actionMetrics(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actionMetrics) {
    fbb_.AddOffset(EffectResponseActionsList_Abridged::VT_ACTIONMETRICS, actionMetrics);
  }
  explicit EffectResponseActionsList_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EffectResponseActionsList_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EffectResponseActionsList_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EffectResponseActionsList_Abridged> CreateEffectResponseActionsList_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> summary = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actionStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actionEndTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> totStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> totEndTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actionActorSrcType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actionActorSrcId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> effector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> targetSrcType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> targetSrcId = 0,
    double actorInterceptLat = 0.0,
    double actorInterceptLon = 0.0,
    double actorInterceptAlt = 0.0,
    double weaponInterceptLat = 0.0,
    double weaponInterceptLon = 0.0,
    double weaponInterceptAlt = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> actionMetrics = 0) {
  EffectResponseActionsList_AbridgedBuilder builder_(_fbb);
  builder_.add_weaponInterceptAlt(weaponInterceptAlt);
  builder_.add_weaponInterceptLon(weaponInterceptLon);
  builder_.add_weaponInterceptLat(weaponInterceptLat);
  builder_.add_actorInterceptAlt(actorInterceptAlt);
  builder_.add_actorInterceptLon(actorInterceptLon);
  builder_.add_actorInterceptLat(actorInterceptLat);
  builder_.add_actionMetrics(actionMetrics);
  builder_.add_targetSrcId(targetSrcId);
  builder_.add_targetSrcType(targetSrcType);
  builder_.add_effector(effector);
  builder_.add_actionActorSrcId(actionActorSrcId);
  builder_.add_actionActorSrcType(actionActorSrcType);
  builder_.add_totEndTime(totEndTime);
  builder_.add_totStartTime(totStartTime);
  builder_.add_actionEndTime(actionEndTime);
  builder_.add_actionStartTime(actionStartTime);
  builder_.add_actionId(actionId);
  builder_.add_summary(summary);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EffectResponseActionsList_Abridged> CreateEffectResponseActionsList_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *summary = nullptr,
    const char *actionId = nullptr,
    const char *actionStartTime = nullptr,
    const char *actionEndTime = nullptr,
    const char *totStartTime = nullptr,
    const char *totEndTime = nullptr,
    const char *actionActorSrcType = nullptr,
    const char *actionActorSrcId = nullptr,
    const char *effector = nullptr,
    const char *targetSrcType = nullptr,
    const char *targetSrcId = nullptr,
    double actorInterceptLat = 0.0,
    double actorInterceptLon = 0.0,
    double actorInterceptAlt = 0.0,
    double weaponInterceptLat = 0.0,
    double weaponInterceptLon = 0.0,
    double weaponInterceptAlt = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *actionMetrics = nullptr) {
  auto summary__ = summary ? _fbb.CreateString(summary) : 0;
  auto actionId__ = actionId ? _fbb.CreateString(actionId) : 0;
  auto actionStartTime__ = actionStartTime ? _fbb.CreateString(actionStartTime) : 0;
  auto actionEndTime__ = actionEndTime ? _fbb.CreateString(actionEndTime) : 0;
  auto totStartTime__ = totStartTime ? _fbb.CreateString(totStartTime) : 0;
  auto totEndTime__ = totEndTime ? _fbb.CreateString(totEndTime) : 0;
  auto actionActorSrcType__ = actionActorSrcType ? _fbb.CreateString(actionActorSrcType) : 0;
  auto actionActorSrcId__ = actionActorSrcId ? _fbb.CreateString(actionActorSrcId) : 0;
  auto effector__ = effector ? _fbb.CreateString(effector) : 0;
  auto targetSrcType__ = targetSrcType ? _fbb.CreateString(targetSrcType) : 0;
  auto targetSrcId__ = targetSrcId ? _fbb.CreateString(targetSrcId) : 0;
  auto actionMetrics__ = actionMetrics ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*actionMetrics) : 0;
  return CreateEffectResponseActionsList_Abridged(
      _fbb,
      summary__,
      actionId__,
      actionStartTime__,
      actionEndTime__,
      totStartTime__,
      totEndTime__,
      actionActorSrcType__,
      actionActorSrcId__,
      effector__,
      targetSrcType__,
      targetSrcId__,
      actorInterceptLat,
      actorInterceptLon,
      actorInterceptAlt,
      weaponInterceptLat,
      weaponInterceptLon,
      weaponInterceptAlt,
      actionMetrics__);
}

inline const EffectResponseActionsList_Abridged *GetEffectResponseActionsList_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<EffectResponseActionsList_Abridged>(buf);
}

inline const EffectResponseActionsList_Abridged *GetSizePrefixedEffectResponseActionsList_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EffectResponseActionsList_Abridged>(buf);
}

inline const char *EffectResponseActionsList_AbridgedIdentifier() {
  return "EFFE";
}

inline bool EffectResponseActionsList_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectResponseActionsList_AbridgedIdentifier());
}

inline bool SizePrefixedEffectResponseActionsList_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EffectResponseActionsList_AbridgedIdentifier(), true);
}

inline bool VerifyEffectResponseActionsList_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EffectResponseActionsList_Abridged>(EffectResponseActionsList_AbridgedIdentifier());
}

inline bool VerifySizePrefixedEffectResponseActionsList_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EffectResponseActionsList_Abridged>(EffectResponseActionsList_AbridgedIdentifier());
}

inline void FinishEffectResponseActionsList_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectResponseActionsList_Abridged> root) {
  fbb.Finish(root, EffectResponseActionsList_AbridgedIdentifier());
}

inline void FinishSizePrefixedEffectResponseActionsList_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EffectResponseActionsList_Abridged> root) {
  fbb.FinishSizePrefixed(root, EffectResponseActionsList_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
