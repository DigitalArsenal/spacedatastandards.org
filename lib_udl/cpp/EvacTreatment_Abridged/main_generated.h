// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacTreatment_Abridged;
struct EvacTreatment_AbridgedBuilder;

/// /// Treatment information.
struct EvacTreatment_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacTreatment_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BODYPART = 6,
    VT_TIME = 8,
    VT_COMMENTS = 10
  };
  /// Type of treatment administered or to be administered.  Intended as, but not constrained to, K07.1 Treatment Type Enumeration (e.g. AIRWAY ADJUNCT, AIRWAY ASSISTED VENTILATION, AIRWAY COMBI TUBE USED, AIRWAY ET NT, AIRWAY INTUBATED, AIRWAY NPA OPA APPLIED, AIRWAY PATIENT, AIRWAY POSITIONAL, AIRWAY SURGICAL CRIC, BREATHING CHEST SEAL, BREATHING CHEST TUBE, etc.).
  /// Example: /// Example: BREATHING CHEST TUBE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Body part location or body part treated or to be treated.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  /// Example: /// Example: CHEST
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *bodyPart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODYPART);
  }
  /// Datetime of the treatment in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  /// Additional comments on the patient's treatment information.
  /// Example: /// Example: Comments on the treatment info.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *comments() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_BODYPART) &&
           verifier.VerifyString(bodyPart()) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyOffset(verifier, VT_COMMENTS) &&
           verifier.VerifyString(comments()) &&
           verifier.EndTable();
  }
};

struct EvacTreatment_AbridgedBuilder {
  typedef EvacTreatment_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EvacTreatment_Abridged::VT_TYPE, type);
  }
  void add_bodyPart(::flatbuffers::Offset<::flatbuffers::String> bodyPart) {
    fbb_.AddOffset(EvacTreatment_Abridged::VT_BODYPART, bodyPart);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(EvacTreatment_Abridged::VT_TIME, time);
  }
  void add_comments(::flatbuffers::Offset<::flatbuffers::String> comments) {
    fbb_.AddOffset(EvacTreatment_Abridged::VT_COMMENTS, comments);
  }
  explicit EvacTreatment_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacTreatment_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacTreatment_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacTreatment_Abridged> CreateEvacTreatment_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bodyPart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> comments = 0) {
  EvacTreatment_AbridgedBuilder builder_(_fbb);
  builder_.add_comments(comments);
  builder_.add_time(time);
  builder_.add_bodyPart(bodyPart);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacTreatment_Abridged> CreateEvacTreatment_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *bodyPart = nullptr,
    const char *time = nullptr,
    const char *comments = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto bodyPart__ = bodyPart ? _fbb.CreateString(bodyPart) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto comments__ = comments ? _fbb.CreateString(comments) : 0;
  return CreateEvacTreatment_Abridged(
      _fbb,
      type__,
      bodyPart__,
      time__,
      comments__);
}

inline const EvacTreatment_Abridged *GetEvacTreatment_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<EvacTreatment_Abridged>(buf);
}

inline const EvacTreatment_Abridged *GetSizePrefixedEvacTreatment_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacTreatment_Abridged>(buf);
}

inline const char *EvacTreatment_AbridgedIdentifier() {
  return "EVAC";
}

inline bool EvacTreatment_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacTreatment_AbridgedIdentifier());
}

inline bool SizePrefixedEvacTreatment_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacTreatment_AbridgedIdentifier(), true);
}

inline bool VerifyEvacTreatment_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacTreatment_Abridged>(EvacTreatment_AbridgedIdentifier());
}

inline bool VerifySizePrefixedEvacTreatment_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacTreatment_Abridged>(EvacTreatment_AbridgedIdentifier());
}

inline void FinishEvacTreatment_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacTreatment_Abridged> root) {
  fbb.Finish(root, EvacTreatment_AbridgedIdentifier());
}

inline void FinishSizePrefixedEvacTreatment_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacTreatment_Abridged> root) {
  fbb.FinishSizePrefixed(root, EvacTreatment_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
