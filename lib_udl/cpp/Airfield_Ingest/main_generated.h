// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Airfield_Ingest;
struct Airfield_IngestBuilder;

enum Airfield_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Airfield_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Airfield_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Airfield_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Airfield_Ingest_dataMode_Enum_EXERCISE = 3,
  Airfield_Ingest_dataMode_Enum_MIN = Airfield_Ingest_dataMode_Enum_REAL,
  Airfield_Ingest_dataMode_Enum_MAX = Airfield_Ingest_dataMode_Enum_EXERCISE
};

inline const Airfield_Ingest_dataMode_Enum (&EnumValuesAirfield_Ingest_dataMode_Enum())[4] {
  static const Airfield_Ingest_dataMode_Enum values[] = {
    Airfield_Ingest_dataMode_Enum_REAL,
    Airfield_Ingest_dataMode_Enum_TEST,
    Airfield_Ingest_dataMode_Enum_SIMULATED,
    Airfield_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAirfield_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAirfield_Ingest_dataMode_Enum(Airfield_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Airfield_Ingest_dataMode_Enum_REAL, Airfield_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAirfield_Ingest_dataMode_Enum()[index];
}

/// /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
struct Airfield_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Airfield_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDSITE = 8,
    VT_ALTAIRFIELDID = 10,
    VT_WACINNR = 12,
    VT_ZARID = 14,
    VT_ICAO = 16,
    VT_IATA = 18,
    VT_FAA = 20,
    VT_HOSTNATCODE = 22,
    VT_NAME = 24,
    VT_TYPE = 26,
    VT_LAT = 28,
    VT_LON = 30,
    VT_ELEVFT = 32,
    VT_ELEVM = 34,
    VT_MAGDEC = 36,
    VT_REGIONNAME = 38,
    VT_COUNTRYCODE = 40,
    VT_CITY = 42,
    VT_STATE = 44,
    VT_GEOLOC = 46,
    VT_GMTOFFSET = 48,
    VT_SUITABILITYCODES = 50,
    VT_MISCCODES = 52,
    VT_RUNWAYS = 54,
    VT_MAXRUNWAYLENGTH = 56,
    VT_INFOURL = 58,
    VT_CREATEDAT = 60,
    VT_CREATEDBY = 62,
    VT_SOURCEDL = 64,
    VT_SOURCE = 66,
    VT_ORIGIN = 68,
    VT_ORIGNETWORK = 70,
    VT_DATAMODE = 72
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The ID of the parent site.
  /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSite() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSITE);
  }
  /// Alternate Airfield identifier provided by source.
  /// Example: /// Example: 45301
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *altAirfieldId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTAIRFIELDID);
  }
  /// The airfield's World Area Code installation number (WAC-INNR).
  /// Example: /// Example: 0409-00039
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *wacINNR() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WACINNR);
  }
  /// Air Mobility Command (AMC) Zone availability Report identifier.
  /// Example: /// Example: 231
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *zarId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ZARID);
  }
  /// The International Civil Aviation Organization (ICAO) code of the airfield.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *icao() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ICAO);
  }
  /// The International Aviation Transport Association (IATA) code of the airfield.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  const ::flatbuffers::String *iata() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IATA);
  }
  /// The Federal Aviation Administration (FAA) location identifier of this airfield.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  const ::flatbuffers::String *faa() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAA);
  }
  /// The host nation code of this airfield, used for non-DoD/FAA locations.
  /// Example: /// Example: ZPU
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *hostNatCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOSTNATCODE);
  }
  /// The name of the airfield.
  /// Example: /// Example: USAF Academy AFLD
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
  /// Example: /// Example: Commercial
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Elevation of the airfield above mean sea level, in feet.
  /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 33.562
  /// Constraints: No constraints specified.
  double elevFt() const {
    return GetField<double>(VT_ELEVFT, 0.0);
  }
  /// Elevation of the airfield above mean sea level, in meters.
  /// Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 10.29
  /// Constraints: No constraints specified.
  double elevM() const {
    return GetField<double>(VT_ELEVM, 0.0);
  }
  /// The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
  /// Example: /// Example: 7.35
  /// Constraints: No constraints specified.
  double magDec() const {
    return GetField<double>(VT_MAGDEC, 0.0);
  }
  /// Region where the airfield resides.
  /// Example: /// Example: North America
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *regionName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REGIONNAME);
  }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// Closest city to the airfield's location.
  /// Example: /// Example: Colorado Springs
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *city() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CITY);
  }
  /// State or province of the airfield's location.
  /// Example: /// Example: Colorado
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *state() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATE);
  }
  /// Air Force geographic location code of the airfield.
  /// Example: /// Example: XLSX
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *geoloc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GEOLOC);
  }
  /// Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
  /// Example: /// Example: -4:30
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *gmtOffset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GMTOFFSET);
  }
  /// Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
  /// Example: /// Example: ABCDEF
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *suitabilityCodes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SUITABILITYCODES);
  }
  /// Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
  /// Example: /// Example: AMZ
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *miscCodes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISCCODES);
  }
  /// The number of runways at the site.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t runways() const {
    return GetField<int32_t>(VT_RUNWAYS, 0);
  }
  /// The length of the longest runway at this airfield in feet.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  int32_t maxRunwayLength() const {
    return GetField<int32_t>(VT_MAXRUNWAYLENGTH, 0);
  }
  /// The URL link to information about airfield.
  /// Example: /// Example: URL Link to the Airfield
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *infoURL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INFOURL);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Airfield_Ingest_dataMode_Enum dataMode() const {
    return static_cast<Airfield_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDSITE) &&
           verifier.VerifyString(idSite()) &&
           VerifyOffset(verifier, VT_ALTAIRFIELDID) &&
           verifier.VerifyString(altAirfieldId()) &&
           VerifyOffset(verifier, VT_WACINNR) &&
           verifier.VerifyString(wacINNR()) &&
           VerifyOffset(verifier, VT_ZARID) &&
           verifier.VerifyString(zarId()) &&
           VerifyOffset(verifier, VT_ICAO) &&
           verifier.VerifyString(icao()) &&
           VerifyOffset(verifier, VT_IATA) &&
           verifier.VerifyString(iata()) &&
           VerifyOffset(verifier, VT_FAA) &&
           verifier.VerifyString(faa()) &&
           VerifyOffset(verifier, VT_HOSTNATCODE) &&
           verifier.VerifyString(hostNatCode()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ELEVFT, 8) &&
           VerifyField<double>(verifier, VT_ELEVM, 8) &&
           VerifyField<double>(verifier, VT_MAGDEC, 8) &&
           VerifyOffset(verifier, VT_REGIONNAME) &&
           verifier.VerifyString(regionName()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_CITY) &&
           verifier.VerifyString(city()) &&
           VerifyOffset(verifier, VT_STATE) &&
           verifier.VerifyString(state()) &&
           VerifyOffset(verifier, VT_GEOLOC) &&
           verifier.VerifyString(geoloc()) &&
           VerifyOffset(verifier, VT_GMTOFFSET) &&
           verifier.VerifyString(gmtOffset()) &&
           VerifyOffset(verifier, VT_SUITABILITYCODES) &&
           verifier.VerifyString(suitabilityCodes()) &&
           VerifyOffset(verifier, VT_MISCCODES) &&
           verifier.VerifyString(miscCodes()) &&
           VerifyField<int32_t>(verifier, VT_RUNWAYS, 4) &&
           VerifyField<int32_t>(verifier, VT_MAXRUNWAYLENGTH, 4) &&
           VerifyOffset(verifier, VT_INFOURL) &&
           verifier.VerifyString(infoURL()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct Airfield_IngestBuilder {
  typedef Airfield_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Airfield_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Airfield_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idSite(::flatbuffers::Offset<::flatbuffers::String> idSite) {
    fbb_.AddOffset(Airfield_Ingest::VT_IDSITE, idSite);
  }
  void add_altAirfieldId(::flatbuffers::Offset<::flatbuffers::String> altAirfieldId) {
    fbb_.AddOffset(Airfield_Ingest::VT_ALTAIRFIELDID, altAirfieldId);
  }
  void add_wacINNR(::flatbuffers::Offset<::flatbuffers::String> wacINNR) {
    fbb_.AddOffset(Airfield_Ingest::VT_WACINNR, wacINNR);
  }
  void add_zarId(::flatbuffers::Offset<::flatbuffers::String> zarId) {
    fbb_.AddOffset(Airfield_Ingest::VT_ZARID, zarId);
  }
  void add_icao(::flatbuffers::Offset<::flatbuffers::String> icao) {
    fbb_.AddOffset(Airfield_Ingest::VT_ICAO, icao);
  }
  void add_iata(::flatbuffers::Offset<::flatbuffers::String> iata) {
    fbb_.AddOffset(Airfield_Ingest::VT_IATA, iata);
  }
  void add_faa(::flatbuffers::Offset<::flatbuffers::String> faa) {
    fbb_.AddOffset(Airfield_Ingest::VT_FAA, faa);
  }
  void add_hostNatCode(::flatbuffers::Offset<::flatbuffers::String> hostNatCode) {
    fbb_.AddOffset(Airfield_Ingest::VT_HOSTNATCODE, hostNatCode);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Airfield_Ingest::VT_NAME, name);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Airfield_Ingest::VT_TYPE, type);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(Airfield_Ingest::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(Airfield_Ingest::VT_LON, lon, 0.0);
  }
  void add_elevFt(double elevFt) {
    fbb_.AddElement<double>(Airfield_Ingest::VT_ELEVFT, elevFt, 0.0);
  }
  void add_elevM(double elevM) {
    fbb_.AddElement<double>(Airfield_Ingest::VT_ELEVM, elevM, 0.0);
  }
  void add_magDec(double magDec) {
    fbb_.AddElement<double>(Airfield_Ingest::VT_MAGDEC, magDec, 0.0);
  }
  void add_regionName(::flatbuffers::Offset<::flatbuffers::String> regionName) {
    fbb_.AddOffset(Airfield_Ingest::VT_REGIONNAME, regionName);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(Airfield_Ingest::VT_COUNTRYCODE, countryCode);
  }
  void add_city(::flatbuffers::Offset<::flatbuffers::String> city) {
    fbb_.AddOffset(Airfield_Ingest::VT_CITY, city);
  }
  void add_state(::flatbuffers::Offset<::flatbuffers::String> state) {
    fbb_.AddOffset(Airfield_Ingest::VT_STATE, state);
  }
  void add_geoloc(::flatbuffers::Offset<::flatbuffers::String> geoloc) {
    fbb_.AddOffset(Airfield_Ingest::VT_GEOLOC, geoloc);
  }
  void add_gmtOffset(::flatbuffers::Offset<::flatbuffers::String> gmtOffset) {
    fbb_.AddOffset(Airfield_Ingest::VT_GMTOFFSET, gmtOffset);
  }
  void add_suitabilityCodes(::flatbuffers::Offset<::flatbuffers::String> suitabilityCodes) {
    fbb_.AddOffset(Airfield_Ingest::VT_SUITABILITYCODES, suitabilityCodes);
  }
  void add_miscCodes(::flatbuffers::Offset<::flatbuffers::String> miscCodes) {
    fbb_.AddOffset(Airfield_Ingest::VT_MISCCODES, miscCodes);
  }
  void add_runways(int32_t runways) {
    fbb_.AddElement<int32_t>(Airfield_Ingest::VT_RUNWAYS, runways, 0);
  }
  void add_maxRunwayLength(int32_t maxRunwayLength) {
    fbb_.AddElement<int32_t>(Airfield_Ingest::VT_MAXRUNWAYLENGTH, maxRunwayLength, 0);
  }
  void add_infoURL(::flatbuffers::Offset<::flatbuffers::String> infoURL) {
    fbb_.AddOffset(Airfield_Ingest::VT_INFOURL, infoURL);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Airfield_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Airfield_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(Airfield_Ingest::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Airfield_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Airfield_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Airfield_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Airfield_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Airfield_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit Airfield_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Airfield_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Airfield_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Airfield_Ingest> CreateAirfield_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSite = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altAirfieldId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wacINNR = 0,
    ::flatbuffers::Offset<::flatbuffers::String> zarId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> icao = 0,
    ::flatbuffers::Offset<::flatbuffers::String> iata = 0,
    ::flatbuffers::Offset<::flatbuffers::String> faa = 0,
    ::flatbuffers::Offset<::flatbuffers::String> hostNatCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    double lat = 0.0,
    double lon = 0.0,
    double elevFt = 0.0,
    double elevM = 0.0,
    double magDec = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> regionName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> city = 0,
    ::flatbuffers::Offset<::flatbuffers::String> state = 0,
    ::flatbuffers::Offset<::flatbuffers::String> geoloc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> gmtOffset = 0,
    ::flatbuffers::Offset<::flatbuffers::String> suitabilityCodes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> miscCodes = 0,
    int32_t runways = 0,
    int32_t maxRunwayLength = 0,
    ::flatbuffers::Offset<::flatbuffers::String> infoURL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Airfield_Ingest_dataMode_Enum dataMode = Airfield_Ingest_dataMode_Enum_REAL) {
  Airfield_IngestBuilder builder_(_fbb);
  builder_.add_magDec(magDec);
  builder_.add_elevM(elevM);
  builder_.add_elevFt(elevFt);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_infoURL(infoURL);
  builder_.add_maxRunwayLength(maxRunwayLength);
  builder_.add_runways(runways);
  builder_.add_miscCodes(miscCodes);
  builder_.add_suitabilityCodes(suitabilityCodes);
  builder_.add_gmtOffset(gmtOffset);
  builder_.add_geoloc(geoloc);
  builder_.add_state(state);
  builder_.add_city(city);
  builder_.add_countryCode(countryCode);
  builder_.add_regionName(regionName);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_hostNatCode(hostNatCode);
  builder_.add_faa(faa);
  builder_.add_iata(iata);
  builder_.add_icao(icao);
  builder_.add_zarId(zarId);
  builder_.add_wacINNR(wacINNR);
  builder_.add_altAirfieldId(altAirfieldId);
  builder_.add_idSite(idSite);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Airfield_Ingest> CreateAirfield_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idSite = nullptr,
    const char *altAirfieldId = nullptr,
    const char *wacINNR = nullptr,
    const char *zarId = nullptr,
    const char *icao = nullptr,
    const char *iata = nullptr,
    const char *faa = nullptr,
    const char *hostNatCode = nullptr,
    const char *name = nullptr,
    const char *type = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    double elevFt = 0.0,
    double elevM = 0.0,
    double magDec = 0.0,
    const char *regionName = nullptr,
    const char *countryCode = nullptr,
    const char *city = nullptr,
    const char *state = nullptr,
    const char *geoloc = nullptr,
    const char *gmtOffset = nullptr,
    const char *suitabilityCodes = nullptr,
    const char *miscCodes = nullptr,
    int32_t runways = 0,
    int32_t maxRunwayLength = 0,
    const char *infoURL = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Airfield_Ingest_dataMode_Enum dataMode = Airfield_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idSite__ = idSite ? _fbb.CreateString(idSite) : 0;
  auto altAirfieldId__ = altAirfieldId ? _fbb.CreateString(altAirfieldId) : 0;
  auto wacINNR__ = wacINNR ? _fbb.CreateString(wacINNR) : 0;
  auto zarId__ = zarId ? _fbb.CreateString(zarId) : 0;
  auto icao__ = icao ? _fbb.CreateString(icao) : 0;
  auto iata__ = iata ? _fbb.CreateString(iata) : 0;
  auto faa__ = faa ? _fbb.CreateString(faa) : 0;
  auto hostNatCode__ = hostNatCode ? _fbb.CreateString(hostNatCode) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto regionName__ = regionName ? _fbb.CreateString(regionName) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto city__ = city ? _fbb.CreateString(city) : 0;
  auto state__ = state ? _fbb.CreateString(state) : 0;
  auto geoloc__ = geoloc ? _fbb.CreateString(geoloc) : 0;
  auto gmtOffset__ = gmtOffset ? _fbb.CreateString(gmtOffset) : 0;
  auto suitabilityCodes__ = suitabilityCodes ? _fbb.CreateString(suitabilityCodes) : 0;
  auto miscCodes__ = miscCodes ? _fbb.CreateString(miscCodes) : 0;
  auto infoURL__ = infoURL ? _fbb.CreateString(infoURL) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateAirfield_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      idSite__,
      altAirfieldId__,
      wacINNR__,
      zarId__,
      icao__,
      iata__,
      faa__,
      hostNatCode__,
      name__,
      type__,
      lat,
      lon,
      elevFt,
      elevM,
      magDec,
      regionName__,
      countryCode__,
      city__,
      state__,
      geoloc__,
      gmtOffset__,
      suitabilityCodes__,
      miscCodes__,
      runways,
      maxRunwayLength,
      infoURL__,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const Airfield_Ingest *GetAirfield_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<Airfield_Ingest>(buf);
}

inline const Airfield_Ingest *GetSizePrefixedAirfield_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Airfield_Ingest>(buf);
}

inline const char *Airfield_IngestIdentifier() {
  return "AIRF";
}

inline bool Airfield_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Airfield_IngestIdentifier());
}

inline bool SizePrefixedAirfield_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Airfield_IngestIdentifier(), true);
}

inline bool VerifyAirfield_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Airfield_Ingest>(Airfield_IngestIdentifier());
}

inline bool VerifySizePrefixedAirfield_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Airfield_Ingest>(Airfield_IngestIdentifier());
}

inline void FinishAirfield_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Airfield_Ingest> root) {
  fbb.Finish(root, Airfield_IngestIdentifier());
}

inline void FinishSizePrefixedAirfield_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Airfield_Ingest> root) {
  fbb.FinishSizePrefixed(root, Airfield_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
