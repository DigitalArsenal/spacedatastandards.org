// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct AntennaDetails;
struct AntennaDetailsBuilder;

enum AntennaDetails_mode_Enum : int8_t {
  /// No description available.
  AntennaDetails_mode_Enum_TX = 0,
  /// No description available.
  AntennaDetails_mode_Enum_RX = 1,
  AntennaDetails_mode_Enum_MIN = AntennaDetails_mode_Enum_TX,
  AntennaDetails_mode_Enum_MAX = AntennaDetails_mode_Enum_RX
};

inline const AntennaDetails_mode_Enum (&EnumValuesAntennaDetails_mode_Enum())[2] {
  static const AntennaDetails_mode_Enum values[] = {
    AntennaDetails_mode_Enum_TX,
    AntennaDetails_mode_Enum_RX
  };
  return values;
}

inline const char * const *EnumNamesAntennaDetails_mode_Enum() {
  static const char * const names[3] = {
    "TX",
    "RX",
    nullptr
  };
  return names;
}

inline const char *EnumNameAntennaDetails_mode_Enum(AntennaDetails_mode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AntennaDetails_mode_Enum_TX, AntennaDetails_mode_Enum_RX)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAntennaDetails_mode_Enum()[index];
}

enum AntennaDetails_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  AntennaDetails_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  AntennaDetails_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  AntennaDetails_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  AntennaDetails_dataMode_Enum_EXERCISE = 3,
  AntennaDetails_dataMode_Enum_MIN = AntennaDetails_dataMode_Enum_REAL,
  AntennaDetails_dataMode_Enum_MAX = AntennaDetails_dataMode_Enum_EXERCISE
};

inline const AntennaDetails_dataMode_Enum (&EnumValuesAntennaDetails_dataMode_Enum())[4] {
  static const AntennaDetails_dataMode_Enum values[] = {
    AntennaDetails_dataMode_Enum_REAL,
    AntennaDetails_dataMode_Enum_TEST,
    AntennaDetails_dataMode_Enum_SIMULATED,
    AntennaDetails_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesAntennaDetails_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameAntennaDetails_dataMode_Enum(AntennaDetails_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, AntennaDetails_dataMode_Enum_REAL, AntennaDetails_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesAntennaDetails_dataMode_Enum()[index];
}

/// /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
struct AntennaDetails FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AntennaDetailsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDANTENNA = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_TYPE = 10,
    VT_POSITION = 12,
    VT_MODE = 14,
    VT_STEERABLE = 16,
    VT_BEAMFORMING = 18,
    VT_MANUFACTURERORGID = 20,
    VT_DIAMETER = 22,
    VT_SIZE = 24,
    VT_STARTFREQUENCY = 26,
    VT_ENDFREQUENCY = 28,
    VT_BEAMWIDTH = 30,
    VT_GAIN = 32,
    VT_GAINTOLERANCE = 34,
    VT_POLARIZATION = 36,
    VT_DESCRIPTION = 38,
    VT_CREATEDAT = 40,
    VT_CREATEDBY = 42,
    VT_UPDATEDAT = 44,
    VT_UPDATEDBY = 46,
    VT_SOURCE = 48,
    VT_ORIGIN = 50,
    VT_ORIGNETWORK = 52,
    VT_DATAMODE = 54,
    VT_TAGS = 56,
    VT_MANUFACTURERORG = 58
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ANTENNADETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Unique identifier of the parent Antenna.
  /// Example: /// Example: ANTENNA-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idAntenna() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDANTENNA);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
  /// Example: /// Example: Reflector
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Antenna position (e.g. Top, Nadir, Side).
  /// Example: /// Example: Top
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *position() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POSITION);
  }
  /// Antenna mode (e.g. TX,RX).
  /// Example: /// Example: TX
  /// Constraints: Minimum length = 0, Maximum length = 4
  AntennaDetails_mode_Enum mode() const {
    return static_cast<AntennaDetails_mode_Enum>(GetField<int8_t>(VT_MODE, 0));
  }
  /// Boolean indicating if this antenna is steerable.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool steerable() const {
    return GetField<uint8_t>(VT_STEERABLE, 0) != 0;
  }
  /// Boolean indicating if this is a beam forming antenna.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool beamForming() const {
    return GetField<uint8_t>(VT_BEAMFORMING, 0) != 0;
  }
  /// ID of the organization that manufactures the antenna.
  /// Example: /// Example: MANUFACTUREORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Antenna diameter in meters.
  /// Example: /// Example: 0.01
  /// Constraints: No constraints specified.
  double diameter() const {
    return GetField<double>(VT_DIAMETER, 0.0);
  }
  /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  /// Example: /// Example: [0.03, 0.05]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *size() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SIZE);
  }
  /// Antenna start of frequency range in Mhz.
  /// Example: /// Example: 2.1
  /// Constraints: No constraints specified.
  double startFrequency() const {
    return GetField<double>(VT_STARTFREQUENCY, 0.0);
  }
  /// Antenna end of frequency range in Mhz.
  /// Example: /// Example: 3.3
  /// Constraints: No constraints specified.
  double endFrequency() const {
    return GetField<double>(VT_ENDFREQUENCY, 0.0);
  }
  /// Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
  /// Example: /// Example: 14.1
  /// Constraints: No constraints specified.
  double beamwidth() const {
    return GetField<double>(VT_BEAMWIDTH, 0.0);
  }
  /// Antenna maximum gain in dBi.
  /// Example: /// Example: 20.1
  /// Constraints: No constraints specified.
  double gain() const {
    return GetField<double>(VT_GAIN, 0.0);
  }
  /// Antenna gain tolerance in dB.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  double gainTolerance() const {
    return GetField<double>(VT_GAINTOLERANCE, 0.0);
  }
  /// Antenna polarization in degrees.
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  double polarization() const {
    return GetField<double>(VT_POLARIZATION, 0.0);
  }
  /// Antenna description.
  /// Example: /// Example: Description of antenna A
  /// Constraints: Minimum length = 0, Maximum length = 512
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  AntennaDetails_dataMode_Enum dataMode() const {
    return static_cast<AntennaDetails_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *manufacturerOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDANTENNA) &&
           verifier.VerifyString(idAntenna()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyString(position()) &&
           VerifyField<int8_t>(verifier, VT_MODE, 1) &&
           VerifyField<uint8_t>(verifier, VT_STEERABLE, 1) &&
           VerifyField<uint8_t>(verifier, VT_BEAMFORMING, 1) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyField<double>(verifier, VT_DIAMETER, 8) &&
           VerifyOffset(verifier, VT_SIZE) &&
           verifier.VerifyVector(size()) &&
           verifier.VerifyVectorOfStrings(size()) &&
           VerifyField<double>(verifier, VT_STARTFREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_ENDFREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_BEAMWIDTH, 8) &&
           VerifyField<double>(verifier, VT_GAIN, 8) &&
           VerifyField<double>(verifier, VT_GAINTOLERANCE, 8) &&
           VerifyField<double>(verifier, VT_POLARIZATION, 8) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORG) &&
           verifier.VerifyString(manufacturerOrg()) &&
           verifier.EndTable();
  }
};

struct AntennaDetailsBuilder {
  typedef AntennaDetails Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(AntennaDetails::VT_ID, id);
  }
  void add_idAntenna(::flatbuffers::Offset<::flatbuffers::String> idAntenna) {
    fbb_.AddOffset(AntennaDetails::VT_IDANTENNA, idAntenna);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(AntennaDetails::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(AntennaDetails::VT_TYPE, type);
  }
  void add_position(::flatbuffers::Offset<::flatbuffers::String> position) {
    fbb_.AddOffset(AntennaDetails::VT_POSITION, position);
  }
  void add_mode(AntennaDetails_mode_Enum mode) {
    fbb_.AddElement<int8_t>(AntennaDetails::VT_MODE, static_cast<int8_t>(mode), 0);
  }
  void add_steerable(bool steerable) {
    fbb_.AddElement<uint8_t>(AntennaDetails::VT_STEERABLE, static_cast<uint8_t>(steerable), 0);
  }
  void add_beamForming(bool beamForming) {
    fbb_.AddElement<uint8_t>(AntennaDetails::VT_BEAMFORMING, static_cast<uint8_t>(beamForming), 0);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(AntennaDetails::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_diameter(double diameter) {
    fbb_.AddElement<double>(AntennaDetails::VT_DIAMETER, diameter, 0.0);
  }
  void add_size(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> size) {
    fbb_.AddOffset(AntennaDetails::VT_SIZE, size);
  }
  void add_startFrequency(double startFrequency) {
    fbb_.AddElement<double>(AntennaDetails::VT_STARTFREQUENCY, startFrequency, 0.0);
  }
  void add_endFrequency(double endFrequency) {
    fbb_.AddElement<double>(AntennaDetails::VT_ENDFREQUENCY, endFrequency, 0.0);
  }
  void add_beamwidth(double beamwidth) {
    fbb_.AddElement<double>(AntennaDetails::VT_BEAMWIDTH, beamwidth, 0.0);
  }
  void add_gain(double gain) {
    fbb_.AddElement<double>(AntennaDetails::VT_GAIN, gain, 0.0);
  }
  void add_gainTolerance(double gainTolerance) {
    fbb_.AddElement<double>(AntennaDetails::VT_GAINTOLERANCE, gainTolerance, 0.0);
  }
  void add_polarization(double polarization) {
    fbb_.AddElement<double>(AntennaDetails::VT_POLARIZATION, polarization, 0.0);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(AntennaDetails::VT_DESCRIPTION, description);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(AntennaDetails::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(AntennaDetails::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(AntennaDetails::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(AntennaDetails::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(AntennaDetails::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(AntennaDetails::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(AntennaDetails::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(AntennaDetails_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(AntennaDetails::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(AntennaDetails::VT_TAGS, tags);
  }
  void add_manufacturerOrg(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrg) {
    fbb_.AddOffset(AntennaDetails::VT_MANUFACTURERORG, manufacturerOrg);
  }
  explicit AntennaDetailsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AntennaDetails> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AntennaDetails>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<AntennaDetails> CreateAntennaDetails(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAntenna = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> position = 0,
    AntennaDetails_mode_Enum mode = AntennaDetails_mode_Enum_TX,
    bool steerable = false,
    bool beamForming = false,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    double diameter = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> size = 0,
    double startFrequency = 0.0,
    double endFrequency = 0.0,
    double beamwidth = 0.0,
    double gain = 0.0,
    double gainTolerance = 0.0,
    double polarization = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    AntennaDetails_dataMode_Enum dataMode = AntennaDetails_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrg = 0) {
  AntennaDetailsBuilder builder_(_fbb);
  builder_.add_polarization(polarization);
  builder_.add_gainTolerance(gainTolerance);
  builder_.add_gain(gain);
  builder_.add_beamwidth(beamwidth);
  builder_.add_endFrequency(endFrequency);
  builder_.add_startFrequency(startFrequency);
  builder_.add_diameter(diameter);
  builder_.add_manufacturerOrg(manufacturerOrg);
  builder_.add_tags(tags);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_description(description);
  builder_.add_size(size);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_position(position);
  builder_.add_type(type);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idAntenna(idAntenna);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_beamForming(beamForming);
  builder_.add_steerable(steerable);
  builder_.add_mode(mode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AntennaDetails> CreateAntennaDetailsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idAntenna = nullptr,
    const char *classificationMarking = nullptr,
    const char *type = nullptr,
    const char *position = nullptr,
    AntennaDetails_mode_Enum mode = AntennaDetails_mode_Enum_TX,
    bool steerable = false,
    bool beamForming = false,
    const char *manufacturerOrgId = nullptr,
    double diameter = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *size = nullptr,
    double startFrequency = 0.0,
    double endFrequency = 0.0,
    double beamwidth = 0.0,
    double gain = 0.0,
    double gainTolerance = 0.0,
    double polarization = 0.0,
    const char *description = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    AntennaDetails_dataMode_Enum dataMode = AntennaDetails_dataMode_Enum_REAL,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *manufacturerOrg = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idAntenna__ = idAntenna ? _fbb.CreateString(idAntenna) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto position__ = position ? _fbb.CreateString(position) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto size__ = size ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*size) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto manufacturerOrg__ = manufacturerOrg ? _fbb.CreateString(manufacturerOrg) : 0;
  return CreateAntennaDetails(
      _fbb,
      id__,
      idAntenna__,
      classificationMarking__,
      type__,
      position__,
      mode,
      steerable,
      beamForming,
      manufacturerOrgId__,
      diameter,
      size__,
      startFrequency,
      endFrequency,
      beamwidth,
      gain,
      gainTolerance,
      polarization,
      description__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      tags__,
      manufacturerOrg__);
}

inline const AntennaDetails *GetAntennaDetails(const void *buf) {
  return ::flatbuffers::GetRoot<AntennaDetails>(buf);
}

inline const AntennaDetails *GetSizePrefixedAntennaDetails(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<AntennaDetails>(buf);
}

inline const char *AntennaDetailsIdentifier() {
  return "ANTE";
}

inline bool AntennaDetailsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AntennaDetailsIdentifier());
}

inline bool SizePrefixedAntennaDetailsBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, AntennaDetailsIdentifier(), true);
}

inline bool VerifyAntennaDetailsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<AntennaDetails>(AntennaDetailsIdentifier());
}

inline bool VerifySizePrefixedAntennaDetailsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<AntennaDetails>(AntennaDetailsIdentifier());
}

inline void FinishAntennaDetailsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AntennaDetails> root) {
  fbb.Finish(root, AntennaDetailsIdentifier());
}

inline void FinishSizePrefixedAntennaDetailsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<AntennaDetails> root) {
  fbb.FinishSizePrefixed(root, AntennaDetailsIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
