// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct POI_Full;
struct POI_FullBuilder;

enum POI_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  POI_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  POI_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  POI_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  POI_Full_dataMode_Enum_EXERCISE = 3,
  POI_Full_dataMode_Enum_MIN = POI_Full_dataMode_Enum_REAL,
  POI_Full_dataMode_Enum_MAX = POI_Full_dataMode_Enum_EXERCISE
};

inline const POI_Full_dataMode_Enum (&EnumValuesPOI_Full_dataMode_Enum())[4] {
  static const POI_Full_dataMode_Enum values[] = {
    POI_Full_dataMode_Enum_REAL,
    POI_Full_dataMode_Enum_TEST,
    POI_Full_dataMode_Enum_SIMULATED,
    POI_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesPOI_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNamePOI_Full_dataMode_Enum(POI_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, POI_Full_dataMode_Enum_REAL, POI_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPOI_Full_dataMode_Enum()[index];
}

/// /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
struct POI_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef POI_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_PPS = 8,
    VT_MSNID = 10,
    VT_PRI = 12,
    VT_TRKID = 14,
    VT_IDWEATHERREPORT = 16,
    VT_POIID = 18,
    VT_NAME = 20,
    VT_DESC = 22,
    VT_SPEC = 24,
    VT_IDENT = 26,
    VT_ENV = 28,
    VT_PLAT = 30,
    VT_ACTIVITY = 32,
    VT_TS = 34,
    VT_START = 36,
    VT_STALE = 38,
    VT_HOW = 40,
    VT_TYPE = 42,
    VT_LAT = 44,
    VT_LON = 46,
    VT_ALT = 48,
    VT_AZ = 50,
    VT_EL = 52,
    VT_LE = 54,
    VT_CE = 56,
    VT_ELLE = 58,
    VT_CNTCT = 60,
    VT_CONF = 62,
    VT_URLS = 64,
    VT_AREA = 66,
    VT_ATEXT = 68,
    VT_AGJSON = 70,
    VT_ATYPE = 72,
    VT_ANDIMS = 74,
    VT_ASRID = 76,
    VT_CREATEDAT = 78,
    VT_CREATEDBY = 80,
    VT_SOURCEDL = 82,
    VT_SOURCE = 84,
    VT_DATAMODE = 86,
    VT_ORIGIN = 88,
    VT_GROUPS = 90,
    VT_ASSET = 92,
    VT_TAGS = 94,
    VT_SRCTYPS = 96,
    VT_SRCIDS = 98,
    VT_BENUMBER = 100,
    VT_ORIENTATION = 102,
    VT_ORIGNETWORK = 104,
    VT_TRANSACTIONID = 106
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
  /// Example: /// Example: BDA
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *pps() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PPS);
  }
  /// Optional mission ID related to the POI.
  /// Example: /// Example: MSN-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *msnid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSNID);
  }
  /// Priority of the  POI target object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  int32_t pri() const {
    return GetField<int32_t>(VT_PRI, 0);
  }
  /// Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
  /// Example: /// Example: TRK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *trkid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRKID);
  }
  /// Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
  /// Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *idWeatherReport() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_IDWEATHERREPORT);
  }
  /// Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *poiid() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POIID);
  }
  /// Name of the POI target object.
  /// Example: /// Example: POI_NAME
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Description of the POI target object.
  /// Example: /// Example: Description of the object
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *desc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESC);
  }
  /// Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
  /// Example: /// Example: LIGHT_TANK
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *spec() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SPEC);
  }
  /// Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *ident() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENT);
  }
  /// POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
  /// Example: /// Example: SURFACE
  /// Constraints: Minimum length = 0, Maximum length = 24
  const ::flatbuffers::String *env() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENV);
  }
  /// POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
  /// Example: /// Example: COMBAT_VEHICLE
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *plat() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLAT);
  }
  /// The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
  /// Example: /// Example: TRAINING
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *activity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTIVITY);
  }
  /// Activity/POI timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// Start time of event validity (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *start() const {
    return GetPointer<const ::flatbuffers::String *>(VT_START);
  }
  /// Stale timestamp (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *stale() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STALE);
  }
  /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: h-g-i-g-o
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *how() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HOW);
  }
  /// Event type, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: a-h-G
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// Point height above ellipsoid (WGS-84), in meters.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double alt() const {
    return GetField<double>(VT_ALT, 0.0);
  }
  /// Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double az() const {
    return GetField<double>(VT_AZ, 0.0);
  }
  /// Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double el() const {
    return GetField<double>(VT_EL, 0.0);
  }
  /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double le() const {
    return GetField<double>(VT_LE, 0.0);
  }
  /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double ce() const {
    return GetField<double>(VT_CE, 0.0);
  }
  /// Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
  /// Example: /// Example: [125.5, 85.1, 125.75]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *elle() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ELLE);
  }
  /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  /// Example: /// Example: Contact Info
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *cntct() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CNTCT);
  }
  /// POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double conf() const {
    return GetField<double>(VT_CONF, 0.0);
  }
  /// List of URLs to before/after images of this Point of Interest entity.
  /// Example: /// Example: ['URL1', 'URL2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *urls() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_URLS);
  }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *area() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AREA);
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *atext() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATEXT);
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *agjson() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AGJSON);
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *atype() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATYPE);
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t andims() const {
    return GetField<int32_t>(VT_ANDIMS, 0);
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t asrid() const {
    return GetField<int32_t>(VT_ASRID, 0);
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  POI_Full_dataMode_Enum dataMode() const {
    return static_cast<POI_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
  /// Example: /// Example: ['GROUP1', 'GROUP2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *groups() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_GROUPS);
  }
  /// ID/name of the platform or entity providing the POI data.
  /// Example: /// Example: PLATFORM_NAME
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *asset() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASSET);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['TYPE1', 'TYPE2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCTYPS);
  }
  /// Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['ID1', 'ID2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SRCIDS);
  }
  /// The Basic Encyclopedia Number associated with the POI, if applicable.
  /// Example: /// Example: 0427RT1030
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *beNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BENUMBER);
  }
  /// The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double orientation() const {
    return GetField<double>(VT_ORIENTATION, 0.0);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_PPS) &&
           verifier.VerifyString(pps()) &&
           VerifyOffset(verifier, VT_MSNID) &&
           verifier.VerifyString(msnid()) &&
           VerifyField<int32_t>(verifier, VT_PRI, 4) &&
           VerifyOffset(verifier, VT_TRKID) &&
           verifier.VerifyString(trkid()) &&
           VerifyOffset(verifier, VT_IDWEATHERREPORT) &&
           verifier.VerifyVector(idWeatherReport()) &&
           verifier.VerifyVectorOfStrings(idWeatherReport()) &&
           VerifyOffset(verifier, VT_POIID) &&
           verifier.VerifyString(poiid()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DESC) &&
           verifier.VerifyString(desc()) &&
           VerifyOffset(verifier, VT_SPEC) &&
           verifier.VerifyString(spec()) &&
           VerifyOffset(verifier, VT_IDENT) &&
           verifier.VerifyString(ident()) &&
           VerifyOffset(verifier, VT_ENV) &&
           verifier.VerifyString(env()) &&
           VerifyOffset(verifier, VT_PLAT) &&
           verifier.VerifyString(plat()) &&
           VerifyOffset(verifier, VT_ACTIVITY) &&
           verifier.VerifyString(activity()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyOffset(verifier, VT_START) &&
           verifier.VerifyString(start()) &&
           VerifyOffset(verifier, VT_STALE) &&
           verifier.VerifyString(stale()) &&
           VerifyOffset(verifier, VT_HOW) &&
           verifier.VerifyString(how()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ALT, 8) &&
           VerifyField<double>(verifier, VT_AZ, 8) &&
           VerifyField<double>(verifier, VT_EL, 8) &&
           VerifyField<double>(verifier, VT_LE, 8) &&
           VerifyField<double>(verifier, VT_CE, 8) &&
           VerifyOffset(verifier, VT_ELLE) &&
           verifier.VerifyVector(elle()) &&
           verifier.VerifyVectorOfStrings(elle()) &&
           VerifyOffset(verifier, VT_CNTCT) &&
           verifier.VerifyString(cntct()) &&
           VerifyField<double>(verifier, VT_CONF, 8) &&
           VerifyOffset(verifier, VT_URLS) &&
           verifier.VerifyVector(urls()) &&
           verifier.VerifyVectorOfStrings(urls()) &&
           VerifyOffset(verifier, VT_AREA) &&
           verifier.VerifyString(area()) &&
           VerifyOffset(verifier, VT_ATEXT) &&
           verifier.VerifyString(atext()) &&
           VerifyOffset(verifier, VT_AGJSON) &&
           verifier.VerifyString(agjson()) &&
           VerifyOffset(verifier, VT_ATYPE) &&
           verifier.VerifyString(atype()) &&
           VerifyField<int32_t>(verifier, VT_ANDIMS, 4) &&
           VerifyField<int32_t>(verifier, VT_ASRID, 4) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_GROUPS) &&
           verifier.VerifyVector(groups()) &&
           verifier.VerifyVectorOfStrings(groups()) &&
           VerifyOffset(verifier, VT_ASSET) &&
           verifier.VerifyString(asset()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_SRCTYPS) &&
           verifier.VerifyVector(srcTyps()) &&
           verifier.VerifyVectorOfStrings(srcTyps()) &&
           VerifyOffset(verifier, VT_SRCIDS) &&
           verifier.VerifyVector(srcIds()) &&
           verifier.VerifyVectorOfStrings(srcIds()) &&
           VerifyOffset(verifier, VT_BENUMBER) &&
           verifier.VerifyString(beNumber()) &&
           VerifyField<double>(verifier, VT_ORIENTATION, 8) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           verifier.EndTable();
  }
};

struct POI_FullBuilder {
  typedef POI_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(POI_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(POI_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_pps(::flatbuffers::Offset<::flatbuffers::String> pps) {
    fbb_.AddOffset(POI_Full::VT_PPS, pps);
  }
  void add_msnid(::flatbuffers::Offset<::flatbuffers::String> msnid) {
    fbb_.AddOffset(POI_Full::VT_MSNID, msnid);
  }
  void add_pri(int32_t pri) {
    fbb_.AddElement<int32_t>(POI_Full::VT_PRI, pri, 0);
  }
  void add_trkid(::flatbuffers::Offset<::flatbuffers::String> trkid) {
    fbb_.AddOffset(POI_Full::VT_TRKID, trkid);
  }
  void add_idWeatherReport(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> idWeatherReport) {
    fbb_.AddOffset(POI_Full::VT_IDWEATHERREPORT, idWeatherReport);
  }
  void add_poiid(::flatbuffers::Offset<::flatbuffers::String> poiid) {
    fbb_.AddOffset(POI_Full::VT_POIID, poiid);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(POI_Full::VT_NAME, name);
  }
  void add_desc(::flatbuffers::Offset<::flatbuffers::String> desc) {
    fbb_.AddOffset(POI_Full::VT_DESC, desc);
  }
  void add_spec(::flatbuffers::Offset<::flatbuffers::String> spec) {
    fbb_.AddOffset(POI_Full::VT_SPEC, spec);
  }
  void add_ident(::flatbuffers::Offset<::flatbuffers::String> ident) {
    fbb_.AddOffset(POI_Full::VT_IDENT, ident);
  }
  void add_env(::flatbuffers::Offset<::flatbuffers::String> env) {
    fbb_.AddOffset(POI_Full::VT_ENV, env);
  }
  void add_plat(::flatbuffers::Offset<::flatbuffers::String> plat) {
    fbb_.AddOffset(POI_Full::VT_PLAT, plat);
  }
  void add_activity(::flatbuffers::Offset<::flatbuffers::String> activity) {
    fbb_.AddOffset(POI_Full::VT_ACTIVITY, activity);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(POI_Full::VT_TS, ts);
  }
  void add_start(::flatbuffers::Offset<::flatbuffers::String> start) {
    fbb_.AddOffset(POI_Full::VT_START, start);
  }
  void add_stale(::flatbuffers::Offset<::flatbuffers::String> stale) {
    fbb_.AddOffset(POI_Full::VT_STALE, stale);
  }
  void add_how(::flatbuffers::Offset<::flatbuffers::String> how) {
    fbb_.AddOffset(POI_Full::VT_HOW, how);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(POI_Full::VT_TYPE, type);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(POI_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(POI_Full::VT_LON, lon, 0.0);
  }
  void add_alt(double alt) {
    fbb_.AddElement<double>(POI_Full::VT_ALT, alt, 0.0);
  }
  void add_az(double az) {
    fbb_.AddElement<double>(POI_Full::VT_AZ, az, 0.0);
  }
  void add_el(double el) {
    fbb_.AddElement<double>(POI_Full::VT_EL, el, 0.0);
  }
  void add_le(double le) {
    fbb_.AddElement<double>(POI_Full::VT_LE, le, 0.0);
  }
  void add_ce(double ce) {
    fbb_.AddElement<double>(POI_Full::VT_CE, ce, 0.0);
  }
  void add_elle(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elle) {
    fbb_.AddOffset(POI_Full::VT_ELLE, elle);
  }
  void add_cntct(::flatbuffers::Offset<::flatbuffers::String> cntct) {
    fbb_.AddOffset(POI_Full::VT_CNTCT, cntct);
  }
  void add_conf(double conf) {
    fbb_.AddElement<double>(POI_Full::VT_CONF, conf, 0.0);
  }
  void add_urls(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> urls) {
    fbb_.AddOffset(POI_Full::VT_URLS, urls);
  }
  void add_area(::flatbuffers::Offset<::flatbuffers::String> area) {
    fbb_.AddOffset(POI_Full::VT_AREA, area);
  }
  void add_atext(::flatbuffers::Offset<::flatbuffers::String> atext) {
    fbb_.AddOffset(POI_Full::VT_ATEXT, atext);
  }
  void add_agjson(::flatbuffers::Offset<::flatbuffers::String> agjson) {
    fbb_.AddOffset(POI_Full::VT_AGJSON, agjson);
  }
  void add_atype(::flatbuffers::Offset<::flatbuffers::String> atype) {
    fbb_.AddOffset(POI_Full::VT_ATYPE, atype);
  }
  void add_andims(int32_t andims) {
    fbb_.AddElement<int32_t>(POI_Full::VT_ANDIMS, andims, 0);
  }
  void add_asrid(int32_t asrid) {
    fbb_.AddElement<int32_t>(POI_Full::VT_ASRID, asrid, 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(POI_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(POI_Full::VT_CREATEDBY, createdBy);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(POI_Full::VT_SOURCEDL, sourceDL);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(POI_Full::VT_SOURCE, source);
  }
  void add_dataMode(POI_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(POI_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(POI_Full::VT_ORIGIN, origin);
  }
  void add_groups(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> groups) {
    fbb_.AddOffset(POI_Full::VT_GROUPS, groups);
  }
  void add_asset(::flatbuffers::Offset<::flatbuffers::String> asset) {
    fbb_.AddOffset(POI_Full::VT_ASSET, asset);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(POI_Full::VT_TAGS, tags);
  }
  void add_srcTyps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps) {
    fbb_.AddOffset(POI_Full::VT_SRCTYPS, srcTyps);
  }
  void add_srcIds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds) {
    fbb_.AddOffset(POI_Full::VT_SRCIDS, srcIds);
  }
  void add_beNumber(::flatbuffers::Offset<::flatbuffers::String> beNumber) {
    fbb_.AddOffset(POI_Full::VT_BENUMBER, beNumber);
  }
  void add_orientation(double orientation) {
    fbb_.AddElement<double>(POI_Full::VT_ORIENTATION, orientation, 0.0);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(POI_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(POI_Full::VT_TRANSACTIONID, transactionId);
  }
  explicit POI_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<POI_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<POI_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<POI_Full> CreatePOI_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> pps = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msnid = 0,
    int32_t pri = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trkid = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> idWeatherReport = 0,
    ::flatbuffers::Offset<::flatbuffers::String> poiid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> desc = 0,
    ::flatbuffers::Offset<::flatbuffers::String> spec = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ident = 0,
    ::flatbuffers::Offset<::flatbuffers::String> env = 0,
    ::flatbuffers::Offset<::flatbuffers::String> plat = 0,
    ::flatbuffers::Offset<::flatbuffers::String> activity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    ::flatbuffers::Offset<::flatbuffers::String> start = 0,
    ::flatbuffers::Offset<::flatbuffers::String> stale = 0,
    ::flatbuffers::Offset<::flatbuffers::String> how = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    double az = 0.0,
    double el = 0.0,
    double le = 0.0,
    double ce = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elle = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cntct = 0,
    double conf = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> urls = 0,
    ::flatbuffers::Offset<::flatbuffers::String> area = 0,
    ::flatbuffers::Offset<::flatbuffers::String> atext = 0,
    ::flatbuffers::Offset<::flatbuffers::String> agjson = 0,
    ::flatbuffers::Offset<::flatbuffers::String> atype = 0,
    int32_t andims = 0,
    int32_t asrid = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    POI_Full_dataMode_Enum dataMode = POI_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> groups = 0,
    ::flatbuffers::Offset<::flatbuffers::String> asset = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcTyps = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> srcIds = 0,
    ::flatbuffers::Offset<::flatbuffers::String> beNumber = 0,
    double orientation = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0) {
  POI_FullBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_conf(conf);
  builder_.add_ce(ce);
  builder_.add_le(le);
  builder_.add_el(el);
  builder_.add_az(az);
  builder_.add_alt(alt);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_transactionId(transactionId);
  builder_.add_origNetwork(origNetwork);
  builder_.add_beNumber(beNumber);
  builder_.add_srcIds(srcIds);
  builder_.add_srcTyps(srcTyps);
  builder_.add_tags(tags);
  builder_.add_asset(asset);
  builder_.add_groups(groups);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_sourceDL(sourceDL);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_asrid(asrid);
  builder_.add_andims(andims);
  builder_.add_atype(atype);
  builder_.add_agjson(agjson);
  builder_.add_atext(atext);
  builder_.add_area(area);
  builder_.add_urls(urls);
  builder_.add_cntct(cntct);
  builder_.add_elle(elle);
  builder_.add_type(type);
  builder_.add_how(how);
  builder_.add_stale(stale);
  builder_.add_start(start);
  builder_.add_ts(ts);
  builder_.add_activity(activity);
  builder_.add_plat(plat);
  builder_.add_env(env);
  builder_.add_ident(ident);
  builder_.add_spec(spec);
  builder_.add_desc(desc);
  builder_.add_name(name);
  builder_.add_poiid(poiid);
  builder_.add_idWeatherReport(idWeatherReport);
  builder_.add_trkid(trkid);
  builder_.add_pri(pri);
  builder_.add_msnid(msnid);
  builder_.add_pps(pps);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<POI_Full> CreatePOI_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *pps = nullptr,
    const char *msnid = nullptr,
    int32_t pri = 0,
    const char *trkid = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *idWeatherReport = nullptr,
    const char *poiid = nullptr,
    const char *name = nullptr,
    const char *desc = nullptr,
    const char *spec = nullptr,
    const char *ident = nullptr,
    const char *env = nullptr,
    const char *plat = nullptr,
    const char *activity = nullptr,
    const char *ts = nullptr,
    const char *start = nullptr,
    const char *stale = nullptr,
    const char *how = nullptr,
    const char *type = nullptr,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    double az = 0.0,
    double el = 0.0,
    double le = 0.0,
    double ce = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *elle = nullptr,
    const char *cntct = nullptr,
    double conf = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *urls = nullptr,
    const char *area = nullptr,
    const char *atext = nullptr,
    const char *agjson = nullptr,
    const char *atype = nullptr,
    int32_t andims = 0,
    int32_t asrid = 0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *sourceDL = nullptr,
    const char *source = nullptr,
    POI_Full_dataMode_Enum dataMode = POI_Full_dataMode_Enum_REAL,
    const char *origin = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *groups = nullptr,
    const char *asset = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcTyps = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *srcIds = nullptr,
    const char *beNumber = nullptr,
    double orientation = 0.0,
    const char *origNetwork = nullptr,
    const char *transactionId = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto pps__ = pps ? _fbb.CreateString(pps) : 0;
  auto msnid__ = msnid ? _fbb.CreateString(msnid) : 0;
  auto trkid__ = trkid ? _fbb.CreateString(trkid) : 0;
  auto idWeatherReport__ = idWeatherReport ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*idWeatherReport) : 0;
  auto poiid__ = poiid ? _fbb.CreateString(poiid) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto desc__ = desc ? _fbb.CreateString(desc) : 0;
  auto spec__ = spec ? _fbb.CreateString(spec) : 0;
  auto ident__ = ident ? _fbb.CreateString(ident) : 0;
  auto env__ = env ? _fbb.CreateString(env) : 0;
  auto plat__ = plat ? _fbb.CreateString(plat) : 0;
  auto activity__ = activity ? _fbb.CreateString(activity) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto start__ = start ? _fbb.CreateString(start) : 0;
  auto stale__ = stale ? _fbb.CreateString(stale) : 0;
  auto how__ = how ? _fbb.CreateString(how) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto elle__ = elle ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*elle) : 0;
  auto cntct__ = cntct ? _fbb.CreateString(cntct) : 0;
  auto urls__ = urls ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*urls) : 0;
  auto area__ = area ? _fbb.CreateString(area) : 0;
  auto atext__ = atext ? _fbb.CreateString(atext) : 0;
  auto agjson__ = agjson ? _fbb.CreateString(agjson) : 0;
  auto atype__ = atype ? _fbb.CreateString(atype) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto groups__ = groups ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*groups) : 0;
  auto asset__ = asset ? _fbb.CreateString(asset) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto srcTyps__ = srcTyps ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcTyps) : 0;
  auto srcIds__ = srcIds ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*srcIds) : 0;
  auto beNumber__ = beNumber ? _fbb.CreateString(beNumber) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  return CreatePOI_Full(
      _fbb,
      id__,
      classificationMarking__,
      pps__,
      msnid__,
      pri,
      trkid__,
      idWeatherReport__,
      poiid__,
      name__,
      desc__,
      spec__,
      ident__,
      env__,
      plat__,
      activity__,
      ts__,
      start__,
      stale__,
      how__,
      type__,
      lat,
      lon,
      alt,
      az,
      el,
      le,
      ce,
      elle__,
      cntct__,
      conf,
      urls__,
      area__,
      atext__,
      agjson__,
      atype__,
      andims,
      asrid,
      createdAt__,
      createdBy__,
      sourceDL__,
      source__,
      dataMode,
      origin__,
      groups__,
      asset__,
      tags__,
      srcTyps__,
      srcIds__,
      beNumber__,
      orientation,
      origNetwork__,
      transactionId__);
}

inline const POI_Full *GetPOI_Full(const void *buf) {
  return ::flatbuffers::GetRoot<POI_Full>(buf);
}

inline const POI_Full *GetSizePrefixedPOI_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<POI_Full>(buf);
}

inline const char *POI_FullIdentifier() {
  return "POIF";
}

inline bool POI_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, POI_FullIdentifier());
}

inline bool SizePrefixedPOI_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, POI_FullIdentifier(), true);
}

inline bool VerifyPOI_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<POI_Full>(POI_FullIdentifier());
}

inline bool VerifySizePrefixedPOI_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<POI_Full>(POI_FullIdentifier());
}

inline void FinishPOI_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<POI_Full> root) {
  fbb.Finish(root, POI_FullIdentifier());
}

inline void FinishSizePrefixedPOI_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<POI_Full> root) {
  fbb.FinishSizePrefixed(root, POI_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
