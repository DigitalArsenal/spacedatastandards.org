// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsDiscrepancyInfos_Ingest;
struct LogisticsDiscrepancyInfos_IngestBuilder;

/// /// Discrepancy information associated with this LogisticsSupport record.
struct LogisticsDiscrepancyInfos_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsDiscrepancyInfos_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_JCN = 4,
    VT_DISCREPANCYINFO = 6,
    VT_JOBSTTIME = 8,
    VT_CLOSURETIME = 10
  };
  /// Job Control Number of the discrepancy.
  /// Example: /// Example: 231942400
  /// Constraints: Minimum length = 0, Maximum length = 12
  const ::flatbuffers::String *jcn() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JCN);
  }
  /// The aircraft discrepancy description.
  /// Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
  /// Constraints: Minimum length = 0, Maximum length = 680
  const ::flatbuffers::String *discrepancyInfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DISCREPANCYINFO);
  }
  /// The job start time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *jobStTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_JOBSTTIME);
  }
  /// The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *closureTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLOSURETIME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_JCN) &&
           verifier.VerifyString(jcn()) &&
           VerifyOffset(verifier, VT_DISCREPANCYINFO) &&
           verifier.VerifyString(discrepancyInfo()) &&
           VerifyOffset(verifier, VT_JOBSTTIME) &&
           verifier.VerifyString(jobStTime()) &&
           VerifyOffset(verifier, VT_CLOSURETIME) &&
           verifier.VerifyString(closureTime()) &&
           verifier.EndTable();
  }
};

struct LogisticsDiscrepancyInfos_IngestBuilder {
  typedef LogisticsDiscrepancyInfos_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_jcn(::flatbuffers::Offset<::flatbuffers::String> jcn) {
    fbb_.AddOffset(LogisticsDiscrepancyInfos_Ingest::VT_JCN, jcn);
  }
  void add_discrepancyInfo(::flatbuffers::Offset<::flatbuffers::String> discrepancyInfo) {
    fbb_.AddOffset(LogisticsDiscrepancyInfos_Ingest::VT_DISCREPANCYINFO, discrepancyInfo);
  }
  void add_jobStTime(::flatbuffers::Offset<::flatbuffers::String> jobStTime) {
    fbb_.AddOffset(LogisticsDiscrepancyInfos_Ingest::VT_JOBSTTIME, jobStTime);
  }
  void add_closureTime(::flatbuffers::Offset<::flatbuffers::String> closureTime) {
    fbb_.AddOffset(LogisticsDiscrepancyInfos_Ingest::VT_CLOSURETIME, closureTime);
  }
  explicit LogisticsDiscrepancyInfos_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsDiscrepancyInfos_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsDiscrepancyInfos_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsDiscrepancyInfos_Ingest> CreateLogisticsDiscrepancyInfos_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> jcn = 0,
    ::flatbuffers::Offset<::flatbuffers::String> discrepancyInfo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> jobStTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> closureTime = 0) {
  LogisticsDiscrepancyInfos_IngestBuilder builder_(_fbb);
  builder_.add_closureTime(closureTime);
  builder_.add_jobStTime(jobStTime);
  builder_.add_discrepancyInfo(discrepancyInfo);
  builder_.add_jcn(jcn);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsDiscrepancyInfos_Ingest> CreateLogisticsDiscrepancyInfos_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *jcn = nullptr,
    const char *discrepancyInfo = nullptr,
    const char *jobStTime = nullptr,
    const char *closureTime = nullptr) {
  auto jcn__ = jcn ? _fbb.CreateString(jcn) : 0;
  auto discrepancyInfo__ = discrepancyInfo ? _fbb.CreateString(discrepancyInfo) : 0;
  auto jobStTime__ = jobStTime ? _fbb.CreateString(jobStTime) : 0;
  auto closureTime__ = closureTime ? _fbb.CreateString(closureTime) : 0;
  return CreateLogisticsDiscrepancyInfos_Ingest(
      _fbb,
      jcn__,
      discrepancyInfo__,
      jobStTime__,
      closureTime__);
}

inline const LogisticsDiscrepancyInfos_Ingest *GetLogisticsDiscrepancyInfos_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsDiscrepancyInfos_Ingest>(buf);
}

inline const LogisticsDiscrepancyInfos_Ingest *GetSizePrefixedLogisticsDiscrepancyInfos_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsDiscrepancyInfos_Ingest>(buf);
}

inline const char *LogisticsDiscrepancyInfos_IngestIdentifier() {
  return "LOGI";
}

inline bool LogisticsDiscrepancyInfos_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsDiscrepancyInfos_IngestIdentifier());
}

inline bool SizePrefixedLogisticsDiscrepancyInfos_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsDiscrepancyInfos_IngestIdentifier(), true);
}

inline bool VerifyLogisticsDiscrepancyInfos_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsDiscrepancyInfos_Ingest>(LogisticsDiscrepancyInfos_IngestIdentifier());
}

inline bool VerifySizePrefixedLogisticsDiscrepancyInfos_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsDiscrepancyInfos_Ingest>(LogisticsDiscrepancyInfos_IngestIdentifier());
}

inline void FinishLogisticsDiscrepancyInfos_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsDiscrepancyInfos_Ingest> root) {
  fbb.Finish(root, LogisticsDiscrepancyInfos_IngestIdentifier());
}

inline void FinishSizePrefixedLogisticsDiscrepancyInfos_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsDiscrepancyInfos_Ingest> root) {
  fbb.FinishSizePrefixed(root, LogisticsDiscrepancyInfos_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
