// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ISRCollectionPOC_Full;
struct ISRCollectionPOC_FullBuilder;

/// /// Information about the Point of Contact (POC) for this ISR Collection.
struct ISRCollectionPOC_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ISRCollectionPOC_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_CALLSIGN = 8,
    VT_UNIT = 10,
    VT_EMAIL = 12,
    VT_PHONE = 14,
    VT_RADIOFREQUENCY = 16,
    VT_CHATSYSTEM = 18,
    VT_CHATNAME = 20,
    VT_NOTES = 22
  };
  /// Unique identifier of the collection requirement POC.
  /// Example: /// Example: ISRCOLLECTIONPOC-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Name of the POC.
  /// Example: /// Example: NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Callsign of the POC.
  /// Example: /// Example: CALLSIGN
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *callsign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// Unit the POC belongs to.
  /// Example: /// Example: UNIT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *unit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UNIT);
  }
  /// Email address of the POC.
  /// Example: /// Example: EMAIL
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *email() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EMAIL);
  }
  /// Phone number of the POC.
  /// Example: /// Example: PHONE
  /// Constraints: Minimum length = 0, Maximum length = 45
  const ::flatbuffers::String *phone() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PHONE);
  }
  /// Radio Frequency the POC is on.
  /// Example: /// Example: 123.23
  /// Constraints: No constraints specified.
  double radioFrequency() const {
    return GetField<double>(VT_RADIOFREQUENCY, 0.0);
  }
  /// Chat system the POC is accessing.
  /// Example: /// Example: CHAT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *chatSystem() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHATSYSTEM);
  }
  /// Chat name of the POC.
  /// Example: /// Example: CHAT_NAME
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *chatName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHATNAME);
  }
  /// Amplifying notes about the POC.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callsign()) &&
           VerifyOffset(verifier, VT_UNIT) &&
           verifier.VerifyString(unit()) &&
           VerifyOffset(verifier, VT_EMAIL) &&
           verifier.VerifyString(email()) &&
           VerifyOffset(verifier, VT_PHONE) &&
           verifier.VerifyString(phone()) &&
           VerifyField<double>(verifier, VT_RADIOFREQUENCY, 8) &&
           VerifyOffset(verifier, VT_CHATSYSTEM) &&
           verifier.VerifyString(chatSystem()) &&
           VerifyOffset(verifier, VT_CHATNAME) &&
           verifier.VerifyString(chatName()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           verifier.EndTable();
  }
};

struct ISRCollectionPOC_FullBuilder {
  typedef ISRCollectionPOC_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_ID, id);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_NAME, name);
  }
  void add_callsign(::flatbuffers::Offset<::flatbuffers::String> callsign) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_CALLSIGN, callsign);
  }
  void add_unit(::flatbuffers::Offset<::flatbuffers::String> unit) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_UNIT, unit);
  }
  void add_email(::flatbuffers::Offset<::flatbuffers::String> email) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_EMAIL, email);
  }
  void add_phone(::flatbuffers::Offset<::flatbuffers::String> phone) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_PHONE, phone);
  }
  void add_radioFrequency(double radioFrequency) {
    fbb_.AddElement<double>(ISRCollectionPOC_Full::VT_RADIOFREQUENCY, radioFrequency, 0.0);
  }
  void add_chatSystem(::flatbuffers::Offset<::flatbuffers::String> chatSystem) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_CHATSYSTEM, chatSystem);
  }
  void add_chatName(::flatbuffers::Offset<::flatbuffers::String> chatName) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_CHATNAME, chatName);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(ISRCollectionPOC_Full::VT_NOTES, notes);
  }
  explicit ISRCollectionPOC_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ISRCollectionPOC_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ISRCollectionPOC_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ISRCollectionPOC_Full> CreateISRCollectionPOC_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> callsign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> unit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> email = 0,
    ::flatbuffers::Offset<::flatbuffers::String> phone = 0,
    double radioFrequency = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> chatSystem = 0,
    ::flatbuffers::Offset<::flatbuffers::String> chatName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0) {
  ISRCollectionPOC_FullBuilder builder_(_fbb);
  builder_.add_radioFrequency(radioFrequency);
  builder_.add_notes(notes);
  builder_.add_chatName(chatName);
  builder_.add_chatSystem(chatSystem);
  builder_.add_phone(phone);
  builder_.add_email(email);
  builder_.add_unit(unit);
  builder_.add_callsign(callsign);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ISRCollectionPOC_Full> CreateISRCollectionPOC_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const char *callsign = nullptr,
    const char *unit = nullptr,
    const char *email = nullptr,
    const char *phone = nullptr,
    double radioFrequency = 0.0,
    const char *chatSystem = nullptr,
    const char *chatName = nullptr,
    const char *notes = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto callsign__ = callsign ? _fbb.CreateString(callsign) : 0;
  auto unit__ = unit ? _fbb.CreateString(unit) : 0;
  auto email__ = email ? _fbb.CreateString(email) : 0;
  auto phone__ = phone ? _fbb.CreateString(phone) : 0;
  auto chatSystem__ = chatSystem ? _fbb.CreateString(chatSystem) : 0;
  auto chatName__ = chatName ? _fbb.CreateString(chatName) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  return CreateISRCollectionPOC_Full(
      _fbb,
      id__,
      name__,
      callsign__,
      unit__,
      email__,
      phone__,
      radioFrequency,
      chatSystem__,
      chatName__,
      notes__);
}

inline const ISRCollectionPOC_Full *GetISRCollectionPOC_Full(const void *buf) {
  return ::flatbuffers::GetRoot<ISRCollectionPOC_Full>(buf);
}

inline const ISRCollectionPOC_Full *GetSizePrefixedISRCollectionPOC_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ISRCollectionPOC_Full>(buf);
}

inline const char *ISRCollectionPOC_FullIdentifier() {
  return "ISRC";
}

inline bool ISRCollectionPOC_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionPOC_FullIdentifier());
}

inline bool SizePrefixedISRCollectionPOC_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionPOC_FullIdentifier(), true);
}

inline bool VerifyISRCollectionPOC_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ISRCollectionPOC_Full>(ISRCollectionPOC_FullIdentifier());
}

inline bool VerifySizePrefixedISRCollectionPOC_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ISRCollectionPOC_Full>(ISRCollectionPOC_FullIdentifier());
}

inline void FinishISRCollectionPOC_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionPOC_Full> root) {
  fbb.Finish(root, ISRCollectionPOC_FullIdentifier());
}

inline void FinishSizePrefixedISRCollectionPOC_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionPOC_Full> root) {
  fbb.FinishSizePrefixed(root, ISRCollectionPOC_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
