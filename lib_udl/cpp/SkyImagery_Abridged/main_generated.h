// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct SkyImagery_Abridged;
struct SkyImagery_AbridgedBuilder;

enum SkyImagery_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  SkyImagery_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  SkyImagery_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  SkyImagery_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  SkyImagery_Abridged_dataMode_Enum_EXERCISE = 3,
  SkyImagery_Abridged_dataMode_Enum_MIN = SkyImagery_Abridged_dataMode_Enum_REAL,
  SkyImagery_Abridged_dataMode_Enum_MAX = SkyImagery_Abridged_dataMode_Enum_EXERCISE
};

inline const SkyImagery_Abridged_dataMode_Enum (&EnumValuesSkyImagery_Abridged_dataMode_Enum())[4] {
  static const SkyImagery_Abridged_dataMode_Enum values[] = {
    SkyImagery_Abridged_dataMode_Enum_REAL,
    SkyImagery_Abridged_dataMode_Enum_TEST,
    SkyImagery_Abridged_dataMode_Enum_SIMULATED,
    SkyImagery_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesSkyImagery_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameSkyImagery_Abridged_dataMode_Enum(SkyImagery_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, SkyImagery_Abridged_dataMode_Enum_REAL, SkyImagery_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSkyImagery_Abridged_dataMode_Enum()[index];
}

/// /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
struct SkyImagery_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SkyImagery_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_ORIGOBJECTID = 10,
    VT_IDATTITUDESET = 12,
    VT_IDSENSOR = 14,
    VT_SATNO = 16,
    VT_ORIGSENSORID = 18,
    VT_SENLAT = 20,
    VT_SENLON = 22,
    VT_SENALT = 24,
    VT_SENX = 26,
    VT_SENY = 28,
    VT_SENZ = 30,
    VT_SENQUAT = 32,
    VT_SENQUATDOT = 34,
    VT_IMAGETYPE = 36,
    VT_EXPSTARTTIME = 38,
    VT_EXPENDTIME = 40,
    VT_IMAGESOURCEINFO = 42,
    VT_TOPLEFTSTARTAZ = 44,
    VT_TOPLEFTSTARTEL = 46,
    VT_TOPLEFTSTOPAZ = 48,
    VT_TOPLEFTSTOPEL = 50,
    VT_IMAGESETID = 52,
    VT_IMAGESETLENGTH = 54,
    VT_SEQUENCEID = 56,
    VT_FRAMEFOVWIDTH = 58,
    VT_FRAMEFOVHEIGHT = 60,
    VT_PIXELFOVWIDTH = 62,
    VT_PIXELFOVHEIGHT = 64,
    VT_FRAMEWIDTHPIXELS = 66,
    VT_FRAMEHEIGHTPIXELS = 68,
    VT_PIXELBITDEPTH = 70,
    VT_ANNOTATIONKEY = 72,
    VT_CALIBRATIONKEY = 74,
    VT_FILENAME = 76,
    VT_FILESIZE = 78,
    VT_CHECKSUMVALUE = 80,
    VT_TRANSACTIONID = 82,
    VT_TAGS = 84,
    VT_SOURCE = 86,
    VT_ORIGIN = 88,
    VT_ORIGNETWORK = 90,
    VT_SOURCEDL = 92,
    VT_DESCRIPTION = 94,
    VT_DATAMODE = 96,
    VT_CREATEDAT = 98,
    VT_CREATEDBY = 100
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SKYIMAGERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Optional identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: 44920
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: X15-23452
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Optional identifier of the AttitudeSet data record describing the orientation of an object body.
  /// Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idAttitudeSet() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDATTITUDESET);
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: 420
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Catalog number of the target on-orbit object.
  /// Example: /// Example: 25544
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: origSensorId
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -33.283048
  /// Constraints: No constraints specified.
  double senlat() const {
    return GetField<double>(VT_SENLAT, 0.0);
  }
  /// Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 149.372549
  /// Constraints: No constraints specified.
  double senlon() const {
    return GetField<double>(VT_SENLON, 0.0);
  }
  /// Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
  /// Example: /// Example: 14.483619321
  /// Constraints: No constraints specified.
  double senalt() const {
    return GetField<double>(VT_SENALT, 0.0);
  }
  /// Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 14.52
  /// Constraints: No constraints specified.
  double senx() const {
    return GetField<double>(VT_SENX, 0.0);
  }
  /// Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 32.41
  /// Constraints: No constraints specified.
  double seny() const {
    return GetField<double>(VT_SENY, 0.0);
  }
  /// Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 376.12
  /// Constraints: No constraints specified.
  double senz() const {
    return GetField<double>(VT_SENZ, 0.0);
  }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *senQuat() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENQUAT);
  }
  /// The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *senQuatDot() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_SENQUATDOT);
  }
  /// The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
  /// Example: /// Example: imageType
  /// Constraints: Minimum length = 1, Maximum length = 24
  const ::flatbuffers::String *imageType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGETYPE);
  }
  /// Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *expStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPSTARTTIME);
  }
  /// End time of the exposure, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *expEndTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPENDTIME);
  }
  /// String that uniquely identifies the data source.
  /// Example: /// Example: imageSourceInfo
  /// Constraints: Minimum length = 0, Maximum length = 100
  const ::flatbuffers::String *imageSourceInfo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGESOURCEINFO);
  }
  /// The telescope pointing azimuth, in degrees, at the exposure start epoch.
  /// Example: /// Example: 146.321
  /// Constraints: No constraints specified.
  double topLeftStartAz() const {
    return GetField<double>(VT_TOPLEFTSTARTAZ, 0.0);
  }
  /// The telescope pointing elevation, in degrees, at the exposure start epoch.
  /// Example: /// Example: 146.321
  /// Constraints: No constraints specified.
  double topLeftStartEl() const {
    return GetField<double>(VT_TOPLEFTSTARTEL, 0.0);
  }
  /// The telescope pointing azimuth, in degrees, at the exposure stop epoch.
  /// Example: /// Example: 3.7
  /// Constraints: No constraints specified.
  double topLeftStopAz() const {
    return GetField<double>(VT_TOPLEFTSTOPAZ, 0.0);
  }
  /// The telescope pointing elevation, in degrees, at the exposure stop epoch.
  /// Example: /// Example: 34.233
  /// Constraints: No constraints specified.
  double topLeftStopEl() const {
    return GetField<double>(VT_TOPLEFTSTOPEL, 0.0);
  }
  /// The user-defined set ID of a sequence of images.
  /// Example: /// Example: imageSetId
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *imageSetId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IMAGESETID);
  }
  /// The number of images in an image set.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  int32_t imageSetLength() const {
    return GetField<int32_t>(VT_IMAGESETLENGTH, 0);
  }
  /// The sequence ID of an image within an image set.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t sequenceId() const {
    return GetField<int32_t>(VT_SEQUENCEID, 0);
  }
  /// Field Of View frame width, in degrees.
  /// Example: /// Example: 21.23
  /// Constraints: No constraints specified.
  double frameFOVWidth() const {
    return GetField<double>(VT_FRAMEFOVWIDTH, 0.0);
  }
  /// Field Of View frame height, in degrees.
  /// Example: /// Example: 21.23
  /// Constraints: No constraints specified.
  double frameFOVHeight() const {
    return GetField<double>(VT_FRAMEFOVHEIGHT, 0.0);
  }
  /// Field Of View pixel width, in degrees.
  /// Example: /// Example: 321.123
  /// Constraints: No constraints specified.
  double pixelFOVWidth() const {
    return GetField<double>(VT_PIXELFOVWIDTH, 0.0);
  }
  /// Field Of View pixel height, in degrees.
  /// Example: /// Example: 321.123
  /// Constraints: No constraints specified.
  double pixelFOVHeight() const {
    return GetField<double>(VT_PIXELFOVHEIGHT, 0.0);
  }
  /// Frame width of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t frameWidthPixels() const {
    return GetField<int32_t>(VT_FRAMEWIDTHPIXELS, 0);
  }
  /// Frame height of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t frameHeightPixels() const {
    return GetField<int32_t>(VT_FRAMEHEIGHTPIXELS, 0);
  }
  /// Bit depth of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t pixelBitDepth() const {
    return GetField<int32_t>(VT_PIXELBITDEPTH, 0);
  }
  /// Reference to an annotation document associated with this image.
  /// Example: /// Example: annotationKey
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *annotationKey() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ANNOTATIONKEY);
  }
  /// Reference to a calibration document associated with this image.
  /// Example: /// Example: calibrationKey
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *calibrationKey() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALIBRATIONKEY);
  }
  /// Name of the uploaded image file.
  /// Example: /// Example: filename.jpg
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *filename() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FILENAME);
  }
  /// Size of the image file, in bytes.
  /// Example: /// Example: 371945
  /// Constraints: No constraints specified.
  int64_t filesize() const {
    return GetField<int64_t>(VT_FILESIZE, 0);
  }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: checksumValue
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *checksumValue() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHECKSUMVALUE);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Optional name/description associated with this image.
  /// Example: /// Example: description
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  SkyImagery_Abridged_dataMode_Enum dataMode() const {
    return static_cast<SkyImagery_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_IDATTITUDESET) &&
           verifier.VerifyString(idAttitudeSet()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyField<double>(verifier, VT_SENLAT, 8) &&
           VerifyField<double>(verifier, VT_SENLON, 8) &&
           VerifyField<double>(verifier, VT_SENALT, 8) &&
           VerifyField<double>(verifier, VT_SENX, 8) &&
           VerifyField<double>(verifier, VT_SENY, 8) &&
           VerifyField<double>(verifier, VT_SENZ, 8) &&
           VerifyOffset(verifier, VT_SENQUAT) &&
           verifier.VerifyVector(senQuat()) &&
           verifier.VerifyVectorOfStrings(senQuat()) &&
           VerifyOffset(verifier, VT_SENQUATDOT) &&
           verifier.VerifyVector(senQuatDot()) &&
           verifier.VerifyVectorOfStrings(senQuatDot()) &&
           VerifyOffset(verifier, VT_IMAGETYPE) &&
           verifier.VerifyString(imageType()) &&
           VerifyOffset(verifier, VT_EXPSTARTTIME) &&
           verifier.VerifyString(expStartTime()) &&
           VerifyOffset(verifier, VT_EXPENDTIME) &&
           verifier.VerifyString(expEndTime()) &&
           VerifyOffset(verifier, VT_IMAGESOURCEINFO) &&
           verifier.VerifyString(imageSourceInfo()) &&
           VerifyField<double>(verifier, VT_TOPLEFTSTARTAZ, 8) &&
           VerifyField<double>(verifier, VT_TOPLEFTSTARTEL, 8) &&
           VerifyField<double>(verifier, VT_TOPLEFTSTOPAZ, 8) &&
           VerifyField<double>(verifier, VT_TOPLEFTSTOPEL, 8) &&
           VerifyOffset(verifier, VT_IMAGESETID) &&
           verifier.VerifyString(imageSetId()) &&
           VerifyField<int32_t>(verifier, VT_IMAGESETLENGTH, 4) &&
           VerifyField<int32_t>(verifier, VT_SEQUENCEID, 4) &&
           VerifyField<double>(verifier, VT_FRAMEFOVWIDTH, 8) &&
           VerifyField<double>(verifier, VT_FRAMEFOVHEIGHT, 8) &&
           VerifyField<double>(verifier, VT_PIXELFOVWIDTH, 8) &&
           VerifyField<double>(verifier, VT_PIXELFOVHEIGHT, 8) &&
           VerifyField<int32_t>(verifier, VT_FRAMEWIDTHPIXELS, 4) &&
           VerifyField<int32_t>(verifier, VT_FRAMEHEIGHTPIXELS, 4) &&
           VerifyField<int32_t>(verifier, VT_PIXELBITDEPTH, 4) &&
           VerifyOffset(verifier, VT_ANNOTATIONKEY) &&
           verifier.VerifyString(annotationKey()) &&
           VerifyOffset(verifier, VT_CALIBRATIONKEY) &&
           verifier.VerifyString(calibrationKey()) &&
           VerifyOffset(verifier, VT_FILENAME) &&
           verifier.VerifyString(filename()) &&
           VerifyField<int64_t>(verifier, VT_FILESIZE, 8) &&
           VerifyOffset(verifier, VT_CHECKSUMVALUE) &&
           verifier.VerifyString(checksumValue()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           verifier.EndTable();
  }
};

struct SkyImagery_AbridgedBuilder {
  typedef SkyImagery_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  void add_idAttitudeSet(::flatbuffers::Offset<::flatbuffers::String> idAttitudeSet) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_IDATTITUDESET, idAttitudeSet);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_IDSENSOR, idSensor);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(SkyImagery_Abridged::VT_SATNO, satNo, 0);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  void add_senlat(double senlat) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_SENLAT, senlat, 0.0);
  }
  void add_senlon(double senlon) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_SENLON, senlon, 0.0);
  }
  void add_senalt(double senalt) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_SENALT, senalt, 0.0);
  }
  void add_senx(double senx) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_SENX, senx, 0.0);
  }
  void add_seny(double seny) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_SENY, seny, 0.0);
  }
  void add_senz(double senz) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_SENZ, senz, 0.0);
  }
  void add_senQuat(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senQuat) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_SENQUAT, senQuat);
  }
  void add_senQuatDot(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senQuatDot) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_SENQUATDOT, senQuatDot);
  }
  void add_imageType(::flatbuffers::Offset<::flatbuffers::String> imageType) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_IMAGETYPE, imageType);
  }
  void add_expStartTime(::flatbuffers::Offset<::flatbuffers::String> expStartTime) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_EXPSTARTTIME, expStartTime);
  }
  void add_expEndTime(::flatbuffers::Offset<::flatbuffers::String> expEndTime) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_EXPENDTIME, expEndTime);
  }
  void add_imageSourceInfo(::flatbuffers::Offset<::flatbuffers::String> imageSourceInfo) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_IMAGESOURCEINFO, imageSourceInfo);
  }
  void add_topLeftStartAz(double topLeftStartAz) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_TOPLEFTSTARTAZ, topLeftStartAz, 0.0);
  }
  void add_topLeftStartEl(double topLeftStartEl) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_TOPLEFTSTARTEL, topLeftStartEl, 0.0);
  }
  void add_topLeftStopAz(double topLeftStopAz) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_TOPLEFTSTOPAZ, topLeftStopAz, 0.0);
  }
  void add_topLeftStopEl(double topLeftStopEl) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_TOPLEFTSTOPEL, topLeftStopEl, 0.0);
  }
  void add_imageSetId(::flatbuffers::Offset<::flatbuffers::String> imageSetId) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_IMAGESETID, imageSetId);
  }
  void add_imageSetLength(int32_t imageSetLength) {
    fbb_.AddElement<int32_t>(SkyImagery_Abridged::VT_IMAGESETLENGTH, imageSetLength, 0);
  }
  void add_sequenceId(int32_t sequenceId) {
    fbb_.AddElement<int32_t>(SkyImagery_Abridged::VT_SEQUENCEID, sequenceId, 0);
  }
  void add_frameFOVWidth(double frameFOVWidth) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_FRAMEFOVWIDTH, frameFOVWidth, 0.0);
  }
  void add_frameFOVHeight(double frameFOVHeight) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_FRAMEFOVHEIGHT, frameFOVHeight, 0.0);
  }
  void add_pixelFOVWidth(double pixelFOVWidth) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_PIXELFOVWIDTH, pixelFOVWidth, 0.0);
  }
  void add_pixelFOVHeight(double pixelFOVHeight) {
    fbb_.AddElement<double>(SkyImagery_Abridged::VT_PIXELFOVHEIGHT, pixelFOVHeight, 0.0);
  }
  void add_frameWidthPixels(int32_t frameWidthPixels) {
    fbb_.AddElement<int32_t>(SkyImagery_Abridged::VT_FRAMEWIDTHPIXELS, frameWidthPixels, 0);
  }
  void add_frameHeightPixels(int32_t frameHeightPixels) {
    fbb_.AddElement<int32_t>(SkyImagery_Abridged::VT_FRAMEHEIGHTPIXELS, frameHeightPixels, 0);
  }
  void add_pixelBitDepth(int32_t pixelBitDepth) {
    fbb_.AddElement<int32_t>(SkyImagery_Abridged::VT_PIXELBITDEPTH, pixelBitDepth, 0);
  }
  void add_annotationKey(::flatbuffers::Offset<::flatbuffers::String> annotationKey) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_ANNOTATIONKEY, annotationKey);
  }
  void add_calibrationKey(::flatbuffers::Offset<::flatbuffers::String> calibrationKey) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_CALIBRATIONKEY, calibrationKey);
  }
  void add_filename(::flatbuffers::Offset<::flatbuffers::String> filename) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_FILENAME, filename);
  }
  void add_filesize(int64_t filesize) {
    fbb_.AddElement<int64_t>(SkyImagery_Abridged::VT_FILESIZE, filesize, 0);
  }
  void add_checksumValue(::flatbuffers::Offset<::flatbuffers::String> checksumValue) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_CHECKSUMVALUE, checksumValue);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_TRANSACTIONID, transactionId);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_TAGS, tags);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_SOURCEDL, sourceDL);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_DESCRIPTION, description);
  }
  void add_dataMode(SkyImagery_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(SkyImagery_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(SkyImagery_Abridged::VT_CREATEDBY, createdBy);
  }
  explicit SkyImagery_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SkyImagery_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SkyImagery_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SkyImagery_Abridged> CreateSkyImagery_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAttitudeSet = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    double senlat = 0.0,
    double senlon = 0.0,
    double senalt = 0.0,
    double senx = 0.0,
    double seny = 0.0,
    double senz = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senQuat = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> senQuatDot = 0,
    ::flatbuffers::Offset<::flatbuffers::String> imageType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> expStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> expEndTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> imageSourceInfo = 0,
    double topLeftStartAz = 0.0,
    double topLeftStartEl = 0.0,
    double topLeftStopAz = 0.0,
    double topLeftStopEl = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> imageSetId = 0,
    int32_t imageSetLength = 0,
    int32_t sequenceId = 0,
    double frameFOVWidth = 0.0,
    double frameFOVHeight = 0.0,
    double pixelFOVWidth = 0.0,
    double pixelFOVHeight = 0.0,
    int32_t frameWidthPixels = 0,
    int32_t frameHeightPixels = 0,
    int32_t pixelBitDepth = 0,
    ::flatbuffers::Offset<::flatbuffers::String> annotationKey = 0,
    ::flatbuffers::Offset<::flatbuffers::String> calibrationKey = 0,
    ::flatbuffers::Offset<::flatbuffers::String> filename = 0,
    int64_t filesize = 0,
    ::flatbuffers::Offset<::flatbuffers::String> checksumValue = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    SkyImagery_Abridged_dataMode_Enum dataMode = SkyImagery_Abridged_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0) {
  SkyImagery_AbridgedBuilder builder_(_fbb);
  builder_.add_filesize(filesize);
  builder_.add_pixelFOVHeight(pixelFOVHeight);
  builder_.add_pixelFOVWidth(pixelFOVWidth);
  builder_.add_frameFOVHeight(frameFOVHeight);
  builder_.add_frameFOVWidth(frameFOVWidth);
  builder_.add_topLeftStopEl(topLeftStopEl);
  builder_.add_topLeftStopAz(topLeftStopAz);
  builder_.add_topLeftStartEl(topLeftStartEl);
  builder_.add_topLeftStartAz(topLeftStartAz);
  builder_.add_senz(senz);
  builder_.add_seny(seny);
  builder_.add_senx(senx);
  builder_.add_senalt(senalt);
  builder_.add_senlon(senlon);
  builder_.add_senlat(senlat);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_description(description);
  builder_.add_sourceDL(sourceDL);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_tags(tags);
  builder_.add_transactionId(transactionId);
  builder_.add_checksumValue(checksumValue);
  builder_.add_filename(filename);
  builder_.add_calibrationKey(calibrationKey);
  builder_.add_annotationKey(annotationKey);
  builder_.add_pixelBitDepth(pixelBitDepth);
  builder_.add_frameHeightPixels(frameHeightPixels);
  builder_.add_frameWidthPixels(frameWidthPixels);
  builder_.add_sequenceId(sequenceId);
  builder_.add_imageSetLength(imageSetLength);
  builder_.add_imageSetId(imageSetId);
  builder_.add_imageSourceInfo(imageSourceInfo);
  builder_.add_expEndTime(expEndTime);
  builder_.add_expStartTime(expStartTime);
  builder_.add_imageType(imageType);
  builder_.add_senQuatDot(senQuatDot);
  builder_.add_senQuat(senQuat);
  builder_.add_origSensorId(origSensorId);
  builder_.add_satNo(satNo);
  builder_.add_idSensor(idSensor);
  builder_.add_idAttitudeSet(idAttitudeSet);
  builder_.add_origObjectId(origObjectId);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SkyImagery_Abridged> CreateSkyImagery_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    const char *origObjectId = nullptr,
    const char *idAttitudeSet = nullptr,
    const char *idSensor = nullptr,
    int32_t satNo = 0,
    const char *origSensorId = nullptr,
    double senlat = 0.0,
    double senlon = 0.0,
    double senalt = 0.0,
    double senx = 0.0,
    double seny = 0.0,
    double senz = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *senQuat = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *senQuatDot = nullptr,
    const char *imageType = nullptr,
    const char *expStartTime = nullptr,
    const char *expEndTime = nullptr,
    const char *imageSourceInfo = nullptr,
    double topLeftStartAz = 0.0,
    double topLeftStartEl = 0.0,
    double topLeftStopAz = 0.0,
    double topLeftStopEl = 0.0,
    const char *imageSetId = nullptr,
    int32_t imageSetLength = 0,
    int32_t sequenceId = 0,
    double frameFOVWidth = 0.0,
    double frameFOVHeight = 0.0,
    double pixelFOVWidth = 0.0,
    double pixelFOVHeight = 0.0,
    int32_t frameWidthPixels = 0,
    int32_t frameHeightPixels = 0,
    int32_t pixelBitDepth = 0,
    const char *annotationKey = nullptr,
    const char *calibrationKey = nullptr,
    const char *filename = nullptr,
    int64_t filesize = 0,
    const char *checksumValue = nullptr,
    const char *transactionId = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    const char *sourceDL = nullptr,
    const char *description = nullptr,
    SkyImagery_Abridged_dataMode_Enum dataMode = SkyImagery_Abridged_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto idAttitudeSet__ = idAttitudeSet ? _fbb.CreateString(idAttitudeSet) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto senQuat__ = senQuat ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*senQuat) : 0;
  auto senQuatDot__ = senQuatDot ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*senQuatDot) : 0;
  auto imageType__ = imageType ? _fbb.CreateString(imageType) : 0;
  auto expStartTime__ = expStartTime ? _fbb.CreateString(expStartTime) : 0;
  auto expEndTime__ = expEndTime ? _fbb.CreateString(expEndTime) : 0;
  auto imageSourceInfo__ = imageSourceInfo ? _fbb.CreateString(imageSourceInfo) : 0;
  auto imageSetId__ = imageSetId ? _fbb.CreateString(imageSetId) : 0;
  auto annotationKey__ = annotationKey ? _fbb.CreateString(annotationKey) : 0;
  auto calibrationKey__ = calibrationKey ? _fbb.CreateString(calibrationKey) : 0;
  auto filename__ = filename ? _fbb.CreateString(filename) : 0;
  auto checksumValue__ = checksumValue ? _fbb.CreateString(checksumValue) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  return CreateSkyImagery_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      origObjectId__,
      idAttitudeSet__,
      idSensor__,
      satNo,
      origSensorId__,
      senlat,
      senlon,
      senalt,
      senx,
      seny,
      senz,
      senQuat__,
      senQuatDot__,
      imageType__,
      expStartTime__,
      expEndTime__,
      imageSourceInfo__,
      topLeftStartAz,
      topLeftStartEl,
      topLeftStopAz,
      topLeftStopEl,
      imageSetId__,
      imageSetLength,
      sequenceId,
      frameFOVWidth,
      frameFOVHeight,
      pixelFOVWidth,
      pixelFOVHeight,
      frameWidthPixels,
      frameHeightPixels,
      pixelBitDepth,
      annotationKey__,
      calibrationKey__,
      filename__,
      filesize,
      checksumValue__,
      transactionId__,
      tags__,
      source__,
      origin__,
      origNetwork__,
      sourceDL__,
      description__,
      dataMode,
      createdAt__,
      createdBy__);
}

inline const SkyImagery_Abridged *GetSkyImagery_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<SkyImagery_Abridged>(buf);
}

inline const SkyImagery_Abridged *GetSizePrefixedSkyImagery_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<SkyImagery_Abridged>(buf);
}

inline const char *SkyImagery_AbridgedIdentifier() {
  return "SKYI";
}

inline bool SkyImagery_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SkyImagery_AbridgedIdentifier());
}

inline bool SizePrefixedSkyImagery_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, SkyImagery_AbridgedIdentifier(), true);
}

inline bool VerifySkyImagery_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SkyImagery_Abridged>(SkyImagery_AbridgedIdentifier());
}

inline bool VerifySizePrefixedSkyImagery_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SkyImagery_Abridged>(SkyImagery_AbridgedIdentifier());
}

inline void FinishSkyImagery_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SkyImagery_Abridged> root) {
  fbb.Finish(root, SkyImagery_AbridgedIdentifier());
}

inline void FinishSizePrefixedSkyImagery_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<SkyImagery_Abridged> root) {
  fbb.FinishSizePrefixed(root, SkyImagery_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
