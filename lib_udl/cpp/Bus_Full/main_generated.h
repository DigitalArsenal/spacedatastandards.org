// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Bus_Full;
struct Bus_FullBuilder;

enum Bus_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Bus_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Bus_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Bus_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Bus_Full_dataMode_Enum_EXERCISE = 3,
  Bus_Full_dataMode_Enum_MIN = Bus_Full_dataMode_Enum_REAL,
  Bus_Full_dataMode_Enum_MAX = Bus_Full_dataMode_Enum_EXERCISE
};

inline const Bus_Full_dataMode_Enum (&EnumValuesBus_Full_dataMode_Enum())[4] {
  static const Bus_Full_dataMode_Enum values[] = {
    Bus_Full_dataMode_Enum_REAL,
    Bus_Full_dataMode_Enum_TEST,
    Bus_Full_dataMode_Enum_SIMULATED,
    Bus_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesBus_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameBus_Full_dataMode_Enum(Bus_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Bus_Full_dataMode_Enum_REAL, Bus_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesBus_Full_dataMode_Enum()[index];
}

/// /// A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
struct Bus_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Bus_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_IDENTITY = 10,
    VT_TYPE = 12,
    VT_MAXLAUNCHMASSLOWER = 14,
    VT_MAXLAUNCHMASSUPPER = 16,
    VT_MAXBOLSTATIONMASS = 18,
    VT_AVGPAYLOADMASS = 20,
    VT_MAXPAYLOADMASS = 22,
    VT_MINDRYMASS = 24,
    VT_AVGDRYMASS = 26,
    VT_MEDIANDRYMASS = 28,
    VT_MAXDRYMASS = 30,
    VT_MINWETMASS = 32,
    VT_AVGWETMASS = 34,
    VT_MEDIANWETMASS = 36,
    VT_MAXWETMASS = 38,
    VT_MAXBOLPOWERLOWER = 40,
    VT_MAXBOLPOWERUPPER = 42,
    VT_MAXEOLPOWERLOWER = 44,
    VT_MAXEOLPOWERUPPER = 46,
    VT_AVGSPACECRAFTPOWER = 48,
    VT_MAXSPACECRAFTPOWER = 50,
    VT_OAPSPACECRAFTPOWER = 52,
    VT_AVGPAYLOADPOWER = 54,
    VT_MAXPAYLOADPOWER = 56,
    VT_OAPPAYLOADPOWER = 58,
    VT_BODYDIMENSIONX = 60,
    VT_BODYDIMENSIONY = 62,
    VT_BODYDIMENSIONZ = 64,
    VT_PAYLOADDIMENSIONX = 66,
    VT_PAYLOADDIMENSIONY = 68,
    VT_PAYLOADDIMENSIONZ = 70,
    VT_PAYLOADVOLUME = 72,
    VT_LAUNCHENVELOPEDIMENSIONX = 74,
    VT_LAUNCHENVELOPEDIMENSIONY = 76,
    VT_LAUNCHENVELOPEDIMENSIONZ = 78,
    VT_NUMORBITTYPE = 80,
    VT_ORBITTYPES = 82,
    VT_TELEMETRYTRACKINGMANUFACTURERORGID = 84,
    VT_MAINCOMPUTERMANUFACTURERORGID = 86,
    VT_MANUFACTURERORGID = 88,
    VT_BUSKITDESIGNERORGID = 90,
    VT_COUNTRYCODE = 92,
    VT_MASSCATEGORY = 94,
    VT_POWERCATEGORY = 96,
    VT_GENERIC = 98,
    VT_DESCRIPTION = 100,
    VT_AOCSNOTES = 102,
    VT_SOURCE = 104,
    VT_ORIGIN = 106,
    VT_ORIGNETWORK = 108,
    VT_DATAMODE = 110,
    VT_CREATEDAT = 112,
    VT_CREATEDBY = 114,
    VT_UPDATEDAT = 116,
    VT_UPDATEDBY = 118,
    VT_ENTITY = 120
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: BUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Name of this bus.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// ID of the parent entity for this bus.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idEntity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// Type of this bus.
  /// Example: /// Example: Example type
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Maximum mass at launch, lower bounds, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxLaunchMassLower() const {
    return GetField<double>(VT_MAXLAUNCHMASSLOWER, 0.0);
  }
  /// Maximum mass at launch, upper bounds, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxLaunchMassUpper() const {
    return GetField<double>(VT_MAXLAUNCHMASSUPPER, 0.0);
  }
  /// Maximum mass on station at beginning of life, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxBOLStationMass() const {
    return GetField<double>(VT_MAXBOLSTATIONMASS, 0.0);
  }
  /// Average mass available on this bus for payloads, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double avgPayloadMass() const {
    return GetField<double>(VT_AVGPAYLOADMASS, 0.0);
  }
  /// Maximum payload mass available, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxPayloadMass() const {
    return GetField<double>(VT_MAXPAYLOADMASS, 0.0);
  }
  /// Minimum mass of this bus without payloads or fuel, in kilograms.
  /// Example: /// Example: 2858.1
  /// Constraints: No constraints specified.
  double minDryMass() const {
    return GetField<double>(VT_MINDRYMASS, 0.0);
  }
  /// Average mass of this bus without payloads or fuel, in kilograms.
  /// Example: /// Example: 2879.1
  /// Constraints: No constraints specified.
  double avgDryMass() const {
    return GetField<double>(VT_AVGDRYMASS, 0.0);
  }
  /// Median mass of this bus without payloads or fuel, in kilograms.
  /// Example: /// Example: 2950.1
  /// Constraints: No constraints specified.
  double medianDryMass() const {
    return GetField<double>(VT_MEDIANDRYMASS, 0.0);
  }
  /// Maximum mass of this bus without payloads or fuel, in kilograms.
  /// Example: /// Example: 2900.1
  /// Constraints: No constraints specified.
  double maxDryMass() const {
    return GetField<double>(VT_MAXDRYMASS, 0.0);
  }
  /// Minimum mass of this bus with fuel, but without payloads, in kilograms.
  /// Example: /// Example: 5192.1
  /// Constraints: No constraints specified.
  double minWetMass() const {
    return GetField<double>(VT_MINWETMASS, 0.0);
  }
  /// Average mass of this bus with fuel, but without payloads, in kilograms.
  /// Example: /// Example: 5246.1
  /// Constraints: No constraints specified.
  double avgWetMass() const {
    return GetField<double>(VT_AVGWETMASS, 0.0);
  }
  /// Median mass of this bus with fuel, but without payloads, in kilograms.
  /// Example: /// Example: 5260.1
  /// Constraints: No constraints specified.
  double medianWetMass() const {
    return GetField<double>(VT_MEDIANWETMASS, 0.0);
  }
  /// Maximum mass of this bus with fuel, but without payloads, in kilograms.
  /// Example: /// Example: 5300.0
  /// Constraints: No constraints specified.
  double maxWetMass() const {
    return GetField<double>(VT_MAXWETMASS, 0.0);
  }
  /// Maximum power at beginning of life, lower bounds, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxBOLPowerLower() const {
    return GetField<double>(VT_MAXBOLPOWERLOWER, 0.0);
  }
  /// Maximum power at beginning of life, upper bounds, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxBOLPowerUpper() const {
    return GetField<double>(VT_MAXBOLPOWERUPPER, 0.0);
  }
  /// Maximum power at end of life, lower bounds, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxEOLPowerLower() const {
    return GetField<double>(VT_MAXEOLPOWERLOWER, 0.0);
  }
  /// Maximum power at end of life, upper bounds, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxEOLPowerUpper() const {
    return GetField<double>(VT_MAXEOLPOWERUPPER, 0.0);
  }
  /// Average power available on this bus, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double avgSpacecraftPower() const {
    return GetField<double>(VT_AVGSPACECRAFTPOWER, 0.0);
  }
  /// Maximum power available on this bus, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxSpacecraftPower() const {
    return GetField<double>(VT_MAXSPACECRAFTPOWER, 0.0);
  }
  /// Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double oapSpacecraftPower() const {
    return GetField<double>(VT_OAPSPACECRAFTPOWER, 0.0);
  }
  /// Average power available on this bus for payloads, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double avgPayloadPower() const {
    return GetField<double>(VT_AVGPAYLOADPOWER, 0.0);
  }
  /// Maximum payload power available, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double maxPayloadPower() const {
    return GetField<double>(VT_MAXPAYLOADPOWER, 0.0);
  }
  /// Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double oapPayloadPower() const {
    return GetField<double>(VT_OAPPAYLOADPOWER, 0.0);
  }
  /// Body dimension in X direction pertaining to length, in meters.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double bodyDimensionX() const {
    return GetField<double>(VT_BODYDIMENSIONX, 0.0);
  }
  /// Body dimension in Y direction pertaining to height, in meters.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double bodyDimensionY() const {
    return GetField<double>(VT_BODYDIMENSIONY, 0.0);
  }
  /// Body dimension in Z direction pertaining to width, in meters.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double bodyDimensionZ() const {
    return GetField<double>(VT_BODYDIMENSIONZ, 0.0);
  }
  /// The radial dimension available on this bus for payloads, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double payloadDimensionX() const {
    return GetField<double>(VT_PAYLOADDIMENSIONX, 0.0);
  }
  /// The in-track dimension available on this bus for payloads, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double payloadDimensionY() const {
    return GetField<double>(VT_PAYLOADDIMENSIONY, 0.0);
  }
  /// The cross-track dimension available on this bus for payloads, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double payloadDimensionZ() const {
    return GetField<double>(VT_PAYLOADDIMENSIONZ, 0.0);
  }
  /// The volume available on this bus for payloads, in cubic meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double payloadVolume() const {
    return GetField<double>(VT_PAYLOADVOLUME, 0.0);
  }
  /// Launch envelope dimension in X direction, in meters.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double launchEnvelopeDimensionX() const {
    return GetField<double>(VT_LAUNCHENVELOPEDIMENSIONX, 0.0);
  }
  /// Launch envelope dimension in Y direction, in meters.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double launchEnvelopeDimensionY() const {
    return GetField<double>(VT_LAUNCHENVELOPEDIMENSIONY, 0.0);
  }
  /// Launch envelope dimension in Z direction, in meters.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  double launchEnvelopeDimensionZ() const {
    return GetField<double>(VT_LAUNCHENVELOPEDIMENSIONZ, 0.0);
  }
  /// The number of orbit types this bus can support.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t numOrbitType() const {
    return GetField<int32_t>(VT_NUMORBITTYPE, 0);
  }
  /// Array of orbit types this bus can support (e.g. GEO, LEO, etc.). Must contain the same number of elements as the value of numOrbitType.
  /// Example: /// Example: ['LEO', 'HEO', 'GEO']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *orbitTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ORBITTYPES);
  }
  /// Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
  /// Example: /// Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *telemetryTrackingManufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TELEMETRYTRACKINGMANUFACTURERORGID);
  }
  /// Unique identifier of the organization which manufactures the main onboard computer for this bus.
  /// Example: /// Example: MAINCOMPUTERMANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *mainComputerManufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MAINCOMPUTERMANUFACTURERORGID);
  }
  /// Unique identifier of the organization which manufactures this bus.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Unique identifier of the organization which designs the bus kit.
  /// Example: /// Example: BUSKITDESIGNERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *busKitDesignerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BUSKITDESIGNERORGID);
  }
  /// Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *countryCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COUNTRYCODE);
  }
  /// Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
  /// Example: /// Example: Nanosatellite
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *massCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MASSCATEGORY);
  }
  /// Power category of this bus (e.g. 0-1kW low power, etc).
  /// Example: /// Example: low power
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *powerCategory() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POWERCATEGORY);
  }
  /// Boolean indicating if this bus is generic.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool generic() const {
    return GetField<uint8_t>(VT_GENERIC, 0) != 0;
  }
  /// Notes/description of the bus.
  /// Example: /// Example: Dedicated small spacecraft bus.
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Attitude and Orbital Control Notes/description for the bus.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *aocsNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AOCSNOTES);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Bus_Full_dataMode_Enum dataMode() const {
    return static_cast<Bus_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *entity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(idEntity()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<double>(verifier, VT_MAXLAUNCHMASSLOWER, 8) &&
           VerifyField<double>(verifier, VT_MAXLAUNCHMASSUPPER, 8) &&
           VerifyField<double>(verifier, VT_MAXBOLSTATIONMASS, 8) &&
           VerifyField<double>(verifier, VT_AVGPAYLOADMASS, 8) &&
           VerifyField<double>(verifier, VT_MAXPAYLOADMASS, 8) &&
           VerifyField<double>(verifier, VT_MINDRYMASS, 8) &&
           VerifyField<double>(verifier, VT_AVGDRYMASS, 8) &&
           VerifyField<double>(verifier, VT_MEDIANDRYMASS, 8) &&
           VerifyField<double>(verifier, VT_MAXDRYMASS, 8) &&
           VerifyField<double>(verifier, VT_MINWETMASS, 8) &&
           VerifyField<double>(verifier, VT_AVGWETMASS, 8) &&
           VerifyField<double>(verifier, VT_MEDIANWETMASS, 8) &&
           VerifyField<double>(verifier, VT_MAXWETMASS, 8) &&
           VerifyField<double>(verifier, VT_MAXBOLPOWERLOWER, 8) &&
           VerifyField<double>(verifier, VT_MAXBOLPOWERUPPER, 8) &&
           VerifyField<double>(verifier, VT_MAXEOLPOWERLOWER, 8) &&
           VerifyField<double>(verifier, VT_MAXEOLPOWERUPPER, 8) &&
           VerifyField<double>(verifier, VT_AVGSPACECRAFTPOWER, 8) &&
           VerifyField<double>(verifier, VT_MAXSPACECRAFTPOWER, 8) &&
           VerifyField<double>(verifier, VT_OAPSPACECRAFTPOWER, 8) &&
           VerifyField<double>(verifier, VT_AVGPAYLOADPOWER, 8) &&
           VerifyField<double>(verifier, VT_MAXPAYLOADPOWER, 8) &&
           VerifyField<double>(verifier, VT_OAPPAYLOADPOWER, 8) &&
           VerifyField<double>(verifier, VT_BODYDIMENSIONX, 8) &&
           VerifyField<double>(verifier, VT_BODYDIMENSIONY, 8) &&
           VerifyField<double>(verifier, VT_BODYDIMENSIONZ, 8) &&
           VerifyField<double>(verifier, VT_PAYLOADDIMENSIONX, 8) &&
           VerifyField<double>(verifier, VT_PAYLOADDIMENSIONY, 8) &&
           VerifyField<double>(verifier, VT_PAYLOADDIMENSIONZ, 8) &&
           VerifyField<double>(verifier, VT_PAYLOADVOLUME, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHENVELOPEDIMENSIONX, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHENVELOPEDIMENSIONY, 8) &&
           VerifyField<double>(verifier, VT_LAUNCHENVELOPEDIMENSIONZ, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMORBITTYPE, 4) &&
           VerifyOffset(verifier, VT_ORBITTYPES) &&
           verifier.VerifyVector(orbitTypes()) &&
           verifier.VerifyVectorOfStrings(orbitTypes()) &&
           VerifyOffset(verifier, VT_TELEMETRYTRACKINGMANUFACTURERORGID) &&
           verifier.VerifyString(telemetryTrackingManufacturerOrgId()) &&
           VerifyOffset(verifier, VT_MAINCOMPUTERMANUFACTURERORGID) &&
           verifier.VerifyString(mainComputerManufacturerOrgId()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_BUSKITDESIGNERORGID) &&
           verifier.VerifyString(busKitDesignerOrgId()) &&
           VerifyOffset(verifier, VT_COUNTRYCODE) &&
           verifier.VerifyString(countryCode()) &&
           VerifyOffset(verifier, VT_MASSCATEGORY) &&
           verifier.VerifyString(massCategory()) &&
           VerifyOffset(verifier, VT_POWERCATEGORY) &&
           verifier.VerifyString(powerCategory()) &&
           VerifyField<uint8_t>(verifier, VT_GENERIC, 1) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_AOCSNOTES) &&
           verifier.VerifyString(aocsNotes()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyString(entity()) &&
           verifier.EndTable();
  }
};

struct Bus_FullBuilder {
  typedef Bus_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Bus_Full::VT_ID, id);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Bus_Full::VT_NAME, name);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Bus_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idEntity(::flatbuffers::Offset<::flatbuffers::String> idEntity) {
    fbb_.AddOffset(Bus_Full::VT_IDENTITY, idEntity);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Bus_Full::VT_TYPE, type);
  }
  void add_maxLaunchMassLower(double maxLaunchMassLower) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXLAUNCHMASSLOWER, maxLaunchMassLower, 0.0);
  }
  void add_maxLaunchMassUpper(double maxLaunchMassUpper) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXLAUNCHMASSUPPER, maxLaunchMassUpper, 0.0);
  }
  void add_maxBOLStationMass(double maxBOLStationMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXBOLSTATIONMASS, maxBOLStationMass, 0.0);
  }
  void add_avgPayloadMass(double avgPayloadMass) {
    fbb_.AddElement<double>(Bus_Full::VT_AVGPAYLOADMASS, avgPayloadMass, 0.0);
  }
  void add_maxPayloadMass(double maxPayloadMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXPAYLOADMASS, maxPayloadMass, 0.0);
  }
  void add_minDryMass(double minDryMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MINDRYMASS, minDryMass, 0.0);
  }
  void add_avgDryMass(double avgDryMass) {
    fbb_.AddElement<double>(Bus_Full::VT_AVGDRYMASS, avgDryMass, 0.0);
  }
  void add_medianDryMass(double medianDryMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MEDIANDRYMASS, medianDryMass, 0.0);
  }
  void add_maxDryMass(double maxDryMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXDRYMASS, maxDryMass, 0.0);
  }
  void add_minWetMass(double minWetMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MINWETMASS, minWetMass, 0.0);
  }
  void add_avgWetMass(double avgWetMass) {
    fbb_.AddElement<double>(Bus_Full::VT_AVGWETMASS, avgWetMass, 0.0);
  }
  void add_medianWetMass(double medianWetMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MEDIANWETMASS, medianWetMass, 0.0);
  }
  void add_maxWetMass(double maxWetMass) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXWETMASS, maxWetMass, 0.0);
  }
  void add_maxBOLPowerLower(double maxBOLPowerLower) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXBOLPOWERLOWER, maxBOLPowerLower, 0.0);
  }
  void add_maxBOLPowerUpper(double maxBOLPowerUpper) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXBOLPOWERUPPER, maxBOLPowerUpper, 0.0);
  }
  void add_maxEOLPowerLower(double maxEOLPowerLower) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXEOLPOWERLOWER, maxEOLPowerLower, 0.0);
  }
  void add_maxEOLPowerUpper(double maxEOLPowerUpper) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXEOLPOWERUPPER, maxEOLPowerUpper, 0.0);
  }
  void add_avgSpacecraftPower(double avgSpacecraftPower) {
    fbb_.AddElement<double>(Bus_Full::VT_AVGSPACECRAFTPOWER, avgSpacecraftPower, 0.0);
  }
  void add_maxSpacecraftPower(double maxSpacecraftPower) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXSPACECRAFTPOWER, maxSpacecraftPower, 0.0);
  }
  void add_oapSpacecraftPower(double oapSpacecraftPower) {
    fbb_.AddElement<double>(Bus_Full::VT_OAPSPACECRAFTPOWER, oapSpacecraftPower, 0.0);
  }
  void add_avgPayloadPower(double avgPayloadPower) {
    fbb_.AddElement<double>(Bus_Full::VT_AVGPAYLOADPOWER, avgPayloadPower, 0.0);
  }
  void add_maxPayloadPower(double maxPayloadPower) {
    fbb_.AddElement<double>(Bus_Full::VT_MAXPAYLOADPOWER, maxPayloadPower, 0.0);
  }
  void add_oapPayloadPower(double oapPayloadPower) {
    fbb_.AddElement<double>(Bus_Full::VT_OAPPAYLOADPOWER, oapPayloadPower, 0.0);
  }
  void add_bodyDimensionX(double bodyDimensionX) {
    fbb_.AddElement<double>(Bus_Full::VT_BODYDIMENSIONX, bodyDimensionX, 0.0);
  }
  void add_bodyDimensionY(double bodyDimensionY) {
    fbb_.AddElement<double>(Bus_Full::VT_BODYDIMENSIONY, bodyDimensionY, 0.0);
  }
  void add_bodyDimensionZ(double bodyDimensionZ) {
    fbb_.AddElement<double>(Bus_Full::VT_BODYDIMENSIONZ, bodyDimensionZ, 0.0);
  }
  void add_payloadDimensionX(double payloadDimensionX) {
    fbb_.AddElement<double>(Bus_Full::VT_PAYLOADDIMENSIONX, payloadDimensionX, 0.0);
  }
  void add_payloadDimensionY(double payloadDimensionY) {
    fbb_.AddElement<double>(Bus_Full::VT_PAYLOADDIMENSIONY, payloadDimensionY, 0.0);
  }
  void add_payloadDimensionZ(double payloadDimensionZ) {
    fbb_.AddElement<double>(Bus_Full::VT_PAYLOADDIMENSIONZ, payloadDimensionZ, 0.0);
  }
  void add_payloadVolume(double payloadVolume) {
    fbb_.AddElement<double>(Bus_Full::VT_PAYLOADVOLUME, payloadVolume, 0.0);
  }
  void add_launchEnvelopeDimensionX(double launchEnvelopeDimensionX) {
    fbb_.AddElement<double>(Bus_Full::VT_LAUNCHENVELOPEDIMENSIONX, launchEnvelopeDimensionX, 0.0);
  }
  void add_launchEnvelopeDimensionY(double launchEnvelopeDimensionY) {
    fbb_.AddElement<double>(Bus_Full::VT_LAUNCHENVELOPEDIMENSIONY, launchEnvelopeDimensionY, 0.0);
  }
  void add_launchEnvelopeDimensionZ(double launchEnvelopeDimensionZ) {
    fbb_.AddElement<double>(Bus_Full::VT_LAUNCHENVELOPEDIMENSIONZ, launchEnvelopeDimensionZ, 0.0);
  }
  void add_numOrbitType(int32_t numOrbitType) {
    fbb_.AddElement<int32_t>(Bus_Full::VT_NUMORBITTYPE, numOrbitType, 0);
  }
  void add_orbitTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> orbitTypes) {
    fbb_.AddOffset(Bus_Full::VT_ORBITTYPES, orbitTypes);
  }
  void add_telemetryTrackingManufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> telemetryTrackingManufacturerOrgId) {
    fbb_.AddOffset(Bus_Full::VT_TELEMETRYTRACKINGMANUFACTURERORGID, telemetryTrackingManufacturerOrgId);
  }
  void add_mainComputerManufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> mainComputerManufacturerOrgId) {
    fbb_.AddOffset(Bus_Full::VT_MAINCOMPUTERMANUFACTURERORGID, mainComputerManufacturerOrgId);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(Bus_Full::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_busKitDesignerOrgId(::flatbuffers::Offset<::flatbuffers::String> busKitDesignerOrgId) {
    fbb_.AddOffset(Bus_Full::VT_BUSKITDESIGNERORGID, busKitDesignerOrgId);
  }
  void add_countryCode(::flatbuffers::Offset<::flatbuffers::String> countryCode) {
    fbb_.AddOffset(Bus_Full::VT_COUNTRYCODE, countryCode);
  }
  void add_massCategory(::flatbuffers::Offset<::flatbuffers::String> massCategory) {
    fbb_.AddOffset(Bus_Full::VT_MASSCATEGORY, massCategory);
  }
  void add_powerCategory(::flatbuffers::Offset<::flatbuffers::String> powerCategory) {
    fbb_.AddOffset(Bus_Full::VT_POWERCATEGORY, powerCategory);
  }
  void add_generic(bool generic) {
    fbb_.AddElement<uint8_t>(Bus_Full::VT_GENERIC, static_cast<uint8_t>(generic), 0);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(Bus_Full::VT_DESCRIPTION, description);
  }
  void add_aocsNotes(::flatbuffers::Offset<::flatbuffers::String> aocsNotes) {
    fbb_.AddOffset(Bus_Full::VT_AOCSNOTES, aocsNotes);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Bus_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Bus_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Bus_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Bus_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Bus_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Bus_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Bus_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Bus_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Bus_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_entity(::flatbuffers::Offset<::flatbuffers::String> entity) {
    fbb_.AddOffset(Bus_Full::VT_ENTITY, entity);
  }
  explicit Bus_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Bus_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Bus_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Bus_Full> CreateBus_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEntity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    double maxLaunchMassLower = 0.0,
    double maxLaunchMassUpper = 0.0,
    double maxBOLStationMass = 0.0,
    double avgPayloadMass = 0.0,
    double maxPayloadMass = 0.0,
    double minDryMass = 0.0,
    double avgDryMass = 0.0,
    double medianDryMass = 0.0,
    double maxDryMass = 0.0,
    double minWetMass = 0.0,
    double avgWetMass = 0.0,
    double medianWetMass = 0.0,
    double maxWetMass = 0.0,
    double maxBOLPowerLower = 0.0,
    double maxBOLPowerUpper = 0.0,
    double maxEOLPowerLower = 0.0,
    double maxEOLPowerUpper = 0.0,
    double avgSpacecraftPower = 0.0,
    double maxSpacecraftPower = 0.0,
    double oapSpacecraftPower = 0.0,
    double avgPayloadPower = 0.0,
    double maxPayloadPower = 0.0,
    double oapPayloadPower = 0.0,
    double bodyDimensionX = 0.0,
    double bodyDimensionY = 0.0,
    double bodyDimensionZ = 0.0,
    double payloadDimensionX = 0.0,
    double payloadDimensionY = 0.0,
    double payloadDimensionZ = 0.0,
    double payloadVolume = 0.0,
    double launchEnvelopeDimensionX = 0.0,
    double launchEnvelopeDimensionY = 0.0,
    double launchEnvelopeDimensionZ = 0.0,
    int32_t numOrbitType = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> orbitTypes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> telemetryTrackingManufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> mainComputerManufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> busKitDesignerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> countryCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> massCategory = 0,
    ::flatbuffers::Offset<::flatbuffers::String> powerCategory = 0,
    bool generic = false,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aocsNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Bus_Full_dataMode_Enum dataMode = Bus_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity = 0) {
  Bus_FullBuilder builder_(_fbb);
  builder_.add_launchEnvelopeDimensionZ(launchEnvelopeDimensionZ);
  builder_.add_launchEnvelopeDimensionY(launchEnvelopeDimensionY);
  builder_.add_launchEnvelopeDimensionX(launchEnvelopeDimensionX);
  builder_.add_payloadVolume(payloadVolume);
  builder_.add_payloadDimensionZ(payloadDimensionZ);
  builder_.add_payloadDimensionY(payloadDimensionY);
  builder_.add_payloadDimensionX(payloadDimensionX);
  builder_.add_bodyDimensionZ(bodyDimensionZ);
  builder_.add_bodyDimensionY(bodyDimensionY);
  builder_.add_bodyDimensionX(bodyDimensionX);
  builder_.add_oapPayloadPower(oapPayloadPower);
  builder_.add_maxPayloadPower(maxPayloadPower);
  builder_.add_avgPayloadPower(avgPayloadPower);
  builder_.add_oapSpacecraftPower(oapSpacecraftPower);
  builder_.add_maxSpacecraftPower(maxSpacecraftPower);
  builder_.add_avgSpacecraftPower(avgSpacecraftPower);
  builder_.add_maxEOLPowerUpper(maxEOLPowerUpper);
  builder_.add_maxEOLPowerLower(maxEOLPowerLower);
  builder_.add_maxBOLPowerUpper(maxBOLPowerUpper);
  builder_.add_maxBOLPowerLower(maxBOLPowerLower);
  builder_.add_maxWetMass(maxWetMass);
  builder_.add_medianWetMass(medianWetMass);
  builder_.add_avgWetMass(avgWetMass);
  builder_.add_minWetMass(minWetMass);
  builder_.add_maxDryMass(maxDryMass);
  builder_.add_medianDryMass(medianDryMass);
  builder_.add_avgDryMass(avgDryMass);
  builder_.add_minDryMass(minDryMass);
  builder_.add_maxPayloadMass(maxPayloadMass);
  builder_.add_avgPayloadMass(avgPayloadMass);
  builder_.add_maxBOLStationMass(maxBOLStationMass);
  builder_.add_maxLaunchMassUpper(maxLaunchMassUpper);
  builder_.add_maxLaunchMassLower(maxLaunchMassLower);
  builder_.add_entity(entity);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_aocsNotes(aocsNotes);
  builder_.add_description(description);
  builder_.add_powerCategory(powerCategory);
  builder_.add_massCategory(massCategory);
  builder_.add_countryCode(countryCode);
  builder_.add_busKitDesignerOrgId(busKitDesignerOrgId);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_mainComputerManufacturerOrgId(mainComputerManufacturerOrgId);
  builder_.add_telemetryTrackingManufacturerOrgId(telemetryTrackingManufacturerOrgId);
  builder_.add_orbitTypes(orbitTypes);
  builder_.add_numOrbitType(numOrbitType);
  builder_.add_type(type);
  builder_.add_idEntity(idEntity);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_generic(generic);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Bus_Full> CreateBus_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const char *classificationMarking = nullptr,
    const char *idEntity = nullptr,
    const char *type = nullptr,
    double maxLaunchMassLower = 0.0,
    double maxLaunchMassUpper = 0.0,
    double maxBOLStationMass = 0.0,
    double avgPayloadMass = 0.0,
    double maxPayloadMass = 0.0,
    double minDryMass = 0.0,
    double avgDryMass = 0.0,
    double medianDryMass = 0.0,
    double maxDryMass = 0.0,
    double minWetMass = 0.0,
    double avgWetMass = 0.0,
    double medianWetMass = 0.0,
    double maxWetMass = 0.0,
    double maxBOLPowerLower = 0.0,
    double maxBOLPowerUpper = 0.0,
    double maxEOLPowerLower = 0.0,
    double maxEOLPowerUpper = 0.0,
    double avgSpacecraftPower = 0.0,
    double maxSpacecraftPower = 0.0,
    double oapSpacecraftPower = 0.0,
    double avgPayloadPower = 0.0,
    double maxPayloadPower = 0.0,
    double oapPayloadPower = 0.0,
    double bodyDimensionX = 0.0,
    double bodyDimensionY = 0.0,
    double bodyDimensionZ = 0.0,
    double payloadDimensionX = 0.0,
    double payloadDimensionY = 0.0,
    double payloadDimensionZ = 0.0,
    double payloadVolume = 0.0,
    double launchEnvelopeDimensionX = 0.0,
    double launchEnvelopeDimensionY = 0.0,
    double launchEnvelopeDimensionZ = 0.0,
    int32_t numOrbitType = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *orbitTypes = nullptr,
    const char *telemetryTrackingManufacturerOrgId = nullptr,
    const char *mainComputerManufacturerOrgId = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *busKitDesignerOrgId = nullptr,
    const char *countryCode = nullptr,
    const char *massCategory = nullptr,
    const char *powerCategory = nullptr,
    bool generic = false,
    const char *description = nullptr,
    const char *aocsNotes = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Bus_Full_dataMode_Enum dataMode = Bus_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *entity = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idEntity__ = idEntity ? _fbb.CreateString(idEntity) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto orbitTypes__ = orbitTypes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*orbitTypes) : 0;
  auto telemetryTrackingManufacturerOrgId__ = telemetryTrackingManufacturerOrgId ? _fbb.CreateString(telemetryTrackingManufacturerOrgId) : 0;
  auto mainComputerManufacturerOrgId__ = mainComputerManufacturerOrgId ? _fbb.CreateString(mainComputerManufacturerOrgId) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto busKitDesignerOrgId__ = busKitDesignerOrgId ? _fbb.CreateString(busKitDesignerOrgId) : 0;
  auto countryCode__ = countryCode ? _fbb.CreateString(countryCode) : 0;
  auto massCategory__ = massCategory ? _fbb.CreateString(massCategory) : 0;
  auto powerCategory__ = powerCategory ? _fbb.CreateString(powerCategory) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto aocsNotes__ = aocsNotes ? _fbb.CreateString(aocsNotes) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto entity__ = entity ? _fbb.CreateString(entity) : 0;
  return CreateBus_Full(
      _fbb,
      id__,
      name__,
      classificationMarking__,
      idEntity__,
      type__,
      maxLaunchMassLower,
      maxLaunchMassUpper,
      maxBOLStationMass,
      avgPayloadMass,
      maxPayloadMass,
      minDryMass,
      avgDryMass,
      medianDryMass,
      maxDryMass,
      minWetMass,
      avgWetMass,
      medianWetMass,
      maxWetMass,
      maxBOLPowerLower,
      maxBOLPowerUpper,
      maxEOLPowerLower,
      maxEOLPowerUpper,
      avgSpacecraftPower,
      maxSpacecraftPower,
      oapSpacecraftPower,
      avgPayloadPower,
      maxPayloadPower,
      oapPayloadPower,
      bodyDimensionX,
      bodyDimensionY,
      bodyDimensionZ,
      payloadDimensionX,
      payloadDimensionY,
      payloadDimensionZ,
      payloadVolume,
      launchEnvelopeDimensionX,
      launchEnvelopeDimensionY,
      launchEnvelopeDimensionZ,
      numOrbitType,
      orbitTypes__,
      telemetryTrackingManufacturerOrgId__,
      mainComputerManufacturerOrgId__,
      manufacturerOrgId__,
      busKitDesignerOrgId__,
      countryCode__,
      massCategory__,
      powerCategory__,
      generic,
      description__,
      aocsNotes__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      entity__);
}

inline const Bus_Full *GetBus_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Bus_Full>(buf);
}

inline const Bus_Full *GetSizePrefixedBus_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Bus_Full>(buf);
}

inline const char *Bus_FullIdentifier() {
  return "BUSF";
}

inline bool Bus_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Bus_FullIdentifier());
}

inline bool SizePrefixedBus_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Bus_FullIdentifier(), true);
}

inline bool VerifyBus_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Bus_Full>(Bus_FullIdentifier());
}

inline bool VerifySizePrefixedBus_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Bus_Full>(Bus_FullIdentifier());
}

inline void FinishBus_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bus_Full> root) {
  fbb.Finish(root, Bus_FullIdentifier());
}

inline void FinishSizePrefixedBus_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Bus_Full> root) {
  fbb.FinishSizePrefixed(root, Bus_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
