// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationDensityProfileQuasiParabolicSegment_Abridged;
struct IonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuilder;

/// /// A quasi-parabolic segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C‚Äù. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
struct IonoObservationDensityProfileQuasiParabolicSegment_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INDEX = 4,
    VT_RB = 6,
    VT_RE = 8,
    VT_A = 10,
    VT_B = 12,
    VT_C = 14,
    VT_ERROR = 16
  };
  /// The index of this segment in the list, from 1 to NumSegments.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t index() const {
    return GetField<int32_t>(VT_INDEX, 0);
  }
  /// Starting range of the segment, in kilometers from the Earth's center.
  /// Example: /// Example: 6460.1
  /// Constraints: No constraints specified.
  double rb() const {
    return GetField<double>(VT_RB, 0.0);
  }
  /// Ending range of the segment, in kilometers from the Earth's center.
  /// Example: /// Example: 6480.001
  /// Constraints: No constraints specified.
  double re() const {
    return GetField<double>(VT_RE, 0.0);
  }
  /// Coefficient A.
  /// Example: /// Example: -550273940000
  /// Constraints: No constraints specified.
  double a() const {
    return GetField<double>(VT_A, 0.0);
  }
  /// Coefficient B.
  /// Example: /// Example: 169837632
  /// Constraints: No constraints specified.
  double b() const {
    return GetField<double>(VT_B, 0.0);
  }
  /// Coefficient C.
  /// Example: /// Example: 13104.63
  /// Constraints: No constraints specified.
  double c() const {
    return GetField<double>(VT_C, 0.0);
  }
  /// Best-fit error.
  /// Example: /// Example: 0.0016
  /// Constraints: No constraints specified.
  double error() const {
    return GetField<double>(VT_ERROR, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_INDEX, 4) &&
           VerifyField<double>(verifier, VT_RB, 8) &&
           VerifyField<double>(verifier, VT_RE, 8) &&
           VerifyField<double>(verifier, VT_A, 8) &&
           VerifyField<double>(verifier, VT_B, 8) &&
           VerifyField<double>(verifier, VT_C, 8) &&
           VerifyField<double>(verifier, VT_ERROR, 8) &&
           verifier.EndTable();
  }
};

struct IonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuilder {
  typedef IonoObservationDensityProfileQuasiParabolicSegment_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_index(int32_t index) {
    fbb_.AddElement<int32_t>(IonoObservationDensityProfileQuasiParabolicSegment_Abridged::VT_INDEX, index, 0);
  }
  void add_rb(double rb) {
    fbb_.AddElement<double>(IonoObservationDensityProfileQuasiParabolicSegment_Abridged::VT_RB, rb, 0.0);
  }
  void add_re(double re) {
    fbb_.AddElement<double>(IonoObservationDensityProfileQuasiParabolicSegment_Abridged::VT_RE, re, 0.0);
  }
  void add_a(double a) {
    fbb_.AddElement<double>(IonoObservationDensityProfileQuasiParabolicSegment_Abridged::VT_A, a, 0.0);
  }
  void add_b(double b) {
    fbb_.AddElement<double>(IonoObservationDensityProfileQuasiParabolicSegment_Abridged::VT_B, b, 0.0);
  }
  void add_c(double c) {
    fbb_.AddElement<double>(IonoObservationDensityProfileQuasiParabolicSegment_Abridged::VT_C, c, 0.0);
  }
  void add_error(double error) {
    fbb_.AddElement<double>(IonoObservationDensityProfileQuasiParabolicSegment_Abridged::VT_ERROR, error, 0.0);
  }
  explicit IonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolicSegment_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolicSegment_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolicSegment_Abridged> CreateIonoObservationDensityProfileQuasiParabolicSegment_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t index = 0,
    double rb = 0.0,
    double re = 0.0,
    double a = 0.0,
    double b = 0.0,
    double c = 0.0,
    double error = 0.0) {
  IonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_c(c);
  builder_.add_b(b);
  builder_.add_a(a);
  builder_.add_re(re);
  builder_.add_rb(rb);
  builder_.add_index(index);
  return builder_.Finish();
}

inline const IonoObservationDensityProfileQuasiParabolicSegment_Abridged *GetIonoObservationDensityProfileQuasiParabolicSegment_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationDensityProfileQuasiParabolicSegment_Abridged>(buf);
}

inline const IonoObservationDensityProfileQuasiParabolicSegment_Abridged *GetSizePrefixedIonoObservationDensityProfileQuasiParabolicSegment_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationDensityProfileQuasiParabolicSegment_Abridged>(buf);
}

inline const char *IonoObservationDensityProfileQuasiParabolicSegment_AbridgedIdentifier() {
  return "IONO";
}

inline bool IonoObservationDensityProfileQuasiParabolicSegment_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileQuasiParabolicSegment_AbridgedIdentifier());
}

inline bool SizePrefixedIonoObservationDensityProfileQuasiParabolicSegment_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileQuasiParabolicSegment_AbridgedIdentifier(), true);
}

inline bool VerifyIonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationDensityProfileQuasiParabolicSegment_Abridged>(IonoObservationDensityProfileQuasiParabolicSegment_AbridgedIdentifier());
}

inline bool VerifySizePrefixedIonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationDensityProfileQuasiParabolicSegment_Abridged>(IonoObservationDensityProfileQuasiParabolicSegment_AbridgedIdentifier());
}

inline void FinishIonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolicSegment_Abridged> root) {
  fbb.Finish(root, IonoObservationDensityProfileQuasiParabolicSegment_AbridgedIdentifier());
}

inline void FinishSizePrefixedIonoObservationDensityProfileQuasiParabolicSegment_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileQuasiParabolicSegment_Abridged> root) {
  fbb.FinishSizePrefixed(root, IonoObservationDensityProfileQuasiParabolicSegment_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
