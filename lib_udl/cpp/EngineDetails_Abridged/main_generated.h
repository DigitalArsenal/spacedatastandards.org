// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EngineDetails_Abridged;
struct EngineDetails_AbridgedBuilder;

enum EngineDetails_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  EngineDetails_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  EngineDetails_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  EngineDetails_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  EngineDetails_Abridged_dataMode_Enum_EXERCISE = 3,
  EngineDetails_Abridged_dataMode_Enum_MIN = EngineDetails_Abridged_dataMode_Enum_REAL,
  EngineDetails_Abridged_dataMode_Enum_MAX = EngineDetails_Abridged_dataMode_Enum_EXERCISE
};

inline const EngineDetails_Abridged_dataMode_Enum (&EnumValuesEngineDetails_Abridged_dataMode_Enum())[4] {
  static const EngineDetails_Abridged_dataMode_Enum values[] = {
    EngineDetails_Abridged_dataMode_Enum_REAL,
    EngineDetails_Abridged_dataMode_Enum_TEST,
    EngineDetails_Abridged_dataMode_Enum_SIMULATED,
    EngineDetails_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEngineDetails_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEngineDetails_Abridged_dataMode_Enum(EngineDetails_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, EngineDetails_Abridged_dataMode_Enum_REAL, EngineDetails_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEngineDetails_Abridged_dataMode_Enum()[index];
}

/// /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
struct EngineDetails_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EngineDetails_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDENGINE = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_FAMILY = 10,
    VT_CYCLETYPE = 12,
    VT_CHARACTERISTICTYPE = 14,
    VT_MANUFACTURERORGID = 16,
    VT_SPECIFICIMPULSE = 18,
    VT_BURNTIME = 20,
    VT_SEALEVELTHRUST = 22,
    VT_VACUUMTHRUST = 24,
    VT_CHAMBERPRESSURE = 26,
    VT_NOZZLEEXPANSIONRATIO = 28,
    VT_MAXFIRINGS = 30,
    VT_PROPELLANT = 32,
    VT_OXIDIZER = 34,
    VT_NOTES = 36,
    VT_CREATEDAT = 38,
    VT_CREATEDBY = 40,
    VT_SOURCE = 42,
    VT_ORIGIN = 44,
    VT_ORIGNETWORK = 46,
    VT_DATAMODE = 48
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ENGINEDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Identifier of the parent engine record.
  /// Example: /// Example: ENGINE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idEngine() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENGINE);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Engine type or family.
  /// Example: /// Example: ENGINE_TYPE1
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *family() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAMILY);
  }
  /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  /// Example: /// Example: Pressure Fed
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *cycleType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CYCLETYPE);
  }
  /// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
  /// Example: /// Example: Electric
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *characteristicType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CHARACTERISTICTYPE);
  }
  /// Organization ID of the engine manufacturer.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Launch engine specific impulse in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double specificImpulse() const {
    return GetField<double>(VT_SPECIFICIMPULSE, 0.0);
  }
  /// Launch engine maximum burn time in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double burnTime() const {
    return GetField<double>(VT_BURNTIME, 0.0);
  }
  /// Engine maximum thrust at sea level in Kilo-Newtons.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double seaLevelThrust() const {
    return GetField<double>(VT_SEALEVELTHRUST, 0.0);
  }
  /// Engine maximum thrust in a vacuum in Kilo-Newtons.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double vacuumThrust() const {
    return GetField<double>(VT_VACUUMTHRUST, 0.0);
  }
  /// Engine chamber pressure in bars.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double chamberPressure() const {
    return GetField<double>(VT_CHAMBERPRESSURE, 0.0);
  }
  /// Engine nozzle expansion ratio.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double nozzleExpansionRatio() const {
    return GetField<double>(VT_NOZZLEEXPANSIONRATIO, 0.0);
  }
  /// Engine maximum number of firings.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  int32_t maxFirings() const {
    return GetField<int32_t>(VT_MAXFIRINGS, 0);
  }
  /// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
  /// Example: /// Example: Liquid
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *propellant() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PROPELLANT);
  }
  /// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
  /// Example: /// Example: Liquid Oxygen
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *oxidizer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OXIDIZER);
  }
  /// Notes/Description of the engine.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  EngineDetails_Abridged_dataMode_Enum dataMode() const {
    return static_cast<EngineDetails_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDENGINE) &&
           verifier.VerifyString(idEngine()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_FAMILY) &&
           verifier.VerifyString(family()) &&
           VerifyOffset(verifier, VT_CYCLETYPE) &&
           verifier.VerifyString(cycleType()) &&
           VerifyOffset(verifier, VT_CHARACTERISTICTYPE) &&
           verifier.VerifyString(characteristicType()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyField<double>(verifier, VT_SPECIFICIMPULSE, 8) &&
           VerifyField<double>(verifier, VT_BURNTIME, 8) &&
           VerifyField<double>(verifier, VT_SEALEVELTHRUST, 8) &&
           VerifyField<double>(verifier, VT_VACUUMTHRUST, 8) &&
           VerifyField<double>(verifier, VT_CHAMBERPRESSURE, 8) &&
           VerifyField<double>(verifier, VT_NOZZLEEXPANSIONRATIO, 8) &&
           VerifyField<int32_t>(verifier, VT_MAXFIRINGS, 4) &&
           VerifyOffset(verifier, VT_PROPELLANT) &&
           verifier.VerifyString(propellant()) &&
           VerifyOffset(verifier, VT_OXIDIZER) &&
           verifier.VerifyString(oxidizer()) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct EngineDetails_AbridgedBuilder {
  typedef EngineDetails_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_ID, id);
  }
  void add_idEngine(::flatbuffers::Offset<::flatbuffers::String> idEngine) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_IDENGINE, idEngine);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_family(::flatbuffers::Offset<::flatbuffers::String> family) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_FAMILY, family);
  }
  void add_cycleType(::flatbuffers::Offset<::flatbuffers::String> cycleType) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_CYCLETYPE, cycleType);
  }
  void add_characteristicType(::flatbuffers::Offset<::flatbuffers::String> characteristicType) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_CHARACTERISTICTYPE, characteristicType);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_specificImpulse(double specificImpulse) {
    fbb_.AddElement<double>(EngineDetails_Abridged::VT_SPECIFICIMPULSE, specificImpulse, 0.0);
  }
  void add_burnTime(double burnTime) {
    fbb_.AddElement<double>(EngineDetails_Abridged::VT_BURNTIME, burnTime, 0.0);
  }
  void add_seaLevelThrust(double seaLevelThrust) {
    fbb_.AddElement<double>(EngineDetails_Abridged::VT_SEALEVELTHRUST, seaLevelThrust, 0.0);
  }
  void add_vacuumThrust(double vacuumThrust) {
    fbb_.AddElement<double>(EngineDetails_Abridged::VT_VACUUMTHRUST, vacuumThrust, 0.0);
  }
  void add_chamberPressure(double chamberPressure) {
    fbb_.AddElement<double>(EngineDetails_Abridged::VT_CHAMBERPRESSURE, chamberPressure, 0.0);
  }
  void add_nozzleExpansionRatio(double nozzleExpansionRatio) {
    fbb_.AddElement<double>(EngineDetails_Abridged::VT_NOZZLEEXPANSIONRATIO, nozzleExpansionRatio, 0.0);
  }
  void add_maxFirings(int32_t maxFirings) {
    fbb_.AddElement<int32_t>(EngineDetails_Abridged::VT_MAXFIRINGS, maxFirings, 0);
  }
  void add_propellant(::flatbuffers::Offset<::flatbuffers::String> propellant) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_PROPELLANT, propellant);
  }
  void add_oxidizer(::flatbuffers::Offset<::flatbuffers::String> oxidizer) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_OXIDIZER, oxidizer);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_NOTES, notes);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(EngineDetails_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(EngineDetails_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(EngineDetails_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit EngineDetails_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EngineDetails_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EngineDetails_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EngineDetails_Abridged> CreateEngineDetails_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEngine = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> family = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cycleType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> characteristicType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    double specificImpulse = 0.0,
    double burnTime = 0.0,
    double seaLevelThrust = 0.0,
    double vacuumThrust = 0.0,
    double chamberPressure = 0.0,
    double nozzleExpansionRatio = 0.0,
    int32_t maxFirings = 0,
    ::flatbuffers::Offset<::flatbuffers::String> propellant = 0,
    ::flatbuffers::Offset<::flatbuffers::String> oxidizer = 0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    EngineDetails_Abridged_dataMode_Enum dataMode = EngineDetails_Abridged_dataMode_Enum_REAL) {
  EngineDetails_AbridgedBuilder builder_(_fbb);
  builder_.add_nozzleExpansionRatio(nozzleExpansionRatio);
  builder_.add_chamberPressure(chamberPressure);
  builder_.add_vacuumThrust(vacuumThrust);
  builder_.add_seaLevelThrust(seaLevelThrust);
  builder_.add_burnTime(burnTime);
  builder_.add_specificImpulse(specificImpulse);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_notes(notes);
  builder_.add_oxidizer(oxidizer);
  builder_.add_propellant(propellant);
  builder_.add_maxFirings(maxFirings);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_characteristicType(characteristicType);
  builder_.add_cycleType(cycleType);
  builder_.add_family(family);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idEngine(idEngine);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EngineDetails_Abridged> CreateEngineDetails_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idEngine = nullptr,
    const char *classificationMarking = nullptr,
    const char *family = nullptr,
    const char *cycleType = nullptr,
    const char *characteristicType = nullptr,
    const char *manufacturerOrgId = nullptr,
    double specificImpulse = 0.0,
    double burnTime = 0.0,
    double seaLevelThrust = 0.0,
    double vacuumThrust = 0.0,
    double chamberPressure = 0.0,
    double nozzleExpansionRatio = 0.0,
    int32_t maxFirings = 0,
    const char *propellant = nullptr,
    const char *oxidizer = nullptr,
    const char *notes = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    EngineDetails_Abridged_dataMode_Enum dataMode = EngineDetails_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idEngine__ = idEngine ? _fbb.CreateString(idEngine) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto family__ = family ? _fbb.CreateString(family) : 0;
  auto cycleType__ = cycleType ? _fbb.CreateString(cycleType) : 0;
  auto characteristicType__ = characteristicType ? _fbb.CreateString(characteristicType) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto propellant__ = propellant ? _fbb.CreateString(propellant) : 0;
  auto oxidizer__ = oxidizer ? _fbb.CreateString(oxidizer) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateEngineDetails_Abridged(
      _fbb,
      id__,
      idEngine__,
      classificationMarking__,
      family__,
      cycleType__,
      characteristicType__,
      manufacturerOrgId__,
      specificImpulse,
      burnTime,
      seaLevelThrust,
      vacuumThrust,
      chamberPressure,
      nozzleExpansionRatio,
      maxFirings,
      propellant__,
      oxidizer__,
      notes__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const EngineDetails_Abridged *GetEngineDetails_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<EngineDetails_Abridged>(buf);
}

inline const EngineDetails_Abridged *GetSizePrefixedEngineDetails_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EngineDetails_Abridged>(buf);
}

inline const char *EngineDetails_AbridgedIdentifier() {
  return "ENGI";
}

inline bool EngineDetails_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EngineDetails_AbridgedIdentifier());
}

inline bool SizePrefixedEngineDetails_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EngineDetails_AbridgedIdentifier(), true);
}

inline bool VerifyEngineDetails_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EngineDetails_Abridged>(EngineDetails_AbridgedIdentifier());
}

inline bool VerifySizePrefixedEngineDetails_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EngineDetails_Abridged>(EngineDetails_AbridgedIdentifier());
}

inline void FinishEngineDetails_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EngineDetails_Abridged> root) {
  fbb.Finish(root, EngineDetails_AbridgedIdentifier());
}

inline void FinishSizePrefixedEngineDetails_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EngineDetails_Abridged> root) {
  fbb.FinishSizePrefixed(root, EngineDetails_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
