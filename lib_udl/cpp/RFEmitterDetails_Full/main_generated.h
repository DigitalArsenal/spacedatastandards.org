// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RFEmitterDetails_Full;
struct RFEmitterDetails_FullBuilder;

enum RFEmitterDetails_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  RFEmitterDetails_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  RFEmitterDetails_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  RFEmitterDetails_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  RFEmitterDetails_Full_dataMode_Enum_EXERCISE = 3,
  RFEmitterDetails_Full_dataMode_Enum_MIN = RFEmitterDetails_Full_dataMode_Enum_REAL,
  RFEmitterDetails_Full_dataMode_Enum_MAX = RFEmitterDetails_Full_dataMode_Enum_EXERCISE
};

inline const RFEmitterDetails_Full_dataMode_Enum (&EnumValuesRFEmitterDetails_Full_dataMode_Enum())[4] {
  static const RFEmitterDetails_Full_dataMode_Enum values[] = {
    RFEmitterDetails_Full_dataMode_Enum_REAL,
    RFEmitterDetails_Full_dataMode_Enum_TEST,
    RFEmitterDetails_Full_dataMode_Enum_SIMULATED,
    RFEmitterDetails_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesRFEmitterDetails_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameRFEmitterDetails_Full_dataMode_Enum(RFEmitterDetails_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, RFEmitterDetails_Full_dataMode_Enum_REAL, RFEmitterDetails_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesRFEmitterDetails_Full_dataMode_Enum()[index];
}

/// /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
struct RFEmitterDetails_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RFEmitterDetails_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDRFEMITTER = 6,
    VT_CLASSIFICATIONMARKING = 8,
    VT_DESIGNATOR = 10,
    VT_ALTNAME = 12,
    VT_FAMILY = 14,
    VT_PRODUCTIONFACILITYNAME = 16,
    VT_ALTERNATEFACILITYNAME = 18,
    VT_MANUFACTURERORGID = 20,
    VT_PRODUCTIONFACILITYLOCATIONID = 22,
    VT_SYSTEMSENSITIVITYSTART = 24,
    VT_SYSTEMSENSITIVITYEND = 26,
    VT_RECEIVERTYPE = 28,
    VT_RECEIVERSENSITIVITY = 30,
    VT_RECEIVERBANDWIDTH = 32,
    VT_TRANSMITTERFREQUENCY = 34,
    VT_TRANSMITTERBANDWIDTH = 36,
    VT_TRANSMITPOWER = 38,
    VT_BARRAGENOISEBANDWIDTH = 40,
    VT_DOPPLERNOISE = 42,
    VT_DRFMINSTANTANEOUSBANDWIDTH = 44,
    VT_NUMCHANNELS = 46,
    VT_NUMBITS = 48,
    VT_ANTENNASIZE = 50,
    VT_ANTENNADIAMETER = 52,
    VT_NOTES = 54,
    VT_SECONDARYNOTES = 56,
    VT_DESCRIPTION = 58,
    VT_URLS = 60,
    VT_SOURCE = 62,
    VT_ORIGIN = 64,
    VT_ORIGNETWORK = 66,
    VT_DATAMODE = 68,
    VT_CREATEDAT = 70,
    VT_CREATEDBY = 72,
    VT_UPDATEDAT = 74,
    VT_UPDATEDBY = 76,
    VT_PRODUCTIONFACILITYLOCATION = 78,
    VT_MANUFACTURERORG = 80
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RFEMITTERDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Unique identifier of the parent RF Emitter.
  /// Example: /// Example: RFEMITTER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idRFEmitter() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDRFEMITTER);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Designator of this RF Emitter.
  /// Example: /// Example: DESIGNATOR
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *designator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESIGNATOR);
  }
  /// Optional alternate name or alias for this RF Emitter.
  /// Example: /// Example: ALTERNATE_NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *altName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTNAME);
  }
  /// Family of this RF Emitter type.
  /// Example: /// Example: FAMILY
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *family() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FAMILY);
  }
  /// Name of the production facility for this RF Emitter.
  /// Example: /// Example: PRODUCTION_FACILITY
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *productionFacilityName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCTIONFACILITYNAME);
  }
  /// Alternate facility name for this RF Emitter.
  /// Example: /// Example: ALTERNATE_FACILITY_NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *alternateFacilityName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALTERNATEFACILITYNAME);
  }
  /// Unique identifier of the organization which manufactures this RF Emitter.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *manufacturerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORGID);
  }
  /// Unique identifier of the location of the production facility for this RF Emitter.
  /// Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *productionFacilityLocationId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCTIONFACILITYLOCATIONID);
  }
  /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  double systemSensitivityStart() const {
    return GetField<double>(VT_SYSTEMSENSITIVITYSTART, 0.0);
  }
  /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
  /// Example: /// Example: 150.23
  /// Constraints: No constraints specified.
  double systemSensitivityEnd() const {
    return GetField<double>(VT_SYSTEMSENSITIVITYEND, 0.0);
  }
  /// Type or name of receiver.
  /// Example: /// Example: RECEIVER_TYPE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *receiverType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RECEIVERTYPE);
  }
  /// Receiver sensitivity in dBm.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double receiverSensitivity() const {
    return GetField<double>(VT_RECEIVERSENSITIVITY, 0.0);
  }
  /// Receiver bandwidth in Mhz.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  double receiverBandwidth() const {
    return GetField<double>(VT_RECEIVERBANDWIDTH, 0.0);
  }
  /// Transmitter frequency in Mhz.
  /// Example: /// Example: 105.9
  /// Constraints: No constraints specified.
  double transmitterFrequency() const {
    return GetField<double>(VT_TRANSMITTERFREQUENCY, 0.0);
  }
  /// Transmitter bandwidth in Mhz.
  /// Example: /// Example: 0.125
  /// Constraints: No constraints specified.
  double transmitterBandwidth() const {
    return GetField<double>(VT_TRANSMITTERBANDWIDTH, 0.0);
  }
  /// Transmit power in Watts.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  double transmitPower() const {
    return GetField<double>(VT_TRANSMITPOWER, 0.0);
  }
  /// Barrage noise bandwidth in Mhz.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  double barrageNoiseBandwidth() const {
    return GetField<double>(VT_BARRAGENOISEBANDWIDTH, 0.0);
  }
  /// Doppler noise value in Mhz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double dopplerNoise() const {
    return GetField<double>(VT_DOPPLERNOISE, 0.0);
  }
  /// Digital Form Radio Memory instantaneous bandwidth in Mhz.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  double drfmInstantaneousBandwidth() const {
    return GetField<double>(VT_DRFMINSTANTANEOUSBANDWIDTH, 0.0);
  }
  /// Number of channels.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  int32_t numChannels() const {
    return GetField<int32_t>(VT_NUMCHANNELS, 0);
  }
  /// Number of bits.
  /// Example: /// Example: 256
  /// Constraints: No constraints specified.
  int32_t numBits() const {
    return GetField<int32_t>(VT_NUMBITS, 0);
  }
  /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *antennaSize() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ANTENNASIZE);
  }
  /// For parabolic/dish antennas, the diameter of the antenna in meters.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  double antennaDiameter() const {
    return GetField<double>(VT_ANTENNADIAMETER, 0.0);
  }
  /// Notes on the RF Emitter.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *notes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NOTES);
  }
  /// Secondary notes on the RF Emitter.
  /// Example: /// Example: MORE_NOTES
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *secondaryNotes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SECONDARYNOTES);
  }
  /// Detailed description of the RF Emitter.
  /// Example: /// Example: DESCRIPTION
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Array of URLs containing additional information on this RF Emitter.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *urls() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_URLS);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  RFEmitterDetails_Full_dataMode_Enum dataMode() const {
    return static_cast<RFEmitterDetails_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *productionFacilityLocation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCTIONFACILITYLOCATION);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *manufacturerOrg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MANUFACTURERORG);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDRFEMITTER) &&
           verifier.VerifyString(idRFEmitter()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_DESIGNATOR) &&
           verifier.VerifyString(designator()) &&
           VerifyOffset(verifier, VT_ALTNAME) &&
           verifier.VerifyString(altName()) &&
           VerifyOffset(verifier, VT_FAMILY) &&
           verifier.VerifyString(family()) &&
           VerifyOffset(verifier, VT_PRODUCTIONFACILITYNAME) &&
           verifier.VerifyString(productionFacilityName()) &&
           VerifyOffset(verifier, VT_ALTERNATEFACILITYNAME) &&
           verifier.VerifyString(alternateFacilityName()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORGID) &&
           verifier.VerifyString(manufacturerOrgId()) &&
           VerifyOffset(verifier, VT_PRODUCTIONFACILITYLOCATIONID) &&
           verifier.VerifyString(productionFacilityLocationId()) &&
           VerifyField<double>(verifier, VT_SYSTEMSENSITIVITYSTART, 8) &&
           VerifyField<double>(verifier, VT_SYSTEMSENSITIVITYEND, 8) &&
           VerifyOffset(verifier, VT_RECEIVERTYPE) &&
           verifier.VerifyString(receiverType()) &&
           VerifyField<double>(verifier, VT_RECEIVERSENSITIVITY, 8) &&
           VerifyField<double>(verifier, VT_RECEIVERBANDWIDTH, 8) &&
           VerifyField<double>(verifier, VT_TRANSMITTERFREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_TRANSMITTERBANDWIDTH, 8) &&
           VerifyField<double>(verifier, VT_TRANSMITPOWER, 8) &&
           VerifyField<double>(verifier, VT_BARRAGENOISEBANDWIDTH, 8) &&
           VerifyField<double>(verifier, VT_DOPPLERNOISE, 8) &&
           VerifyField<double>(verifier, VT_DRFMINSTANTANEOUSBANDWIDTH, 8) &&
           VerifyField<int32_t>(verifier, VT_NUMCHANNELS, 4) &&
           VerifyField<int32_t>(verifier, VT_NUMBITS, 4) &&
           VerifyOffset(verifier, VT_ANTENNASIZE) &&
           verifier.VerifyVector(antennaSize()) &&
           verifier.VerifyVectorOfStrings(antennaSize()) &&
           VerifyField<double>(verifier, VT_ANTENNADIAMETER, 8) &&
           VerifyOffset(verifier, VT_NOTES) &&
           verifier.VerifyString(notes()) &&
           VerifyOffset(verifier, VT_SECONDARYNOTES) &&
           verifier.VerifyString(secondaryNotes()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_URLS) &&
           verifier.VerifyVector(urls()) &&
           verifier.VerifyVectorOfStrings(urls()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_PRODUCTIONFACILITYLOCATION) &&
           verifier.VerifyString(productionFacilityLocation()) &&
           VerifyOffset(verifier, VT_MANUFACTURERORG) &&
           verifier.VerifyString(manufacturerOrg()) &&
           verifier.EndTable();
  }
};

struct RFEmitterDetails_FullBuilder {
  typedef RFEmitterDetails_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_ID, id);
  }
  void add_idRFEmitter(::flatbuffers::Offset<::flatbuffers::String> idRFEmitter) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_IDRFEMITTER, idRFEmitter);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_designator(::flatbuffers::Offset<::flatbuffers::String> designator) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_DESIGNATOR, designator);
  }
  void add_altName(::flatbuffers::Offset<::flatbuffers::String> altName) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_ALTNAME, altName);
  }
  void add_family(::flatbuffers::Offset<::flatbuffers::String> family) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_FAMILY, family);
  }
  void add_productionFacilityName(::flatbuffers::Offset<::flatbuffers::String> productionFacilityName) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYNAME, productionFacilityName);
  }
  void add_alternateFacilityName(::flatbuffers::Offset<::flatbuffers::String> alternateFacilityName) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_ALTERNATEFACILITYNAME, alternateFacilityName);
  }
  void add_manufacturerOrgId(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  void add_productionFacilityLocationId(::flatbuffers::Offset<::flatbuffers::String> productionFacilityLocationId) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYLOCATIONID, productionFacilityLocationId);
  }
  void add_systemSensitivityStart(double systemSensitivityStart) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_SYSTEMSENSITIVITYSTART, systemSensitivityStart, 0.0);
  }
  void add_systemSensitivityEnd(double systemSensitivityEnd) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_SYSTEMSENSITIVITYEND, systemSensitivityEnd, 0.0);
  }
  void add_receiverType(::flatbuffers::Offset<::flatbuffers::String> receiverType) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_RECEIVERTYPE, receiverType);
  }
  void add_receiverSensitivity(double receiverSensitivity) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_RECEIVERSENSITIVITY, receiverSensitivity, 0.0);
  }
  void add_receiverBandwidth(double receiverBandwidth) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_RECEIVERBANDWIDTH, receiverBandwidth, 0.0);
  }
  void add_transmitterFrequency(double transmitterFrequency) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_TRANSMITTERFREQUENCY, transmitterFrequency, 0.0);
  }
  void add_transmitterBandwidth(double transmitterBandwidth) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_TRANSMITTERBANDWIDTH, transmitterBandwidth, 0.0);
  }
  void add_transmitPower(double transmitPower) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_TRANSMITPOWER, transmitPower, 0.0);
  }
  void add_barrageNoiseBandwidth(double barrageNoiseBandwidth) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_BARRAGENOISEBANDWIDTH, barrageNoiseBandwidth, 0.0);
  }
  void add_dopplerNoise(double dopplerNoise) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_DOPPLERNOISE, dopplerNoise, 0.0);
  }
  void add_drfmInstantaneousBandwidth(double drfmInstantaneousBandwidth) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_DRFMINSTANTANEOUSBANDWIDTH, drfmInstantaneousBandwidth, 0.0);
  }
  void add_numChannels(int32_t numChannels) {
    fbb_.AddElement<int32_t>(RFEmitterDetails_Full::VT_NUMCHANNELS, numChannels, 0);
  }
  void add_numBits(int32_t numBits) {
    fbb_.AddElement<int32_t>(RFEmitterDetails_Full::VT_NUMBITS, numBits, 0);
  }
  void add_antennaSize(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> antennaSize) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_ANTENNASIZE, antennaSize);
  }
  void add_antennaDiameter(double antennaDiameter) {
    fbb_.AddElement<double>(RFEmitterDetails_Full::VT_ANTENNADIAMETER, antennaDiameter, 0.0);
  }
  void add_notes(::flatbuffers::Offset<::flatbuffers::String> notes) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_NOTES, notes);
  }
  void add_secondaryNotes(::flatbuffers::Offset<::flatbuffers::String> secondaryNotes) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_SECONDARYNOTES, secondaryNotes);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_DESCRIPTION, description);
  }
  void add_urls(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> urls) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_URLS, urls);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(RFEmitterDetails_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(RFEmitterDetails_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  void add_productionFacilityLocation(::flatbuffers::Offset<::flatbuffers::String> productionFacilityLocation) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYLOCATION, productionFacilityLocation);
  }
  void add_manufacturerOrg(::flatbuffers::Offset<::flatbuffers::String> manufacturerOrg) {
    fbb_.AddOffset(RFEmitterDetails_Full::VT_MANUFACTURERORG, manufacturerOrg);
  }
  explicit RFEmitterDetails_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RFEmitterDetails_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RFEmitterDetails_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RFEmitterDetails_Full> CreateRFEmitterDetails_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idRFEmitter = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> designator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> altName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> family = 0,
    ::flatbuffers::Offset<::flatbuffers::String> productionFacilityName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> alternateFacilityName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> productionFacilityLocationId = 0,
    double systemSensitivityStart = 0.0,
    double systemSensitivityEnd = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> receiverType = 0,
    double receiverSensitivity = 0.0,
    double receiverBandwidth = 0.0,
    double transmitterFrequency = 0.0,
    double transmitterBandwidth = 0.0,
    double transmitPower = 0.0,
    double barrageNoiseBandwidth = 0.0,
    double dopplerNoise = 0.0,
    double drfmInstantaneousBandwidth = 0.0,
    int32_t numChannels = 0,
    int32_t numBits = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> antennaSize = 0,
    double antennaDiameter = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> notes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> secondaryNotes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> urls = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    RFEmitterDetails_Full_dataMode_Enum dataMode = RFEmitterDetails_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> productionFacilityLocation = 0,
    ::flatbuffers::Offset<::flatbuffers::String> manufacturerOrg = 0) {
  RFEmitterDetails_FullBuilder builder_(_fbb);
  builder_.add_antennaDiameter(antennaDiameter);
  builder_.add_drfmInstantaneousBandwidth(drfmInstantaneousBandwidth);
  builder_.add_dopplerNoise(dopplerNoise);
  builder_.add_barrageNoiseBandwidth(barrageNoiseBandwidth);
  builder_.add_transmitPower(transmitPower);
  builder_.add_transmitterBandwidth(transmitterBandwidth);
  builder_.add_transmitterFrequency(transmitterFrequency);
  builder_.add_receiverBandwidth(receiverBandwidth);
  builder_.add_receiverSensitivity(receiverSensitivity);
  builder_.add_systemSensitivityEnd(systemSensitivityEnd);
  builder_.add_systemSensitivityStart(systemSensitivityStart);
  builder_.add_manufacturerOrg(manufacturerOrg);
  builder_.add_productionFacilityLocation(productionFacilityLocation);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_urls(urls);
  builder_.add_description(description);
  builder_.add_secondaryNotes(secondaryNotes);
  builder_.add_notes(notes);
  builder_.add_antennaSize(antennaSize);
  builder_.add_numBits(numBits);
  builder_.add_numChannels(numChannels);
  builder_.add_receiverType(receiverType);
  builder_.add_productionFacilityLocationId(productionFacilityLocationId);
  builder_.add_manufacturerOrgId(manufacturerOrgId);
  builder_.add_alternateFacilityName(alternateFacilityName);
  builder_.add_productionFacilityName(productionFacilityName);
  builder_.add_family(family);
  builder_.add_altName(altName);
  builder_.add_designator(designator);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_idRFEmitter(idRFEmitter);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RFEmitterDetails_Full> CreateRFEmitterDetails_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idRFEmitter = nullptr,
    const char *classificationMarking = nullptr,
    const char *designator = nullptr,
    const char *altName = nullptr,
    const char *family = nullptr,
    const char *productionFacilityName = nullptr,
    const char *alternateFacilityName = nullptr,
    const char *manufacturerOrgId = nullptr,
    const char *productionFacilityLocationId = nullptr,
    double systemSensitivityStart = 0.0,
    double systemSensitivityEnd = 0.0,
    const char *receiverType = nullptr,
    double receiverSensitivity = 0.0,
    double receiverBandwidth = 0.0,
    double transmitterFrequency = 0.0,
    double transmitterBandwidth = 0.0,
    double transmitPower = 0.0,
    double barrageNoiseBandwidth = 0.0,
    double dopplerNoise = 0.0,
    double drfmInstantaneousBandwidth = 0.0,
    int32_t numChannels = 0,
    int32_t numBits = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *antennaSize = nullptr,
    double antennaDiameter = 0.0,
    const char *notes = nullptr,
    const char *secondaryNotes = nullptr,
    const char *description = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *urls = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    RFEmitterDetails_Full_dataMode_Enum dataMode = RFEmitterDetails_Full_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *productionFacilityLocation = nullptr,
    const char *manufacturerOrg = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idRFEmitter__ = idRFEmitter ? _fbb.CreateString(idRFEmitter) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto designator__ = designator ? _fbb.CreateString(designator) : 0;
  auto altName__ = altName ? _fbb.CreateString(altName) : 0;
  auto family__ = family ? _fbb.CreateString(family) : 0;
  auto productionFacilityName__ = productionFacilityName ? _fbb.CreateString(productionFacilityName) : 0;
  auto alternateFacilityName__ = alternateFacilityName ? _fbb.CreateString(alternateFacilityName) : 0;
  auto manufacturerOrgId__ = manufacturerOrgId ? _fbb.CreateString(manufacturerOrgId) : 0;
  auto productionFacilityLocationId__ = productionFacilityLocationId ? _fbb.CreateString(productionFacilityLocationId) : 0;
  auto receiverType__ = receiverType ? _fbb.CreateString(receiverType) : 0;
  auto antennaSize__ = antennaSize ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*antennaSize) : 0;
  auto notes__ = notes ? _fbb.CreateString(notes) : 0;
  auto secondaryNotes__ = secondaryNotes ? _fbb.CreateString(secondaryNotes) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto urls__ = urls ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*urls) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto productionFacilityLocation__ = productionFacilityLocation ? _fbb.CreateString(productionFacilityLocation) : 0;
  auto manufacturerOrg__ = manufacturerOrg ? _fbb.CreateString(manufacturerOrg) : 0;
  return CreateRFEmitterDetails_Full(
      _fbb,
      id__,
      idRFEmitter__,
      classificationMarking__,
      designator__,
      altName__,
      family__,
      productionFacilityName__,
      alternateFacilityName__,
      manufacturerOrgId__,
      productionFacilityLocationId__,
      systemSensitivityStart,
      systemSensitivityEnd,
      receiverType__,
      receiverSensitivity,
      receiverBandwidth,
      transmitterFrequency,
      transmitterBandwidth,
      transmitPower,
      barrageNoiseBandwidth,
      dopplerNoise,
      drfmInstantaneousBandwidth,
      numChannels,
      numBits,
      antennaSize__,
      antennaDiameter,
      notes__,
      secondaryNotes__,
      description__,
      urls__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      productionFacilityLocation__,
      manufacturerOrg__);
}

inline const RFEmitterDetails_Full *GetRFEmitterDetails_Full(const void *buf) {
  return ::flatbuffers::GetRoot<RFEmitterDetails_Full>(buf);
}

inline const RFEmitterDetails_Full *GetSizePrefixedRFEmitterDetails_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RFEmitterDetails_Full>(buf);
}

inline const char *RFEmitterDetails_FullIdentifier() {
  return "RFEM";
}

inline bool RFEmitterDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFEmitterDetails_FullIdentifier());
}

inline bool SizePrefixedRFEmitterDetails_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RFEmitterDetails_FullIdentifier(), true);
}

inline bool VerifyRFEmitterDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RFEmitterDetails_Full>(RFEmitterDetails_FullIdentifier());
}

inline bool VerifySizePrefixedRFEmitterDetails_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RFEmitterDetails_Full>(RFEmitterDetails_FullIdentifier());
}

inline void FinishRFEmitterDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFEmitterDetails_Full> root) {
  fbb.Finish(root, RFEmitterDetails_FullIdentifier());
}

inline void FinishSizePrefixedRFEmitterDetails_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RFEmitterDetails_Full> root) {
  fbb.FinishSizePrefixed(root, RFEmitterDetails_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
