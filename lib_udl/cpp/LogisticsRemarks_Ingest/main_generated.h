// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsRemarks_Ingest;
struct LogisticsRemarks_IngestBuilder;

/// /// Remarks associated with this LogisticsSupport record.
struct LogisticsRemarks_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsRemarks_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERNAME = 4,
    VT_REMARK = 6,
    VT_LASTCHANGED = 8
  };
  /// User who published the remark.
  /// Example: /// Example: JSMITH
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *username() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERNAME);
  }
  /// Text of the remark.
  /// Example: /// Example: EXAMPLE REMARK
  /// Constraints: Minimum length = 0, Maximum length = 4000
  const ::flatbuffers::String *remark() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REMARK);
  }
  /// Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastChanged() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTCHANGED);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERNAME) &&
           verifier.VerifyString(username()) &&
           VerifyOffset(verifier, VT_REMARK) &&
           verifier.VerifyString(remark()) &&
           VerifyOffset(verifier, VT_LASTCHANGED) &&
           verifier.VerifyString(lastChanged()) &&
           verifier.EndTable();
  }
};

struct LogisticsRemarks_IngestBuilder {
  typedef LogisticsRemarks_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_username(::flatbuffers::Offset<::flatbuffers::String> username) {
    fbb_.AddOffset(LogisticsRemarks_Ingest::VT_USERNAME, username);
  }
  void add_remark(::flatbuffers::Offset<::flatbuffers::String> remark) {
    fbb_.AddOffset(LogisticsRemarks_Ingest::VT_REMARK, remark);
  }
  void add_lastChanged(::flatbuffers::Offset<::flatbuffers::String> lastChanged) {
    fbb_.AddOffset(LogisticsRemarks_Ingest::VT_LASTCHANGED, lastChanged);
  }
  explicit LogisticsRemarks_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsRemarks_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsRemarks_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsRemarks_Ingest> CreateLogisticsRemarks_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> username = 0,
    ::flatbuffers::Offset<::flatbuffers::String> remark = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastChanged = 0) {
  LogisticsRemarks_IngestBuilder builder_(_fbb);
  builder_.add_lastChanged(lastChanged);
  builder_.add_remark(remark);
  builder_.add_username(username);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsRemarks_Ingest> CreateLogisticsRemarks_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *username = nullptr,
    const char *remark = nullptr,
    const char *lastChanged = nullptr) {
  auto username__ = username ? _fbb.CreateString(username) : 0;
  auto remark__ = remark ? _fbb.CreateString(remark) : 0;
  auto lastChanged__ = lastChanged ? _fbb.CreateString(lastChanged) : 0;
  return CreateLogisticsRemarks_Ingest(
      _fbb,
      username__,
      remark__,
      lastChanged__);
}

inline const LogisticsRemarks_Ingest *GetLogisticsRemarks_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsRemarks_Ingest>(buf);
}

inline const LogisticsRemarks_Ingest *GetSizePrefixedLogisticsRemarks_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsRemarks_Ingest>(buf);
}

inline const char *LogisticsRemarks_IngestIdentifier() {
  return "LOGI";
}

inline bool LogisticsRemarks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsRemarks_IngestIdentifier());
}

inline bool SizePrefixedLogisticsRemarks_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsRemarks_IngestIdentifier(), true);
}

inline bool VerifyLogisticsRemarks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsRemarks_Ingest>(LogisticsRemarks_IngestIdentifier());
}

inline bool VerifySizePrefixedLogisticsRemarks_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsRemarks_Ingest>(LogisticsRemarks_IngestIdentifier());
}

inline void FinishLogisticsRemarks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsRemarks_Ingest> root) {
  fbb.Finish(root, LogisticsRemarks_IngestIdentifier());
}

inline void FinishSizePrefixedLogisticsRemarks_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsRemarks_Ingest> root) {
  fbb.FinishSizePrefixed(root, LogisticsRemarks_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
