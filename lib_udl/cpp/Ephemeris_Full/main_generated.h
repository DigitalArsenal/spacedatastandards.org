// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Ephemeris_Full;
struct Ephemeris_FullBuilder;

enum Ephemeris_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Ephemeris_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Ephemeris_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Ephemeris_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Ephemeris_Full_dataMode_Enum_EXERCISE = 3,
  Ephemeris_Full_dataMode_Enum_MIN = Ephemeris_Full_dataMode_Enum_REAL,
  Ephemeris_Full_dataMode_Enum_MAX = Ephemeris_Full_dataMode_Enum_EXERCISE
};

inline const Ephemeris_Full_dataMode_Enum (&EnumValuesEphemeris_Full_dataMode_Enum())[4] {
  static const Ephemeris_Full_dataMode_Enum values[] = {
    Ephemeris_Full_dataMode_Enum_REAL,
    Ephemeris_Full_dataMode_Enum_TEST,
    Ephemeris_Full_dataMode_Enum_SIMULATED,
    Ephemeris_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesEphemeris_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameEphemeris_Full_dataMode_Enum(Ephemeris_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Ephemeris_Full_dataMode_Enum_REAL, Ephemeris_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesEphemeris_Full_dataMode_Enum()[index];
}

/// /// An ephemeris record is a position and velocity vector identifying the location and trajectory of an on-orbit object at a specified time. Ephemeris points, including covariance, are in kilometer and second based units in a user specified reference frame, with ECI J2K being preferred. The EphemerisSet ID (esId) links all points associated with an ephemeris set. The 'EphemerisSet' record contains details of the underlying data and propagation models used in the generation of the ephemeris. Ephemeris points must be retrieved by specifying the parent EphemerisSet ID (esId).
struct Ephemeris_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Ephemeris_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ESID = 8,
    VT_TS = 10,
    VT_XPOS = 12,
    VT_YPOS = 14,
    VT_ZPOS = 16,
    VT_XVEL = 18,
    VT_YVEL = 20,
    VT_ZVEL = 22,
    VT_XACCEL = 24,
    VT_YACCEL = 26,
    VT_ZACCEL = 28,
    VT_COV = 30,
    VT_CREATEDAT = 32,
    VT_CREATEDBY = 34,
    VT_SOURCE = 36,
    VT_DATAMODE = 38,
    VT_IDONORBIT = 40,
    VT_ORIGOBJECTID = 42,
    VT_ORIGIN = 44
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EPHEMERIS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the parent EphemerisSet, auto-generated by the system. The esId (ephemerisSet id) is used to identify all individual ephemeris states associated with a parent ephemerisSet.
  /// Example: /// Example: ES-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *esId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESID);
  }
  /// Time associated with the Ephemeris Point, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *ts() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TS);
  }
  /// Cartesian X position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double xpos() const {
    return GetField<double>(VT_XPOS, 0.0);
  }
  /// Cartesian Y position of target, in km, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double ypos() const {
    return GetField<double>(VT_YPOS, 0.0);
  }
  /// Cartesian Z position of target, in km, in the specified EphemerisSet referenceFrame. If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double zpos() const {
    return GetField<double>(VT_ZPOS, 0.0);
  }
  /// Cartesian X velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double xvel() const {
    return GetField<double>(VT_XVEL, 0.0);
  }
  /// Cartesian Y velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double yvel() const {
    return GetField<double>(VT_YVEL, 0.0);
  }
  /// Cartesian Z velocity of target, in km/sec, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double zvel() const {
    return GetField<double>(VT_ZVEL, 0.0);
  }
  /// Cartesian X acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double xaccel() const {
    return GetField<double>(VT_XACCEL, 0.0);
  }
  /// Cartesian Y acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double yaccel() const {
    return GetField<double>(VT_YACCEL, 0.0);
  }
  /// Cartesian Z acceleration of target, in km/sec^2, in the specified EphemerisSet referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  double zaccel() const {
    return GetField<double>(VT_ZACCEL, 0.0);
  }
  /// Covariance matrix, in kilometer and second based units, in the specified Ephemeris Set covReferenceFrame.  If the covReferenceFrame from the EphemerisSet table is null it is assumed to be J2000.
  /// The array values represent the lower triangular half of the position-velocity covariance matrix. The size of the covariance matrix is dynamic, depending on whether the covariance for position only or position & velocity. The covariance elements are position dependent within the array with values ordered as follows:
  /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  /// x&nbsp;&nbsp;&nbsp;&nbsp;1
  /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  /// The array containing the covariance matrix elements will be of length 6 for position only covariance, or length 21 for position-velocity covariance.  The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *cov() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_COV);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Ephemeris_Full_dataMode_Enum dataMode() const {
    return static_cast<Ephemeris_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Unique identifier of the on-orbit satellite object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ESID) &&
           verifier.VerifyString(esId()) &&
           VerifyOffset(verifier, VT_TS) &&
           verifier.VerifyString(ts()) &&
           VerifyField<double>(verifier, VT_XPOS, 8) &&
           VerifyField<double>(verifier, VT_YPOS, 8) &&
           VerifyField<double>(verifier, VT_ZPOS, 8) &&
           VerifyField<double>(verifier, VT_XVEL, 8) &&
           VerifyField<double>(verifier, VT_YVEL, 8) &&
           VerifyField<double>(verifier, VT_ZVEL, 8) &&
           VerifyField<double>(verifier, VT_XACCEL, 8) &&
           VerifyField<double>(verifier, VT_YACCEL, 8) &&
           VerifyField<double>(verifier, VT_ZACCEL, 8) &&
           VerifyOffset(verifier, VT_COV) &&
           verifier.VerifyVector(cov()) &&
           verifier.VerifyVectorOfStrings(cov()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           verifier.EndTable();
  }
};

struct Ephemeris_FullBuilder {
  typedef Ephemeris_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Ephemeris_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Ephemeris_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_esId(::flatbuffers::Offset<::flatbuffers::String> esId) {
    fbb_.AddOffset(Ephemeris_Full::VT_ESID, esId);
  }
  void add_ts(::flatbuffers::Offset<::flatbuffers::String> ts) {
    fbb_.AddOffset(Ephemeris_Full::VT_TS, ts);
  }
  void add_xpos(double xpos) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_XPOS, xpos, 0.0);
  }
  void add_ypos(double ypos) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_YPOS, ypos, 0.0);
  }
  void add_zpos(double zpos) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_ZPOS, zpos, 0.0);
  }
  void add_xvel(double xvel) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_XVEL, xvel, 0.0);
  }
  void add_yvel(double yvel) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_YVEL, yvel, 0.0);
  }
  void add_zvel(double zvel) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_ZVEL, zvel, 0.0);
  }
  void add_xaccel(double xaccel) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_XACCEL, xaccel, 0.0);
  }
  void add_yaccel(double yaccel) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_YACCEL, yaccel, 0.0);
  }
  void add_zaccel(double zaccel) {
    fbb_.AddElement<double>(Ephemeris_Full::VT_ZACCEL, zaccel, 0.0);
  }
  void add_cov(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cov) {
    fbb_.AddOffset(Ephemeris_Full::VT_COV, cov);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Ephemeris_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Ephemeris_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Ephemeris_Full::VT_SOURCE, source);
  }
  void add_dataMode(Ephemeris_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Ephemeris_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(Ephemeris_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(Ephemeris_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Ephemeris_Full::VT_ORIGIN, origin);
  }
  explicit Ephemeris_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Ephemeris_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Ephemeris_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Ephemeris_Full> CreateEphemeris_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> esId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> ts = 0,
    double xpos = 0.0,
    double ypos = 0.0,
    double zpos = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    double xaccel = 0.0,
    double yaccel = 0.0,
    double zaccel = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cov = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    Ephemeris_Full_dataMode_Enum dataMode = Ephemeris_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0) {
  Ephemeris_FullBuilder builder_(_fbb);
  builder_.add_zaccel(zaccel);
  builder_.add_yaccel(yaccel);
  builder_.add_xaccel(xaccel);
  builder_.add_zvel(zvel);
  builder_.add_yvel(yvel);
  builder_.add_xvel(xvel);
  builder_.add_zpos(zpos);
  builder_.add_ypos(ypos);
  builder_.add_xpos(xpos);
  builder_.add_origin(origin);
  builder_.add_origObjectId(origObjectId);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_cov(cov);
  builder_.add_ts(ts);
  builder_.add_esId(esId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Ephemeris_Full> CreateEphemeris_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *esId = nullptr,
    const char *ts = nullptr,
    double xpos = 0.0,
    double ypos = 0.0,
    double zpos = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    double xaccel = 0.0,
    double yaccel = 0.0,
    double zaccel = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *cov = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    Ephemeris_Full_dataMode_Enum dataMode = Ephemeris_Full_dataMode_Enum_REAL,
    const char *idOnOrbit = nullptr,
    const char *origObjectId = nullptr,
    const char *origin = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto esId__ = esId ? _fbb.CreateString(esId) : 0;
  auto ts__ = ts ? _fbb.CreateString(ts) : 0;
  auto cov__ = cov ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*cov) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  return CreateEphemeris_Full(
      _fbb,
      id__,
      classificationMarking__,
      esId__,
      ts__,
      xpos,
      ypos,
      zpos,
      xvel,
      yvel,
      zvel,
      xaccel,
      yaccel,
      zaccel,
      cov__,
      createdAt__,
      createdBy__,
      source__,
      dataMode,
      idOnOrbit__,
      origObjectId__,
      origin__);
}

inline const Ephemeris_Full *GetEphemeris_Full(const void *buf) {
  return ::flatbuffers::GetRoot<Ephemeris_Full>(buf);
}

inline const Ephemeris_Full *GetSizePrefixedEphemeris_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Ephemeris_Full>(buf);
}

inline const char *Ephemeris_FullIdentifier() {
  return "EPHE";
}

inline bool Ephemeris_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Ephemeris_FullIdentifier());
}

inline bool SizePrefixedEphemeris_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Ephemeris_FullIdentifier(), true);
}

inline bool VerifyEphemeris_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Ephemeris_Full>(Ephemeris_FullIdentifier());
}

inline bool VerifySizePrefixedEphemeris_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Ephemeris_Full>(Ephemeris_FullIdentifier());
}

inline void FinishEphemeris_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Ephemeris_Full> root) {
  fbb.Finish(root, Ephemeris_FullIdentifier());
}

inline void FinishSizePrefixedEphemeris_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Ephemeris_Full> root) {
  fbb.FinishSizePrefixed(root, Ephemeris_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
