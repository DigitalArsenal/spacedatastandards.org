// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Crew_Ingest;
struct Crew_IngestBuilder;

enum Crew_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Crew_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Crew_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Crew_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Crew_Ingest_dataMode_Enum_EXERCISE = 3,
  Crew_Ingest_dataMode_Enum_MIN = Crew_Ingest_dataMode_Enum_REAL,
  Crew_Ingest_dataMode_Enum_MAX = Crew_Ingest_dataMode_Enum_EXERCISE
};

inline const Crew_Ingest_dataMode_Enum (&EnumValuesCrew_Ingest_dataMode_Enum())[4] {
  static const Crew_Ingest_dataMode_Enum values[] = {
    Crew_Ingest_dataMode_Enum_REAL,
    Crew_Ingest_dataMode_Enum_TEST,
    Crew_Ingest_dataMode_Enum_SIMULATED,
    Crew_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesCrew_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameCrew_Ingest_dataMode_Enum(Crew_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Crew_Ingest_dataMode_Enum_REAL, Crew_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesCrew_Ingest_dataMode_Enum()[index];
}

/// /// Crew Services.
struct Crew_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Crew_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_ORIGCREWID = 8,
    VT_CREWNAME = 10,
    VT_STATUS = 12,
    VT_IDSORTIE = 14,
    VT_LEGALALERTTIME = 16,
    VT_LEGALBRAVOTIME = 18,
    VT_ALERTEDTIME = 20,
    VT_RETURNTIME = 22,
    VT_FDPELIGTYPE = 24,
    VT_FDPTYPE = 26,
    VT_CREWTYPE = 28,
    VT_ARMSCREWUNIT = 30,
    VT_CREWMEMBERS = 32,
    VT_CREATEDAT = 34,
    VT_CREATEDBY = 36,
    VT_UPDATEDAT = 38,
    VT_UPDATEDBY = 40,
    VT_SOURCE = 42,
    VT_ORIGIN = 44,
    VT_ORIGNETWORK = 46,
    VT_DATAMODE = 48
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: JHJDHjhuu929o92
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *origCrewId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGCREWID);
  }
  /// Name of the formed crew.
  /// Example: /// Example: falcon
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *crewName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREWNAME);
  }
  /// Crew Status (e.g. APPROVED, PENDING).
  /// Example: /// Example: APPROVED
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// Unique identifier of the Aircraft Sortie associated with this crew record.
  /// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSortie() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSORTIE);
  }
  /// Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *legalAlertTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LEGALALERTTIME);
  }
  /// Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *legalBravoTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LEGALBRAVOTIME);
  }
  /// Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *alertedTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ALERTEDTIME);
  }
  /// Scheduled return time, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *returnTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RETURNTIME);
  }
  /// Crew Flight Duty Period (FDP) eligibility type.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *fdpEligType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FDPELIGTYPE);
  }
  /// Flight Duty Period (FDP) type.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *fdpType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FDPTYPE);
  }
  /// Crew type.
  /// Example: /// Example: AIRLAND
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *crewType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREWTYPE);
  }
  /// The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
  /// Example: /// Example: 00016ALSQ
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *armsCrewUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ARMSCREWUNIT);
  }
  /// CrewMembers Collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *crewMembers() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CREWMEMBERS);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *updatedAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *updatedBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_UPDATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Crew_Ingest_dataMode_Enum dataMode() const {
    return static_cast<Crew_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_ORIGCREWID) &&
           verifier.VerifyString(origCrewId()) &&
           VerifyOffset(verifier, VT_CREWNAME) &&
           verifier.VerifyString(crewName()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_IDSORTIE) &&
           verifier.VerifyString(idSortie()) &&
           VerifyOffset(verifier, VT_LEGALALERTTIME) &&
           verifier.VerifyString(legalAlertTime()) &&
           VerifyOffset(verifier, VT_LEGALBRAVOTIME) &&
           verifier.VerifyString(legalBravoTime()) &&
           VerifyOffset(verifier, VT_ALERTEDTIME) &&
           verifier.VerifyString(alertedTime()) &&
           VerifyOffset(verifier, VT_RETURNTIME) &&
           verifier.VerifyString(returnTime()) &&
           VerifyOffset(verifier, VT_FDPELIGTYPE) &&
           verifier.VerifyString(fdpEligType()) &&
           VerifyOffset(verifier, VT_FDPTYPE) &&
           verifier.VerifyString(fdpType()) &&
           VerifyOffset(verifier, VT_CREWTYPE) &&
           verifier.VerifyString(crewType()) &&
           VerifyOffset(verifier, VT_ARMSCREWUNIT) &&
           verifier.VerifyString(armsCrewUnit()) &&
           VerifyOffset(verifier, VT_CREWMEMBERS) &&
           verifier.VerifyVector(crewMembers()) &&
           verifier.VerifyVectorOfStrings(crewMembers()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_UPDATEDAT) &&
           verifier.VerifyString(updatedAt()) &&
           VerifyOffset(verifier, VT_UPDATEDBY) &&
           verifier.VerifyString(updatedBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct Crew_IngestBuilder {
  typedef Crew_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Crew_Ingest::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Crew_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_origCrewId(::flatbuffers::Offset<::flatbuffers::String> origCrewId) {
    fbb_.AddOffset(Crew_Ingest::VT_ORIGCREWID, origCrewId);
  }
  void add_crewName(::flatbuffers::Offset<::flatbuffers::String> crewName) {
    fbb_.AddOffset(Crew_Ingest::VT_CREWNAME, crewName);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(Crew_Ingest::VT_STATUS, status);
  }
  void add_idSortie(::flatbuffers::Offset<::flatbuffers::String> idSortie) {
    fbb_.AddOffset(Crew_Ingest::VT_IDSORTIE, idSortie);
  }
  void add_legalAlertTime(::flatbuffers::Offset<::flatbuffers::String> legalAlertTime) {
    fbb_.AddOffset(Crew_Ingest::VT_LEGALALERTTIME, legalAlertTime);
  }
  void add_legalBravoTime(::flatbuffers::Offset<::flatbuffers::String> legalBravoTime) {
    fbb_.AddOffset(Crew_Ingest::VT_LEGALBRAVOTIME, legalBravoTime);
  }
  void add_alertedTime(::flatbuffers::Offset<::flatbuffers::String> alertedTime) {
    fbb_.AddOffset(Crew_Ingest::VT_ALERTEDTIME, alertedTime);
  }
  void add_returnTime(::flatbuffers::Offset<::flatbuffers::String> returnTime) {
    fbb_.AddOffset(Crew_Ingest::VT_RETURNTIME, returnTime);
  }
  void add_fdpEligType(::flatbuffers::Offset<::flatbuffers::String> fdpEligType) {
    fbb_.AddOffset(Crew_Ingest::VT_FDPELIGTYPE, fdpEligType);
  }
  void add_fdpType(::flatbuffers::Offset<::flatbuffers::String> fdpType) {
    fbb_.AddOffset(Crew_Ingest::VT_FDPTYPE, fdpType);
  }
  void add_crewType(::flatbuffers::Offset<::flatbuffers::String> crewType) {
    fbb_.AddOffset(Crew_Ingest::VT_CREWTYPE, crewType);
  }
  void add_armsCrewUnit(::flatbuffers::Offset<::flatbuffers::String> armsCrewUnit) {
    fbb_.AddOffset(Crew_Ingest::VT_ARMSCREWUNIT, armsCrewUnit);
  }
  void add_crewMembers(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> crewMembers) {
    fbb_.AddOffset(Crew_Ingest::VT_CREWMEMBERS, crewMembers);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Crew_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Crew_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_updatedAt(::flatbuffers::Offset<::flatbuffers::String> updatedAt) {
    fbb_.AddOffset(Crew_Ingest::VT_UPDATEDAT, updatedAt);
  }
  void add_updatedBy(::flatbuffers::Offset<::flatbuffers::String> updatedBy) {
    fbb_.AddOffset(Crew_Ingest::VT_UPDATEDBY, updatedBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Crew_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Crew_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Crew_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Crew_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Crew_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit Crew_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Crew_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Crew_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Crew_Ingest> CreateCrew_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origCrewId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> crewName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSortie = 0,
    ::flatbuffers::Offset<::flatbuffers::String> legalAlertTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> legalBravoTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> alertedTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> returnTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fdpEligType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> fdpType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> crewType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> armsCrewUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> crewMembers = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> updatedBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Crew_Ingest_dataMode_Enum dataMode = Crew_Ingest_dataMode_Enum_REAL) {
  Crew_IngestBuilder builder_(_fbb);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_updatedBy(updatedBy);
  builder_.add_updatedAt(updatedAt);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_crewMembers(crewMembers);
  builder_.add_armsCrewUnit(armsCrewUnit);
  builder_.add_crewType(crewType);
  builder_.add_fdpType(fdpType);
  builder_.add_fdpEligType(fdpEligType);
  builder_.add_returnTime(returnTime);
  builder_.add_alertedTime(alertedTime);
  builder_.add_legalBravoTime(legalBravoTime);
  builder_.add_legalAlertTime(legalAlertTime);
  builder_.add_idSortie(idSortie);
  builder_.add_status(status);
  builder_.add_crewName(crewName);
  builder_.add_origCrewId(origCrewId);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Crew_Ingest> CreateCrew_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *origCrewId = nullptr,
    const char *crewName = nullptr,
    const char *status = nullptr,
    const char *idSortie = nullptr,
    const char *legalAlertTime = nullptr,
    const char *legalBravoTime = nullptr,
    const char *alertedTime = nullptr,
    const char *returnTime = nullptr,
    const char *fdpEligType = nullptr,
    const char *fdpType = nullptr,
    const char *crewType = nullptr,
    const char *armsCrewUnit = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *crewMembers = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *updatedAt = nullptr,
    const char *updatedBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Crew_Ingest_dataMode_Enum dataMode = Crew_Ingest_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto origCrewId__ = origCrewId ? _fbb.CreateString(origCrewId) : 0;
  auto crewName__ = crewName ? _fbb.CreateString(crewName) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto idSortie__ = idSortie ? _fbb.CreateString(idSortie) : 0;
  auto legalAlertTime__ = legalAlertTime ? _fbb.CreateString(legalAlertTime) : 0;
  auto legalBravoTime__ = legalBravoTime ? _fbb.CreateString(legalBravoTime) : 0;
  auto alertedTime__ = alertedTime ? _fbb.CreateString(alertedTime) : 0;
  auto returnTime__ = returnTime ? _fbb.CreateString(returnTime) : 0;
  auto fdpEligType__ = fdpEligType ? _fbb.CreateString(fdpEligType) : 0;
  auto fdpType__ = fdpType ? _fbb.CreateString(fdpType) : 0;
  auto crewType__ = crewType ? _fbb.CreateString(crewType) : 0;
  auto armsCrewUnit__ = armsCrewUnit ? _fbb.CreateString(armsCrewUnit) : 0;
  auto crewMembers__ = crewMembers ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*crewMembers) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto updatedAt__ = updatedAt ? _fbb.CreateString(updatedAt) : 0;
  auto updatedBy__ = updatedBy ? _fbb.CreateString(updatedBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateCrew_Ingest(
      _fbb,
      id__,
      classificationMarking__,
      origCrewId__,
      crewName__,
      status__,
      idSortie__,
      legalAlertTime__,
      legalBravoTime__,
      alertedTime__,
      returnTime__,
      fdpEligType__,
      fdpType__,
      crewType__,
      armsCrewUnit__,
      crewMembers__,
      createdAt__,
      createdBy__,
      updatedAt__,
      updatedBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const Crew_Ingest *GetCrew_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<Crew_Ingest>(buf);
}

inline const Crew_Ingest *GetSizePrefixedCrew_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Crew_Ingest>(buf);
}

inline const char *Crew_IngestIdentifier() {
  return "CREW";
}

inline bool Crew_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Crew_IngestIdentifier());
}

inline bool SizePrefixedCrew_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Crew_IngestIdentifier(), true);
}

inline bool VerifyCrew_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Crew_Ingest>(Crew_IngestIdentifier());
}

inline bool VerifySizePrefixedCrew_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Crew_Ingest>(Crew_IngestIdentifier());
}

inline void FinishCrew_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Crew_Ingest> root) {
  fbb.Finish(root, Crew_IngestIdentifier());
}

inline void FinishSizePrefixedCrew_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Crew_Ingest> root) {
  fbb.FinishSizePrefixed(root, Crew_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
