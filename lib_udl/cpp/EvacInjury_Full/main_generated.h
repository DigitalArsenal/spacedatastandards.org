// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacInjury_Full;
struct EvacInjury_FullBuilder;

/// /// Injury specifics.
struct EvacInjury_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacInjury_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BODYPART = 6,
    VT_TIME = 8,
    VT_COMMENTS = 10
  };
  /// Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
  /// Example: /// Example: ABRASION
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  /// Example: /// Example: ARM LEFT FRONT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *bodyPart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODYPART);
  }
  /// The time of the injury, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  /// Additional comments on the patient's injury information.
  /// Example: /// Example: Comments on the patient's injury.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *comments() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_BODYPART) &&
           verifier.VerifyString(bodyPart()) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyOffset(verifier, VT_COMMENTS) &&
           verifier.VerifyString(comments()) &&
           verifier.EndTable();
  }
};

struct EvacInjury_FullBuilder {
  typedef EvacInjury_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EvacInjury_Full::VT_TYPE, type);
  }
  void add_bodyPart(::flatbuffers::Offset<::flatbuffers::String> bodyPart) {
    fbb_.AddOffset(EvacInjury_Full::VT_BODYPART, bodyPart);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(EvacInjury_Full::VT_TIME, time);
  }
  void add_comments(::flatbuffers::Offset<::flatbuffers::String> comments) {
    fbb_.AddOffset(EvacInjury_Full::VT_COMMENTS, comments);
  }
  explicit EvacInjury_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacInjury_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacInjury_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacInjury_Full> CreateEvacInjury_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bodyPart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> comments = 0) {
  EvacInjury_FullBuilder builder_(_fbb);
  builder_.add_comments(comments);
  builder_.add_time(time);
  builder_.add_bodyPart(bodyPart);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacInjury_Full> CreateEvacInjury_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *bodyPart = nullptr,
    const char *time = nullptr,
    const char *comments = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto bodyPart__ = bodyPart ? _fbb.CreateString(bodyPart) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto comments__ = comments ? _fbb.CreateString(comments) : 0;
  return CreateEvacInjury_Full(
      _fbb,
      type__,
      bodyPart__,
      time__,
      comments__);
}

inline const EvacInjury_Full *GetEvacInjury_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EvacInjury_Full>(buf);
}

inline const EvacInjury_Full *GetSizePrefixedEvacInjury_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacInjury_Full>(buf);
}

inline const char *EvacInjury_FullIdentifier() {
  return "EVAC";
}

inline bool EvacInjury_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacInjury_FullIdentifier());
}

inline bool SizePrefixedEvacInjury_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacInjury_FullIdentifier(), true);
}

inline bool VerifyEvacInjury_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacInjury_Full>(EvacInjury_FullIdentifier());
}

inline bool VerifySizePrefixedEvacInjury_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacInjury_Full>(EvacInjury_FullIdentifier());
}

inline void FinishEvacInjury_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacInjury_Full> root) {
  fbb.Finish(root, EvacInjury_FullIdentifier());
}

inline void FinishSizePrefixedEvacInjury_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacInjury_Full> root) {
  fbb.FinishSizePrefixed(root, EvacInjury_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
