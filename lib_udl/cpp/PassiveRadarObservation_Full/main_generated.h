// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct PassiveRadarObservation_Full;
struct PassiveRadarObservation_FullBuilder;

enum PassiveRadarObservation_Full_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  PassiveRadarObservation_Full_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  PassiveRadarObservation_Full_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  PassiveRadarObservation_Full_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  PassiveRadarObservation_Full_dataMode_Enum_EXERCISE = 3,
  PassiveRadarObservation_Full_dataMode_Enum_MIN = PassiveRadarObservation_Full_dataMode_Enum_REAL,
  PassiveRadarObservation_Full_dataMode_Enum_MAX = PassiveRadarObservation_Full_dataMode_Enum_EXERCISE
};

inline const PassiveRadarObservation_Full_dataMode_Enum (&EnumValuesPassiveRadarObservation_Full_dataMode_Enum())[4] {
  static const PassiveRadarObservation_Full_dataMode_Enum values[] = {
    PassiveRadarObservation_Full_dataMode_Enum_REAL,
    PassiveRadarObservation_Full_dataMode_Enum_TEST,
    PassiveRadarObservation_Full_dataMode_Enum_SIMULATED,
    PassiveRadarObservation_Full_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesPassiveRadarObservation_Full_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNamePassiveRadarObservation_Full_dataMode_Enum(PassiveRadarObservation_Full_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, PassiveRadarObservation_Full_dataMode_Enum_REAL, PassiveRadarObservation_Full_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesPassiveRadarObservation_Full_dataMode_Enum()[index];
}

/// /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
struct PassiveRadarObservation_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PassiveRadarObservation_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_OBTIME = 8,
    VT_IDONORBIT = 10,
    VT_SATNO = 12,
    VT_ORIGOBJECTID = 14,
    VT_IDSENSOR = 16,
    VT_ORIGSENSORID = 18,
    VT_IDRFEMITTER = 20,
    VT_IDSENSORREFRECEIVER = 22,
    VT_EXTOBSERVATIONID = 24,
    VT_TASKID = 26,
    VT_TRACKID = 28,
    VT_OBPOSITION = 30,
    VT_UCT = 32,
    VT_AZIMUTH = 34,
    VT_AZIMUTHUNC = 36,
    VT_AZIMUTHBIAS = 38,
    VT_AZIMUTHRATE = 40,
    VT_ELEVATION = 42,
    VT_ELEVATIONUNC = 44,
    VT_ELEVATIONBIAS = 46,
    VT_ELEVATIONRATE = 48,
    VT_DELAY = 50,
    VT_DELAYUNC = 52,
    VT_DELAYBIAS = 54,
    VT_BISTATICRANGE = 56,
    VT_BISTATICRANGEUNC = 58,
    VT_BISTATICRANGEBIAS = 60,
    VT_BISTATICRANGERATE = 62,
    VT_BISTATICRANGERATEUNC = 64,
    VT_BISTATICRANGEACCEL = 66,
    VT_BISTATICRANGEACCELUNC = 68,
    VT_DOPPLER = 70,
    VT_DOPPLERUNC = 72,
    VT_CONING = 74,
    VT_CONINGUNC = 76,
    VT_TOF = 78,
    VT_TOFUNC = 80,
    VT_TOFBIAS = 82,
    VT_ACCEL = 84,
    VT_ACCELUNC = 86,
    VT_RA = 88,
    VT_DECLINATION = 90,
    VT_LAT = 92,
    VT_LON = 94,
    VT_ALT = 96,
    VT_XVEL = 98,
    VT_YVEL = 100,
    VT_ZVEL = 102,
    VT_RCS = 104,
    VT_RCSUNC = 106,
    VT_ORTHOGONALRCS = 108,
    VT_ORTHOGONALRCSUNC = 110,
    VT_SNR = 112,
    VT_TIMINGBIAS = 114,
    VT_TAGS = 116,
    VT_TRANSACTIONID = 118,
    VT_DESCRIPTOR = 120,
    VT_CREATEDAT = 122,
    VT_CREATEDBY = 124,
    VT_SOURCE = 126,
    VT_ORIGIN = 128,
    VT_ORIGNETWORK = 130,
    VT_SOURCEDL = 132,
    VT_DATAMODE = 134,
    VT_ONORBIT = 136,
    VT_TYPE = 138
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2023-01-24T23:35:26.518152Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBTIME);
  }
  /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  /// Example: /// Example: 40699
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 40699
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origObjectId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGOBJECTID);
  }
  /// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  /// Example: /// Example: OCULUSA
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSOR);
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origSensorId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGSENSORID);
  }
  /// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  /// Example: /// Example: RED_CLIFFS_3ABCRN
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idRFEmitter() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDRFEMITTER);
  }
  /// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  /// Example: /// Example: OculusRef1
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idSensorRefReceiver() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSENSORREFRECEIVER);
  }
  /// Optional external observation identifier provided by the source.
  /// Example: /// Example: 26892
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *extObservationId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXTOBSERVATIONID);
  }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *taskId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TASKID);
  }
  /// Unique identifier of a track that represents a tracklet for this observation.
  /// Example: /// Example: 12212
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *trackId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRACKID);
  }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *obPosition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBPOSITION);
  }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool uct() const {
    return GetField<uint8_t>(VT_UCT, 0) != 0;
  }
  /// Line of sight azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 134.5
  /// Constraints: No constraints specified.
  double azimuth() const {
    return GetField<double>(VT_AZIMUTH, 0.0);
  }
  /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double azimuthUnc() const {
    return GetField<double>(VT_AZIMUTHUNC, 0.0);
  }
  /// Sensor azimuth angle bias in degrees.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  double azimuthBias() const {
    return GetField<double>(VT_AZIMUTHBIAS, 0.0);
  }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double azimuthRate() const {
    return GetField<double>(VT_AZIMUTHRATE, 0.0);
  }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 76.1
  /// Constraints: No constraints specified.
  double elevation() const {
    return GetField<double>(VT_ELEVATION, 0.0);
  }
  /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double elevationUnc() const {
    return GetField<double>(VT_ELEVATIONUNC, 0.0);
  }
  /// Sensor elevation bias in degrees.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  double elevationBias() const {
    return GetField<double>(VT_ELEVATIONBIAS, 0.0);
  }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double elevationRate() const {
    return GetField<double>(VT_ELEVATIONRATE, 0.0);
  }
  /// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
  /// Example: /// Example: 0.00505820232809312
  /// Constraints: No constraints specified.
  double delay() const {
    return GetField<double>(VT_DELAY, 0.0);
  }
  /// One sigma uncertainty in the delay measurement, in seconds.
  /// Example: /// Example: 3.1e-06
  /// Constraints: No constraints specified.
  double delayUnc() const {
    return GetField<double>(VT_DELAYUNC, 0.0);
  }
  /// Delay bias in seconds.
  /// Example: /// Example: 1.23e-06
  /// Constraints: No constraints specified.
  double delayBias() const {
    return GetField<double>(VT_DELAYBIAS, 0.0);
  }
  /// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
  /// Example: /// Example: 754.8212
  /// Constraints: No constraints specified.
  double bistaticRange() const {
    return GetField<double>(VT_BISTATICRANGE, 0.0);
  }
  /// One sigma uncertainty in bistatic range in kilometers.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  double bistaticRangeUnc() const {
    return GetField<double>(VT_BISTATICRANGEUNC, 0.0);
  }
  /// Sensor bistatic range bias in kilometers.
  /// Example: /// Example: 2.34
  /// Constraints: No constraints specified.
  double bistaticRangeBias() const {
    return GetField<double>(VT_BISTATICRANGEBIAS, 0.0);
  }
  /// Rate of change of the bistatic path in kilometers/sec.
  /// Example: /// Example: -0.30222
  /// Constraints: No constraints specified.
  double bistaticRangeRate() const {
    return GetField<double>(VT_BISTATICRANGERATE, 0.0);
  }
  /// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  double bistaticRangeRateUnc() const {
    return GetField<double>(VT_BISTATICRANGERATEUNC, 0.0);
  }
  /// Bistatic range acceleration in kilometers/sec^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double bistaticRangeAccel() const {
    return GetField<double>(VT_BISTATICRANGEACCEL, 0.0);
  }
  /// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double bistaticRangeAccelUnc() const {
    return GetField<double>(VT_BISTATICRANGEACCELUNC, 0.0);
  }
  /// Doppler measurement in hertz.
  /// Example: /// Example: -101.781641000597
  /// Constraints: No constraints specified.
  double doppler() const {
    return GetField<double>(VT_DOPPLER, 0.0);
  }
  /// One sigma uncertainty in the Doppler measurement in hertz.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  double dopplerUnc() const {
    return GetField<double>(VT_DOPPLERUNC, 0.0);
  }
  /// Coning angle in degrees.
  /// Example: /// Example: 60.1
  /// Constraints: No constraints specified.
  double coning() const {
    return GetField<double>(VT_CONING, 0.0);
  }
  /// One sigma uncertainty in the coning angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  double coningUnc() const {
    return GetField<double>(VT_CONINGUNC, 0.0);
  }
  /// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
  /// Example: /// Example: 0.00592856674135648
  /// Constraints: No constraints specified.
  double tof() const {
    return GetField<double>(VT_TOF, 0.0);
  }
  /// One sigma uncertainty in time of flight in seconds.
  /// Example: /// Example: 3.1e-06
  /// Constraints: No constraints specified.
  double tofUnc() const {
    return GetField<double>(VT_TOFUNC, 0.0);
  }
  /// The Time of Flight (TOF) bias in seconds.
  /// Example: /// Example: 1.23e-06
  /// Constraints: No constraints specified.
  double tofBias() const {
    return GetField<double>(VT_TOFBIAS, 0.0);
  }
  /// The target Acceleration measurement in kilometers/sec^2 for this observation.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double accel() const {
    return GetField<double>(VT_ACCEL, 0.0);
  }
  /// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  double accelUnc() const {
    return GetField<double>(VT_ACCELUNC, 0.0);
  }
  /// Line of sight right ascension in degrees and J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double ra() const {
    return GetField<double>(VT_RA, 0.0);
  }
  /// Line of sight declination angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double declination() const {
    return GetField<double>(VT_DECLINATION, 0.0);
  }
  /// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -35.1181763996856
  /// Constraints: No constraints specified.
  double lat() const {
    return GetField<double>(VT_LAT, 0.0);
  }
  /// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 139.613567052763
  /// Constraints: No constraints specified.
  double lon() const {
    return GetField<double>(VT_LON, 0.0);
  }
  /// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
  /// Example: /// Example: 478.056378
  /// Constraints: No constraints specified.
  double alt() const {
    return GetField<double>(VT_ALT, 0.0);
  }
  /// X velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double xvel() const {
    return GetField<double>(VT_XVEL, 0.0);
  }
  /// Y velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 3.21
  /// Constraints: No constraints specified.
  double yvel() const {
    return GetField<double>(VT_YVEL, 0.0);
  }
  /// Z velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 3.12
  /// Constraints: No constraints specified.
  double zvel() const {
    return GetField<double>(VT_ZVEL, 0.0);
  }
  /// Radar cross section in meters squared for polarization principal.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  double rcs() const {
    return GetField<double>(VT_RCS, 0.0);
  }
  /// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double rcsUnc() const {
    return GetField<double>(VT_RCSUNC, 0.0);
  }
  /// Radar cross section in meters squared for orthogonal polarization.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  double orthogonalRcs() const {
    return GetField<double>(VT_ORTHOGONALRCS, 0.0);
  }
  /// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double orthogonalRcsUnc() const {
    return GetField<double>(VT_ORTHOGONALRCSUNC, 0.0);
  }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 17.292053
  /// Constraints: No constraints specified.
  double snr() const {
    return GetField<double>(VT_SNR, 0.0);
  }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  double timingBias() const {
    return GetField<double>(VT_TIMINGBIAS, 0.0);
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *transactionId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TRANSACTIONID);
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *descriptor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTOR);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *sourceDL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCEDL);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  PassiveRadarObservation_Full_dataMode_Enum dataMode() const {
    return static_cast<PassiveRadarObservation_Full_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *onOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ONORBIT);
  }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: RADAR
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_OBTIME) &&
           verifier.VerifyString(obTime()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_ORIGOBJECTID) &&
           verifier.VerifyString(origObjectId()) &&
           VerifyOffset(verifier, VT_IDSENSOR) &&
           verifier.VerifyString(idSensor()) &&
           VerifyOffset(verifier, VT_ORIGSENSORID) &&
           verifier.VerifyString(origSensorId()) &&
           VerifyOffset(verifier, VT_IDRFEMITTER) &&
           verifier.VerifyString(idRFEmitter()) &&
           VerifyOffset(verifier, VT_IDSENSORREFRECEIVER) &&
           verifier.VerifyString(idSensorRefReceiver()) &&
           VerifyOffset(verifier, VT_EXTOBSERVATIONID) &&
           verifier.VerifyString(extObservationId()) &&
           VerifyOffset(verifier, VT_TASKID) &&
           verifier.VerifyString(taskId()) &&
           VerifyOffset(verifier, VT_TRACKID) &&
           verifier.VerifyString(trackId()) &&
           VerifyOffset(verifier, VT_OBPOSITION) &&
           verifier.VerifyString(obPosition()) &&
           VerifyField<uint8_t>(verifier, VT_UCT, 1) &&
           VerifyField<double>(verifier, VT_AZIMUTH, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHUNC, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHBIAS, 8) &&
           VerifyField<double>(verifier, VT_AZIMUTHRATE, 8) &&
           VerifyField<double>(verifier, VT_ELEVATION, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONUNC, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONBIAS, 8) &&
           VerifyField<double>(verifier, VT_ELEVATIONRATE, 8) &&
           VerifyField<double>(verifier, VT_DELAY, 8) &&
           VerifyField<double>(verifier, VT_DELAYUNC, 8) &&
           VerifyField<double>(verifier, VT_DELAYBIAS, 8) &&
           VerifyField<double>(verifier, VT_BISTATICRANGE, 8) &&
           VerifyField<double>(verifier, VT_BISTATICRANGEUNC, 8) &&
           VerifyField<double>(verifier, VT_BISTATICRANGEBIAS, 8) &&
           VerifyField<double>(verifier, VT_BISTATICRANGERATE, 8) &&
           VerifyField<double>(verifier, VT_BISTATICRANGERATEUNC, 8) &&
           VerifyField<double>(verifier, VT_BISTATICRANGEACCEL, 8) &&
           VerifyField<double>(verifier, VT_BISTATICRANGEACCELUNC, 8) &&
           VerifyField<double>(verifier, VT_DOPPLER, 8) &&
           VerifyField<double>(verifier, VT_DOPPLERUNC, 8) &&
           VerifyField<double>(verifier, VT_CONING, 8) &&
           VerifyField<double>(verifier, VT_CONINGUNC, 8) &&
           VerifyField<double>(verifier, VT_TOF, 8) &&
           VerifyField<double>(verifier, VT_TOFUNC, 8) &&
           VerifyField<double>(verifier, VT_TOFBIAS, 8) &&
           VerifyField<double>(verifier, VT_ACCEL, 8) &&
           VerifyField<double>(verifier, VT_ACCELUNC, 8) &&
           VerifyField<double>(verifier, VT_RA, 8) &&
           VerifyField<double>(verifier, VT_DECLINATION, 8) &&
           VerifyField<double>(verifier, VT_LAT, 8) &&
           VerifyField<double>(verifier, VT_LON, 8) &&
           VerifyField<double>(verifier, VT_ALT, 8) &&
           VerifyField<double>(verifier, VT_XVEL, 8) &&
           VerifyField<double>(verifier, VT_YVEL, 8) &&
           VerifyField<double>(verifier, VT_ZVEL, 8) &&
           VerifyField<double>(verifier, VT_RCS, 8) &&
           VerifyField<double>(verifier, VT_RCSUNC, 8) &&
           VerifyField<double>(verifier, VT_ORTHOGONALRCS, 8) &&
           VerifyField<double>(verifier, VT_ORTHOGONALRCSUNC, 8) &&
           VerifyField<double>(verifier, VT_SNR, 8) &&
           VerifyField<double>(verifier, VT_TIMINGBIAS, 8) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_TRANSACTIONID) &&
           verifier.VerifyString(transactionId()) &&
           VerifyOffset(verifier, VT_DESCRIPTOR) &&
           verifier.VerifyString(descriptor()) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyOffset(verifier, VT_SOURCEDL) &&
           verifier.VerifyString(sourceDL()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_ONORBIT) &&
           verifier.VerifyString(onOrbit()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           verifier.EndTable();
  }
};

struct PassiveRadarObservation_FullBuilder {
  typedef PassiveRadarObservation_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_obTime(::flatbuffers::Offset<::flatbuffers::String> obTime) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_OBTIME, obTime);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(PassiveRadarObservation_Full::VT_SATNO, satNo, 0);
  }
  void add_origObjectId(::flatbuffers::Offset<::flatbuffers::String> origObjectId) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_ORIGOBJECTID, origObjectId);
  }
  void add_idSensor(::flatbuffers::Offset<::flatbuffers::String> idSensor) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_IDSENSOR, idSensor);
  }
  void add_origSensorId(::flatbuffers::Offset<::flatbuffers::String> origSensorId) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_ORIGSENSORID, origSensorId);
  }
  void add_idRFEmitter(::flatbuffers::Offset<::flatbuffers::String> idRFEmitter) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_IDRFEMITTER, idRFEmitter);
  }
  void add_idSensorRefReceiver(::flatbuffers::Offset<::flatbuffers::String> idSensorRefReceiver) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_IDSENSORREFRECEIVER, idSensorRefReceiver);
  }
  void add_extObservationId(::flatbuffers::Offset<::flatbuffers::String> extObservationId) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_EXTOBSERVATIONID, extObservationId);
  }
  void add_taskId(::flatbuffers::Offset<::flatbuffers::String> taskId) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_TASKID, taskId);
  }
  void add_trackId(::flatbuffers::Offset<::flatbuffers::String> trackId) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_TRACKID, trackId);
  }
  void add_obPosition(::flatbuffers::Offset<::flatbuffers::String> obPosition) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_OBPOSITION, obPosition);
  }
  void add_uct(bool uct) {
    fbb_.AddElement<uint8_t>(PassiveRadarObservation_Full::VT_UCT, static_cast<uint8_t>(uct), 0);
  }
  void add_azimuth(double azimuth) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_AZIMUTH, azimuth, 0.0);
  }
  void add_azimuthUnc(double azimuthUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_AZIMUTHUNC, azimuthUnc, 0.0);
  }
  void add_azimuthBias(double azimuthBias) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_AZIMUTHBIAS, azimuthBias, 0.0);
  }
  void add_azimuthRate(double azimuthRate) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_AZIMUTHRATE, azimuthRate, 0.0);
  }
  void add_elevation(double elevation) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ELEVATION, elevation, 0.0);
  }
  void add_elevationUnc(double elevationUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ELEVATIONUNC, elevationUnc, 0.0);
  }
  void add_elevationBias(double elevationBias) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ELEVATIONBIAS, elevationBias, 0.0);
  }
  void add_elevationRate(double elevationRate) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ELEVATIONRATE, elevationRate, 0.0);
  }
  void add_delay(double delay) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_DELAY, delay, 0.0);
  }
  void add_delayUnc(double delayUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_DELAYUNC, delayUnc, 0.0);
  }
  void add_delayBias(double delayBias) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_DELAYBIAS, delayBias, 0.0);
  }
  void add_bistaticRange(double bistaticRange) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_BISTATICRANGE, bistaticRange, 0.0);
  }
  void add_bistaticRangeUnc(double bistaticRangeUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_BISTATICRANGEUNC, bistaticRangeUnc, 0.0);
  }
  void add_bistaticRangeBias(double bistaticRangeBias) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_BISTATICRANGEBIAS, bistaticRangeBias, 0.0);
  }
  void add_bistaticRangeRate(double bistaticRangeRate) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_BISTATICRANGERATE, bistaticRangeRate, 0.0);
  }
  void add_bistaticRangeRateUnc(double bistaticRangeRateUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_BISTATICRANGERATEUNC, bistaticRangeRateUnc, 0.0);
  }
  void add_bistaticRangeAccel(double bistaticRangeAccel) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_BISTATICRANGEACCEL, bistaticRangeAccel, 0.0);
  }
  void add_bistaticRangeAccelUnc(double bistaticRangeAccelUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_BISTATICRANGEACCELUNC, bistaticRangeAccelUnc, 0.0);
  }
  void add_doppler(double doppler) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_DOPPLER, doppler, 0.0);
  }
  void add_dopplerUnc(double dopplerUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_DOPPLERUNC, dopplerUnc, 0.0);
  }
  void add_coning(double coning) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_CONING, coning, 0.0);
  }
  void add_coningUnc(double coningUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_CONINGUNC, coningUnc, 0.0);
  }
  void add_tof(double tof) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_TOF, tof, 0.0);
  }
  void add_tofUnc(double tofUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_TOFUNC, tofUnc, 0.0);
  }
  void add_tofBias(double tofBias) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_TOFBIAS, tofBias, 0.0);
  }
  void add_accel(double accel) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ACCEL, accel, 0.0);
  }
  void add_accelUnc(double accelUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ACCELUNC, accelUnc, 0.0);
  }
  void add_ra(double ra) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_RA, ra, 0.0);
  }
  void add_declination(double declination) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_DECLINATION, declination, 0.0);
  }
  void add_lat(double lat) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_LAT, lat, 0.0);
  }
  void add_lon(double lon) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_LON, lon, 0.0);
  }
  void add_alt(double alt) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ALT, alt, 0.0);
  }
  void add_xvel(double xvel) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_XVEL, xvel, 0.0);
  }
  void add_yvel(double yvel) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_YVEL, yvel, 0.0);
  }
  void add_zvel(double zvel) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ZVEL, zvel, 0.0);
  }
  void add_rcs(double rcs) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_RCS, rcs, 0.0);
  }
  void add_rcsUnc(double rcsUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_RCSUNC, rcsUnc, 0.0);
  }
  void add_orthogonalRcs(double orthogonalRcs) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ORTHOGONALRCS, orthogonalRcs, 0.0);
  }
  void add_orthogonalRcsUnc(double orthogonalRcsUnc) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_ORTHOGONALRCSUNC, orthogonalRcsUnc, 0.0);
  }
  void add_snr(double snr) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_SNR, snr, 0.0);
  }
  void add_timingBias(double timingBias) {
    fbb_.AddElement<double>(PassiveRadarObservation_Full::VT_TIMINGBIAS, timingBias, 0.0);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_TAGS, tags);
  }
  void add_transactionId(::flatbuffers::Offset<::flatbuffers::String> transactionId) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_TRANSACTIONID, transactionId);
  }
  void add_descriptor(::flatbuffers::Offset<::flatbuffers::String> descriptor) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_DESCRIPTOR, descriptor);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_ORIGNETWORK, origNetwork);
  }
  void add_sourceDL(::flatbuffers::Offset<::flatbuffers::String> sourceDL) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_SOURCEDL, sourceDL);
  }
  void add_dataMode(PassiveRadarObservation_Full_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(PassiveRadarObservation_Full::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_onOrbit(::flatbuffers::Offset<::flatbuffers::String> onOrbit) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_ONORBIT, onOrbit);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(PassiveRadarObservation_Full::VT_TYPE, type);
  }
  explicit PassiveRadarObservation_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PassiveRadarObservation_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PassiveRadarObservation_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PassiveRadarObservation_Full> CreatePassiveRadarObservation_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origObjectId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origSensorId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idRFEmitter = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idSensorRefReceiver = 0,
    ::flatbuffers::Offset<::flatbuffers::String> extObservationId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> taskId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> trackId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> obPosition = 0,
    bool uct = false,
    double azimuth = 0.0,
    double azimuthUnc = 0.0,
    double azimuthBias = 0.0,
    double azimuthRate = 0.0,
    double elevation = 0.0,
    double elevationUnc = 0.0,
    double elevationBias = 0.0,
    double elevationRate = 0.0,
    double delay = 0.0,
    double delayUnc = 0.0,
    double delayBias = 0.0,
    double bistaticRange = 0.0,
    double bistaticRangeUnc = 0.0,
    double bistaticRangeBias = 0.0,
    double bistaticRangeRate = 0.0,
    double bistaticRangeRateUnc = 0.0,
    double bistaticRangeAccel = 0.0,
    double bistaticRangeAccelUnc = 0.0,
    double doppler = 0.0,
    double dopplerUnc = 0.0,
    double coning = 0.0,
    double coningUnc = 0.0,
    double tof = 0.0,
    double tofUnc = 0.0,
    double tofBias = 0.0,
    double accel = 0.0,
    double accelUnc = 0.0,
    double ra = 0.0,
    double declination = 0.0,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    double rcs = 0.0,
    double rcsUnc = 0.0,
    double orthogonalRcs = 0.0,
    double orthogonalRcsUnc = 0.0,
    double snr = 0.0,
    double timingBias = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::String> transactionId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> descriptor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceDL = 0,
    PassiveRadarObservation_Full_dataMode_Enum dataMode = PassiveRadarObservation_Full_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> onOrbit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0) {
  PassiveRadarObservation_FullBuilder builder_(_fbb);
  builder_.add_timingBias(timingBias);
  builder_.add_snr(snr);
  builder_.add_orthogonalRcsUnc(orthogonalRcsUnc);
  builder_.add_orthogonalRcs(orthogonalRcs);
  builder_.add_rcsUnc(rcsUnc);
  builder_.add_rcs(rcs);
  builder_.add_zvel(zvel);
  builder_.add_yvel(yvel);
  builder_.add_xvel(xvel);
  builder_.add_alt(alt);
  builder_.add_lon(lon);
  builder_.add_lat(lat);
  builder_.add_declination(declination);
  builder_.add_ra(ra);
  builder_.add_accelUnc(accelUnc);
  builder_.add_accel(accel);
  builder_.add_tofBias(tofBias);
  builder_.add_tofUnc(tofUnc);
  builder_.add_tof(tof);
  builder_.add_coningUnc(coningUnc);
  builder_.add_coning(coning);
  builder_.add_dopplerUnc(dopplerUnc);
  builder_.add_doppler(doppler);
  builder_.add_bistaticRangeAccelUnc(bistaticRangeAccelUnc);
  builder_.add_bistaticRangeAccel(bistaticRangeAccel);
  builder_.add_bistaticRangeRateUnc(bistaticRangeRateUnc);
  builder_.add_bistaticRangeRate(bistaticRangeRate);
  builder_.add_bistaticRangeBias(bistaticRangeBias);
  builder_.add_bistaticRangeUnc(bistaticRangeUnc);
  builder_.add_bistaticRange(bistaticRange);
  builder_.add_delayBias(delayBias);
  builder_.add_delayUnc(delayUnc);
  builder_.add_delay(delay);
  builder_.add_elevationRate(elevationRate);
  builder_.add_elevationBias(elevationBias);
  builder_.add_elevationUnc(elevationUnc);
  builder_.add_elevation(elevation);
  builder_.add_azimuthRate(azimuthRate);
  builder_.add_azimuthBias(azimuthBias);
  builder_.add_azimuthUnc(azimuthUnc);
  builder_.add_azimuth(azimuth);
  builder_.add_type(type);
  builder_.add_onOrbit(onOrbit);
  builder_.add_sourceDL(sourceDL);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_descriptor(descriptor);
  builder_.add_transactionId(transactionId);
  builder_.add_tags(tags);
  builder_.add_obPosition(obPosition);
  builder_.add_trackId(trackId);
  builder_.add_taskId(taskId);
  builder_.add_extObservationId(extObservationId);
  builder_.add_idSensorRefReceiver(idSensorRefReceiver);
  builder_.add_idRFEmitter(idRFEmitter);
  builder_.add_origSensorId(origSensorId);
  builder_.add_idSensor(idSensor);
  builder_.add_origObjectId(origObjectId);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_obTime(obTime);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  builder_.add_uct(uct);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<PassiveRadarObservation_Full> CreatePassiveRadarObservation_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *obTime = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *origObjectId = nullptr,
    const char *idSensor = nullptr,
    const char *origSensorId = nullptr,
    const char *idRFEmitter = nullptr,
    const char *idSensorRefReceiver = nullptr,
    const char *extObservationId = nullptr,
    const char *taskId = nullptr,
    const char *trackId = nullptr,
    const char *obPosition = nullptr,
    bool uct = false,
    double azimuth = 0.0,
    double azimuthUnc = 0.0,
    double azimuthBias = 0.0,
    double azimuthRate = 0.0,
    double elevation = 0.0,
    double elevationUnc = 0.0,
    double elevationBias = 0.0,
    double elevationRate = 0.0,
    double delay = 0.0,
    double delayUnc = 0.0,
    double delayBias = 0.0,
    double bistaticRange = 0.0,
    double bistaticRangeUnc = 0.0,
    double bistaticRangeBias = 0.0,
    double bistaticRangeRate = 0.0,
    double bistaticRangeRateUnc = 0.0,
    double bistaticRangeAccel = 0.0,
    double bistaticRangeAccelUnc = 0.0,
    double doppler = 0.0,
    double dopplerUnc = 0.0,
    double coning = 0.0,
    double coningUnc = 0.0,
    double tof = 0.0,
    double tofUnc = 0.0,
    double tofBias = 0.0,
    double accel = 0.0,
    double accelUnc = 0.0,
    double ra = 0.0,
    double declination = 0.0,
    double lat = 0.0,
    double lon = 0.0,
    double alt = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    double rcs = 0.0,
    double rcsUnc = 0.0,
    double orthogonalRcs = 0.0,
    double orthogonalRcsUnc = 0.0,
    double snr = 0.0,
    double timingBias = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const char *transactionId = nullptr,
    const char *descriptor = nullptr,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    const char *sourceDL = nullptr,
    PassiveRadarObservation_Full_dataMode_Enum dataMode = PassiveRadarObservation_Full_dataMode_Enum_REAL,
    const char *onOrbit = nullptr,
    const char *type = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto obTime__ = obTime ? _fbb.CreateString(obTime) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto origObjectId__ = origObjectId ? _fbb.CreateString(origObjectId) : 0;
  auto idSensor__ = idSensor ? _fbb.CreateString(idSensor) : 0;
  auto origSensorId__ = origSensorId ? _fbb.CreateString(origSensorId) : 0;
  auto idRFEmitter__ = idRFEmitter ? _fbb.CreateString(idRFEmitter) : 0;
  auto idSensorRefReceiver__ = idSensorRefReceiver ? _fbb.CreateString(idSensorRefReceiver) : 0;
  auto extObservationId__ = extObservationId ? _fbb.CreateString(extObservationId) : 0;
  auto taskId__ = taskId ? _fbb.CreateString(taskId) : 0;
  auto trackId__ = trackId ? _fbb.CreateString(trackId) : 0;
  auto obPosition__ = obPosition ? _fbb.CreateString(obPosition) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto transactionId__ = transactionId ? _fbb.CreateString(transactionId) : 0;
  auto descriptor__ = descriptor ? _fbb.CreateString(descriptor) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto sourceDL__ = sourceDL ? _fbb.CreateString(sourceDL) : 0;
  auto onOrbit__ = onOrbit ? _fbb.CreateString(onOrbit) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return CreatePassiveRadarObservation_Full(
      _fbb,
      id__,
      classificationMarking__,
      obTime__,
      idOnOrbit__,
      satNo,
      origObjectId__,
      idSensor__,
      origSensorId__,
      idRFEmitter__,
      idSensorRefReceiver__,
      extObservationId__,
      taskId__,
      trackId__,
      obPosition__,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      delay,
      delayUnc,
      delayBias,
      bistaticRange,
      bistaticRangeUnc,
      bistaticRangeBias,
      bistaticRangeRate,
      bistaticRangeRateUnc,
      bistaticRangeAccel,
      bistaticRangeAccelUnc,
      doppler,
      dopplerUnc,
      coning,
      coningUnc,
      tof,
      tofUnc,
      tofBias,
      accel,
      accelUnc,
      ra,
      declination,
      lat,
      lon,
      alt,
      xvel,
      yvel,
      zvel,
      rcs,
      rcsUnc,
      orthogonalRcs,
      orthogonalRcsUnc,
      snr,
      timingBias,
      tags__,
      transactionId__,
      descriptor__,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      sourceDL__,
      dataMode,
      onOrbit__,
      type__);
}

inline const PassiveRadarObservation_Full *GetPassiveRadarObservation_Full(const void *buf) {
  return ::flatbuffers::GetRoot<PassiveRadarObservation_Full>(buf);
}

inline const PassiveRadarObservation_Full *GetSizePrefixedPassiveRadarObservation_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<PassiveRadarObservation_Full>(buf);
}

inline const char *PassiveRadarObservation_FullIdentifier() {
  return "PASS";
}

inline bool PassiveRadarObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PassiveRadarObservation_FullIdentifier());
}

inline bool SizePrefixedPassiveRadarObservation_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, PassiveRadarObservation_FullIdentifier(), true);
}

inline bool VerifyPassiveRadarObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<PassiveRadarObservation_Full>(PassiveRadarObservation_FullIdentifier());
}

inline bool VerifySizePrefixedPassiveRadarObservation_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<PassiveRadarObservation_Full>(PassiveRadarObservation_FullIdentifier());
}

inline void FinishPassiveRadarObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PassiveRadarObservation_Full> root) {
  fbb.Finish(root, PassiveRadarObservation_FullIdentifier());
}

inline void FinishSizePrefixedPassiveRadarObservation_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<PassiveRadarObservation_Full> root) {
  fbb.FinishSizePrefixed(root, PassiveRadarObservation_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
