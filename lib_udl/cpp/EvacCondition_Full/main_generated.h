// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct EvacCondition_Full;
struct EvacCondition_FullBuilder;

/// /// The group path from transmitter to receiver.
struct EvacCondition_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EvacCondition_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BODYPART = 6,
    VT_TIME = 8,
    VT_COMMENTS = 10
  };
  /// Health condition assessment.  Intended as, but not constrained to, K07.1 Condition Type Enumeration (e.g. ACTIVITY HIGH, ACTIVITY LOW, ACTIVITY MEDIUM, ACTIVITY NONE, AVPU ALERT, AVPU ALTERED MENTAL STATE, AVPU PAIN, AVPU UNRESPONSIVE, etc.).
  /// Example: /// Example: ACTIVITY LOW
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  /// Body part location or body part referenced in condition.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
  /// Example: /// Example: ANKLE LEFT FRONT
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *bodyPart() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BODYPART);
  }
  /// Datetime of the condition diagnosis in ISO 8601 UTC datetime format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  /// Additional comments on the patient's condition.
  /// Example: /// Example: Comments on the patient's condition.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  const ::flatbuffers::String *comments() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COMMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_BODYPART) &&
           verifier.VerifyString(bodyPart()) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyOffset(verifier, VT_COMMENTS) &&
           verifier.VerifyString(comments()) &&
           verifier.EndTable();
  }
};

struct EvacCondition_FullBuilder {
  typedef EvacCondition_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(EvacCondition_Full::VT_TYPE, type);
  }
  void add_bodyPart(::flatbuffers::Offset<::flatbuffers::String> bodyPart) {
    fbb_.AddOffset(EvacCondition_Full::VT_BODYPART, bodyPart);
  }
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(EvacCondition_Full::VT_TIME, time);
  }
  void add_comments(::flatbuffers::Offset<::flatbuffers::String> comments) {
    fbb_.AddOffset(EvacCondition_Full::VT_COMMENTS, comments);
  }
  explicit EvacCondition_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EvacCondition_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EvacCondition_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EvacCondition_Full> CreateEvacCondition_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bodyPart = 0,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> comments = 0) {
  EvacCondition_FullBuilder builder_(_fbb);
  builder_.add_comments(comments);
  builder_.add_time(time);
  builder_.add_bodyPart(bodyPart);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EvacCondition_Full> CreateEvacCondition_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *bodyPart = nullptr,
    const char *time = nullptr,
    const char *comments = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto bodyPart__ = bodyPart ? _fbb.CreateString(bodyPart) : 0;
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto comments__ = comments ? _fbb.CreateString(comments) : 0;
  return CreateEvacCondition_Full(
      _fbb,
      type__,
      bodyPart__,
      time__,
      comments__);
}

inline const EvacCondition_Full *GetEvacCondition_Full(const void *buf) {
  return ::flatbuffers::GetRoot<EvacCondition_Full>(buf);
}

inline const EvacCondition_Full *GetSizePrefixedEvacCondition_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<EvacCondition_Full>(buf);
}

inline const char *EvacCondition_FullIdentifier() {
  return "EVAC";
}

inline bool EvacCondition_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacCondition_FullIdentifier());
}

inline bool SizePrefixedEvacCondition_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, EvacCondition_FullIdentifier(), true);
}

inline bool VerifyEvacCondition_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<EvacCondition_Full>(EvacCondition_FullIdentifier());
}

inline bool VerifySizePrefixedEvacCondition_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<EvacCondition_Full>(EvacCondition_FullIdentifier());
}

inline void FinishEvacCondition_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacCondition_Full> root) {
  fbb.Finish(root, EvacCondition_FullIdentifier());
}

inline void FinishSizePrefixedEvacCondition_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<EvacCondition_Full> root) {
  fbb.FinishSizePrefixed(root, EvacCondition_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
