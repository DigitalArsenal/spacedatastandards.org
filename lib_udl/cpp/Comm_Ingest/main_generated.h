// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct Comm_Ingest;
struct Comm_IngestBuilder;

enum Comm_Ingest_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  Comm_Ingest_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  Comm_Ingest_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  Comm_Ingest_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  Comm_Ingest_dataMode_Enum_EXERCISE = 3,
  Comm_Ingest_dataMode_Enum_MIN = Comm_Ingest_dataMode_Enum_REAL,
  Comm_Ingest_dataMode_Enum_MAX = Comm_Ingest_dataMode_Enum_EXERCISE
};

inline const Comm_Ingest_dataMode_Enum (&EnumValuesComm_Ingest_dataMode_Enum())[4] {
  static const Comm_Ingest_dataMode_Enum values[] = {
    Comm_Ingest_dataMode_Enum_REAL,
    Comm_Ingest_dataMode_Enum_TEST,
    Comm_Ingest_dataMode_Enum_SIMULATED,
    Comm_Ingest_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesComm_Ingest_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameComm_Ingest_dataMode_Enum(Comm_Ingest_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, Comm_Ingest_dataMode_Enum_REAL, Comm_Ingest_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesComm_Ingest_dataMode_Enum()[index];
}

/// /// Comm represents communications entities (e.g. on-orbit communications satellite payloads) within the SSA environment.
struct Comm_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef Comm_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_IDENTITY = 6,
    VT_NAME = 8,
    VT_CLASSIFICATIONMARKING = 10,
    VT_DESCRIPTION = 12,
    VT_SOURCE = 14,
    VT_ORIGIN = 16,
    VT_ORIGNETWORK = 18,
    VT_DATAMODE = 20,
    VT_CREATEDAT = 22,
    VT_CREATEDBY = 24,
    VT_ENTITY = 26
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: COMM-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idEntity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  /// Name of the Comm entity.
  /// Example: /// Example: DSCS II C-7-COMM Payload
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// Description of the comm entity.
  /// Example: /// Example: Description for comm A
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  Comm_Ingest_dataMode_Enum dataMode() const {
    return static_cast<Comm_Ingest_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *entity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENTITY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(idEntity()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_ENTITY) &&
           verifier.VerifyString(entity()) &&
           verifier.EndTable();
  }
};

struct Comm_IngestBuilder {
  typedef Comm_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(Comm_Ingest::VT_ID, id);
  }
  void add_idEntity(::flatbuffers::Offset<::flatbuffers::String> idEntity) {
    fbb_.AddOffset(Comm_Ingest::VT_IDENTITY, idEntity);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Comm_Ingest::VT_NAME, name);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(Comm_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(Comm_Ingest::VT_DESCRIPTION, description);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(Comm_Ingest::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(Comm_Ingest::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(Comm_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(Comm_Ingest_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(Comm_Ingest::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(Comm_Ingest::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(Comm_Ingest::VT_CREATEDBY, createdBy);
  }
  void add_entity(::flatbuffers::Offset<::flatbuffers::String> entity) {
    fbb_.AddOffset(Comm_Ingest::VT_ENTITY, entity);
  }
  explicit Comm_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Comm_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Comm_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Comm_Ingest> CreateComm_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idEntity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    Comm_Ingest_dataMode_Enum dataMode = Comm_Ingest_dataMode_Enum_REAL,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> entity = 0) {
  Comm_IngestBuilder builder_(_fbb);
  builder_.add_entity(entity);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_description(description);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_name(name);
  builder_.add_idEntity(idEntity);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Comm_Ingest> CreateComm_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *idEntity = nullptr,
    const char *name = nullptr,
    const char *classificationMarking = nullptr,
    const char *description = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    Comm_Ingest_dataMode_Enum dataMode = Comm_Ingest_dataMode_Enum_REAL,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *entity = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto idEntity__ = idEntity ? _fbb.CreateString(idEntity) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto entity__ = entity ? _fbb.CreateString(entity) : 0;
  return CreateComm_Ingest(
      _fbb,
      id__,
      idEntity__,
      name__,
      classificationMarking__,
      description__,
      source__,
      origin__,
      origNetwork__,
      dataMode,
      createdAt__,
      createdBy__,
      entity__);
}

inline const Comm_Ingest *GetComm_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<Comm_Ingest>(buf);
}

inline const Comm_Ingest *GetSizePrefixedComm_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Comm_Ingest>(buf);
}

inline const char *Comm_IngestIdentifier() {
  return "COMM";
}

inline bool Comm_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Comm_IngestIdentifier());
}

inline bool SizePrefixedComm_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, Comm_IngestIdentifier(), true);
}

inline bool VerifyComm_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Comm_Ingest>(Comm_IngestIdentifier());
}

inline bool VerifySizePrefixedComm_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Comm_Ingest>(Comm_IngestIdentifier());
}

inline void FinishComm_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Comm_Ingest> root) {
  fbb.Finish(root, Comm_IngestIdentifier());
}

inline void FinishSizePrefixedComm_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Comm_Ingest> root) {
  fbb.FinishSizePrefixed(root, Comm_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
