// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ObjectOfInterest_Abridged;
struct ObjectOfInterest_AbridgedBuilder;

enum ObjectOfInterest_Abridged_dataMode_Enum : int8_t {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  ObjectOfInterest_Abridged_dataMode_Enum_REAL = 0,
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  ObjectOfInterest_Abridged_dataMode_Enum_TEST = 1,
  /// Synthetic data generated by a model to mimic real-world datasets.
  ObjectOfInterest_Abridged_dataMode_Enum_SIMULATED = 2,
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  ObjectOfInterest_Abridged_dataMode_Enum_EXERCISE = 3,
  ObjectOfInterest_Abridged_dataMode_Enum_MIN = ObjectOfInterest_Abridged_dataMode_Enum_REAL,
  ObjectOfInterest_Abridged_dataMode_Enum_MAX = ObjectOfInterest_Abridged_dataMode_Enum_EXERCISE
};

inline const ObjectOfInterest_Abridged_dataMode_Enum (&EnumValuesObjectOfInterest_Abridged_dataMode_Enum())[4] {
  static const ObjectOfInterest_Abridged_dataMode_Enum values[] = {
    ObjectOfInterest_Abridged_dataMode_Enum_REAL,
    ObjectOfInterest_Abridged_dataMode_Enum_TEST,
    ObjectOfInterest_Abridged_dataMode_Enum_SIMULATED,
    ObjectOfInterest_Abridged_dataMode_Enum_EXERCISE
  };
  return values;
}

inline const char * const *EnumNamesObjectOfInterest_Abridged_dataMode_Enum() {
  static const char * const names[5] = {
    "REAL",
    "TEST",
    "SIMULATED",
    "EXERCISE",
    nullptr
  };
  return names;
}

inline const char *EnumNameObjectOfInterest_Abridged_dataMode_Enum(ObjectOfInterest_Abridged_dataMode_Enum e) {
  if (::flatbuffers::IsOutRange(e, ObjectOfInterest_Abridged_dataMode_Enum_REAL, ObjectOfInterest_Abridged_dataMode_Enum_EXERCISE)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesObjectOfInterest_Abridged_dataMode_Enum()[index];
}

/// /// OnOrbit objects of interest, which include information about the last known state of the object.
struct ObjectOfInterest_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ObjectOfInterest_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_CLASSIFICATIONMARKING = 6,
    VT_IDONORBIT = 8,
    VT_SATNO = 10,
    VT_NAME = 12,
    VT_SENSORTASKINGSTARTTIME = 14,
    VT_SENSORTASKINGSTOPTIME = 16,
    VT_PRIORITY = 18,
    VT_STATUS = 20,
    VT_STATUSDATE = 22,
    VT_DESCRIPTION = 24,
    VT_LASTOBTIME = 26,
    VT_MISSEDOBTIME = 28,
    VT_DELTAVS = 30,
    VT_DELTATS = 32,
    VT_SVEPOCH = 34,
    VT_X = 36,
    VT_Y = 38,
    VT_Z = 40,
    VT_XVEL = 42,
    VT_YVEL = 44,
    VT_ZVEL = 46,
    VT_ELSETEPOCH = 48,
    VT_MEANMOTION = 50,
    VT_ECCENTRICITY = 52,
    VT_INCLINATION = 54,
    VT_RAAN = 56,
    VT_ARGOFPERIGEE = 58,
    VT_MEANANOMALY = 60,
    VT_REVNO = 62,
    VT_BSTAR = 64,
    VT_MEANMOTIONDOT = 66,
    VT_MEANMOTIONDDOT = 68,
    VT_SEMIMAJORAXIS = 70,
    VT_PERIOD = 72,
    VT_APOGEE = 74,
    VT_PERIGEE = 76,
    VT_CREATEDAT = 78,
    VT_CREATEDBY = 80,
    VT_SOURCE = 82,
    VT_ORIGIN = 84,
    VT_ORIGNETWORK = 86,
    VT_DATAMODE = 88
  };
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: OBJECTOFINTEREST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  const ::flatbuffers::String *classificationMarking() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATIONMARKING);
  }
  /// UUID of the parent Onorbit record.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  const ::flatbuffers::String *idOnOrbit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDONORBIT);
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  int32_t satNo() const {
    return GetField<int32_t>(VT_SATNO, 0);
  }
  /// Unique name of the object of interest event.
  /// Example: /// Example: Example_name
  /// Constraints: Minimum length = 0, Maximum length = 128
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  /// Sensor tasking start time for object of interest.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sensorTaskingStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENSORTASKINGSTARTTIME);
  }
  /// Sensor tasking stop time for object of interest.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *sensorTaskingStopTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SENSORTASKINGSTOPTIME);
  }
  /// Priority of the object of interest as an integer (1=highest priority).
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  int32_t priority() const {
    return GetField<int32_t>(VT_PRIORITY, 0);
  }
  /// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
  /// Example: /// Example: OPEN
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  /// Time of last status change of the object of interest event.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *statusDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUSDATE);
  }
  /// Description of the object of interest event.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  /// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastObTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTOBTIME);
  }
  /// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *missedObTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MISSEDOBTIME);
  }
  /// Possible delta V applications for the object of interest, in km/sec.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaVs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DELTAVS);
  }
  /// Possible delta time applications for the object of interest, in seconds.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaTs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DELTATS);
  }
  /// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *svEpoch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SVEPOCH);
  }
  /// Last reported x position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double x() const {
    return GetField<double>(VT_X, 0.0);
  }
  /// Last reported y position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  /// Last reported z position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  /// Last reported x velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double xvel() const {
    return GetField<double>(VT_XVEL, 0.0);
  }
  /// Last reported y velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double yvel() const {
    return GetField<double>(VT_YVEL, 0.0);
  }
  /// Last reported z velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double zvel() const {
    return GetField<double>(VT_ZVEL, 0.0);
  }
  /// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *elsetEpoch() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ELSETEPOCH);
  }
  /// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double meanMotion() const {
    return GetField<double>(VT_MEANMOTION, 0.0);
  }
  /// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double eccentricity() const {
    return GetField<double>(VT_ECCENTRICITY, 0.0);
  }
  /// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double inclination() const {
    return GetField<double>(VT_INCLINATION, 0.0);
  }
  /// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double raan() const {
    return GetField<double>(VT_RAAN, 0.0);
  }
  /// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double argOfPerigee() const {
    return GetField<double>(VT_ARGOFPERIGEE, 0.0);
  }
  /// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double meanAnomaly() const {
    return GetField<double>(VT_MEANANOMALY, 0.0);
  }
  /// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  int32_t revNo() const {
    return GetField<int32_t>(VT_REVNO, 0);
  }
  /// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double bStar() const {
    return GetField<double>(VT_BSTAR, 0.0);
  }
  /// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double meanMotionDot() const {
    return GetField<double>(VT_MEANMOTIONDOT, 0.0);
  }
  /// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double meanMotionDDot() const {
    return GetField<double>(VT_MEANMOTIONDDOT, 0.0);
  }
  /// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double semiMajorAxis() const {
    return GetField<double>(VT_SEMIMAJORAXIS, 0.0);
  }
  /// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double period() const {
    return GetField<double>(VT_PERIOD, 0.0);
  }
  /// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double apogee() const {
    return GetField<double>(VT_APOGEE, 0.0);
  }
  /// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  double perigee() const {
    return GetField<double>(VT_PERIGEE, 0.0);
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *createdAt() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDAT);
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *createdBy() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CREATEDBY);
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  const ::flatbuffers::String *source() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCE);
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  const ::flatbuffers::String *origin() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGIN);
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  const ::flatbuffers::String *origNetwork() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGNETWORK);
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  ObjectOfInterest_Abridged_dataMode_Enum dataMode() const {
    return static_cast<ObjectOfInterest_Abridged_dataMode_Enum>(GetField<int8_t>(VT_DATAMODE, 0));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_CLASSIFICATIONMARKING) &&
           verifier.VerifyString(classificationMarking()) &&
           VerifyOffset(verifier, VT_IDONORBIT) &&
           verifier.VerifyString(idOnOrbit()) &&
           VerifyField<int32_t>(verifier, VT_SATNO, 4) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_SENSORTASKINGSTARTTIME) &&
           verifier.VerifyString(sensorTaskingStartTime()) &&
           VerifyOffset(verifier, VT_SENSORTASKINGSTOPTIME) &&
           verifier.VerifyString(sensorTaskingStopTime()) &&
           VerifyField<int32_t>(verifier, VT_PRIORITY, 4) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_STATUSDATE) &&
           verifier.VerifyString(statusDate()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_LASTOBTIME) &&
           verifier.VerifyString(lastObTime()) &&
           VerifyOffset(verifier, VT_MISSEDOBTIME) &&
           verifier.VerifyString(missedObTime()) &&
           VerifyOffset(verifier, VT_DELTAVS) &&
           verifier.VerifyVector(deltaVs()) &&
           verifier.VerifyVectorOfStrings(deltaVs()) &&
           VerifyOffset(verifier, VT_DELTATS) &&
           verifier.VerifyVector(deltaTs()) &&
           verifier.VerifyVectorOfStrings(deltaTs()) &&
           VerifyOffset(verifier, VT_SVEPOCH) &&
           verifier.VerifyString(svEpoch()) &&
           VerifyField<double>(verifier, VT_X, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           VerifyField<double>(verifier, VT_Z, 8) &&
           VerifyField<double>(verifier, VT_XVEL, 8) &&
           VerifyField<double>(verifier, VT_YVEL, 8) &&
           VerifyField<double>(verifier, VT_ZVEL, 8) &&
           VerifyOffset(verifier, VT_ELSETEPOCH) &&
           verifier.VerifyString(elsetEpoch()) &&
           VerifyField<double>(verifier, VT_MEANMOTION, 8) &&
           VerifyField<double>(verifier, VT_ECCENTRICITY, 8) &&
           VerifyField<double>(verifier, VT_INCLINATION, 8) &&
           VerifyField<double>(verifier, VT_RAAN, 8) &&
           VerifyField<double>(verifier, VT_ARGOFPERIGEE, 8) &&
           VerifyField<double>(verifier, VT_MEANANOMALY, 8) &&
           VerifyField<int32_t>(verifier, VT_REVNO, 4) &&
           VerifyField<double>(verifier, VT_BSTAR, 8) &&
           VerifyField<double>(verifier, VT_MEANMOTIONDOT, 8) &&
           VerifyField<double>(verifier, VT_MEANMOTIONDDOT, 8) &&
           VerifyField<double>(verifier, VT_SEMIMAJORAXIS, 8) &&
           VerifyField<double>(verifier, VT_PERIOD, 8) &&
           VerifyField<double>(verifier, VT_APOGEE, 8) &&
           VerifyField<double>(verifier, VT_PERIGEE, 8) &&
           VerifyOffset(verifier, VT_CREATEDAT) &&
           verifier.VerifyString(createdAt()) &&
           VerifyOffset(verifier, VT_CREATEDBY) &&
           verifier.VerifyString(createdBy()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyString(source()) &&
           VerifyOffset(verifier, VT_ORIGIN) &&
           verifier.VerifyString(origin()) &&
           VerifyOffset(verifier, VT_ORIGNETWORK) &&
           verifier.VerifyString(origNetwork()) &&
           VerifyField<int8_t>(verifier, VT_DATAMODE, 1) &&
           verifier.EndTable();
  }
};

struct ObjectOfInterest_AbridgedBuilder {
  typedef ObjectOfInterest_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_ID, id);
  }
  void add_classificationMarking(::flatbuffers::Offset<::flatbuffers::String> classificationMarking) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  void add_idOnOrbit(::flatbuffers::Offset<::flatbuffers::String> idOnOrbit) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  void add_satNo(int32_t satNo) {
    fbb_.AddElement<int32_t>(ObjectOfInterest_Abridged::VT_SATNO, satNo, 0);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_NAME, name);
  }
  void add_sensorTaskingStartTime(::flatbuffers::Offset<::flatbuffers::String> sensorTaskingStartTime) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_SENSORTASKINGSTARTTIME, sensorTaskingStartTime);
  }
  void add_sensorTaskingStopTime(::flatbuffers::Offset<::flatbuffers::String> sensorTaskingStopTime) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_SENSORTASKINGSTOPTIME, sensorTaskingStopTime);
  }
  void add_priority(int32_t priority) {
    fbb_.AddElement<int32_t>(ObjectOfInterest_Abridged::VT_PRIORITY, priority, 0);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_STATUS, status);
  }
  void add_statusDate(::flatbuffers::Offset<::flatbuffers::String> statusDate) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_STATUSDATE, statusDate);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_DESCRIPTION, description);
  }
  void add_lastObTime(::flatbuffers::Offset<::flatbuffers::String> lastObTime) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_LASTOBTIME, lastObTime);
  }
  void add_missedObTime(::flatbuffers::Offset<::flatbuffers::String> missedObTime) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_MISSEDOBTIME, missedObTime);
  }
  void add_deltaVs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaVs) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_DELTAVS, deltaVs);
  }
  void add_deltaTs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaTs) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_DELTATS, deltaTs);
  }
  void add_svEpoch(::flatbuffers::Offset<::flatbuffers::String> svEpoch) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_SVEPOCH, svEpoch);
  }
  void add_x(double x) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_X, x, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_Y, y, 0.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_Z, z, 0.0);
  }
  void add_xvel(double xvel) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_XVEL, xvel, 0.0);
  }
  void add_yvel(double yvel) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_YVEL, yvel, 0.0);
  }
  void add_zvel(double zvel) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_ZVEL, zvel, 0.0);
  }
  void add_elsetEpoch(::flatbuffers::Offset<::flatbuffers::String> elsetEpoch) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_ELSETEPOCH, elsetEpoch);
  }
  void add_meanMotion(double meanMotion) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_MEANMOTION, meanMotion, 0.0);
  }
  void add_eccentricity(double eccentricity) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_ECCENTRICITY, eccentricity, 0.0);
  }
  void add_inclination(double inclination) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_INCLINATION, inclination, 0.0);
  }
  void add_raan(double raan) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_RAAN, raan, 0.0);
  }
  void add_argOfPerigee(double argOfPerigee) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_ARGOFPERIGEE, argOfPerigee, 0.0);
  }
  void add_meanAnomaly(double meanAnomaly) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_MEANANOMALY, meanAnomaly, 0.0);
  }
  void add_revNo(int32_t revNo) {
    fbb_.AddElement<int32_t>(ObjectOfInterest_Abridged::VT_REVNO, revNo, 0);
  }
  void add_bStar(double bStar) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_BSTAR, bStar, 0.0);
  }
  void add_meanMotionDot(double meanMotionDot) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_MEANMOTIONDOT, meanMotionDot, 0.0);
  }
  void add_meanMotionDDot(double meanMotionDDot) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_MEANMOTIONDDOT, meanMotionDDot, 0.0);
  }
  void add_semiMajorAxis(double semiMajorAxis) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  void add_period(double period) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_PERIOD, period, 0.0);
  }
  void add_apogee(double apogee) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_APOGEE, apogee, 0.0);
  }
  void add_perigee(double perigee) {
    fbb_.AddElement<double>(ObjectOfInterest_Abridged::VT_PERIGEE, perigee, 0.0);
  }
  void add_createdAt(::flatbuffers::Offset<::flatbuffers::String> createdAt) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_CREATEDAT, createdAt);
  }
  void add_createdBy(::flatbuffers::Offset<::flatbuffers::String> createdBy) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_CREATEDBY, createdBy);
  }
  void add_source(::flatbuffers::Offset<::flatbuffers::String> source) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_SOURCE, source);
  }
  void add_origin(::flatbuffers::Offset<::flatbuffers::String> origin) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_ORIGIN, origin);
  }
  void add_origNetwork(::flatbuffers::Offset<::flatbuffers::String> origNetwork) {
    fbb_.AddOffset(ObjectOfInterest_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  void add_dataMode(ObjectOfInterest_Abridged_dataMode_Enum dataMode) {
    fbb_.AddElement<int8_t>(ObjectOfInterest_Abridged::VT_DATAMODE, static_cast<int8_t>(dataMode), 0);
  }
  explicit ObjectOfInterest_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ObjectOfInterest_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ObjectOfInterest_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ObjectOfInterest_Abridged> CreateObjectOfInterest_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classificationMarking = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idOnOrbit = 0,
    int32_t satNo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sensorTaskingStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sensorTaskingStopTime = 0,
    int32_t priority = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> statusDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastObTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> missedObTime = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaVs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaTs = 0,
    ::flatbuffers::Offset<::flatbuffers::String> svEpoch = 0,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> elsetEpoch = 0,
    double meanMotion = 0.0,
    double eccentricity = 0.0,
    double inclination = 0.0,
    double raan = 0.0,
    double argOfPerigee = 0.0,
    double meanAnomaly = 0.0,
    int32_t revNo = 0,
    double bStar = 0.0,
    double meanMotionDot = 0.0,
    double meanMotionDDot = 0.0,
    double semiMajorAxis = 0.0,
    double period = 0.0,
    double apogee = 0.0,
    double perigee = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> createdAt = 0,
    ::flatbuffers::Offset<::flatbuffers::String> createdBy = 0,
    ::flatbuffers::Offset<::flatbuffers::String> source = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origin = 0,
    ::flatbuffers::Offset<::flatbuffers::String> origNetwork = 0,
    ObjectOfInterest_Abridged_dataMode_Enum dataMode = ObjectOfInterest_Abridged_dataMode_Enum_REAL) {
  ObjectOfInterest_AbridgedBuilder builder_(_fbb);
  builder_.add_perigee(perigee);
  builder_.add_apogee(apogee);
  builder_.add_period(period);
  builder_.add_semiMajorAxis(semiMajorAxis);
  builder_.add_meanMotionDDot(meanMotionDDot);
  builder_.add_meanMotionDot(meanMotionDot);
  builder_.add_bStar(bStar);
  builder_.add_meanAnomaly(meanAnomaly);
  builder_.add_argOfPerigee(argOfPerigee);
  builder_.add_raan(raan);
  builder_.add_inclination(inclination);
  builder_.add_eccentricity(eccentricity);
  builder_.add_meanMotion(meanMotion);
  builder_.add_zvel(zvel);
  builder_.add_yvel(yvel);
  builder_.add_xvel(xvel);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  builder_.add_origNetwork(origNetwork);
  builder_.add_origin(origin);
  builder_.add_source(source);
  builder_.add_createdBy(createdBy);
  builder_.add_createdAt(createdAt);
  builder_.add_revNo(revNo);
  builder_.add_elsetEpoch(elsetEpoch);
  builder_.add_svEpoch(svEpoch);
  builder_.add_deltaTs(deltaTs);
  builder_.add_deltaVs(deltaVs);
  builder_.add_missedObTime(missedObTime);
  builder_.add_lastObTime(lastObTime);
  builder_.add_description(description);
  builder_.add_statusDate(statusDate);
  builder_.add_status(status);
  builder_.add_priority(priority);
  builder_.add_sensorTaskingStopTime(sensorTaskingStopTime);
  builder_.add_sensorTaskingStartTime(sensorTaskingStartTime);
  builder_.add_name(name);
  builder_.add_satNo(satNo);
  builder_.add_idOnOrbit(idOnOrbit);
  builder_.add_classificationMarking(classificationMarking);
  builder_.add_id(id);
  builder_.add_dataMode(dataMode);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ObjectOfInterest_Abridged> CreateObjectOfInterest_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *classificationMarking = nullptr,
    const char *idOnOrbit = nullptr,
    int32_t satNo = 0,
    const char *name = nullptr,
    const char *sensorTaskingStartTime = nullptr,
    const char *sensorTaskingStopTime = nullptr,
    int32_t priority = 0,
    const char *status = nullptr,
    const char *statusDate = nullptr,
    const char *description = nullptr,
    const char *lastObTime = nullptr,
    const char *missedObTime = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaVs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaTs = nullptr,
    const char *svEpoch = nullptr,
    double x = 0.0,
    double y = 0.0,
    double z = 0.0,
    double xvel = 0.0,
    double yvel = 0.0,
    double zvel = 0.0,
    const char *elsetEpoch = nullptr,
    double meanMotion = 0.0,
    double eccentricity = 0.0,
    double inclination = 0.0,
    double raan = 0.0,
    double argOfPerigee = 0.0,
    double meanAnomaly = 0.0,
    int32_t revNo = 0,
    double bStar = 0.0,
    double meanMotionDot = 0.0,
    double meanMotionDDot = 0.0,
    double semiMajorAxis = 0.0,
    double period = 0.0,
    double apogee = 0.0,
    double perigee = 0.0,
    const char *createdAt = nullptr,
    const char *createdBy = nullptr,
    const char *source = nullptr,
    const char *origin = nullptr,
    const char *origNetwork = nullptr,
    ObjectOfInterest_Abridged_dataMode_Enum dataMode = ObjectOfInterest_Abridged_dataMode_Enum_REAL) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto classificationMarking__ = classificationMarking ? _fbb.CreateString(classificationMarking) : 0;
  auto idOnOrbit__ = idOnOrbit ? _fbb.CreateString(idOnOrbit) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto sensorTaskingStartTime__ = sensorTaskingStartTime ? _fbb.CreateString(sensorTaskingStartTime) : 0;
  auto sensorTaskingStopTime__ = sensorTaskingStopTime ? _fbb.CreateString(sensorTaskingStopTime) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto statusDate__ = statusDate ? _fbb.CreateString(statusDate) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto lastObTime__ = lastObTime ? _fbb.CreateString(lastObTime) : 0;
  auto missedObTime__ = missedObTime ? _fbb.CreateString(missedObTime) : 0;
  auto deltaVs__ = deltaVs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*deltaVs) : 0;
  auto deltaTs__ = deltaTs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*deltaTs) : 0;
  auto svEpoch__ = svEpoch ? _fbb.CreateString(svEpoch) : 0;
  auto elsetEpoch__ = elsetEpoch ? _fbb.CreateString(elsetEpoch) : 0;
  auto createdAt__ = createdAt ? _fbb.CreateString(createdAt) : 0;
  auto createdBy__ = createdBy ? _fbb.CreateString(createdBy) : 0;
  auto source__ = source ? _fbb.CreateString(source) : 0;
  auto origin__ = origin ? _fbb.CreateString(origin) : 0;
  auto origNetwork__ = origNetwork ? _fbb.CreateString(origNetwork) : 0;
  return CreateObjectOfInterest_Abridged(
      _fbb,
      id__,
      classificationMarking__,
      idOnOrbit__,
      satNo,
      name__,
      sensorTaskingStartTime__,
      sensorTaskingStopTime__,
      priority,
      status__,
      statusDate__,
      description__,
      lastObTime__,
      missedObTime__,
      deltaVs__,
      deltaTs__,
      svEpoch__,
      x,
      y,
      z,
      xvel,
      yvel,
      zvel,
      elsetEpoch__,
      meanMotion,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      createdAt__,
      createdBy__,
      source__,
      origin__,
      origNetwork__,
      dataMode);
}

inline const ObjectOfInterest_Abridged *GetObjectOfInterest_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<ObjectOfInterest_Abridged>(buf);
}

inline const ObjectOfInterest_Abridged *GetSizePrefixedObjectOfInterest_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ObjectOfInterest_Abridged>(buf);
}

inline const char *ObjectOfInterest_AbridgedIdentifier() {
  return "OBJE";
}

inline bool ObjectOfInterest_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ObjectOfInterest_AbridgedIdentifier());
}

inline bool SizePrefixedObjectOfInterest_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ObjectOfInterest_AbridgedIdentifier(), true);
}

inline bool VerifyObjectOfInterest_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ObjectOfInterest_Abridged>(ObjectOfInterest_AbridgedIdentifier());
}

inline bool VerifySizePrefixedObjectOfInterest_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ObjectOfInterest_Abridged>(ObjectOfInterest_AbridgedIdentifier());
}

inline void FinishObjectOfInterest_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ObjectOfInterest_Abridged> root) {
  fbb.Finish(root, ObjectOfInterest_AbridgedIdentifier());
}

inline void FinishSizePrefixedObjectOfInterest_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ObjectOfInterest_Abridged> root) {
  fbb.FinishSizePrefixed(root, ObjectOfInterest_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
