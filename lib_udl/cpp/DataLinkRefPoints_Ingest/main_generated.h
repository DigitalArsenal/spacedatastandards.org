// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct DataLinkRefPoints_Ingest;
struct DataLinkRefPoints_IngestBuilder;

/// /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
struct DataLinkRefPoints_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DataLinkRefPoints_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REFPOINTTYPE = 4,
    VT_REFDES = 6,
    VT_REFLOCNAME = 8,
    VT_REFLAT = 10,
    VT_REFLON = 12,
    VT_EFFEVENTTIME = 14
  };
  /// Type of data link reference point or grid origin.
  /// Example: /// Example: DLRP
  /// Constraints: Minimum length = 0, Maximum length = 7
  const ::flatbuffers::String *refPointType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFPOINTTYPE);
  }
  /// Identifier to designate a reference point.
  /// Example: /// Example: L5
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *refDes() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFDES);
  }
  /// The location name of the point of reference for this data link message.
  /// Example: /// Example: FORT BRAGG
  /// Constraints: Minimum length = 0, Maximum length = 20
  const ::flatbuffers::String *refLocName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFLOCNAME);
  }
  /// WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  double refLat() const {
    return GetField<double>(VT_REFLAT, 0.0);
  }
  /// WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  double refLon() const {
    return GetField<double>(VT_REFLON, 0.0);
  }
  /// Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-08T13:55:43.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *effEventTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EFFEVENTTIME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REFPOINTTYPE) &&
           verifier.VerifyString(refPointType()) &&
           VerifyOffset(verifier, VT_REFDES) &&
           verifier.VerifyString(refDes()) &&
           VerifyOffset(verifier, VT_REFLOCNAME) &&
           verifier.VerifyString(refLocName()) &&
           VerifyField<double>(verifier, VT_REFLAT, 8) &&
           VerifyField<double>(verifier, VT_REFLON, 8) &&
           VerifyOffset(verifier, VT_EFFEVENTTIME) &&
           verifier.VerifyString(effEventTime()) &&
           verifier.EndTable();
  }
};

struct DataLinkRefPoints_IngestBuilder {
  typedef DataLinkRefPoints_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_refPointType(::flatbuffers::Offset<::flatbuffers::String> refPointType) {
    fbb_.AddOffset(DataLinkRefPoints_Ingest::VT_REFPOINTTYPE, refPointType);
  }
  void add_refDes(::flatbuffers::Offset<::flatbuffers::String> refDes) {
    fbb_.AddOffset(DataLinkRefPoints_Ingest::VT_REFDES, refDes);
  }
  void add_refLocName(::flatbuffers::Offset<::flatbuffers::String> refLocName) {
    fbb_.AddOffset(DataLinkRefPoints_Ingest::VT_REFLOCNAME, refLocName);
  }
  void add_refLat(double refLat) {
    fbb_.AddElement<double>(DataLinkRefPoints_Ingest::VT_REFLAT, refLat, 0.0);
  }
  void add_refLon(double refLon) {
    fbb_.AddElement<double>(DataLinkRefPoints_Ingest::VT_REFLON, refLon, 0.0);
  }
  void add_effEventTime(::flatbuffers::Offset<::flatbuffers::String> effEventTime) {
    fbb_.AddOffset(DataLinkRefPoints_Ingest::VT_EFFEVENTTIME, effEventTime);
  }
  explicit DataLinkRefPoints_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DataLinkRefPoints_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DataLinkRefPoints_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DataLinkRefPoints_Ingest> CreateDataLinkRefPoints_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> refPointType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refDes = 0,
    ::flatbuffers::Offset<::flatbuffers::String> refLocName = 0,
    double refLat = 0.0,
    double refLon = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> effEventTime = 0) {
  DataLinkRefPoints_IngestBuilder builder_(_fbb);
  builder_.add_refLon(refLon);
  builder_.add_refLat(refLat);
  builder_.add_effEventTime(effEventTime);
  builder_.add_refLocName(refLocName);
  builder_.add_refDes(refDes);
  builder_.add_refPointType(refPointType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DataLinkRefPoints_Ingest> CreateDataLinkRefPoints_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *refPointType = nullptr,
    const char *refDes = nullptr,
    const char *refLocName = nullptr,
    double refLat = 0.0,
    double refLon = 0.0,
    const char *effEventTime = nullptr) {
  auto refPointType__ = refPointType ? _fbb.CreateString(refPointType) : 0;
  auto refDes__ = refDes ? _fbb.CreateString(refDes) : 0;
  auto refLocName__ = refLocName ? _fbb.CreateString(refLocName) : 0;
  auto effEventTime__ = effEventTime ? _fbb.CreateString(effEventTime) : 0;
  return CreateDataLinkRefPoints_Ingest(
      _fbb,
      refPointType__,
      refDes__,
      refLocName__,
      refLat,
      refLon,
      effEventTime__);
}

inline const DataLinkRefPoints_Ingest *GetDataLinkRefPoints_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<DataLinkRefPoints_Ingest>(buf);
}

inline const DataLinkRefPoints_Ingest *GetSizePrefixedDataLinkRefPoints_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<DataLinkRefPoints_Ingest>(buf);
}

inline const char *DataLinkRefPoints_IngestIdentifier() {
  return "DATA";
}

inline bool DataLinkRefPoints_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkRefPoints_IngestIdentifier());
}

inline bool SizePrefixedDataLinkRefPoints_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, DataLinkRefPoints_IngestIdentifier(), true);
}

inline bool VerifyDataLinkRefPoints_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<DataLinkRefPoints_Ingest>(DataLinkRefPoints_IngestIdentifier());
}

inline bool VerifySizePrefixedDataLinkRefPoints_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<DataLinkRefPoints_Ingest>(DataLinkRefPoints_IngestIdentifier());
}

inline void FinishDataLinkRefPoints_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkRefPoints_Ingest> root) {
  fbb.Finish(root, DataLinkRefPoints_IngestIdentifier());
}

inline void FinishSizePrefixedDataLinkRefPoints_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<DataLinkRefPoints_Ingest> root) {
  fbb.FinishSizePrefixed(root, DataLinkRefPoints_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
