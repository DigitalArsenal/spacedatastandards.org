// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct MtiHRRScatterer_Full;
struct MtiHRRScatterer_FullBuilder;

/// /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
struct MtiHRRScatterer_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MtiHRRScatterer_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_H32_1 = 4,
    VT_H32_2 = 6,
    VT_H32_3 = 8,
    VT_H32_4 = 10
  };
  /// Scatterer’s power magnitude.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h32_1() const {
    return GetField<int32_t>(VT_H32_1, 0);
  }
  /// Scatterer’s complex phase, in degrees.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h32_2() const {
    return GetField<int32_t>(VT_H32_2, 0);
  }
  /// Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h32_3() const {
    return GetField<int32_t>(VT_H32_3, 0);
  }
  /// Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  int32_t h32_4() const {
    return GetField<int32_t>(VT_H32_4, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_H32_1, 4) &&
           VerifyField<int32_t>(verifier, VT_H32_2, 4) &&
           VerifyField<int32_t>(verifier, VT_H32_3, 4) &&
           VerifyField<int32_t>(verifier, VT_H32_4, 4) &&
           verifier.EndTable();
  }
};

struct MtiHRRScatterer_FullBuilder {
  typedef MtiHRRScatterer_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_h32_1(int32_t h32_1) {
    fbb_.AddElement<int32_t>(MtiHRRScatterer_Full::VT_H32_1, h32_1, 0);
  }
  void add_h32_2(int32_t h32_2) {
    fbb_.AddElement<int32_t>(MtiHRRScatterer_Full::VT_H32_2, h32_2, 0);
  }
  void add_h32_3(int32_t h32_3) {
    fbb_.AddElement<int32_t>(MtiHRRScatterer_Full::VT_H32_3, h32_3, 0);
  }
  void add_h32_4(int32_t h32_4) {
    fbb_.AddElement<int32_t>(MtiHRRScatterer_Full::VT_H32_4, h32_4, 0);
  }
  explicit MtiHRRScatterer_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MtiHRRScatterer_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MtiHRRScatterer_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MtiHRRScatterer_Full> CreateMtiHRRScatterer_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t h32_1 = 0,
    int32_t h32_2 = 0,
    int32_t h32_3 = 0,
    int32_t h32_4 = 0) {
  MtiHRRScatterer_FullBuilder builder_(_fbb);
  builder_.add_h32_4(h32_4);
  builder_.add_h32_3(h32_3);
  builder_.add_h32_2(h32_2);
  builder_.add_h32_1(h32_1);
  return builder_.Finish();
}

inline const MtiHRRScatterer_Full *GetMtiHRRScatterer_Full(const void *buf) {
  return ::flatbuffers::GetRoot<MtiHRRScatterer_Full>(buf);
}

inline const MtiHRRScatterer_Full *GetSizePrefixedMtiHRRScatterer_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<MtiHRRScatterer_Full>(buf);
}

inline const char *MtiHRRScatterer_FullIdentifier() {
  return "MTIH";
}

inline bool MtiHRRScatterer_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiHRRScatterer_FullIdentifier());
}

inline bool SizePrefixedMtiHRRScatterer_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, MtiHRRScatterer_FullIdentifier(), true);
}

inline bool VerifyMtiHRRScatterer_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MtiHRRScatterer_Full>(MtiHRRScatterer_FullIdentifier());
}

inline bool VerifySizePrefixedMtiHRRScatterer_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MtiHRRScatterer_Full>(MtiHRRScatterer_FullIdentifier());
}

inline void FinishMtiHRRScatterer_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiHRRScatterer_Full> root) {
  fbb.Finish(root, MtiHRRScatterer_FullIdentifier());
}

inline void FinishSizePrefixedMtiHRRScatterer_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<MtiHRRScatterer_Full> root) {
  fbb.FinishSizePrefixed(root, MtiHRRScatterer_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
