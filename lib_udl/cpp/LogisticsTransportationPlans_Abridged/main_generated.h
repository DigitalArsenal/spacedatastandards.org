// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct LogisticsTransportationPlans_Abridged;
struct LogisticsTransportationPlans_AbridgedBuilder;

/// /// Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
struct LogisticsTransportationPlans_Abridged FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef LogisticsTransportationPlans_AbridgedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLANSNUMBER = 4,
    VT_MISSIONCHANGE = 6,
    VT_PLANDEFINITION = 8,
    VT_STATUSCODE = 10,
    VT_COORDINATOR = 12,
    VT_COORDINATORUNIT = 14,
    VT_ORIGINICAO = 16,
    VT_ESTDEPTIME = 18,
    VT_ESTARRTIME = 20,
    VT_DESTINATIONICAO = 22,
    VT_LOGISTICMASTERRECORDID = 24,
    VT_TPTAILNUMBER = 26,
    VT_TPAIRCRAFTMDS = 28,
    VT_MAJCOM = 30,
    VT_APPROXARRTIME = 32,
    VT_DURATION = 34,
    VT_ACTDEPTIME = 36,
    VT_CLOSEDDATE = 38,
    VT_CANCELLEDDATE = 40,
    VT_AIRCRAFTSTATUS = 42,
    VT_NUMENROUTESTOPS = 44,
    VT_SERIALNUMBER = 46,
    VT_NUMTRANSLOADS = 48,
    VT_LASTCHANGEDDATE = 50,
    VT_LOGISTICSSEGMENTS = 52,
    VT_LOGISTICSTRANSPORTATIONPLANSREMARKS = 54
  };
  /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  /// Example: /// Example: T89002
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *plansNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANSNUMBER);
  }
  /// Indicates whether there have been changes to changes to ICAOs, estArrTime, or estDepTime since this Transportation Plan was last edited.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  bool missionChange() const {
    return GetField<uint8_t>(VT_MISSIONCHANGE, 0) != 0;
  }
  /// Defines the transporation plan as either a deployment or redeployment.
  /// Example: /// Example: DEPLOY
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *planDefinition() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PLANDEFINITION);
  }
  /// Transporation Coordination status code. Cancel, Send to APCC, working, agree, disapprove or blank.
  /// Example: /// Example: N
  /// Constraints: Minimum length = 1, Maximum length = 1
  const ::flatbuffers::String *statusCode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUSCODE);
  }
  /// The AMS username of the operator who alters the coordination status.  Automatically captured by the system.
  /// Example: /// Example: SMITH, JOHN
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *coordinator() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COORDINATOR);
  }
  /// The AMS user unit_id of the operator who alters the coordination status.  Automatically captured by the system from table AMS_USER.
  /// Example: /// Example: TACC
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *coordinatorUnit() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COORDINATORUNIT);
  }
  /// The origin location.
  /// Example: /// Example: KATL
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *originICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORIGINICAO);
  }
  /// ETD of the first segment, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-15T14:25:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTDEPTIME);
  }
  /// ETA of the final segment, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-15T14:25:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *estArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ESTARRTIME);
  }
  /// Destination location ICAO.
  /// Example: /// Example: YBCS
  /// Constraints: Minimum length = 0, Maximum length = 4
  const ::flatbuffers::String *destinationICAO() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESTINATIONICAO);
  }
  /// The identifier that represents a Logistics Master Record.
  /// Example: /// Example: L62126
  /// Constraints: Minimum length = 0, Maximum length = 10
  const ::flatbuffers::String *logisticMasterRecordId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LOGISTICMASTERRECORDID);
  }
  /// Contains the tail number displayed by GDSS2.
  /// Example: /// Example: 99209
  /// Constraints: Minimum length = 0, Maximum length = 7
  const ::flatbuffers::String *tpTailNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TPTAILNUMBER);
  }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: C17A
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *tpAircraftMDS() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TPAIRCRAFTMDS);
  }
  /// The major command for the current unit.
  /// Example: /// Example: HQAMC
  /// Constraints: Minimum length = 0, Maximum length = 250
  const ::flatbuffers::String *majcom() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MAJCOM);
  }
  /// Approximate time of arrival of final segement, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *approxArrTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_APPROXARRTIME);
  }
  /// Transportation plan duration, expressed in the format MMM:SS.
  /// Example: /// Example: 086:20
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *duration() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DURATION);
  }
  /// Actual time of departure of first segment, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T19:37:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *actDepTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACTDEPTIME);
  }
  /// GC. LGTP_CLSD_DT.  GD2:  Date when the transportation plan was closed, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *closedDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLOSEDDATE);
  }
  /// GC. LGTP_CANX_DT.  GD2: Date when the transportation plan was cancelled, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *cancelledDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CANCELLEDDATE);
  }
  /// These are the initial maintenance values entered based on the pilot descriptions or the official maintenance evaluation code.
  /// Example: /// Example: NMCMU
  /// Constraints: Minimum length = 0, Maximum length = 6
  const ::flatbuffers::String *aircraftStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AIRCRAFTSTATUS);
  }
  /// Transportation plan enroute stops.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  int32_t numEnrouteStops() const {
    return GetField<int32_t>(VT_NUMENROUTESTOPS, 0);
  }
  /// GDSS2 uses an 8 character serial number to uniquely identify the aircraft and MDS combination. This is a portion of the full manufacturer serial number.
  /// Example: /// Example: 9009209
  /// Constraints: Minimum length = 0, Maximum length = 30
  const ::flatbuffers::String *serialNumber() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SERIALNUMBER);
  }
  /// The number of transloads for this Transportation Plan.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  int32_t numTransLoads() const {
    return GetField<int32_t>(VT_NUMTRANSLOADS, 0);
  }
  /// Last time transportation plan was updated, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-14T20:37:00.123Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *lastChangedDate() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LASTCHANGEDDATE);
  }
  /// The transportation segments associated with this transportation plan.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsSegments() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSSEGMENTS);
  }
  /// Remarks associated with this transportation plan.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsTransportationPlansRemarks() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_LOGISTICSTRANSPORTATIONPLANSREMARKS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PLANSNUMBER) &&
           verifier.VerifyString(plansNumber()) &&
           VerifyField<uint8_t>(verifier, VT_MISSIONCHANGE, 1) &&
           VerifyOffset(verifier, VT_PLANDEFINITION) &&
           verifier.VerifyString(planDefinition()) &&
           VerifyOffset(verifier, VT_STATUSCODE) &&
           verifier.VerifyString(statusCode()) &&
           VerifyOffset(verifier, VT_COORDINATOR) &&
           verifier.VerifyString(coordinator()) &&
           VerifyOffset(verifier, VT_COORDINATORUNIT) &&
           verifier.VerifyString(coordinatorUnit()) &&
           VerifyOffset(verifier, VT_ORIGINICAO) &&
           verifier.VerifyString(originICAO()) &&
           VerifyOffset(verifier, VT_ESTDEPTIME) &&
           verifier.VerifyString(estDepTime()) &&
           VerifyOffset(verifier, VT_ESTARRTIME) &&
           verifier.VerifyString(estArrTime()) &&
           VerifyOffset(verifier, VT_DESTINATIONICAO) &&
           verifier.VerifyString(destinationICAO()) &&
           VerifyOffset(verifier, VT_LOGISTICMASTERRECORDID) &&
           verifier.VerifyString(logisticMasterRecordId()) &&
           VerifyOffset(verifier, VT_TPTAILNUMBER) &&
           verifier.VerifyString(tpTailNumber()) &&
           VerifyOffset(verifier, VT_TPAIRCRAFTMDS) &&
           verifier.VerifyString(tpAircraftMDS()) &&
           VerifyOffset(verifier, VT_MAJCOM) &&
           verifier.VerifyString(majcom()) &&
           VerifyOffset(verifier, VT_APPROXARRTIME) &&
           verifier.VerifyString(approxArrTime()) &&
           VerifyOffset(verifier, VT_DURATION) &&
           verifier.VerifyString(duration()) &&
           VerifyOffset(verifier, VT_ACTDEPTIME) &&
           verifier.VerifyString(actDepTime()) &&
           VerifyOffset(verifier, VT_CLOSEDDATE) &&
           verifier.VerifyString(closedDate()) &&
           VerifyOffset(verifier, VT_CANCELLEDDATE) &&
           verifier.VerifyString(cancelledDate()) &&
           VerifyOffset(verifier, VT_AIRCRAFTSTATUS) &&
           verifier.VerifyString(aircraftStatus()) &&
           VerifyField<int32_t>(verifier, VT_NUMENROUTESTOPS, 4) &&
           VerifyOffset(verifier, VT_SERIALNUMBER) &&
           verifier.VerifyString(serialNumber()) &&
           VerifyField<int32_t>(verifier, VT_NUMTRANSLOADS, 4) &&
           VerifyOffset(verifier, VT_LASTCHANGEDDATE) &&
           verifier.VerifyString(lastChangedDate()) &&
           VerifyOffset(verifier, VT_LOGISTICSSEGMENTS) &&
           verifier.VerifyVector(logisticsSegments()) &&
           verifier.VerifyVectorOfStrings(logisticsSegments()) &&
           VerifyOffset(verifier, VT_LOGISTICSTRANSPORTATIONPLANSREMARKS) &&
           verifier.VerifyVector(logisticsTransportationPlansRemarks()) &&
           verifier.VerifyVectorOfStrings(logisticsTransportationPlansRemarks()) &&
           verifier.EndTable();
  }
};

struct LogisticsTransportationPlans_AbridgedBuilder {
  typedef LogisticsTransportationPlans_Abridged Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_plansNumber(::flatbuffers::Offset<::flatbuffers::String> plansNumber) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_PLANSNUMBER, plansNumber);
  }
  void add_missionChange(bool missionChange) {
    fbb_.AddElement<uint8_t>(LogisticsTransportationPlans_Abridged::VT_MISSIONCHANGE, static_cast<uint8_t>(missionChange), 0);
  }
  void add_planDefinition(::flatbuffers::Offset<::flatbuffers::String> planDefinition) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_PLANDEFINITION, planDefinition);
  }
  void add_statusCode(::flatbuffers::Offset<::flatbuffers::String> statusCode) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_STATUSCODE, statusCode);
  }
  void add_coordinator(::flatbuffers::Offset<::flatbuffers::String> coordinator) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_COORDINATOR, coordinator);
  }
  void add_coordinatorUnit(::flatbuffers::Offset<::flatbuffers::String> coordinatorUnit) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_COORDINATORUNIT, coordinatorUnit);
  }
  void add_originICAO(::flatbuffers::Offset<::flatbuffers::String> originICAO) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_ORIGINICAO, originICAO);
  }
  void add_estDepTime(::flatbuffers::Offset<::flatbuffers::String> estDepTime) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_ESTDEPTIME, estDepTime);
  }
  void add_estArrTime(::flatbuffers::Offset<::flatbuffers::String> estArrTime) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_ESTARRTIME, estArrTime);
  }
  void add_destinationICAO(::flatbuffers::Offset<::flatbuffers::String> destinationICAO) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_DESTINATIONICAO, destinationICAO);
  }
  void add_logisticMasterRecordId(::flatbuffers::Offset<::flatbuffers::String> logisticMasterRecordId) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_LOGISTICMASTERRECORDID, logisticMasterRecordId);
  }
  void add_tpTailNumber(::flatbuffers::Offset<::flatbuffers::String> tpTailNumber) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_TPTAILNUMBER, tpTailNumber);
  }
  void add_tpAircraftMDS(::flatbuffers::Offset<::flatbuffers::String> tpAircraftMDS) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_TPAIRCRAFTMDS, tpAircraftMDS);
  }
  void add_majcom(::flatbuffers::Offset<::flatbuffers::String> majcom) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_MAJCOM, majcom);
  }
  void add_approxArrTime(::flatbuffers::Offset<::flatbuffers::String> approxArrTime) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_APPROXARRTIME, approxArrTime);
  }
  void add_duration(::flatbuffers::Offset<::flatbuffers::String> duration) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_DURATION, duration);
  }
  void add_actDepTime(::flatbuffers::Offset<::flatbuffers::String> actDepTime) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_ACTDEPTIME, actDepTime);
  }
  void add_closedDate(::flatbuffers::Offset<::flatbuffers::String> closedDate) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_CLOSEDDATE, closedDate);
  }
  void add_cancelledDate(::flatbuffers::Offset<::flatbuffers::String> cancelledDate) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_CANCELLEDDATE, cancelledDate);
  }
  void add_aircraftStatus(::flatbuffers::Offset<::flatbuffers::String> aircraftStatus) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_AIRCRAFTSTATUS, aircraftStatus);
  }
  void add_numEnrouteStops(int32_t numEnrouteStops) {
    fbb_.AddElement<int32_t>(LogisticsTransportationPlans_Abridged::VT_NUMENROUTESTOPS, numEnrouteStops, 0);
  }
  void add_serialNumber(::flatbuffers::Offset<::flatbuffers::String> serialNumber) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_SERIALNUMBER, serialNumber);
  }
  void add_numTransLoads(int32_t numTransLoads) {
    fbb_.AddElement<int32_t>(LogisticsTransportationPlans_Abridged::VT_NUMTRANSLOADS, numTransLoads, 0);
  }
  void add_lastChangedDate(::flatbuffers::Offset<::flatbuffers::String> lastChangedDate) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_LASTCHANGEDDATE, lastChangedDate);
  }
  void add_logisticsSegments(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsSegments) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_LOGISTICSSEGMENTS, logisticsSegments);
  }
  void add_logisticsTransportationPlansRemarks(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsTransportationPlansRemarks) {
    fbb_.AddOffset(LogisticsTransportationPlans_Abridged::VT_LOGISTICSTRANSPORTATIONPLANSREMARKS, logisticsTransportationPlansRemarks);
  }
  explicit LogisticsTransportationPlans_AbridgedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<LogisticsTransportationPlans_Abridged> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<LogisticsTransportationPlans_Abridged>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<LogisticsTransportationPlans_Abridged> CreateLogisticsTransportationPlans_Abridged(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> plansNumber = 0,
    bool missionChange = false,
    ::flatbuffers::Offset<::flatbuffers::String> planDefinition = 0,
    ::flatbuffers::Offset<::flatbuffers::String> statusCode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> coordinator = 0,
    ::flatbuffers::Offset<::flatbuffers::String> coordinatorUnit = 0,
    ::flatbuffers::Offset<::flatbuffers::String> originICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> estArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> destinationICAO = 0,
    ::flatbuffers::Offset<::flatbuffers::String> logisticMasterRecordId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tpTailNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::String> tpAircraftMDS = 0,
    ::flatbuffers::Offset<::flatbuffers::String> majcom = 0,
    ::flatbuffers::Offset<::flatbuffers::String> approxArrTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> duration = 0,
    ::flatbuffers::Offset<::flatbuffers::String> actDepTime = 0,
    ::flatbuffers::Offset<::flatbuffers::String> closedDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cancelledDate = 0,
    ::flatbuffers::Offset<::flatbuffers::String> aircraftStatus = 0,
    int32_t numEnrouteStops = 0,
    ::flatbuffers::Offset<::flatbuffers::String> serialNumber = 0,
    int32_t numTransLoads = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lastChangedDate = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsSegments = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> logisticsTransportationPlansRemarks = 0) {
  LogisticsTransportationPlans_AbridgedBuilder builder_(_fbb);
  builder_.add_logisticsTransportationPlansRemarks(logisticsTransportationPlansRemarks);
  builder_.add_logisticsSegments(logisticsSegments);
  builder_.add_lastChangedDate(lastChangedDate);
  builder_.add_numTransLoads(numTransLoads);
  builder_.add_serialNumber(serialNumber);
  builder_.add_numEnrouteStops(numEnrouteStops);
  builder_.add_aircraftStatus(aircraftStatus);
  builder_.add_cancelledDate(cancelledDate);
  builder_.add_closedDate(closedDate);
  builder_.add_actDepTime(actDepTime);
  builder_.add_duration(duration);
  builder_.add_approxArrTime(approxArrTime);
  builder_.add_majcom(majcom);
  builder_.add_tpAircraftMDS(tpAircraftMDS);
  builder_.add_tpTailNumber(tpTailNumber);
  builder_.add_logisticMasterRecordId(logisticMasterRecordId);
  builder_.add_destinationICAO(destinationICAO);
  builder_.add_estArrTime(estArrTime);
  builder_.add_estDepTime(estDepTime);
  builder_.add_originICAO(originICAO);
  builder_.add_coordinatorUnit(coordinatorUnit);
  builder_.add_coordinator(coordinator);
  builder_.add_statusCode(statusCode);
  builder_.add_planDefinition(planDefinition);
  builder_.add_plansNumber(plansNumber);
  builder_.add_missionChange(missionChange);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<LogisticsTransportationPlans_Abridged> CreateLogisticsTransportationPlans_AbridgedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *plansNumber = nullptr,
    bool missionChange = false,
    const char *planDefinition = nullptr,
    const char *statusCode = nullptr,
    const char *coordinator = nullptr,
    const char *coordinatorUnit = nullptr,
    const char *originICAO = nullptr,
    const char *estDepTime = nullptr,
    const char *estArrTime = nullptr,
    const char *destinationICAO = nullptr,
    const char *logisticMasterRecordId = nullptr,
    const char *tpTailNumber = nullptr,
    const char *tpAircraftMDS = nullptr,
    const char *majcom = nullptr,
    const char *approxArrTime = nullptr,
    const char *duration = nullptr,
    const char *actDepTime = nullptr,
    const char *closedDate = nullptr,
    const char *cancelledDate = nullptr,
    const char *aircraftStatus = nullptr,
    int32_t numEnrouteStops = 0,
    const char *serialNumber = nullptr,
    int32_t numTransLoads = 0,
    const char *lastChangedDate = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsSegments = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *logisticsTransportationPlansRemarks = nullptr) {
  auto plansNumber__ = plansNumber ? _fbb.CreateString(plansNumber) : 0;
  auto planDefinition__ = planDefinition ? _fbb.CreateString(planDefinition) : 0;
  auto statusCode__ = statusCode ? _fbb.CreateString(statusCode) : 0;
  auto coordinator__ = coordinator ? _fbb.CreateString(coordinator) : 0;
  auto coordinatorUnit__ = coordinatorUnit ? _fbb.CreateString(coordinatorUnit) : 0;
  auto originICAO__ = originICAO ? _fbb.CreateString(originICAO) : 0;
  auto estDepTime__ = estDepTime ? _fbb.CreateString(estDepTime) : 0;
  auto estArrTime__ = estArrTime ? _fbb.CreateString(estArrTime) : 0;
  auto destinationICAO__ = destinationICAO ? _fbb.CreateString(destinationICAO) : 0;
  auto logisticMasterRecordId__ = logisticMasterRecordId ? _fbb.CreateString(logisticMasterRecordId) : 0;
  auto tpTailNumber__ = tpTailNumber ? _fbb.CreateString(tpTailNumber) : 0;
  auto tpAircraftMDS__ = tpAircraftMDS ? _fbb.CreateString(tpAircraftMDS) : 0;
  auto majcom__ = majcom ? _fbb.CreateString(majcom) : 0;
  auto approxArrTime__ = approxArrTime ? _fbb.CreateString(approxArrTime) : 0;
  auto duration__ = duration ? _fbb.CreateString(duration) : 0;
  auto actDepTime__ = actDepTime ? _fbb.CreateString(actDepTime) : 0;
  auto closedDate__ = closedDate ? _fbb.CreateString(closedDate) : 0;
  auto cancelledDate__ = cancelledDate ? _fbb.CreateString(cancelledDate) : 0;
  auto aircraftStatus__ = aircraftStatus ? _fbb.CreateString(aircraftStatus) : 0;
  auto serialNumber__ = serialNumber ? _fbb.CreateString(serialNumber) : 0;
  auto lastChangedDate__ = lastChangedDate ? _fbb.CreateString(lastChangedDate) : 0;
  auto logisticsSegments__ = logisticsSegments ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsSegments) : 0;
  auto logisticsTransportationPlansRemarks__ = logisticsTransportationPlansRemarks ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*logisticsTransportationPlansRemarks) : 0;
  return CreateLogisticsTransportationPlans_Abridged(
      _fbb,
      plansNumber__,
      missionChange,
      planDefinition__,
      statusCode__,
      coordinator__,
      coordinatorUnit__,
      originICAO__,
      estDepTime__,
      estArrTime__,
      destinationICAO__,
      logisticMasterRecordId__,
      tpTailNumber__,
      tpAircraftMDS__,
      majcom__,
      approxArrTime__,
      duration__,
      actDepTime__,
      closedDate__,
      cancelledDate__,
      aircraftStatus__,
      numEnrouteStops,
      serialNumber__,
      numTransLoads,
      lastChangedDate__,
      logisticsSegments__,
      logisticsTransportationPlansRemarks__);
}

inline const LogisticsTransportationPlans_Abridged *GetLogisticsTransportationPlans_Abridged(const void *buf) {
  return ::flatbuffers::GetRoot<LogisticsTransportationPlans_Abridged>(buf);
}

inline const LogisticsTransportationPlans_Abridged *GetSizePrefixedLogisticsTransportationPlans_Abridged(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<LogisticsTransportationPlans_Abridged>(buf);
}

inline const char *LogisticsTransportationPlans_AbridgedIdentifier() {
  return "LOGI";
}

inline bool LogisticsTransportationPlans_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsTransportationPlans_AbridgedIdentifier());
}

inline bool SizePrefixedLogisticsTransportationPlans_AbridgedBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, LogisticsTransportationPlans_AbridgedIdentifier(), true);
}

inline bool VerifyLogisticsTransportationPlans_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<LogisticsTransportationPlans_Abridged>(LogisticsTransportationPlans_AbridgedIdentifier());
}

inline bool VerifySizePrefixedLogisticsTransportationPlans_AbridgedBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<LogisticsTransportationPlans_Abridged>(LogisticsTransportationPlans_AbridgedIdentifier());
}

inline void FinishLogisticsTransportationPlans_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsTransportationPlans_Abridged> root) {
  fbb.Finish(root, LogisticsTransportationPlans_AbridgedIdentifier());
}

inline void FinishSizePrefixedLogisticsTransportationPlans_AbridgedBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<LogisticsTransportationPlans_Abridged> root) {
  fbb.FinishSizePrefixed(root, LogisticsTransportationPlans_AbridgedIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
