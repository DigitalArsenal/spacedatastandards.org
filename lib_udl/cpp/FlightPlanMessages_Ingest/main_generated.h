// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct FlightPlanMessages_Ingest;
struct FlightPlanMessages_IngestBuilder;

/// /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
struct FlightPlanMessages_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlightPlanMessages_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SEVERITY = 4,
    VT_WPNUM = 6,
    VT_ROUTEPATH = 8,
    VT_MSGTEXT = 10
  };
  /// The severity of the message.
  /// Example: /// Example: SEVERE
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *severity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SEVERITY);
  }
  /// The waypoint number for which the message was generated, or enter "PLAN" for a message impacting the entire route.
  /// Example: /// Example: 20
  /// Constraints: Minimum length = 0, Maximum length = 8
  const ::flatbuffers::String *wpNum() const {
    return GetPointer<const ::flatbuffers::String *>(VT_WPNUM);
  }
  /// The flight path that generated the message (PRIMARY, ALTERNATE, etc.).
  /// Example: /// Example: PRIMARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  const ::flatbuffers::String *routePath() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ROUTEPATH);
  }
  /// The text of the message.
  /// Example: /// Example: Message text
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *msgText() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSGTEXT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_SEVERITY) &&
           verifier.VerifyString(severity()) &&
           VerifyOffset(verifier, VT_WPNUM) &&
           verifier.VerifyString(wpNum()) &&
           VerifyOffset(verifier, VT_ROUTEPATH) &&
           verifier.VerifyString(routePath()) &&
           VerifyOffset(verifier, VT_MSGTEXT) &&
           verifier.VerifyString(msgText()) &&
           verifier.EndTable();
  }
};

struct FlightPlanMessages_IngestBuilder {
  typedef FlightPlanMessages_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_severity(::flatbuffers::Offset<::flatbuffers::String> severity) {
    fbb_.AddOffset(FlightPlanMessages_Ingest::VT_SEVERITY, severity);
  }
  void add_wpNum(::flatbuffers::Offset<::flatbuffers::String> wpNum) {
    fbb_.AddOffset(FlightPlanMessages_Ingest::VT_WPNUM, wpNum);
  }
  void add_routePath(::flatbuffers::Offset<::flatbuffers::String> routePath) {
    fbb_.AddOffset(FlightPlanMessages_Ingest::VT_ROUTEPATH, routePath);
  }
  void add_msgText(::flatbuffers::Offset<::flatbuffers::String> msgText) {
    fbb_.AddOffset(FlightPlanMessages_Ingest::VT_MSGTEXT, msgText);
  }
  explicit FlightPlanMessages_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlightPlanMessages_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlightPlanMessages_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<FlightPlanMessages_Ingest> CreateFlightPlanMessages_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> severity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> wpNum = 0,
    ::flatbuffers::Offset<::flatbuffers::String> routePath = 0,
    ::flatbuffers::Offset<::flatbuffers::String> msgText = 0) {
  FlightPlanMessages_IngestBuilder builder_(_fbb);
  builder_.add_msgText(msgText);
  builder_.add_routePath(routePath);
  builder_.add_wpNum(wpNum);
  builder_.add_severity(severity);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlightPlanMessages_Ingest> CreateFlightPlanMessages_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *severity = nullptr,
    const char *wpNum = nullptr,
    const char *routePath = nullptr,
    const char *msgText = nullptr) {
  auto severity__ = severity ? _fbb.CreateString(severity) : 0;
  auto wpNum__ = wpNum ? _fbb.CreateString(wpNum) : 0;
  auto routePath__ = routePath ? _fbb.CreateString(routePath) : 0;
  auto msgText__ = msgText ? _fbb.CreateString(msgText) : 0;
  return CreateFlightPlanMessages_Ingest(
      _fbb,
      severity__,
      wpNum__,
      routePath__,
      msgText__);
}

inline const FlightPlanMessages_Ingest *GetFlightPlanMessages_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<FlightPlanMessages_Ingest>(buf);
}

inline const FlightPlanMessages_Ingest *GetSizePrefixedFlightPlanMessages_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<FlightPlanMessages_Ingest>(buf);
}

inline const char *FlightPlanMessages_IngestIdentifier() {
  return "FLIG";
}

inline bool FlightPlanMessages_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanMessages_IngestIdentifier());
}

inline bool SizePrefixedFlightPlanMessages_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, FlightPlanMessages_IngestIdentifier(), true);
}

inline bool VerifyFlightPlanMessages_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<FlightPlanMessages_Ingest>(FlightPlanMessages_IngestIdentifier());
}

inline bool VerifySizePrefixedFlightPlanMessages_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<FlightPlanMessages_Ingest>(FlightPlanMessages_IngestIdentifier());
}

inline void FinishFlightPlanMessages_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanMessages_Ingest> root) {
  fbb.Finish(root, FlightPlanMessages_IngestIdentifier());
}

inline void FinishSizePrefixedFlightPlanMessages_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<FlightPlanMessages_Ingest> root) {
  fbb.FinishSizePrefixed(root, FlightPlanMessages_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
