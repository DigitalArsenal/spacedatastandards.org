// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct RadarSOIObservation_Ingest;
struct RadarSOIObservation_IngestBuilder;

/// /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
struct RadarSOIObservation_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RadarSOIObservation_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBSTARTTIME = 4,
    VT_TOVS = 6,
    VT_RSPACES = 8,
    VT_XSPACES = 10,
    VT_DOPPLER2XRS = 12,
    VT_DELTATIMES = 14,
    VT_ASPECTANGLES = 16,
    VT_PROJANGVELS = 18,
    VT_IDSTATEVECTOR = 20,
    VT_IDATTITUDESET = 22,
    VT_RANGES = 24,
    VT_AZIMUTHS = 26,
    VT_ELEVATIONS = 28,
    VT_RANGERATES = 30,
    VT_AZIMUTHRATES = 32,
    VT_ELEVATIONRATES = 34,
    VT_AZIMUTHBIASES = 36,
    VT_ELEVATIONBIASES = 38,
    VT_RANGEBIASES = 40,
    VT_INTEGRATIONANGLES = 42,
    VT_CROSSRANGERES = 44,
    VT_BETA = 46,
    VT_KAPPA = 48,
    VT_PEAKAMPLITUDES = 50,
    VT_CENTERFREQUENCY = 52,
    VT_PULSEBANDWIDTH = 54,
    VT_XPOS = 56,
    VT_YPOS = 58,
    VT_ZPOS = 60,
    VT_XVEL = 62,
    VT_YVEL = 64,
    VT_ZVEL = 66
  };
  /// Observation detection start time in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.888456Z
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *obStartTime() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OBSTARTTIME);
  }
  /// Array of the times of validity in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tovs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TOVS);
  }
  /// Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
  /// Example: /// Example: [0.006, 0.006, 0.006]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rspaces() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RSPACES);
  }
  /// Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
  /// Example: /// Example: [0.006, 0.006, 0.006]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *xspaces() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_XSPACES);
  }
  /// Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
  /// Example: /// Example: [5644.27, 5644.27, 5644.27]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *doppler2XRs() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DOPPLER2XRS);
  }
  /// Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
  /// Example: /// Example: [0.005, 0.005, 0.005]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaTimes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_DELTATIMES);
  }
  /// Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
  /// Example: /// Example: [4.278, 4.278, 4.278]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *aspectAngles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ASPECTANGLES);
  }
  /// Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
  /// Example: /// Example: [0.166, 0.166, 0.166]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *projAngVels() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PROJANGVELS);
  }
  /// Optional id of assumed StateVector of object being observed.
  /// Example: /// Example: 99a0de63-b38f-4d81-b057
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idStateVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDSTATEVECTOR);
  }
  /// Optional id of assumed AttitudeSet of object being observed.
  /// Example: /// Example: 99a0de63-b38f-4d81-b057
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *idAttitudeSet() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDATTITUDESET);
  }
  /// Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
  /// Example: /// Example: [877.938, 877.938, 877.938]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ranges() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RANGES);
  }
  /// Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
  /// Example: /// Example: [278.27, 278.27, 278.27]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *azimuths() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_AZIMUTHS);
  }
  /// Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
  /// Example: /// Example: [70.85, 70.85, 70.85]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *elevations() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ELEVATIONS);
  }
  /// Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
  /// Example: /// Example: [0.317, 0.317, 0.317]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rangeRates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RANGERATES);
  }
  /// Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
  /// Example: /// Example: [-1.481, -1.481, -1.481]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *azimuthRates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_AZIMUTHRATES);
  }
  /// Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
  /// Example: /// Example: [-0.074, -0.074, -0.074]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *elevationRates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ELEVATIONRATES);
  }
  /// Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
  /// Example: /// Example: [45.23, 45.23, 45.23]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *azimuthBiases() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_AZIMUTHBIASES);
  }
  /// Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
  /// Example: /// Example: [1.23, 1.23, 1.23]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *elevationBiases() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ELEVATIONBIASES);
  }
  /// Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
  /// Example: /// Example: [1.23, 1.23, 1.23]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rangeBiases() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_RANGEBIASES);
  }
  /// Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
  /// Example: /// Example: [8.594, 8.594, 8.594]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *integrationAngles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_INTEGRATIONANGLES);
  }
  /// Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
  /// Example: /// Example: [11.301, 11.301, 11.301]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *crossRangeRes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CROSSRANGERES);
  }
  /// Beta angle (between target and radar-image frame z axis) in degrees.
  /// Example: /// Example: -89.97
  /// Constraints: No constraints specified.
  double beta() const {
    return GetField<double>(VT_BETA, 0.0);
  }
  /// Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
  /// Example: /// Example: 103.04
  /// Constraints: No constraints specified.
  double kappa() const {
    return GetField<double>(VT_KAPPA, 0.0);
  }
  /// Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
  /// Example: /// Example: [33.1, 33.1, 33.1]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *peakAmplitudes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PEAKAMPLITUDES);
  }
  /// Radar center frequency of the radar in hertz.
  /// Example: /// Example: 160047.0625
  /// Constraints: No constraints specified.
  double centerFrequency() const {
    return GetField<double>(VT_CENTERFREQUENCY, 0.0);
  }
  /// Bandwidth of radar pulse in hertz.
  /// Example: /// Example: 24094.12
  /// Constraints: No constraints specified.
  double pulseBandwidth() const {
    return GetField<double>(VT_PULSEBANDWIDTH, 0.0);
  }
  /// Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
  /// Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *xpos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_XPOS);
  }
  /// Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
  /// Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *ypos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_YPOS);
  }
  /// Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
  /// Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *zpos() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ZPOS);
  }
  /// Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
  /// Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *xvel() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_XVEL);
  }
  /// Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
  /// Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *yvel() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_YVEL);
  }
  /// Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
  /// Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
  /// Constraints: No constraints specified.
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *zvel() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ZVEL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBSTARTTIME) &&
           verifier.VerifyString(obStartTime()) &&
           VerifyOffset(verifier, VT_TOVS) &&
           verifier.VerifyVector(tovs()) &&
           verifier.VerifyVectorOfStrings(tovs()) &&
           VerifyOffset(verifier, VT_RSPACES) &&
           verifier.VerifyVector(rspaces()) &&
           verifier.VerifyVectorOfStrings(rspaces()) &&
           VerifyOffset(verifier, VT_XSPACES) &&
           verifier.VerifyVector(xspaces()) &&
           verifier.VerifyVectorOfStrings(xspaces()) &&
           VerifyOffset(verifier, VT_DOPPLER2XRS) &&
           verifier.VerifyVector(doppler2XRs()) &&
           verifier.VerifyVectorOfStrings(doppler2XRs()) &&
           VerifyOffset(verifier, VT_DELTATIMES) &&
           verifier.VerifyVector(deltaTimes()) &&
           verifier.VerifyVectorOfStrings(deltaTimes()) &&
           VerifyOffset(verifier, VT_ASPECTANGLES) &&
           verifier.VerifyVector(aspectAngles()) &&
           verifier.VerifyVectorOfStrings(aspectAngles()) &&
           VerifyOffset(verifier, VT_PROJANGVELS) &&
           verifier.VerifyVector(projAngVels()) &&
           verifier.VerifyVectorOfStrings(projAngVels()) &&
           VerifyOffset(verifier, VT_IDSTATEVECTOR) &&
           verifier.VerifyString(idStateVector()) &&
           VerifyOffset(verifier, VT_IDATTITUDESET) &&
           verifier.VerifyString(idAttitudeSet()) &&
           VerifyOffset(verifier, VT_RANGES) &&
           verifier.VerifyVector(ranges()) &&
           verifier.VerifyVectorOfStrings(ranges()) &&
           VerifyOffset(verifier, VT_AZIMUTHS) &&
           verifier.VerifyVector(azimuths()) &&
           verifier.VerifyVectorOfStrings(azimuths()) &&
           VerifyOffset(verifier, VT_ELEVATIONS) &&
           verifier.VerifyVector(elevations()) &&
           verifier.VerifyVectorOfStrings(elevations()) &&
           VerifyOffset(verifier, VT_RANGERATES) &&
           verifier.VerifyVector(rangeRates()) &&
           verifier.VerifyVectorOfStrings(rangeRates()) &&
           VerifyOffset(verifier, VT_AZIMUTHRATES) &&
           verifier.VerifyVector(azimuthRates()) &&
           verifier.VerifyVectorOfStrings(azimuthRates()) &&
           VerifyOffset(verifier, VT_ELEVATIONRATES) &&
           verifier.VerifyVector(elevationRates()) &&
           verifier.VerifyVectorOfStrings(elevationRates()) &&
           VerifyOffset(verifier, VT_AZIMUTHBIASES) &&
           verifier.VerifyVector(azimuthBiases()) &&
           verifier.VerifyVectorOfStrings(azimuthBiases()) &&
           VerifyOffset(verifier, VT_ELEVATIONBIASES) &&
           verifier.VerifyVector(elevationBiases()) &&
           verifier.VerifyVectorOfStrings(elevationBiases()) &&
           VerifyOffset(verifier, VT_RANGEBIASES) &&
           verifier.VerifyVector(rangeBiases()) &&
           verifier.VerifyVectorOfStrings(rangeBiases()) &&
           VerifyOffset(verifier, VT_INTEGRATIONANGLES) &&
           verifier.VerifyVector(integrationAngles()) &&
           verifier.VerifyVectorOfStrings(integrationAngles()) &&
           VerifyOffset(verifier, VT_CROSSRANGERES) &&
           verifier.VerifyVector(crossRangeRes()) &&
           verifier.VerifyVectorOfStrings(crossRangeRes()) &&
           VerifyField<double>(verifier, VT_BETA, 8) &&
           VerifyField<double>(verifier, VT_KAPPA, 8) &&
           VerifyOffset(verifier, VT_PEAKAMPLITUDES) &&
           verifier.VerifyVector(peakAmplitudes()) &&
           verifier.VerifyVectorOfStrings(peakAmplitudes()) &&
           VerifyField<double>(verifier, VT_CENTERFREQUENCY, 8) &&
           VerifyField<double>(verifier, VT_PULSEBANDWIDTH, 8) &&
           VerifyOffset(verifier, VT_XPOS) &&
           verifier.VerifyVector(xpos()) &&
           verifier.VerifyVectorOfStrings(xpos()) &&
           VerifyOffset(verifier, VT_YPOS) &&
           verifier.VerifyVector(ypos()) &&
           verifier.VerifyVectorOfStrings(ypos()) &&
           VerifyOffset(verifier, VT_ZPOS) &&
           verifier.VerifyVector(zpos()) &&
           verifier.VerifyVectorOfStrings(zpos()) &&
           VerifyOffset(verifier, VT_XVEL) &&
           verifier.VerifyVector(xvel()) &&
           verifier.VerifyVectorOfStrings(xvel()) &&
           VerifyOffset(verifier, VT_YVEL) &&
           verifier.VerifyVector(yvel()) &&
           verifier.VerifyVectorOfStrings(yvel()) &&
           VerifyOffset(verifier, VT_ZVEL) &&
           verifier.VerifyVector(zvel()) &&
           verifier.VerifyVectorOfStrings(zvel()) &&
           verifier.EndTable();
  }
};

struct RadarSOIObservation_IngestBuilder {
  typedef RadarSOIObservation_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_obStartTime(::flatbuffers::Offset<::flatbuffers::String> obStartTime) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_OBSTARTTIME, obStartTime);
  }
  void add_tovs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tovs) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_TOVS, tovs);
  }
  void add_rspaces(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rspaces) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_RSPACES, rspaces);
  }
  void add_xspaces(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xspaces) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_XSPACES, xspaces);
  }
  void add_doppler2XRs(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> doppler2XRs) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_DOPPLER2XRS, doppler2XRs);
  }
  void add_deltaTimes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaTimes) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_DELTATIMES, deltaTimes);
  }
  void add_aspectAngles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> aspectAngles) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_ASPECTANGLES, aspectAngles);
  }
  void add_projAngVels(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> projAngVels) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_PROJANGVELS, projAngVels);
  }
  void add_idStateVector(::flatbuffers::Offset<::flatbuffers::String> idStateVector) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_IDSTATEVECTOR, idStateVector);
  }
  void add_idAttitudeSet(::flatbuffers::Offset<::flatbuffers::String> idAttitudeSet) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_IDATTITUDESET, idAttitudeSet);
  }
  void add_ranges(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ranges) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_RANGES, ranges);
  }
  void add_azimuths(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> azimuths) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_AZIMUTHS, azimuths);
  }
  void add_elevations(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elevations) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_ELEVATIONS, elevations);
  }
  void add_rangeRates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rangeRates) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_RANGERATES, rangeRates);
  }
  void add_azimuthRates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> azimuthRates) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_AZIMUTHRATES, azimuthRates);
  }
  void add_elevationRates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elevationRates) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_ELEVATIONRATES, elevationRates);
  }
  void add_azimuthBiases(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> azimuthBiases) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_AZIMUTHBIASES, azimuthBiases);
  }
  void add_elevationBiases(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elevationBiases) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_ELEVATIONBIASES, elevationBiases);
  }
  void add_rangeBiases(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rangeBiases) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_RANGEBIASES, rangeBiases);
  }
  void add_integrationAngles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> integrationAngles) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_INTEGRATIONANGLES, integrationAngles);
  }
  void add_crossRangeRes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> crossRangeRes) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_CROSSRANGERES, crossRangeRes);
  }
  void add_beta(double beta) {
    fbb_.AddElement<double>(RadarSOIObservation_Ingest::VT_BETA, beta, 0.0);
  }
  void add_kappa(double kappa) {
    fbb_.AddElement<double>(RadarSOIObservation_Ingest::VT_KAPPA, kappa, 0.0);
  }
  void add_peakAmplitudes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> peakAmplitudes) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_PEAKAMPLITUDES, peakAmplitudes);
  }
  void add_centerFrequency(double centerFrequency) {
    fbb_.AddElement<double>(RadarSOIObservation_Ingest::VT_CENTERFREQUENCY, centerFrequency, 0.0);
  }
  void add_pulseBandwidth(double pulseBandwidth) {
    fbb_.AddElement<double>(RadarSOIObservation_Ingest::VT_PULSEBANDWIDTH, pulseBandwidth, 0.0);
  }
  void add_xpos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xpos) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_XPOS, xpos);
  }
  void add_ypos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ypos) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_YPOS, ypos);
  }
  void add_zpos(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zpos) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_ZPOS, zpos);
  }
  void add_xvel(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xvel) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_XVEL, xvel);
  }
  void add_yvel(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> yvel) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_YVEL, yvel);
  }
  void add_zvel(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zvel) {
    fbb_.AddOffset(RadarSOIObservation_Ingest::VT_ZVEL, zvel);
  }
  explicit RadarSOIObservation_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RadarSOIObservation_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RadarSOIObservation_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RadarSOIObservation_Ingest> CreateRadarSOIObservation_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> obStartTime = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tovs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rspaces = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xspaces = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> doppler2XRs = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> deltaTimes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> aspectAngles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> projAngVels = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idStateVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> idAttitudeSet = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ranges = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> azimuths = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elevations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rangeRates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> azimuthRates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elevationRates = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> azimuthBiases = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> elevationBiases = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rangeBiases = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> integrationAngles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> crossRangeRes = 0,
    double beta = 0.0,
    double kappa = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> peakAmplitudes = 0,
    double centerFrequency = 0.0,
    double pulseBandwidth = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xpos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> ypos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zpos = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> xvel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> yvel = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> zvel = 0) {
  RadarSOIObservation_IngestBuilder builder_(_fbb);
  builder_.add_pulseBandwidth(pulseBandwidth);
  builder_.add_centerFrequency(centerFrequency);
  builder_.add_kappa(kappa);
  builder_.add_beta(beta);
  builder_.add_zvel(zvel);
  builder_.add_yvel(yvel);
  builder_.add_xvel(xvel);
  builder_.add_zpos(zpos);
  builder_.add_ypos(ypos);
  builder_.add_xpos(xpos);
  builder_.add_peakAmplitudes(peakAmplitudes);
  builder_.add_crossRangeRes(crossRangeRes);
  builder_.add_integrationAngles(integrationAngles);
  builder_.add_rangeBiases(rangeBiases);
  builder_.add_elevationBiases(elevationBiases);
  builder_.add_azimuthBiases(azimuthBiases);
  builder_.add_elevationRates(elevationRates);
  builder_.add_azimuthRates(azimuthRates);
  builder_.add_rangeRates(rangeRates);
  builder_.add_elevations(elevations);
  builder_.add_azimuths(azimuths);
  builder_.add_ranges(ranges);
  builder_.add_idAttitudeSet(idAttitudeSet);
  builder_.add_idStateVector(idStateVector);
  builder_.add_projAngVels(projAngVels);
  builder_.add_aspectAngles(aspectAngles);
  builder_.add_deltaTimes(deltaTimes);
  builder_.add_doppler2XRs(doppler2XRs);
  builder_.add_xspaces(xspaces);
  builder_.add_rspaces(rspaces);
  builder_.add_tovs(tovs);
  builder_.add_obStartTime(obStartTime);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RadarSOIObservation_Ingest> CreateRadarSOIObservation_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *obStartTime = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tovs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rspaces = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *xspaces = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *doppler2XRs = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *deltaTimes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *aspectAngles = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *projAngVels = nullptr,
    const char *idStateVector = nullptr,
    const char *idAttitudeSet = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ranges = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *azimuths = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *elevations = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rangeRates = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *azimuthRates = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *elevationRates = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *azimuthBiases = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *elevationBiases = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rangeBiases = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *integrationAngles = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *crossRangeRes = nullptr,
    double beta = 0.0,
    double kappa = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *peakAmplitudes = nullptr,
    double centerFrequency = 0.0,
    double pulseBandwidth = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *xpos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *ypos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *zpos = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *xvel = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *yvel = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *zvel = nullptr) {
  auto obStartTime__ = obStartTime ? _fbb.CreateString(obStartTime) : 0;
  auto tovs__ = tovs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tovs) : 0;
  auto rspaces__ = rspaces ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rspaces) : 0;
  auto xspaces__ = xspaces ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*xspaces) : 0;
  auto doppler2XRs__ = doppler2XRs ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*doppler2XRs) : 0;
  auto deltaTimes__ = deltaTimes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*deltaTimes) : 0;
  auto aspectAngles__ = aspectAngles ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*aspectAngles) : 0;
  auto projAngVels__ = projAngVels ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*projAngVels) : 0;
  auto idStateVector__ = idStateVector ? _fbb.CreateString(idStateVector) : 0;
  auto idAttitudeSet__ = idAttitudeSet ? _fbb.CreateString(idAttitudeSet) : 0;
  auto ranges__ = ranges ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ranges) : 0;
  auto azimuths__ = azimuths ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*azimuths) : 0;
  auto elevations__ = elevations ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*elevations) : 0;
  auto rangeRates__ = rangeRates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rangeRates) : 0;
  auto azimuthRates__ = azimuthRates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*azimuthRates) : 0;
  auto elevationRates__ = elevationRates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*elevationRates) : 0;
  auto azimuthBiases__ = azimuthBiases ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*azimuthBiases) : 0;
  auto elevationBiases__ = elevationBiases ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*elevationBiases) : 0;
  auto rangeBiases__ = rangeBiases ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rangeBiases) : 0;
  auto integrationAngles__ = integrationAngles ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*integrationAngles) : 0;
  auto crossRangeRes__ = crossRangeRes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*crossRangeRes) : 0;
  auto peakAmplitudes__ = peakAmplitudes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*peakAmplitudes) : 0;
  auto xpos__ = xpos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*xpos) : 0;
  auto ypos__ = ypos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*ypos) : 0;
  auto zpos__ = zpos ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*zpos) : 0;
  auto xvel__ = xvel ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*xvel) : 0;
  auto yvel__ = yvel ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*yvel) : 0;
  auto zvel__ = zvel ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*zvel) : 0;
  return CreateRadarSOIObservation_Ingest(
      _fbb,
      obStartTime__,
      tovs__,
      rspaces__,
      xspaces__,
      doppler2XRs__,
      deltaTimes__,
      aspectAngles__,
      projAngVels__,
      idStateVector__,
      idAttitudeSet__,
      ranges__,
      azimuths__,
      elevations__,
      rangeRates__,
      azimuthRates__,
      elevationRates__,
      azimuthBiases__,
      elevationBiases__,
      rangeBiases__,
      integrationAngles__,
      crossRangeRes__,
      beta,
      kappa,
      peakAmplitudes__,
      centerFrequency,
      pulseBandwidth,
      xpos__,
      ypos__,
      zpos__,
      xvel__,
      yvel__,
      zvel__);
}

inline const RadarSOIObservation_Ingest *GetRadarSOIObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<RadarSOIObservation_Ingest>(buf);
}

inline const RadarSOIObservation_Ingest *GetSizePrefixedRadarSOIObservation_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<RadarSOIObservation_Ingest>(buf);
}

inline const char *RadarSOIObservation_IngestIdentifier() {
  return "RADA";
}

inline bool RadarSOIObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RadarSOIObservation_IngestIdentifier());
}

inline bool SizePrefixedRadarSOIObservation_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, RadarSOIObservation_IngestIdentifier(), true);
}

inline bool VerifyRadarSOIObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<RadarSOIObservation_Ingest>(RadarSOIObservation_IngestIdentifier());
}

inline bool VerifySizePrefixedRadarSOIObservation_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<RadarSOIObservation_Ingest>(RadarSOIObservation_IngestIdentifier());
}

inline void FinishRadarSOIObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RadarSOIObservation_Ingest> root) {
  fbb.Finish(root, RadarSOIObservation_IngestIdentifier());
}

inline void FinishSizePrefixedRadarSOIObservation_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<RadarSOIObservation_Ingest> root) {
  fbb.FinishSizePrefixed(root, RadarSOIObservation_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
