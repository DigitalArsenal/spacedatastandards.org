// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct IonoObservationDensityProfileParabolicItem_Full;
struct IonoObservationDensityProfileParabolicItem_FullBuilder;

/// /// Describes the E, F1, and F2 layers as parabolic-shape segments.
struct IonoObservationDensityProfileParabolicItem_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IonoObservationDensityProfileParabolicItem_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LAYER = 4,
    VT_F = 6,
    VT_Z = 8,
    VT_Y = 10
  };
  /// Ionospheric plasma layer (E, F1, or F2).
  /// Example: /// Example: E
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *layer() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LAYER);
  }
  /// Plasma frequency at the layer peak, in MHz.
  /// Example: /// Example: 3.621
  /// Constraints: No constraints specified.
  double f() const {
    return GetField<double>(VT_F, 0.0);
  }
  /// Height of the layer peak, in kilometers.
  /// Example: /// Example: 110.2
  /// Constraints: No constraints specified.
  double z() const {
    return GetField<double>(VT_Z, 0.0);
  }
  /// Half-thickness of the layer, in kilometers.
  /// Example: /// Example: 11.1
  /// Constraints: No constraints specified.
  double y() const {
    return GetField<double>(VT_Y, 0.0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LAYER) &&
           verifier.VerifyString(layer()) &&
           VerifyField<double>(verifier, VT_F, 8) &&
           VerifyField<double>(verifier, VT_Z, 8) &&
           VerifyField<double>(verifier, VT_Y, 8) &&
           verifier.EndTable();
  }
};

struct IonoObservationDensityProfileParabolicItem_FullBuilder {
  typedef IonoObservationDensityProfileParabolicItem_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_layer(::flatbuffers::Offset<::flatbuffers::String> layer) {
    fbb_.AddOffset(IonoObservationDensityProfileParabolicItem_Full::VT_LAYER, layer);
  }
  void add_f(double f) {
    fbb_.AddElement<double>(IonoObservationDensityProfileParabolicItem_Full::VT_F, f, 0.0);
  }
  void add_z(double z) {
    fbb_.AddElement<double>(IonoObservationDensityProfileParabolicItem_Full::VT_Z, z, 0.0);
  }
  void add_y(double y) {
    fbb_.AddElement<double>(IonoObservationDensityProfileParabolicItem_Full::VT_Y, y, 0.0);
  }
  explicit IonoObservationDensityProfileParabolicItem_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IonoObservationDensityProfileParabolicItem_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IonoObservationDensityProfileParabolicItem_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IonoObservationDensityProfileParabolicItem_Full> CreateIonoObservationDensityProfileParabolicItem_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> layer = 0,
    double f = 0.0,
    double z = 0.0,
    double y = 0.0) {
  IonoObservationDensityProfileParabolicItem_FullBuilder builder_(_fbb);
  builder_.add_y(y);
  builder_.add_z(z);
  builder_.add_f(f);
  builder_.add_layer(layer);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IonoObservationDensityProfileParabolicItem_Full> CreateIonoObservationDensityProfileParabolicItem_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *layer = nullptr,
    double f = 0.0,
    double z = 0.0,
    double y = 0.0) {
  auto layer__ = layer ? _fbb.CreateString(layer) : 0;
  return CreateIonoObservationDensityProfileParabolicItem_Full(
      _fbb,
      layer__,
      f,
      z,
      y);
}

inline const IonoObservationDensityProfileParabolicItem_Full *GetIonoObservationDensityProfileParabolicItem_Full(const void *buf) {
  return ::flatbuffers::GetRoot<IonoObservationDensityProfileParabolicItem_Full>(buf);
}

inline const IonoObservationDensityProfileParabolicItem_Full *GetSizePrefixedIonoObservationDensityProfileParabolicItem_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<IonoObservationDensityProfileParabolicItem_Full>(buf);
}

inline const char *IonoObservationDensityProfileParabolicItem_FullIdentifier() {
  return "IONO";
}

inline bool IonoObservationDensityProfileParabolicItem_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileParabolicItem_FullIdentifier());
}

inline bool SizePrefixedIonoObservationDensityProfileParabolicItem_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, IonoObservationDensityProfileParabolicItem_FullIdentifier(), true);
}

inline bool VerifyIonoObservationDensityProfileParabolicItem_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<IonoObservationDensityProfileParabolicItem_Full>(IonoObservationDensityProfileParabolicItem_FullIdentifier());
}

inline bool VerifySizePrefixedIonoObservationDensityProfileParabolicItem_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<IonoObservationDensityProfileParabolicItem_Full>(IonoObservationDensityProfileParabolicItem_FullIdentifier());
}

inline void FinishIonoObservationDensityProfileParabolicItem_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileParabolicItem_Full> root) {
  fbb.Finish(root, IonoObservationDensityProfileParabolicItem_FullIdentifier());
}

inline void FinishSizePrefixedIonoObservationDensityProfileParabolicItem_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<IonoObservationDensityProfileParabolicItem_Full> root) {
  fbb.FinishSizePrefixed(root, IonoObservationDensityProfileParabolicItem_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
