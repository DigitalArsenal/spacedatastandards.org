// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct CotPositionData_Ingest;
struct CotPositionData_IngestBuilder;

/// /// Schema for the CotPositionData to post.
struct CotPositionData_Ingest FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CotPositionData_IngestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CALLSIGN = 4,
    VT_TEAMROLE = 6,
    VT_TEAM = 8
  };
  /// Name of the POI target Object.
  /// Example: /// Example: POI_NAME
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  const ::flatbuffers::String *callSign() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CALLSIGN);
  }
  /// Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
  /// Example: /// Example: Team Member
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  const ::flatbuffers::String *teamRole() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEAMROLE);
  }
  /// Description of the POI target Object.
  /// Example: /// Example: Description of the object
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  const ::flatbuffers::String *team() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEAM);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CALLSIGN) &&
           verifier.VerifyString(callSign()) &&
           VerifyOffset(verifier, VT_TEAMROLE) &&
           verifier.VerifyString(teamRole()) &&
           VerifyOffset(verifier, VT_TEAM) &&
           verifier.VerifyString(team()) &&
           verifier.EndTable();
  }
};

struct CotPositionData_IngestBuilder {
  typedef CotPositionData_Ingest Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_callSign(::flatbuffers::Offset<::flatbuffers::String> callSign) {
    fbb_.AddOffset(CotPositionData_Ingest::VT_CALLSIGN, callSign);
  }
  void add_teamRole(::flatbuffers::Offset<::flatbuffers::String> teamRole) {
    fbb_.AddOffset(CotPositionData_Ingest::VT_TEAMROLE, teamRole);
  }
  void add_team(::flatbuffers::Offset<::flatbuffers::String> team) {
    fbb_.AddOffset(CotPositionData_Ingest::VT_TEAM, team);
  }
  explicit CotPositionData_IngestBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CotPositionData_Ingest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CotPositionData_Ingest>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CotPositionData_Ingest> CreateCotPositionData_Ingest(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> callSign = 0,
    ::flatbuffers::Offset<::flatbuffers::String> teamRole = 0,
    ::flatbuffers::Offset<::flatbuffers::String> team = 0) {
  CotPositionData_IngestBuilder builder_(_fbb);
  builder_.add_team(team);
  builder_.add_teamRole(teamRole);
  builder_.add_callSign(callSign);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CotPositionData_Ingest> CreateCotPositionData_IngestDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *callSign = nullptr,
    const char *teamRole = nullptr,
    const char *team = nullptr) {
  auto callSign__ = callSign ? _fbb.CreateString(callSign) : 0;
  auto teamRole__ = teamRole ? _fbb.CreateString(teamRole) : 0;
  auto team__ = team ? _fbb.CreateString(team) : 0;
  return CreateCotPositionData_Ingest(
      _fbb,
      callSign__,
      teamRole__,
      team__);
}

inline const CotPositionData_Ingest *GetCotPositionData_Ingest(const void *buf) {
  return ::flatbuffers::GetRoot<CotPositionData_Ingest>(buf);
}

inline const CotPositionData_Ingest *GetSizePrefixedCotPositionData_Ingest(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CotPositionData_Ingest>(buf);
}

inline const char *CotPositionData_IngestIdentifier() {
  return "COTP";
}

inline bool CotPositionData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CotPositionData_IngestIdentifier());
}

inline bool SizePrefixedCotPositionData_IngestBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, CotPositionData_IngestIdentifier(), true);
}

inline bool VerifyCotPositionData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CotPositionData_Ingest>(CotPositionData_IngestIdentifier());
}

inline bool VerifySizePrefixedCotPositionData_IngestBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CotPositionData_Ingest>(CotPositionData_IngestIdentifier());
}

inline void FinishCotPositionData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CotPositionData_Ingest> root) {
  fbb.Finish(root, CotPositionData_IngestIdentifier());
}

inline void FinishSizePrefixedCotPositionData_IngestBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CotPositionData_Ingest> root) {
  fbb.FinishSizePrefixed(root, CotPositionData_IngestIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
