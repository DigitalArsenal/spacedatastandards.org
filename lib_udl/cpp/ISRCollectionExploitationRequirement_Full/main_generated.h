// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_H_
#define FLATBUFFERS_GENERATED_MAIN_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

struct ISRCollectionExploitationRequirement_Full;
struct ISRCollectionExploitationRequirement_FullBuilder;

/// /// What it is that is trying to be exploited.
struct ISRCollectionExploitationRequirement_Full FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ISRCollectionExploitationRequirement_FullBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_AMPLIFICATION = 6,
    VT_REPORTINGCRITERIA = 8,
    VT_DISSEMINATION = 10,
    VT_EEI = 12,
    VT_POC = 14
  };
  /// Exploitation requirement id.
  /// Example: /// Example: ISRCOLLECTIONEXPLOITATIONREQUIREMENT
  /// Constraints: Minimum length = 0, Maximum length = 36
  const ::flatbuffers::String *id() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ID);
  }
  /// Amplifying data for the exploitation requirement.
  /// Example: /// Example: AMPLIFICATION
  /// Constraints: Minimum length = 0, Maximum length = 256
  const ::flatbuffers::String *amplification() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AMPLIFICATION);
  }
  /// The reporting criteria of the collection requirement.
  /// Example: /// Example: CRITERIA
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *reportingCriteria() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTINGCRITERIA);
  }
  /// List of e-mails to disseminate collection verification information.
  /// Example: /// Example: EMAILS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *dissemination() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DISSEMINATION);
  }
  /// Essential Elements of Information.
  /// Example: /// Example: ESSENTIAL_ELEMENTS
  /// Constraints: Minimum length = 0, Maximum length = 32
  const ::flatbuffers::String *eei() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EEI);
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  const ::flatbuffers::String *poc() const {
    return GetPointer<const ::flatbuffers::String *>(VT_POC);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_AMPLIFICATION) &&
           verifier.VerifyString(amplification()) &&
           VerifyOffset(verifier, VT_REPORTINGCRITERIA) &&
           verifier.VerifyString(reportingCriteria()) &&
           VerifyOffset(verifier, VT_DISSEMINATION) &&
           verifier.VerifyString(dissemination()) &&
           VerifyOffset(verifier, VT_EEI) &&
           verifier.VerifyString(eei()) &&
           VerifyOffset(verifier, VT_POC) &&
           verifier.VerifyString(poc()) &&
           verifier.EndTable();
  }
};

struct ISRCollectionExploitationRequirement_FullBuilder {
  typedef ISRCollectionExploitationRequirement_Full Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(::flatbuffers::Offset<::flatbuffers::String> id) {
    fbb_.AddOffset(ISRCollectionExploitationRequirement_Full::VT_ID, id);
  }
  void add_amplification(::flatbuffers::Offset<::flatbuffers::String> amplification) {
    fbb_.AddOffset(ISRCollectionExploitationRequirement_Full::VT_AMPLIFICATION, amplification);
  }
  void add_reportingCriteria(::flatbuffers::Offset<::flatbuffers::String> reportingCriteria) {
    fbb_.AddOffset(ISRCollectionExploitationRequirement_Full::VT_REPORTINGCRITERIA, reportingCriteria);
  }
  void add_dissemination(::flatbuffers::Offset<::flatbuffers::String> dissemination) {
    fbb_.AddOffset(ISRCollectionExploitationRequirement_Full::VT_DISSEMINATION, dissemination);
  }
  void add_eei(::flatbuffers::Offset<::flatbuffers::String> eei) {
    fbb_.AddOffset(ISRCollectionExploitationRequirement_Full::VT_EEI, eei);
  }
  void add_poc(::flatbuffers::Offset<::flatbuffers::String> poc) {
    fbb_.AddOffset(ISRCollectionExploitationRequirement_Full::VT_POC, poc);
  }
  explicit ISRCollectionExploitationRequirement_FullBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ISRCollectionExploitationRequirement_Full> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ISRCollectionExploitationRequirement_Full>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ISRCollectionExploitationRequirement_Full> CreateISRCollectionExploitationRequirement_Full(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> id = 0,
    ::flatbuffers::Offset<::flatbuffers::String> amplification = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportingCriteria = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dissemination = 0,
    ::flatbuffers::Offset<::flatbuffers::String> eei = 0,
    ::flatbuffers::Offset<::flatbuffers::String> poc = 0) {
  ISRCollectionExploitationRequirement_FullBuilder builder_(_fbb);
  builder_.add_poc(poc);
  builder_.add_eei(eei);
  builder_.add_dissemination(dissemination);
  builder_.add_reportingCriteria(reportingCriteria);
  builder_.add_amplification(amplification);
  builder_.add_id(id);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ISRCollectionExploitationRequirement_Full> CreateISRCollectionExploitationRequirement_FullDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *amplification = nullptr,
    const char *reportingCriteria = nullptr,
    const char *dissemination = nullptr,
    const char *eei = nullptr,
    const char *poc = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto amplification__ = amplification ? _fbb.CreateString(amplification) : 0;
  auto reportingCriteria__ = reportingCriteria ? _fbb.CreateString(reportingCriteria) : 0;
  auto dissemination__ = dissemination ? _fbb.CreateString(dissemination) : 0;
  auto eei__ = eei ? _fbb.CreateString(eei) : 0;
  auto poc__ = poc ? _fbb.CreateString(poc) : 0;
  return CreateISRCollectionExploitationRequirement_Full(
      _fbb,
      id__,
      amplification__,
      reportingCriteria__,
      dissemination__,
      eei__,
      poc__);
}

inline const ISRCollectionExploitationRequirement_Full *GetISRCollectionExploitationRequirement_Full(const void *buf) {
  return ::flatbuffers::GetRoot<ISRCollectionExploitationRequirement_Full>(buf);
}

inline const ISRCollectionExploitationRequirement_Full *GetSizePrefixedISRCollectionExploitationRequirement_Full(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<ISRCollectionExploitationRequirement_Full>(buf);
}

inline const char *ISRCollectionExploitationRequirement_FullIdentifier() {
  return "ISRC";
}

inline bool ISRCollectionExploitationRequirement_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionExploitationRequirement_FullIdentifier());
}

inline bool SizePrefixedISRCollectionExploitationRequirement_FullBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, ISRCollectionExploitationRequirement_FullIdentifier(), true);
}

inline bool VerifyISRCollectionExploitationRequirement_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ISRCollectionExploitationRequirement_Full>(ISRCollectionExploitationRequirement_FullIdentifier());
}

inline bool VerifySizePrefixedISRCollectionExploitationRequirement_FullBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ISRCollectionExploitationRequirement_Full>(ISRCollectionExploitationRequirement_FullIdentifier());
}

inline void FinishISRCollectionExploitationRequirement_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionExploitationRequirement_Full> root) {
  fbb.Finish(root, ISRCollectionExploitationRequirement_FullIdentifier());
}

inline void FinishSizePrefixedISRCollectionExploitationRequirement_FullBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<ISRCollectionExploitationRequirement_Full> root) {
  fbb.FinishSizePrefixed(root, ISRCollectionExploitationRequirement_FullIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAIN_H_
