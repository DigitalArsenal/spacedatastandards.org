// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of details compiled/collected on a launch site by a particular source. A launch site may have several details records.
 */
@SuppressWarnings("unused")
public final class LaunchSiteDetails_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LaunchSiteDetails_Ingest getRootAsLaunchSiteDetails_Ingest(ByteBuffer _bb) { return getRootAsLaunchSiteDetails_Ingest(_bb, new LaunchSiteDetails_Ingest()); }
  public static LaunchSiteDetails_Ingest getRootAsLaunchSiteDetails_Ingest(ByteBuffer _bb, LaunchSiteDetails_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LaunchSiteDetails_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LAUN"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LaunchSiteDetails_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: LAUNCHSITEDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the parent launch site record.
   * Example: /// Example: LAUNCHSITE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idLaunchSite() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idLaunchSiteAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idLaunchSiteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * ID of the location data for the launch site, or null if mobile (e.g. sea launch platform in international waters).
   * Example: /// Example: LOCATION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idLocation() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idLocationAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idLocationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Launch site group name. Multiple launch sites may be colocated within a launch ''group''.
   * Example: /// Example: Example-group-name
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String launchGroup() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchGroupAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer launchGroupInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Array of supported launch inclinations known for this site. The array is always sized as a multiple of two and includes start/end values to support ranges.  For example, if a site support inclinations of 10 and 12-14, the array would have the following values: [10,10, 12,14].
   * Example: /// Example: [10.23, 10.23, 12.23, 14.23]
   * Constraints: No constraints specified.
   */
  public String availableInclinations(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int availableInclinationsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector availableInclinationsVector() { return availableInclinationsVector(new StringVector()); }
  public StringVector availableInclinationsVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Notes/description of the launch site.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String description() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(28); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String location() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locationAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer locationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }

  public static int createLaunchSiteDetails_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int idLaunchSiteOffset,
      int classificationMarkingOffset,
      int idLocationOffset,
      int launchGroupOffset,
      int availableInclinationsOffset,
      int descriptionOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int locationOffset) {
    builder.startTable(14);
    LaunchSiteDetails_Ingest.addLocation(builder, locationOffset);
    LaunchSiteDetails_Ingest.addOrigNetwork(builder, origNetworkOffset);
    LaunchSiteDetails_Ingest.addOrigin(builder, originOffset);
    LaunchSiteDetails_Ingest.addSource(builder, sourceOffset);
    LaunchSiteDetails_Ingest.addCreatedBy(builder, createdByOffset);
    LaunchSiteDetails_Ingest.addCreatedAt(builder, createdAtOffset);
    LaunchSiteDetails_Ingest.addDescription(builder, descriptionOffset);
    LaunchSiteDetails_Ingest.addAvailableInclinations(builder, availableInclinationsOffset);
    LaunchSiteDetails_Ingest.addLaunchGroup(builder, launchGroupOffset);
    LaunchSiteDetails_Ingest.addIdLocation(builder, idLocationOffset);
    LaunchSiteDetails_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    LaunchSiteDetails_Ingest.addIdLaunchSite(builder, idLaunchSiteOffset);
    LaunchSiteDetails_Ingest.addId(builder, idOffset);
    LaunchSiteDetails_Ingest.addDataMode(builder, dataMode);
    return LaunchSiteDetails_Ingest.endLaunchSiteDetails_Ingest(builder);
  }

  public static void startLaunchSiteDetails_Ingest(FlatBufferBuilder builder) { builder.startTable(14); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdLaunchSite(FlatBufferBuilder builder, int idLaunchSiteOffset) { builder.addOffset(1, idLaunchSiteOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addIdLocation(FlatBufferBuilder builder, int idLocationOffset) { builder.addOffset(3, idLocationOffset, 0); }
  public static void addLaunchGroup(FlatBufferBuilder builder, int launchGroupOffset) { builder.addOffset(4, launchGroupOffset, 0); }
  public static void addAvailableInclinations(FlatBufferBuilder builder, int availableInclinationsOffset) { builder.addOffset(5, availableInclinationsOffset, 0); }
  public static int createAvailableInclinationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAvailableInclinationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(6, descriptionOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(7, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(8, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(9, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(10, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(11, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(12, dataMode, 0); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addOffset(13, locationOffset, 0); }
  public static int endLaunchSiteDetails_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLaunchSiteDetails_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LAUN"); }
  public static void finishSizePrefixedLaunchSiteDetails_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LAUN"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LaunchSiteDetails_Ingest get(int j) { return get(new LaunchSiteDetails_Ingest(), j); }
    public LaunchSiteDetails_Ingest get(LaunchSiteDetails_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

