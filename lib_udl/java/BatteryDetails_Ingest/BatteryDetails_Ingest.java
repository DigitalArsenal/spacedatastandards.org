// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
 */
@SuppressWarnings("unused")
public final class BatteryDetails_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static BatteryDetails_Ingest getRootAsBatteryDetails_Ingest(ByteBuffer _bb) { return getRootAsBatteryDetails_Ingest(_bb, new BatteryDetails_Ingest()); }
  public static BatteryDetails_Ingest getRootAsBatteryDetails_Ingest(ByteBuffer _bb, BatteryDetails_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean BatteryDetails_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "BATT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BatteryDetails_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: BATTERYDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the parent battery type record.
   * Example: /// Example: BATTERY-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idBattery() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idBatteryAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idBatteryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
   * Example: /// Example: Ni-Cd
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String technology() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer technologyAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer technologyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Battery capacity in Ah.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double capacity() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Depth of discharge as a percentage/fraction.
   * Example: /// Example: 0.2
   * Constraints: No constraints specified.
   */
  public double dischargeDepth() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Battery model number or name.
   * Example: /// Example: 11212
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String model() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modelAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer modelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Battery description/notes.
   * Example: /// Example: example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String description() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * ID of the organization that manufactures the battery.
   * Example: /// Example: MANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(32); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createBatteryDetails_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int idBatteryOffset,
      int classificationMarkingOffset,
      int technologyOffset,
      double capacity,
      double dischargeDepth,
      int modelOffset,
      int descriptionOffset,
      int manufacturerOrgIdOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int tagsOffset) {
    builder.startTable(16);
    BatteryDetails_Ingest.addDischargeDepth(builder, dischargeDepth);
    BatteryDetails_Ingest.addCapacity(builder, capacity);
    BatteryDetails_Ingest.addTags(builder, tagsOffset);
    BatteryDetails_Ingest.addOrigNetwork(builder, origNetworkOffset);
    BatteryDetails_Ingest.addOrigin(builder, originOffset);
    BatteryDetails_Ingest.addSource(builder, sourceOffset);
    BatteryDetails_Ingest.addCreatedBy(builder, createdByOffset);
    BatteryDetails_Ingest.addCreatedAt(builder, createdAtOffset);
    BatteryDetails_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    BatteryDetails_Ingest.addDescription(builder, descriptionOffset);
    BatteryDetails_Ingest.addModel(builder, modelOffset);
    BatteryDetails_Ingest.addTechnology(builder, technologyOffset);
    BatteryDetails_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    BatteryDetails_Ingest.addIdBattery(builder, idBatteryOffset);
    BatteryDetails_Ingest.addId(builder, idOffset);
    BatteryDetails_Ingest.addDataMode(builder, dataMode);
    return BatteryDetails_Ingest.endBatteryDetails_Ingest(builder);
  }

  public static void startBatteryDetails_Ingest(FlatBufferBuilder builder) { builder.startTable(16); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdBattery(FlatBufferBuilder builder, int idBatteryOffset) { builder.addOffset(1, idBatteryOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addTechnology(FlatBufferBuilder builder, int technologyOffset) { builder.addOffset(3, technologyOffset, 0); }
  public static void addCapacity(FlatBufferBuilder builder, double capacity) { builder.addDouble(4, capacity, 0.0); }
  public static void addDischargeDepth(FlatBufferBuilder builder, double dischargeDepth) { builder.addDouble(5, dischargeDepth, 0.0); }
  public static void addModel(FlatBufferBuilder builder, int modelOffset) { builder.addOffset(6, modelOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(7, descriptionOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(8, manufacturerOrgIdOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(9, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(10, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(11, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(12, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(13, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(14, dataMode, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(15, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endBatteryDetails_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishBatteryDetails_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "BATT"); }
  public static void finishSizePrefixedBatteryDetails_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "BATT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BatteryDetails_Ingest get(int j) { return get(new BatteryDetails_Ingest(), j); }
    public BatteryDetails_Ingest get(BatteryDetails_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

