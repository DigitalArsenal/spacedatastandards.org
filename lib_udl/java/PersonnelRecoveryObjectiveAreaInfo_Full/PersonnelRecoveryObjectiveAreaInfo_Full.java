// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Objective Area Information.
 */
@SuppressWarnings("unused")
public final class PersonnelRecoveryObjectiveAreaInfo_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PersonnelRecoveryObjectiveAreaInfo_Full getRootAsPersonnelRecoveryObjectiveAreaInfo_Full(ByteBuffer _bb) { return getRootAsPersonnelRecoveryObjectiveAreaInfo_Full(_bb, new PersonnelRecoveryObjectiveAreaInfo_Full()); }
  public static PersonnelRecoveryObjectiveAreaInfo_Full getRootAsPersonnelRecoveryObjectiveAreaInfo_Full(ByteBuffer _bb, PersonnelRecoveryObjectiveAreaInfo_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PersonnelRecoveryObjectiveAreaInfo_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "PERS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PersonnelRecoveryObjectiveAreaInfo_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
   * Example: /// Example: [103.23, 30.445]
   * Constraints: No constraints specified.
   */
  public String pzLocation(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int pzLocationLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector pzLocationVector() { return pzLocationVector(new StringVector()); }
  public StringVector pzLocationVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Description of the pickup zone location.
   * Example: /// Example: Near the lake.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String pzDesc() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pzDescAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer pzDescInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The call sign of the on-scene commander.
   * Example: /// Example: STARFOX
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String oscCallSign() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer oscCallSignAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer oscCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The radio frequency of the on-scene commander.
   * Example: /// Example: 12.55
   * Constraints: No constraints specified.
   */
  public double oscFreq() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Information detailing knowledge of enemies in the area.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String enemyData(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int enemyDataLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public StringVector enemyDataVector() { return enemyDataVector(new StringVector()); }
  public StringVector enemyDataVector(StringVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder builder,
      int pzLocationOffset,
      int pzDescOffset,
      int oscCallSignOffset,
      double oscFreq,
      int enemyDataOffset) {
    builder.startTable(5);
    PersonnelRecoveryObjectiveAreaInfo_Full.addOscFreq(builder, oscFreq);
    PersonnelRecoveryObjectiveAreaInfo_Full.addEnemyData(builder, enemyDataOffset);
    PersonnelRecoveryObjectiveAreaInfo_Full.addOscCallSign(builder, oscCallSignOffset);
    PersonnelRecoveryObjectiveAreaInfo_Full.addPzDesc(builder, pzDescOffset);
    PersonnelRecoveryObjectiveAreaInfo_Full.addPzLocation(builder, pzLocationOffset);
    return PersonnelRecoveryObjectiveAreaInfo_Full.endPersonnelRecoveryObjectiveAreaInfo_Full(builder);
  }

  public static void startPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addPzLocation(FlatBufferBuilder builder, int pzLocationOffset) { builder.addOffset(0, pzLocationOffset, 0); }
  public static int createPzLocationVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPzLocationVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPzDesc(FlatBufferBuilder builder, int pzDescOffset) { builder.addOffset(1, pzDescOffset, 0); }
  public static void addOscCallSign(FlatBufferBuilder builder, int oscCallSignOffset) { builder.addOffset(2, oscCallSignOffset, 0); }
  public static void addOscFreq(FlatBufferBuilder builder, double oscFreq) { builder.addDouble(3, oscFreq, 0.0); }
  public static void addEnemyData(FlatBufferBuilder builder, int enemyDataOffset) { builder.addOffset(4, enemyDataOffset, 0); }
  public static int createEnemyDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEnemyDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPersonnelRecoveryObjectiveAreaInfo_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPersonnelRecoveryObjectiveAreaInfo_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "PERS"); }
  public static void finishSizePrefixedPersonnelRecoveryObjectiveAreaInfo_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "PERS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PersonnelRecoveryObjectiveAreaInfo_Full get(int j) { return get(new PersonnelRecoveryObjectiveAreaInfo_Full(), j); }
    public PersonnelRecoveryObjectiveAreaInfo_Full get(PersonnelRecoveryObjectiveAreaInfo_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

