// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
 */
@SuppressWarnings("unused")
public final class DataLinkMultiDuty_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DataLinkMultiDuty_Ingest getRootAsDataLinkMultiDuty_Ingest(ByteBuffer _bb) { return getRootAsDataLinkMultiDuty_Ingest(_bb, new DataLinkMultiDuty_Ingest()); }
  public static DataLinkMultiDuty_Ingest getRootAsDataLinkMultiDuty_Ingest(ByteBuffer _bb, DataLinkMultiDuty_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DataLinkMultiDuty_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataLinkMultiDuty_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Designated force of unit specified by ship name, unit call sign, or unit designator.
   * Example: /// Example: SHIP:STENNIS
   * Constraints: Minimum length = 0, Maximum length = 38
   */
  public String unitDes() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unitDesAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer unitDesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The name of the person to be contacted for multilink coordination.
   * Example: /// Example: POPOVICH
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The rank or position of the person to be contacted for multilink coordination.
   * Example: /// Example: LCDR
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String rank() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rankAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer rankInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
   * Example: /// Example: SICO
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String duty() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dutyAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer dutyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
   * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
   * Constraints: No constraints specified.
   */
  public String dutyTeleFreqNums(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int dutyTeleFreqNumsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public StringVector dutyTeleFreqNumsVector() { return dutyTeleFreqNumsVector(new StringVector()); }
  public StringVector dutyTeleFreqNumsVector(StringVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String multiDutyVoiceCoord(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int multiDutyVoiceCoordLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector multiDutyVoiceCoordVector() { return multiDutyVoiceCoordVector(new StringVector()); }
  public StringVector multiDutyVoiceCoordVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDataLinkMultiDuty_Ingest(FlatBufferBuilder builder,
      int unitDesOffset,
      int nameOffset,
      int rankOffset,
      int dutyOffset,
      int dutyTeleFreqNumsOffset,
      int multiDutyVoiceCoordOffset) {
    builder.startTable(6);
    DataLinkMultiDuty_Ingest.addMultiDutyVoiceCoord(builder, multiDutyVoiceCoordOffset);
    DataLinkMultiDuty_Ingest.addDutyTeleFreqNums(builder, dutyTeleFreqNumsOffset);
    DataLinkMultiDuty_Ingest.addDuty(builder, dutyOffset);
    DataLinkMultiDuty_Ingest.addRank(builder, rankOffset);
    DataLinkMultiDuty_Ingest.addName(builder, nameOffset);
    DataLinkMultiDuty_Ingest.addUnitDes(builder, unitDesOffset);
    return DataLinkMultiDuty_Ingest.endDataLinkMultiDuty_Ingest(builder);
  }

  public static void startDataLinkMultiDuty_Ingest(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addUnitDes(FlatBufferBuilder builder, int unitDesOffset) { builder.addOffset(0, unitDesOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addRank(FlatBufferBuilder builder, int rankOffset) { builder.addOffset(2, rankOffset, 0); }
  public static void addDuty(FlatBufferBuilder builder, int dutyOffset) { builder.addOffset(3, dutyOffset, 0); }
  public static void addDutyTeleFreqNums(FlatBufferBuilder builder, int dutyTeleFreqNumsOffset) { builder.addOffset(4, dutyTeleFreqNumsOffset, 0); }
  public static int createDutyTeleFreqNumsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDutyTeleFreqNumsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMultiDutyVoiceCoord(FlatBufferBuilder builder, int multiDutyVoiceCoordOffset) { builder.addOffset(5, multiDutyVoiceCoordOffset, 0); }
  public static int createMultiDutyVoiceCoordVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMultiDutyVoiceCoordVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDataLinkMultiDuty_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDataLinkMultiDuty_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DATA"); }
  public static void finishSizePrefixedDataLinkMultiDuty_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DATA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataLinkMultiDuty_Ingest get(int j) { return get(new DataLinkMultiDuty_Ingest(), j); }
    public DataLinkMultiDuty_Ingest get(DataLinkMultiDuty_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

