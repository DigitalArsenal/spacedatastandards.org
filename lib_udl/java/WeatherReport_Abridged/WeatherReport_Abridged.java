// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// These services provide for posting and querying Weather Over Target information. The information contained within describes the current weather conditions over a target area or region to include navigational considerations such as altimeter settings, visibility, cloud heights etc.
 */
@SuppressWarnings("unused")
public final class WeatherReport_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static WeatherReport_Abridged getRootAsWeatherReport_Abridged(ByteBuffer _bb) { return getRootAsWeatherReport_Abridged(_bb, new WeatherReport_Abridged()); }
  public static WeatherReport_Abridged getRootAsWeatherReport_Abridged(ByteBuffer _bb, WeatherReport_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean WeatherReport_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "WEAT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WeatherReport_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: WEATHER-REPORT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the sensor making the weather measurement.
   * Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Identifier of the weather over target, which should remain the same on subsequent Weather Over Target records.
   * Example: /// Example: WEATHER-ID
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String weatherId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer weatherIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer weatherIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Identifier of the ground imagery associated for this weather over target report.
   * Example: /// Example: GROUND-IMAGERY-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idGroundImagery() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idGroundImageryAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idGroundImageryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Identifier of the Site that is associated with this weather report.
   * Example: /// Example: AIRFIELD-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSite() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSiteAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idSiteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Identifier of the Airfield associated with this weather report.
   * Example: /// Example: 8fb38d6d-a3de-45dd-8974-4e3ed73e9449
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAirfield() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAirfieldAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer idAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield associated with this weather report.
   * Example: /// Example: KAFF
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String icao() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer icaoAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer icaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Optional observation or forecast ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: GDSSMB022408301601304517
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Optional location ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: TMDS060AD4OG03CC
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalLocationId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalLocationIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer externalLocationIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Identifies the type of weather report (e.g. OBSERVATION, FORECAST, etc.).
   * Example: /// Example: FORECAST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String reportType() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reportTypeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer reportTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Datetime when a weather observation was made or forecast was issued in ISO 8601 UTC datetime format with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Valid start time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
   * Example: /// Example: 2024-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String forecastStartTime() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer forecastStartTimeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer forecastStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Valid end time of a weather forecast in ISO 8601 UTC datetime format with millisecond precision.
   * Example: /// Example: 2024-01-01T18:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String forecastEndTime() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer forecastEndTimeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer forecastEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The central WGS-84 latitude of the weather report, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 56.12
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The central WGS-84 longitude of the weather report, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -156.6
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Point height above ellipsoid (WGS-84), in meters.
   * Example: /// Example: 123.12
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Altitude of a pressure surface in the atmosphere above mean sea level, in meters.
   * Example: /// Example: 1000.0
   * Constraints: No constraints specified.
   */
  public double geoPotentialAlt() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Specific pressures or heights where measurements are taken, labeled as either MANDATORY or SIGNIFICANT levels. Mandatory levels are at particular pressures at geopotential heights. Significant levels are at particular geometric heights.
   * Example: /// Example: MANDATORY
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String dataLevel() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dataLevelAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer dataLevelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String atext() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atextAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer atextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: No constraints specified.
   */
  public String agjson() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agjsonAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer agjsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Type of region as projected on the ground.
   * Example: /// Example: ST_Polygon
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String atype() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atypeAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer atypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int andims() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 4326
   * Constraints: No constraints specified.
   */
  public int asrid() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Expresses the speed of the wind in meters/second.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double windSpd() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average wind speed over a 1 minute period, in meters/second.
   * Example: /// Example: 12.1
   * Constraints: No constraints specified.
   */
  public double windSpdAvg() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Expresses the max gust speed of the wind, in meters/second.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double windGust() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Expresses the max gust speed of the wind recorded in a 10 minute period, in meters/second.
   * Example: /// Example: 13.2
   * Constraints: No constraints specified.
   */
  public double windGust10() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The change in wind speed between two different altitudes divided by the vertical distance between them, in units of 1/sec.
   * Example: /// Example: 3.8
   * Constraints: No constraints specified.
   */
  public double vshear() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The change in wind speed between two different lateral positions at a given altitude divided by the horizontal distance between them, in units of 1/sec.
   * Example: /// Example: 3.8
   * Constraints: No constraints specified.
   */
  public double hshear() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average radial velocity of wind as measured by radar with multi-beam configurations. Radial velocity is the component of wind velocity moving directly toward or away from a sensor's radar beam, in meters per second. Values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar).
   * Example: /// Example: -0.04
   * Constraints: No constraints specified.
   */
  public double radVel() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Component of wind velocity moving directly toward or away from radar beam 1, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
   * Example: /// Example: 4.4
   * Constraints: No constraints specified.
   */
  public double radVelBeam1() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Component of wind velocity moving directly toward or away from radar beam 2, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
   * Example: /// Example: -0.2
   * Constraints: No constraints specified.
   */
  public double radVelBeam2() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Component of wind velocity moving directly toward or away from radar beam 3, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
   * Example: /// Example: -0.2
   * Constraints: No constraints specified.
   */
  public double radVelBeam3() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Component of wind velocity moving directly toward or away from radar beam 4, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
   * Example: /// Example: 11.4
   * Constraints: No constraints specified.
   */
  public double radVelBeam4() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Component of wind velocity moving directly toward or away from radar beam 5, in meters per second. Radial velocity values can either be positive (wind is moving away from the radar) or negative (wind is moving toward the radar). The beam number designation is defined by the data source.
   * Example: /// Example: 4.1
   * Constraints: No constraints specified.
   */
  public double radVelBeam5() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Direction the wind is blowing, in degrees clockwise from true north.
   * Example: /// Example: 75.1234
   * Constraints: No constraints specified.
   */
  public double windDir() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average wind direction over a 1 minute period, in degrees clockwise from true north.
   * Example: /// Example: 57.1
   * Constraints: No constraints specified.
   */
  public double windDirAvg() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Wind direction corresponding to the peak wind speed during a 1 minute period, in degrees clockwise from true north.
   * Example: /// Example: 78.4
   * Constraints: No constraints specified.
   */
  public double windDirPeak() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Wind direction corresponding to the peak wind speed during a 10 minute period, in degrees clockwise from true north.
   * Example: /// Example: 44.5
   * Constraints: No constraints specified.
   */
  public double windDirPeak10() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The perceived temperature in degrees C.
   * Example: /// Example: 15.6
   * Constraints: No constraints specified.
   */
  public double windChill() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The difference in wind direction recorded over a period of time, in degrees.
   * Example: /// Example: 9.1
   * Constraints: No constraints specified.
   */
  public double dirDev() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean describing whether or not the wind direction and/or speed is variable.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean windVar() { int o = __offset(90); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Covariance matrix, in knots and second based units.  The array values represent the lower triangular half of the covariance matrix. The size of the covariance matrix is 2x2.  The covariance elements are position dependent within the array with values ordered as follows:
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y
   * x&nbsp;&nbsp;&nbsp;&nbsp;1
   * y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
   * The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
   * Example: /// Example: [1.1, 2.2]
   * Constraints: No constraints specified.
   */
  public String windCov(int j) { int o = __offset(92); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int windCovLength() { int o = __offset(92); return o != 0 ? __vector_len(o) : 0; }
  public StringVector windCovVector() { return windCovVector(new StringVector()); }
  public StringVector windCovVector(StringVector obj) { int o = __offset(92); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of cloud cover descriptions - each element can be maximum of 16 characters long. Intended as, but not constrained to, MIL-STD-6016 cloud cover designations (e.g. SKY CLEAR, SCATTERED, BROKEN, OVERCAST, SKY OBSCURED). Each element of the array corresponds to the elements in the cloudHght array specified respectively.
   * Example: /// Example: ['OVERCAST', 'BROKEN']
   * Constraints: No constraints specified.
   */
  public String cloudCover(int j) { int o = __offset(94); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int cloudCoverLength() { int o = __offset(94); return o != 0 ? __vector_len(o) : 0; }
  public StringVector cloudCoverVector() { return cloudCoverVector(new StringVector()); }
  public StringVector cloudCoverVector(StringVector obj) { int o = __offset(94); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of cloud base heights in meters described by the cloudHght array. Each element of the array corresponds to the elements in the cloudCover array specified respectively.
   * Example: /// Example: [1.2, 2.2]
   * Constraints: No constraints specified.
   */
  public String cloudHght(int j) { int o = __offset(96); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int cloudHghtLength() { int o = __offset(96); return o != 0 ? __vector_len(o) : 0; }
  public StringVector cloudHghtVector() { return cloudHghtVector(new StringVector()); }
  public StringVector cloudHghtVector(StringVector obj) { int o = __offset(96); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Describes the actual weather at position. Intended as, but not constrained to, MIL-STD-6016 actual weather (e.g. NO STATEMENT, NO SIGNIFICANT WEATHER, DRIZZLE, RAIN, SNOW, SNOW GRAINS, DIAMOND DUST, ICE PELLETS, HAIL, SMALL HAIL, MIST, FOG, SMOKE, VOLCANIC ASH, WIDESPREAD DUST, SAND, HAZE, WELL DEVELOPED DUST, SQUALLS, FUNNEL CLOUDS, SANDSTORM, DUSTSTORM, LOW CLOUDS, CLOUDY, GROUND FOG, DUST, HEAVY RAIN, THUNDERSTORMS AWT, HEAVY THUNDERSTORMS, HURRICANE TYPHOON CYCLONE, TROPICAL STORM, TORNADO, HIGH WINDS, LIGHTNING, FREEZING DRIZZLE, FREEZING RAIN, HEAVY SNOW, ICING, SNOW OR RAIN AND SNOW MIXED, SHOWERS, CLEAR).
   * Example: /// Example: NO STATEMENT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String actWeather() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actWeatherAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer actWeatherInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Used in conjunction with actWeather and weatherInt. Intended as, but not constrained to, MIL-STD-6016 actual weather descriptor (e.g. NO STATEMENT, SHALLOW, PATCHES, LOW DRIFTING, BLOWING, SHOWERS, THUNDERSTORMS, SUPERCOOLED).
   * Example: /// Example: NO STATEMENT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String weatherDesc() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer weatherDescAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer weatherDescInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Weather Intensity. Used in conjunction with actWeather and weatherDesc. Intended as, but not constrained to, MIL-STD-6016 weather intensity (e.g. NO STATEMENT, LIGHT, MODERATE, HEAVY, IN VICINITY).
   * Example: /// Example: NO STATEMENT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String weatherInt() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer weatherIntAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer weatherIntInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * The Raw Meteorological Aerodrome Report (METAR) string.
   * Example: /// Example: KXYZ 241456Z 19012G20KT 10SM FEW120 SCT200 BKN250 26/M04 A2981 RMK AO2 PK WND 19026/1420 SLP068 T02611039 51015
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String rawMetar() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawMetarAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer rawMetarInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Terminal Aerodrome Forecast (TAF) containing detailed weather predictions for a specific airport or aerodrome.
   * Example: /// Example: KXYZ 051730Z 0518/0624 31008KT 3SM -SHRA BKN020 FM052300 30006KT 5SM -SHRA OVC030 PROB30 0604/0606 VRB20G35KT 1SM TSRA BKN015CB FM060600 25010KT 4SM -SHRA OVC050 TEMPO 0608/0611 2SM -SHRA OVC030 RMK NXT FCST BY 00Z=
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String rawTaf() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawTafAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer rawTafInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * Altimeter set to read zero at mean sea level in kilopascals.
   * Example: /// Example: 1234.456
   * Constraints: No constraints specified.
   */
  public double qnh() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Visual distance in meters.
   * Example: /// Example: 1234.456
   * Constraints: No constraints specified.
   */
  public double visibility() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The measurement of air temperature in degrees C.
   * Example: /// Example: 23.45
   * Constraints: No constraints specified.
   */
  public double temperature() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The measurement of soil temperature in degrees C.
   * Example: /// Example: 22.4
   * Constraints: No constraints specified.
   */
  public double soilTemp() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The measurement of air pressure in the atmosphere in kilopascals.
   * Example: /// Example: 101.2
   * Constraints: No constraints specified.
   */
  public double barPress() { int o = __offset(116); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The speed at which water is being applied to a specific area in millimeters per hour.
   * Example: /// Example: 3.4
   * Constraints: No constraints specified.
   */
  public double precipRate() { int o = __offset(118); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of rain that has fallen in the past hour, in centimeters.
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double rainHour() { int o = __offset(120); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The power per unit area received from the Sun in the form of electromagnetic radiation as measured in the wavelength range of the measuring instrument. The solar irradiance is measured in watt per square meter (W/m2).
   * Example: /// Example: 1234.456
   * Constraints: No constraints specified.
   */
  public double solarRad() { int o = __offset(122); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of radiation that reaches earth's surface after being scattered by the atmosphere, in Watts per square meter.
   * Example: /// Example: 234.5
   * Constraints: No constraints specified.
   */
  public double difRad() { int o = __offset(124); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of radiation that changes direction as a function of atmospheric density, in Watts per square meter.
   * Example: /// Example: 56.7
   * Constraints: No constraints specified.
   */
  public double refRad() { int o = __offset(126); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 latitude at obTime in degrees. -90 to 90 degrees (negative values south of equator). This includes pilot reports or other means of weather observation.
   * Example: /// Example: 12.456
   * Constraints: No constraints specified.
   */
  public double senlat() { int o = __offset(128); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 longitude at obTime in degrees. -180 to 180 degrees (negative values west of Prime Meridian). This includes pilot reports or other means of weather observation.
   * Example: /// Example: 123.456
   * Constraints: No constraints specified.
   */
  public double senlon() { int o = __offset(130); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude at obTime in km. This includes pilot reports or other means of weather observation.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(132); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The temperature at which air is saturated with water vapor, in degrees C.
   * Example: /// Example: 15.6
   * Constraints: No constraints specified.
   */
  public double dewPoint() { int o = __offset(134); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The percentage of water vapor in the atmosphere.
   * Example: /// Example: 34.456
   * Constraints: No constraints specified.
   */
  public double relHumidity() { int o = __offset(136); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * An indication of how much the atmosphere refracts light.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double indexRefraction() { int o = __offset(138); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The volumetric percentage of soil water contained in a given volume of soil.
   * Example: /// Example: 3.5
   * Constraints: No constraints specified.
   */
  public double soilMoisture() { int o = __offset(140); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Describes in which direction (if any) that better weather conditions exist. Intended as, but not constrained to, MIL-STD-6016 surrounding weather designations (e.g. NO STATEMENT, BETTER TO NORTH, BETTER TO EAST, BETTER TO SOUTH, BETTER TO WEST).
   * Example: /// Example: NO STATEMENT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String surroundingWeather() { int o = __offset(142); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer surroundingWeatherAsByteBuffer() { return __vector_as_bytebuffer(142, 1); }
  public ByteBuffer surroundingWeatherInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 142, 1); }
  /**
   * Amplifies the actual weather being reported. Intended as, but not constrained to, MIL-STD-6016 weather amplification designations (e.g. NO STATEMENT, NO SCATTERED BROKEN MEDIUM CLOUD, SCATTERED BROKEN MEDIUM CLOUDS, GUSTY WINDS AT SERVICE, FOG IN VALLEYS, HIGHER TERRAIN OBSCURED, SURFACE CONDITIONS VARIABLE, SURFACE WIND NE, SURFACE WIND SE, SURFACE WIND SW, SURFACE WIND NW, PRESENCE OF CUMULONIMBUS).
   * Example: /// Example: NO STATEMENT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String weatherAmp() { int o = __offset(144); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer weatherAmpAsByteBuffer() { return __vector_as_bytebuffer(144, 1); }
  public ByteBuffer weatherAmpInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 144, 1); }
  /**
   * Reports the lowest altitude at which contrails are occurring, in meters.
   * Example: /// Example: 123.123
   * Constraints: No constraints specified.
   */
  public double contrailHghtLower() { int o = __offset(146); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Reports the highest altitude at which contrails are occurring, in meters.
   * Example: /// Example: 123.123
   * Constraints: No constraints specified.
   */
  public double contrailHghtUpper() { int o = __offset(148); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Reports the highest altitude at which icing or freezing rain is occurring, in meters.
   * Example: /// Example: 123.123
   * Constraints: No constraints specified.
   */
  public double icingUpperLimit() { int o = __offset(150); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Reports the lowest altitude at which icing or freezing rain is occurring, in meters.
   * Example: /// Example: 123.123
   * Constraints: No constraints specified.
   */
  public double icingLowerLimit() { int o = __offset(152); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Describes the flight conditions in route to the target  (NO STATEMENT, MAINLY IFR, MAINLY VFR, THUNDERSTORMS).
   * MAINLY IFR:&nbsp;&nbsp;Predominantly Instrument Flight Rules.
   * MAINLY VFR:&nbsp;&nbsp;Predominantly Visual Flight Rules.
   * THUNDERSTORMS:&nbsp;&nbsp;Thunderstorms expected in route.
   * Example: /// Example: THUNDERSTORMS
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String enRouteWeather() { int o = __offset(154); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer enRouteWeatherAsByteBuffer() { return __vector_as_bytebuffer(154, 1); }
  public ByteBuffer enRouteWeatherInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 154, 1); }
  /**
   * Flag indicating detection of a cloud-to-cloud lightning event.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean ccEvent() { int o = __offset(156); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Array of UDL record types (SENSOR, WEATHERDATA) that are related to this WeatherReport record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['SENSOR', 'WEATHERDATA']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(158); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(158); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(158); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUID(s) of the UDL data record(s) that are related to this WeatherReport record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
   * Example: /// Example: ['e609a90d-4059-4043-9f1a-fd7b49a3e1d0', 'c739fcdb-c0c9-43c0-97b6-bfc80d0ffd52']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(160); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(160); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(160); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(162); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(162, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 162, 1); }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(164); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(164, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 164, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(166); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(166, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 166, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(168); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(168, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 168, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(170); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(170, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 170, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(172); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createWeatherReport_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int weatherIdOffset,
      int idGroundImageryOffset,
      int idSiteOffset,
      int idAirfieldOffset,
      int icaoOffset,
      int externalIdOffset,
      int externalLocationIdOffset,
      int reportTypeOffset,
      int obTimeOffset,
      int forecastStartTimeOffset,
      int forecastEndTimeOffset,
      double lat,
      double lon,
      double alt,
      double geoPotentialAlt,
      int dataLevelOffset,
      int atextOffset,
      int agjsonOffset,
      int atypeOffset,
      int andims,
      int asrid,
      double windSpd,
      double windSpdAvg,
      double windGust,
      double windGust10,
      double vshear,
      double hshear,
      double radVel,
      double radVelBeam1,
      double radVelBeam2,
      double radVelBeam3,
      double radVelBeam4,
      double radVelBeam5,
      double windDir,
      double windDirAvg,
      double windDirPeak,
      double windDirPeak10,
      double windChill,
      double dirDev,
      boolean windVar,
      int windCovOffset,
      int cloudCoverOffset,
      int cloudHghtOffset,
      int actWeatherOffset,
      int weatherDescOffset,
      int weatherIntOffset,
      int rawMetarOffset,
      int rawTafOffset,
      double qnh,
      double visibility,
      double temperature,
      double soilTemp,
      double barPress,
      double precipRate,
      double rainHour,
      double solarRad,
      double difRad,
      double refRad,
      double senlat,
      double senlon,
      double senalt,
      double dewPoint,
      double relHumidity,
      double indexRefraction,
      double soilMoisture,
      int surroundingWeatherOffset,
      int weatherAmpOffset,
      double contrailHghtLower,
      double contrailHghtUpper,
      double icingUpperLimit,
      double icingLowerLimit,
      int enRouteWeatherOffset,
      boolean ccEvent,
      int srcTypsOffset,
      int srcIdsOffset,
      int origNetworkOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode) {
    builder.startTable(85);
    WeatherReport_Abridged.addIcingLowerLimit(builder, icingLowerLimit);
    WeatherReport_Abridged.addIcingUpperLimit(builder, icingUpperLimit);
    WeatherReport_Abridged.addContrailHghtUpper(builder, contrailHghtUpper);
    WeatherReport_Abridged.addContrailHghtLower(builder, contrailHghtLower);
    WeatherReport_Abridged.addSoilMoisture(builder, soilMoisture);
    WeatherReport_Abridged.addIndexRefraction(builder, indexRefraction);
    WeatherReport_Abridged.addRelHumidity(builder, relHumidity);
    WeatherReport_Abridged.addDewPoint(builder, dewPoint);
    WeatherReport_Abridged.addSenalt(builder, senalt);
    WeatherReport_Abridged.addSenlon(builder, senlon);
    WeatherReport_Abridged.addSenlat(builder, senlat);
    WeatherReport_Abridged.addRefRad(builder, refRad);
    WeatherReport_Abridged.addDifRad(builder, difRad);
    WeatherReport_Abridged.addSolarRad(builder, solarRad);
    WeatherReport_Abridged.addRainHour(builder, rainHour);
    WeatherReport_Abridged.addPrecipRate(builder, precipRate);
    WeatherReport_Abridged.addBarPress(builder, barPress);
    WeatherReport_Abridged.addSoilTemp(builder, soilTemp);
    WeatherReport_Abridged.addTemperature(builder, temperature);
    WeatherReport_Abridged.addVisibility(builder, visibility);
    WeatherReport_Abridged.addQnh(builder, qnh);
    WeatherReport_Abridged.addDirDev(builder, dirDev);
    WeatherReport_Abridged.addWindChill(builder, windChill);
    WeatherReport_Abridged.addWindDirPeak10(builder, windDirPeak10);
    WeatherReport_Abridged.addWindDirPeak(builder, windDirPeak);
    WeatherReport_Abridged.addWindDirAvg(builder, windDirAvg);
    WeatherReport_Abridged.addWindDir(builder, windDir);
    WeatherReport_Abridged.addRadVelBeam5(builder, radVelBeam5);
    WeatherReport_Abridged.addRadVelBeam4(builder, radVelBeam4);
    WeatherReport_Abridged.addRadVelBeam3(builder, radVelBeam3);
    WeatherReport_Abridged.addRadVelBeam2(builder, radVelBeam2);
    WeatherReport_Abridged.addRadVelBeam1(builder, radVelBeam1);
    WeatherReport_Abridged.addRadVel(builder, radVel);
    WeatherReport_Abridged.addHshear(builder, hshear);
    WeatherReport_Abridged.addVshear(builder, vshear);
    WeatherReport_Abridged.addWindGust10(builder, windGust10);
    WeatherReport_Abridged.addWindGust(builder, windGust);
    WeatherReport_Abridged.addWindSpdAvg(builder, windSpdAvg);
    WeatherReport_Abridged.addWindSpd(builder, windSpd);
    WeatherReport_Abridged.addGeoPotentialAlt(builder, geoPotentialAlt);
    WeatherReport_Abridged.addAlt(builder, alt);
    WeatherReport_Abridged.addLon(builder, lon);
    WeatherReport_Abridged.addLat(builder, lat);
    WeatherReport_Abridged.addOrigin(builder, originOffset);
    WeatherReport_Abridged.addSource(builder, sourceOffset);
    WeatherReport_Abridged.addCreatedBy(builder, createdByOffset);
    WeatherReport_Abridged.addCreatedAt(builder, createdAtOffset);
    WeatherReport_Abridged.addOrigNetwork(builder, origNetworkOffset);
    WeatherReport_Abridged.addSrcIds(builder, srcIdsOffset);
    WeatherReport_Abridged.addSrcTyps(builder, srcTypsOffset);
    WeatherReport_Abridged.addEnRouteWeather(builder, enRouteWeatherOffset);
    WeatherReport_Abridged.addWeatherAmp(builder, weatherAmpOffset);
    WeatherReport_Abridged.addSurroundingWeather(builder, surroundingWeatherOffset);
    WeatherReport_Abridged.addRawTaf(builder, rawTafOffset);
    WeatherReport_Abridged.addRawMetar(builder, rawMetarOffset);
    WeatherReport_Abridged.addWeatherInt(builder, weatherIntOffset);
    WeatherReport_Abridged.addWeatherDesc(builder, weatherDescOffset);
    WeatherReport_Abridged.addActWeather(builder, actWeatherOffset);
    WeatherReport_Abridged.addCloudHght(builder, cloudHghtOffset);
    WeatherReport_Abridged.addCloudCover(builder, cloudCoverOffset);
    WeatherReport_Abridged.addWindCov(builder, windCovOffset);
    WeatherReport_Abridged.addAsrid(builder, asrid);
    WeatherReport_Abridged.addAndims(builder, andims);
    WeatherReport_Abridged.addAtype(builder, atypeOffset);
    WeatherReport_Abridged.addAgjson(builder, agjsonOffset);
    WeatherReport_Abridged.addAtext(builder, atextOffset);
    WeatherReport_Abridged.addDataLevel(builder, dataLevelOffset);
    WeatherReport_Abridged.addForecastEndTime(builder, forecastEndTimeOffset);
    WeatherReport_Abridged.addForecastStartTime(builder, forecastStartTimeOffset);
    WeatherReport_Abridged.addObTime(builder, obTimeOffset);
    WeatherReport_Abridged.addReportType(builder, reportTypeOffset);
    WeatherReport_Abridged.addExternalLocationId(builder, externalLocationIdOffset);
    WeatherReport_Abridged.addExternalId(builder, externalIdOffset);
    WeatherReport_Abridged.addIcao(builder, icaoOffset);
    WeatherReport_Abridged.addIdAirfield(builder, idAirfieldOffset);
    WeatherReport_Abridged.addIdSite(builder, idSiteOffset);
    WeatherReport_Abridged.addIdGroundImagery(builder, idGroundImageryOffset);
    WeatherReport_Abridged.addWeatherId(builder, weatherIdOffset);
    WeatherReport_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    WeatherReport_Abridged.addIdSensor(builder, idSensorOffset);
    WeatherReport_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    WeatherReport_Abridged.addId(builder, idOffset);
    WeatherReport_Abridged.addDataMode(builder, dataMode);
    WeatherReport_Abridged.addCcEvent(builder, ccEvent);
    WeatherReport_Abridged.addWindVar(builder, windVar);
    return WeatherReport_Abridged.endWeatherReport_Abridged(builder);
  }

  public static void startWeatherReport_Abridged(FlatBufferBuilder builder) { builder.startTable(85); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(2, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(3, origSensorIdOffset, 0); }
  public static void addWeatherId(FlatBufferBuilder builder, int weatherIdOffset) { builder.addOffset(4, weatherIdOffset, 0); }
  public static void addIdGroundImagery(FlatBufferBuilder builder, int idGroundImageryOffset) { builder.addOffset(5, idGroundImageryOffset, 0); }
  public static void addIdSite(FlatBufferBuilder builder, int idSiteOffset) { builder.addOffset(6, idSiteOffset, 0); }
  public static void addIdAirfield(FlatBufferBuilder builder, int idAirfieldOffset) { builder.addOffset(7, idAirfieldOffset, 0); }
  public static void addIcao(FlatBufferBuilder builder, int icaoOffset) { builder.addOffset(8, icaoOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(9, externalIdOffset, 0); }
  public static void addExternalLocationId(FlatBufferBuilder builder, int externalLocationIdOffset) { builder.addOffset(10, externalLocationIdOffset, 0); }
  public static void addReportType(FlatBufferBuilder builder, int reportTypeOffset) { builder.addOffset(11, reportTypeOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(12, obTimeOffset, 0); }
  public static void addForecastStartTime(FlatBufferBuilder builder, int forecastStartTimeOffset) { builder.addOffset(13, forecastStartTimeOffset, 0); }
  public static void addForecastEndTime(FlatBufferBuilder builder, int forecastEndTimeOffset) { builder.addOffset(14, forecastEndTimeOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(15, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(16, lon, 0.0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(17, alt, 0.0); }
  public static void addGeoPotentialAlt(FlatBufferBuilder builder, double geoPotentialAlt) { builder.addDouble(18, geoPotentialAlt, 0.0); }
  public static void addDataLevel(FlatBufferBuilder builder, int dataLevelOffset) { builder.addOffset(19, dataLevelOffset, 0); }
  public static void addAtext(FlatBufferBuilder builder, int atextOffset) { builder.addOffset(20, atextOffset, 0); }
  public static void addAgjson(FlatBufferBuilder builder, int agjsonOffset) { builder.addOffset(21, agjsonOffset, 0); }
  public static void addAtype(FlatBufferBuilder builder, int atypeOffset) { builder.addOffset(22, atypeOffset, 0); }
  public static void addAndims(FlatBufferBuilder builder, int andims) { builder.addInt(23, andims, 0); }
  public static void addAsrid(FlatBufferBuilder builder, int asrid) { builder.addInt(24, asrid, 0); }
  public static void addWindSpd(FlatBufferBuilder builder, double windSpd) { builder.addDouble(25, windSpd, 0.0); }
  public static void addWindSpdAvg(FlatBufferBuilder builder, double windSpdAvg) { builder.addDouble(26, windSpdAvg, 0.0); }
  public static void addWindGust(FlatBufferBuilder builder, double windGust) { builder.addDouble(27, windGust, 0.0); }
  public static void addWindGust10(FlatBufferBuilder builder, double windGust10) { builder.addDouble(28, windGust10, 0.0); }
  public static void addVshear(FlatBufferBuilder builder, double vshear) { builder.addDouble(29, vshear, 0.0); }
  public static void addHshear(FlatBufferBuilder builder, double hshear) { builder.addDouble(30, hshear, 0.0); }
  public static void addRadVel(FlatBufferBuilder builder, double radVel) { builder.addDouble(31, radVel, 0.0); }
  public static void addRadVelBeam1(FlatBufferBuilder builder, double radVelBeam1) { builder.addDouble(32, radVelBeam1, 0.0); }
  public static void addRadVelBeam2(FlatBufferBuilder builder, double radVelBeam2) { builder.addDouble(33, radVelBeam2, 0.0); }
  public static void addRadVelBeam3(FlatBufferBuilder builder, double radVelBeam3) { builder.addDouble(34, radVelBeam3, 0.0); }
  public static void addRadVelBeam4(FlatBufferBuilder builder, double radVelBeam4) { builder.addDouble(35, radVelBeam4, 0.0); }
  public static void addRadVelBeam5(FlatBufferBuilder builder, double radVelBeam5) { builder.addDouble(36, radVelBeam5, 0.0); }
  public static void addWindDir(FlatBufferBuilder builder, double windDir) { builder.addDouble(37, windDir, 0.0); }
  public static void addWindDirAvg(FlatBufferBuilder builder, double windDirAvg) { builder.addDouble(38, windDirAvg, 0.0); }
  public static void addWindDirPeak(FlatBufferBuilder builder, double windDirPeak) { builder.addDouble(39, windDirPeak, 0.0); }
  public static void addWindDirPeak10(FlatBufferBuilder builder, double windDirPeak10) { builder.addDouble(40, windDirPeak10, 0.0); }
  public static void addWindChill(FlatBufferBuilder builder, double windChill) { builder.addDouble(41, windChill, 0.0); }
  public static void addDirDev(FlatBufferBuilder builder, double dirDev) { builder.addDouble(42, dirDev, 0.0); }
  public static void addWindVar(FlatBufferBuilder builder, boolean windVar) { builder.addBoolean(43, windVar, false); }
  public static void addWindCov(FlatBufferBuilder builder, int windCovOffset) { builder.addOffset(44, windCovOffset, 0); }
  public static int createWindCovVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startWindCovVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCloudCover(FlatBufferBuilder builder, int cloudCoverOffset) { builder.addOffset(45, cloudCoverOffset, 0); }
  public static int createCloudCoverVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCloudCoverVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCloudHght(FlatBufferBuilder builder, int cloudHghtOffset) { builder.addOffset(46, cloudHghtOffset, 0); }
  public static int createCloudHghtVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCloudHghtVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addActWeather(FlatBufferBuilder builder, int actWeatherOffset) { builder.addOffset(47, actWeatherOffset, 0); }
  public static void addWeatherDesc(FlatBufferBuilder builder, int weatherDescOffset) { builder.addOffset(48, weatherDescOffset, 0); }
  public static void addWeatherInt(FlatBufferBuilder builder, int weatherIntOffset) { builder.addOffset(49, weatherIntOffset, 0); }
  public static void addRawMetar(FlatBufferBuilder builder, int rawMetarOffset) { builder.addOffset(50, rawMetarOffset, 0); }
  public static void addRawTaf(FlatBufferBuilder builder, int rawTafOffset) { builder.addOffset(51, rawTafOffset, 0); }
  public static void addQnh(FlatBufferBuilder builder, double qnh) { builder.addDouble(52, qnh, 0.0); }
  public static void addVisibility(FlatBufferBuilder builder, double visibility) { builder.addDouble(53, visibility, 0.0); }
  public static void addTemperature(FlatBufferBuilder builder, double temperature) { builder.addDouble(54, temperature, 0.0); }
  public static void addSoilTemp(FlatBufferBuilder builder, double soilTemp) { builder.addDouble(55, soilTemp, 0.0); }
  public static void addBarPress(FlatBufferBuilder builder, double barPress) { builder.addDouble(56, barPress, 0.0); }
  public static void addPrecipRate(FlatBufferBuilder builder, double precipRate) { builder.addDouble(57, precipRate, 0.0); }
  public static void addRainHour(FlatBufferBuilder builder, double rainHour) { builder.addDouble(58, rainHour, 0.0); }
  public static void addSolarRad(FlatBufferBuilder builder, double solarRad) { builder.addDouble(59, solarRad, 0.0); }
  public static void addDifRad(FlatBufferBuilder builder, double difRad) { builder.addDouble(60, difRad, 0.0); }
  public static void addRefRad(FlatBufferBuilder builder, double refRad) { builder.addDouble(61, refRad, 0.0); }
  public static void addSenlat(FlatBufferBuilder builder, double senlat) { builder.addDouble(62, senlat, 0.0); }
  public static void addSenlon(FlatBufferBuilder builder, double senlon) { builder.addDouble(63, senlon, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(64, senalt, 0.0); }
  public static void addDewPoint(FlatBufferBuilder builder, double dewPoint) { builder.addDouble(65, dewPoint, 0.0); }
  public static void addRelHumidity(FlatBufferBuilder builder, double relHumidity) { builder.addDouble(66, relHumidity, 0.0); }
  public static void addIndexRefraction(FlatBufferBuilder builder, double indexRefraction) { builder.addDouble(67, indexRefraction, 0.0); }
  public static void addSoilMoisture(FlatBufferBuilder builder, double soilMoisture) { builder.addDouble(68, soilMoisture, 0.0); }
  public static void addSurroundingWeather(FlatBufferBuilder builder, int surroundingWeatherOffset) { builder.addOffset(69, surroundingWeatherOffset, 0); }
  public static void addWeatherAmp(FlatBufferBuilder builder, int weatherAmpOffset) { builder.addOffset(70, weatherAmpOffset, 0); }
  public static void addContrailHghtLower(FlatBufferBuilder builder, double contrailHghtLower) { builder.addDouble(71, contrailHghtLower, 0.0); }
  public static void addContrailHghtUpper(FlatBufferBuilder builder, double contrailHghtUpper) { builder.addDouble(72, contrailHghtUpper, 0.0); }
  public static void addIcingUpperLimit(FlatBufferBuilder builder, double icingUpperLimit) { builder.addDouble(73, icingUpperLimit, 0.0); }
  public static void addIcingLowerLimit(FlatBufferBuilder builder, double icingLowerLimit) { builder.addDouble(74, icingLowerLimit, 0.0); }
  public static void addEnRouteWeather(FlatBufferBuilder builder, int enRouteWeatherOffset) { builder.addOffset(75, enRouteWeatherOffset, 0); }
  public static void addCcEvent(FlatBufferBuilder builder, boolean ccEvent) { builder.addBoolean(76, ccEvent, false); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(77, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(78, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(79, origNetworkOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(80, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(81, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(82, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(83, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(84, dataMode, 0); }
  public static int endWeatherReport_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishWeatherReport_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "WEAT"); }
  public static void finishSizePrefixedWeatherReport_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "WEAT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WeatherReport_Abridged get(int j) { return get(new WeatherReport_Abridged(), j); }
    public WeatherReport_Abridged get(WeatherReport_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

