// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
 */
@SuppressWarnings("unused")
public final class Aircraft_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Aircraft_Abridged getRootAsAircraft_Abridged(ByteBuffer _bb) { return getRootAsAircraft_Abridged(_bb, new Aircraft_Abridged()); }
  public static Aircraft_Abridged getRootAsAircraft_Abridged(ByteBuffer _bb, Aircraft_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Aircraft_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Aircraft_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * ID of the parent entity for this aircraft.
   * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idEntity() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEntityAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idEntityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
   * Example: /// Example: E-2C HAWKEYE
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String aircraftMds() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer aircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The tail number of this aircraft.
   * Example: /// Example: N702JG
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tailNumber() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tailNumberAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer tailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Full serial number of the aircraft.
   * Example: /// Example: 7007187
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String serialNumber() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serialNumberAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer serialNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The wing or unit that owns the aircraft.
   * Example: /// Example: 437AW
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String owner() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer ownerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The Air Force major command (MAJCOM) overseeing the aircraft.
   * Example: /// Example: HQACC
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String command() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commandAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer commandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The category of aircraft (e.g. M = Military, C = Commercial).
   * Example: /// Example: M
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String category() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer categoryAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer categoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Military data network data transfer device ID for this aircraft.
   * Example: /// Example: 005
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String dtd() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dtdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer dtdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The cruise speed of the aircraft, in kilometers/hour.
   * Example: /// Example: 915
   * Constraints: No constraints specified.
   */
  public double cruiseSpeed() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The maximum air speed of the aircraft, in kilometers/hour.
   * Example: /// Example: 2655.1
   * Constraints: No constraints specified.
   */
  public double maxSpeed() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
   * Example: /// Example: 1000
   * Constraints: No constraints specified.
   */
  public int minReqRunwayM() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
   * Example: /// Example: 3000
   * Constraints: No constraints specified.
   */
  public int minReqRunwayFt() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The nominal turnaround time for this aircraft, in minutes.
   * Example: /// Example: 500
   * Constraints: No constraints specified.
   */
  public int nominalTatime() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional notes/comments for this aircraft.
   * Example: /// Example: Notes for this aircraft
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public byte dataMode() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }

  public static int createAircraft_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idEntityOffset,
      int aircraftMdsOffset,
      int tailNumberOffset,
      int serialNumberOffset,
      int ownerOffset,
      int commandOffset,
      int categoryOffset,
      int dtdOffset,
      double cruiseSpeed,
      double maxSpeed,
      int minReqRunwayM,
      int minReqRunwayFt,
      int nominalTatime,
      int notesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(23);
    Aircraft_Abridged.addMaxSpeed(builder, maxSpeed);
    Aircraft_Abridged.addCruiseSpeed(builder, cruiseSpeed);
    Aircraft_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Aircraft_Abridged.addOrigin(builder, originOffset);
    Aircraft_Abridged.addSource(builder, sourceOffset);
    Aircraft_Abridged.addSourceDl(builder, sourceDlOffset);
    Aircraft_Abridged.addCreatedBy(builder, createdByOffset);
    Aircraft_Abridged.addCreatedAt(builder, createdAtOffset);
    Aircraft_Abridged.addNotes(builder, notesOffset);
    Aircraft_Abridged.addNominalTatime(builder, nominalTatime);
    Aircraft_Abridged.addMinReqRunwayFt(builder, minReqRunwayFt);
    Aircraft_Abridged.addMinReqRunwayM(builder, minReqRunwayM);
    Aircraft_Abridged.addDtd(builder, dtdOffset);
    Aircraft_Abridged.addCategory(builder, categoryOffset);
    Aircraft_Abridged.addCommand(builder, commandOffset);
    Aircraft_Abridged.addOwner(builder, ownerOffset);
    Aircraft_Abridged.addSerialNumber(builder, serialNumberOffset);
    Aircraft_Abridged.addTailNumber(builder, tailNumberOffset);
    Aircraft_Abridged.addAircraftMds(builder, aircraftMdsOffset);
    Aircraft_Abridged.addIdEntity(builder, idEntityOffset);
    Aircraft_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Aircraft_Abridged.addId(builder, idOffset);
    Aircraft_Abridged.addDataMode(builder, dataMode);
    return Aircraft_Abridged.endAircraft_Abridged(builder);
  }

  public static void startAircraft_Abridged(FlatBufferBuilder builder) { builder.startTable(23); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdEntity(FlatBufferBuilder builder, int idEntityOffset) { builder.addOffset(2, idEntityOffset, 0); }
  public static void addAircraftMds(FlatBufferBuilder builder, int aircraftMdsOffset) { builder.addOffset(3, aircraftMdsOffset, 0); }
  public static void addTailNumber(FlatBufferBuilder builder, int tailNumberOffset) { builder.addOffset(4, tailNumberOffset, 0); }
  public static void addSerialNumber(FlatBufferBuilder builder, int serialNumberOffset) { builder.addOffset(5, serialNumberOffset, 0); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(6, ownerOffset, 0); }
  public static void addCommand(FlatBufferBuilder builder, int commandOffset) { builder.addOffset(7, commandOffset, 0); }
  public static void addCategory(FlatBufferBuilder builder, int categoryOffset) { builder.addOffset(8, categoryOffset, 0); }
  public static void addDtd(FlatBufferBuilder builder, int dtdOffset) { builder.addOffset(9, dtdOffset, 0); }
  public static void addCruiseSpeed(FlatBufferBuilder builder, double cruiseSpeed) { builder.addDouble(10, cruiseSpeed, 0.0); }
  public static void addMaxSpeed(FlatBufferBuilder builder, double maxSpeed) { builder.addDouble(11, maxSpeed, 0.0); }
  public static void addMinReqRunwayM(FlatBufferBuilder builder, int minReqRunwayM) { builder.addInt(12, minReqRunwayM, 0); }
  public static void addMinReqRunwayFt(FlatBufferBuilder builder, int minReqRunwayFt) { builder.addInt(13, minReqRunwayFt, 0); }
  public static void addNominalTatime(FlatBufferBuilder builder, int nominalTatime) { builder.addInt(14, nominalTatime, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(15, notesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(16, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(17, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(18, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(19, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(20, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(21, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(22, origNetworkOffset, 0); }
  public static int endAircraft_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraft_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraft_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Aircraft_Abridged get(int j) { return get(new Aircraft_Abridged(), j); }
    public Aircraft_Abridged get(Aircraft_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

