// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// List of actions associated with this effect response.
 */
@SuppressWarnings("unused")
public final class EffectResponseActionsList_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EffectResponseActionsList_Ingest getRootAsEffectResponseActionsList_Ingest(ByteBuffer _bb) { return getRootAsEffectResponseActionsList_Ingest(_bb, new EffectResponseActionsList_Ingest()); }
  public static EffectResponseActionsList_Ingest getRootAsEffectResponseActionsList_Ingest(ByteBuffer _bb, EffectResponseActionsList_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EffectResponseActionsList_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EFFE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EffectResponseActionsList_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * A summary string describing different aspects of the action.
   * Example: /// Example: Example summary
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String summary() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer summaryAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer summaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of this action.
   * Example: /// Example: ACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String actionId() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionIdAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer actionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The desired start time of this task, in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T00:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String actionStartTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionStartTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer actionStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The desired end time of this task, in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T00:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String actionEndTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionEndTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer actionEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The start time of the asset TOT (time over target), in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T00:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String totStartTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer totStartTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer totStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The end time of the asset TOT (time over target), in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T00:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String totEndTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer totEndTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer totEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
   * Example: /// Example: AIRCRAFT
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String actionActorSrcType() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionActorSrcTypeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer actionActorSrcTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
   * Example: /// Example: ACTIONACTORSRC-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String actionActorSrcId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionActorSrcIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer actionActorSrcIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The type of munition or sensor used by this asset/actor.
   * Example: /// Example: SENSOR1
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String effector() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effectorAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer effectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The source type of the targetId identifier (POI, TRACK).
   * Example: /// Example: POI
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String targetSrcType() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer targetSrcTypeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer targetSrcTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
   * Example: /// Example: TARGETSRC-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String targetSrcId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer targetSrcIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer targetSrcIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double actorInterceptLat() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 180.1
   * Constraints: No constraints specified.
   */
  public double actorInterceptLon() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double actorInterceptAlt() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double weaponInterceptLat() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 180.1
   * Constraints: No constraints specified.
   */
  public double weaponInterceptLon() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The WGS-84 altitude of the weapon destination location, in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double weaponInterceptAlt() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * List of metrics associated with this action.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String actionMetrics(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int actionMetricsLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector actionMetricsVector() { return actionMetricsVector(new StringVector()); }
  public StringVector actionMetricsVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createEffectResponseActionsList_Ingest(FlatBufferBuilder builder,
      int summaryOffset,
      int actionIdOffset,
      int actionStartTimeOffset,
      int actionEndTimeOffset,
      int totStartTimeOffset,
      int totEndTimeOffset,
      int actionActorSrcTypeOffset,
      int actionActorSrcIdOffset,
      int effectorOffset,
      int targetSrcTypeOffset,
      int targetSrcIdOffset,
      double actorInterceptLat,
      double actorInterceptLon,
      double actorInterceptAlt,
      double weaponInterceptLat,
      double weaponInterceptLon,
      double weaponInterceptAlt,
      int actionMetricsOffset) {
    builder.startTable(18);
    EffectResponseActionsList_Ingest.addWeaponInterceptAlt(builder, weaponInterceptAlt);
    EffectResponseActionsList_Ingest.addWeaponInterceptLon(builder, weaponInterceptLon);
    EffectResponseActionsList_Ingest.addWeaponInterceptLat(builder, weaponInterceptLat);
    EffectResponseActionsList_Ingest.addActorInterceptAlt(builder, actorInterceptAlt);
    EffectResponseActionsList_Ingest.addActorInterceptLon(builder, actorInterceptLon);
    EffectResponseActionsList_Ingest.addActorInterceptLat(builder, actorInterceptLat);
    EffectResponseActionsList_Ingest.addActionMetrics(builder, actionMetricsOffset);
    EffectResponseActionsList_Ingest.addTargetSrcId(builder, targetSrcIdOffset);
    EffectResponseActionsList_Ingest.addTargetSrcType(builder, targetSrcTypeOffset);
    EffectResponseActionsList_Ingest.addEffector(builder, effectorOffset);
    EffectResponseActionsList_Ingest.addActionActorSrcId(builder, actionActorSrcIdOffset);
    EffectResponseActionsList_Ingest.addActionActorSrcType(builder, actionActorSrcTypeOffset);
    EffectResponseActionsList_Ingest.addTotEndTime(builder, totEndTimeOffset);
    EffectResponseActionsList_Ingest.addTotStartTime(builder, totStartTimeOffset);
    EffectResponseActionsList_Ingest.addActionEndTime(builder, actionEndTimeOffset);
    EffectResponseActionsList_Ingest.addActionStartTime(builder, actionStartTimeOffset);
    EffectResponseActionsList_Ingest.addActionId(builder, actionIdOffset);
    EffectResponseActionsList_Ingest.addSummary(builder, summaryOffset);
    return EffectResponseActionsList_Ingest.endEffectResponseActionsList_Ingest(builder);
  }

  public static void startEffectResponseActionsList_Ingest(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addSummary(FlatBufferBuilder builder, int summaryOffset) { builder.addOffset(0, summaryOffset, 0); }
  public static void addActionId(FlatBufferBuilder builder, int actionIdOffset) { builder.addOffset(1, actionIdOffset, 0); }
  public static void addActionStartTime(FlatBufferBuilder builder, int actionStartTimeOffset) { builder.addOffset(2, actionStartTimeOffset, 0); }
  public static void addActionEndTime(FlatBufferBuilder builder, int actionEndTimeOffset) { builder.addOffset(3, actionEndTimeOffset, 0); }
  public static void addTotStartTime(FlatBufferBuilder builder, int totStartTimeOffset) { builder.addOffset(4, totStartTimeOffset, 0); }
  public static void addTotEndTime(FlatBufferBuilder builder, int totEndTimeOffset) { builder.addOffset(5, totEndTimeOffset, 0); }
  public static void addActionActorSrcType(FlatBufferBuilder builder, int actionActorSrcTypeOffset) { builder.addOffset(6, actionActorSrcTypeOffset, 0); }
  public static void addActionActorSrcId(FlatBufferBuilder builder, int actionActorSrcIdOffset) { builder.addOffset(7, actionActorSrcIdOffset, 0); }
  public static void addEffector(FlatBufferBuilder builder, int effectorOffset) { builder.addOffset(8, effectorOffset, 0); }
  public static void addTargetSrcType(FlatBufferBuilder builder, int targetSrcTypeOffset) { builder.addOffset(9, targetSrcTypeOffset, 0); }
  public static void addTargetSrcId(FlatBufferBuilder builder, int targetSrcIdOffset) { builder.addOffset(10, targetSrcIdOffset, 0); }
  public static void addActorInterceptLat(FlatBufferBuilder builder, double actorInterceptLat) { builder.addDouble(11, actorInterceptLat, 0.0); }
  public static void addActorInterceptLon(FlatBufferBuilder builder, double actorInterceptLon) { builder.addDouble(12, actorInterceptLon, 0.0); }
  public static void addActorInterceptAlt(FlatBufferBuilder builder, double actorInterceptAlt) { builder.addDouble(13, actorInterceptAlt, 0.0); }
  public static void addWeaponInterceptLat(FlatBufferBuilder builder, double weaponInterceptLat) { builder.addDouble(14, weaponInterceptLat, 0.0); }
  public static void addWeaponInterceptLon(FlatBufferBuilder builder, double weaponInterceptLon) { builder.addDouble(15, weaponInterceptLon, 0.0); }
  public static void addWeaponInterceptAlt(FlatBufferBuilder builder, double weaponInterceptAlt) { builder.addDouble(16, weaponInterceptAlt, 0.0); }
  public static void addActionMetrics(FlatBufferBuilder builder, int actionMetricsOffset) { builder.addOffset(17, actionMetricsOffset, 0); }
  public static int createActionMetricsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startActionMetricsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEffectResponseActionsList_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEffectResponseActionsList_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EFFE"); }
  public static void finishSizePrefixedEffectResponseActionsList_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EFFE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EffectResponseActionsList_Ingest get(int j) { return get(new EffectResponseActionsList_Ingest(), j); }
    public EffectResponseActionsList_Ingest get(EffectResponseActionsList_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

