// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information for Global Navigation Satellite Systems (GNSS) Observations collected from GNSS receivers, including the specific GNSS sat from which each signal was received, and the observation codes of each observation in the record. Each GNSS Observation is associated with a GNSS Observation Set record containing data which applies to all observations in the set, including observation time, receiver location, and Dilution of Precision (DOP) values. Users can Reference RINEX 3+ documentation for further information concerning many of the standards and conventions for GNSS observations.
 */
@SuppressWarnings("unused")
public final class GNSSObservation_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static GNSSObservation_Full getRootAsGNSSObservation_Full(ByteBuffer _bb) { return getRootAsGNSSObservation_Full(_bb, new GNSSObservation_Full()); }
  public static GNSSObservation_Full getRootAsGNSSObservation_Full(ByteBuffer _bb, GNSSObservation_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean GNSSObservation_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "GNSS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GNSSObservation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * RINEX 3+ compliant GNSS System and Satellite Identifier (represented as SNN, where S is the system code, and NN is the satellite identifier) associated with this observation:
   * G - GPS (NN = PRN)
   * R - GLONASS (NN = Slot Number)
   * S - SBAS Payload (NN = PRN-100)
   * E - Galileo (NN = PRN)
   * C - BeiDou (NN = PRN)
   * J - QZSS (NN = PRN - 1923)
   * I - IRNSS (NN = PRN)
   * Example: /// Example: GEJ
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String gnssSatId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gnssSatIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer gnssSatIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int trackingStatus() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * GNSS Automatic Gain Control State.
   * Example: /// Example: 20
   * Constraints: No constraints specified.
   */
  public int agcState() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The observation code set that applies to this observation record.  Reference RINEX 3+ for further information concerning observation code set conventions.
   * Example: /// Example: ['S1C', 'C1C', 'C1D']
   * Constraints: No constraints specified.
   */
  public String obsCodeSet(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int obsCodeSetLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector obsCodeSetVector() { return obsCodeSetVector(new StringVector()); }
  public StringVector obsCodeSetVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of observation(s).  The ob array must be the same length as the obsCodeSet.  Pseudorange (C) is expressed meters, carrier phase (L) in cycles,  doppler (D) in Hz where + values indicate approaching sats, and signal strength C/No (S) in dB-Hz.
   * Example: /// Example: [42.1, 1000.0, 0.9]
   * Constraints: No constraints specified.
   */
  public String ob(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int obLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public StringVector obVector() { return obVector(new StringVector()); }
  public StringVector obVector(StringVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createGNSSObservation_Full(FlatBufferBuilder builder,
      int gnssSatIdOffset,
      int trackingStatus,
      int agcState,
      int obsCodeSetOffset,
      int obOffset) {
    builder.startTable(5);
    GNSSObservation_Full.addOb(builder, obOffset);
    GNSSObservation_Full.addObsCodeSet(builder, obsCodeSetOffset);
    GNSSObservation_Full.addAgcState(builder, agcState);
    GNSSObservation_Full.addTrackingStatus(builder, trackingStatus);
    GNSSObservation_Full.addGnssSatId(builder, gnssSatIdOffset);
    return GNSSObservation_Full.endGNSSObservation_Full(builder);
  }

  public static void startGNSSObservation_Full(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addGnssSatId(FlatBufferBuilder builder, int gnssSatIdOffset) { builder.addOffset(0, gnssSatIdOffset, 0); }
  public static void addTrackingStatus(FlatBufferBuilder builder, int trackingStatus) { builder.addInt(1, trackingStatus, 0); }
  public static void addAgcState(FlatBufferBuilder builder, int agcState) { builder.addInt(2, agcState, 0); }
  public static void addObsCodeSet(FlatBufferBuilder builder, int obsCodeSetOffset) { builder.addOffset(3, obsCodeSetOffset, 0); }
  public static int createObsCodeSetVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObsCodeSetVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOb(FlatBufferBuilder builder, int obOffset) { builder.addOffset(4, obOffset, 0); }
  public static int createObVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGNSSObservation_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishGNSSObservation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "GNSS"); }
  public static void finishSizePrefixedGNSSObservation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "GNSS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GNSSObservation_Full get(int j) { return get(new GNSSObservation_Full(), j); }
    public GNSSObservation_Full get(GNSSObservation_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

