// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model object representing on-orbit objects or satellites in the system.
 */
@SuppressWarnings("unused")
public final class Onorbit extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Onorbit getRootAsOnorbit(ByteBuffer _bb) { return getRootAsOnorbit(_bb, new Onorbit()); }
  public static Onorbit getRootAsOnorbit(ByteBuffer _bb, Onorbit obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OnorbitBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ONOR"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Onorbit __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Common name of the on-orbit object.
   * Example: /// Example: Example common name
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String commonName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commonNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer commonNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Constellation to which this satellite belongs.
   * Example: /// Example: Big Dipper
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String constellation() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer constellationAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer constellationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
   * Example: /// Example: 2021123ABC
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String intlDes() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer intlDesAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer intlDesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Date of launch.
   * Example: /// Example: 2018-01-01
   * Constraints: No constraints specified.
   */
  public String launchDate() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchDateAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer launchDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Date of decay.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String decayDate() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer decayDateAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer decayDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
   * Example: /// Example: PAYLOAD
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public byte objectType() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Mission number of the on-orbit object.
   * Example: /// Example: Expedition 1
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String missionNumber() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionNumberAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer missionNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
   * Example: /// Example: Lunar
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public byte category() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Estimated lifetime of the on-orbit payload, if known.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int lifetimeYears() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Alternate name of the on-orbit object.
   * Example: /// Example: Alternate Name
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String altName() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altNameAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer altNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(42); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Id of the associated launchSite entity.
   * Example: /// Example: LAUNCHSITE-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String launchSiteId() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchSiteIdAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer launchSiteIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Read-only collection of antennas on this on-orbit object.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String antennas(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int antennasLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector antennasVector() { return antennasVector(new StringVector()); }
  public StringVector antennasVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Read-only collection of batteries on this on-orbit object.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String batteries(int j) { int o = __offset(48); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int batteriesLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public StringVector batteriesVector() { return batteriesVector(new StringVector()); }
  public StringVector batteriesVector(StringVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Read-only collection of solar arrays on this on-orbit object.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String solarArrays(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int solarArraysLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector solarArraysVector() { return solarArraysVector(new StringVector()); }
  public StringVector solarArraysVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Read-only collection of thrusters (engines) on this on-orbit object.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String thrusters(int j) { int o = __offset(52); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int thrustersLength() { int o = __offset(52); return o != 0 ? __vector_len(o) : 0; }
  public StringVector thrustersVector() { return thrustersVector(new StringVector()); }
  public StringVector thrustersVector(StringVector obj) { int o = __offset(52); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Read-only collection of details for this on-orbit object.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onorbitDetails(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int onorbitDetailsLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector onorbitDetailsVector() { return onorbitDetailsVector(new StringVector()); }
  public StringVector onorbitDetailsVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
   * Example: /// Example: US
   * Constraints: No constraints specified.
   */
  public String countryCode() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }

  public static int createOnorbit(FlatBufferBuilder builder,
      int idOnOrbitOffset,
      int classificationMarkingOffset,
      int satNo,
      int commonNameOffset,
      int constellationOffset,
      int intlDesOffset,
      int launchDateOffset,
      int decayDateOffset,
      byte objectType,
      int originOffset,
      int missionNumberOffset,
      byte category,
      int lifetimeYears,
      int altNameOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      byte dataMode,
      int launchSiteIdOffset,
      int antennasOffset,
      int batteriesOffset,
      int solarArraysOffset,
      int thrustersOffset,
      int onorbitDetailsOffset,
      int countryCodeOffset,
      int origNetworkOffset) {
    builder.startTable(28);
    Onorbit.addOrigNetwork(builder, origNetworkOffset);
    Onorbit.addCountryCode(builder, countryCodeOffset);
    Onorbit.addOnorbitDetails(builder, onorbitDetailsOffset);
    Onorbit.addThrusters(builder, thrustersOffset);
    Onorbit.addSolarArrays(builder, solarArraysOffset);
    Onorbit.addBatteries(builder, batteriesOffset);
    Onorbit.addAntennas(builder, antennasOffset);
    Onorbit.addLaunchSiteId(builder, launchSiteIdOffset);
    Onorbit.addSource(builder, sourceOffset);
    Onorbit.addUpdatedBy(builder, updatedByOffset);
    Onorbit.addUpdatedAt(builder, updatedAtOffset);
    Onorbit.addCreatedBy(builder, createdByOffset);
    Onorbit.addCreatedAt(builder, createdAtOffset);
    Onorbit.addAltName(builder, altNameOffset);
    Onorbit.addLifetimeYears(builder, lifetimeYears);
    Onorbit.addMissionNumber(builder, missionNumberOffset);
    Onorbit.addOrigin(builder, originOffset);
    Onorbit.addDecayDate(builder, decayDateOffset);
    Onorbit.addLaunchDate(builder, launchDateOffset);
    Onorbit.addIntlDes(builder, intlDesOffset);
    Onorbit.addConstellation(builder, constellationOffset);
    Onorbit.addCommonName(builder, commonNameOffset);
    Onorbit.addSatNo(builder, satNo);
    Onorbit.addClassificationMarking(builder, classificationMarkingOffset);
    Onorbit.addIdOnOrbit(builder, idOnOrbitOffset);
    Onorbit.addDataMode(builder, dataMode);
    Onorbit.addCategory(builder, category);
    Onorbit.addObjectType(builder, objectType);
    return Onorbit.endOnorbit(builder);
  }

  public static void startOnorbit(FlatBufferBuilder builder) { builder.startTable(28); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(0, idOnOrbitOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(2, satNo, 0); }
  public static void addCommonName(FlatBufferBuilder builder, int commonNameOffset) { builder.addOffset(3, commonNameOffset, 0); }
  public static void addConstellation(FlatBufferBuilder builder, int constellationOffset) { builder.addOffset(4, constellationOffset, 0); }
  public static void addIntlDes(FlatBufferBuilder builder, int intlDesOffset) { builder.addOffset(5, intlDesOffset, 0); }
  public static void addLaunchDate(FlatBufferBuilder builder, int launchDateOffset) { builder.addOffset(6, launchDateOffset, 0); }
  public static void addDecayDate(FlatBufferBuilder builder, int decayDateOffset) { builder.addOffset(7, decayDateOffset, 0); }
  public static void addObjectType(FlatBufferBuilder builder, byte objectType) { builder.addByte(8, objectType, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(9, originOffset, 0); }
  public static void addMissionNumber(FlatBufferBuilder builder, int missionNumberOffset) { builder.addOffset(10, missionNumberOffset, 0); }
  public static void addCategory(FlatBufferBuilder builder, byte category) { builder.addByte(11, category, 0); }
  public static void addLifetimeYears(FlatBufferBuilder builder, int lifetimeYears) { builder.addInt(12, lifetimeYears, 0); }
  public static void addAltName(FlatBufferBuilder builder, int altNameOffset) { builder.addOffset(13, altNameOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(14, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(15, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(16, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(17, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(18, sourceOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(19, dataMode, 0); }
  public static void addLaunchSiteId(FlatBufferBuilder builder, int launchSiteIdOffset) { builder.addOffset(20, launchSiteIdOffset, 0); }
  public static void addAntennas(FlatBufferBuilder builder, int antennasOffset) { builder.addOffset(21, antennasOffset, 0); }
  public static int createAntennasVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAntennasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBatteries(FlatBufferBuilder builder, int batteriesOffset) { builder.addOffset(22, batteriesOffset, 0); }
  public static int createBatteriesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBatteriesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSolarArrays(FlatBufferBuilder builder, int solarArraysOffset) { builder.addOffset(23, solarArraysOffset, 0); }
  public static int createSolarArraysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSolarArraysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addThrusters(FlatBufferBuilder builder, int thrustersOffset) { builder.addOffset(24, thrustersOffset, 0); }
  public static int createThrustersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startThrustersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOnorbitDetails(FlatBufferBuilder builder, int onorbitDetailsOffset) { builder.addOffset(25, onorbitDetailsOffset, 0); }
  public static int createOnorbitDetailsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOnorbitDetailsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(26, countryCodeOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(27, origNetworkOffset, 0); }
  public static int endOnorbit(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOnorbitBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ONOR"); }
  public static void finishSizePrefixedOnorbitBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ONOR"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Onorbit get(int j) { return get(new Onorbit(), j); }
    public Onorbit get(Onorbit obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

