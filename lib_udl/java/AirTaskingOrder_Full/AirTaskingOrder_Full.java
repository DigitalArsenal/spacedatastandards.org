// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Beta Version Air Tasking Order: The ATO is used to task air missions, assign cross force tasking as well as intraservice tasking.
 */
@SuppressWarnings("unused")
public final class AirTaskingOrder_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirTaskingOrder_Full getRootAsAirTaskingOrder_Full(ByteBuffer _bb) { return getRootAsAirTaskingOrder_Full(_bb, new AirTaskingOrder_Full()); }
  public static AirTaskingOrder_Full getRootAsAirTaskingOrder_Full(ByteBuffer _bb, AirTaskingOrder_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirTaskingOrder_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirTaskingOrder_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: POI-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
   * Example: /// Example: DESERT WIND
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String opExerName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opExerNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer opExerNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The identifier of the originator of the message.
   * Example: /// Example: USCENTCOM
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String msgOriginator() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgOriginatorAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer msgOriginatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The unique message identifier sequentially assigned by the originator.
   * Example: /// Example: ATO A
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String msgSn() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgSnAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer msgSnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The month in which the message originated.
   * Example: /// Example: OCT
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String msgMonth() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgMonthAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer msgMonthInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The qualifier which caveats the message status.
   * Example: /// Example: CHG
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String msgQualifier() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgQualifierAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer msgQualifierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The indicator specifying an affirmative or a negatice condition for this message.
   * Example: /// Example: YES
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String ackReqInd() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ackReqIndAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer ackReqIndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Specifies textual data amplifying the data contained in the acknowledgement requirement indicator (ackRedInd) field or the unit required to acknowledge.
   * Example: /// Example: INST:45TS
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String ackUnitInstructions() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ackUnitInstructionsAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer ackUnitInstructionsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The effective begin time for this ATO in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-10-25T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String beginTs() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer beginTsAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer beginTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The effective end time for this ATO in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-10-27T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String endTs() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTsAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer endTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * A collection that details special instructions, important information, guidance, and amplifying information regarding this ATO.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String genText(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int genTextLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector genTextVector() { return genTextVector(new StringVector()); }
  public StringVector genTextVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String acMsnTasking(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int acMsnTaskingLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector acMsnTaskingVector() { return acMsnTaskingVector(new StringVector()); }
  public StringVector acMsnTaskingVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A collection that specifies the naval flight operations for this ATO.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String navalFltOps(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int navalFltOpsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector navalFltOpsVector() { return navalFltOpsVector(new StringVector()); }
  public StringVector navalFltOpsVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirTaskingOrder_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int rawFileUriOffset,
      int opExerNameOffset,
      int msgOriginatorOffset,
      int msgSnOffset,
      int msgMonthOffset,
      int msgQualifierOffset,
      int ackReqIndOffset,
      int ackUnitInstructionsOffset,
      int beginTsOffset,
      int endTsOffset,
      int genTextOffset,
      int acMsnTaskingOffset,
      int navalFltOpsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int sourceDlOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(22);
    AirTaskingOrder_Full.addOrigNetwork(builder, origNetworkOffset);
    AirTaskingOrder_Full.addOrigin(builder, originOffset);
    AirTaskingOrder_Full.addSourceDl(builder, sourceDlOffset);
    AirTaskingOrder_Full.addSource(builder, sourceOffset);
    AirTaskingOrder_Full.addCreatedBy(builder, createdByOffset);
    AirTaskingOrder_Full.addCreatedAt(builder, createdAtOffset);
    AirTaskingOrder_Full.addNavalFltOps(builder, navalFltOpsOffset);
    AirTaskingOrder_Full.addAcMsnTasking(builder, acMsnTaskingOffset);
    AirTaskingOrder_Full.addGenText(builder, genTextOffset);
    AirTaskingOrder_Full.addEndTs(builder, endTsOffset);
    AirTaskingOrder_Full.addBeginTs(builder, beginTsOffset);
    AirTaskingOrder_Full.addAckUnitInstructions(builder, ackUnitInstructionsOffset);
    AirTaskingOrder_Full.addAckReqInd(builder, ackReqIndOffset);
    AirTaskingOrder_Full.addMsgQualifier(builder, msgQualifierOffset);
    AirTaskingOrder_Full.addMsgMonth(builder, msgMonthOffset);
    AirTaskingOrder_Full.addMsgSn(builder, msgSnOffset);
    AirTaskingOrder_Full.addMsgOriginator(builder, msgOriginatorOffset);
    AirTaskingOrder_Full.addOpExerName(builder, opExerNameOffset);
    AirTaskingOrder_Full.addRawFileUri(builder, rawFileUriOffset);
    AirTaskingOrder_Full.addClassificationMarking(builder, classificationMarkingOffset);
    AirTaskingOrder_Full.addId(builder, idOffset);
    AirTaskingOrder_Full.addDataMode(builder, dataMode);
    return AirTaskingOrder_Full.endAirTaskingOrder_Full(builder);
  }

  public static void startAirTaskingOrder_Full(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(2, rawFileUriOffset, 0); }
  public static void addOpExerName(FlatBufferBuilder builder, int opExerNameOffset) { builder.addOffset(3, opExerNameOffset, 0); }
  public static void addMsgOriginator(FlatBufferBuilder builder, int msgOriginatorOffset) { builder.addOffset(4, msgOriginatorOffset, 0); }
  public static void addMsgSn(FlatBufferBuilder builder, int msgSnOffset) { builder.addOffset(5, msgSnOffset, 0); }
  public static void addMsgMonth(FlatBufferBuilder builder, int msgMonthOffset) { builder.addOffset(6, msgMonthOffset, 0); }
  public static void addMsgQualifier(FlatBufferBuilder builder, int msgQualifierOffset) { builder.addOffset(7, msgQualifierOffset, 0); }
  public static void addAckReqInd(FlatBufferBuilder builder, int ackReqIndOffset) { builder.addOffset(8, ackReqIndOffset, 0); }
  public static void addAckUnitInstructions(FlatBufferBuilder builder, int ackUnitInstructionsOffset) { builder.addOffset(9, ackUnitInstructionsOffset, 0); }
  public static void addBeginTs(FlatBufferBuilder builder, int beginTsOffset) { builder.addOffset(10, beginTsOffset, 0); }
  public static void addEndTs(FlatBufferBuilder builder, int endTsOffset) { builder.addOffset(11, endTsOffset, 0); }
  public static void addGenText(FlatBufferBuilder builder, int genTextOffset) { builder.addOffset(12, genTextOffset, 0); }
  public static int createGenTextVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGenTextVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAcMsnTasking(FlatBufferBuilder builder, int acMsnTaskingOffset) { builder.addOffset(13, acMsnTaskingOffset, 0); }
  public static int createAcMsnTaskingVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAcMsnTaskingVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNavalFltOps(FlatBufferBuilder builder, int navalFltOpsOffset) { builder.addOffset(14, navalFltOpsOffset, 0); }
  public static int createNavalFltOpsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNavalFltOpsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(15, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(16, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(17, sourceOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(18, sourceDlOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(19, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(20, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(21, dataMode, 0); }
  public static int endAirTaskingOrder_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirTaskingOrder_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRT"); }
  public static void finishSizePrefixedAirTaskingOrder_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirTaskingOrder_Full get(int j) { return get(new AirTaskingOrder_Full(), j); }
    public AirTaskingOrder_Full get(AirTaskingOrder_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

