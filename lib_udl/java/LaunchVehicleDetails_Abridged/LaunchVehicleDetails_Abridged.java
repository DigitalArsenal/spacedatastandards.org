// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
 */
@SuppressWarnings("unused")
public final class LaunchVehicleDetails_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LaunchVehicleDetails_Abridged getRootAsLaunchVehicleDetails_Abridged(ByteBuffer _bb) { return getRootAsLaunchVehicleDetails_Abridged(_bb, new LaunchVehicleDetails_Abridged()); }
  public static LaunchVehicleDetails_Abridged getRootAsLaunchVehicleDetails_Abridged(ByteBuffer _bb, LaunchVehicleDetails_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LaunchVehicleDetails_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LAUN"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LaunchVehicleDetails_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: LAUNCHVEHICLEDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the parent launch vehicle record.
   * Example: /// Example: LAUNCHVEHICLE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idLaunchVehicle() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idLaunchVehicleAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idLaunchVehicleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Vehicle variant.
   * Example: /// Example: Example-variant
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String variant() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer variantAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer variantInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Vehicle minor variant.
   * Example: /// Example: Example-minor-variant
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String minorVariant() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer minorVariantAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer minorVariantInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Vehicle category.
   * Example: /// Example: Example-category
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String category() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer categoryAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer categoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * ID of the organization that manufactures the launch vehicle.
   * Example: /// Example: MANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Vehicle launch prefix.
   * Example: /// Example: AX011
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String launchPrefix() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchPrefixAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer launchPrefixInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Vehicle family.
   * Example: /// Example: Example-family
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String family() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer familyAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer familyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Propellant type.
   * Example: /// Example: Nitrogen
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String propellant() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer propellantAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer propellantInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Oxidizer type.
   * Example: /// Example: Bromine
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String oxidizer() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer oxidizerAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer oxidizerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Vehicle length in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double length() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle diameter in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double diameter() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle total mass at launch time in kg (including all boosters).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double launchMass() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum vehicle payload mass to GEO orbit in kg.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double geoPayloadMass() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Max vehicle payload mass to Geo-Transfer Orbit in kg.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double gtoPayloadMass() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Max vehicle payload mass to LEO orbit in kg.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double leoPayloadMass() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Max vehicle payload mass to Sun-Synchronous Orbit in kg.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double ssoPayloadMass() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle fairing length in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double fairingLength() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Name of the fairing.
   * Example: /// Example: Example-fairing-name
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String fairingName() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fairingNameAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer fairingNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Vehicle fairing maximum external diameter in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double fairingExternalDiameter() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle fairing maximum internal diameter in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double fairingInternalDiameter() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle fairing mass in kg.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double fairingMass() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fairing material.
   * Example: /// Example: Example-fairing-material
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String fairingMaterial() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fairingMaterialAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer fairingMaterialInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Vehicle maximum acceleration load in g.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxAccelLoad() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle maximum payload lateral frequency in Hz.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxPayloadFreqLat() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle maximum payload longitudinal frequency in Hz.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxPayloadFreqLon() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle maximum acoustic level in dB.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxAcousticLevel() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle maximum acoustic level range in Hz.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxAcousticLevelRange() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle overall sound pressure level in dB.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double soundPressureLevel() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle maximum flight shock force in g.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxFlightShockForce() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle maximum flight shock frequency in Hz.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxFlightShockFreq() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vehicle fairing maximum pressure change in kPa/sec.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxFairingPressureChange() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle estimated launch price in US dollars.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double estLaunchPrice() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle typical estimated launch price in US dollars.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double estLaunchPriceTypical() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double gtoInj3SigAccuracyApogeeTarget() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double gtoInj3SigAccuracyApogeeMargin() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double gtoInj3SigAccuracyPerigeeTarget() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double gtoInj3SigAccuracyPerigeeMargin() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double gtoInj3SigAccuracyInclinationTarget() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double gtoInj3SigAccuracyInclinationMargin() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle attitude accuracy (degrees).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double attitudeAccuracy() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle payload separation rate in m/s.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double payloadSeparationRate() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch vehicle deployment rotation rate in RPM.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double deploymentRotationRate() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional URL for additional information on the vehicle.
   * Example: /// Example: Example URL
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String sourceUrl() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceUrlAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer sourceUrlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Notes/Description of the launch vehicle.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String notes() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Notes/Description of the launch vehicle fairing.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String fairingNotes() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fairingNotesAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer fairingNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Notes/Description of the launch vehicle payload.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String payloadNotes() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer payloadNotesAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer payloadNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(110); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createLaunchVehicleDetails_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int idLaunchVehicleOffset,
      int classificationMarkingOffset,
      int variantOffset,
      int minorVariantOffset,
      int categoryOffset,
      int manufacturerOrgIdOffset,
      int launchPrefixOffset,
      int familyOffset,
      int propellantOffset,
      int oxidizerOffset,
      double length,
      double diameter,
      double launchMass,
      double geoPayloadMass,
      double gtoPayloadMass,
      double leoPayloadMass,
      double ssoPayloadMass,
      double fairingLength,
      int fairingNameOffset,
      double fairingExternalDiameter,
      double fairingInternalDiameter,
      double fairingMass,
      int fairingMaterialOffset,
      double maxAccelLoad,
      double maxPayloadFreqLat,
      double maxPayloadFreqLon,
      double maxAcousticLevel,
      double maxAcousticLevelRange,
      double soundPressureLevel,
      double maxFlightShockForce,
      double maxFlightShockFreq,
      double maxFairingPressureChange,
      double estLaunchPrice,
      double estLaunchPriceTypical,
      double gtoInj3SigAccuracyApogeeTarget,
      double gtoInj3SigAccuracyApogeeMargin,
      double gtoInj3SigAccuracyPerigeeTarget,
      double gtoInj3SigAccuracyPerigeeMargin,
      double gtoInj3SigAccuracyInclinationTarget,
      double gtoInj3SigAccuracyInclinationMargin,
      double attitudeAccuracy,
      double payloadSeparationRate,
      double deploymentRotationRate,
      int sourceUrlOffset,
      int notesOffset,
      int fairingNotesOffset,
      int payloadNotesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(54);
    LaunchVehicleDetails_Abridged.addDeploymentRotationRate(builder, deploymentRotationRate);
    LaunchVehicleDetails_Abridged.addPayloadSeparationRate(builder, payloadSeparationRate);
    LaunchVehicleDetails_Abridged.addAttitudeAccuracy(builder, attitudeAccuracy);
    LaunchVehicleDetails_Abridged.addGtoInj3SigAccuracyInclinationMargin(builder, gtoInj3SigAccuracyInclinationMargin);
    LaunchVehicleDetails_Abridged.addGtoInj3SigAccuracyInclinationTarget(builder, gtoInj3SigAccuracyInclinationTarget);
    LaunchVehicleDetails_Abridged.addGtoInj3SigAccuracyPerigeeMargin(builder, gtoInj3SigAccuracyPerigeeMargin);
    LaunchVehicleDetails_Abridged.addGtoInj3SigAccuracyPerigeeTarget(builder, gtoInj3SigAccuracyPerigeeTarget);
    LaunchVehicleDetails_Abridged.addGtoInj3SigAccuracyApogeeMargin(builder, gtoInj3SigAccuracyApogeeMargin);
    LaunchVehicleDetails_Abridged.addGtoInj3SigAccuracyApogeeTarget(builder, gtoInj3SigAccuracyApogeeTarget);
    LaunchVehicleDetails_Abridged.addEstLaunchPriceTypical(builder, estLaunchPriceTypical);
    LaunchVehicleDetails_Abridged.addEstLaunchPrice(builder, estLaunchPrice);
    LaunchVehicleDetails_Abridged.addMaxFairingPressureChange(builder, maxFairingPressureChange);
    LaunchVehicleDetails_Abridged.addMaxFlightShockFreq(builder, maxFlightShockFreq);
    LaunchVehicleDetails_Abridged.addMaxFlightShockForce(builder, maxFlightShockForce);
    LaunchVehicleDetails_Abridged.addSoundPressureLevel(builder, soundPressureLevel);
    LaunchVehicleDetails_Abridged.addMaxAcousticLevelRange(builder, maxAcousticLevelRange);
    LaunchVehicleDetails_Abridged.addMaxAcousticLevel(builder, maxAcousticLevel);
    LaunchVehicleDetails_Abridged.addMaxPayloadFreqLon(builder, maxPayloadFreqLon);
    LaunchVehicleDetails_Abridged.addMaxPayloadFreqLat(builder, maxPayloadFreqLat);
    LaunchVehicleDetails_Abridged.addMaxAccelLoad(builder, maxAccelLoad);
    LaunchVehicleDetails_Abridged.addFairingMass(builder, fairingMass);
    LaunchVehicleDetails_Abridged.addFairingInternalDiameter(builder, fairingInternalDiameter);
    LaunchVehicleDetails_Abridged.addFairingExternalDiameter(builder, fairingExternalDiameter);
    LaunchVehicleDetails_Abridged.addFairingLength(builder, fairingLength);
    LaunchVehicleDetails_Abridged.addSsoPayloadMass(builder, ssoPayloadMass);
    LaunchVehicleDetails_Abridged.addLeoPayloadMass(builder, leoPayloadMass);
    LaunchVehicleDetails_Abridged.addGtoPayloadMass(builder, gtoPayloadMass);
    LaunchVehicleDetails_Abridged.addGeoPayloadMass(builder, geoPayloadMass);
    LaunchVehicleDetails_Abridged.addLaunchMass(builder, launchMass);
    LaunchVehicleDetails_Abridged.addDiameter(builder, diameter);
    LaunchVehicleDetails_Abridged.addLength(builder, length);
    LaunchVehicleDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
    LaunchVehicleDetails_Abridged.addOrigin(builder, originOffset);
    LaunchVehicleDetails_Abridged.addSource(builder, sourceOffset);
    LaunchVehicleDetails_Abridged.addCreatedBy(builder, createdByOffset);
    LaunchVehicleDetails_Abridged.addCreatedAt(builder, createdAtOffset);
    LaunchVehicleDetails_Abridged.addPayloadNotes(builder, payloadNotesOffset);
    LaunchVehicleDetails_Abridged.addFairingNotes(builder, fairingNotesOffset);
    LaunchVehicleDetails_Abridged.addNotes(builder, notesOffset);
    LaunchVehicleDetails_Abridged.addSourceUrl(builder, sourceUrlOffset);
    LaunchVehicleDetails_Abridged.addFairingMaterial(builder, fairingMaterialOffset);
    LaunchVehicleDetails_Abridged.addFairingName(builder, fairingNameOffset);
    LaunchVehicleDetails_Abridged.addOxidizer(builder, oxidizerOffset);
    LaunchVehicleDetails_Abridged.addPropellant(builder, propellantOffset);
    LaunchVehicleDetails_Abridged.addFamily(builder, familyOffset);
    LaunchVehicleDetails_Abridged.addLaunchPrefix(builder, launchPrefixOffset);
    LaunchVehicleDetails_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    LaunchVehicleDetails_Abridged.addCategory(builder, categoryOffset);
    LaunchVehicleDetails_Abridged.addMinorVariant(builder, minorVariantOffset);
    LaunchVehicleDetails_Abridged.addVariant(builder, variantOffset);
    LaunchVehicleDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    LaunchVehicleDetails_Abridged.addIdLaunchVehicle(builder, idLaunchVehicleOffset);
    LaunchVehicleDetails_Abridged.addId(builder, idOffset);
    LaunchVehicleDetails_Abridged.addDataMode(builder, dataMode);
    return LaunchVehicleDetails_Abridged.endLaunchVehicleDetails_Abridged(builder);
  }

  public static void startLaunchVehicleDetails_Abridged(FlatBufferBuilder builder) { builder.startTable(54); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdLaunchVehicle(FlatBufferBuilder builder, int idLaunchVehicleOffset) { builder.addOffset(1, idLaunchVehicleOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addVariant(FlatBufferBuilder builder, int variantOffset) { builder.addOffset(3, variantOffset, 0); }
  public static void addMinorVariant(FlatBufferBuilder builder, int minorVariantOffset) { builder.addOffset(4, minorVariantOffset, 0); }
  public static void addCategory(FlatBufferBuilder builder, int categoryOffset) { builder.addOffset(5, categoryOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(6, manufacturerOrgIdOffset, 0); }
  public static void addLaunchPrefix(FlatBufferBuilder builder, int launchPrefixOffset) { builder.addOffset(7, launchPrefixOffset, 0); }
  public static void addFamily(FlatBufferBuilder builder, int familyOffset) { builder.addOffset(8, familyOffset, 0); }
  public static void addPropellant(FlatBufferBuilder builder, int propellantOffset) { builder.addOffset(9, propellantOffset, 0); }
  public static void addOxidizer(FlatBufferBuilder builder, int oxidizerOffset) { builder.addOffset(10, oxidizerOffset, 0); }
  public static void addLength(FlatBufferBuilder builder, double length) { builder.addDouble(11, length, 0.0); }
  public static void addDiameter(FlatBufferBuilder builder, double diameter) { builder.addDouble(12, diameter, 0.0); }
  public static void addLaunchMass(FlatBufferBuilder builder, double launchMass) { builder.addDouble(13, launchMass, 0.0); }
  public static void addGeoPayloadMass(FlatBufferBuilder builder, double geoPayloadMass) { builder.addDouble(14, geoPayloadMass, 0.0); }
  public static void addGtoPayloadMass(FlatBufferBuilder builder, double gtoPayloadMass) { builder.addDouble(15, gtoPayloadMass, 0.0); }
  public static void addLeoPayloadMass(FlatBufferBuilder builder, double leoPayloadMass) { builder.addDouble(16, leoPayloadMass, 0.0); }
  public static void addSsoPayloadMass(FlatBufferBuilder builder, double ssoPayloadMass) { builder.addDouble(17, ssoPayloadMass, 0.0); }
  public static void addFairingLength(FlatBufferBuilder builder, double fairingLength) { builder.addDouble(18, fairingLength, 0.0); }
  public static void addFairingName(FlatBufferBuilder builder, int fairingNameOffset) { builder.addOffset(19, fairingNameOffset, 0); }
  public static void addFairingExternalDiameter(FlatBufferBuilder builder, double fairingExternalDiameter) { builder.addDouble(20, fairingExternalDiameter, 0.0); }
  public static void addFairingInternalDiameter(FlatBufferBuilder builder, double fairingInternalDiameter) { builder.addDouble(21, fairingInternalDiameter, 0.0); }
  public static void addFairingMass(FlatBufferBuilder builder, double fairingMass) { builder.addDouble(22, fairingMass, 0.0); }
  public static void addFairingMaterial(FlatBufferBuilder builder, int fairingMaterialOffset) { builder.addOffset(23, fairingMaterialOffset, 0); }
  public static void addMaxAccelLoad(FlatBufferBuilder builder, double maxAccelLoad) { builder.addDouble(24, maxAccelLoad, 0.0); }
  public static void addMaxPayloadFreqLat(FlatBufferBuilder builder, double maxPayloadFreqLat) { builder.addDouble(25, maxPayloadFreqLat, 0.0); }
  public static void addMaxPayloadFreqLon(FlatBufferBuilder builder, double maxPayloadFreqLon) { builder.addDouble(26, maxPayloadFreqLon, 0.0); }
  public static void addMaxAcousticLevel(FlatBufferBuilder builder, double maxAcousticLevel) { builder.addDouble(27, maxAcousticLevel, 0.0); }
  public static void addMaxAcousticLevelRange(FlatBufferBuilder builder, double maxAcousticLevelRange) { builder.addDouble(28, maxAcousticLevelRange, 0.0); }
  public static void addSoundPressureLevel(FlatBufferBuilder builder, double soundPressureLevel) { builder.addDouble(29, soundPressureLevel, 0.0); }
  public static void addMaxFlightShockForce(FlatBufferBuilder builder, double maxFlightShockForce) { builder.addDouble(30, maxFlightShockForce, 0.0); }
  public static void addMaxFlightShockFreq(FlatBufferBuilder builder, double maxFlightShockFreq) { builder.addDouble(31, maxFlightShockFreq, 0.0); }
  public static void addMaxFairingPressureChange(FlatBufferBuilder builder, double maxFairingPressureChange) { builder.addDouble(32, maxFairingPressureChange, 0.0); }
  public static void addEstLaunchPrice(FlatBufferBuilder builder, double estLaunchPrice) { builder.addDouble(33, estLaunchPrice, 0.0); }
  public static void addEstLaunchPriceTypical(FlatBufferBuilder builder, double estLaunchPriceTypical) { builder.addDouble(34, estLaunchPriceTypical, 0.0); }
  public static void addGtoInj3SigAccuracyApogeeTarget(FlatBufferBuilder builder, double gtoInj3SigAccuracyApogeeTarget) { builder.addDouble(35, gtoInj3SigAccuracyApogeeTarget, 0.0); }
  public static void addGtoInj3SigAccuracyApogeeMargin(FlatBufferBuilder builder, double gtoInj3SigAccuracyApogeeMargin) { builder.addDouble(36, gtoInj3SigAccuracyApogeeMargin, 0.0); }
  public static void addGtoInj3SigAccuracyPerigeeTarget(FlatBufferBuilder builder, double gtoInj3SigAccuracyPerigeeTarget) { builder.addDouble(37, gtoInj3SigAccuracyPerigeeTarget, 0.0); }
  public static void addGtoInj3SigAccuracyPerigeeMargin(FlatBufferBuilder builder, double gtoInj3SigAccuracyPerigeeMargin) { builder.addDouble(38, gtoInj3SigAccuracyPerigeeMargin, 0.0); }
  public static void addGtoInj3SigAccuracyInclinationTarget(FlatBufferBuilder builder, double gtoInj3SigAccuracyInclinationTarget) { builder.addDouble(39, gtoInj3SigAccuracyInclinationTarget, 0.0); }
  public static void addGtoInj3SigAccuracyInclinationMargin(FlatBufferBuilder builder, double gtoInj3SigAccuracyInclinationMargin) { builder.addDouble(40, gtoInj3SigAccuracyInclinationMargin, 0.0); }
  public static void addAttitudeAccuracy(FlatBufferBuilder builder, double attitudeAccuracy) { builder.addDouble(41, attitudeAccuracy, 0.0); }
  public static void addPayloadSeparationRate(FlatBufferBuilder builder, double payloadSeparationRate) { builder.addDouble(42, payloadSeparationRate, 0.0); }
  public static void addDeploymentRotationRate(FlatBufferBuilder builder, double deploymentRotationRate) { builder.addDouble(43, deploymentRotationRate, 0.0); }
  public static void addSourceUrl(FlatBufferBuilder builder, int sourceUrlOffset) { builder.addOffset(44, sourceUrlOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(45, notesOffset, 0); }
  public static void addFairingNotes(FlatBufferBuilder builder, int fairingNotesOffset) { builder.addOffset(46, fairingNotesOffset, 0); }
  public static void addPayloadNotes(FlatBufferBuilder builder, int payloadNotesOffset) { builder.addOffset(47, payloadNotesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(48, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(49, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(50, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(51, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(52, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(53, dataMode, 0); }
  public static int endLaunchVehicleDetails_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLaunchVehicleDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LAUN"); }
  public static void finishSizePrefixedLaunchVehicleDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LAUN"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LaunchVehicleDetails_Abridged get(int j) { return get(new LaunchVehicleDetails_Abridged(), j); }
    public LaunchVehicleDetails_Abridged get(LaunchVehicleDetails_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

