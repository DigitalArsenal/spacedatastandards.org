// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// These services provide operations for posting and querying attitude of on-orbit objects.  Attitude describes the orientation of an object, which can be represented by quaternions or euler angles.  The AttitudeSet ID (asId) identifies the 'AttitudeSet' record which contains details of the underlying data as well as a collection of attitude points. Points must be retrieved by first identifying a desired AttitudeSet and pulling its points by that AttitudeSet ID 'asId'.
 */
@SuppressWarnings("unused")
public final class AttitudeData_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AttitudeData_Full getRootAsAttitudeData_Full(ByteBuffer _bb) { return getRootAsAttitudeData_Full(_bb, new AttitudeData_Full()); }
  public static AttitudeData_Full getRootAsAttitudeData_Full(ByteBuffer _bb, AttitudeData_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AttitudeData_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ATTI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AttitudeData_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ATTITUDEDATA-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the parent AttitudeSet associated with this record.
   * Example: /// Example: 773c9887-e931-42eb-8155-f0fbd227b235
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String asId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer asIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer asIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the on-orbit satellite to which this attitude record applies.
   * Example: /// Example: 41947
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Satellite/catalog number of the on-orbit object to which this attitude record applies.
   * Example: /// Example: 41947
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by the record source to indicate the target object of this attitude record. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: D6593
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Time associated with this attitude record, in ISO 8601 UTC format, with microsecond precision.
   * Example: /// Example: 2022-03-07T14:51:39.653043Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Label specifying type of rotational motion of target.
   * Example: /// Example: PROSOL_MOTION
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String motionType() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer motionTypeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer motionTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Quaternion vector component 1.
   * Example: /// Example: 0.0312
   * Constraints: No constraints specified.
   */
  public double q1() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Quaternion vector component 2.
   * Example: /// Example: 0.7854
   * Constraints: No constraints specified.
   */
  public double q2() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Quaternion vector component 3.
   * Example: /// Example: 0.3916
   * Constraints: No constraints specified.
   */
  public double q3() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Quaternion scalar component.
   * Example: /// Example: 0.4783
   * Constraints: No constraints specified.
   */
  public double qc() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Derivative of quaternion vector component 1.
   * Example: /// Example: 0.0043
   * Constraints: No constraints specified.
   */
  public double q1Dot() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Derivative of quaternion vector component 2.
   * Example: /// Example: 0.06
   * Constraints: No constraints specified.
   */
  public double q2Dot() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Derivative of quaternion vector component 3.
   * Example: /// Example: 0.499
   * Constraints: No constraints specified.
   */
  public double q3Dot() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Derivative of quaternion scalar component.
   * Example: /// Example: 0.011
   * Constraints: No constraints specified.
   */
  public double qcDot() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of X body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
   * Example: /// Example: [139.753]
   * Constraints: No constraints specified.
   */
  public String xAngle(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int xAngleLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector xAngleVector() { return xAngleVector(new StringVector()); }
  public StringVector xAngleVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Y body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
   * Example: /// Example: [25.066]
   * Constraints: No constraints specified.
   */
  public String yAngle(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int yAngleLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector yAngleVector() { return yAngleVector(new StringVector()); }
  public StringVector yAngleVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Z body rotation Euler angle(s), in degrees (-180 to 180).  For repeated axis rotations, the array elements should be placed in the order that the angles apply in the sequence.
   * Example: /// Example: [-53.368]
   * Constraints: No constraints specified.
   */
  public String zAngle(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int zAngleLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector zAngleVector() { return zAngleVector(new StringVector()); }
  public StringVector zAngleVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of X body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
   * Example: /// Example: [0.105]
   * Constraints: No constraints specified.
   */
  public String xRate(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int xRateLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector xRateVector() { return xRateVector(new StringVector()); }
  public StringVector xRateVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Y body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence.  Attitude rates are expressed in frame1 with respect to frame2.
   * Example: /// Example: [0.032]
   * Constraints: No constraints specified.
   */
  public String yRate(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int yRateLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector yRateVector() { return yRateVector(new StringVector()); }
  public StringVector yRateVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Z body rotation rate(s), in degrees per second.  For repeated axis rotations, the array elements should be placed in the order that the rates apply in the sequence  Attitude rates are expressed in frame1 with respect to frame2.
   * Example: /// Example: [0.022]
   * Constraints: No constraints specified.
   */
  public String zRate(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int zRateLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector zRateVector() { return zRateVector(new StringVector()); }
  public StringVector zRateVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Precession axis right ascension (ECI J2000 frame) in degrees.
   * Example: /// Example: -173.75
   * Constraints: No constraints specified.
   */
  public double ra() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Precession axis declination (ECI J2000 frame) in degrees.
   * Example: /// Example: 0.799
   * Constraints: No constraints specified.
   */
  public double declination() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Coning angle in degrees.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double coningAngle() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Precession period in seconds.
   * Example: /// Example: 36.1
   * Constraints: No constraints specified.
   */
  public double precPeriod() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spin period in seconds.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double spinPeriod() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-07-05T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(66); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }

  public static int createAttitudeData_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int asIdOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int tsOffset,
      int motionTypeOffset,
      double q1,
      double q2,
      double q3,
      double qc,
      double q1Dot,
      double q2Dot,
      double q3Dot,
      double qcDot,
      int xAngleOffset,
      int yAngleOffset,
      int zAngleOffset,
      int xRateOffset,
      int yRateOffset,
      int zRateOffset,
      double ra,
      double declination,
      double coningAngle,
      double precPeriod,
      double spinPeriod,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(33);
    AttitudeData_Full.addSpinPeriod(builder, spinPeriod);
    AttitudeData_Full.addPrecPeriod(builder, precPeriod);
    AttitudeData_Full.addConingAngle(builder, coningAngle);
    AttitudeData_Full.addDeclination(builder, declination);
    AttitudeData_Full.addRa(builder, ra);
    AttitudeData_Full.addQcDot(builder, qcDot);
    AttitudeData_Full.addQ3Dot(builder, q3Dot);
    AttitudeData_Full.addQ2Dot(builder, q2Dot);
    AttitudeData_Full.addQ1Dot(builder, q1Dot);
    AttitudeData_Full.addQc(builder, qc);
    AttitudeData_Full.addQ3(builder, q3);
    AttitudeData_Full.addQ2(builder, q2);
    AttitudeData_Full.addQ1(builder, q1);
    AttitudeData_Full.addOrigNetwork(builder, origNetworkOffset);
    AttitudeData_Full.addOrigin(builder, originOffset);
    AttitudeData_Full.addSource(builder, sourceOffset);
    AttitudeData_Full.addCreatedBy(builder, createdByOffset);
    AttitudeData_Full.addCreatedAt(builder, createdAtOffset);
    AttitudeData_Full.addZRate(builder, zRateOffset);
    AttitudeData_Full.addYRate(builder, yRateOffset);
    AttitudeData_Full.addXRate(builder, xRateOffset);
    AttitudeData_Full.addZAngle(builder, zAngleOffset);
    AttitudeData_Full.addYAngle(builder, yAngleOffset);
    AttitudeData_Full.addXAngle(builder, xAngleOffset);
    AttitudeData_Full.addMotionType(builder, motionTypeOffset);
    AttitudeData_Full.addTs(builder, tsOffset);
    AttitudeData_Full.addOrigObjectId(builder, origObjectIdOffset);
    AttitudeData_Full.addSatNo(builder, satNo);
    AttitudeData_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    AttitudeData_Full.addAsId(builder, asIdOffset);
    AttitudeData_Full.addClassificationMarking(builder, classificationMarkingOffset);
    AttitudeData_Full.addId(builder, idOffset);
    AttitudeData_Full.addDataMode(builder, dataMode);
    return AttitudeData_Full.endAttitudeData_Full(builder);
  }

  public static void startAttitudeData_Full(FlatBufferBuilder builder) { builder.startTable(33); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addAsId(FlatBufferBuilder builder, int asIdOffset) { builder.addOffset(2, asIdOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(3, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(4, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(5, origObjectIdOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(6, tsOffset, 0); }
  public static void addMotionType(FlatBufferBuilder builder, int motionTypeOffset) { builder.addOffset(7, motionTypeOffset, 0); }
  public static void addQ1(FlatBufferBuilder builder, double q1) { builder.addDouble(8, q1, 0.0); }
  public static void addQ2(FlatBufferBuilder builder, double q2) { builder.addDouble(9, q2, 0.0); }
  public static void addQ3(FlatBufferBuilder builder, double q3) { builder.addDouble(10, q3, 0.0); }
  public static void addQc(FlatBufferBuilder builder, double qc) { builder.addDouble(11, qc, 0.0); }
  public static void addQ1Dot(FlatBufferBuilder builder, double q1Dot) { builder.addDouble(12, q1Dot, 0.0); }
  public static void addQ2Dot(FlatBufferBuilder builder, double q2Dot) { builder.addDouble(13, q2Dot, 0.0); }
  public static void addQ3Dot(FlatBufferBuilder builder, double q3Dot) { builder.addDouble(14, q3Dot, 0.0); }
  public static void addQcDot(FlatBufferBuilder builder, double qcDot) { builder.addDouble(15, qcDot, 0.0); }
  public static void addXAngle(FlatBufferBuilder builder, int xAngleOffset) { builder.addOffset(16, xAngleOffset, 0); }
  public static int createXAngleVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startXAngleVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addYAngle(FlatBufferBuilder builder, int yAngleOffset) { builder.addOffset(17, yAngleOffset, 0); }
  public static int createYAngleVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startYAngleVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addZAngle(FlatBufferBuilder builder, int zAngleOffset) { builder.addOffset(18, zAngleOffset, 0); }
  public static int createZAngleVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startZAngleVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addXRate(FlatBufferBuilder builder, int xRateOffset) { builder.addOffset(19, xRateOffset, 0); }
  public static int createXRateVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startXRateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addYRate(FlatBufferBuilder builder, int yRateOffset) { builder.addOffset(20, yRateOffset, 0); }
  public static int createYRateVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startYRateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addZRate(FlatBufferBuilder builder, int zRateOffset) { builder.addOffset(21, zRateOffset, 0); }
  public static int createZRateVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startZRateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRa(FlatBufferBuilder builder, double ra) { builder.addDouble(22, ra, 0.0); }
  public static void addDeclination(FlatBufferBuilder builder, double declination) { builder.addDouble(23, declination, 0.0); }
  public static void addConingAngle(FlatBufferBuilder builder, double coningAngle) { builder.addDouble(24, coningAngle, 0.0); }
  public static void addPrecPeriod(FlatBufferBuilder builder, double precPeriod) { builder.addDouble(25, precPeriod, 0.0); }
  public static void addSpinPeriod(FlatBufferBuilder builder, double spinPeriod) { builder.addDouble(26, spinPeriod, 0.0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(27, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(28, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(29, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(30, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(31, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(32, origNetworkOffset, 0); }
  public static int endAttitudeData_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAttitudeData_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ATTI"); }
  public static void finishSizePrefixedAttitudeData_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ATTI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AttitudeData_Full get(int j) { return get(new AttitudeData_Full(), j); }
    public AttitudeData_Full get(AttitudeData_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

