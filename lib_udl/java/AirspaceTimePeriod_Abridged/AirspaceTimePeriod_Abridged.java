// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The timePeriod set describes the effective datetime for a given airspace control means.
 */
@SuppressWarnings("unused")
public final class AirspaceTimePeriod_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirspaceTimePeriod_Abridged getRootAsAirspaceTimePeriod_Abridged(ByteBuffer _bb) { return getRootAsAirspaceTimePeriod_Abridged(_bb, new AirspaceTimePeriod_Abridged()); }
  public static AirspaceTimePeriod_Abridged getRootAsAirspaceTimePeriod_Abridged(ByteBuffer _bb, AirspaceTimePeriod_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirspaceTimePeriod_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirspaceTimePeriod_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
   * Example: /// Example: DISCRETE
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String timeMode() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeModeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer timeModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The start time designating that the airspace control order is active.
   * Example: /// Example: 141325ZFEB2002
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String timeStart() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeStartAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer timeStartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
   * Example: /// Example: 141325ZFEB2002
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String timeEnd() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeEndAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer timeEndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
   * Example: /// Example: ['WEEKLY']
   * Constraints: No constraints specified.
   */
  public String intFreq(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int intFreqLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector intFreqVector() { return intFreqVector(new StringVector()); }
  public StringVector intFreqVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
   * Example: /// Example: ['65WK']
   * Constraints: No constraints specified.
   */
  public String intDur(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int intDurLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public StringVector intDurVector() { return intDurVector(new StringVector()); }
  public StringVector intDurVector(StringVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAirspaceTimePeriod_Abridged(FlatBufferBuilder builder,
      int timeModeOffset,
      int timeStartOffset,
      int timeEndOffset,
      int intFreqOffset,
      int intDurOffset) {
    builder.startTable(5);
    AirspaceTimePeriod_Abridged.addIntDur(builder, intDurOffset);
    AirspaceTimePeriod_Abridged.addIntFreq(builder, intFreqOffset);
    AirspaceTimePeriod_Abridged.addTimeEnd(builder, timeEndOffset);
    AirspaceTimePeriod_Abridged.addTimeStart(builder, timeStartOffset);
    AirspaceTimePeriod_Abridged.addTimeMode(builder, timeModeOffset);
    return AirspaceTimePeriod_Abridged.endAirspaceTimePeriod_Abridged(builder);
  }

  public static void startAirspaceTimePeriod_Abridged(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addTimeMode(FlatBufferBuilder builder, int timeModeOffset) { builder.addOffset(0, timeModeOffset, 0); }
  public static void addTimeStart(FlatBufferBuilder builder, int timeStartOffset) { builder.addOffset(1, timeStartOffset, 0); }
  public static void addTimeEnd(FlatBufferBuilder builder, int timeEndOffset) { builder.addOffset(2, timeEndOffset, 0); }
  public static void addIntFreq(FlatBufferBuilder builder, int intFreqOffset) { builder.addOffset(3, intFreqOffset, 0); }
  public static int createIntFreqVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIntFreqVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIntDur(FlatBufferBuilder builder, int intDurOffset) { builder.addOffset(4, intDurOffset, 0); }
  public static int createIntDurVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIntDurVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAirspaceTimePeriod_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirspaceTimePeriod_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRS"); }
  public static void finishSizePrefixedAirspaceTimePeriod_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirspaceTimePeriod_Abridged get(int j) { return get(new AirspaceTimePeriod_Abridged(), j); }
    public AirspaceTimePeriod_Abridged get(AirspaceTimePeriod_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

