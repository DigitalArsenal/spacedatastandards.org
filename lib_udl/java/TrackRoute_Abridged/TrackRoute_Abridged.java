// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A track route is a prescribed route for performing training events or operations such as air refueling.
 */
@SuppressWarnings("unused")
public final class TrackRoute_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static TrackRoute_Abridged getRootAsTrackRoute_Abridged(ByteBuffer _bb) { return getRootAsTrackRoute_Abridged(_bb, new TrackRoute_Abridged()); }
  public static TrackRoute_Abridged getRootAsTrackRoute_Abridged(ByteBuffer _bb, TrackRoute_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean TrackRoute_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "TRAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackRoute_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The track route type represented by this record (ex. AIR REFUELING).
   * Example: /// Example: AIR REFUELING
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String type() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: GDSSMH121004232315303094
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The principal compass direction (cardinal or ordinal) of the track route.
   * Example: /// Example: NE
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String direction() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer directionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer directionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The name of the creating organization of the track route.
   * Example: /// Example: HQPAC
   * Constraints: Minimum length = 0, Maximum length = 250
   */
  public String creatingOrg() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer creatingOrgAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer creatingOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Track location ID.
   * Example: /// Example: POACHR
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String locationTrackId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locationTrackIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer locationTrackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Identifier of the track.
   * Example: /// Example: CH61A
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trackId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer trackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Name of the track.
   * Example: /// Example: CH61 POST
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String trackName() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackNameAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer trackNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Abbreviated name of the track.
   * Example: /// Example: CH61
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String shortName() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer shortNameAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer shortNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
   * Example: /// Example: V
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String typeCode() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeCodeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer typeCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Region code indicating where the track resides as determined by the data source.
   * Example: /// Example: 5
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String regionCode() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionCodeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer regionCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Region where the track resides.
   * Example: /// Example: North America
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String regionName() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionNameAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer regionNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The APX radar code sent and received by the aircraft for identification.
   * Example: /// Example: 5/1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String apxBeaconCode() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer apxBeaconCodeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer apxBeaconCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The receiver tanker channel identifer for air refueling tracks.
   * Example: /// Example: 31/094
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String receiverTankerChcode() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverTankerChcodeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer receiverTankerChcodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The APN radar code sent and received by the aircraft for identification.
   * Example: /// Example: 1-3-1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String apnSetting() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer apnSettingAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer apnSettingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Standard Indicator Code of the air refueling track.
   * Example: /// Example: N
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String sic() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sicAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer sicInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-09-16T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String reviewDate() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reviewDateAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer reviewDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-09-17T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String lastUsedDate() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastUsedDateAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer lastUsedDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-09-17T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String lastUpdateDate() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastUpdateDateAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer lastUpdateDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The primary UHF radio frequency used for the track route in megahertz.
   * Example: /// Example: 357.5
   * Constraints: No constraints specified.
   */
  public double priFreq() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The secondary UHF radio frequency used for the track route in megahertz.
   * Example: /// Example: 319.7
   * Constraints: No constraints specified.
   */
  public double secFreq() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Air Refueling Track Control Center message.
   * Example: /// Example: OAKLAND CTR/GUAM CERAP
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String artccMessage() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer artccMessageAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer artccMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Point of contact for the air refueling track route scheduler.
   * Example: /// Example: 97 OSS/OSOS DSN 866-5555
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String schedulerOrgName() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer schedulerOrgNameAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer schedulerOrgNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * The unit responsible for scheduling the track route.
   * Example: /// Example: 612 AOC
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String schedulerOrgUnit() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer schedulerOrgUnitAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer schedulerOrgUnitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-09-17T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String effectiveDate() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effectiveDateAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer effectiveDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Points identified within the route.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String routePoints(int j) { int o = __offset(56); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int routePointsLength() { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; }
  public StringVector routePointsVector() { return routePointsVector(new StringVector()); }
  public StringVector routePointsVector(StringVector obj) { int o = __offset(56); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Minimum and maximum altitude bounds for the track.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String altitudeBlocks(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int altitudeBlocksLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector altitudeBlocksVector() { return altitudeBlocksVector(new StringVector()); }
  public StringVector altitudeBlocksVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Point of contacts for scheduling or modifying the route.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String poc(int j) { int o = __offset(60); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int pocLength() { int o = __offset(60); return o != 0 ? __vector_len(o) : 0; }
  public StringVector pocVector() { return pocVector(new StringVector()); }
  public StringVector pocVector(StringVector obj) { int o = __offset(60); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(78); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createTrackRoute_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int typeOffset,
      int externalIdOffset,
      int directionOffset,
      int creatingOrgOffset,
      int locationTrackIdOffset,
      int trackIdOffset,
      int trackNameOffset,
      int shortNameOffset,
      int typeCodeOffset,
      int regionCodeOffset,
      int regionNameOffset,
      int apxBeaconCodeOffset,
      int receiverTankerChcodeOffset,
      int apnSettingOffset,
      int sicOffset,
      int reviewDateOffset,
      int lastUsedDateOffset,
      int lastUpdateDateOffset,
      double priFreq,
      double secFreq,
      int artccMessageOffset,
      int schedulerOrgNameOffset,
      int schedulerOrgUnitOffset,
      int effectiveDateOffset,
      int routePointsOffset,
      int altitudeBlocksOffset,
      int pocOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(38);
    TrackRoute_Abridged.addSecFreq(builder, secFreq);
    TrackRoute_Abridged.addPriFreq(builder, priFreq);
    TrackRoute_Abridged.addOrigNetwork(builder, origNetworkOffset);
    TrackRoute_Abridged.addOrigin(builder, originOffset);
    TrackRoute_Abridged.addSource(builder, sourceOffset);
    TrackRoute_Abridged.addSourceDl(builder, sourceDlOffset);
    TrackRoute_Abridged.addUpdatedBy(builder, updatedByOffset);
    TrackRoute_Abridged.addUpdatedAt(builder, updatedAtOffset);
    TrackRoute_Abridged.addCreatedBy(builder, createdByOffset);
    TrackRoute_Abridged.addCreatedAt(builder, createdAtOffset);
    TrackRoute_Abridged.addPoc(builder, pocOffset);
    TrackRoute_Abridged.addAltitudeBlocks(builder, altitudeBlocksOffset);
    TrackRoute_Abridged.addRoutePoints(builder, routePointsOffset);
    TrackRoute_Abridged.addEffectiveDate(builder, effectiveDateOffset);
    TrackRoute_Abridged.addSchedulerOrgUnit(builder, schedulerOrgUnitOffset);
    TrackRoute_Abridged.addSchedulerOrgName(builder, schedulerOrgNameOffset);
    TrackRoute_Abridged.addArtccMessage(builder, artccMessageOffset);
    TrackRoute_Abridged.addLastUpdateDate(builder, lastUpdateDateOffset);
    TrackRoute_Abridged.addLastUsedDate(builder, lastUsedDateOffset);
    TrackRoute_Abridged.addReviewDate(builder, reviewDateOffset);
    TrackRoute_Abridged.addSic(builder, sicOffset);
    TrackRoute_Abridged.addApnSetting(builder, apnSettingOffset);
    TrackRoute_Abridged.addReceiverTankerChcode(builder, receiverTankerChcodeOffset);
    TrackRoute_Abridged.addApxBeaconCode(builder, apxBeaconCodeOffset);
    TrackRoute_Abridged.addRegionName(builder, regionNameOffset);
    TrackRoute_Abridged.addRegionCode(builder, regionCodeOffset);
    TrackRoute_Abridged.addTypeCode(builder, typeCodeOffset);
    TrackRoute_Abridged.addShortName(builder, shortNameOffset);
    TrackRoute_Abridged.addTrackName(builder, trackNameOffset);
    TrackRoute_Abridged.addTrackId(builder, trackIdOffset);
    TrackRoute_Abridged.addLocationTrackId(builder, locationTrackIdOffset);
    TrackRoute_Abridged.addCreatingOrg(builder, creatingOrgOffset);
    TrackRoute_Abridged.addDirection(builder, directionOffset);
    TrackRoute_Abridged.addExternalId(builder, externalIdOffset);
    TrackRoute_Abridged.addType(builder, typeOffset);
    TrackRoute_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    TrackRoute_Abridged.addId(builder, idOffset);
    TrackRoute_Abridged.addDataMode(builder, dataMode);
    return TrackRoute_Abridged.endTrackRoute_Abridged(builder);
  }

  public static void startTrackRoute_Abridged(FlatBufferBuilder builder) { builder.startTable(38); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(2, typeOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(3, externalIdOffset, 0); }
  public static void addDirection(FlatBufferBuilder builder, int directionOffset) { builder.addOffset(4, directionOffset, 0); }
  public static void addCreatingOrg(FlatBufferBuilder builder, int creatingOrgOffset) { builder.addOffset(5, creatingOrgOffset, 0); }
  public static void addLocationTrackId(FlatBufferBuilder builder, int locationTrackIdOffset) { builder.addOffset(6, locationTrackIdOffset, 0); }
  public static void addTrackId(FlatBufferBuilder builder, int trackIdOffset) { builder.addOffset(7, trackIdOffset, 0); }
  public static void addTrackName(FlatBufferBuilder builder, int trackNameOffset) { builder.addOffset(8, trackNameOffset, 0); }
  public static void addShortName(FlatBufferBuilder builder, int shortNameOffset) { builder.addOffset(9, shortNameOffset, 0); }
  public static void addTypeCode(FlatBufferBuilder builder, int typeCodeOffset) { builder.addOffset(10, typeCodeOffset, 0); }
  public static void addRegionCode(FlatBufferBuilder builder, int regionCodeOffset) { builder.addOffset(11, regionCodeOffset, 0); }
  public static void addRegionName(FlatBufferBuilder builder, int regionNameOffset) { builder.addOffset(12, regionNameOffset, 0); }
  public static void addApxBeaconCode(FlatBufferBuilder builder, int apxBeaconCodeOffset) { builder.addOffset(13, apxBeaconCodeOffset, 0); }
  public static void addReceiverTankerChcode(FlatBufferBuilder builder, int receiverTankerChcodeOffset) { builder.addOffset(14, receiverTankerChcodeOffset, 0); }
  public static void addApnSetting(FlatBufferBuilder builder, int apnSettingOffset) { builder.addOffset(15, apnSettingOffset, 0); }
  public static void addSic(FlatBufferBuilder builder, int sicOffset) { builder.addOffset(16, sicOffset, 0); }
  public static void addReviewDate(FlatBufferBuilder builder, int reviewDateOffset) { builder.addOffset(17, reviewDateOffset, 0); }
  public static void addLastUsedDate(FlatBufferBuilder builder, int lastUsedDateOffset) { builder.addOffset(18, lastUsedDateOffset, 0); }
  public static void addLastUpdateDate(FlatBufferBuilder builder, int lastUpdateDateOffset) { builder.addOffset(19, lastUpdateDateOffset, 0); }
  public static void addPriFreq(FlatBufferBuilder builder, double priFreq) { builder.addDouble(20, priFreq, 0.0); }
  public static void addSecFreq(FlatBufferBuilder builder, double secFreq) { builder.addDouble(21, secFreq, 0.0); }
  public static void addArtccMessage(FlatBufferBuilder builder, int artccMessageOffset) { builder.addOffset(22, artccMessageOffset, 0); }
  public static void addSchedulerOrgName(FlatBufferBuilder builder, int schedulerOrgNameOffset) { builder.addOffset(23, schedulerOrgNameOffset, 0); }
  public static void addSchedulerOrgUnit(FlatBufferBuilder builder, int schedulerOrgUnitOffset) { builder.addOffset(24, schedulerOrgUnitOffset, 0); }
  public static void addEffectiveDate(FlatBufferBuilder builder, int effectiveDateOffset) { builder.addOffset(25, effectiveDateOffset, 0); }
  public static void addRoutePoints(FlatBufferBuilder builder, int routePointsOffset) { builder.addOffset(26, routePointsOffset, 0); }
  public static int createRoutePointsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRoutePointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAltitudeBlocks(FlatBufferBuilder builder, int altitudeBlocksOffset) { builder.addOffset(27, altitudeBlocksOffset, 0); }
  public static int createAltitudeBlocksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAltitudeBlocksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPoc(FlatBufferBuilder builder, int pocOffset) { builder.addOffset(28, pocOffset, 0); }
  public static int createPocVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPocVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(29, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(30, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(31, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(32, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(33, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(34, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(35, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(36, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(37, dataMode, 0); }
  public static int endTrackRoute_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTrackRoute_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "TRAC"); }
  public static void finishSizePrefixedTrackRoute_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "TRAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackRoute_Abridged get(int j) { return get(new TrackRoute_Abridged(), j); }
    public TrackRoute_Abridged get(TrackRoute_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

