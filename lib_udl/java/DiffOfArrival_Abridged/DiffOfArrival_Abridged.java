// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of Signal time and frequency difference of arrival (TDOA/FDOA) information obtained by using passive RF based sensor phenomenologies and sensor triangulation.
 */
@SuppressWarnings("unused")
public final class DiffOfArrival_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DiffOfArrival_Abridged getRootAsDiffOfArrival_Abridged(ByteBuffer _bb) { return getRootAsDiffOfArrival_Abridged(_bb, new DiffOfArrival_Abridged()); }
  public static DiffOfArrival_Abridged getRootAsDiffOfArrival_Abridged(ByteBuffer _bb, DiffOfArrival_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DiffOfArrival_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DIFF"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DiffOfArrival_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: DIFFOFARRIVAL-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the target on-orbit object, if correlated.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Sensor ID of the primary/1st sensor used for this measurement.
   * Example: /// Example: SENSOR1-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor1() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensor1AsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idSensor1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Sensor ID of the secondary/2nd sensor used for this measurement.
   * Example: /// Example: SENSOR2-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor2() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensor2AsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idSensor2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Catalog number of the target on-orbit object.
   * Example: /// Example: 25544
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier to indicate the specific tasking which produced this observation.
   * Example: /// Example: TASK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String taskId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer taskIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Optional identifier provided by DOA source to indicate the primary/1st sensor identifier used for this measurement. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR1-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId1() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorId1AsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer origSensorId1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Optional identifier provided by DOA source to indicate the secondary/2nd sensor identifier used for this this observation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR2-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId2() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorId2AsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer origSensorId2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The signal arrival delay relative to sensor 1 in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double sensor1Delay() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The signal arrival delay relative to sensor 2 in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double sensor2Delay() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double senlat() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 120.1
   * Constraints: No constraints specified.
   */
  public double senlon() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor 2 WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double sen2lat() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor 2 WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double sen2lon() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor 2 altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double sen2alt() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Center frequency of the collect in Hz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double frequency() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Bandwidth of the signal in Hz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double bandwidth() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Delta range, in km. Delta range calculation convention is (sensor2 - sensor1).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double deltaRange() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in delta range, in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double deltaRangeUnc() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Delta range rate, in km/sec. Delta range rate calculation convention is (sensor2 - sensor1).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double deltaRangeRate() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the delta range rate, in km/sec.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double deltaRangeRateUnc() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Signal to noise ratio, in dB.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double snr() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time difference of arrival of the center frequency signal, in seconds.  TDOA calculation convention is (sensor2 - sensor1).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double tdoa() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in time difference of arrival of the center frequency signal, in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double tdoaUnc() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Frequency difference of arrival of the center frequency signal, in Hz.  FDOA calculation convention is (sensor2 - sensor1).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double fdoa() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in frequency difference of arrival of the center frequency signal, in Hz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double fdoaUnc() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
   * Example: /// Example: SURVEY
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String collectionMode() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionModeAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer collectionModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: Example descriptor
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }

  public static int createDiffOfArrival_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int obTimeOffset,
      int idOnOrbitOffset,
      int idSensor1Offset,
      int idSensor2Offset,
      int satNo,
      int taskIdOffset,
      int origObjectIdOffset,
      int origSensorId1Offset,
      int origSensorId2Offset,
      boolean uct,
      double sensor1Delay,
      double sensor2Delay,
      double senlat,
      double senlon,
      double senalt,
      double sen2lat,
      double sen2lon,
      double sen2alt,
      double frequency,
      double bandwidth,
      double deltaRange,
      double deltaRangeUnc,
      double deltaRangeRate,
      double deltaRangeRateUnc,
      double snr,
      double tdoa,
      double tdoaUnc,
      double fdoa,
      double fdoaUnc,
      int collectionModeOffset,
      int sourceOffset,
      byte dataMode,
      int originOffset,
      int createdAtOffset,
      int createdByOffset,
      int descriptorOffset,
      int transactionIdOffset,
      int origNetworkOffset,
      int sourceDlOffset) {
    builder.startTable(41);
    DiffOfArrival_Abridged.addFdoaUnc(builder, fdoaUnc);
    DiffOfArrival_Abridged.addFdoa(builder, fdoa);
    DiffOfArrival_Abridged.addTdoaUnc(builder, tdoaUnc);
    DiffOfArrival_Abridged.addTdoa(builder, tdoa);
    DiffOfArrival_Abridged.addSnr(builder, snr);
    DiffOfArrival_Abridged.addDeltaRangeRateUnc(builder, deltaRangeRateUnc);
    DiffOfArrival_Abridged.addDeltaRangeRate(builder, deltaRangeRate);
    DiffOfArrival_Abridged.addDeltaRangeUnc(builder, deltaRangeUnc);
    DiffOfArrival_Abridged.addDeltaRange(builder, deltaRange);
    DiffOfArrival_Abridged.addBandwidth(builder, bandwidth);
    DiffOfArrival_Abridged.addFrequency(builder, frequency);
    DiffOfArrival_Abridged.addSen2alt(builder, sen2alt);
    DiffOfArrival_Abridged.addSen2lon(builder, sen2lon);
    DiffOfArrival_Abridged.addSen2lat(builder, sen2lat);
    DiffOfArrival_Abridged.addSenalt(builder, senalt);
    DiffOfArrival_Abridged.addSenlon(builder, senlon);
    DiffOfArrival_Abridged.addSenlat(builder, senlat);
    DiffOfArrival_Abridged.addSensor2Delay(builder, sensor2Delay);
    DiffOfArrival_Abridged.addSensor1Delay(builder, sensor1Delay);
    DiffOfArrival_Abridged.addSourceDl(builder, sourceDlOffset);
    DiffOfArrival_Abridged.addOrigNetwork(builder, origNetworkOffset);
    DiffOfArrival_Abridged.addTransactionId(builder, transactionIdOffset);
    DiffOfArrival_Abridged.addDescriptor(builder, descriptorOffset);
    DiffOfArrival_Abridged.addCreatedBy(builder, createdByOffset);
    DiffOfArrival_Abridged.addCreatedAt(builder, createdAtOffset);
    DiffOfArrival_Abridged.addOrigin(builder, originOffset);
    DiffOfArrival_Abridged.addSource(builder, sourceOffset);
    DiffOfArrival_Abridged.addCollectionMode(builder, collectionModeOffset);
    DiffOfArrival_Abridged.addOrigSensorId2(builder, origSensorId2Offset);
    DiffOfArrival_Abridged.addOrigSensorId1(builder, origSensorId1Offset);
    DiffOfArrival_Abridged.addOrigObjectId(builder, origObjectIdOffset);
    DiffOfArrival_Abridged.addTaskId(builder, taskIdOffset);
    DiffOfArrival_Abridged.addSatNo(builder, satNo);
    DiffOfArrival_Abridged.addIdSensor2(builder, idSensor2Offset);
    DiffOfArrival_Abridged.addIdSensor1(builder, idSensor1Offset);
    DiffOfArrival_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    DiffOfArrival_Abridged.addObTime(builder, obTimeOffset);
    DiffOfArrival_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    DiffOfArrival_Abridged.addId(builder, idOffset);
    DiffOfArrival_Abridged.addDataMode(builder, dataMode);
    DiffOfArrival_Abridged.addUct(builder, uct);
    return DiffOfArrival_Abridged.endDiffOfArrival_Abridged(builder);
  }

  public static void startDiffOfArrival_Abridged(FlatBufferBuilder builder) { builder.startTable(41); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(2, obTimeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(3, idOnOrbitOffset, 0); }
  public static void addIdSensor1(FlatBufferBuilder builder, int idSensor1Offset) { builder.addOffset(4, idSensor1Offset, 0); }
  public static void addIdSensor2(FlatBufferBuilder builder, int idSensor2Offset) { builder.addOffset(5, idSensor2Offset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(6, satNo, 0); }
  public static void addTaskId(FlatBufferBuilder builder, int taskIdOffset) { builder.addOffset(7, taskIdOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(8, origObjectIdOffset, 0); }
  public static void addOrigSensorId1(FlatBufferBuilder builder, int origSensorId1Offset) { builder.addOffset(9, origSensorId1Offset, 0); }
  public static void addOrigSensorId2(FlatBufferBuilder builder, int origSensorId2Offset) { builder.addOffset(10, origSensorId2Offset, 0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(11, uct, false); }
  public static void addSensor1Delay(FlatBufferBuilder builder, double sensor1Delay) { builder.addDouble(12, sensor1Delay, 0.0); }
  public static void addSensor2Delay(FlatBufferBuilder builder, double sensor2Delay) { builder.addDouble(13, sensor2Delay, 0.0); }
  public static void addSenlat(FlatBufferBuilder builder, double senlat) { builder.addDouble(14, senlat, 0.0); }
  public static void addSenlon(FlatBufferBuilder builder, double senlon) { builder.addDouble(15, senlon, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(16, senalt, 0.0); }
  public static void addSen2lat(FlatBufferBuilder builder, double sen2lat) { builder.addDouble(17, sen2lat, 0.0); }
  public static void addSen2lon(FlatBufferBuilder builder, double sen2lon) { builder.addDouble(18, sen2lon, 0.0); }
  public static void addSen2alt(FlatBufferBuilder builder, double sen2alt) { builder.addDouble(19, sen2alt, 0.0); }
  public static void addFrequency(FlatBufferBuilder builder, double frequency) { builder.addDouble(20, frequency, 0.0); }
  public static void addBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.addDouble(21, bandwidth, 0.0); }
  public static void addDeltaRange(FlatBufferBuilder builder, double deltaRange) { builder.addDouble(22, deltaRange, 0.0); }
  public static void addDeltaRangeUnc(FlatBufferBuilder builder, double deltaRangeUnc) { builder.addDouble(23, deltaRangeUnc, 0.0); }
  public static void addDeltaRangeRate(FlatBufferBuilder builder, double deltaRangeRate) { builder.addDouble(24, deltaRangeRate, 0.0); }
  public static void addDeltaRangeRateUnc(FlatBufferBuilder builder, double deltaRangeRateUnc) { builder.addDouble(25, deltaRangeRateUnc, 0.0); }
  public static void addSnr(FlatBufferBuilder builder, double snr) { builder.addDouble(26, snr, 0.0); }
  public static void addTdoa(FlatBufferBuilder builder, double tdoa) { builder.addDouble(27, tdoa, 0.0); }
  public static void addTdoaUnc(FlatBufferBuilder builder, double tdoaUnc) { builder.addDouble(28, tdoaUnc, 0.0); }
  public static void addFdoa(FlatBufferBuilder builder, double fdoa) { builder.addDouble(29, fdoa, 0.0); }
  public static void addFdoaUnc(FlatBufferBuilder builder, double fdoaUnc) { builder.addDouble(30, fdoaUnc, 0.0); }
  public static void addCollectionMode(FlatBufferBuilder builder, int collectionModeOffset) { builder.addOffset(31, collectionModeOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(32, sourceOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(33, dataMode, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(34, originOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(35, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(36, createdByOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(37, descriptorOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(38, transactionIdOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(39, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(40, sourceDlOffset, 0); }
  public static int endDiffOfArrival_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDiffOfArrival_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DIFF"); }
  public static void finishSizePrefixedDiffOfArrival_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DIFF"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DiffOfArrival_Abridged get(int j) { return get(new DiffOfArrival_Abridged(), j); }
    public DiffOfArrival_Abridged get(DiffOfArrival_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

