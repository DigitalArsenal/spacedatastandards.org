// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
 */
@SuppressWarnings("unused")
public final class DataLinkOps_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DataLinkOps_Full getRootAsDataLinkOps_Full(ByteBuffer _bb) { return getRootAsDataLinkOps_Full(_bb, new DataLinkOps_Full()); }
  public static DataLinkOps_Full getRootAsDataLinkOps_Full(ByteBuffer _bb, DataLinkOps_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DataLinkOps_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataLinkOps_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Name of the data link.
   * Example: /// Example: Link-16
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String linkName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer linkNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String linkStartTime() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkStartTimeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer linkStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-08T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String linkStopTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkStopTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer linkStopTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
   * Example: /// Example: AFTER
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String linkStopTimeMod() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkStopTimeModAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer linkStopTimeModInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Detailed characteristics of the data link.
   * Example: /// Example: Link details
   * Constraints: Minimum length = 0, Maximum length = 3000
   */
  public String linkDetails() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkDetailsAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer linkDetailsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createDataLinkOps_Full(FlatBufferBuilder builder,
      int linkNameOffset,
      int linkStartTimeOffset,
      int linkStopTimeOffset,
      int linkStopTimeModOffset,
      int linkDetailsOffset) {
    builder.startTable(5);
    DataLinkOps_Full.addLinkDetails(builder, linkDetailsOffset);
    DataLinkOps_Full.addLinkStopTimeMod(builder, linkStopTimeModOffset);
    DataLinkOps_Full.addLinkStopTime(builder, linkStopTimeOffset);
    DataLinkOps_Full.addLinkStartTime(builder, linkStartTimeOffset);
    DataLinkOps_Full.addLinkName(builder, linkNameOffset);
    return DataLinkOps_Full.endDataLinkOps_Full(builder);
  }

  public static void startDataLinkOps_Full(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addLinkName(FlatBufferBuilder builder, int linkNameOffset) { builder.addOffset(0, linkNameOffset, 0); }
  public static void addLinkStartTime(FlatBufferBuilder builder, int linkStartTimeOffset) { builder.addOffset(1, linkStartTimeOffset, 0); }
  public static void addLinkStopTime(FlatBufferBuilder builder, int linkStopTimeOffset) { builder.addOffset(2, linkStopTimeOffset, 0); }
  public static void addLinkStopTimeMod(FlatBufferBuilder builder, int linkStopTimeModOffset) { builder.addOffset(3, linkStopTimeModOffset, 0); }
  public static void addLinkDetails(FlatBufferBuilder builder, int linkDetailsOffset) { builder.addOffset(4, linkDetailsOffset, 0); }
  public static int endDataLinkOps_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDataLinkOps_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DATA"); }
  public static void finishSizePrefixedDataLinkOps_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DATA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataLinkOps_Full get(int j) { return get(new DataLinkOps_Full(), j); }
    public DataLinkOps_Full get(DataLinkOps_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

