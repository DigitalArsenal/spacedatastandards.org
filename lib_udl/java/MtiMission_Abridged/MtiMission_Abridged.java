// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
 */
@SuppressWarnings("unused")
public final class MtiMission_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiMission_Abridged getRootAsMtiMission_Abridged(ByteBuffer _bb) { return getRootAsMtiMission_Abridged(_bb, new MtiMission_Abridged()); }
  public static MtiMission_Abridged getRootAsMtiMission_Abridged(ByteBuffer _bb, MtiMission_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiMission_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTIM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiMission_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The mission plan id.
   * Example: /// Example: M1-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String m1() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m1AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer m1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique identification of the flight plan.
   * Example: /// Example: M2-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String m2() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m2AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer m2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Platform type that originated the data.
   * Example: /// Example: PLATFORM
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String m3() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m3AsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer m3InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Identification of the platform variant, modifications, etc.
   * Example: /// Example: IDENT
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String m4() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m4AsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer m4InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Mission origination date.
   * Example: /// Example: 2018-01-01
   * Constraints: No constraints specified.
   */
  public String msnRefTs() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnRefTsAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer msnRefTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createMtiMission_Abridged(FlatBufferBuilder builder,
      int m1Offset,
      int m2Offset,
      int m3Offset,
      int m4Offset,
      int msnRefTsOffset) {
    builder.startTable(5);
    MtiMission_Abridged.addMsnRefTs(builder, msnRefTsOffset);
    MtiMission_Abridged.addM4(builder, m4Offset);
    MtiMission_Abridged.addM3(builder, m3Offset);
    MtiMission_Abridged.addM2(builder, m2Offset);
    MtiMission_Abridged.addM1(builder, m1Offset);
    return MtiMission_Abridged.endMtiMission_Abridged(builder);
  }

  public static void startMtiMission_Abridged(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addM1(FlatBufferBuilder builder, int m1Offset) { builder.addOffset(0, m1Offset, 0); }
  public static void addM2(FlatBufferBuilder builder, int m2Offset) { builder.addOffset(1, m2Offset, 0); }
  public static void addM3(FlatBufferBuilder builder, int m3Offset) { builder.addOffset(2, m3Offset, 0); }
  public static void addM4(FlatBufferBuilder builder, int m4Offset) { builder.addOffset(3, m4Offset, 0); }
  public static void addMsnRefTs(FlatBufferBuilder builder, int msnRefTsOffset) { builder.addOffset(4, msnRefTsOffset, 0); }
  public static int endMtiMission_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiMission_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTIM"); }
  public static void finishSizePrefixedMtiMission_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTIM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiMission_Abridged get(int j) { return get(new MtiMission_Abridged(), j); }
    public MtiMission_Abridged get(MtiMission_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

