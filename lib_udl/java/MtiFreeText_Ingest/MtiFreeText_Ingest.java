// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Provides a means of sending Basic Character Set alphanumeric text messages.
 */
@SuppressWarnings("unused")
public final class MtiFreeText_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiFreeText_Ingest getRootAsMtiFreeText_Ingest(ByteBuffer _bb) { return getRootAsMtiFreeText_Ingest(_bb, new MtiFreeText_Ingest()); }
  public static MtiFreeText_Ingest getRootAsMtiFreeText_Ingest(ByteBuffer _bb, MtiFreeText_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiFreeText_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTIF"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiFreeText_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The originator of the Free Text message.
   * Example: /// Example: ORIGINATOR
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String f1() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer f1AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer f1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The recipient for which the Free Text message is intended.
   * Example: /// Example: RECIPIENT
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String f2() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer f2AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer f2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Free text data message.
   * Example: /// Example: TEXT
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String f3() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer f3AsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer f3InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createMtiFreeText_Ingest(FlatBufferBuilder builder,
      int f1Offset,
      int f2Offset,
      int f3Offset) {
    builder.startTable(3);
    MtiFreeText_Ingest.addF3(builder, f3Offset);
    MtiFreeText_Ingest.addF2(builder, f2Offset);
    MtiFreeText_Ingest.addF1(builder, f1Offset);
    return MtiFreeText_Ingest.endMtiFreeText_Ingest(builder);
  }

  public static void startMtiFreeText_Ingest(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addF1(FlatBufferBuilder builder, int f1Offset) { builder.addOffset(0, f1Offset, 0); }
  public static void addF2(FlatBufferBuilder builder, int f2Offset) { builder.addOffset(1, f2Offset, 0); }
  public static void addF3(FlatBufferBuilder builder, int f3Offset) { builder.addOffset(2, f3Offset, 0); }
  public static int endMtiFreeText_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiFreeText_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTIF"); }
  public static void finishSizePrefixedMtiFreeText_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTIF"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiFreeText_Ingest get(int j) { return get(new MtiFreeText_Ingest(), j); }
    public MtiFreeText_Ingest get(MtiFreeText_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

