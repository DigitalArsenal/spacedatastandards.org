// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A single space environment observation.
 */
@SuppressWarnings("unused")
public final class SEObservation_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SEObservation_Abridged getRootAsSEObservation_Abridged(ByteBuffer _bb) { return getRootAsSEObservation_Abridged(_bb, new SEObservation_Abridged()); }
  public static SEObservation_Abridged getRootAsSEObservation_Abridged(ByteBuffer _bb, SEObservation_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SEObservation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SEOB"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SEObservation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The type of observation associated with this record.
   * Example: /// Example: INTEGRAL FLUX
   * Constraints: Minimum length = 1, Maximum length = 24
   */
  public String obType() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTypeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer obTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
   * Example: /// Example: particles/cm^2/s/sr
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String obUoM() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obUoMAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer obUoMInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
   * Example: /// Example: 0.487687826
   * Constraints: No constraints specified.
   */
  public double obValue() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
   * Example: /// Example: C1.3
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String obString() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obStringAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer obStringInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
   * Example: /// Example: [1.7, 35.6, 21.2, 19.01]
   * Constraints: No constraints specified.
   */
  public String obArray(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int obArrayLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public StringVector obArrayVector() { return obArrayVector(new StringVector()); }
  public StringVector obArrayVector(StringVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean obBool() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
   * Example: /// Example: GOOD
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String obQuality() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obQualityAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer obQualityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Descriptive or additional information associated with this individual observation.
   * Example: /// Example: Observation Description Text
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String obDescription() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obDescriptionAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer obDescriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static int createSEObservation_Abridged(FlatBufferBuilder builder,
      int obTypeOffset,
      int obUoMOffset,
      double obValue,
      int obStringOffset,
      int obArrayOffset,
      boolean obBool,
      int obQualityOffset,
      int obDescriptionOffset) {
    builder.startTable(8);
    SEObservation_Abridged.addObValue(builder, obValue);
    SEObservation_Abridged.addObDescription(builder, obDescriptionOffset);
    SEObservation_Abridged.addObQuality(builder, obQualityOffset);
    SEObservation_Abridged.addObArray(builder, obArrayOffset);
    SEObservation_Abridged.addObString(builder, obStringOffset);
    SEObservation_Abridged.addObUoM(builder, obUoMOffset);
    SEObservation_Abridged.addObType(builder, obTypeOffset);
    SEObservation_Abridged.addObBool(builder, obBool);
    return SEObservation_Abridged.endSEObservation_Abridged(builder);
  }

  public static void startSEObservation_Abridged(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addObType(FlatBufferBuilder builder, int obTypeOffset) { builder.addOffset(0, obTypeOffset, 0); }
  public static void addObUoM(FlatBufferBuilder builder, int obUoMOffset) { builder.addOffset(1, obUoMOffset, 0); }
  public static void addObValue(FlatBufferBuilder builder, double obValue) { builder.addDouble(2, obValue, 0.0); }
  public static void addObString(FlatBufferBuilder builder, int obStringOffset) { builder.addOffset(3, obStringOffset, 0); }
  public static void addObArray(FlatBufferBuilder builder, int obArrayOffset) { builder.addOffset(4, obArrayOffset, 0); }
  public static int createObArrayVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObArrayVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addObBool(FlatBufferBuilder builder, boolean obBool) { builder.addBoolean(5, obBool, false); }
  public static void addObQuality(FlatBufferBuilder builder, int obQualityOffset) { builder.addOffset(6, obQualityOffset, 0); }
  public static void addObDescription(FlatBufferBuilder builder, int obDescriptionOffset) { builder.addOffset(7, obDescriptionOffset, 0); }
  public static int endSEObservation_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSEObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SEOB"); }
  public static void finishSizePrefixedSEObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SEOB"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SEObservation_Abridged get(int j) { return get(new SEObservation_Abridged(), j); }
    public SEObservation_Abridged get(SEObservation_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

