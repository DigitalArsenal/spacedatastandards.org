// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Additional start and stop for the collection.
 */
@SuppressWarnings("unused")
public final class ISRCollectionAdditional_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionAdditional_Ingest getRootAsISRCollectionAdditional_Ingest(ByteBuffer _bb) { return getRootAsISRCollectionAdditional_Ingest(_bb, new ISRCollectionAdditional_Ingest()); }
  public static ISRCollectionAdditional_Ingest getRootAsISRCollectionAdditional_Ingest(ByteBuffer _bb, ISRCollectionAdditional_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ISRCollectionAdditional_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ISRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ISRCollectionAdditional_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique Identifier of additional collection period.
   * Example: /// Example: ISRCOLLECTIONADDITIONAL
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Start time of collection, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-19T01:01:15.001Z
   * Constraints: No constraints specified.
   */
  public String start() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer startInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Stop time of collection, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-19T01:01:15.001Z
   * Constraints: No constraints specified.
   */
  public String stop() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stopAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer stopInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createISRCollectionAdditional_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int startOffset,
      int stopOffset) {
    builder.startTable(3);
    ISRCollectionAdditional_Ingest.addStop(builder, stopOffset);
    ISRCollectionAdditional_Ingest.addStart(builder, startOffset);
    ISRCollectionAdditional_Ingest.addId(builder, idOffset);
    return ISRCollectionAdditional_Ingest.endISRCollectionAdditional_Ingest(builder);
  }

  public static void startISRCollectionAdditional_Ingest(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addStart(FlatBufferBuilder builder, int startOffset) { builder.addOffset(1, startOffset, 0); }
  public static void addStop(FlatBufferBuilder builder, int stopOffset) { builder.addOffset(2, stopOffset, 0); }
  public static int endISRCollectionAdditional_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishISRCollectionAdditional_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ISRC"); }
  public static void finishSizePrefixedISRCollectionAdditional_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ISRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ISRCollectionAdditional_Ingest get(int j) { return get(new ISRCollectionAdditional_Ingest(), j); }
    public ISRCollectionAdditional_Ingest get(ISRCollectionAdditional_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

