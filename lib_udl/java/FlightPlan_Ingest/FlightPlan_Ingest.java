// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
 */
@SuppressWarnings("unused")
public final class FlightPlan_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static FlightPlan_Ingest getRootAsFlightPlan_Ingest(ByteBuffer _bb) { return getRootAsFlightPlan_Ingest(_bb, new FlightPlan_Ingest()); }
  public static FlightPlan_Ingest getRootAsFlightPlan_Ingest(ByteBuffer _bb, FlightPlan_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean FlightPlan_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "FLIG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlightPlan_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
   * Example: /// Example: AJM7939B1123
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String amcMissionId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amcMissionIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer amcMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The UDL unique identifier of the aircraft sortie associated with this flight plan.
   * Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSortie() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSortieAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The UDL unique identifier of the aircraft associated with this flight plan.
   * Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAircraft() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAircraftAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idAircraftInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The leg number of this flight plan.
   * Example: /// Example: 100
   * Constraints: No constraints specified.
   */
  public int legNum() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The UDL unique identifier of the departure airfield associated with this flight plan.
   * Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idDepAirfield() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idDepAirfieldAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idDepAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
   * Example: /// Example: KSLV
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String depAirfield() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depAirfieldAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer depAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The UDL unique identifier of the arrival airfield associated with this flight plan.
   * Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idArrAirfield() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idArrAirfieldAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer idArrAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
   * Example: /// Example: KCHS
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String arrAirfield() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrAirfieldAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer arrAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The source ID of the flight plan from the generating system.
   * Example: /// Example: AFMAPP20322347140001
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2023-05-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String genTs() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer genTsAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer genTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
   * Example: /// Example: KC-130 HERCULES
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String aircraftMds() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer aircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The tail number of the aircraft associated with this flight plan.
   * Example: /// Example: 77187
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tailNumber() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tailNumberAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer tailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The call sign assigned to the aircraft for this flight plan.
   * Example: /// Example: HKY629
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String callSign() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2023-05-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String wxValidStart() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wxValidStartAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer wxValidStartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2023-05-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String wxValidEnd() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wxValidEndAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer wxValidEndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2023-05-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String estDepTime() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estDepTimeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer estDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The percent degrade due to drag for this aircraft.
   * Example: /// Example: 16.9
   * Constraints: No constraints specified.
   */
  public double dragIndex() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The fuel degrade percentage used for this mission.
   * Example: /// Example: 10.3
   * Constraints: No constraints specified.
   */
  public double fuelDegrade() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Operating weight of the aircraft in pounds.
   * Example: /// Example: 251830.5
   * Constraints: No constraints specified.
   */
  public double opWeight() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
   * Example: /// Example: 44.1
   * Constraints: No constraints specified.
   */
  public double msnIndex() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
   * Example: /// Example: 180000.1
   * Constraints: No constraints specified.
   */
  public double rampFuel() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to start engines and taxi to the end of the runway in pounds.
   * Example: /// Example: 1500.1
   * Constraints: No constraints specified.
   */
  public double taxiFuel() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
   * Example: /// Example: 178500.1
   * Constraints: No constraints specified.
   */
  public double takeoffFuel() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required from brake release to Top of Climb in pounds.
   * Example: /// Example: 7000.1
   * Constraints: No constraints specified.
   */
  public double climbFuel() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time required from brake release to Top of Climb expressed as HH:MM.
   * Example: /// Example: 00:13
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String climbTime() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer climbTimeAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer climbTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Additional fuel burned at Top of Climb in pounds.
   * Example: /// Example: 500.1
   * Constraints: No constraints specified.
   */
  public double holdDownFuel() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional fuel burned at Top of Climb for icing in pounds.
   * Example: /// Example: 1000.1
   * Constraints: No constraints specified.
   */
  public double tocIceFuel() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel remaining at Top of Climb in pounds.
   * Example: /// Example: 160000.1
   * Constraints: No constraints specified.
   */
  public double tocFuel() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to fly from Top of Climb to Top of Descent in pounds.
   * Example: /// Example: 155000.1
   * Constraints: No constraints specified.
   */
  public double enrouteFuel() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
   * Example: /// Example: 06:30
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String enrouteTime() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer enrouteTimeAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer enrouteTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
   * Example: /// Example: 1000.1
   * Constraints: No constraints specified.
   */
  public double thunderAvoidFuel() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional fuel burned at Top of Descent for icing in pounds.
   * Example: /// Example: 2000.1
   * Constraints: No constraints specified.
   */
  public double todIceFuel() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional fuel burned at Top of Descent for the operational condition in pounds.
   * Example: /// Example: 5000.1
   * Constraints: No constraints specified.
   */
  public double opConditionFuel() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel remaining at Top of Descent in pounds.
   * Example: /// Example: 32000.1
   * Constraints: No constraints specified.
   */
  public double todFuel() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional fuel burned at landing/missed approach for an early descent in pounds.
   * Example: /// Example: 500.1
   * Constraints: No constraints specified.
   */
  public double earlyDescentFuel() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional fuel burned at landing/missed approach for icing during arrival in pounds.
   * Example: /// Example: 1000.1
   * Constraints: No constraints specified.
   */
  public double arrIceFuel() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional fuel burned at the destination for holding in pounds.
   * Example: /// Example: 6000.1
   * Constraints: No constraints specified.
   */
  public double holdFuel() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional time for holding at the destination expressed as HH:MM.
   * Example: /// Example: 01:00
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String holdTime() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer holdTimeAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer holdTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Fuel burned from the initial approach point to landing in pounds.
   * Example: /// Example: 3000.1
   * Constraints: No constraints specified.
   */
  public double appLandingFuel() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel planned to be burned during the flight in pounds.
   * Example: /// Example: 145000.1
   * Constraints: No constraints specified.
   */
  public double burnedFuel() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel planned to be remaining on the airplane at landing in pounds.
   * Example: /// Example: 19000.1
   * Constraints: No constraints specified.
   */
  public double landingFuel() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum fuel on board required to divert in pounds.
   * Example: /// Example: 25000.1
   * Constraints: No constraints specified.
   */
  public double minDivertFuel() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to fly to alternate landing site 1 and land in pounds.
   * Example: /// Example: 6000.1
   * Constraints: No constraints specified.
   */
  public double arrAlternate1Fuel() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to fly to alternate landing site 2 and land in pounds.
   * Example: /// Example: 6000.1
   * Constraints: No constraints specified.
   */
  public double arrAlternate2Fuel() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of contingency fuel in pounds.
   * Example: /// Example: 3000.1
   * Constraints: No constraints specified.
   */
  public double contingencyFuel() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of reserve fuel in pounds.
   * Example: /// Example: 10000.1
   * Constraints: No constraints specified.
   */
  public double reserveFuel() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
   * Example: /// Example: 20000.1
   * Constraints: No constraints specified.
   */
  public double depressFuel() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of unusable fuel in pounds.
   * Example: /// Example: 2300.1
   * Constraints: No constraints specified.
   */
  public double unusableFuel() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of unidentified extra fuel required to get to min landing in pounds.
   * Example: /// Example: 5000.1
   * Constraints: No constraints specified.
   */
  public double unidentExtraFuel() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of identified extra fuel carried and not available in the burn plan in pounds.
   * Example: /// Example: 5000.1
   * Constraints: No constraints specified.
   */
  public double identExtraFuel() { int o = __offset(106); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total fuel remaining at alternate landing site 1 in pounds.
   * Example: /// Example: 18000.1
   * Constraints: No constraints specified.
   */
  public double remAlternate1Fuel() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total fuel remaining at alternate landing site 2 in pounds.
   * Example: /// Example: 18000.1
   * Constraints: No constraints specified.
   */
  public double remAlternate2Fuel() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total endurance time based on the fuel on board expressed as HH:MM.
   * Example: /// Example: 08:45
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String enduranceTime() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer enduranceTimeAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer enduranceTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * Name of the planned Standard Instrument Departure (SID) procedure.
   * Example: /// Example: RENV3B
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String sid() { int o = __offset(114); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sidAsByteBuffer() { return __vector_as_bytebuffer(114, 1); }
  public ByteBuffer sidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 1); }
  /**
   * Name of the planned Standard Terminal Arrival (STAR) procedure.
   * Example: /// Example: ADANA
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String star() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer starAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer starInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
   * Example: /// Example: Failed by FAA SAPT 184022AUG2022
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String gpsRaim() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gpsRaimAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer gpsRaimInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * The departure runway for this flight.
   * Example: /// Example: 05L
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String depRunway() { int o = __offset(120); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depRunwayAsByteBuffer() { return __vector_as_bytebuffer(120, 1); }
  public ByteBuffer depRunwayInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 1); }
  /**
   * The arrival runway for this flight.
   * Example: /// Example: 05L
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String arrRunway() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrRunwayAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer arrRunwayInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
   * Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
   * GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
   * ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String routeString() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer routeStringAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer routeStringInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
   * Example: /// Example: ['US', 'CA', 'UK']
   * Constraints: No constraints specified.
   */
  public String countryCodes(int j) { int o = __offset(126); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int countryCodesLength() { int o = __offset(126); return o != 0 ? __vector_len(o) : 0; }
  public StringVector countryCodesVector() { return countryCodesVector(new StringVector()); }
  public StringVector countryCodesVector(StringVector obj) { int o = __offset(126); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The Extended Operations (ETOPS) rating used to calculate this flight plan.
   * Example: /// Example: 85 MINUTES
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String etopsRating() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer etopsRatingAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer etopsRatingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
   * Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
   * Constraints: No constraints specified.
   */
  public String etopsAirfields(int j) { int o = __offset(130); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int etopsAirfieldsLength() { int o = __offset(130); return o != 0 ? __vector_len(o) : 0; }
  public StringVector etopsAirfieldsVector() { return etopsAirfieldsVector(new StringVector()); }
  public StringVector etopsAirfieldsVector(StringVector obj) { int o = __offset(130); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
   * Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
   * Constraints: No constraints specified.
   */
  public String etopsAltAirfields(int j) { int o = __offset(132); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int etopsAltAirfieldsLength() { int o = __offset(132); return o != 0 ? __vector_len(o) : 0; }
  public StringVector etopsAltAirfieldsVector() { return etopsAltAirfieldsVector(new StringVector()); }
  public StringVector etopsAltAirfieldsVector(StringVector obj) { int o = __offset(132); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The Extended Operations (ETOPS) validity window for the alternate airfield.
   * Example: /// Example: LPLA: 0317Z-0722Z
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String etopsValWindow() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer etopsValWindowAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer etopsValWindowInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }
  /**
   * Remarks from the planners concerning this flight plan.
   * Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String plannerRemark() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer plannerRemarkAsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer plannerRemarkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * Remarks about the planned cargo associated with this flight plan.
   * Example: /// Example: Expecting 55,000 lbs. If different, call us.
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String cargoRemark() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cargoRemarkAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer cargoRemarkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
   * Example: /// Example: -1.1
   * Constraints: No constraints specified.
   */
  public double windFac1() { int o = __offset(140); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double windFac2() { int o = __offset(142); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
   * Example: /// Example: 5.1
   * Constraints: No constraints specified.
   */
  public double windFacAvg() { int o = __offset(144); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
   * Example: /// Example: 16.1
   * Constraints: No constraints specified.
   */
  public double avgTempDev() { int o = __offset(146); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of Air Traffic Control (ATC) addresses.
   * Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
   * Constraints: No constraints specified.
   */
  public String atcAddresses(int j) { int o = __offset(148); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int atcAddressesLength() { int o = __offset(148); return o != 0 ? __vector_len(o) : 0; }
  public StringVector atcAddressesVector() { return atcAddressesVector(new StringVector()); }
  public StringVector atcAddressesVector(StringVector obj) { int o = __offset(148); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Air Traffic Control address filing the flight plan.
   * Example: /// Example: ETARYXYX
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String originator() { int o = __offset(150); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originatorAsByteBuffer() { return __vector_as_bytebuffer(150, 1); }
  public ByteBuffer originatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 150, 1); }
  /**
   * The number of aircraft flying this flight plan.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numAircraft() { int o = __offset(152); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The flight rules this flight plan is being filed under.
   * Example: /// Example: l
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String flightRules() { int o = __offset(154); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flightRulesAsByteBuffer() { return __vector_as_bytebuffer(154, 1); }
  public ByteBuffer flightRulesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 154, 1); }
  /**
   * The type of flight (MILITARY, CIVILIAN, etc).
   * Example: /// Example: MILITARY
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String flightType() { int o = __offset(156); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flightTypeAsByteBuffer() { return __vector_as_bytebuffer(156, 1); }
  public ByteBuffer flightTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 156, 1); }
  /**
   * A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
   * Example: /// Example: N0305
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String initialCruiseSpeed() { int o = __offset(158); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer initialCruiseSpeedAsByteBuffer() { return __vector_as_bytebuffer(158, 1); }
  public ByteBuffer initialCruiseSpeedInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 158, 1); }
  /**
   * A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
   * Example: /// Example: F270
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String initialFlightLevel() { int o = __offset(160); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer initialFlightLevelAsByteBuffer() { return __vector_as_bytebuffer(160, 1); }
  public ByteBuffer initialFlightLevelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 160, 1); }
  /**
   * The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
   * Example: /// Example: EDDS
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String arrAlternate1() { int o = __offset(162); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrAlternate1AsByteBuffer() { return __vector_as_bytebuffer(162, 1); }
  public ByteBuffer arrAlternate1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 162, 1); }
  /**
   * The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
   * Example: /// Example: EDDM
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String arrAlternate2() { int o = __offset(164); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrAlternate2AsByteBuffer() { return __vector_as_bytebuffer(164, 1); }
  public ByteBuffer arrAlternate2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 164, 1); }
  /**
   * The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
   * Example: /// Example: LFPO
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String depAlternate() { int o = __offset(166); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depAlternateAsByteBuffer() { return __vector_as_bytebuffer(166, 1); }
  public ByteBuffer depAlternateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 166, 1); }
  /**
   * The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
   * Example: /// Example: MEDIUM
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String wakeTurbCat() { int o = __offset(168); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wakeTurbCatAsByteBuffer() { return __vector_as_bytebuffer(168, 1); }
  public ByteBuffer wakeTurbCatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 168, 1); }
  /**
   * The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
   * Example: /// Example: SDFGHIRTUWXYZ/H
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String equipment() { int o = __offset(170); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer equipmentAsByteBuffer() { return __vector_as_bytebuffer(170, 1); }
  public ByteBuffer equipmentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 170, 1); }
  /**
   * Additional remarks for air traffic control for this flight.
   * Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String notes() { int o = __offset(172); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(172, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 172, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(174); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(174, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 174, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(176); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(176, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 176, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(178); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(178, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 178, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(180); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(180, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 180, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(182); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(182, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 182, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(184); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(184, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 184, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(186); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Collection of air refueling events occurring on this flight.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String airRefuelEvents(int j) { int o = __offset(188); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int airRefuelEventsLength() { int o = __offset(188); return o != 0 ? __vector_len(o) : 0; }
  public StringVector airRefuelEventsVector() { return airRefuelEventsVector(new StringVector()); }
  public StringVector airRefuelEventsVector(StringVector obj) { int o = __offset(188); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String flightPlanMessages(int j) { int o = __offset(190); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int flightPlanMessagesLength() { int o = __offset(190); return o != 0 ? __vector_len(o) : 0; }
  public StringVector flightPlanMessagesVector() { return flightPlanMessagesVector(new StringVector()); }
  public StringVector flightPlanMessagesVector(StringVector obj) { int o = __offset(190); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of waypoints associated with this flight plan.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String flightPlanWaypoints(int j) { int o = __offset(192); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int flightPlanWaypointsLength() { int o = __offset(192); return o != 0 ? __vector_len(o) : 0; }
  public StringVector flightPlanWaypointsVector() { return flightPlanWaypointsVector(new StringVector()); }
  public StringVector flightPlanWaypointsVector(StringVector obj) { int o = __offset(192); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String flightPlanPointGroups(int j) { int o = __offset(194); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int flightPlanPointGroupsLength() { int o = __offset(194); return o != 0 ? __vector_len(o) : 0; }
  public StringVector flightPlanPointGroupsVector() { return flightPlanPointGroupsVector(new StringVector()); }
  public StringVector flightPlanPointGroupsVector(StringVector obj) { int o = __offset(194); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFlightPlan_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int amcMissionIdOffset,
      int idSortieOffset,
      int idAircraftOffset,
      int legNum,
      int idDepAirfieldOffset,
      int depAirfieldOffset,
      int idArrAirfieldOffset,
      int arrAirfieldOffset,
      int externalIdOffset,
      int genTsOffset,
      int aircraftMdsOffset,
      int tailNumberOffset,
      int callSignOffset,
      int wxValidStartOffset,
      int wxValidEndOffset,
      int estDepTimeOffset,
      double dragIndex,
      double fuelDegrade,
      double opWeight,
      double msnIndex,
      double rampFuel,
      double taxiFuel,
      double takeoffFuel,
      double climbFuel,
      int climbTimeOffset,
      double holdDownFuel,
      double tocIceFuel,
      double tocFuel,
      double enrouteFuel,
      int enrouteTimeOffset,
      double thunderAvoidFuel,
      double todIceFuel,
      double opConditionFuel,
      double todFuel,
      double earlyDescentFuel,
      double arrIceFuel,
      double holdFuel,
      int holdTimeOffset,
      double appLandingFuel,
      double burnedFuel,
      double landingFuel,
      double minDivertFuel,
      double arrAlternate1Fuel,
      double arrAlternate2Fuel,
      double contingencyFuel,
      double reserveFuel,
      double depressFuel,
      double unusableFuel,
      double unidentExtraFuel,
      double identExtraFuel,
      double remAlternate1Fuel,
      double remAlternate2Fuel,
      int enduranceTimeOffset,
      int sidOffset,
      int starOffset,
      int gpsRaimOffset,
      int depRunwayOffset,
      int arrRunwayOffset,
      int routeStringOffset,
      int countryCodesOffset,
      int etopsRatingOffset,
      int etopsAirfieldsOffset,
      int etopsAltAirfieldsOffset,
      int etopsValWindowOffset,
      int plannerRemarkOffset,
      int cargoRemarkOffset,
      double windFac1,
      double windFac2,
      double windFacAvg,
      double avgTempDev,
      int atcAddressesOffset,
      int originatorOffset,
      int numAircraft,
      int flightRulesOffset,
      int flightTypeOffset,
      int initialCruiseSpeedOffset,
      int initialFlightLevelOffset,
      int arrAlternate1Offset,
      int arrAlternate2Offset,
      int depAlternateOffset,
      int wakeTurbCatOffset,
      int equipmentOffset,
      int notesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int airRefuelEventsOffset,
      int flightPlanMessagesOffset,
      int flightPlanWaypointsOffset,
      int flightPlanPointGroupsOffset) {
    builder.startTable(96);
    FlightPlan_Ingest.addAvgTempDev(builder, avgTempDev);
    FlightPlan_Ingest.addWindFacAvg(builder, windFacAvg);
    FlightPlan_Ingest.addWindFac2(builder, windFac2);
    FlightPlan_Ingest.addWindFac1(builder, windFac1);
    FlightPlan_Ingest.addRemAlternate2Fuel(builder, remAlternate2Fuel);
    FlightPlan_Ingest.addRemAlternate1Fuel(builder, remAlternate1Fuel);
    FlightPlan_Ingest.addIdentExtraFuel(builder, identExtraFuel);
    FlightPlan_Ingest.addUnidentExtraFuel(builder, unidentExtraFuel);
    FlightPlan_Ingest.addUnusableFuel(builder, unusableFuel);
    FlightPlan_Ingest.addDepressFuel(builder, depressFuel);
    FlightPlan_Ingest.addReserveFuel(builder, reserveFuel);
    FlightPlan_Ingest.addContingencyFuel(builder, contingencyFuel);
    FlightPlan_Ingest.addArrAlternate2Fuel(builder, arrAlternate2Fuel);
    FlightPlan_Ingest.addArrAlternate1Fuel(builder, arrAlternate1Fuel);
    FlightPlan_Ingest.addMinDivertFuel(builder, minDivertFuel);
    FlightPlan_Ingest.addLandingFuel(builder, landingFuel);
    FlightPlan_Ingest.addBurnedFuel(builder, burnedFuel);
    FlightPlan_Ingest.addAppLandingFuel(builder, appLandingFuel);
    FlightPlan_Ingest.addHoldFuel(builder, holdFuel);
    FlightPlan_Ingest.addArrIceFuel(builder, arrIceFuel);
    FlightPlan_Ingest.addEarlyDescentFuel(builder, earlyDescentFuel);
    FlightPlan_Ingest.addTodFuel(builder, todFuel);
    FlightPlan_Ingest.addOpConditionFuel(builder, opConditionFuel);
    FlightPlan_Ingest.addTodIceFuel(builder, todIceFuel);
    FlightPlan_Ingest.addThunderAvoidFuel(builder, thunderAvoidFuel);
    FlightPlan_Ingest.addEnrouteFuel(builder, enrouteFuel);
    FlightPlan_Ingest.addTocFuel(builder, tocFuel);
    FlightPlan_Ingest.addTocIceFuel(builder, tocIceFuel);
    FlightPlan_Ingest.addHoldDownFuel(builder, holdDownFuel);
    FlightPlan_Ingest.addClimbFuel(builder, climbFuel);
    FlightPlan_Ingest.addTakeoffFuel(builder, takeoffFuel);
    FlightPlan_Ingest.addTaxiFuel(builder, taxiFuel);
    FlightPlan_Ingest.addRampFuel(builder, rampFuel);
    FlightPlan_Ingest.addMsnIndex(builder, msnIndex);
    FlightPlan_Ingest.addOpWeight(builder, opWeight);
    FlightPlan_Ingest.addFuelDegrade(builder, fuelDegrade);
    FlightPlan_Ingest.addDragIndex(builder, dragIndex);
    FlightPlan_Ingest.addFlightPlanPointGroups(builder, flightPlanPointGroupsOffset);
    FlightPlan_Ingest.addFlightPlanWaypoints(builder, flightPlanWaypointsOffset);
    FlightPlan_Ingest.addFlightPlanMessages(builder, flightPlanMessagesOffset);
    FlightPlan_Ingest.addAirRefuelEvents(builder, airRefuelEventsOffset);
    FlightPlan_Ingest.addOrigNetwork(builder, origNetworkOffset);
    FlightPlan_Ingest.addOrigin(builder, originOffset);
    FlightPlan_Ingest.addSource(builder, sourceOffset);
    FlightPlan_Ingest.addSourceDl(builder, sourceDlOffset);
    FlightPlan_Ingest.addCreatedBy(builder, createdByOffset);
    FlightPlan_Ingest.addCreatedAt(builder, createdAtOffset);
    FlightPlan_Ingest.addNotes(builder, notesOffset);
    FlightPlan_Ingest.addEquipment(builder, equipmentOffset);
    FlightPlan_Ingest.addWakeTurbCat(builder, wakeTurbCatOffset);
    FlightPlan_Ingest.addDepAlternate(builder, depAlternateOffset);
    FlightPlan_Ingest.addArrAlternate2(builder, arrAlternate2Offset);
    FlightPlan_Ingest.addArrAlternate1(builder, arrAlternate1Offset);
    FlightPlan_Ingest.addInitialFlightLevel(builder, initialFlightLevelOffset);
    FlightPlan_Ingest.addInitialCruiseSpeed(builder, initialCruiseSpeedOffset);
    FlightPlan_Ingest.addFlightType(builder, flightTypeOffset);
    FlightPlan_Ingest.addFlightRules(builder, flightRulesOffset);
    FlightPlan_Ingest.addNumAircraft(builder, numAircraft);
    FlightPlan_Ingest.addOriginator(builder, originatorOffset);
    FlightPlan_Ingest.addAtcAddresses(builder, atcAddressesOffset);
    FlightPlan_Ingest.addCargoRemark(builder, cargoRemarkOffset);
    FlightPlan_Ingest.addPlannerRemark(builder, plannerRemarkOffset);
    FlightPlan_Ingest.addEtopsValWindow(builder, etopsValWindowOffset);
    FlightPlan_Ingest.addEtopsAltAirfields(builder, etopsAltAirfieldsOffset);
    FlightPlan_Ingest.addEtopsAirfields(builder, etopsAirfieldsOffset);
    FlightPlan_Ingest.addEtopsRating(builder, etopsRatingOffset);
    FlightPlan_Ingest.addCountryCodes(builder, countryCodesOffset);
    FlightPlan_Ingest.addRouteString(builder, routeStringOffset);
    FlightPlan_Ingest.addArrRunway(builder, arrRunwayOffset);
    FlightPlan_Ingest.addDepRunway(builder, depRunwayOffset);
    FlightPlan_Ingest.addGpsRaim(builder, gpsRaimOffset);
    FlightPlan_Ingest.addStar(builder, starOffset);
    FlightPlan_Ingest.addSid(builder, sidOffset);
    FlightPlan_Ingest.addEnduranceTime(builder, enduranceTimeOffset);
    FlightPlan_Ingest.addHoldTime(builder, holdTimeOffset);
    FlightPlan_Ingest.addEnrouteTime(builder, enrouteTimeOffset);
    FlightPlan_Ingest.addClimbTime(builder, climbTimeOffset);
    FlightPlan_Ingest.addEstDepTime(builder, estDepTimeOffset);
    FlightPlan_Ingest.addWxValidEnd(builder, wxValidEndOffset);
    FlightPlan_Ingest.addWxValidStart(builder, wxValidStartOffset);
    FlightPlan_Ingest.addCallSign(builder, callSignOffset);
    FlightPlan_Ingest.addTailNumber(builder, tailNumberOffset);
    FlightPlan_Ingest.addAircraftMds(builder, aircraftMdsOffset);
    FlightPlan_Ingest.addGenTs(builder, genTsOffset);
    FlightPlan_Ingest.addExternalId(builder, externalIdOffset);
    FlightPlan_Ingest.addArrAirfield(builder, arrAirfieldOffset);
    FlightPlan_Ingest.addIdArrAirfield(builder, idArrAirfieldOffset);
    FlightPlan_Ingest.addDepAirfield(builder, depAirfieldOffset);
    FlightPlan_Ingest.addIdDepAirfield(builder, idDepAirfieldOffset);
    FlightPlan_Ingest.addLegNum(builder, legNum);
    FlightPlan_Ingest.addIdAircraft(builder, idAircraftOffset);
    FlightPlan_Ingest.addIdSortie(builder, idSortieOffset);
    FlightPlan_Ingest.addAmcMissionId(builder, amcMissionIdOffset);
    FlightPlan_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    FlightPlan_Ingest.addId(builder, idOffset);
    FlightPlan_Ingest.addDataMode(builder, dataMode);
    return FlightPlan_Ingest.endFlightPlan_Ingest(builder);
  }

  public static void startFlightPlan_Ingest(FlatBufferBuilder builder) { builder.startTable(96); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addAmcMissionId(FlatBufferBuilder builder, int amcMissionIdOffset) { builder.addOffset(2, amcMissionIdOffset, 0); }
  public static void addIdSortie(FlatBufferBuilder builder, int idSortieOffset) { builder.addOffset(3, idSortieOffset, 0); }
  public static void addIdAircraft(FlatBufferBuilder builder, int idAircraftOffset) { builder.addOffset(4, idAircraftOffset, 0); }
  public static void addLegNum(FlatBufferBuilder builder, int legNum) { builder.addInt(5, legNum, 0); }
  public static void addIdDepAirfield(FlatBufferBuilder builder, int idDepAirfieldOffset) { builder.addOffset(6, idDepAirfieldOffset, 0); }
  public static void addDepAirfield(FlatBufferBuilder builder, int depAirfieldOffset) { builder.addOffset(7, depAirfieldOffset, 0); }
  public static void addIdArrAirfield(FlatBufferBuilder builder, int idArrAirfieldOffset) { builder.addOffset(8, idArrAirfieldOffset, 0); }
  public static void addArrAirfield(FlatBufferBuilder builder, int arrAirfieldOffset) { builder.addOffset(9, arrAirfieldOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(10, externalIdOffset, 0); }
  public static void addGenTs(FlatBufferBuilder builder, int genTsOffset) { builder.addOffset(11, genTsOffset, 0); }
  public static void addAircraftMds(FlatBufferBuilder builder, int aircraftMdsOffset) { builder.addOffset(12, aircraftMdsOffset, 0); }
  public static void addTailNumber(FlatBufferBuilder builder, int tailNumberOffset) { builder.addOffset(13, tailNumberOffset, 0); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(14, callSignOffset, 0); }
  public static void addWxValidStart(FlatBufferBuilder builder, int wxValidStartOffset) { builder.addOffset(15, wxValidStartOffset, 0); }
  public static void addWxValidEnd(FlatBufferBuilder builder, int wxValidEndOffset) { builder.addOffset(16, wxValidEndOffset, 0); }
  public static void addEstDepTime(FlatBufferBuilder builder, int estDepTimeOffset) { builder.addOffset(17, estDepTimeOffset, 0); }
  public static void addDragIndex(FlatBufferBuilder builder, double dragIndex) { builder.addDouble(18, dragIndex, 0.0); }
  public static void addFuelDegrade(FlatBufferBuilder builder, double fuelDegrade) { builder.addDouble(19, fuelDegrade, 0.0); }
  public static void addOpWeight(FlatBufferBuilder builder, double opWeight) { builder.addDouble(20, opWeight, 0.0); }
  public static void addMsnIndex(FlatBufferBuilder builder, double msnIndex) { builder.addDouble(21, msnIndex, 0.0); }
  public static void addRampFuel(FlatBufferBuilder builder, double rampFuel) { builder.addDouble(22, rampFuel, 0.0); }
  public static void addTaxiFuel(FlatBufferBuilder builder, double taxiFuel) { builder.addDouble(23, taxiFuel, 0.0); }
  public static void addTakeoffFuel(FlatBufferBuilder builder, double takeoffFuel) { builder.addDouble(24, takeoffFuel, 0.0); }
  public static void addClimbFuel(FlatBufferBuilder builder, double climbFuel) { builder.addDouble(25, climbFuel, 0.0); }
  public static void addClimbTime(FlatBufferBuilder builder, int climbTimeOffset) { builder.addOffset(26, climbTimeOffset, 0); }
  public static void addHoldDownFuel(FlatBufferBuilder builder, double holdDownFuel) { builder.addDouble(27, holdDownFuel, 0.0); }
  public static void addTocIceFuel(FlatBufferBuilder builder, double tocIceFuel) { builder.addDouble(28, tocIceFuel, 0.0); }
  public static void addTocFuel(FlatBufferBuilder builder, double tocFuel) { builder.addDouble(29, tocFuel, 0.0); }
  public static void addEnrouteFuel(FlatBufferBuilder builder, double enrouteFuel) { builder.addDouble(30, enrouteFuel, 0.0); }
  public static void addEnrouteTime(FlatBufferBuilder builder, int enrouteTimeOffset) { builder.addOffset(31, enrouteTimeOffset, 0); }
  public static void addThunderAvoidFuel(FlatBufferBuilder builder, double thunderAvoidFuel) { builder.addDouble(32, thunderAvoidFuel, 0.0); }
  public static void addTodIceFuel(FlatBufferBuilder builder, double todIceFuel) { builder.addDouble(33, todIceFuel, 0.0); }
  public static void addOpConditionFuel(FlatBufferBuilder builder, double opConditionFuel) { builder.addDouble(34, opConditionFuel, 0.0); }
  public static void addTodFuel(FlatBufferBuilder builder, double todFuel) { builder.addDouble(35, todFuel, 0.0); }
  public static void addEarlyDescentFuel(FlatBufferBuilder builder, double earlyDescentFuel) { builder.addDouble(36, earlyDescentFuel, 0.0); }
  public static void addArrIceFuel(FlatBufferBuilder builder, double arrIceFuel) { builder.addDouble(37, arrIceFuel, 0.0); }
  public static void addHoldFuel(FlatBufferBuilder builder, double holdFuel) { builder.addDouble(38, holdFuel, 0.0); }
  public static void addHoldTime(FlatBufferBuilder builder, int holdTimeOffset) { builder.addOffset(39, holdTimeOffset, 0); }
  public static void addAppLandingFuel(FlatBufferBuilder builder, double appLandingFuel) { builder.addDouble(40, appLandingFuel, 0.0); }
  public static void addBurnedFuel(FlatBufferBuilder builder, double burnedFuel) { builder.addDouble(41, burnedFuel, 0.0); }
  public static void addLandingFuel(FlatBufferBuilder builder, double landingFuel) { builder.addDouble(42, landingFuel, 0.0); }
  public static void addMinDivertFuel(FlatBufferBuilder builder, double minDivertFuel) { builder.addDouble(43, minDivertFuel, 0.0); }
  public static void addArrAlternate1Fuel(FlatBufferBuilder builder, double arrAlternate1Fuel) { builder.addDouble(44, arrAlternate1Fuel, 0.0); }
  public static void addArrAlternate2Fuel(FlatBufferBuilder builder, double arrAlternate2Fuel) { builder.addDouble(45, arrAlternate2Fuel, 0.0); }
  public static void addContingencyFuel(FlatBufferBuilder builder, double contingencyFuel) { builder.addDouble(46, contingencyFuel, 0.0); }
  public static void addReserveFuel(FlatBufferBuilder builder, double reserveFuel) { builder.addDouble(47, reserveFuel, 0.0); }
  public static void addDepressFuel(FlatBufferBuilder builder, double depressFuel) { builder.addDouble(48, depressFuel, 0.0); }
  public static void addUnusableFuel(FlatBufferBuilder builder, double unusableFuel) { builder.addDouble(49, unusableFuel, 0.0); }
  public static void addUnidentExtraFuel(FlatBufferBuilder builder, double unidentExtraFuel) { builder.addDouble(50, unidentExtraFuel, 0.0); }
  public static void addIdentExtraFuel(FlatBufferBuilder builder, double identExtraFuel) { builder.addDouble(51, identExtraFuel, 0.0); }
  public static void addRemAlternate1Fuel(FlatBufferBuilder builder, double remAlternate1Fuel) { builder.addDouble(52, remAlternate1Fuel, 0.0); }
  public static void addRemAlternate2Fuel(FlatBufferBuilder builder, double remAlternate2Fuel) { builder.addDouble(53, remAlternate2Fuel, 0.0); }
  public static void addEnduranceTime(FlatBufferBuilder builder, int enduranceTimeOffset) { builder.addOffset(54, enduranceTimeOffset, 0); }
  public static void addSid(FlatBufferBuilder builder, int sidOffset) { builder.addOffset(55, sidOffset, 0); }
  public static void addStar(FlatBufferBuilder builder, int starOffset) { builder.addOffset(56, starOffset, 0); }
  public static void addGpsRaim(FlatBufferBuilder builder, int gpsRaimOffset) { builder.addOffset(57, gpsRaimOffset, 0); }
  public static void addDepRunway(FlatBufferBuilder builder, int depRunwayOffset) { builder.addOffset(58, depRunwayOffset, 0); }
  public static void addArrRunway(FlatBufferBuilder builder, int arrRunwayOffset) { builder.addOffset(59, arrRunwayOffset, 0); }
  public static void addRouteString(FlatBufferBuilder builder, int routeStringOffset) { builder.addOffset(60, routeStringOffset, 0); }
  public static void addCountryCodes(FlatBufferBuilder builder, int countryCodesOffset) { builder.addOffset(61, countryCodesOffset, 0); }
  public static int createCountryCodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCountryCodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEtopsRating(FlatBufferBuilder builder, int etopsRatingOffset) { builder.addOffset(62, etopsRatingOffset, 0); }
  public static void addEtopsAirfields(FlatBufferBuilder builder, int etopsAirfieldsOffset) { builder.addOffset(63, etopsAirfieldsOffset, 0); }
  public static int createEtopsAirfieldsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEtopsAirfieldsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEtopsAltAirfields(FlatBufferBuilder builder, int etopsAltAirfieldsOffset) { builder.addOffset(64, etopsAltAirfieldsOffset, 0); }
  public static int createEtopsAltAirfieldsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEtopsAltAirfieldsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEtopsValWindow(FlatBufferBuilder builder, int etopsValWindowOffset) { builder.addOffset(65, etopsValWindowOffset, 0); }
  public static void addPlannerRemark(FlatBufferBuilder builder, int plannerRemarkOffset) { builder.addOffset(66, plannerRemarkOffset, 0); }
  public static void addCargoRemark(FlatBufferBuilder builder, int cargoRemarkOffset) { builder.addOffset(67, cargoRemarkOffset, 0); }
  public static void addWindFac1(FlatBufferBuilder builder, double windFac1) { builder.addDouble(68, windFac1, 0.0); }
  public static void addWindFac2(FlatBufferBuilder builder, double windFac2) { builder.addDouble(69, windFac2, 0.0); }
  public static void addWindFacAvg(FlatBufferBuilder builder, double windFacAvg) { builder.addDouble(70, windFacAvg, 0.0); }
  public static void addAvgTempDev(FlatBufferBuilder builder, double avgTempDev) { builder.addDouble(71, avgTempDev, 0.0); }
  public static void addAtcAddresses(FlatBufferBuilder builder, int atcAddressesOffset) { builder.addOffset(72, atcAddressesOffset, 0); }
  public static int createAtcAddressesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAtcAddressesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOriginator(FlatBufferBuilder builder, int originatorOffset) { builder.addOffset(73, originatorOffset, 0); }
  public static void addNumAircraft(FlatBufferBuilder builder, int numAircraft) { builder.addInt(74, numAircraft, 0); }
  public static void addFlightRules(FlatBufferBuilder builder, int flightRulesOffset) { builder.addOffset(75, flightRulesOffset, 0); }
  public static void addFlightType(FlatBufferBuilder builder, int flightTypeOffset) { builder.addOffset(76, flightTypeOffset, 0); }
  public static void addInitialCruiseSpeed(FlatBufferBuilder builder, int initialCruiseSpeedOffset) { builder.addOffset(77, initialCruiseSpeedOffset, 0); }
  public static void addInitialFlightLevel(FlatBufferBuilder builder, int initialFlightLevelOffset) { builder.addOffset(78, initialFlightLevelOffset, 0); }
  public static void addArrAlternate1(FlatBufferBuilder builder, int arrAlternate1Offset) { builder.addOffset(79, arrAlternate1Offset, 0); }
  public static void addArrAlternate2(FlatBufferBuilder builder, int arrAlternate2Offset) { builder.addOffset(80, arrAlternate2Offset, 0); }
  public static void addDepAlternate(FlatBufferBuilder builder, int depAlternateOffset) { builder.addOffset(81, depAlternateOffset, 0); }
  public static void addWakeTurbCat(FlatBufferBuilder builder, int wakeTurbCatOffset) { builder.addOffset(82, wakeTurbCatOffset, 0); }
  public static void addEquipment(FlatBufferBuilder builder, int equipmentOffset) { builder.addOffset(83, equipmentOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(84, notesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(85, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(86, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(87, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(88, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(89, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(90, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(91, dataMode, 0); }
  public static void addAirRefuelEvents(FlatBufferBuilder builder, int airRefuelEventsOffset) { builder.addOffset(92, airRefuelEventsOffset, 0); }
  public static int createAirRefuelEventsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAirRefuelEventsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFlightPlanMessages(FlatBufferBuilder builder, int flightPlanMessagesOffset) { builder.addOffset(93, flightPlanMessagesOffset, 0); }
  public static int createFlightPlanMessagesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFlightPlanMessagesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFlightPlanWaypoints(FlatBufferBuilder builder, int flightPlanWaypointsOffset) { builder.addOffset(94, flightPlanWaypointsOffset, 0); }
  public static int createFlightPlanWaypointsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFlightPlanWaypointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFlightPlanPointGroups(FlatBufferBuilder builder, int flightPlanPointGroupsOffset) { builder.addOffset(95, flightPlanPointGroupsOffset, 0); }
  public static int createFlightPlanPointGroupsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFlightPlanPointGroupsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFlightPlan_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFlightPlan_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "FLIG"); }
  public static void finishSizePrefixedFlightPlan_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "FLIG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlightPlan_Ingest get(int j) { return get(new FlightPlan_Ingest(), j); }
    public FlightPlan_Ingest get(FlightPlan_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

