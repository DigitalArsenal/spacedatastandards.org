// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// AttitudeSet represents a wrapper or collection of Onorbit Attitude 'points' and meta data indicating the specifics of the orientation of an on-orbit object.  Attitude is typically distributed in a flat file containing details of the attitude generation as well as a large collection of individual points at varying time steps. AttitudeSet is analogous to this flat file.
 */
@SuppressWarnings("unused")
public final class AttitudeSet_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AttitudeSet_Full getRootAsAttitudeSet_Full(ByteBuffer _bb) { return getRootAsAttitudeSet_Full(_bb, new AttitudeSet_Full()); }
  public static AttitudeSet_Full getRootAsAttitudeSet_Full(ByteBuffer _bb, AttitudeSet_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AttitudeSet_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ATTI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AttitudeSet_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ATTITUDESET-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the on-orbit satellite to which this attitude set applies.
   * Example: /// Example: 41947
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite/catalog number of the on-orbit object to which this attitude set applies.
   * Example: /// Example: 41947
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by the record source to indicate the target object of this attitude set. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: D6593
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The type of attitude message or messages associated with this set.
   * AEM = Attitude Ephemeris Message, specifying the attitude state of a single object at multiple epochs.
   * APM = Attitude Parameters Message, specifying the attitude state of a single object at a single epoch.
   * Example: /// Example: AEM
   * Constraints: Minimum length = 1, Maximum length = 3
   */
  public String type() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the parent (positional) Ephemeris Set, if this data is correlated with an Ephemeris.
   * Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String esId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer esIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer esIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Array of UDL UUIDs of one or more AttitudeSet records associated with this set.  For example, a spacecraft Attitude Ephemeris Set might include a reference to an Attitude Parameter Message defining the sensor to body frame transformation for a sensor onboard the spacecraft, which allows for calculation of the sensor orientation in frame2 of the attitude ephemeris.
   * Example: /// Example: ['2ea97de6-4680-4767-a07e-35d16398ef60']
   * Constraints: No constraints specified.
   */
  public String asRef(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int asRefLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector asRefVector() { return asRefVector(new StringVector()); }
  public StringVector asRefVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Unique identifier of the sensor to which this attitude set applies IF this set is reporting a single sensor orientation.
   * Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies IF this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The epoch or start time of the attitude parameter or attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single attitude parameter message then startTime is the epoch.
   * Example: /// Example: 2022-07-07T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The end time of the attitude ephemeris, in ISO 8601 UTC format, with microsecond precision.  If this set is constituted by a single epoch attitude message then endTime should match the startTime.
   * Example: /// Example: 2022-07-07T18:00:00.654321Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Reference frame 1 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
   * Example: /// Example: SCBODY
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String frame1() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer frame1AsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer frame1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Reference frame 2 of the quaternion or Euler angle transformation utilized in this attitude parameter or attitude ephemeris.  The UDL convention is that transformations occur FROM frame1 TO frame2.  A specific spacecraft frame or instrument name may be provided with the assumption the consumer understands the location of these frames (ex. SC BODY, J2000, LVLH, ICRF, INSTRUMENTx, THRUSTERx, etc.).
   * Example: /// Example: J2000
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String frame2() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer frame2AsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer frame2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Number of attitude records contained in this set.
   * Example: /// Example: 120
   * Constraints: No constraints specified.
   */
  public int numPoints() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Attitude ephemeris step size, in seconds. This applies to Attitude Ephemeris Messages (AEM) that employ a fixed step size.
   * Example: /// Example: 60
   * Constraints: No constraints specified.
   */
  public int stepSize() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Initial precession angle (ECI J2000 frame) in degrees.
   * Example: /// Example: 30.5
   * Constraints: No constraints specified.
   */
  public double precAngleInit() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Initial spin angle (ECI J2000 frame) in degrees.
   * Example: /// Example: 25.5
   * Constraints: No constraints specified.
   */
  public double spinAngleInit() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The rotation sequence of the Euler angles in which attitude reference frame transformation occurs (from left to right). One, two, or three axis rotations are supported and are represented by one, two, or three characters respectively.  Repeated axis rotations are also supported, however, these rotations should not be sequential.  The numeric sequence values correspond to the body angles/rates as follows: 1 - xAngle/xRate, 2 - yAngle/yRate, and 3 - zAngle/zRate.  Valid sequences are: 123, 132, 213, 231, 312, 321, 121, 131, 212, 232, 313, 323, 12, 13, 21, 23, 31, 32, 1, 2, and 3. 
   * The following represent examples of possible rotation sequences:  A single rotation about the Y-axis can be expressed as '2', a double rotation with X-Z sequence can be expressed as '13', and a triple rotation with Z-X-Y sequence can be expressed as '312'.
   * Example: /// Example: 123
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String eulerRotSeq() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eulerRotSeqAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer eulerRotSeqInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Collection of attitude data associated with this Attitude Set.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String attitudeList(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int attitudeListLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector attitudeListVector() { return attitudeListVector(new StringVector()); }
  public StringVector attitudeListVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Recommended interpolation method for estimating attitude ephemeris data.
   * Example: /// Example: LINEAR
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String interpolator() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer interpolatorAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer interpolatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Recommended polynomial interpolation degree.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int interpolatorDegree() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional notes/comments for this attitude set.
   * Example: /// Example: Notes for this attitude set
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-07-05T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(58); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onOrbit() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onOrbitAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer onOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }

  public static int createAttitudeSet_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int typeOffset,
      int esIdOffset,
      int asRefOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int startTimeOffset,
      int endTimeOffset,
      int frame1Offset,
      int frame2Offset,
      int numPoints,
      int stepSize,
      double precAngleInit,
      double spinAngleInit,
      int eulerRotSeqOffset,
      int attitudeListOffset,
      int interpolatorOffset,
      int interpolatorDegree,
      int notesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset,
      int onOrbitOffset) {
    builder.startTable(30);
    AttitudeSet_Full.addSpinAngleInit(builder, spinAngleInit);
    AttitudeSet_Full.addPrecAngleInit(builder, precAngleInit);
    AttitudeSet_Full.addOnOrbit(builder, onOrbitOffset);
    AttitudeSet_Full.addOrigNetwork(builder, origNetworkOffset);
    AttitudeSet_Full.addOrigin(builder, originOffset);
    AttitudeSet_Full.addSource(builder, sourceOffset);
    AttitudeSet_Full.addCreatedBy(builder, createdByOffset);
    AttitudeSet_Full.addCreatedAt(builder, createdAtOffset);
    AttitudeSet_Full.addNotes(builder, notesOffset);
    AttitudeSet_Full.addInterpolatorDegree(builder, interpolatorDegree);
    AttitudeSet_Full.addInterpolator(builder, interpolatorOffset);
    AttitudeSet_Full.addAttitudeList(builder, attitudeListOffset);
    AttitudeSet_Full.addEulerRotSeq(builder, eulerRotSeqOffset);
    AttitudeSet_Full.addStepSize(builder, stepSize);
    AttitudeSet_Full.addNumPoints(builder, numPoints);
    AttitudeSet_Full.addFrame2(builder, frame2Offset);
    AttitudeSet_Full.addFrame1(builder, frame1Offset);
    AttitudeSet_Full.addEndTime(builder, endTimeOffset);
    AttitudeSet_Full.addStartTime(builder, startTimeOffset);
    AttitudeSet_Full.addOrigSensorId(builder, origSensorIdOffset);
    AttitudeSet_Full.addIdSensor(builder, idSensorOffset);
    AttitudeSet_Full.addAsRef(builder, asRefOffset);
    AttitudeSet_Full.addEsId(builder, esIdOffset);
    AttitudeSet_Full.addType(builder, typeOffset);
    AttitudeSet_Full.addOrigObjectId(builder, origObjectIdOffset);
    AttitudeSet_Full.addSatNo(builder, satNo);
    AttitudeSet_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    AttitudeSet_Full.addClassificationMarking(builder, classificationMarkingOffset);
    AttitudeSet_Full.addId(builder, idOffset);
    AttitudeSet_Full.addDataMode(builder, dataMode);
    return AttitudeSet_Full.endAttitudeSet_Full(builder);
  }

  public static void startAttitudeSet_Full(FlatBufferBuilder builder) { builder.startTable(30); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(3, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(4, origObjectIdOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(5, typeOffset, 0); }
  public static void addEsId(FlatBufferBuilder builder, int esIdOffset) { builder.addOffset(6, esIdOffset, 0); }
  public static void addAsRef(FlatBufferBuilder builder, int asRefOffset) { builder.addOffset(7, asRefOffset, 0); }
  public static int createAsRefVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAsRefVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(8, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(9, origSensorIdOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(10, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(11, endTimeOffset, 0); }
  public static void addFrame1(FlatBufferBuilder builder, int frame1Offset) { builder.addOffset(12, frame1Offset, 0); }
  public static void addFrame2(FlatBufferBuilder builder, int frame2Offset) { builder.addOffset(13, frame2Offset, 0); }
  public static void addNumPoints(FlatBufferBuilder builder, int numPoints) { builder.addInt(14, numPoints, 0); }
  public static void addStepSize(FlatBufferBuilder builder, int stepSize) { builder.addInt(15, stepSize, 0); }
  public static void addPrecAngleInit(FlatBufferBuilder builder, double precAngleInit) { builder.addDouble(16, precAngleInit, 0.0); }
  public static void addSpinAngleInit(FlatBufferBuilder builder, double spinAngleInit) { builder.addDouble(17, spinAngleInit, 0.0); }
  public static void addEulerRotSeq(FlatBufferBuilder builder, int eulerRotSeqOffset) { builder.addOffset(18, eulerRotSeqOffset, 0); }
  public static void addAttitudeList(FlatBufferBuilder builder, int attitudeListOffset) { builder.addOffset(19, attitudeListOffset, 0); }
  public static int createAttitudeListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAttitudeListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInterpolator(FlatBufferBuilder builder, int interpolatorOffset) { builder.addOffset(20, interpolatorOffset, 0); }
  public static void addInterpolatorDegree(FlatBufferBuilder builder, int interpolatorDegree) { builder.addInt(21, interpolatorDegree, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(22, notesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(23, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(24, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(25, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(26, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(27, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(28, origNetworkOffset, 0); }
  public static void addOnOrbit(FlatBufferBuilder builder, int onOrbitOffset) { builder.addOffset(29, onOrbitOffset, 0); }
  public static int endAttitudeSet_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAttitudeSet_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ATTI"); }
  public static void finishSizePrefixedAttitudeSet_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ATTI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AttitudeSet_Full get(int j) { return get(new AttitudeSet_Full(), j); }
    public AttitudeSet_Full get(AttitudeSet_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

