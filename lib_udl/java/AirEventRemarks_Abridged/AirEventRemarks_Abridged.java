// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of remarks associated with this Air Event.
 */
@SuppressWarnings("unused")
public final class AirEventRemarks_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirEventRemarks_Abridged getRootAsAirEventRemarks_Abridged(ByteBuffer _bb) { return getRootAsAirEventRemarks_Abridged(_bb, new AirEventRemarks_Abridged()); }
  public static AirEventRemarks_Abridged getRootAsAirEventRemarks_Abridged(ByteBuffer _bb, AirEventRemarks_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirEventRemarks_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirEventRemarks_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Optional remark ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: 23ea2877a6f74d7d8f309567a5896441
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalRemarkId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalRemarkIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer externalRemarkIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Text of the remark.
   * Example: /// Example: Example air event remarks.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String text() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer textInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2024-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String date() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dateAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer dateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * User who published the remark.
   * Example: /// Example: John Doe
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String user() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer userAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer userInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createAirEventRemarks_Abridged(FlatBufferBuilder builder,
      int externalRemarkIdOffset,
      int textOffset,
      int dateOffset,
      int userOffset) {
    builder.startTable(4);
    AirEventRemarks_Abridged.addUser(builder, userOffset);
    AirEventRemarks_Abridged.addDate(builder, dateOffset);
    AirEventRemarks_Abridged.addText(builder, textOffset);
    AirEventRemarks_Abridged.addExternalRemarkId(builder, externalRemarkIdOffset);
    return AirEventRemarks_Abridged.endAirEventRemarks_Abridged(builder);
  }

  public static void startAirEventRemarks_Abridged(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addExternalRemarkId(FlatBufferBuilder builder, int externalRemarkIdOffset) { builder.addOffset(0, externalRemarkIdOffset, 0); }
  public static void addText(FlatBufferBuilder builder, int textOffset) { builder.addOffset(1, textOffset, 0); }
  public static void addDate(FlatBufferBuilder builder, int dateOffset) { builder.addOffset(2, dateOffset, 0); }
  public static void addUser(FlatBufferBuilder builder, int userOffset) { builder.addOffset(3, userOffset, 0); }
  public static int endAirEventRemarks_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirEventRemarks_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRE"); }
  public static void finishSizePrefixedAirEventRemarks_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirEventRemarks_Abridged get(int j) { return get(new AirEventRemarks_Abridged(), j); }
    public AirEventRemarks_Abridged get(AirEventRemarks_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

