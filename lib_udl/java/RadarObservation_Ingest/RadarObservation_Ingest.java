// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
 */
@SuppressWarnings("unused")
public final class RadarObservation_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static RadarObservation_Ingest getRootAsRadarObservation_Ingest(ByteBuffer _bb) { return getRootAsRadarObservation_Ingest(_bb, new RadarObservation_Ingest()); }
  public static RadarObservation_Ingest getRootAsRadarObservation_Ingest(ByteBuffer _bb, RadarObservation_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean RadarObservation_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "RADA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RadarObservation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: RADAROBSERVATION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the target on-orbit object, if correlated.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier to indicate the specific tasking which produced this observation.
   * Example: /// Example: TASK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String taskId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer taskIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional identifier of the track to which this observation belongs.
   * Example: /// Example: TRACK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trackId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer trackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
   * Example: /// Example: FIRST
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String obPosition() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obPositionAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer obPositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * azimuth angle in degrees and topocentric frame.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double azimuth() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double azimuthUnc() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor azimuth angle bias in degrees.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double azimuthBias() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight azimuth in degrees per second.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double azimuthRate() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight elevation in degrees and topocentric frame.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double elevation() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double elevationUnc() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor elevation bias in degrees.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double elevationBias() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight elevation in degrees per second.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double elevationRate() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target range in km.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double range() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Range accelaration in km/s2.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double rangeAccel() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double rangeAccelUnc() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the range measurement, in kilometers.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double rangeUnc() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor range bias in km.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double rangeBias() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight range in km/sec.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double rangeRate() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the range rate measurement, in kilometers/second.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double rangeRateUnc() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Corrected doppler measurement in meters per second.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double doppler() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the corrected doppler measurement, in meters/second.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double dopplerUnc() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight right ascension in degrees and J2000 coordinate frame.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double ra() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight declination angle in degrees and J2000 coordinate frame.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double declination() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * X position of target in km in J2000 coordinate frame.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double x() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Y position of target in km in J2000 coordinate frame.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double y() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Z position of target in km in J2000 coordinate frame.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double z() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * X velocity of target in km/sec in J2000 coordinate frame.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double xvel() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Y velocity of target in km/sec in J2000 coordinate frame.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double yvel() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Z velocity of target in km/sec in J2000 coordinate frame.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double zvel() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double senx() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
   * Example: /// Example: 40.23
   * Constraints: No constraints specified.
   */
  public double seny() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
   * Example: /// Example: 35.23
   * Constraints: No constraints specified.
   */
  public double senz() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radar cross section in meters squared for polarization principal.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double rcs() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double rcsUnc() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radar cross section in meters squared for orthogonal polarization.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double orthogonalRcs() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double orthogonalRcsUnc() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Signal to noise ratio, in dB.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double snr() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * ID of the beam that produced this observation.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double beam() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor timing bias in seconds.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double timingBias() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: rawFileURI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(106); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(108); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(108); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(108); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte senReferenceFrame() { int o = __offset(114); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: descriptor
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(120); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(120, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 1); }
  /**
   * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
   * Example: /// Example: RADAR
   * Constraints: No constraints specified.
   */
  public String type() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }

  public static int createRadarObservation_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int obTimeOffset,
      int idOnOrbitOffset,
      int idSensorOffset,
      int satNo,
      int taskIdOffset,
      int transactionIdOffset,
      int trackIdOffset,
      int obPositionOffset,
      int origObjectIdOffset,
      int origSensorIdOffset,
      boolean uct,
      double azimuth,
      double azimuthUnc,
      double azimuthBias,
      double azimuthRate,
      double elevation,
      double elevationUnc,
      double elevationBias,
      double elevationRate,
      double range,
      double rangeAccel,
      double rangeAccelUnc,
      double rangeUnc,
      double rangeBias,
      double rangeRate,
      double rangeRateUnc,
      double doppler,
      double dopplerUnc,
      double ra,
      double declination,
      double x,
      double y,
      double z,
      double xvel,
      double yvel,
      double zvel,
      double senx,
      double seny,
      double senz,
      double rcs,
      double rcsUnc,
      double orthogonalRcs,
      double orthogonalRcsUnc,
      double snr,
      double beam,
      double timingBias,
      int rawFileUriOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int tagsOffset,
      int createdAtOffset,
      int createdByOffset,
      byte senReferenceFrame,
      int descriptorOffset,
      int origNetworkOffset,
      int sourceDlOffset,
      int typeOffset) {
    builder.startTable(60);
    RadarObservation_Ingest.addTimingBias(builder, timingBias);
    RadarObservation_Ingest.addBeam(builder, beam);
    RadarObservation_Ingest.addSnr(builder, snr);
    RadarObservation_Ingest.addOrthogonalRcsUnc(builder, orthogonalRcsUnc);
    RadarObservation_Ingest.addOrthogonalRcs(builder, orthogonalRcs);
    RadarObservation_Ingest.addRcsUnc(builder, rcsUnc);
    RadarObservation_Ingest.addRcs(builder, rcs);
    RadarObservation_Ingest.addSenz(builder, senz);
    RadarObservation_Ingest.addSeny(builder, seny);
    RadarObservation_Ingest.addSenx(builder, senx);
    RadarObservation_Ingest.addZvel(builder, zvel);
    RadarObservation_Ingest.addYvel(builder, yvel);
    RadarObservation_Ingest.addXvel(builder, xvel);
    RadarObservation_Ingest.addZ(builder, z);
    RadarObservation_Ingest.addY(builder, y);
    RadarObservation_Ingest.addX(builder, x);
    RadarObservation_Ingest.addDeclination(builder, declination);
    RadarObservation_Ingest.addRa(builder, ra);
    RadarObservation_Ingest.addDopplerUnc(builder, dopplerUnc);
    RadarObservation_Ingest.addDoppler(builder, doppler);
    RadarObservation_Ingest.addRangeRateUnc(builder, rangeRateUnc);
    RadarObservation_Ingest.addRangeRate(builder, rangeRate);
    RadarObservation_Ingest.addRangeBias(builder, rangeBias);
    RadarObservation_Ingest.addRangeUnc(builder, rangeUnc);
    RadarObservation_Ingest.addRangeAccelUnc(builder, rangeAccelUnc);
    RadarObservation_Ingest.addRangeAccel(builder, rangeAccel);
    RadarObservation_Ingest.addRange(builder, range);
    RadarObservation_Ingest.addElevationRate(builder, elevationRate);
    RadarObservation_Ingest.addElevationBias(builder, elevationBias);
    RadarObservation_Ingest.addElevationUnc(builder, elevationUnc);
    RadarObservation_Ingest.addElevation(builder, elevation);
    RadarObservation_Ingest.addAzimuthRate(builder, azimuthRate);
    RadarObservation_Ingest.addAzimuthBias(builder, azimuthBias);
    RadarObservation_Ingest.addAzimuthUnc(builder, azimuthUnc);
    RadarObservation_Ingest.addAzimuth(builder, azimuth);
    RadarObservation_Ingest.addType(builder, typeOffset);
    RadarObservation_Ingest.addSourceDl(builder, sourceDlOffset);
    RadarObservation_Ingest.addOrigNetwork(builder, origNetworkOffset);
    RadarObservation_Ingest.addDescriptor(builder, descriptorOffset);
    RadarObservation_Ingest.addCreatedBy(builder, createdByOffset);
    RadarObservation_Ingest.addCreatedAt(builder, createdAtOffset);
    RadarObservation_Ingest.addTags(builder, tagsOffset);
    RadarObservation_Ingest.addOrigin(builder, originOffset);
    RadarObservation_Ingest.addSource(builder, sourceOffset);
    RadarObservation_Ingest.addRawFileUri(builder, rawFileUriOffset);
    RadarObservation_Ingest.addOrigSensorId(builder, origSensorIdOffset);
    RadarObservation_Ingest.addOrigObjectId(builder, origObjectIdOffset);
    RadarObservation_Ingest.addObPosition(builder, obPositionOffset);
    RadarObservation_Ingest.addTrackId(builder, trackIdOffset);
    RadarObservation_Ingest.addTransactionId(builder, transactionIdOffset);
    RadarObservation_Ingest.addTaskId(builder, taskIdOffset);
    RadarObservation_Ingest.addSatNo(builder, satNo);
    RadarObservation_Ingest.addIdSensor(builder, idSensorOffset);
    RadarObservation_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    RadarObservation_Ingest.addObTime(builder, obTimeOffset);
    RadarObservation_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    RadarObservation_Ingest.addId(builder, idOffset);
    RadarObservation_Ingest.addSenReferenceFrame(builder, senReferenceFrame);
    RadarObservation_Ingest.addDataMode(builder, dataMode);
    RadarObservation_Ingest.addUct(builder, uct);
    return RadarObservation_Ingest.endRadarObservation_Ingest(builder);
  }

  public static void startRadarObservation_Ingest(FlatBufferBuilder builder) { builder.startTable(60); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(2, obTimeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(3, idOnOrbitOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(4, idSensorOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(5, satNo, 0); }
  public static void addTaskId(FlatBufferBuilder builder, int taskIdOffset) { builder.addOffset(6, taskIdOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(7, transactionIdOffset, 0); }
  public static void addTrackId(FlatBufferBuilder builder, int trackIdOffset) { builder.addOffset(8, trackIdOffset, 0); }
  public static void addObPosition(FlatBufferBuilder builder, int obPositionOffset) { builder.addOffset(9, obPositionOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(10, origObjectIdOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(11, origSensorIdOffset, 0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(12, uct, false); }
  public static void addAzimuth(FlatBufferBuilder builder, double azimuth) { builder.addDouble(13, azimuth, 0.0); }
  public static void addAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.addDouble(14, azimuthUnc, 0.0); }
  public static void addAzimuthBias(FlatBufferBuilder builder, double azimuthBias) { builder.addDouble(15, azimuthBias, 0.0); }
  public static void addAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.addDouble(16, azimuthRate, 0.0); }
  public static void addElevation(FlatBufferBuilder builder, double elevation) { builder.addDouble(17, elevation, 0.0); }
  public static void addElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.addDouble(18, elevationUnc, 0.0); }
  public static void addElevationBias(FlatBufferBuilder builder, double elevationBias) { builder.addDouble(19, elevationBias, 0.0); }
  public static void addElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.addDouble(20, elevationRate, 0.0); }
  public static void addRange(FlatBufferBuilder builder, double range) { builder.addDouble(21, range, 0.0); }
  public static void addRangeAccel(FlatBufferBuilder builder, double rangeAccel) { builder.addDouble(22, rangeAccel, 0.0); }
  public static void addRangeAccelUnc(FlatBufferBuilder builder, double rangeAccelUnc) { builder.addDouble(23, rangeAccelUnc, 0.0); }
  public static void addRangeUnc(FlatBufferBuilder builder, double rangeUnc) { builder.addDouble(24, rangeUnc, 0.0); }
  public static void addRangeBias(FlatBufferBuilder builder, double rangeBias) { builder.addDouble(25, rangeBias, 0.0); }
  public static void addRangeRate(FlatBufferBuilder builder, double rangeRate) { builder.addDouble(26, rangeRate, 0.0); }
  public static void addRangeRateUnc(FlatBufferBuilder builder, double rangeRateUnc) { builder.addDouble(27, rangeRateUnc, 0.0); }
  public static void addDoppler(FlatBufferBuilder builder, double doppler) { builder.addDouble(28, doppler, 0.0); }
  public static void addDopplerUnc(FlatBufferBuilder builder, double dopplerUnc) { builder.addDouble(29, dopplerUnc, 0.0); }
  public static void addRa(FlatBufferBuilder builder, double ra) { builder.addDouble(30, ra, 0.0); }
  public static void addDeclination(FlatBufferBuilder builder, double declination) { builder.addDouble(31, declination, 0.0); }
  public static void addX(FlatBufferBuilder builder, double x) { builder.addDouble(32, x, 0.0); }
  public static void addY(FlatBufferBuilder builder, double y) { builder.addDouble(33, y, 0.0); }
  public static void addZ(FlatBufferBuilder builder, double z) { builder.addDouble(34, z, 0.0); }
  public static void addXvel(FlatBufferBuilder builder, double xvel) { builder.addDouble(35, xvel, 0.0); }
  public static void addYvel(FlatBufferBuilder builder, double yvel) { builder.addDouble(36, yvel, 0.0); }
  public static void addZvel(FlatBufferBuilder builder, double zvel) { builder.addDouble(37, zvel, 0.0); }
  public static void addSenx(FlatBufferBuilder builder, double senx) { builder.addDouble(38, senx, 0.0); }
  public static void addSeny(FlatBufferBuilder builder, double seny) { builder.addDouble(39, seny, 0.0); }
  public static void addSenz(FlatBufferBuilder builder, double senz) { builder.addDouble(40, senz, 0.0); }
  public static void addRcs(FlatBufferBuilder builder, double rcs) { builder.addDouble(41, rcs, 0.0); }
  public static void addRcsUnc(FlatBufferBuilder builder, double rcsUnc) { builder.addDouble(42, rcsUnc, 0.0); }
  public static void addOrthogonalRcs(FlatBufferBuilder builder, double orthogonalRcs) { builder.addDouble(43, orthogonalRcs, 0.0); }
  public static void addOrthogonalRcsUnc(FlatBufferBuilder builder, double orthogonalRcsUnc) { builder.addDouble(44, orthogonalRcsUnc, 0.0); }
  public static void addSnr(FlatBufferBuilder builder, double snr) { builder.addDouble(45, snr, 0.0); }
  public static void addBeam(FlatBufferBuilder builder, double beam) { builder.addDouble(46, beam, 0.0); }
  public static void addTimingBias(FlatBufferBuilder builder, double timingBias) { builder.addDouble(47, timingBias, 0.0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(48, rawFileUriOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(49, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(50, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(51, dataMode, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(52, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(53, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(54, createdByOffset, 0); }
  public static void addSenReferenceFrame(FlatBufferBuilder builder, byte senReferenceFrame) { builder.addByte(55, senReferenceFrame, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(56, descriptorOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(57, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(58, sourceDlOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(59, typeOffset, 0); }
  public static int endRadarObservation_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishRadarObservation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "RADA"); }
  public static void finishSizePrefixedRadarObservation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "RADA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RadarObservation_Ingest get(int j) { return get(new RadarObservation_Ingest(), j); }
    public RadarObservation_Ingest get(RadarObservation_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

