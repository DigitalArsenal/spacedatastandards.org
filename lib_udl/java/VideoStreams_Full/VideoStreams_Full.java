// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The table captures metadata associated with the published videos in UDL.
 */
@SuppressWarnings("unused")
public final class VideoStreams_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static VideoStreams_Full getRootAsVideoStreams_Full(ByteBuffer _bb) { return getRootAsVideoStreams_Full(_bb, new VideoStreams_Full()); }
  public static VideoStreams_Full getRootAsVideoStreams_Full(ByteBuffer _bb, VideoStreams_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean VideoStreams_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "VIDE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public VideoStreams_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: VIDEOSTREAMS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Name of the video stream.
   * Example: /// Example: name
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Description/notes associated with the video stream.
   * Example: /// Example: description
   * Constraints: Minimum length = 1, Maximum length = 1024
   */
  public String description() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The timestamp when the stream is available from. The unit is ISO 8601 format.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The timestamp when the stream is available until. The unit is ISO 8601 format.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String stopTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stopTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer stopTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Video Publisher Token.
   * Example: /// Example: tokenValue
   * Constraints: Minimum length = 1, Maximum length = 1024
   */
  public String tokenValue() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tokenValueAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer tokenValueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Video Streaming Support URLs.
   * Example: /// Example: ['videoUrls', 'videoUrls2']
   * Constraints: No constraints specified.
   */
  public String videoUrls(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int videoUrlsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector videoUrlsVector() { return videoUrlsVector(new StringVector()); }
  public StringVector videoUrlsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String origin() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }

  public static int createVideoStreams_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int nameOffset,
      int descriptionOffset,
      int startTimeOffset,
      int stopTimeOffset,
      int sourceOffset,
      int tokenValueOffset,
      int videoUrlsOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int origNetworkOffset,
      int originOffset) {
    builder.startTable(16);
    VideoStreams_Full.addOrigin(builder, originOffset);
    VideoStreams_Full.addOrigNetwork(builder, origNetworkOffset);
    VideoStreams_Full.addUpdatedBy(builder, updatedByOffset);
    VideoStreams_Full.addUpdatedAt(builder, updatedAtOffset);
    VideoStreams_Full.addCreatedBy(builder, createdByOffset);
    VideoStreams_Full.addCreatedAt(builder, createdAtOffset);
    VideoStreams_Full.addVideoUrls(builder, videoUrlsOffset);
    VideoStreams_Full.addTokenValue(builder, tokenValueOffset);
    VideoStreams_Full.addSource(builder, sourceOffset);
    VideoStreams_Full.addStopTime(builder, stopTimeOffset);
    VideoStreams_Full.addStartTime(builder, startTimeOffset);
    VideoStreams_Full.addDescription(builder, descriptionOffset);
    VideoStreams_Full.addName(builder, nameOffset);
    VideoStreams_Full.addClassificationMarking(builder, classificationMarkingOffset);
    VideoStreams_Full.addId(builder, idOffset);
    VideoStreams_Full.addDataMode(builder, dataMode);
    return VideoStreams_Full.endVideoStreams_Full(builder);
  }

  public static void startVideoStreams_Full(FlatBufferBuilder builder) { builder.startTable(16); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(3, descriptionOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(4, startTimeOffset, 0); }
  public static void addStopTime(FlatBufferBuilder builder, int stopTimeOffset) { builder.addOffset(5, stopTimeOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(6, sourceOffset, 0); }
  public static void addTokenValue(FlatBufferBuilder builder, int tokenValueOffset) { builder.addOffset(7, tokenValueOffset, 0); }
  public static void addVideoUrls(FlatBufferBuilder builder, int videoUrlsOffset) { builder.addOffset(8, videoUrlsOffset, 0); }
  public static int createVideoUrlsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVideoUrlsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(9, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(10, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(11, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(12, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(13, updatedByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(14, origNetworkOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(15, originOffset, 0); }
  public static int endVideoStreams_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishVideoStreams_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "VIDE"); }
  public static void finishSizePrefixedVideoStreams_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "VIDE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public VideoStreams_Full get(int j) { return get(new VideoStreams_Full(), j); }
    public VideoStreams_Full get(VideoStreams_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

