// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of observation data for active/passive radio frequency (RF) based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider. RF observations include several optional ordered arrays which are used to provide detailed information on recorded signals such as power spectral density lists or active signals (code taps/fills, etc). In these cases, the sizes of the arrays must match and can be assumed to have consistent indexing across arrays (e.g. powers[0] is the measured power at frequencies[0]).
 */
@SuppressWarnings("unused")
public final class RFObservation_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static RFObservation_Abridged getRootAsRFObservation_Abridged(ByteBuffer _bb) { return getRootAsRFObservation_Abridged(_bb, new RFObservation_Abridged()); }
  public static RFObservation_Abridged getRootAsRFObservation_Abridged(ByteBuffer _bb, RFObservation_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean RFObservation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "RFOB"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RFObservation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: RFOBSERVATION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the target on-orbit object, if correlated.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Type of RF ob (e.g. RF, RF-SOSI, PSD, RFI, SPOOF, etc).
   * Example: /// Example: RF
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String type() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 32258
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier to indicate the specific tasking which produced this observation.
   * Example: /// Example: TASK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String taskId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer taskIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Optional identifier of the track to which this observation belongs.
   * Example: /// Example: TRACK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trackId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer trackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIG-OBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIG-SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Optional identifier provided by observation source to indicate the transponder used for this measurement.
   * Example: /// Example: TRANSPONDER-A
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transponder() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transponderAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer transponderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * azimuth angle in degrees and J2000 coordinate frame.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double azimuth() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the azimuth angle measurement, in degrees.
   * Example: /// Example: 2.1
   * Constraints: No constraints specified.
   */
  public double azimuthUnc() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the azimuth in degrees per second.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double azimuthRate() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * elevation in degrees and J2000 coordinate frame.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double elevation() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the elevation angle measurement, in degrees.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double elevationUnc() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the elevation in degrees per second.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double elevationRate() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target range in km.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double range() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the range measurement, in kilometers.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double rangeUnc() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the range in km/sec.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double rangeRate() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the range rate measurement, in kilometers/second.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double rangeRateUnc() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target track or apparent range in km.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double trackRange() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.2
   * Constraints: No constraints specified.
   */
  public double senlat() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 80.3
   * Constraints: No constraints specified.
   */
  public double senlon() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude at obTime (if mobile/onorbit) in km. If null, can be obtained from sensor info.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * ELINT notation.
   * Example: /// Example: Ex. ELINT
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String elnot() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer elnotAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer elnotInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Center carrier frequency in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double frequency() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Nominal or expected center carrier frequency in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double nominalFrequency() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Start carrier frequency in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double startFrequency() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * End carrier frequency in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double endFrequency() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Measured power of the center carrier frequency in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double relativeCarrierPower() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Measured spectrum analyzer power of the center carrier frequency in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double spectrumAnalyzerPower() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The measure of the signal created from the sum of all the noise sources and unwanted signals within the measurement system, in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double relativeNoiseFloor() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Reference signal level, in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double referenceLevel() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * A pulse group repetition interval (PGRI) is a pulse train in which there are groups of closely spaced pulses separated by much longer times between these pulse groups.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double pgri() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Confidence in the signal and its measurements and characterization.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double confidence() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * True if the signal is incoming, false if outgoing.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean incoming() { int o = __offset(82); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Switch Point of the RFObservation record.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int switchPoint() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Baud rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per second.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double baudRate() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Signal to noise ratio, in dB.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double snr() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Nominal or expected signal to noise ratio, in dB.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double nominalSnr() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The antenna pointing dependent polarizer angle, in degrees.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double polarity() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
   * Example: /// Example: H
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public byte polarityType() { int o = __offset(94); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Channel of the RFObservation record.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int channel() { int o = __offset(96); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Measured carrier power over noise (dBW/Hz).
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double powerOverNoise() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Expected carrier power over noise (dBW/Hz).
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double nominalPowerOverNoise() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Measured bandwidth in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double bandwidth() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Expected bandwidth in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double nominalBandwidth() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Resolution bandwidth in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double resolutionBandwidth() { int o = __offset(106); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Video bandwidth in Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double videoBandwidth() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Measured Equivalent Isotopically Radiated Power in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double eirp() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Expected Equivalent Isotopically Radiated Power in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double nominalEirp() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum measured PSD value of the trace in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double minPsd() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum measured PSD value of the trace in dBW.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxPsd() { int o = __offset(116); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Frequency Shift of the RFObservation record.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double frequencyShift() { int o = __offset(118); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak of the RFObservation record.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean peak() { int o = __offset(120); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Antenna name of the RFObservation record.
   * Example: /// Example: Antenna1
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String antennaName() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer antennaNameAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer antennaNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Detection status (e.g. DETECTED, CARRIER_ACQUIRING, CARRIER_DETECTED, NOT_DETECTED, etc).
   * Example: /// Example: DETECTED
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String detectionStatus() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer detectionStatusAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer detectionStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Collection mode (e.g. SURVEY, SPOT_SEARCH, NEIGHBORHOOD_WATCH, DIRECTED_SEARCH, MANUAL, etc).
   * Example: /// Example: SURVEY
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String collectionMode() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionModeAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer collectionModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(132); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(132, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 132, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(134); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * Noise power density, in dBW-Hz.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double noisePwrDensity() { int o = __offset(140); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Carrier standard (e.g. DVB-S2, 802.11g, etc.).
   * Example: /// Example: DVB-S2
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String carrierStandard() { int o = __offset(142); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer carrierStandardAsByteBuffer() { return __vector_as_bytebuffer(142, 1); }
  public ByteBuffer carrierStandardInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 142, 1); }
  /**
   * Transponder modulation (e.g. Auto, QPSK, 8PSK, etc).
   * Example: /// Example: Auto
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String modulation() { int o = __offset(144); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modulationAsByteBuffer() { return __vector_as_bytebuffer(144, 1); }
  public ByteBuffer modulationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 144, 1); }
  /**
   * Inner forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
   * Example: /// Example: 7
   * Constraints: No constraints specified.
   */
  public int innerCodingRate() { int o = __offset(146); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Outer forward error correction rate:  0 = Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int outerCodingRate() { int o = __offset(148); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Transmit pulse shaping filter typ (e.g. RRC).
   * Example: /// Example: RRC
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String transmitFilterType() { int o = __offset(150); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transmitFilterTypeAsByteBuffer() { return __vector_as_bytebuffer(150, 1); }
  public ByteBuffer transmitFilterTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 150, 1); }
  /**
   * Transmit pulse shaping filter roll-off value.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double transmitFilterRollOff() { int o = __offset(152); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Symbol to noise ratio, in dB.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double symbolToNoiseRatio() { int o = __offset(154); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The ratio of bit errors per number of received bits.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double bitErrorRate() { int o = __offset(156); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(158); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(158, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 158, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(160); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(160, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 160, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: descriptor
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(162); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(162, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 162, 1); }
  /**
   * Optional URL containing additional information on this observation.
   * Example: /// Example: https://some-url
   * Constraints: Minimum length = 0, Maximum length = 2048
   */
  public String url() { int o = __offset(164); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer urlAsByteBuffer() { return __vector_as_bytebuffer(164, 1); }
  public ByteBuffer urlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 164, 1); }

  public static int createRFObservation_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int obTimeOffset,
      int idOnOrbitOffset,
      int idSensorOffset,
      int typeOffset,
      int satNo,
      int taskIdOffset,
      int transactionIdOffset,
      int trackIdOffset,
      int origObjectIdOffset,
      int origSensorIdOffset,
      boolean uct,
      int transponderOffset,
      double azimuth,
      double azimuthUnc,
      double azimuthRate,
      double elevation,
      double elevationUnc,
      double elevationRate,
      double range,
      double rangeUnc,
      double rangeRate,
      double rangeRateUnc,
      double trackRange,
      double senlat,
      double senlon,
      double senalt,
      int elnotOffset,
      double frequency,
      double nominalFrequency,
      double startFrequency,
      double endFrequency,
      double relativeCarrierPower,
      double spectrumAnalyzerPower,
      double relativeNoiseFloor,
      double referenceLevel,
      double pgri,
      double confidence,
      boolean incoming,
      int switchPoint,
      double baudRate,
      double snr,
      double nominalSnr,
      double polarity,
      byte polarityType,
      int channel,
      double powerOverNoise,
      double nominalPowerOverNoise,
      double bandwidth,
      double nominalBandwidth,
      double resolutionBandwidth,
      double videoBandwidth,
      double eirp,
      double nominalEirp,
      double minPsd,
      double maxPsd,
      double frequencyShift,
      boolean peak,
      int antennaNameOffset,
      int detectionStatusOffset,
      int collectionModeOffset,
      int rawFileUriOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      double noisePwrDensity,
      int carrierStandardOffset,
      int modulationOffset,
      int innerCodingRate,
      int outerCodingRate,
      int transmitFilterTypeOffset,
      double transmitFilterRollOff,
      double symbolToNoiseRatio,
      double bitErrorRate,
      int origNetworkOffset,
      int sourceDlOffset,
      int descriptorOffset,
      int urlOffset) {
    builder.startTable(81);
    RFObservation_Abridged.addBitErrorRate(builder, bitErrorRate);
    RFObservation_Abridged.addSymbolToNoiseRatio(builder, symbolToNoiseRatio);
    RFObservation_Abridged.addTransmitFilterRollOff(builder, transmitFilterRollOff);
    RFObservation_Abridged.addNoisePwrDensity(builder, noisePwrDensity);
    RFObservation_Abridged.addFrequencyShift(builder, frequencyShift);
    RFObservation_Abridged.addMaxPsd(builder, maxPsd);
    RFObservation_Abridged.addMinPsd(builder, minPsd);
    RFObservation_Abridged.addNominalEirp(builder, nominalEirp);
    RFObservation_Abridged.addEirp(builder, eirp);
    RFObservation_Abridged.addVideoBandwidth(builder, videoBandwidth);
    RFObservation_Abridged.addResolutionBandwidth(builder, resolutionBandwidth);
    RFObservation_Abridged.addNominalBandwidth(builder, nominalBandwidth);
    RFObservation_Abridged.addBandwidth(builder, bandwidth);
    RFObservation_Abridged.addNominalPowerOverNoise(builder, nominalPowerOverNoise);
    RFObservation_Abridged.addPowerOverNoise(builder, powerOverNoise);
    RFObservation_Abridged.addPolarity(builder, polarity);
    RFObservation_Abridged.addNominalSnr(builder, nominalSnr);
    RFObservation_Abridged.addSnr(builder, snr);
    RFObservation_Abridged.addBaudRate(builder, baudRate);
    RFObservation_Abridged.addConfidence(builder, confidence);
    RFObservation_Abridged.addPgri(builder, pgri);
    RFObservation_Abridged.addReferenceLevel(builder, referenceLevel);
    RFObservation_Abridged.addRelativeNoiseFloor(builder, relativeNoiseFloor);
    RFObservation_Abridged.addSpectrumAnalyzerPower(builder, spectrumAnalyzerPower);
    RFObservation_Abridged.addRelativeCarrierPower(builder, relativeCarrierPower);
    RFObservation_Abridged.addEndFrequency(builder, endFrequency);
    RFObservation_Abridged.addStartFrequency(builder, startFrequency);
    RFObservation_Abridged.addNominalFrequency(builder, nominalFrequency);
    RFObservation_Abridged.addFrequency(builder, frequency);
    RFObservation_Abridged.addSenalt(builder, senalt);
    RFObservation_Abridged.addSenlon(builder, senlon);
    RFObservation_Abridged.addSenlat(builder, senlat);
    RFObservation_Abridged.addTrackRange(builder, trackRange);
    RFObservation_Abridged.addRangeRateUnc(builder, rangeRateUnc);
    RFObservation_Abridged.addRangeRate(builder, rangeRate);
    RFObservation_Abridged.addRangeUnc(builder, rangeUnc);
    RFObservation_Abridged.addRange(builder, range);
    RFObservation_Abridged.addElevationRate(builder, elevationRate);
    RFObservation_Abridged.addElevationUnc(builder, elevationUnc);
    RFObservation_Abridged.addElevation(builder, elevation);
    RFObservation_Abridged.addAzimuthRate(builder, azimuthRate);
    RFObservation_Abridged.addAzimuthUnc(builder, azimuthUnc);
    RFObservation_Abridged.addAzimuth(builder, azimuth);
    RFObservation_Abridged.addUrl(builder, urlOffset);
    RFObservation_Abridged.addDescriptor(builder, descriptorOffset);
    RFObservation_Abridged.addSourceDl(builder, sourceDlOffset);
    RFObservation_Abridged.addOrigNetwork(builder, origNetworkOffset);
    RFObservation_Abridged.addTransmitFilterType(builder, transmitFilterTypeOffset);
    RFObservation_Abridged.addOuterCodingRate(builder, outerCodingRate);
    RFObservation_Abridged.addInnerCodingRate(builder, innerCodingRate);
    RFObservation_Abridged.addModulation(builder, modulationOffset);
    RFObservation_Abridged.addCarrierStandard(builder, carrierStandardOffset);
    RFObservation_Abridged.addCreatedBy(builder, createdByOffset);
    RFObservation_Abridged.addCreatedAt(builder, createdAtOffset);
    RFObservation_Abridged.addOrigin(builder, originOffset);
    RFObservation_Abridged.addSource(builder, sourceOffset);
    RFObservation_Abridged.addRawFileUri(builder, rawFileUriOffset);
    RFObservation_Abridged.addCollectionMode(builder, collectionModeOffset);
    RFObservation_Abridged.addDetectionStatus(builder, detectionStatusOffset);
    RFObservation_Abridged.addAntennaName(builder, antennaNameOffset);
    RFObservation_Abridged.addChannel(builder, channel);
    RFObservation_Abridged.addSwitchPoint(builder, switchPoint);
    RFObservation_Abridged.addElnot(builder, elnotOffset);
    RFObservation_Abridged.addTransponder(builder, transponderOffset);
    RFObservation_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    RFObservation_Abridged.addOrigObjectId(builder, origObjectIdOffset);
    RFObservation_Abridged.addTrackId(builder, trackIdOffset);
    RFObservation_Abridged.addTransactionId(builder, transactionIdOffset);
    RFObservation_Abridged.addTaskId(builder, taskIdOffset);
    RFObservation_Abridged.addSatNo(builder, satNo);
    RFObservation_Abridged.addType(builder, typeOffset);
    RFObservation_Abridged.addIdSensor(builder, idSensorOffset);
    RFObservation_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    RFObservation_Abridged.addObTime(builder, obTimeOffset);
    RFObservation_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    RFObservation_Abridged.addId(builder, idOffset);
    RFObservation_Abridged.addDataMode(builder, dataMode);
    RFObservation_Abridged.addPeak(builder, peak);
    RFObservation_Abridged.addPolarityType(builder, polarityType);
    RFObservation_Abridged.addIncoming(builder, incoming);
    RFObservation_Abridged.addUct(builder, uct);
    return RFObservation_Abridged.endRFObservation_Abridged(builder);
  }

  public static void startRFObservation_Abridged(FlatBufferBuilder builder) { builder.startTable(81); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(2, obTimeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(3, idOnOrbitOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(4, idSensorOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(5, typeOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(6, satNo, 0); }
  public static void addTaskId(FlatBufferBuilder builder, int taskIdOffset) { builder.addOffset(7, taskIdOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(8, transactionIdOffset, 0); }
  public static void addTrackId(FlatBufferBuilder builder, int trackIdOffset) { builder.addOffset(9, trackIdOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(10, origObjectIdOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(11, origSensorIdOffset, 0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(12, uct, false); }
  public static void addTransponder(FlatBufferBuilder builder, int transponderOffset) { builder.addOffset(13, transponderOffset, 0); }
  public static void addAzimuth(FlatBufferBuilder builder, double azimuth) { builder.addDouble(14, azimuth, 0.0); }
  public static void addAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.addDouble(15, azimuthUnc, 0.0); }
  public static void addAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.addDouble(16, azimuthRate, 0.0); }
  public static void addElevation(FlatBufferBuilder builder, double elevation) { builder.addDouble(17, elevation, 0.0); }
  public static void addElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.addDouble(18, elevationUnc, 0.0); }
  public static void addElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.addDouble(19, elevationRate, 0.0); }
  public static void addRange(FlatBufferBuilder builder, double range) { builder.addDouble(20, range, 0.0); }
  public static void addRangeUnc(FlatBufferBuilder builder, double rangeUnc) { builder.addDouble(21, rangeUnc, 0.0); }
  public static void addRangeRate(FlatBufferBuilder builder, double rangeRate) { builder.addDouble(22, rangeRate, 0.0); }
  public static void addRangeRateUnc(FlatBufferBuilder builder, double rangeRateUnc) { builder.addDouble(23, rangeRateUnc, 0.0); }
  public static void addTrackRange(FlatBufferBuilder builder, double trackRange) { builder.addDouble(24, trackRange, 0.0); }
  public static void addSenlat(FlatBufferBuilder builder, double senlat) { builder.addDouble(25, senlat, 0.0); }
  public static void addSenlon(FlatBufferBuilder builder, double senlon) { builder.addDouble(26, senlon, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(27, senalt, 0.0); }
  public static void addElnot(FlatBufferBuilder builder, int elnotOffset) { builder.addOffset(28, elnotOffset, 0); }
  public static void addFrequency(FlatBufferBuilder builder, double frequency) { builder.addDouble(29, frequency, 0.0); }
  public static void addNominalFrequency(FlatBufferBuilder builder, double nominalFrequency) { builder.addDouble(30, nominalFrequency, 0.0); }
  public static void addStartFrequency(FlatBufferBuilder builder, double startFrequency) { builder.addDouble(31, startFrequency, 0.0); }
  public static void addEndFrequency(FlatBufferBuilder builder, double endFrequency) { builder.addDouble(32, endFrequency, 0.0); }
  public static void addRelativeCarrierPower(FlatBufferBuilder builder, double relativeCarrierPower) { builder.addDouble(33, relativeCarrierPower, 0.0); }
  public static void addSpectrumAnalyzerPower(FlatBufferBuilder builder, double spectrumAnalyzerPower) { builder.addDouble(34, spectrumAnalyzerPower, 0.0); }
  public static void addRelativeNoiseFloor(FlatBufferBuilder builder, double relativeNoiseFloor) { builder.addDouble(35, relativeNoiseFloor, 0.0); }
  public static void addReferenceLevel(FlatBufferBuilder builder, double referenceLevel) { builder.addDouble(36, referenceLevel, 0.0); }
  public static void addPgri(FlatBufferBuilder builder, double pgri) { builder.addDouble(37, pgri, 0.0); }
  public static void addConfidence(FlatBufferBuilder builder, double confidence) { builder.addDouble(38, confidence, 0.0); }
  public static void addIncoming(FlatBufferBuilder builder, boolean incoming) { builder.addBoolean(39, incoming, false); }
  public static void addSwitchPoint(FlatBufferBuilder builder, int switchPoint) { builder.addInt(40, switchPoint, 0); }
  public static void addBaudRate(FlatBufferBuilder builder, double baudRate) { builder.addDouble(41, baudRate, 0.0); }
  public static void addSnr(FlatBufferBuilder builder, double snr) { builder.addDouble(42, snr, 0.0); }
  public static void addNominalSnr(FlatBufferBuilder builder, double nominalSnr) { builder.addDouble(43, nominalSnr, 0.0); }
  public static void addPolarity(FlatBufferBuilder builder, double polarity) { builder.addDouble(44, polarity, 0.0); }
  public static void addPolarityType(FlatBufferBuilder builder, byte polarityType) { builder.addByte(45, polarityType, 0); }
  public static void addChannel(FlatBufferBuilder builder, int channel) { builder.addInt(46, channel, 0); }
  public static void addPowerOverNoise(FlatBufferBuilder builder, double powerOverNoise) { builder.addDouble(47, powerOverNoise, 0.0); }
  public static void addNominalPowerOverNoise(FlatBufferBuilder builder, double nominalPowerOverNoise) { builder.addDouble(48, nominalPowerOverNoise, 0.0); }
  public static void addBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.addDouble(49, bandwidth, 0.0); }
  public static void addNominalBandwidth(FlatBufferBuilder builder, double nominalBandwidth) { builder.addDouble(50, nominalBandwidth, 0.0); }
  public static void addResolutionBandwidth(FlatBufferBuilder builder, double resolutionBandwidth) { builder.addDouble(51, resolutionBandwidth, 0.0); }
  public static void addVideoBandwidth(FlatBufferBuilder builder, double videoBandwidth) { builder.addDouble(52, videoBandwidth, 0.0); }
  public static void addEirp(FlatBufferBuilder builder, double eirp) { builder.addDouble(53, eirp, 0.0); }
  public static void addNominalEirp(FlatBufferBuilder builder, double nominalEirp) { builder.addDouble(54, nominalEirp, 0.0); }
  public static void addMinPsd(FlatBufferBuilder builder, double minPsd) { builder.addDouble(55, minPsd, 0.0); }
  public static void addMaxPsd(FlatBufferBuilder builder, double maxPsd) { builder.addDouble(56, maxPsd, 0.0); }
  public static void addFrequencyShift(FlatBufferBuilder builder, double frequencyShift) { builder.addDouble(57, frequencyShift, 0.0); }
  public static void addPeak(FlatBufferBuilder builder, boolean peak) { builder.addBoolean(58, peak, false); }
  public static void addAntennaName(FlatBufferBuilder builder, int antennaNameOffset) { builder.addOffset(59, antennaNameOffset, 0); }
  public static void addDetectionStatus(FlatBufferBuilder builder, int detectionStatusOffset) { builder.addOffset(60, detectionStatusOffset, 0); }
  public static void addCollectionMode(FlatBufferBuilder builder, int collectionModeOffset) { builder.addOffset(61, collectionModeOffset, 0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(62, rawFileUriOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(63, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(64, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(65, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(66, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(67, createdByOffset, 0); }
  public static void addNoisePwrDensity(FlatBufferBuilder builder, double noisePwrDensity) { builder.addDouble(68, noisePwrDensity, 0.0); }
  public static void addCarrierStandard(FlatBufferBuilder builder, int carrierStandardOffset) { builder.addOffset(69, carrierStandardOffset, 0); }
  public static void addModulation(FlatBufferBuilder builder, int modulationOffset) { builder.addOffset(70, modulationOffset, 0); }
  public static void addInnerCodingRate(FlatBufferBuilder builder, int innerCodingRate) { builder.addInt(71, innerCodingRate, 0); }
  public static void addOuterCodingRate(FlatBufferBuilder builder, int outerCodingRate) { builder.addInt(72, outerCodingRate, 0); }
  public static void addTransmitFilterType(FlatBufferBuilder builder, int transmitFilterTypeOffset) { builder.addOffset(73, transmitFilterTypeOffset, 0); }
  public static void addTransmitFilterRollOff(FlatBufferBuilder builder, double transmitFilterRollOff) { builder.addDouble(74, transmitFilterRollOff, 0.0); }
  public static void addSymbolToNoiseRatio(FlatBufferBuilder builder, double symbolToNoiseRatio) { builder.addDouble(75, symbolToNoiseRatio, 0.0); }
  public static void addBitErrorRate(FlatBufferBuilder builder, double bitErrorRate) { builder.addDouble(76, bitErrorRate, 0.0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(77, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(78, sourceDlOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(79, descriptorOffset, 0); }
  public static void addUrl(FlatBufferBuilder builder, int urlOffset) { builder.addOffset(80, urlOffset, 0); }
  public static int endRFObservation_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishRFObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "RFOB"); }
  public static void finishSizePrefixedRFObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "RFOB"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RFObservation_Abridged get(int j) { return get(new RFObservation_Abridged(), j); }
    public RFObservation_Abridged get(RFObservation_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

