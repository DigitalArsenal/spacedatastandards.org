// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
 */
@SuppressWarnings("unused")
public final class AirspaceControlPoint_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirspaceControlPoint_Full getRootAsAirspaceControlPoint_Full(ByteBuffer _bb) { return getRootAsAirspaceControlPoint_Full(_bb, new AirspaceControlPoint_Full()); }
  public static AirspaceControlPoint_Full getRootAsAirspaceControlPoint_Full(ByteBuffer _bb, AirspaceControlPoint_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirspaceControlPoint_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirspaceControlPoint_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * One of possible control point type codes, such as CP, ER, OT, etc.
   * Example: /// Example: CP
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String ctrlPtType() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ctrlPtTypeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer ctrlPtTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The name applied to the control point, used as a reference.
   * Example: /// Example: APPLE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String ctrlPtName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ctrlPtNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer ctrlPtNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
   * Example: /// Example: 203632N0594256E
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String ctrlPtLocation() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ctrlPtLocationAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ctrlPtLocationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The altitude of the control point.
   * Example: /// Example: BRFL:MSL-FL230
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String ctrlPtAltitude() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ctrlPtAltitudeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer ctrlPtAltitudeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createAirspaceControlPoint_Full(FlatBufferBuilder builder,
      int ctrlPtTypeOffset,
      int ctrlPtNameOffset,
      int ctrlPtLocationOffset,
      int ctrlPtAltitudeOffset) {
    builder.startTable(4);
    AirspaceControlPoint_Full.addCtrlPtAltitude(builder, ctrlPtAltitudeOffset);
    AirspaceControlPoint_Full.addCtrlPtLocation(builder, ctrlPtLocationOffset);
    AirspaceControlPoint_Full.addCtrlPtName(builder, ctrlPtNameOffset);
    AirspaceControlPoint_Full.addCtrlPtType(builder, ctrlPtTypeOffset);
    return AirspaceControlPoint_Full.endAirspaceControlPoint_Full(builder);
  }

  public static void startAirspaceControlPoint_Full(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addCtrlPtType(FlatBufferBuilder builder, int ctrlPtTypeOffset) { builder.addOffset(0, ctrlPtTypeOffset, 0); }
  public static void addCtrlPtName(FlatBufferBuilder builder, int ctrlPtNameOffset) { builder.addOffset(1, ctrlPtNameOffset, 0); }
  public static void addCtrlPtLocation(FlatBufferBuilder builder, int ctrlPtLocationOffset) { builder.addOffset(2, ctrlPtLocationOffset, 0); }
  public static void addCtrlPtAltitude(FlatBufferBuilder builder, int ctrlPtAltitudeOffset) { builder.addOffset(3, ctrlPtAltitudeOffset, 0); }
  public static int endAirspaceControlPoint_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirspaceControlPoint_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRS"); }
  public static void finishSizePrefixedAirspaceControlPoint_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirspaceControlPoint_Full get(int j) { return get(new AirspaceControlPoint_Full(), j); }
    public AirspaceControlPoint_Full get(AirspaceControlPoint_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

