// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Status information for OnorbitThruster objects.
 */
@SuppressWarnings("unused")
public final class OnorbitThrusterStatus_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OnorbitThrusterStatus_Full getRootAsOnorbitThrusterStatus_Full(ByteBuffer _bb) { return getRootAsOnorbitThrusterStatus_Full(_bb, new OnorbitThrusterStatus_Full()); }
  public static OnorbitThrusterStatus_Full getRootAsOnorbitThrusterStatus_Full(ByteBuffer _bb, OnorbitThrusterStatus_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OnorbitThrusterStatus_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ONOR"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OnorbitThrusterStatus_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: af103c-1f917dc-002c1bd
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
   * Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idOnorbitThruster() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnorbitThrusterAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnorbitThrusterInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Identifier of this thruster.
   * Example: /// Example: REA1
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String name() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
   * Example: /// Example: 2024-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String statusTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer statusTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Minimum available propellant mass for this thruster's type, in kilograms.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double propMassMin() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average available propellant mass for this thruster's type, in kilograms.
   * Example: /// Example: 907.6
   * Constraints: No constraints specified.
   */
  public double propMassAvg() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Median available propellant mass for this thruster's type, in kilograms.
   * Example: /// Example: 200.1
   * Constraints: No constraints specified.
   */
  public double propMassMedian() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum available propellant mass for this thruster's type, in kilograms.
   * Example: /// Example: 2333.3
   * Constraints: No constraints specified.
   */
  public double propMassMax() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total fuel mass available for this thruster's type, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double fuelMass() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double fuelMassUnc() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total delta-velocity available for this thruster's type, in meters per second.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double totalDeltaV() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum available delta-velocity for this thruster, in meters per second.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double minDeltaV() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Estimated available delta-velocity for this thruster, in meters per second.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double estDeltaV() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum available delta-velocity for this thruster, in meters per second.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double maxDeltaV() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum available thrust for this thruster, in newtons.
   * Example: /// Example: 22.1
   * Constraints: No constraints specified.
   */
  public double thrustMax() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Specific impulse for this thruster, in seconds.
   * Example: /// Example: 300.1
   * Constraints: No constraints specified.
   */
  public double isp() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating if this thruster is operational.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean operational() { int o = __offset(38); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createOnorbitThrusterStatus_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnorbitThrusterOffset,
      int nameOffset,
      int statusTimeOffset,
      double propMassMin,
      double propMassAvg,
      double propMassMedian,
      double propMassMax,
      double fuelMass,
      double fuelMassUnc,
      double totalDeltaV,
      double minDeltaV,
      double estDeltaV,
      double maxDeltaV,
      double thrustMax,
      double isp,
      boolean operational,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(24);
    OnorbitThrusterStatus_Full.addIsp(builder, isp);
    OnorbitThrusterStatus_Full.addThrustMax(builder, thrustMax);
    OnorbitThrusterStatus_Full.addMaxDeltaV(builder, maxDeltaV);
    OnorbitThrusterStatus_Full.addEstDeltaV(builder, estDeltaV);
    OnorbitThrusterStatus_Full.addMinDeltaV(builder, minDeltaV);
    OnorbitThrusterStatus_Full.addTotalDeltaV(builder, totalDeltaV);
    OnorbitThrusterStatus_Full.addFuelMassUnc(builder, fuelMassUnc);
    OnorbitThrusterStatus_Full.addFuelMass(builder, fuelMass);
    OnorbitThrusterStatus_Full.addPropMassMax(builder, propMassMax);
    OnorbitThrusterStatus_Full.addPropMassMedian(builder, propMassMedian);
    OnorbitThrusterStatus_Full.addPropMassAvg(builder, propMassAvg);
    OnorbitThrusterStatus_Full.addPropMassMin(builder, propMassMin);
    OnorbitThrusterStatus_Full.addOrigNetwork(builder, origNetworkOffset);
    OnorbitThrusterStatus_Full.addOrigin(builder, originOffset);
    OnorbitThrusterStatus_Full.addSource(builder, sourceOffset);
    OnorbitThrusterStatus_Full.addCreatedBy(builder, createdByOffset);
    OnorbitThrusterStatus_Full.addCreatedAt(builder, createdAtOffset);
    OnorbitThrusterStatus_Full.addStatusTime(builder, statusTimeOffset);
    OnorbitThrusterStatus_Full.addName(builder, nameOffset);
    OnorbitThrusterStatus_Full.addIdOnorbitThruster(builder, idOnorbitThrusterOffset);
    OnorbitThrusterStatus_Full.addClassificationMarking(builder, classificationMarkingOffset);
    OnorbitThrusterStatus_Full.addId(builder, idOffset);
    OnorbitThrusterStatus_Full.addDataMode(builder, dataMode);
    OnorbitThrusterStatus_Full.addOperational(builder, operational);
    return OnorbitThrusterStatus_Full.endOnorbitThrusterStatus_Full(builder);
  }

  public static void startOnorbitThrusterStatus_Full(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnorbitThruster(FlatBufferBuilder builder, int idOnorbitThrusterOffset) { builder.addOffset(2, idOnorbitThrusterOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(3, nameOffset, 0); }
  public static void addStatusTime(FlatBufferBuilder builder, int statusTimeOffset) { builder.addOffset(4, statusTimeOffset, 0); }
  public static void addPropMassMin(FlatBufferBuilder builder, double propMassMin) { builder.addDouble(5, propMassMin, 0.0); }
  public static void addPropMassAvg(FlatBufferBuilder builder, double propMassAvg) { builder.addDouble(6, propMassAvg, 0.0); }
  public static void addPropMassMedian(FlatBufferBuilder builder, double propMassMedian) { builder.addDouble(7, propMassMedian, 0.0); }
  public static void addPropMassMax(FlatBufferBuilder builder, double propMassMax) { builder.addDouble(8, propMassMax, 0.0); }
  public static void addFuelMass(FlatBufferBuilder builder, double fuelMass) { builder.addDouble(9, fuelMass, 0.0); }
  public static void addFuelMassUnc(FlatBufferBuilder builder, double fuelMassUnc) { builder.addDouble(10, fuelMassUnc, 0.0); }
  public static void addTotalDeltaV(FlatBufferBuilder builder, double totalDeltaV) { builder.addDouble(11, totalDeltaV, 0.0); }
  public static void addMinDeltaV(FlatBufferBuilder builder, double minDeltaV) { builder.addDouble(12, minDeltaV, 0.0); }
  public static void addEstDeltaV(FlatBufferBuilder builder, double estDeltaV) { builder.addDouble(13, estDeltaV, 0.0); }
  public static void addMaxDeltaV(FlatBufferBuilder builder, double maxDeltaV) { builder.addDouble(14, maxDeltaV, 0.0); }
  public static void addThrustMax(FlatBufferBuilder builder, double thrustMax) { builder.addDouble(15, thrustMax, 0.0); }
  public static void addIsp(FlatBufferBuilder builder, double isp) { builder.addDouble(16, isp, 0.0); }
  public static void addOperational(FlatBufferBuilder builder, boolean operational) { builder.addBoolean(17, operational, false); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(18, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(19, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(20, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(21, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(22, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(23, dataMode, 0); }
  public static int endOnorbitThrusterStatus_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOnorbitThrusterStatus_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ONOR"); }
  public static void finishSizePrefixedOnorbitThrusterStatus_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ONOR"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OnorbitThrusterStatus_Full get(int j) { return get(new OnorbitThrusterStatus_Full(), j); }
    public OnorbitThrusterStatus_Full get(OnorbitThrusterStatus_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

