// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Remarks associated with this LogisticsSupport record.
 */
@SuppressWarnings("unused")
public final class LogisticsSegments_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LogisticsSegments_Full getRootAsLogisticsSegments_Full(ByteBuffer _bb) { return getRootAsLogisticsSegments_Full(_bb, new LogisticsSegments_Full()); }
  public static LogisticsSegments_Full getRootAsLogisticsSegments_Full(ByteBuffer _bb, LogisticsSegments_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LogisticsSegments_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LOGI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogisticsSegments_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Used to sequence the segments in the transportation plan.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int segmentNumber() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Transportation mode.  AMC airlift, Commercial airlift, Other, or surface transportation.
   * Example: /// Example: A
   * Constraints: Minimum length = 1, Maximum length = 1
   */
  public String modeCode() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modeCodeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer modeCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The type of mission (e.g. SAAM, CHNL, etc.).
   * Example: /// Example: SAAM
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String missionType() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer missionTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The unique identifier of the mission to which this logistics record is assigned.
   * Example: /// Example: EXAMPLE-UUID
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String idMission() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idMissionAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idMissionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The GDSS mission ID for this segment.
   * Example: /// Example: 2001101RF01202307062205
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String extMissionId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer extMissionIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer extMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The user generated identifier for an air mission subgroup.
   * Example: /// Example: TAM308901196
   * Constraints: Minimum length = 0, Maximum length = 12
   */
  public String missionNumber() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionNumberAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer missionNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Start air mission itinerary point identifier.
   * Example: /// Example: 200
   * Constraints: No constraints specified.
   */
  public int itin() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The identifier that represents a specific aircraft within an aircraft type.
   * Example: /// Example: N819AX
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public String segTailNumber() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer segTailNumberAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer segTailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
   * Example: /// Example: B7772E
   * Constraints: Minimum length = 0, Maximum length = 30
   */
  public String segAircraftMds() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer segAircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer segAircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Airport ICAO departure code.
   * Example: /// Example: PHIK
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String departureIcao() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer departureIcaoAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer departureIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Actual departure time to the segment destination, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-17T19:20:00.123Z
   * Constraints: No constraints specified.
   */
  public String segActDepTime() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer segActDepTimeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer segActDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Airport ICAO arrival code.
   * Example: /// Example: YBCS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String arrivalIcao() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrivalIcaoAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer arrivalIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Actual arrival time to segment destination, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-17T19:20:00.123Z
   * Constraints: No constraints specified.
   */
  public String segActArrTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer segActArrTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer segActArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * GC. LGTPS_C_DT_EST_DEP.  GD2: Estimated departure time from the segment origin. Only supplied when the segment is not attached to a Mission, otherwise the ETD is derived from the Mission segment origin point. This datetime should be in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-17T19:20:00.123Z
   * Constraints: No constraints specified.
   */
  public String segEstDepTime() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer segEstDepTimeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer segEstDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * GC. LGTPS_C_DT_EST_ARR.  GD2: Estimated arrival time to the segment destination. Only supplied when the segment is not attached to a Mission, otherwise the ETA is derived from the Mission segment destination point. This datetime should be in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-17T19:20:00.123Z
   * Constraints: No constraints specified.
   */
  public String segEstArrTime() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer segEstArrTimeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer segEstArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }

  public static int createLogisticsSegments_Full(FlatBufferBuilder builder,
      int segmentNumber,
      int modeCodeOffset,
      int missionTypeOffset,
      int idMissionOffset,
      int extMissionIdOffset,
      int missionNumberOffset,
      int itin,
      int segTailNumberOffset,
      int segAircraftMdsOffset,
      int departureIcaoOffset,
      int segActDepTimeOffset,
      int arrivalIcaoOffset,
      int segActArrTimeOffset,
      int segEstDepTimeOffset,
      int segEstArrTimeOffset) {
    builder.startTable(15);
    LogisticsSegments_Full.addSegEstArrTime(builder, segEstArrTimeOffset);
    LogisticsSegments_Full.addSegEstDepTime(builder, segEstDepTimeOffset);
    LogisticsSegments_Full.addSegActArrTime(builder, segActArrTimeOffset);
    LogisticsSegments_Full.addArrivalIcao(builder, arrivalIcaoOffset);
    LogisticsSegments_Full.addSegActDepTime(builder, segActDepTimeOffset);
    LogisticsSegments_Full.addDepartureIcao(builder, departureIcaoOffset);
    LogisticsSegments_Full.addSegAircraftMds(builder, segAircraftMdsOffset);
    LogisticsSegments_Full.addSegTailNumber(builder, segTailNumberOffset);
    LogisticsSegments_Full.addItin(builder, itin);
    LogisticsSegments_Full.addMissionNumber(builder, missionNumberOffset);
    LogisticsSegments_Full.addExtMissionId(builder, extMissionIdOffset);
    LogisticsSegments_Full.addIdMission(builder, idMissionOffset);
    LogisticsSegments_Full.addMissionType(builder, missionTypeOffset);
    LogisticsSegments_Full.addModeCode(builder, modeCodeOffset);
    LogisticsSegments_Full.addSegmentNumber(builder, segmentNumber);
    return LogisticsSegments_Full.endLogisticsSegments_Full(builder);
  }

  public static void startLogisticsSegments_Full(FlatBufferBuilder builder) { builder.startTable(15); }
  public static void addSegmentNumber(FlatBufferBuilder builder, int segmentNumber) { builder.addInt(0, segmentNumber, 0); }
  public static void addModeCode(FlatBufferBuilder builder, int modeCodeOffset) { builder.addOffset(1, modeCodeOffset, 0); }
  public static void addMissionType(FlatBufferBuilder builder, int missionTypeOffset) { builder.addOffset(2, missionTypeOffset, 0); }
  public static void addIdMission(FlatBufferBuilder builder, int idMissionOffset) { builder.addOffset(3, idMissionOffset, 0); }
  public static void addExtMissionId(FlatBufferBuilder builder, int extMissionIdOffset) { builder.addOffset(4, extMissionIdOffset, 0); }
  public static void addMissionNumber(FlatBufferBuilder builder, int missionNumberOffset) { builder.addOffset(5, missionNumberOffset, 0); }
  public static void addItin(FlatBufferBuilder builder, int itin) { builder.addInt(6, itin, 0); }
  public static void addSegTailNumber(FlatBufferBuilder builder, int segTailNumberOffset) { builder.addOffset(7, segTailNumberOffset, 0); }
  public static void addSegAircraftMds(FlatBufferBuilder builder, int segAircraftMdsOffset) { builder.addOffset(8, segAircraftMdsOffset, 0); }
  public static void addDepartureIcao(FlatBufferBuilder builder, int departureIcaoOffset) { builder.addOffset(9, departureIcaoOffset, 0); }
  public static void addSegActDepTime(FlatBufferBuilder builder, int segActDepTimeOffset) { builder.addOffset(10, segActDepTimeOffset, 0); }
  public static void addArrivalIcao(FlatBufferBuilder builder, int arrivalIcaoOffset) { builder.addOffset(11, arrivalIcaoOffset, 0); }
  public static void addSegActArrTime(FlatBufferBuilder builder, int segActArrTimeOffset) { builder.addOffset(12, segActArrTimeOffset, 0); }
  public static void addSegEstDepTime(FlatBufferBuilder builder, int segEstDepTimeOffset) { builder.addOffset(13, segEstDepTimeOffset, 0); }
  public static void addSegEstArrTime(FlatBufferBuilder builder, int segEstArrTimeOffset) { builder.addOffset(14, segEstArrTimeOffset, 0); }
  public static int endLogisticsSegments_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLogisticsSegments_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LOGI"); }
  public static void finishSizePrefixedLogisticsSegments_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LOGI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogisticsSegments_Full get(int j) { return get(new LogisticsSegments_Full(), j); }
    public LogisticsSegments_Full get(LogisticsSegments_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

