// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of Remarks associated with this Air Transport Mission.
 */
@SuppressWarnings("unused")
public final class AircraftMissionRemarks_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionRemarks_Ingest getRootAsAircraftMissionRemarks_Ingest(ByteBuffer _bb) { return getRootAsAircraftMissionRemarks_Ingest(_bb, new AircraftMissionRemarks_Ingest()); }
  public static AircraftMissionRemarks_Ingest getRootAsAircraftMissionRemarks_Ingest(ByteBuffer _bb, AircraftMissionRemarks_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AircraftMissionRemarks_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AircraftMissionRemarks_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Global Decision Support System (GDSS) remark identifier.
   * Example: /// Example: GDSSREMARK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String gdssRemarkId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gdssRemarkIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer gdssRemarkIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Remark type.
   * Example: /// Example: MP
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String type() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Text of the remark.
   * Example: /// Example: Example mission remarks.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String text() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer textInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String date() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dateAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer dateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * User who published the remark.
   * Example: /// Example: John Doe
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String user() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer userAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer userInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * If the remark is sortie specific, this is the number of the sortie it applies to.
   * Example: /// Example: 825
   * Constraints: No constraints specified.
   */
  public int itineraryNum() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createAircraftMissionRemarks_Ingest(FlatBufferBuilder builder,
      int gdssRemarkIdOffset,
      int typeOffset,
      int textOffset,
      int dateOffset,
      int userOffset,
      int itineraryNum) {
    builder.startTable(6);
    AircraftMissionRemarks_Ingest.addItineraryNum(builder, itineraryNum);
    AircraftMissionRemarks_Ingest.addUser(builder, userOffset);
    AircraftMissionRemarks_Ingest.addDate(builder, dateOffset);
    AircraftMissionRemarks_Ingest.addText(builder, textOffset);
    AircraftMissionRemarks_Ingest.addType(builder, typeOffset);
    AircraftMissionRemarks_Ingest.addGdssRemarkId(builder, gdssRemarkIdOffset);
    return AircraftMissionRemarks_Ingest.endAircraftMissionRemarks_Ingest(builder);
  }

  public static void startAircraftMissionRemarks_Ingest(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addGdssRemarkId(FlatBufferBuilder builder, int gdssRemarkIdOffset) { builder.addOffset(0, gdssRemarkIdOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(1, typeOffset, 0); }
  public static void addText(FlatBufferBuilder builder, int textOffset) { builder.addOffset(2, textOffset, 0); }
  public static void addDate(FlatBufferBuilder builder, int dateOffset) { builder.addOffset(3, dateOffset, 0); }
  public static void addUser(FlatBufferBuilder builder, int userOffset) { builder.addOffset(4, userOffset, 0); }
  public static void addItineraryNum(FlatBufferBuilder builder, int itineraryNum) { builder.addInt(5, itineraryNum, 0); }
  public static int endAircraftMissionRemarks_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraftMissionRemarks_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraftMissionRemarks_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AircraftMissionRemarks_Ingest get(int j) { return get(new AircraftMissionRemarks_Ingest(), j); }
    public AircraftMissionRemarks_Ingest get(AircraftMissionRemarks_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

