// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
 */
@SuppressWarnings("unused")
public final class FlightPlanPointGroups_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanPointGroups_Ingest getRootAsFlightPlanPointGroups_Ingest(ByteBuffer _bb) { return getRootAsFlightPlanPointGroups_Ingest(_bb, new FlightPlanPointGroups_Ingest()); }
  public static FlightPlanPointGroups_Ingest getRootAsFlightPlanPointGroups_Ingest(ByteBuffer _bb, FlightPlanPointGroups_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean FlightPlanPointGroups_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "FLIG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlightPlanPointGroups_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Name of the point group, usually Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP) sections.
   * Example: /// Example: ETOPS_CF_POINT_1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String pointGroupName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pointGroupNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer pointGroupNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Specifies which Point Group case requires the most fuel.
   * Example: /// Example: DEPRESSURIZED ENGINE OUT ETP
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String worstFuelCase() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer worstFuelCaseAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer worstFuelCaseInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Name of the last suitable airfield, International Civil Aviation Organization (ICAO) code preferred.
   * Example: /// Example: LPPD
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String lsafName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lsafNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer lsafNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Distance from the Equal Time Point (ETP) to the last suitable airfield in nautical miles.
   * Example: /// Example: 684.1
   * Constraints: No constraints specified.
   */
  public double lsafDistance() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Distance from the Equal Time Point (ETP) to the first suitable airfield in nautical miles.
   * Example: /// Example: 684.1
   * Constraints: No constraints specified.
   */
  public double fsafDistance() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Distance from the Extended Operations (ETOPS) point to the recovery airfield in nautical miles.
   * Example: /// Example: 684.1
   * Constraints: No constraints specified.
   */
  public double etopsDistance() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time to fly from the Equal Time Point (ETP) to the last suitable airfield expressed in HH:MM format.
   * Example: /// Example: 01:23
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String lsafTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lsafTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer lsafTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Time to fly from the Equal Time Point (ETP) to the first suitable airfield expressed in HH:MM format.
   * Example: /// Example: 01:23
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String fsafTime() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fsafTimeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer fsafTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Time to fly from the Extended Operations (ETOPS) point to the recovery airfield expressed in HH:MM format.
   * Example: /// Example: 01:23
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String etopsTime() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer etopsTimeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer etopsTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Average wind factor from the Equal Time Point (ETP) to the last suitable airfield in knots.
   * Example: /// Example: 13.1
   * Constraints: No constraints specified.
   */
  public double lsafAvgWindFactor() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average wind factor from the Equal Time Point (ETP) to the first suitable airfield in knots.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double fsafAvgWindFactor() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average wind factor from the Extended Operations (ETOPS) point to the recovery airfield in knots.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double etopsAvgWindFactor() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Temperature deviation from the Equal Time Point (ETP) to the last suitable airfield in degrees Celsius.
   * Example: /// Example: 9.1
   * Constraints: No constraints specified.
   */
  public double lsafTempDev() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Temperature deviation from the Equal Time Point (ETP) to the first suitable airfield in degrees Celsius.
   * Example: /// Example: 9.1
   * Constraints: No constraints specified.
   */
  public double fsafTempDev() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Temperature deviation from the Extended Operations (ETOPS) point to the recovery airfield in degrees Celsius.
   * Example: /// Example: 9.1
   * Constraints: No constraints specified.
   */
  public double etopsTempDev() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to fly from the Equal Time Point (ETP) to the last suitable airfield in pounds.
   * Example: /// Example: 50787.1
   * Constraints: No constraints specified.
   */
  public double lsafReqFuel() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to fly from the Equal Time Point (ETP) to the first suitable airfield in pounds.
   * Example: /// Example: 50380.1
   * Constraints: No constraints specified.
   */
  public double fsafReqFuel() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to fly from the Extended Operations (ETOPS) point to the recovery airfield in pounds.
   * Example: /// Example: 4412.1
   * Constraints: No constraints specified.
   */
  public double etopsReqFuel() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total time from takeoff when the point is reached expressed in HH:MM format.
   * Example: /// Example: 07:29
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String fromTakeoffTime() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fromTakeoffTimeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer fromTakeoffTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Amount of planned fuel on board when the point is reached in pounds.
   * Example: /// Example: 190319.1
   * Constraints: No constraints specified.
   */
  public double plannedFuel() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flight level of the point at which the fuel was calculated in feet.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double fuelCalcAlt() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * True airspeed at which the fuel was calculated in knots.
   * Example: /// Example: 365.1
   * Constraints: No constraints specified.
   */
  public double fuelCalcSpd() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average fuel flow at which the fuel was calculated in pounds per hour.
   * Example: /// Example: 19693.1
   * Constraints: No constraints specified.
   */
  public double avgFuelFlow() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of point data for this Point Group.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String flightPlanPoints(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int flightPlanPointsLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector flightPlanPointsVector() { return flightPlanPointsVector(new StringVector()); }
  public StringVector flightPlanPointsVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFlightPlanPointGroups_Ingest(FlatBufferBuilder builder,
      int pointGroupNameOffset,
      int worstFuelCaseOffset,
      int lsafNameOffset,
      double lsafDistance,
      double fsafDistance,
      double etopsDistance,
      int lsafTimeOffset,
      int fsafTimeOffset,
      int etopsTimeOffset,
      double lsafAvgWindFactor,
      double fsafAvgWindFactor,
      double etopsAvgWindFactor,
      double lsafTempDev,
      double fsafTempDev,
      double etopsTempDev,
      double lsafReqFuel,
      double fsafReqFuel,
      double etopsReqFuel,
      int fromTakeoffTimeOffset,
      double plannedFuel,
      double fuelCalcAlt,
      double fuelCalcSpd,
      double avgFuelFlow,
      int flightPlanPointsOffset) {
    builder.startTable(24);
    FlightPlanPointGroups_Ingest.addAvgFuelFlow(builder, avgFuelFlow);
    FlightPlanPointGroups_Ingest.addFuelCalcSpd(builder, fuelCalcSpd);
    FlightPlanPointGroups_Ingest.addFuelCalcAlt(builder, fuelCalcAlt);
    FlightPlanPointGroups_Ingest.addPlannedFuel(builder, plannedFuel);
    FlightPlanPointGroups_Ingest.addEtopsReqFuel(builder, etopsReqFuel);
    FlightPlanPointGroups_Ingest.addFsafReqFuel(builder, fsafReqFuel);
    FlightPlanPointGroups_Ingest.addLsafReqFuel(builder, lsafReqFuel);
    FlightPlanPointGroups_Ingest.addEtopsTempDev(builder, etopsTempDev);
    FlightPlanPointGroups_Ingest.addFsafTempDev(builder, fsafTempDev);
    FlightPlanPointGroups_Ingest.addLsafTempDev(builder, lsafTempDev);
    FlightPlanPointGroups_Ingest.addEtopsAvgWindFactor(builder, etopsAvgWindFactor);
    FlightPlanPointGroups_Ingest.addFsafAvgWindFactor(builder, fsafAvgWindFactor);
    FlightPlanPointGroups_Ingest.addLsafAvgWindFactor(builder, lsafAvgWindFactor);
    FlightPlanPointGroups_Ingest.addEtopsDistance(builder, etopsDistance);
    FlightPlanPointGroups_Ingest.addFsafDistance(builder, fsafDistance);
    FlightPlanPointGroups_Ingest.addLsafDistance(builder, lsafDistance);
    FlightPlanPointGroups_Ingest.addFlightPlanPoints(builder, flightPlanPointsOffset);
    FlightPlanPointGroups_Ingest.addFromTakeoffTime(builder, fromTakeoffTimeOffset);
    FlightPlanPointGroups_Ingest.addEtopsTime(builder, etopsTimeOffset);
    FlightPlanPointGroups_Ingest.addFsafTime(builder, fsafTimeOffset);
    FlightPlanPointGroups_Ingest.addLsafTime(builder, lsafTimeOffset);
    FlightPlanPointGroups_Ingest.addLsafName(builder, lsafNameOffset);
    FlightPlanPointGroups_Ingest.addWorstFuelCase(builder, worstFuelCaseOffset);
    FlightPlanPointGroups_Ingest.addPointGroupName(builder, pointGroupNameOffset);
    return FlightPlanPointGroups_Ingest.endFlightPlanPointGroups_Ingest(builder);
  }

  public static void startFlightPlanPointGroups_Ingest(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addPointGroupName(FlatBufferBuilder builder, int pointGroupNameOffset) { builder.addOffset(0, pointGroupNameOffset, 0); }
  public static void addWorstFuelCase(FlatBufferBuilder builder, int worstFuelCaseOffset) { builder.addOffset(1, worstFuelCaseOffset, 0); }
  public static void addLsafName(FlatBufferBuilder builder, int lsafNameOffset) { builder.addOffset(2, lsafNameOffset, 0); }
  public static void addLsafDistance(FlatBufferBuilder builder, double lsafDistance) { builder.addDouble(3, lsafDistance, 0.0); }
  public static void addFsafDistance(FlatBufferBuilder builder, double fsafDistance) { builder.addDouble(4, fsafDistance, 0.0); }
  public static void addEtopsDistance(FlatBufferBuilder builder, double etopsDistance) { builder.addDouble(5, etopsDistance, 0.0); }
  public static void addLsafTime(FlatBufferBuilder builder, int lsafTimeOffset) { builder.addOffset(6, lsafTimeOffset, 0); }
  public static void addFsafTime(FlatBufferBuilder builder, int fsafTimeOffset) { builder.addOffset(7, fsafTimeOffset, 0); }
  public static void addEtopsTime(FlatBufferBuilder builder, int etopsTimeOffset) { builder.addOffset(8, etopsTimeOffset, 0); }
  public static void addLsafAvgWindFactor(FlatBufferBuilder builder, double lsafAvgWindFactor) { builder.addDouble(9, lsafAvgWindFactor, 0.0); }
  public static void addFsafAvgWindFactor(FlatBufferBuilder builder, double fsafAvgWindFactor) { builder.addDouble(10, fsafAvgWindFactor, 0.0); }
  public static void addEtopsAvgWindFactor(FlatBufferBuilder builder, double etopsAvgWindFactor) { builder.addDouble(11, etopsAvgWindFactor, 0.0); }
  public static void addLsafTempDev(FlatBufferBuilder builder, double lsafTempDev) { builder.addDouble(12, lsafTempDev, 0.0); }
  public static void addFsafTempDev(FlatBufferBuilder builder, double fsafTempDev) { builder.addDouble(13, fsafTempDev, 0.0); }
  public static void addEtopsTempDev(FlatBufferBuilder builder, double etopsTempDev) { builder.addDouble(14, etopsTempDev, 0.0); }
  public static void addLsafReqFuel(FlatBufferBuilder builder, double lsafReqFuel) { builder.addDouble(15, lsafReqFuel, 0.0); }
  public static void addFsafReqFuel(FlatBufferBuilder builder, double fsafReqFuel) { builder.addDouble(16, fsafReqFuel, 0.0); }
  public static void addEtopsReqFuel(FlatBufferBuilder builder, double etopsReqFuel) { builder.addDouble(17, etopsReqFuel, 0.0); }
  public static void addFromTakeoffTime(FlatBufferBuilder builder, int fromTakeoffTimeOffset) { builder.addOffset(18, fromTakeoffTimeOffset, 0); }
  public static void addPlannedFuel(FlatBufferBuilder builder, double plannedFuel) { builder.addDouble(19, plannedFuel, 0.0); }
  public static void addFuelCalcAlt(FlatBufferBuilder builder, double fuelCalcAlt) { builder.addDouble(20, fuelCalcAlt, 0.0); }
  public static void addFuelCalcSpd(FlatBufferBuilder builder, double fuelCalcSpd) { builder.addDouble(21, fuelCalcSpd, 0.0); }
  public static void addAvgFuelFlow(FlatBufferBuilder builder, double avgFuelFlow) { builder.addDouble(22, avgFuelFlow, 0.0); }
  public static void addFlightPlanPoints(FlatBufferBuilder builder, int flightPlanPointsOffset) { builder.addOffset(23, flightPlanPointsOffset, 0); }
  public static int createFlightPlanPointsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFlightPlanPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFlightPlanPointGroups_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFlightPlanPointGroups_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "FLIG"); }
  public static void finishSizePrefixedFlightPlanPointGroups_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "FLIG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlightPlanPointGroups_Ingest get(int j) { return get(new FlightPlanPointGroups_Ingest(), j); }
    public FlightPlanPointGroups_Ingest get(FlightPlanPointGroups_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

