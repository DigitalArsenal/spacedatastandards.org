// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Schema for SOI Calibration data.
 */
@SuppressWarnings("unused")
public final class SOICalibration_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SOICalibration_Abridged getRootAsSOICalibration_Abridged(ByteBuffer _bb) { return getRootAsSOICalibration_Abridged(_bb, new SOICalibration_Abridged()); }
  public static SOICalibration_Abridged getRootAsSOICalibration_Abridged(ByteBuffer _bb, SOICalibration_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SOICalibration_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SOIC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SOICalibration_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
   * Example: /// Example: 0.2
   * Constraints: No constraints specified.
   */
  public double calExtinctionCoeff() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
   * Example: /// Example: 30086.25
   * Constraints: No constraints specified.
   */
  public double calSkyBg() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double calBgIntensity() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
   * Example: /// Example: 19.23664587
   * Constraints: No constraints specified.
   */
  public double calSpectralFilterSolarMag() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
   * Example: /// Example: 25.15682157
   * Constraints: No constraints specified.
   */
  public double calZeroPoint() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int calNumDetectedStars() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int calNumCorrelatedStars() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
   * Example: /// Example: 0.06474939
   * Constraints: No constraints specified.
   */
  public double calExtinctionCoeffUnc() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
   * Example: /// Example: 0.19708838
   * Constraints: No constraints specified.
   */
  public double calExtinctionCoeffMaxUnc() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Start time of calibration in ISO 8601 UTC time, with millisecond precision.
   * Example: /// Example: 2023-01-02T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String calTime() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer calTimeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer calTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Type of calibration (e.g. PRE, MID, POST).
   * Example: /// Example: PRE
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String calType() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer calTypeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer calTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }

  public static int createSOICalibration_Abridged(FlatBufferBuilder builder,
      double calExtinctionCoeff,
      double calSkyBg,
      double calBgIntensity,
      double calSpectralFilterSolarMag,
      double calZeroPoint,
      int calNumDetectedStars,
      int calNumCorrelatedStars,
      double calExtinctionCoeffUnc,
      double calExtinctionCoeffMaxUnc,
      int calTimeOffset,
      int calTypeOffset) {
    builder.startTable(11);
    SOICalibration_Abridged.addCalExtinctionCoeffMaxUnc(builder, calExtinctionCoeffMaxUnc);
    SOICalibration_Abridged.addCalExtinctionCoeffUnc(builder, calExtinctionCoeffUnc);
    SOICalibration_Abridged.addCalZeroPoint(builder, calZeroPoint);
    SOICalibration_Abridged.addCalSpectralFilterSolarMag(builder, calSpectralFilterSolarMag);
    SOICalibration_Abridged.addCalBgIntensity(builder, calBgIntensity);
    SOICalibration_Abridged.addCalSkyBg(builder, calSkyBg);
    SOICalibration_Abridged.addCalExtinctionCoeff(builder, calExtinctionCoeff);
    SOICalibration_Abridged.addCalType(builder, calTypeOffset);
    SOICalibration_Abridged.addCalTime(builder, calTimeOffset);
    SOICalibration_Abridged.addCalNumCorrelatedStars(builder, calNumCorrelatedStars);
    SOICalibration_Abridged.addCalNumDetectedStars(builder, calNumDetectedStars);
    return SOICalibration_Abridged.endSOICalibration_Abridged(builder);
  }

  public static void startSOICalibration_Abridged(FlatBufferBuilder builder) { builder.startTable(11); }
  public static void addCalExtinctionCoeff(FlatBufferBuilder builder, double calExtinctionCoeff) { builder.addDouble(0, calExtinctionCoeff, 0.0); }
  public static void addCalSkyBg(FlatBufferBuilder builder, double calSkyBg) { builder.addDouble(1, calSkyBg, 0.0); }
  public static void addCalBgIntensity(FlatBufferBuilder builder, double calBgIntensity) { builder.addDouble(2, calBgIntensity, 0.0); }
  public static void addCalSpectralFilterSolarMag(FlatBufferBuilder builder, double calSpectralFilterSolarMag) { builder.addDouble(3, calSpectralFilterSolarMag, 0.0); }
  public static void addCalZeroPoint(FlatBufferBuilder builder, double calZeroPoint) { builder.addDouble(4, calZeroPoint, 0.0); }
  public static void addCalNumDetectedStars(FlatBufferBuilder builder, int calNumDetectedStars) { builder.addInt(5, calNumDetectedStars, 0); }
  public static void addCalNumCorrelatedStars(FlatBufferBuilder builder, int calNumCorrelatedStars) { builder.addInt(6, calNumCorrelatedStars, 0); }
  public static void addCalExtinctionCoeffUnc(FlatBufferBuilder builder, double calExtinctionCoeffUnc) { builder.addDouble(7, calExtinctionCoeffUnc, 0.0); }
  public static void addCalExtinctionCoeffMaxUnc(FlatBufferBuilder builder, double calExtinctionCoeffMaxUnc) { builder.addDouble(8, calExtinctionCoeffMaxUnc, 0.0); }
  public static void addCalTime(FlatBufferBuilder builder, int calTimeOffset) { builder.addOffset(9, calTimeOffset, 0); }
  public static void addCalType(FlatBufferBuilder builder, int calTypeOffset) { builder.addOffset(10, calTypeOffset, 0); }
  public static int endSOICalibration_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSOICalibration_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SOIC"); }
  public static void finishSizePrefixedSOICalibration_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SOIC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SOICalibration_Abridged get(int j) { return get(new SOICalibration_Abridged(), j); }
    public SOICalibration_Abridged get(SOICalibration_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

