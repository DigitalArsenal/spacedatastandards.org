// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Theoretical Keplarian orbital elements belonging to an object of interest's manifold describing a possible/theoretical orbit for an object of interest for tasking purposes.
 */
@SuppressWarnings("unused")
public final class ManifoldElset_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ManifoldElset_Ingest getRootAsManifoldElset_Ingest(ByteBuffer _bb) { return getRootAsManifoldElset_Ingest(_bb, new ManifoldElset_Ingest()); }
  public static ManifoldElset_Ingest getRootAsManifoldElset_Ingest(ByteBuffer _bb, ManifoldElset_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ManifoldElset_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MANI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ManifoldElset_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: MANIFOLDELSET-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the parent Manifold record.
   * Example: /// Example: REF-MANIFOLD-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idManifold() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idManifoldAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idManifoldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * A placeholder satellite number and not a true NORAD catalog number.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int tmpSatNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Elset epoch time in ISO 8601 UTC format, with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String epoch() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer epochAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer epochInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The constant angular speed required for the body to complete one circular orbit in the same amount of time as the actual elliptical orbit with variable speed. Measured in revolutions per day.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double meanMotion() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double eccentricity() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
   * Example: /// Example: 90.23
   * Constraints: No constraints specified.
   */
  public double inclination() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double raan() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double argOfPerigee() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double meanAnomaly() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int revNo() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double bStar() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double meanMotionDot() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double meanMotionDdot() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double semiMajorAxis() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Period of the orbit equal to inverse of mean motion.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double period() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Orbit point furthest from the center of the earth in kilometers.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double apogee() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The orbit point nearest to the center of the earth in kilometers.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double perigee() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
   * Example: /// Example: No example provided.
   * Constraints: Minimum length = 0, Maximum length = 69
   */
  public String line1() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer line1AsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer line1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
   * Example: /// Example: No example provided.
   * Constraints: Minimum length = 0, Maximum length = 69
   */
  public String line2() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer line2AsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer line2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(54); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }

  public static int createManifoldElset_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int idManifoldOffset,
      int classificationMarkingOffset,
      int tmpSatNo,
      int epochOffset,
      double meanMotion,
      double eccentricity,
      double inclination,
      double raan,
      double argOfPerigee,
      double meanAnomaly,
      int revNo,
      double bStar,
      double meanMotionDot,
      double meanMotionDdot,
      double semiMajorAxis,
      double period,
      double apogee,
      double perigee,
      int line1Offset,
      int line2Offset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(27);
    ManifoldElset_Ingest.addPerigee(builder, perigee);
    ManifoldElset_Ingest.addApogee(builder, apogee);
    ManifoldElset_Ingest.addPeriod(builder, period);
    ManifoldElset_Ingest.addSemiMajorAxis(builder, semiMajorAxis);
    ManifoldElset_Ingest.addMeanMotionDdot(builder, meanMotionDdot);
    ManifoldElset_Ingest.addMeanMotionDot(builder, meanMotionDot);
    ManifoldElset_Ingest.addBStar(builder, bStar);
    ManifoldElset_Ingest.addMeanAnomaly(builder, meanAnomaly);
    ManifoldElset_Ingest.addArgOfPerigee(builder, argOfPerigee);
    ManifoldElset_Ingest.addRaan(builder, raan);
    ManifoldElset_Ingest.addInclination(builder, inclination);
    ManifoldElset_Ingest.addEccentricity(builder, eccentricity);
    ManifoldElset_Ingest.addMeanMotion(builder, meanMotion);
    ManifoldElset_Ingest.addOrigNetwork(builder, origNetworkOffset);
    ManifoldElset_Ingest.addOrigin(builder, originOffset);
    ManifoldElset_Ingest.addSource(builder, sourceOffset);
    ManifoldElset_Ingest.addCreatedBy(builder, createdByOffset);
    ManifoldElset_Ingest.addCreatedAt(builder, createdAtOffset);
    ManifoldElset_Ingest.addLine2(builder, line2Offset);
    ManifoldElset_Ingest.addLine1(builder, line1Offset);
    ManifoldElset_Ingest.addRevNo(builder, revNo);
    ManifoldElset_Ingest.addEpoch(builder, epochOffset);
    ManifoldElset_Ingest.addTmpSatNo(builder, tmpSatNo);
    ManifoldElset_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    ManifoldElset_Ingest.addIdManifold(builder, idManifoldOffset);
    ManifoldElset_Ingest.addId(builder, idOffset);
    ManifoldElset_Ingest.addDataMode(builder, dataMode);
    return ManifoldElset_Ingest.endManifoldElset_Ingest(builder);
  }

  public static void startManifoldElset_Ingest(FlatBufferBuilder builder) { builder.startTable(27); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdManifold(FlatBufferBuilder builder, int idManifoldOffset) { builder.addOffset(1, idManifoldOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addTmpSatNo(FlatBufferBuilder builder, int tmpSatNo) { builder.addInt(3, tmpSatNo, 0); }
  public static void addEpoch(FlatBufferBuilder builder, int epochOffset) { builder.addOffset(4, epochOffset, 0); }
  public static void addMeanMotion(FlatBufferBuilder builder, double meanMotion) { builder.addDouble(5, meanMotion, 0.0); }
  public static void addEccentricity(FlatBufferBuilder builder, double eccentricity) { builder.addDouble(6, eccentricity, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double inclination) { builder.addDouble(7, inclination, 0.0); }
  public static void addRaan(FlatBufferBuilder builder, double raan) { builder.addDouble(8, raan, 0.0); }
  public static void addArgOfPerigee(FlatBufferBuilder builder, double argOfPerigee) { builder.addDouble(9, argOfPerigee, 0.0); }
  public static void addMeanAnomaly(FlatBufferBuilder builder, double meanAnomaly) { builder.addDouble(10, meanAnomaly, 0.0); }
  public static void addRevNo(FlatBufferBuilder builder, int revNo) { builder.addInt(11, revNo, 0); }
  public static void addBStar(FlatBufferBuilder builder, double bStar) { builder.addDouble(12, bStar, 0.0); }
  public static void addMeanMotionDot(FlatBufferBuilder builder, double meanMotionDot) { builder.addDouble(13, meanMotionDot, 0.0); }
  public static void addMeanMotionDdot(FlatBufferBuilder builder, double meanMotionDdot) { builder.addDouble(14, meanMotionDdot, 0.0); }
  public static void addSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.addDouble(15, semiMajorAxis, 0.0); }
  public static void addPeriod(FlatBufferBuilder builder, double period) { builder.addDouble(16, period, 0.0); }
  public static void addApogee(FlatBufferBuilder builder, double apogee) { builder.addDouble(17, apogee, 0.0); }
  public static void addPerigee(FlatBufferBuilder builder, double perigee) { builder.addDouble(18, perigee, 0.0); }
  public static void addLine1(FlatBufferBuilder builder, int line1Offset) { builder.addOffset(19, line1Offset, 0); }
  public static void addLine2(FlatBufferBuilder builder, int line2Offset) { builder.addOffset(20, line2Offset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(21, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(22, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(23, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(24, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(25, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(26, origNetworkOffset, 0); }
  public static int endManifoldElset_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishManifoldElset_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MANI"); }
  public static void finishSizePrefixedManifoldElset_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MANI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ManifoldElset_Ingest get(int j) { return get(new ManifoldElset_Ingest(), j); }
    public ManifoldElset_Ingest get(ManifoldElset_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

