// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A Radar SOI record contains observation information taken from a sensor about a Space Object.
 */
@SuppressWarnings("unused")
public final class RadarSOIObservation_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static RadarSOIObservation_Ingest getRootAsRadarSOIObservation_Ingest(ByteBuffer _bb) { return getRootAsRadarSOIObservation_Ingest(_bb, new RadarSOIObservation_Ingest()); }
  public static RadarSOIObservation_Ingest getRootAsRadarSOIObservation_Ingest(ByteBuffer _bb, RadarSOIObservation_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean RadarSOIObservation_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "RADA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RadarSOIObservation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Observation detection start time in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.888456Z
   * Constraints: No constraints specified.
   */
  public String obStartTime() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obStartTimeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer obStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Array of the times of validity in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.888456Z']
   * Constraints: No constraints specified.
   */
  public String tovs(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tovsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tovsVector() { return tovsVector(new StringVector()); }
  public StringVector tovsVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of range sample spacing in meters. The 'tov' and 'rspace' arrays must match in size.
   * Example: /// Example: [0.006, 0.006, 0.006]
   * Constraints: No constraints specified.
   */
  public String rspaces(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rspacesLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rspacesVector() { return rspacesVector(new StringVector()); }
  public StringVector rspacesVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of cross-range sample spacing in meters. The 'tov' and 'xspace' arrays must match in size.
   * Example: /// Example: [0.006, 0.006, 0.006]
   * Constraints: No constraints specified.
   */
  public String xspaces(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int xspacesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector xspacesVector() { return xspacesVector(new StringVector()); }
  public StringVector xspacesVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of conversion factors between Doppler in hertz and cross-range in meters. The 'tov' and 'doppler2XR' arrays must match in size.
   * Example: /// Example: [5644.27, 5644.27, 5644.27]
   * Constraints: No constraints specified.
   */
  public String doppler2Xrs(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int doppler2XrsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public StringVector doppler2XrsVector() { return doppler2XrsVector(new StringVector()); }
  public StringVector doppler2XrsVector(StringVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of average Interpulse spacing in seconds. The 'tov' and 'deltaTime' arrays must match in size.
   * Example: /// Example: [0.005, 0.005, 0.005]
   * Constraints: No constraints specified.
   */
  public String deltaTimes(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int deltaTimesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector deltaTimesVector() { return deltaTimesVector(new StringVector()); }
  public StringVector deltaTimesVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the aspect angle at the center of the image in degrees.  The 'tov' and 'aspectAngle' arrays must match in size.
   * Example: /// Example: [4.278, 4.278, 4.278]
   * Constraints: No constraints specified.
   */
  public String aspectAngles(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int aspectAnglesLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector aspectAnglesVector() { return aspectAnglesVector(new StringVector()); }
  public StringVector aspectAnglesVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the component of target angular velocity observable by radar in radians per second.  The 'tov' and 'projAngVel' arrays must match in size.
   * Example: /// Example: [0.166, 0.166, 0.166]
   * Constraints: No constraints specified.
   */
  public String projAngVels(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int projAngVelsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector projAngVelsVector() { return projAngVelsVector(new StringVector()); }
  public StringVector projAngVelsVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional id of assumed StateVector of object being observed.
   * Example: /// Example: 99a0de63-b38f-4d81-b057
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idStateVector() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idStateVectorAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer idStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Optional id of assumed AttitudeSet of object being observed.
   * Example: /// Example: 99a0de63-b38f-4d81-b057
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAttitudeSet() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAttitudeSetAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer idAttitudeSetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Array of the range to target at image center in kilometers. The 'tov' and 'range' arrays must match in size.
   * Example: /// Example: [877.938, 877.938, 877.938]
   * Constraints: No constraints specified.
   */
  public String ranges(int j) { int o = __offset(24); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rangesLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rangesVector() { return rangesVector(new StringVector()); }
  public StringVector rangesVector(StringVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the azimuth angle to target at image center in degrees. The 'tov' and 'azimuth' arrays must match in size.
   * Example: /// Example: [278.27, 278.27, 278.27]
   * Constraints: No constraints specified.
   */
  public String azimuths(int j) { int o = __offset(26); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int azimuthsLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public StringVector azimuthsVector() { return azimuthsVector(new StringVector()); }
  public StringVector azimuthsVector(StringVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the elevation angle to target at image center in degrees. The 'tov' and 'elevation' arrays must match in size.
   * Example: /// Example: [70.85, 70.85, 70.85]
   * Constraints: No constraints specified.
   */
  public String elevations(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int elevationsLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector elevationsVector() { return elevationsVector(new StringVector()); }
  public StringVector elevationsVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the range rate of target at image center in kilometers per second. The 'tov' and 'rangeRate' arrays must match in size.
   * Example: /// Example: [0.317, 0.317, 0.317]
   * Constraints: No constraints specified.
   */
  public String rangeRates(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rangeRatesLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rangeRatesVector() { return rangeRatesVector(new StringVector()); }
  public StringVector rangeRatesVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the azimuth rate of target at image center in degrees per second. The 'tov' and 'azimuthRate' arrays must match in size.
   * Example: /// Example: [-1.481, -1.481, -1.481]
   * Constraints: No constraints specified.
   */
  public String azimuthRates(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int azimuthRatesLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector azimuthRatesVector() { return azimuthRatesVector(new StringVector()); }
  public StringVector azimuthRatesVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the elevation rate of target at image center in degrees per second. The 'tov' and 'elevationRate' arrays must match in size.
   * Example: /// Example: [-0.074, -0.074, -0.074]
   * Constraints: No constraints specified.
   */
  public String elevationRates(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int elevationRatesLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector elevationRatesVector() { return elevationRatesVector(new StringVector()); }
  public StringVector elevationRatesVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of  sensor azimuth angle biases in degrees. The 'tov' and 'azimuthBias' arrays must match in size.
   * Example: /// Example: [45.23, 45.23, 45.23]
   * Constraints: No constraints specified.
   */
  public String azimuthBiases(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int azimuthBiasesLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector azimuthBiasesVector() { return azimuthBiasesVector(new StringVector()); }
  public StringVector azimuthBiasesVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of sensor elevation biases in degrees. The 'tov' and 'elevationBias' arrays must match in size.
   * Example: /// Example: [1.23, 1.23, 1.23]
   * Constraints: No constraints specified.
   */
  public String elevationBiases(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int elevationBiasesLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector elevationBiasesVector() { return elevationBiasesVector(new StringVector()); }
  public StringVector elevationBiasesVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of sensor range biases in kilometers. The 'tov' and 'rangeBias' arrays must match in size.
   * Example: /// Example: [1.23, 1.23, 1.23]
   * Constraints: No constraints specified.
   */
  public String rangeBiases(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rangeBiasesLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rangeBiasesVector() { return rangeBiasesVector(new StringVector()); }
  public StringVector rangeBiasesVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Integration angles in degrees. The 'tov' and 'integrationAngle' arrays must match in size.
   * Example: /// Example: [8.594, 8.594, 8.594]
   * Constraints: No constraints specified.
   */
  public String integrationAngles(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int integrationAnglesLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector integrationAnglesVector() { return integrationAnglesVector(new StringVector()); }
  public StringVector integrationAnglesVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of cross-range resolutions (accounting for weighting function) in kilometers. The 'tov' and 'crossRangeRes' arrays must match in size.
   * Example: /// Example: [11.301, 11.301, 11.301]
   * Constraints: No constraints specified.
   */
  public String crossRangeRes(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int crossRangeResLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector crossRangeResVector() { return crossRangeResVector(new StringVector()); }
  public StringVector crossRangeResVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Beta angle (between target and radar-image frame z axis) in degrees.
   * Example: /// Example: -89.97
   * Constraints: No constraints specified.
   */
  public double beta() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Kappa angle (between radar-line-of-sight and target-frame x axis) in degrees.
   * Example: /// Example: 103.04
   * Constraints: No constraints specified.
   */
  public double kappa() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of the peak pixel amplitude for each image in decibels. The 'tov' and 'peakAmplitude' arrays must match in size.
   * Example: /// Example: [33.1, 33.1, 33.1]
   * Constraints: No constraints specified.
   */
  public String peakAmplitudes(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int peakAmplitudesLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector peakAmplitudesVector() { return peakAmplitudesVector(new StringVector()); }
  public StringVector peakAmplitudesVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Radar center frequency of the radar in hertz.
   * Example: /// Example: 160047.0625
   * Constraints: No constraints specified.
   */
  public double centerFrequency() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Bandwidth of radar pulse in hertz.
   * Example: /// Example: 24094.12
   * Constraints: No constraints specified.
   */
  public double pulseBandwidth() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of the cartesian X positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xpos' arrays must match in size.
   * Example: /// Example: [-1118.577381, -1118.577381, -1118.577381]
   * Constraints: No constraints specified.
   */
  public String xpos(int j) { int o = __offset(56); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int xposLength() { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; }
  public StringVector xposVector() { return xposVector(new StringVector()); }
  public StringVector xposVector(StringVector obj) { int o = __offset(56); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the cartesian Y positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'ypos' arrays must match in size.
   * Example: /// Example: [3026.231084, 3026.231084, 3026.231084]
   * Constraints: No constraints specified.
   */
  public String ypos(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int yposLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector yposVector() { return yposVector(new StringVector()); }
  public StringVector yposVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the cartesian Z positions of the target, in kilometers, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'zpos' arrays must match in size.
   * Example: /// Example: [6167.831808, 6167.831808, 6167.831808]
   * Constraints: No constraints specified.
   */
  public String zpos(int j) { int o = __offset(60); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int zposLength() { int o = __offset(60); return o != 0 ? __vector_len(o) : 0; }
  public StringVector zposVector() { return zposVector(new StringVector()); }
  public StringVector zposVector(StringVector obj) { int o = __offset(60); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the cartesian X velocities of target, in kilometers per second, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed. The 'tov' and 'xvel' arrays must match in size.
   * Example: /// Example: [-4.25242784, -4.25242784, -4.25242784]
   * Constraints: No constraints specified.
   */
  public String xvel(int j) { int o = __offset(62); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int xvelLength() { int o = __offset(62); return o != 0 ? __vector_len(o) : 0; }
  public StringVector xvelVector() { return xvelVector(new StringVector()); }
  public StringVector xvelVector(StringVector obj) { int o = __offset(62); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the cartesian Y velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'yvel' arrays must match in size.
   * Example: /// Example: [5.291107434, 5.291107434, 5.291107434]
   * Constraints: No constraints specified.
   */
  public String yvel(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int yvelLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector yvelVector() { return yvelVector(new StringVector()); }
  public StringVector yvelVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the cartesian Z velocities of target, in kilometers per second, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed. The 'tov' and 'zvel' arrays must match in size.
   * Example: /// Example: [-3.356493869, -3.356493869, -3.356493869]
   * Constraints: No constraints specified.
   */
  public String zvel(int j) { int o = __offset(66); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int zvelLength() { int o = __offset(66); return o != 0 ? __vector_len(o) : 0; }
  public StringVector zvelVector() { return zvelVector(new StringVector()); }
  public StringVector zvelVector(StringVector obj) { int o = __offset(66); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createRadarSOIObservation_Ingest(FlatBufferBuilder builder,
      int obStartTimeOffset,
      int tovsOffset,
      int rspacesOffset,
      int xspacesOffset,
      int doppler2XrsOffset,
      int deltaTimesOffset,
      int aspectAnglesOffset,
      int projAngVelsOffset,
      int idStateVectorOffset,
      int idAttitudeSetOffset,
      int rangesOffset,
      int azimuthsOffset,
      int elevationsOffset,
      int rangeRatesOffset,
      int azimuthRatesOffset,
      int elevationRatesOffset,
      int azimuthBiasesOffset,
      int elevationBiasesOffset,
      int rangeBiasesOffset,
      int integrationAnglesOffset,
      int crossRangeResOffset,
      double beta,
      double kappa,
      int peakAmplitudesOffset,
      double centerFrequency,
      double pulseBandwidth,
      int xposOffset,
      int yposOffset,
      int zposOffset,
      int xvelOffset,
      int yvelOffset,
      int zvelOffset) {
    builder.startTable(32);
    RadarSOIObservation_Ingest.addPulseBandwidth(builder, pulseBandwidth);
    RadarSOIObservation_Ingest.addCenterFrequency(builder, centerFrequency);
    RadarSOIObservation_Ingest.addKappa(builder, kappa);
    RadarSOIObservation_Ingest.addBeta(builder, beta);
    RadarSOIObservation_Ingest.addZvel(builder, zvelOffset);
    RadarSOIObservation_Ingest.addYvel(builder, yvelOffset);
    RadarSOIObservation_Ingest.addXvel(builder, xvelOffset);
    RadarSOIObservation_Ingest.addZpos(builder, zposOffset);
    RadarSOIObservation_Ingest.addYpos(builder, yposOffset);
    RadarSOIObservation_Ingest.addXpos(builder, xposOffset);
    RadarSOIObservation_Ingest.addPeakAmplitudes(builder, peakAmplitudesOffset);
    RadarSOIObservation_Ingest.addCrossRangeRes(builder, crossRangeResOffset);
    RadarSOIObservation_Ingest.addIntegrationAngles(builder, integrationAnglesOffset);
    RadarSOIObservation_Ingest.addRangeBiases(builder, rangeBiasesOffset);
    RadarSOIObservation_Ingest.addElevationBiases(builder, elevationBiasesOffset);
    RadarSOIObservation_Ingest.addAzimuthBiases(builder, azimuthBiasesOffset);
    RadarSOIObservation_Ingest.addElevationRates(builder, elevationRatesOffset);
    RadarSOIObservation_Ingest.addAzimuthRates(builder, azimuthRatesOffset);
    RadarSOIObservation_Ingest.addRangeRates(builder, rangeRatesOffset);
    RadarSOIObservation_Ingest.addElevations(builder, elevationsOffset);
    RadarSOIObservation_Ingest.addAzimuths(builder, azimuthsOffset);
    RadarSOIObservation_Ingest.addRanges(builder, rangesOffset);
    RadarSOIObservation_Ingest.addIdAttitudeSet(builder, idAttitudeSetOffset);
    RadarSOIObservation_Ingest.addIdStateVector(builder, idStateVectorOffset);
    RadarSOIObservation_Ingest.addProjAngVels(builder, projAngVelsOffset);
    RadarSOIObservation_Ingest.addAspectAngles(builder, aspectAnglesOffset);
    RadarSOIObservation_Ingest.addDeltaTimes(builder, deltaTimesOffset);
    RadarSOIObservation_Ingest.addDoppler2Xrs(builder, doppler2XrsOffset);
    RadarSOIObservation_Ingest.addXspaces(builder, xspacesOffset);
    RadarSOIObservation_Ingest.addRspaces(builder, rspacesOffset);
    RadarSOIObservation_Ingest.addTovs(builder, tovsOffset);
    RadarSOIObservation_Ingest.addObStartTime(builder, obStartTimeOffset);
    return RadarSOIObservation_Ingest.endRadarSOIObservation_Ingest(builder);
  }

  public static void startRadarSOIObservation_Ingest(FlatBufferBuilder builder) { builder.startTable(32); }
  public static void addObStartTime(FlatBufferBuilder builder, int obStartTimeOffset) { builder.addOffset(0, obStartTimeOffset, 0); }
  public static void addTovs(FlatBufferBuilder builder, int tovsOffset) { builder.addOffset(1, tovsOffset, 0); }
  public static int createTovsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTovsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRspaces(FlatBufferBuilder builder, int rspacesOffset) { builder.addOffset(2, rspacesOffset, 0); }
  public static int createRspacesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRspacesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addXspaces(FlatBufferBuilder builder, int xspacesOffset) { builder.addOffset(3, xspacesOffset, 0); }
  public static int createXspacesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startXspacesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDoppler2Xrs(FlatBufferBuilder builder, int doppler2XrsOffset) { builder.addOffset(4, doppler2XrsOffset, 0); }
  public static int createDoppler2XrsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDoppler2XrsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDeltaTimes(FlatBufferBuilder builder, int deltaTimesOffset) { builder.addOffset(5, deltaTimesOffset, 0); }
  public static int createDeltaTimesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDeltaTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAspectAngles(FlatBufferBuilder builder, int aspectAnglesOffset) { builder.addOffset(6, aspectAnglesOffset, 0); }
  public static int createAspectAnglesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAspectAnglesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addProjAngVels(FlatBufferBuilder builder, int projAngVelsOffset) { builder.addOffset(7, projAngVelsOffset, 0); }
  public static int createProjAngVelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startProjAngVelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIdStateVector(FlatBufferBuilder builder, int idStateVectorOffset) { builder.addOffset(8, idStateVectorOffset, 0); }
  public static void addIdAttitudeSet(FlatBufferBuilder builder, int idAttitudeSetOffset) { builder.addOffset(9, idAttitudeSetOffset, 0); }
  public static void addRanges(FlatBufferBuilder builder, int rangesOffset) { builder.addOffset(10, rangesOffset, 0); }
  public static int createRangesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRangesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAzimuths(FlatBufferBuilder builder, int azimuthsOffset) { builder.addOffset(11, azimuthsOffset, 0); }
  public static int createAzimuthsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAzimuthsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addElevations(FlatBufferBuilder builder, int elevationsOffset) { builder.addOffset(12, elevationsOffset, 0); }
  public static int createElevationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startElevationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRangeRates(FlatBufferBuilder builder, int rangeRatesOffset) { builder.addOffset(13, rangeRatesOffset, 0); }
  public static int createRangeRatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRangeRatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAzimuthRates(FlatBufferBuilder builder, int azimuthRatesOffset) { builder.addOffset(14, azimuthRatesOffset, 0); }
  public static int createAzimuthRatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAzimuthRatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addElevationRates(FlatBufferBuilder builder, int elevationRatesOffset) { builder.addOffset(15, elevationRatesOffset, 0); }
  public static int createElevationRatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startElevationRatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAzimuthBiases(FlatBufferBuilder builder, int azimuthBiasesOffset) { builder.addOffset(16, azimuthBiasesOffset, 0); }
  public static int createAzimuthBiasesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAzimuthBiasesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addElevationBiases(FlatBufferBuilder builder, int elevationBiasesOffset) { builder.addOffset(17, elevationBiasesOffset, 0); }
  public static int createElevationBiasesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startElevationBiasesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRangeBiases(FlatBufferBuilder builder, int rangeBiasesOffset) { builder.addOffset(18, rangeBiasesOffset, 0); }
  public static int createRangeBiasesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRangeBiasesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIntegrationAngles(FlatBufferBuilder builder, int integrationAnglesOffset) { builder.addOffset(19, integrationAnglesOffset, 0); }
  public static int createIntegrationAnglesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIntegrationAnglesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCrossRangeRes(FlatBufferBuilder builder, int crossRangeResOffset) { builder.addOffset(20, crossRangeResOffset, 0); }
  public static int createCrossRangeResVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCrossRangeResVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBeta(FlatBufferBuilder builder, double beta) { builder.addDouble(21, beta, 0.0); }
  public static void addKappa(FlatBufferBuilder builder, double kappa) { builder.addDouble(22, kappa, 0.0); }
  public static void addPeakAmplitudes(FlatBufferBuilder builder, int peakAmplitudesOffset) { builder.addOffset(23, peakAmplitudesOffset, 0); }
  public static int createPeakAmplitudesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPeakAmplitudesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCenterFrequency(FlatBufferBuilder builder, double centerFrequency) { builder.addDouble(24, centerFrequency, 0.0); }
  public static void addPulseBandwidth(FlatBufferBuilder builder, double pulseBandwidth) { builder.addDouble(25, pulseBandwidth, 0.0); }
  public static void addXpos(FlatBufferBuilder builder, int xposOffset) { builder.addOffset(26, xposOffset, 0); }
  public static int createXposVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startXposVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addYpos(FlatBufferBuilder builder, int yposOffset) { builder.addOffset(27, yposOffset, 0); }
  public static int createYposVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startYposVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addZpos(FlatBufferBuilder builder, int zposOffset) { builder.addOffset(28, zposOffset, 0); }
  public static int createZposVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startZposVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addXvel(FlatBufferBuilder builder, int xvelOffset) { builder.addOffset(29, xvelOffset, 0); }
  public static int createXvelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startXvelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addYvel(FlatBufferBuilder builder, int yvelOffset) { builder.addOffset(30, yvelOffset, 0); }
  public static int createYvelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startYvelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addZvel(FlatBufferBuilder builder, int zvelOffset) { builder.addOffset(31, zvelOffset, 0); }
  public static int createZvelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startZvelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRadarSOIObservation_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishRadarSOIObservation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "RADA"); }
  public static void finishSizePrefixedRadarSOIObservation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "RADA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RadarSOIObservation_Ingest get(int j) { return get(new RadarSOIObservation_Ingest(), j); }
    public RadarSOIObservation_Ingest get(RadarSOIObservation_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

