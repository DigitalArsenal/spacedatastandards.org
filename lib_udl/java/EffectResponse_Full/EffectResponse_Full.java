// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A response for various effects on a target.
 */
@SuppressWarnings("unused")
public final class EffectResponse_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EffectResponse_Full getRootAsEffectResponse_Full(ByteBuffer _bb) { return getRootAsEffectResponse_Full(_bb, new EffectResponse_Full()); }
  public static EffectResponse_Full getRootAsEffectResponse_Full(ByteBuffer _bb, EffectResponse_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EffectResponse_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EFFE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EffectResponse_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: EFFECTRESPONSE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the EffectRequest associated with this response.
   * Example: /// Example: EFFECTREQUEST-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idEffectRequest() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEffectRequestAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idEffectRequestInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The external system identifier of the associated effect request. A human readable unique id.
   * Example: /// Example: EXTERNALREQUEST-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String externalRequestId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalRequestIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer externalRequestIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The type of response in this record (e.g. COA, SCORECARD, etc.).
   * Example: /// Example: COA
   * Constraints: Minimum length = 1, Maximum length = 24
   */
  public String type() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
   * Example: /// Example: AIRCRAFT
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String actorSrcType() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actorSrcTypeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer actorSrcTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The record ID, depending on the type identified in actorSrcType, of the requested asset.
   * Example: /// Example: RC-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String actorSrcId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actorSrcIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer actorSrcIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The type of munition being fired.
   * Example: /// Example: Dummy
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String munitionType() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer munitionTypeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer munitionTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Unique identifier of the munition.
   * Example: /// Example: MUNITION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String munitionId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer munitionIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer munitionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The number of shots required to destroy target.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int shotsRequired() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The probability of kill (0-1) of the target being destroyed.
   * Example: /// Example: 0.7
   * Constraints: No constraints specified.
   */
  public double probabilityOfKill() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The collateral damage estimate (CDE) of the munition being fired.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double collateralDamageEst() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * List of actions associated with this effect response.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String actionsList(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int actionsListLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector actionsListVector() { return actionsListVector(new StringVector()); }
  public StringVector actionsListVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * List of external actions to be executed as part of this task.
   * Example: /// Example: ['ACTION1', 'ACTION2']
   * Constraints: No constraints specified.
   */
  public String externalActions(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int externalActionsLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector externalActionsVector() { return externalActionsVector(new StringVector()); }
  public StringVector externalActionsVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * List of COA metrics associated with this effect response.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String coaMetrics(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int coaMetricsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector coaMetricsVector() { return coaMetricsVector(new StringVector()); }
  public StringVector coaMetricsVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The time to overhead for the red force to be over their target, in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T00:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String redTimeToOverhead() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer redTimeToOverheadAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer redTimeToOverheadInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T00:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String decisionDeadline() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer decisionDeadlineAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer decisionDeadlineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The source type of the targetId identifier (POI, SITE, TRACK).
   * Example: /// Example: POI
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String redTargetSrcType() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer redTargetSrcTypeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer redTargetSrcTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
   * Example: /// Example: REDTARGETSRC-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String redTargetSrcId() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer redTargetSrcIdAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer redTargetSrcIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2021-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }

  public static int createEffectResponse_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idEffectRequestOffset,
      int externalRequestIdOffset,
      int typeOffset,
      int actorSrcTypeOffset,
      int actorSrcIdOffset,
      int munitionTypeOffset,
      int munitionIdOffset,
      int shotsRequired,
      double probabilityOfKill,
      double collateralDamageEst,
      int actionsListOffset,
      int externalActionsOffset,
      int coaMetricsOffset,
      int redTimeToOverheadOffset,
      int decisionDeadlineOffset,
      int redTargetSrcTypeOffset,
      int redTargetSrcIdOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(25);
    EffectResponse_Full.addCollateralDamageEst(builder, collateralDamageEst);
    EffectResponse_Full.addProbabilityOfKill(builder, probabilityOfKill);
    EffectResponse_Full.addOrigNetwork(builder, origNetworkOffset);
    EffectResponse_Full.addOrigin(builder, originOffset);
    EffectResponse_Full.addSource(builder, sourceOffset);
    EffectResponse_Full.addCreatedBy(builder, createdByOffset);
    EffectResponse_Full.addCreatedAt(builder, createdAtOffset);
    EffectResponse_Full.addRedTargetSrcId(builder, redTargetSrcIdOffset);
    EffectResponse_Full.addRedTargetSrcType(builder, redTargetSrcTypeOffset);
    EffectResponse_Full.addDecisionDeadline(builder, decisionDeadlineOffset);
    EffectResponse_Full.addRedTimeToOverhead(builder, redTimeToOverheadOffset);
    EffectResponse_Full.addCoaMetrics(builder, coaMetricsOffset);
    EffectResponse_Full.addExternalActions(builder, externalActionsOffset);
    EffectResponse_Full.addActionsList(builder, actionsListOffset);
    EffectResponse_Full.addShotsRequired(builder, shotsRequired);
    EffectResponse_Full.addMunitionId(builder, munitionIdOffset);
    EffectResponse_Full.addMunitionType(builder, munitionTypeOffset);
    EffectResponse_Full.addActorSrcId(builder, actorSrcIdOffset);
    EffectResponse_Full.addActorSrcType(builder, actorSrcTypeOffset);
    EffectResponse_Full.addType(builder, typeOffset);
    EffectResponse_Full.addExternalRequestId(builder, externalRequestIdOffset);
    EffectResponse_Full.addIdEffectRequest(builder, idEffectRequestOffset);
    EffectResponse_Full.addClassificationMarking(builder, classificationMarkingOffset);
    EffectResponse_Full.addId(builder, idOffset);
    EffectResponse_Full.addDataMode(builder, dataMode);
    return EffectResponse_Full.endEffectResponse_Full(builder);
  }

  public static void startEffectResponse_Full(FlatBufferBuilder builder) { builder.startTable(25); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdEffectRequest(FlatBufferBuilder builder, int idEffectRequestOffset) { builder.addOffset(2, idEffectRequestOffset, 0); }
  public static void addExternalRequestId(FlatBufferBuilder builder, int externalRequestIdOffset) { builder.addOffset(3, externalRequestIdOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(4, typeOffset, 0); }
  public static void addActorSrcType(FlatBufferBuilder builder, int actorSrcTypeOffset) { builder.addOffset(5, actorSrcTypeOffset, 0); }
  public static void addActorSrcId(FlatBufferBuilder builder, int actorSrcIdOffset) { builder.addOffset(6, actorSrcIdOffset, 0); }
  public static void addMunitionType(FlatBufferBuilder builder, int munitionTypeOffset) { builder.addOffset(7, munitionTypeOffset, 0); }
  public static void addMunitionId(FlatBufferBuilder builder, int munitionIdOffset) { builder.addOffset(8, munitionIdOffset, 0); }
  public static void addShotsRequired(FlatBufferBuilder builder, int shotsRequired) { builder.addInt(9, shotsRequired, 0); }
  public static void addProbabilityOfKill(FlatBufferBuilder builder, double probabilityOfKill) { builder.addDouble(10, probabilityOfKill, 0.0); }
  public static void addCollateralDamageEst(FlatBufferBuilder builder, double collateralDamageEst) { builder.addDouble(11, collateralDamageEst, 0.0); }
  public static void addActionsList(FlatBufferBuilder builder, int actionsListOffset) { builder.addOffset(12, actionsListOffset, 0); }
  public static int createActionsListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startActionsListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addExternalActions(FlatBufferBuilder builder, int externalActionsOffset) { builder.addOffset(13, externalActionsOffset, 0); }
  public static int createExternalActionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startExternalActionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCoaMetrics(FlatBufferBuilder builder, int coaMetricsOffset) { builder.addOffset(14, coaMetricsOffset, 0); }
  public static int createCoaMetricsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCoaMetricsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRedTimeToOverhead(FlatBufferBuilder builder, int redTimeToOverheadOffset) { builder.addOffset(15, redTimeToOverheadOffset, 0); }
  public static void addDecisionDeadline(FlatBufferBuilder builder, int decisionDeadlineOffset) { builder.addOffset(16, decisionDeadlineOffset, 0); }
  public static void addRedTargetSrcType(FlatBufferBuilder builder, int redTargetSrcTypeOffset) { builder.addOffset(17, redTargetSrcTypeOffset, 0); }
  public static void addRedTargetSrcId(FlatBufferBuilder builder, int redTargetSrcIdOffset) { builder.addOffset(18, redTargetSrcIdOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(19, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(20, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(21, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(22, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(23, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(24, origNetworkOffset, 0); }
  public static int endEffectResponse_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEffectResponse_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EFFE"); }
  public static void finishSizePrefixedEffectResponse_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EFFE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EffectResponse_Full get(int j) { return get(new EffectResponse_Full(), j); }
    public EffectResponse_Full get(EffectResponse_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

