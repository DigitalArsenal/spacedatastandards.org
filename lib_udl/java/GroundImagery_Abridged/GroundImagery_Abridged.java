// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Imagery of terrestrial regions from on-orbit, air, and other sensors.
 */
@SuppressWarnings("unused")
public final class GroundImagery_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static GroundImagery_Abridged getRootAsGroundImagery_Abridged(ByteBuffer _bb) { return getRootAsGroundImagery_Abridged(_bb, new GroundImagery_Abridged()); }
  public static GroundImagery_Abridged getRootAsGroundImagery_Abridged(ByteBuffer _bb, GroundImagery_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean GroundImagery_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "GROU"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GroundImagery_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: GROUNDIMAGERY-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Optional ID of the sensor that produced this ground image.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Timestamp the image was captured/produced.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String imageTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer imageTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer imageTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Name of the image file.
   * Example: /// Example: Example file name
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String filename() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filenameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer filenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a create operation that also specifies a valid region.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: Minimum length = 0, Maximum length = 65535
   */
  public String regionText() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionTextAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer regionTextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. Reference: https://geojson.org/. Ignored if included with a create operation that also specifies a valid region or regionText.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: Minimum length = 0, Maximum length = 65535
   */
  public String regionGeoJson() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionGeoJsonAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer regionGeoJsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Type of region as projected on the ground.
   * Example: /// Example: Polygon
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String regionType() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionTypeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer regionTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int regionNdims() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 4326
   * Constraints: No constraints specified.
   */
  public int regionSrid() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origSensorId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Optional identifier of the subject/target of the image, useful for correlating multiple images of the same subject.
   * Example: /// Example: SUBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String subjectId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer subjectIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer subjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Optional name/description associated with this image.
   * Example: /// Example: Example name
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String name() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: 37bdef1f-5a4f-4776-bee4-7a1e0ec7d35a
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Description and notes of the image.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Optional, field indicating type of image, NITF, PNG, etc.
   * Example: /// Example: PNG
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public String format() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer formatAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer formatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Size of the image file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public long filesize() { int o = __offset(50); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * MD5 value of the file. The ingest/create operation will automatically generate the value.
   * Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
   * Constraints: Minimum length = 1, Maximum length = 256
   */
  public String checksumValue() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer checksumValueAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer checksumValueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }

  public static int createGroundImagery_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int idSensorOffset,
      int classificationMarkingOffset,
      int imageTimeOffset,
      int filenameOffset,
      int regionTextOffset,
      int regionGeoJsonOffset,
      int regionTypeOffset,
      int regionNdims,
      int regionSrid,
      int origSensorIdOffset,
      int subjectIdOffset,
      int nameOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      int sourceDlOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int transactionIdOffset,
      int notesOffset,
      int formatOffset,
      long filesize,
      int checksumValueOffset) {
    builder.startTable(25);
    GroundImagery_Abridged.addFilesize(builder, filesize);
    GroundImagery_Abridged.addChecksumValue(builder, checksumValueOffset);
    GroundImagery_Abridged.addFormat(builder, formatOffset);
    GroundImagery_Abridged.addNotes(builder, notesOffset);
    GroundImagery_Abridged.addTransactionId(builder, transactionIdOffset);
    GroundImagery_Abridged.addCreatedBy(builder, createdByOffset);
    GroundImagery_Abridged.addCreatedAt(builder, createdAtOffset);
    GroundImagery_Abridged.addSourceDl(builder, sourceDlOffset);
    GroundImagery_Abridged.addOrigNetwork(builder, origNetworkOffset);
    GroundImagery_Abridged.addOrigin(builder, originOffset);
    GroundImagery_Abridged.addSource(builder, sourceOffset);
    GroundImagery_Abridged.addName(builder, nameOffset);
    GroundImagery_Abridged.addSubjectId(builder, subjectIdOffset);
    GroundImagery_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    GroundImagery_Abridged.addRegionSrid(builder, regionSrid);
    GroundImagery_Abridged.addRegionNdims(builder, regionNdims);
    GroundImagery_Abridged.addRegionType(builder, regionTypeOffset);
    GroundImagery_Abridged.addRegionGeoJson(builder, regionGeoJsonOffset);
    GroundImagery_Abridged.addRegionText(builder, regionTextOffset);
    GroundImagery_Abridged.addFilename(builder, filenameOffset);
    GroundImagery_Abridged.addImageTime(builder, imageTimeOffset);
    GroundImagery_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    GroundImagery_Abridged.addIdSensor(builder, idSensorOffset);
    GroundImagery_Abridged.addId(builder, idOffset);
    GroundImagery_Abridged.addDataMode(builder, dataMode);
    return GroundImagery_Abridged.endGroundImagery_Abridged(builder);
  }

  public static void startGroundImagery_Abridged(FlatBufferBuilder builder) { builder.startTable(25); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(1, idSensorOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addImageTime(FlatBufferBuilder builder, int imageTimeOffset) { builder.addOffset(3, imageTimeOffset, 0); }
  public static void addFilename(FlatBufferBuilder builder, int filenameOffset) { builder.addOffset(4, filenameOffset, 0); }
  public static void addRegionText(FlatBufferBuilder builder, int regionTextOffset) { builder.addOffset(5, regionTextOffset, 0); }
  public static void addRegionGeoJson(FlatBufferBuilder builder, int regionGeoJsonOffset) { builder.addOffset(6, regionGeoJsonOffset, 0); }
  public static void addRegionType(FlatBufferBuilder builder, int regionTypeOffset) { builder.addOffset(7, regionTypeOffset, 0); }
  public static void addRegionNdims(FlatBufferBuilder builder, int regionNdims) { builder.addInt(8, regionNdims, 0); }
  public static void addRegionSrid(FlatBufferBuilder builder, int regionSrid) { builder.addInt(9, regionSrid, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(10, origSensorIdOffset, 0); }
  public static void addSubjectId(FlatBufferBuilder builder, int subjectIdOffset) { builder.addOffset(11, subjectIdOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(12, nameOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(13, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(14, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(15, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(16, sourceDlOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(17, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(18, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(19, createdByOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(20, transactionIdOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(21, notesOffset, 0); }
  public static void addFormat(FlatBufferBuilder builder, int formatOffset) { builder.addOffset(22, formatOffset, 0); }
  public static void addFilesize(FlatBufferBuilder builder, long filesize) { builder.addLong(23, filesize, 0L); }
  public static void addChecksumValue(FlatBufferBuilder builder, int checksumValueOffset) { builder.addOffset(24, checksumValueOffset, 0); }
  public static int endGroundImagery_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishGroundImagery_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "GROU"); }
  public static void finishSizePrefixedGroundImagery_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "GROU"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GroundImagery_Abridged get(int j) { return get(new GroundImagery_Abridged(), j); }
    public GroundImagery_Abridged get(GroundImagery_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

