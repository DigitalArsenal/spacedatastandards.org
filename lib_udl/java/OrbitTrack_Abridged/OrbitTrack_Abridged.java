// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Keplerian orbital elements describing an orbit for a particular on-orbit satellite and applicable sensor data aiding in the orbit prediction.
 */
@SuppressWarnings("unused")
public final class OrbitTrack_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OrbitTrack_Abridged getRootAsOrbitTrack_Abridged(ByteBuffer _bb) { return getRootAsOrbitTrack_Abridged(_bb, new OrbitTrack_Abridged()); }
  public static OrbitTrack_Abridged getRootAsOrbitTrack_Abridged(ByteBuffer _bb, OrbitTrack_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OrbitTrack_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ORBI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrbitTrack_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: ORBIT_TRACK_ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the target on-orbit object, if correlated.
   * Example: /// Example: 32375
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 37375
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by observation source to indicate the target on-orbit object of this track. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: L2045
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the Elset associated with this object.
   * Example: /// Example: c715a619-8695-44d2-9e7d-effd257b4843
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idElset() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idElsetAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Track timestamp in ISO8601 UTC format, with microsecond precision.
   * Example: /// Example: 2021-02-25T12:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * WGS-84 latitude of the track object subpoint, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 19.88550102
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the track object subpoint, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 46.74596844
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Track point altitude relative to WGS-84 ellipsoid, in meters.
   * Example: /// Example: 585.71
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radio frequency of the track, measured in megahertz (MHz).
   * Example: /// Example: 1.5273
   * Constraints: No constraints specified.
   */
  public double rdfRf() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * International radio call sign assigned to the track. This is an 8-character alphanumeric code.
   * Example: /// Example: Charlie
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String callSign() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Report number received from the reporting source for this track.
   * Example: /// Example: 123
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String rptNum() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rptNumAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer rptNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
   *  ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
   *  FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
   *  HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
   *  NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
   *  PENDING: Track object which has not been evaluated.
   *  SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
   *  UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
   * Example: /// Example: FRIEND
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public byte objIdent() { int o = __offset(30); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
   *  FAKER: Friendly track, object, or entity acting as an exercise hostile.
   *  JOKER: Friendly track, object, or entity acting as an exercise suspect.
   *  KILO: Friendly high-value object.
   *  TRAVELLER: Suspect land or surface track following a recognized traffic route.
   *  ZOMBIE: Suspect track, object, or entity of special interest.
   * Example: /// Example: JOKER
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String identAmp() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer identAmpAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer identAmpInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Status of the satellite.
   * Example: /// Example: INACTIVE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String satStatus() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer satStatusAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer satStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The on-orbit category assigned to this track object (DEBRIS, MANNED, PAYLOAD, PLATFORM, ROCKET BODY, UNKNOWN).
   * Example: /// Example: PAYLOAD
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public byte objectType() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String countryCode() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Predicted change in Mean Motion (velocity) in radians/herg^2.  herg is a unit of time measure equal to 806.8120769 seconds, and is the orbital period of an imaginary satellite rotating about the Earth at zero altitude.
   * Example: /// Example: 0.5868
   * Constraints: No constraints specified.
   */
  public double decay() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One-line Charlie elements set.
   * Example: /// Example: 323751332255940400010000003635829600010200072500098205001150
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String charlieLine() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer charlieLineAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer charlieLineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The Area of Uncertainty (AoU) type (BEARING, ELLIPSE, OTHER) definition. This type defines the elements of the aouData array and is required if aouData is not null. See the aouData field definition for specific information.
   * Example: /// Example: ELLIPSE
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String aouType() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aouTypeAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer aouTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Three element array representing an Area of Uncertainty (AoU).  The array element definitions and units are type specific depending on the aouType specified in this record:
   * ELLIPSE:
   *    brg - orientation in degrees of the ellipse
   *    a1 - semi-major axis in meters
   *    a2 - semi-minor axis in meters
   * BEARING (BEARING BOX or MTST BEARING BOX):
   *    brg - orientation in degrees of the bearing box 
   *    a1 - length of bearing box in meters 
   *    a2 - half-width of bearing box in meters 
   * OTHER (All other type values):
   *    brg - line of bearing in degrees true 
   *    a1 - bearing error in degrees 
   *    a2 - estimated range in meters.
   * Example: /// Example: [34.3, 26.5, 1.2]
   * Constraints: No constraints specified.
   */
  public String aouData(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int aouDataLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector aouDataVector() { return aouDataVector(new StringVector()); }
  public StringVector aouDataVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Track object speed, in km/sec.
   * Example: /// Example: 15.03443
   * Constraints: No constraints specified.
   */
  public double spd() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The angle formed between the line of sight of the observer and the horizon at track timestamp, in degrees.  The angular range is -90 to 90, with negative values representing angle of depression.
   * Example: /// Example: 15.2
   * Constraints: No constraints specified.
   */
  public double angElev() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Area Of Uncertainty (AOU) percentage (0 - 100) containment value. The percentage of time (90%) that the estimated area of uncertainty will cover the true position of the track object.
   * Example: /// Example: 90
   * Constraints: No constraints specified.
   */
  public double cntnmnt() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Source cross-reference code for the command that originated the track report.
   * Example: /// Example: XE
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String xref() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer xrefAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer xrefInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * The cross-reference code of the channel on which this track report was received, if the report came over a comms channel.
   * Example: /// Example: FHKX
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String chXref() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer chXrefAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer chXrefInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Free-form remarks entered for the satellite.
   * Example: /// Example: A note regarding this spacecraft
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String amplification() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amplificationAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer amplificationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * A text aplifier displaying IFF/SIF/AIS Identification modes and codes.
   * Example: /// Example: ID Mode
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String iff() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iffAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer iffInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Flag indicating that this track represents a reinforced object or group.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean reinforced() { int o = __offset(62); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this track represents a reduced object or group.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean reduced() { int o = __offset(64); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this track represents a headquarters object.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean hq() { int o = __offset(66); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this track represents a dummy object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean dummy() { int o = __offset(68); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this track represents a task force.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean taskForce() { int o = __offset(70); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this track represents a feint object or group.  Identifies offensive or defensive units, equipment and/or installations intended to draw the enemy's attention away from the area of the main attack.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean feint() { int o = __offset(72); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this track represents an installation.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean installation() { int o = __offset(74); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The type of vehicle with which the device is associated.  Based on MIL-STD-2525 symbology definitions.
   * Example: /// Example: SPACE
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String vehType() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vehTypeAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer vehTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * UUID identifying the track, which should remain the same on subsequent tracks of the same object.
   * Example: /// Example: 3668f135-fcba-4630-a43d-e7782e11d988
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trkId() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trkIdAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer trkIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * TrackSensor Collection.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String trackSensors(int j) { int o = __offset(80); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int trackSensorsLength() { int o = __offset(80); return o != 0 ? __vector_len(o) : 0; }
  public StringVector trackSensorsVector() { return trackSensorsVector(new StringVector()); }
  public StringVector trackSensorsVector(StringVector obj) { int o = __offset(80); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2021-02-25T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(90); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }

  public static int createOrbitTrack_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int idElsetOffset,
      int tsOffset,
      double lat,
      double lon,
      double alt,
      double rdfRf,
      int callSignOffset,
      int rptNumOffset,
      byte objIdent,
      int identAmpOffset,
      int satStatusOffset,
      byte objectType,
      int countryCodeOffset,
      double decay,
      int charlieLineOffset,
      int aouTypeOffset,
      int aouDataOffset,
      double spd,
      double angElev,
      double cntnmnt,
      int xrefOffset,
      int chXrefOffset,
      int amplificationOffset,
      int iffOffset,
      boolean reinforced,
      boolean reduced,
      boolean hq,
      boolean dummy,
      boolean taskForce,
      boolean feint,
      boolean installation,
      int vehTypeOffset,
      int trkIdOffset,
      int trackSensorsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(45);
    OrbitTrack_Abridged.addCntnmnt(builder, cntnmnt);
    OrbitTrack_Abridged.addAngElev(builder, angElev);
    OrbitTrack_Abridged.addSpd(builder, spd);
    OrbitTrack_Abridged.addDecay(builder, decay);
    OrbitTrack_Abridged.addRdfRf(builder, rdfRf);
    OrbitTrack_Abridged.addAlt(builder, alt);
    OrbitTrack_Abridged.addLon(builder, lon);
    OrbitTrack_Abridged.addLat(builder, lat);
    OrbitTrack_Abridged.addOrigNetwork(builder, origNetworkOffset);
    OrbitTrack_Abridged.addOrigin(builder, originOffset);
    OrbitTrack_Abridged.addSource(builder, sourceOffset);
    OrbitTrack_Abridged.addCreatedBy(builder, createdByOffset);
    OrbitTrack_Abridged.addCreatedAt(builder, createdAtOffset);
    OrbitTrack_Abridged.addTrackSensors(builder, trackSensorsOffset);
    OrbitTrack_Abridged.addTrkId(builder, trkIdOffset);
    OrbitTrack_Abridged.addVehType(builder, vehTypeOffset);
    OrbitTrack_Abridged.addIff(builder, iffOffset);
    OrbitTrack_Abridged.addAmplification(builder, amplificationOffset);
    OrbitTrack_Abridged.addChXref(builder, chXrefOffset);
    OrbitTrack_Abridged.addXref(builder, xrefOffset);
    OrbitTrack_Abridged.addAouData(builder, aouDataOffset);
    OrbitTrack_Abridged.addAouType(builder, aouTypeOffset);
    OrbitTrack_Abridged.addCharlieLine(builder, charlieLineOffset);
    OrbitTrack_Abridged.addCountryCode(builder, countryCodeOffset);
    OrbitTrack_Abridged.addSatStatus(builder, satStatusOffset);
    OrbitTrack_Abridged.addIdentAmp(builder, identAmpOffset);
    OrbitTrack_Abridged.addRptNum(builder, rptNumOffset);
    OrbitTrack_Abridged.addCallSign(builder, callSignOffset);
    OrbitTrack_Abridged.addTs(builder, tsOffset);
    OrbitTrack_Abridged.addIdElset(builder, idElsetOffset);
    OrbitTrack_Abridged.addOrigObjectId(builder, origObjectIdOffset);
    OrbitTrack_Abridged.addSatNo(builder, satNo);
    OrbitTrack_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    OrbitTrack_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    OrbitTrack_Abridged.addId(builder, idOffset);
    OrbitTrack_Abridged.addDataMode(builder, dataMode);
    OrbitTrack_Abridged.addInstallation(builder, installation);
    OrbitTrack_Abridged.addFeint(builder, feint);
    OrbitTrack_Abridged.addTaskForce(builder, taskForce);
    OrbitTrack_Abridged.addDummy(builder, dummy);
    OrbitTrack_Abridged.addHq(builder, hq);
    OrbitTrack_Abridged.addReduced(builder, reduced);
    OrbitTrack_Abridged.addReinforced(builder, reinforced);
    OrbitTrack_Abridged.addObjectType(builder, objectType);
    OrbitTrack_Abridged.addObjIdent(builder, objIdent);
    return OrbitTrack_Abridged.endOrbitTrack_Abridged(builder);
  }

  public static void startOrbitTrack_Abridged(FlatBufferBuilder builder) { builder.startTable(45); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(3, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(4, origObjectIdOffset, 0); }
  public static void addIdElset(FlatBufferBuilder builder, int idElsetOffset) { builder.addOffset(5, idElsetOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(6, tsOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(7, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(8, lon, 0.0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(9, alt, 0.0); }
  public static void addRdfRf(FlatBufferBuilder builder, double rdfRf) { builder.addDouble(10, rdfRf, 0.0); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(11, callSignOffset, 0); }
  public static void addRptNum(FlatBufferBuilder builder, int rptNumOffset) { builder.addOffset(12, rptNumOffset, 0); }
  public static void addObjIdent(FlatBufferBuilder builder, byte objIdent) { builder.addByte(13, objIdent, 0); }
  public static void addIdentAmp(FlatBufferBuilder builder, int identAmpOffset) { builder.addOffset(14, identAmpOffset, 0); }
  public static void addSatStatus(FlatBufferBuilder builder, int satStatusOffset) { builder.addOffset(15, satStatusOffset, 0); }
  public static void addObjectType(FlatBufferBuilder builder, byte objectType) { builder.addByte(16, objectType, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(17, countryCodeOffset, 0); }
  public static void addDecay(FlatBufferBuilder builder, double decay) { builder.addDouble(18, decay, 0.0); }
  public static void addCharlieLine(FlatBufferBuilder builder, int charlieLineOffset) { builder.addOffset(19, charlieLineOffset, 0); }
  public static void addAouType(FlatBufferBuilder builder, int aouTypeOffset) { builder.addOffset(20, aouTypeOffset, 0); }
  public static void addAouData(FlatBufferBuilder builder, int aouDataOffset) { builder.addOffset(21, aouDataOffset, 0); }
  public static int createAouDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAouDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSpd(FlatBufferBuilder builder, double spd) { builder.addDouble(22, spd, 0.0); }
  public static void addAngElev(FlatBufferBuilder builder, double angElev) { builder.addDouble(23, angElev, 0.0); }
  public static void addCntnmnt(FlatBufferBuilder builder, double cntnmnt) { builder.addDouble(24, cntnmnt, 0.0); }
  public static void addXref(FlatBufferBuilder builder, int xrefOffset) { builder.addOffset(25, xrefOffset, 0); }
  public static void addChXref(FlatBufferBuilder builder, int chXrefOffset) { builder.addOffset(26, chXrefOffset, 0); }
  public static void addAmplification(FlatBufferBuilder builder, int amplificationOffset) { builder.addOffset(27, amplificationOffset, 0); }
  public static void addIff(FlatBufferBuilder builder, int iffOffset) { builder.addOffset(28, iffOffset, 0); }
  public static void addReinforced(FlatBufferBuilder builder, boolean reinforced) { builder.addBoolean(29, reinforced, false); }
  public static void addReduced(FlatBufferBuilder builder, boolean reduced) { builder.addBoolean(30, reduced, false); }
  public static void addHq(FlatBufferBuilder builder, boolean hq) { builder.addBoolean(31, hq, false); }
  public static void addDummy(FlatBufferBuilder builder, boolean dummy) { builder.addBoolean(32, dummy, false); }
  public static void addTaskForce(FlatBufferBuilder builder, boolean taskForce) { builder.addBoolean(33, taskForce, false); }
  public static void addFeint(FlatBufferBuilder builder, boolean feint) { builder.addBoolean(34, feint, false); }
  public static void addInstallation(FlatBufferBuilder builder, boolean installation) { builder.addBoolean(35, installation, false); }
  public static void addVehType(FlatBufferBuilder builder, int vehTypeOffset) { builder.addOffset(36, vehTypeOffset, 0); }
  public static void addTrkId(FlatBufferBuilder builder, int trkIdOffset) { builder.addOffset(37, trkIdOffset, 0); }
  public static void addTrackSensors(FlatBufferBuilder builder, int trackSensorsOffset) { builder.addOffset(38, trackSensorsOffset, 0); }
  public static int createTrackSensorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrackSensorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(39, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(40, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(41, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(42, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(43, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(44, origNetworkOffset, 0); }
  public static int endOrbitTrack_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOrbitTrack_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ORBI"); }
  public static void finishSizePrefixedOrbitTrack_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ORBI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrbitTrack_Abridged get(int j) { return get(new OrbitTrack_Abridged(), j); }
    public OrbitTrack_Abridged get(OrbitTrack_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

