// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
 */
@SuppressWarnings("unused")
public final class DiplomaticClearance_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DiplomaticClearance_Ingest getRootAsDiplomaticClearance_Ingest(ByteBuffer _bb) { return getRootAsDiplomaticClearance_Ingest(_bb, new DiplomaticClearance_Ingest()); }
  public static DiplomaticClearance_Ingest getRootAsDiplomaticClearance_Ingest(ByteBuffer _bb, DiplomaticClearance_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DiplomaticClearance_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DIPL"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DiplomaticClearance_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the Mission associated with this diplomatic clearance record.
   * Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idMission() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idMissionAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idMissionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: 990ae849089e3d6cad69655324176bb6
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalWorksheetId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalWorksheetIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer externalWorksheetIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
   * Example: /// Example: G2-939911-AC
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String dipWorksheetName() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dipWorksheetNameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer dipWorksheetNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String firstDepDate() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firstDepDateAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer firstDepDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String docDeadline() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer docDeadlineAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer docDeadlineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
   * Example: /// Example: 1083034
   * Constraints: Minimum length = 0, Maximum length = 40
   */
  public String apacsId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer apacsIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer apacsIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Collection of diplomatic clearance details.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String diplomaticClearanceDetails(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int diplomaticClearanceDetailsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector diplomaticClearanceDetailsVector() { return diplomaticClearanceDetailsVector(new StringVector()); }
  public StringVector diplomaticClearanceDetailsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of diplomatic clearance remarks.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String diplomaticClearanceRemarks(int j) { int o = __offset(22); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int diplomaticClearanceRemarksLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public StringVector diplomaticClearanceRemarksVector() { return diplomaticClearanceRemarksVector(new StringVector()); }
  public StringVector diplomaticClearanceRemarksVector(StringVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(40); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createDiplomaticClearance_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idMissionOffset,
      int externalWorksheetIdOffset,
      int dipWorksheetNameOffset,
      int firstDepDateOffset,
      int docDeadlineOffset,
      int apacsIdOffset,
      int diplomaticClearanceDetailsOffset,
      int diplomaticClearanceRemarksOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(19);
    DiplomaticClearance_Ingest.addOrigNetwork(builder, origNetworkOffset);
    DiplomaticClearance_Ingest.addOrigin(builder, originOffset);
    DiplomaticClearance_Ingest.addSource(builder, sourceOffset);
    DiplomaticClearance_Ingest.addSourceDl(builder, sourceDlOffset);
    DiplomaticClearance_Ingest.addUpdatedBy(builder, updatedByOffset);
    DiplomaticClearance_Ingest.addUpdatedAt(builder, updatedAtOffset);
    DiplomaticClearance_Ingest.addCreatedBy(builder, createdByOffset);
    DiplomaticClearance_Ingest.addCreatedAt(builder, createdAtOffset);
    DiplomaticClearance_Ingest.addDiplomaticClearanceRemarks(builder, diplomaticClearanceRemarksOffset);
    DiplomaticClearance_Ingest.addDiplomaticClearanceDetails(builder, diplomaticClearanceDetailsOffset);
    DiplomaticClearance_Ingest.addApacsId(builder, apacsIdOffset);
    DiplomaticClearance_Ingest.addDocDeadline(builder, docDeadlineOffset);
    DiplomaticClearance_Ingest.addFirstDepDate(builder, firstDepDateOffset);
    DiplomaticClearance_Ingest.addDipWorksheetName(builder, dipWorksheetNameOffset);
    DiplomaticClearance_Ingest.addExternalWorksheetId(builder, externalWorksheetIdOffset);
    DiplomaticClearance_Ingest.addIdMission(builder, idMissionOffset);
    DiplomaticClearance_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    DiplomaticClearance_Ingest.addId(builder, idOffset);
    DiplomaticClearance_Ingest.addDataMode(builder, dataMode);
    return DiplomaticClearance_Ingest.endDiplomaticClearance_Ingest(builder);
  }

  public static void startDiplomaticClearance_Ingest(FlatBufferBuilder builder) { builder.startTable(19); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdMission(FlatBufferBuilder builder, int idMissionOffset) { builder.addOffset(2, idMissionOffset, 0); }
  public static void addExternalWorksheetId(FlatBufferBuilder builder, int externalWorksheetIdOffset) { builder.addOffset(3, externalWorksheetIdOffset, 0); }
  public static void addDipWorksheetName(FlatBufferBuilder builder, int dipWorksheetNameOffset) { builder.addOffset(4, dipWorksheetNameOffset, 0); }
  public static void addFirstDepDate(FlatBufferBuilder builder, int firstDepDateOffset) { builder.addOffset(5, firstDepDateOffset, 0); }
  public static void addDocDeadline(FlatBufferBuilder builder, int docDeadlineOffset) { builder.addOffset(6, docDeadlineOffset, 0); }
  public static void addApacsId(FlatBufferBuilder builder, int apacsIdOffset) { builder.addOffset(7, apacsIdOffset, 0); }
  public static void addDiplomaticClearanceDetails(FlatBufferBuilder builder, int diplomaticClearanceDetailsOffset) { builder.addOffset(8, diplomaticClearanceDetailsOffset, 0); }
  public static int createDiplomaticClearanceDetailsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDiplomaticClearanceDetailsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDiplomaticClearanceRemarks(FlatBufferBuilder builder, int diplomaticClearanceRemarksOffset) { builder.addOffset(9, diplomaticClearanceRemarksOffset, 0); }
  public static int createDiplomaticClearanceRemarksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDiplomaticClearanceRemarksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(10, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(11, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(12, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(13, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(14, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(15, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(16, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(17, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(18, dataMode, 0); }
  public static int endDiplomaticClearance_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDiplomaticClearance_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DIPL"); }
  public static void finishSizePrefixedDiplomaticClearance_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DIPL"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DiplomaticClearance_Ingest get(int j) { return get(new DiplomaticClearance_Ingest(), j); }
    public DiplomaticClearance_Ingest get(DiplomaticClearance_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

