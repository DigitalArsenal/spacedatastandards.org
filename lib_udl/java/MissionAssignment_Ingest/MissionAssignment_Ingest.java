// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Platform mission assignment data.
 */
@SuppressWarnings("unused")
public final class MissionAssignment_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MissionAssignment_Ingest getRootAsMissionAssignment_Ingest(ByteBuffer _bb) { return getRootAsMissionAssignment_Ingest(_bb, new MissionAssignment_Ingest()); }
  public static MissionAssignment_Ingest getRootAsMissionAssignment_Ingest(ByteBuffer _bb, MissionAssignment_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MissionAssignment_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MISS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MissionAssignment_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: MISSIONASSIGNMENT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The track ID that the status is referencing, addressee.
   * Example: /// Example: TRK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trkId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trkIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer trkIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The timestamp of the mission data, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The mission assignment discrete value.
   * Example: /// Example: MAD
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public String mad() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer madAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer madInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Receipt/Compliance, values from TABLE B-9.
   * Example: /// Example: RC-123
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String rc() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rcAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer rcInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Recurrence rate, receipt/compliance.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int rr() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Track number objective.
   * Example: /// Example: TRACK_NUMBER
   * Constraints: No constraints specified.
   */
  public String tno() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tnoAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer tnoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Threat warning environment.
   * Example: /// Example: THREAT_WARNING
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String twenv() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer twenvAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer twenvInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * WGS84 latitude, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Origin of index number.
   * Example: /// Example: ORIGIN
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String orginx() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer orginxAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer orginxInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Environment.
   * Example: /// Example: ENV
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String env() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer envAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer envInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Strength.
   * Example: /// Example: STRENGTH
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String sz() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer szAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer szInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Index number.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int index() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGET POSITION CONTINUATION WORD - number of associated dmpis.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int c1associateddmpis() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGET DATA CONTINUATION WORD - space specific type, see TABLE B-39.
   * Example: /// Example: C2SPC
   * Constraints: No constraints specified.
   */
  public String c2spc() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2spcAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer c2spcInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - air specific type, see TABLE B-21.
   * Example: /// Example: C2AIR
   * Constraints: No constraints specified.
   */
  public String c2air() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2airAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer c2airInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - surface specific type, see TABLE B-21.
   * Example: /// Example: C2SUR
   * Constraints: No constraints specified.
   */
  public String c2sur() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2surAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer c2surInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - land specific type, see TABLE B-21.
   * Example: /// Example: C2LND
   * Constraints: No constraints specified.
   */
  public String c2lnd() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2lndAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer c2lndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - identity.
   * Example: /// Example: C2ID
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c2id() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2idAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer c2idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - identity amplifying descriptor.
   * Example: /// Example: C2IDAMP
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c2idamplifyingdescriptor() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2idamplifyingdescriptorAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer c2idamplifyingdescriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - altitude, 100 FT, 2047=NS.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int c2alt() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGET DATA CONTINUATION WORD - course in increments of 1 degree.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int c2crs() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGET DATA CONTINUATION WORD - speed in 2 DM/HR, 2047=NS.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int c2spd() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGET DATA CONTINUATION WORD - special interest indicator.
   * Example: /// Example: C2SPECIAL
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c2specialinterestindicator() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2specialinterestindicatorAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer c2specialinterestindicatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - exercise indicator.
   * Example: /// Example: C2EXERCISE
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c2exerciseindicator() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2exerciseindicatorAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer c2exerciseindicatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - method of fire.
   * Example: /// Example: MOF
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c2exercisemof() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c2exercisemofAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer c2exercisemofInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * POINT LOCATION CONTINUATION WORD - latitude, 0.0013 MINUTE.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double c3lat() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * POINT LOCATION CONTINUATION WORD - longitude, 0.0013 MINUTE.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double c3lon() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * POINT LOCATION CONTINUATION WORD - elevation, 25 FT, 1023=NS.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double c3elv() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * TARGET DATA CONTINUATION WORD - point type 1.
   * Example: /// Example: C3PTL
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c3ptl() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c3ptlAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer c3ptlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * TARGET DATA CONTINUATION WORD - point number.
   * Example: /// Example: C3PTNUM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c3ptnum() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c3ptnumAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer c3ptnumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * SURFACE ATTACK CONTINUATION WORD - target type - see TABLE B-32.
   * Example: /// Example: C4TGT
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c4tgt() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c4tgtAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer c4tgtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * SURFACE ATTACK CONTINUATION WORD - target defenses.
   * Example: /// Example: C4DEF
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c4def() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c4defAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer c4defInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c4runin() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * SURFACE ATTACK CONTINUATION WORD - run in heading, NS=511.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int c4egress() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * SURFACE ATTACK CONTINUATION WORD - number of stores, NS=63.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int c4numberofstores() { int o = __offset(78); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * SURFACE ATTACK CONTINUATION WORD - type of stores.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int c4typeofstores() { int o = __offset(80); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * SURFACE ATTACK CONTINUATION WORD - time discrete.
   * Example: /// Example: C4TIMED
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c4timediscrete() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c4timediscreteAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer c4timediscreteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * SURFACE ATTACK CONTINUATION WORD - hour.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int c4tm() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * SURFACE ATTACK CONTINUATION WORD - minute.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c4colon() { int o = __offset(86); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * SURFACE ATTACK CONTINUATION WORD - mode of delivery.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c4mod() { int o = __offset(88); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CONTINUATION WORD - hae adjustment, measured in 3.125 FT.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c5haeadj() { int o = __offset(90); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CONTINUATION WORD - time window.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c5tw() { int o = __offset(92); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CONTINUATION WORD - target bearing.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c5tgtbrng() { int o = __offset(94); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CONTINUATION WORD - used with c3_lat to double precision to approx 4 ft.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c5latlsb() { int o = __offset(96); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CONTINUATION WORD - used with c3_lon to double precision to approx 4 ft.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c5lonlsb() { int o = __offset(98); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CONTINUATION WORD - used with c3_elv to double precision to approx 3 ft.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c5elevationlsbs() { int o = __offset(100); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * SURFACE ATTACK CONTINUATION WORD - seconds in increments of 1 sec.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c5colon() { int o = __offset(102); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGETING CONTINUATION WORD - laser illuminator code.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c6laser() { int o = __offset(104); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGETING CONTINUATION WORD - index number, related, 0=NS.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c6intel() { int o = __offset(106); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGETING CONTINUATION WORD - track number, related to 3.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int c6tnr3() { int o = __offset(108); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * TARGETING CONTINUATION WORD - designator/seeker pulse code type.
   * Example: /// Example: C6DSPCT
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c6dspct() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c6dspctAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer c6dspctInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * TARGETING CONTINUATION WORD - designator/seeker pulse code.
   * Example: /// Example: C6DSPC
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c6dspc() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c6dspcAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer c6dspcInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * TARGETING CONTINUATION WORD - first pulse/last pulse mode.
   * Example: /// Example: C6FPLPM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c6fplpm() { int o = __offset(114); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c6fplpmAsByteBuffer() { return __vector_as_bytebuffer(114, 1); }
  public ByteBuffer c6fplpmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 1); }
  /**
   * TARGETING CONTINUATION WORD - long pulse mode.
   * Example: /// Example: C6LONGPM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String c6longpm() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c6longpmAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer c6longpmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * THIRD PARTY CONTINUATION WORD  - track number, index originator.
   * Example: /// Example: C7TNOR
   * Constraints: No constraints specified.
   */
  public String c7tnor() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer c7tnorAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer c7tnorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * THIRD PARTY CONTINUATION WORD  - index number, third party.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int c7in3p() { int o = __offset(120); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * THIRD PARTY CONTINUATION WORD  - elevation angle, 2.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double c7elang2() { int o = __offset(122); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(132); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }

  public static int createMissionAssignment_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int trkIdOffset,
      int tsOffset,
      int madOffset,
      int rcOffset,
      int rr,
      int tnoOffset,
      int twenvOffset,
      double lat,
      double lon,
      int orginxOffset,
      int envOffset,
      int szOffset,
      int index,
      int c1associateddmpis,
      int c2spcOffset,
      int c2airOffset,
      int c2surOffset,
      int c2lndOffset,
      int c2idOffset,
      int c2idamplifyingdescriptorOffset,
      int c2alt,
      int c2crs,
      int c2spd,
      int c2specialinterestindicatorOffset,
      int c2exerciseindicatorOffset,
      int c2exercisemofOffset,
      double c3lat,
      double c3lon,
      double c3elv,
      int c3ptlOffset,
      int c3ptnumOffset,
      int c4tgtOffset,
      int c4defOffset,
      int c4runin,
      int c4egress,
      int c4numberofstores,
      int c4typeofstores,
      int c4timediscreteOffset,
      int c4tm,
      int c4colon,
      int c4mod,
      int c5haeadj,
      int c5tw,
      int c5tgtbrng,
      int c5latlsb,
      int c5lonlsb,
      int c5elevationlsbs,
      int c5colon,
      int c6laser,
      int c6intel,
      int c6tnr3,
      int c6dspctOffset,
      int c6dspcOffset,
      int c6fplpmOffset,
      int c6longpmOffset,
      int c7tnorOffset,
      int c7in3p,
      double c7elang2,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(66);
    MissionAssignment_Ingest.addC7elang2(builder, c7elang2);
    MissionAssignment_Ingest.addC3elv(builder, c3elv);
    MissionAssignment_Ingest.addC3lon(builder, c3lon);
    MissionAssignment_Ingest.addC3lat(builder, c3lat);
    MissionAssignment_Ingest.addLon(builder, lon);
    MissionAssignment_Ingest.addLat(builder, lat);
    MissionAssignment_Ingest.addOrigNetwork(builder, origNetworkOffset);
    MissionAssignment_Ingest.addOrigin(builder, originOffset);
    MissionAssignment_Ingest.addSource(builder, sourceOffset);
    MissionAssignment_Ingest.addCreatedBy(builder, createdByOffset);
    MissionAssignment_Ingest.addCreatedAt(builder, createdAtOffset);
    MissionAssignment_Ingest.addC7in3p(builder, c7in3p);
    MissionAssignment_Ingest.addC7tnor(builder, c7tnorOffset);
    MissionAssignment_Ingest.addC6longpm(builder, c6longpmOffset);
    MissionAssignment_Ingest.addC6fplpm(builder, c6fplpmOffset);
    MissionAssignment_Ingest.addC6dspc(builder, c6dspcOffset);
    MissionAssignment_Ingest.addC6dspct(builder, c6dspctOffset);
    MissionAssignment_Ingest.addC6tnr3(builder, c6tnr3);
    MissionAssignment_Ingest.addC6intel(builder, c6intel);
    MissionAssignment_Ingest.addC6laser(builder, c6laser);
    MissionAssignment_Ingest.addC5colon(builder, c5colon);
    MissionAssignment_Ingest.addC5elevationlsbs(builder, c5elevationlsbs);
    MissionAssignment_Ingest.addC5lonlsb(builder, c5lonlsb);
    MissionAssignment_Ingest.addC5latlsb(builder, c5latlsb);
    MissionAssignment_Ingest.addC5tgtbrng(builder, c5tgtbrng);
    MissionAssignment_Ingest.addC5tw(builder, c5tw);
    MissionAssignment_Ingest.addC5haeadj(builder, c5haeadj);
    MissionAssignment_Ingest.addC4mod(builder, c4mod);
    MissionAssignment_Ingest.addC4colon(builder, c4colon);
    MissionAssignment_Ingest.addC4tm(builder, c4tm);
    MissionAssignment_Ingest.addC4timediscrete(builder, c4timediscreteOffset);
    MissionAssignment_Ingest.addC4typeofstores(builder, c4typeofstores);
    MissionAssignment_Ingest.addC4numberofstores(builder, c4numberofstores);
    MissionAssignment_Ingest.addC4egress(builder, c4egress);
    MissionAssignment_Ingest.addC4runin(builder, c4runin);
    MissionAssignment_Ingest.addC4def(builder, c4defOffset);
    MissionAssignment_Ingest.addC4tgt(builder, c4tgtOffset);
    MissionAssignment_Ingest.addC3ptnum(builder, c3ptnumOffset);
    MissionAssignment_Ingest.addC3ptl(builder, c3ptlOffset);
    MissionAssignment_Ingest.addC2exercisemof(builder, c2exercisemofOffset);
    MissionAssignment_Ingest.addC2exerciseindicator(builder, c2exerciseindicatorOffset);
    MissionAssignment_Ingest.addC2specialinterestindicator(builder, c2specialinterestindicatorOffset);
    MissionAssignment_Ingest.addC2spd(builder, c2spd);
    MissionAssignment_Ingest.addC2crs(builder, c2crs);
    MissionAssignment_Ingest.addC2alt(builder, c2alt);
    MissionAssignment_Ingest.addC2idamplifyingdescriptor(builder, c2idamplifyingdescriptorOffset);
    MissionAssignment_Ingest.addC2id(builder, c2idOffset);
    MissionAssignment_Ingest.addC2lnd(builder, c2lndOffset);
    MissionAssignment_Ingest.addC2sur(builder, c2surOffset);
    MissionAssignment_Ingest.addC2air(builder, c2airOffset);
    MissionAssignment_Ingest.addC2spc(builder, c2spcOffset);
    MissionAssignment_Ingest.addC1associateddmpis(builder, c1associateddmpis);
    MissionAssignment_Ingest.addIndex(builder, index);
    MissionAssignment_Ingest.addSz(builder, szOffset);
    MissionAssignment_Ingest.addEnv(builder, envOffset);
    MissionAssignment_Ingest.addOrginx(builder, orginxOffset);
    MissionAssignment_Ingest.addTwenv(builder, twenvOffset);
    MissionAssignment_Ingest.addTno(builder, tnoOffset);
    MissionAssignment_Ingest.addRr(builder, rr);
    MissionAssignment_Ingest.addRc(builder, rcOffset);
    MissionAssignment_Ingest.addMad(builder, madOffset);
    MissionAssignment_Ingest.addTs(builder, tsOffset);
    MissionAssignment_Ingest.addTrkId(builder, trkIdOffset);
    MissionAssignment_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    MissionAssignment_Ingest.addId(builder, idOffset);
    MissionAssignment_Ingest.addDataMode(builder, dataMode);
    return MissionAssignment_Ingest.endMissionAssignment_Ingest(builder);
  }

  public static void startMissionAssignment_Ingest(FlatBufferBuilder builder) { builder.startTable(66); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addTrkId(FlatBufferBuilder builder, int trkIdOffset) { builder.addOffset(2, trkIdOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(3, tsOffset, 0); }
  public static void addMad(FlatBufferBuilder builder, int madOffset) { builder.addOffset(4, madOffset, 0); }
  public static void addRc(FlatBufferBuilder builder, int rcOffset) { builder.addOffset(5, rcOffset, 0); }
  public static void addRr(FlatBufferBuilder builder, int rr) { builder.addInt(6, rr, 0); }
  public static void addTno(FlatBufferBuilder builder, int tnoOffset) { builder.addOffset(7, tnoOffset, 0); }
  public static void addTwenv(FlatBufferBuilder builder, int twenvOffset) { builder.addOffset(8, twenvOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(9, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(10, lon, 0.0); }
  public static void addOrginx(FlatBufferBuilder builder, int orginxOffset) { builder.addOffset(11, orginxOffset, 0); }
  public static void addEnv(FlatBufferBuilder builder, int envOffset) { builder.addOffset(12, envOffset, 0); }
  public static void addSz(FlatBufferBuilder builder, int szOffset) { builder.addOffset(13, szOffset, 0); }
  public static void addIndex(FlatBufferBuilder builder, int index) { builder.addInt(14, index, 0); }
  public static void addC1associateddmpis(FlatBufferBuilder builder, int c1associateddmpis) { builder.addInt(15, c1associateddmpis, 0); }
  public static void addC2spc(FlatBufferBuilder builder, int c2spcOffset) { builder.addOffset(16, c2spcOffset, 0); }
  public static void addC2air(FlatBufferBuilder builder, int c2airOffset) { builder.addOffset(17, c2airOffset, 0); }
  public static void addC2sur(FlatBufferBuilder builder, int c2surOffset) { builder.addOffset(18, c2surOffset, 0); }
  public static void addC2lnd(FlatBufferBuilder builder, int c2lndOffset) { builder.addOffset(19, c2lndOffset, 0); }
  public static void addC2id(FlatBufferBuilder builder, int c2idOffset) { builder.addOffset(20, c2idOffset, 0); }
  public static void addC2idamplifyingdescriptor(FlatBufferBuilder builder, int c2idamplifyingdescriptorOffset) { builder.addOffset(21, c2idamplifyingdescriptorOffset, 0); }
  public static void addC2alt(FlatBufferBuilder builder, int c2alt) { builder.addInt(22, c2alt, 0); }
  public static void addC2crs(FlatBufferBuilder builder, int c2crs) { builder.addInt(23, c2crs, 0); }
  public static void addC2spd(FlatBufferBuilder builder, int c2spd) { builder.addInt(24, c2spd, 0); }
  public static void addC2specialinterestindicator(FlatBufferBuilder builder, int c2specialinterestindicatorOffset) { builder.addOffset(25, c2specialinterestindicatorOffset, 0); }
  public static void addC2exerciseindicator(FlatBufferBuilder builder, int c2exerciseindicatorOffset) { builder.addOffset(26, c2exerciseindicatorOffset, 0); }
  public static void addC2exercisemof(FlatBufferBuilder builder, int c2exercisemofOffset) { builder.addOffset(27, c2exercisemofOffset, 0); }
  public static void addC3lat(FlatBufferBuilder builder, double c3lat) { builder.addDouble(28, c3lat, 0.0); }
  public static void addC3lon(FlatBufferBuilder builder, double c3lon) { builder.addDouble(29, c3lon, 0.0); }
  public static void addC3elv(FlatBufferBuilder builder, double c3elv) { builder.addDouble(30, c3elv, 0.0); }
  public static void addC3ptl(FlatBufferBuilder builder, int c3ptlOffset) { builder.addOffset(31, c3ptlOffset, 0); }
  public static void addC3ptnum(FlatBufferBuilder builder, int c3ptnumOffset) { builder.addOffset(32, c3ptnumOffset, 0); }
  public static void addC4tgt(FlatBufferBuilder builder, int c4tgtOffset) { builder.addOffset(33, c4tgtOffset, 0); }
  public static void addC4def(FlatBufferBuilder builder, int c4defOffset) { builder.addOffset(34, c4defOffset, 0); }
  public static void addC4runin(FlatBufferBuilder builder, int c4runin) { builder.addInt(35, c4runin, 0); }
  public static void addC4egress(FlatBufferBuilder builder, int c4egress) { builder.addInt(36, c4egress, 0); }
  public static void addC4numberofstores(FlatBufferBuilder builder, int c4numberofstores) { builder.addInt(37, c4numberofstores, 0); }
  public static void addC4typeofstores(FlatBufferBuilder builder, int c4typeofstores) { builder.addInt(38, c4typeofstores, 0); }
  public static void addC4timediscrete(FlatBufferBuilder builder, int c4timediscreteOffset) { builder.addOffset(39, c4timediscreteOffset, 0); }
  public static void addC4tm(FlatBufferBuilder builder, int c4tm) { builder.addInt(40, c4tm, 0); }
  public static void addC4colon(FlatBufferBuilder builder, int c4colon) { builder.addInt(41, c4colon, 0); }
  public static void addC4mod(FlatBufferBuilder builder, int c4mod) { builder.addInt(42, c4mod, 0); }
  public static void addC5haeadj(FlatBufferBuilder builder, int c5haeadj) { builder.addInt(43, c5haeadj, 0); }
  public static void addC5tw(FlatBufferBuilder builder, int c5tw) { builder.addInt(44, c5tw, 0); }
  public static void addC5tgtbrng(FlatBufferBuilder builder, int c5tgtbrng) { builder.addInt(45, c5tgtbrng, 0); }
  public static void addC5latlsb(FlatBufferBuilder builder, int c5latlsb) { builder.addInt(46, c5latlsb, 0); }
  public static void addC5lonlsb(FlatBufferBuilder builder, int c5lonlsb) { builder.addInt(47, c5lonlsb, 0); }
  public static void addC5elevationlsbs(FlatBufferBuilder builder, int c5elevationlsbs) { builder.addInt(48, c5elevationlsbs, 0); }
  public static void addC5colon(FlatBufferBuilder builder, int c5colon) { builder.addInt(49, c5colon, 0); }
  public static void addC6laser(FlatBufferBuilder builder, int c6laser) { builder.addInt(50, c6laser, 0); }
  public static void addC6intel(FlatBufferBuilder builder, int c6intel) { builder.addInt(51, c6intel, 0); }
  public static void addC6tnr3(FlatBufferBuilder builder, int c6tnr3) { builder.addInt(52, c6tnr3, 0); }
  public static void addC6dspct(FlatBufferBuilder builder, int c6dspctOffset) { builder.addOffset(53, c6dspctOffset, 0); }
  public static void addC6dspc(FlatBufferBuilder builder, int c6dspcOffset) { builder.addOffset(54, c6dspcOffset, 0); }
  public static void addC6fplpm(FlatBufferBuilder builder, int c6fplpmOffset) { builder.addOffset(55, c6fplpmOffset, 0); }
  public static void addC6longpm(FlatBufferBuilder builder, int c6longpmOffset) { builder.addOffset(56, c6longpmOffset, 0); }
  public static void addC7tnor(FlatBufferBuilder builder, int c7tnorOffset) { builder.addOffset(57, c7tnorOffset, 0); }
  public static void addC7in3p(FlatBufferBuilder builder, int c7in3p) { builder.addInt(58, c7in3p, 0); }
  public static void addC7elang2(FlatBufferBuilder builder, double c7elang2) { builder.addDouble(59, c7elang2, 0.0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(60, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(61, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(62, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(63, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(64, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(65, origNetworkOffset, 0); }
  public static int endMissionAssignment_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMissionAssignment_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MISS"); }
  public static void finishSizePrefixedMissionAssignment_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MISS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MissionAssignment_Ingest get(int j) { return get(new MissionAssignment_Ingest(), j); }
    public MissionAssignment_Ingest get(MissionAssignment_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

