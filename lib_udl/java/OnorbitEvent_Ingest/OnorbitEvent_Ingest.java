// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// No description available.
 */
@SuppressWarnings("unused")
public final class OnorbitEvent_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OnorbitEvent_Ingest getRootAsOnorbitEvent_Ingest(ByteBuffer _bb) { return getRootAsOnorbitEvent_Ingest(_bb, new OnorbitEvent_Ingest()); }
  public static OnorbitEvent_Ingest getRootAsOnorbitEvent_Ingest(ByteBuffer _bb, OnorbitEvent_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OnorbitEvent_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ONOR"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OnorbitEvent_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ONORBITEVENT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The sources or SCG references from which the classification of this data is derived.
   * Example: /// Example: DERIVED_SOURCE
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String derivedFrom() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer derivedFromAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer derivedFromInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The declassification date of this data, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-01T01:02:02.123Z
   * Constraints: No constraints specified.
   */
  public String declassificationDate() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer declassificationDateAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer declassificationDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Declassification string of this data.
   * Example: /// Example: DECLASS_STRING
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String declassificationString() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer declassificationStringAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer declassificationStringInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the on-orbit object for this event.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String eventTime() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventTimeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer eventTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Notes/remarks on the validity/accuracy of the eventTime.
   * Example: /// Example: Notes on validity
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String eventTimeNotes() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventTimeNotesAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer eventTimeNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Organization ID of the operator of the on-orbit spacecraft at the time of the event.
   * Example: /// Example: OPERATORORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String operatorOrgId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operatorOrgIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer operatorOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Organization ID of the owner of the on-orbit spacecraft at the time of the event.
   * Example: /// Example: OWNERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String ownerOrgId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer ownerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Unique identifier of the organization which leases this on-orbit spacecraft.
   * Example: /// Example: LESSEEORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String lesseeOrgId() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lesseeOrgIdAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer lesseeOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
   * Example: /// Example: OPERATEDONBEHALFOFORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String operatedOnBehalfOfOrgId() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operatedOnBehalfOfOrgIdAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer operatedOnBehalfOfOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * GEO position longitude at event time if applicable. Negative values are west.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double geoPosition() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * GEO plane slot of the spacecraft at event time.
   * Example: /// Example: example_slot
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String planeSlot() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer planeSlotAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer planeSlotInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * GEO slot plane number/designator of the spacecraft at event time.
   * Example: /// Example: PL_1
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String planeNumber() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer planeNumberAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer planeNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
   * Example: /// Example: Stable
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String positionStatus() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer positionStatusAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer positionStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Maximum validity time of the event.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String untilTime() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer untilTimeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer untilTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Date time of official loss of the spacecraft.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String officialLossDate() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer officialLossDateAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer officialLossDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Net amount of the insurance claim for the event, in USD.
   * Example: /// Example: 10000.23
   * Constraints: No constraints specified.
   */
  public double netAmount() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Underlying cause of the event.
   * Example: /// Example: CAUSE_EXAMPLE
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String underlyingCause() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer underlyingCauseAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer underlyingCauseInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Spacecraft capability loss incurred, as a fraction of 1.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double capabilityLoss() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft capacity loss incurred, as a fraction of 1.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double capacityLoss() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Insurance loss incurred, as a fraction of 1.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double insuranceLoss() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Insurance loss incurred by 3rd party insurance, in USD.
   * Example: /// Example: 10000.23
   * Constraints: No constraints specified.
   */
  public double thirdPartyInsuranceLoss() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of humans injured in the event.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int injured() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of humans killed in the event.
   * Example: /// Example: 23
   * Constraints: No constraints specified.
   */
  public int killed() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Spacecraft life lost due to the event as a percent/fraction of 1.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double lifeLost() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft age at the event in years.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double ageAtEvent() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Achieved phase of flight prior to the event.
   * Example: /// Example: Phase 2
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String achievedFlightPhase() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer achievedFlightPhaseAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer achievedFlightPhaseInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Phase of flight during which the event occurred.
   * Example: /// Example: Phase 2
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String occurrenceFlightPhase() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer occurrenceFlightPhaseAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer occurrenceFlightPhaseInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Faulty stage of flight for the event.
   * Example: /// Example: Phase 2
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String stageAtFault() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stageAtFaultAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer stageAtFaultInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Equipment on the spacecraft which caused the event.
   * Example: /// Example: Example Equipment
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String equipmentAtFault() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer equipmentAtFaultAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer equipmentAtFaultInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Type of the equipment on the spacecraft which caused the event.
   * Example: /// Example: Example Equipment
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String equipmentTypeAtFault() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer equipmentTypeAtFaultAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer equipmentTypeAtFaultInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Specific part of the equipment on the spacecraft which caused the event.
   * Example: /// Example: Example Equipment
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String equipmentPartAtFault() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer equipmentPartAtFaultAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer equipmentPartAtFaultInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
   * Example: /// Example: Example Equipment
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String consequentialEquipmentFailure() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer consequentialEquipmentFailureAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer consequentialEquipmentFailureInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Boolean indicating if the spacecraft is inclined.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean inclined() { int o = __offset(78); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Notes/description of the event.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String description() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Additional remarks on the event description.
   * Example: /// Example: Example remarks
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String remarks() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer remarksAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer remarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Additional insurance notes if the event is an official loss.
   * Example: /// Example: Insurance notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String insuranceLossNotes() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer insuranceLossNotesAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer insuranceLossNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Notes on capability loss at the time of event.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String capabilityLossNotes() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer capabilityLossNotesAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer capabilityLossNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Additional insurance notes on coverages at the time of event.
   * Example: /// Example: Insurance notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String insuranceCarriedNotes() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer insuranceCarriedNotesAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer insuranceCarriedNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Additional notes on the equipment causing the event/loss.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String equipmentCausingLossNotes() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer equipmentCausingLossNotesAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer equipmentCausingLossNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * The type of on-orbit event being reported.
   * Example: /// Example: Type1
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String eventType() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventTypeAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer eventTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * The result of the reported event.
   * Example: /// Example: Example results
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String eventResult() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventResultAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer eventResultInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * The status of the on-orbit object.
   * Example: /// Example: Status1
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String objectStatus() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer objectStatusAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer objectStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Description of the satellite orbital position or regime.
   * Example: /// Example: Example description
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String satellitePosition() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer satellitePositionAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer satellitePositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(104); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }

  public static int createOnorbitEvent_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int derivedFromOffset,
      int declassificationDateOffset,
      int declassificationStringOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int eventTimeOffset,
      int eventTimeNotesOffset,
      int operatorOrgIdOffset,
      int ownerOrgIdOffset,
      int lesseeOrgIdOffset,
      int operatedOnBehalfOfOrgIdOffset,
      double geoPosition,
      int planeSlotOffset,
      int planeNumberOffset,
      int positionStatusOffset,
      int untilTimeOffset,
      int officialLossDateOffset,
      double netAmount,
      int underlyingCauseOffset,
      double capabilityLoss,
      double capacityLoss,
      double insuranceLoss,
      double thirdPartyInsuranceLoss,
      int injured,
      int killed,
      double lifeLost,
      double ageAtEvent,
      int achievedFlightPhaseOffset,
      int occurrenceFlightPhaseOffset,
      int stageAtFaultOffset,
      int equipmentAtFaultOffset,
      int equipmentTypeAtFaultOffset,
      int equipmentPartAtFaultOffset,
      int consequentialEquipmentFailureOffset,
      boolean inclined,
      int descriptionOffset,
      int remarksOffset,
      int insuranceLossNotesOffset,
      int capabilityLossNotesOffset,
      int insuranceCarriedNotesOffset,
      int equipmentCausingLossNotesOffset,
      int eventTypeOffset,
      int eventResultOffset,
      int objectStatusOffset,
      int satellitePositionOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int origNetworkOffset) {
    builder.startTable(54);
    OnorbitEvent_Ingest.addAgeAtEvent(builder, ageAtEvent);
    OnorbitEvent_Ingest.addLifeLost(builder, lifeLost);
    OnorbitEvent_Ingest.addThirdPartyInsuranceLoss(builder, thirdPartyInsuranceLoss);
    OnorbitEvent_Ingest.addInsuranceLoss(builder, insuranceLoss);
    OnorbitEvent_Ingest.addCapacityLoss(builder, capacityLoss);
    OnorbitEvent_Ingest.addCapabilityLoss(builder, capabilityLoss);
    OnorbitEvent_Ingest.addNetAmount(builder, netAmount);
    OnorbitEvent_Ingest.addGeoPosition(builder, geoPosition);
    OnorbitEvent_Ingest.addOrigNetwork(builder, origNetworkOffset);
    OnorbitEvent_Ingest.addCreatedBy(builder, createdByOffset);
    OnorbitEvent_Ingest.addCreatedAt(builder, createdAtOffset);
    OnorbitEvent_Ingest.addOrigin(builder, originOffset);
    OnorbitEvent_Ingest.addSource(builder, sourceOffset);
    OnorbitEvent_Ingest.addSatellitePosition(builder, satellitePositionOffset);
    OnorbitEvent_Ingest.addObjectStatus(builder, objectStatusOffset);
    OnorbitEvent_Ingest.addEventResult(builder, eventResultOffset);
    OnorbitEvent_Ingest.addEventType(builder, eventTypeOffset);
    OnorbitEvent_Ingest.addEquipmentCausingLossNotes(builder, equipmentCausingLossNotesOffset);
    OnorbitEvent_Ingest.addInsuranceCarriedNotes(builder, insuranceCarriedNotesOffset);
    OnorbitEvent_Ingest.addCapabilityLossNotes(builder, capabilityLossNotesOffset);
    OnorbitEvent_Ingest.addInsuranceLossNotes(builder, insuranceLossNotesOffset);
    OnorbitEvent_Ingest.addRemarks(builder, remarksOffset);
    OnorbitEvent_Ingest.addDescription(builder, descriptionOffset);
    OnorbitEvent_Ingest.addConsequentialEquipmentFailure(builder, consequentialEquipmentFailureOffset);
    OnorbitEvent_Ingest.addEquipmentPartAtFault(builder, equipmentPartAtFaultOffset);
    OnorbitEvent_Ingest.addEquipmentTypeAtFault(builder, equipmentTypeAtFaultOffset);
    OnorbitEvent_Ingest.addEquipmentAtFault(builder, equipmentAtFaultOffset);
    OnorbitEvent_Ingest.addStageAtFault(builder, stageAtFaultOffset);
    OnorbitEvent_Ingest.addOccurrenceFlightPhase(builder, occurrenceFlightPhaseOffset);
    OnorbitEvent_Ingest.addAchievedFlightPhase(builder, achievedFlightPhaseOffset);
    OnorbitEvent_Ingest.addKilled(builder, killed);
    OnorbitEvent_Ingest.addInjured(builder, injured);
    OnorbitEvent_Ingest.addUnderlyingCause(builder, underlyingCauseOffset);
    OnorbitEvent_Ingest.addOfficialLossDate(builder, officialLossDateOffset);
    OnorbitEvent_Ingest.addUntilTime(builder, untilTimeOffset);
    OnorbitEvent_Ingest.addPositionStatus(builder, positionStatusOffset);
    OnorbitEvent_Ingest.addPlaneNumber(builder, planeNumberOffset);
    OnorbitEvent_Ingest.addPlaneSlot(builder, planeSlotOffset);
    OnorbitEvent_Ingest.addOperatedOnBehalfOfOrgId(builder, operatedOnBehalfOfOrgIdOffset);
    OnorbitEvent_Ingest.addLesseeOrgId(builder, lesseeOrgIdOffset);
    OnorbitEvent_Ingest.addOwnerOrgId(builder, ownerOrgIdOffset);
    OnorbitEvent_Ingest.addOperatorOrgId(builder, operatorOrgIdOffset);
    OnorbitEvent_Ingest.addEventTimeNotes(builder, eventTimeNotesOffset);
    OnorbitEvent_Ingest.addEventTime(builder, eventTimeOffset);
    OnorbitEvent_Ingest.addOrigObjectId(builder, origObjectIdOffset);
    OnorbitEvent_Ingest.addSatNo(builder, satNo);
    OnorbitEvent_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    OnorbitEvent_Ingest.addDeclassificationString(builder, declassificationStringOffset);
    OnorbitEvent_Ingest.addDeclassificationDate(builder, declassificationDateOffset);
    OnorbitEvent_Ingest.addDerivedFrom(builder, derivedFromOffset);
    OnorbitEvent_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    OnorbitEvent_Ingest.addId(builder, idOffset);
    OnorbitEvent_Ingest.addDataMode(builder, dataMode);
    OnorbitEvent_Ingest.addInclined(builder, inclined);
    return OnorbitEvent_Ingest.endOnorbitEvent_Ingest(builder);
  }

  public static void startOnorbitEvent_Ingest(FlatBufferBuilder builder) { builder.startTable(54); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addDerivedFrom(FlatBufferBuilder builder, int derivedFromOffset) { builder.addOffset(2, derivedFromOffset, 0); }
  public static void addDeclassificationDate(FlatBufferBuilder builder, int declassificationDateOffset) { builder.addOffset(3, declassificationDateOffset, 0); }
  public static void addDeclassificationString(FlatBufferBuilder builder, int declassificationStringOffset) { builder.addOffset(4, declassificationStringOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(5, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(6, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(7, origObjectIdOffset, 0); }
  public static void addEventTime(FlatBufferBuilder builder, int eventTimeOffset) { builder.addOffset(8, eventTimeOffset, 0); }
  public static void addEventTimeNotes(FlatBufferBuilder builder, int eventTimeNotesOffset) { builder.addOffset(9, eventTimeNotesOffset, 0); }
  public static void addOperatorOrgId(FlatBufferBuilder builder, int operatorOrgIdOffset) { builder.addOffset(10, operatorOrgIdOffset, 0); }
  public static void addOwnerOrgId(FlatBufferBuilder builder, int ownerOrgIdOffset) { builder.addOffset(11, ownerOrgIdOffset, 0); }
  public static void addLesseeOrgId(FlatBufferBuilder builder, int lesseeOrgIdOffset) { builder.addOffset(12, lesseeOrgIdOffset, 0); }
  public static void addOperatedOnBehalfOfOrgId(FlatBufferBuilder builder, int operatedOnBehalfOfOrgIdOffset) { builder.addOffset(13, operatedOnBehalfOfOrgIdOffset, 0); }
  public static void addGeoPosition(FlatBufferBuilder builder, double geoPosition) { builder.addDouble(14, geoPosition, 0.0); }
  public static void addPlaneSlot(FlatBufferBuilder builder, int planeSlotOffset) { builder.addOffset(15, planeSlotOffset, 0); }
  public static void addPlaneNumber(FlatBufferBuilder builder, int planeNumberOffset) { builder.addOffset(16, planeNumberOffset, 0); }
  public static void addPositionStatus(FlatBufferBuilder builder, int positionStatusOffset) { builder.addOffset(17, positionStatusOffset, 0); }
  public static void addUntilTime(FlatBufferBuilder builder, int untilTimeOffset) { builder.addOffset(18, untilTimeOffset, 0); }
  public static void addOfficialLossDate(FlatBufferBuilder builder, int officialLossDateOffset) { builder.addOffset(19, officialLossDateOffset, 0); }
  public static void addNetAmount(FlatBufferBuilder builder, double netAmount) { builder.addDouble(20, netAmount, 0.0); }
  public static void addUnderlyingCause(FlatBufferBuilder builder, int underlyingCauseOffset) { builder.addOffset(21, underlyingCauseOffset, 0); }
  public static void addCapabilityLoss(FlatBufferBuilder builder, double capabilityLoss) { builder.addDouble(22, capabilityLoss, 0.0); }
  public static void addCapacityLoss(FlatBufferBuilder builder, double capacityLoss) { builder.addDouble(23, capacityLoss, 0.0); }
  public static void addInsuranceLoss(FlatBufferBuilder builder, double insuranceLoss) { builder.addDouble(24, insuranceLoss, 0.0); }
  public static void addThirdPartyInsuranceLoss(FlatBufferBuilder builder, double thirdPartyInsuranceLoss) { builder.addDouble(25, thirdPartyInsuranceLoss, 0.0); }
  public static void addInjured(FlatBufferBuilder builder, int injured) { builder.addInt(26, injured, 0); }
  public static void addKilled(FlatBufferBuilder builder, int killed) { builder.addInt(27, killed, 0); }
  public static void addLifeLost(FlatBufferBuilder builder, double lifeLost) { builder.addDouble(28, lifeLost, 0.0); }
  public static void addAgeAtEvent(FlatBufferBuilder builder, double ageAtEvent) { builder.addDouble(29, ageAtEvent, 0.0); }
  public static void addAchievedFlightPhase(FlatBufferBuilder builder, int achievedFlightPhaseOffset) { builder.addOffset(30, achievedFlightPhaseOffset, 0); }
  public static void addOccurrenceFlightPhase(FlatBufferBuilder builder, int occurrenceFlightPhaseOffset) { builder.addOffset(31, occurrenceFlightPhaseOffset, 0); }
  public static void addStageAtFault(FlatBufferBuilder builder, int stageAtFaultOffset) { builder.addOffset(32, stageAtFaultOffset, 0); }
  public static void addEquipmentAtFault(FlatBufferBuilder builder, int equipmentAtFaultOffset) { builder.addOffset(33, equipmentAtFaultOffset, 0); }
  public static void addEquipmentTypeAtFault(FlatBufferBuilder builder, int equipmentTypeAtFaultOffset) { builder.addOffset(34, equipmentTypeAtFaultOffset, 0); }
  public static void addEquipmentPartAtFault(FlatBufferBuilder builder, int equipmentPartAtFaultOffset) { builder.addOffset(35, equipmentPartAtFaultOffset, 0); }
  public static void addConsequentialEquipmentFailure(FlatBufferBuilder builder, int consequentialEquipmentFailureOffset) { builder.addOffset(36, consequentialEquipmentFailureOffset, 0); }
  public static void addInclined(FlatBufferBuilder builder, boolean inclined) { builder.addBoolean(37, inclined, false); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(38, descriptionOffset, 0); }
  public static void addRemarks(FlatBufferBuilder builder, int remarksOffset) { builder.addOffset(39, remarksOffset, 0); }
  public static void addInsuranceLossNotes(FlatBufferBuilder builder, int insuranceLossNotesOffset) { builder.addOffset(40, insuranceLossNotesOffset, 0); }
  public static void addCapabilityLossNotes(FlatBufferBuilder builder, int capabilityLossNotesOffset) { builder.addOffset(41, capabilityLossNotesOffset, 0); }
  public static void addInsuranceCarriedNotes(FlatBufferBuilder builder, int insuranceCarriedNotesOffset) { builder.addOffset(42, insuranceCarriedNotesOffset, 0); }
  public static void addEquipmentCausingLossNotes(FlatBufferBuilder builder, int equipmentCausingLossNotesOffset) { builder.addOffset(43, equipmentCausingLossNotesOffset, 0); }
  public static void addEventType(FlatBufferBuilder builder, int eventTypeOffset) { builder.addOffset(44, eventTypeOffset, 0); }
  public static void addEventResult(FlatBufferBuilder builder, int eventResultOffset) { builder.addOffset(45, eventResultOffset, 0); }
  public static void addObjectStatus(FlatBufferBuilder builder, int objectStatusOffset) { builder.addOffset(46, objectStatusOffset, 0); }
  public static void addSatellitePosition(FlatBufferBuilder builder, int satellitePositionOffset) { builder.addOffset(47, satellitePositionOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(48, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(49, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(50, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(51, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(52, createdByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(53, origNetworkOffset, 0); }
  public static int endOnorbitEvent_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOnorbitEvent_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ONOR"); }
  public static void finishSizePrefixedOnorbitEvent_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ONOR"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OnorbitEvent_Ingest get(int j) { return get(new OnorbitEvent_Ingest(), j); }
    public OnorbitEvent_Ingest get(OnorbitEvent_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

