// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of on-orbit object maneuver information for detected, possible, and confirmed maneuvers.
 */
@SuppressWarnings("unused")
public final class Maneuver_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Maneuver_Abridged getRootAsManeuver_Abridged(ByteBuffer _bb) { return getRootAsManeuver_Abridged(_bb, new Maneuver_Abridged()); }
  public static Maneuver_Abridged getRootAsManeuver_Abridged(ByteBuffer _bb, Maneuver_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Maneuver_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MANE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Maneuver_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: MANEUVER-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The time that the report or alert of this maneuver was generated, in ISO 8601 UTC format.
   * Example: /// Example: 2023-11-16T04:15:00.0001Z
   * Constraints: No constraints specified.
   */
  public String reportTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reportTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer reportTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Maneuver event start time in ISO 8601 UTC with microsecond precision. For maneuvers without start and end times, the start time is considered to be the maneuver event time.
   * Example: /// Example: 2023-11-16T01:05:16.835689Z
   * Constraints: No constraints specified.
   */
  public String eventStartTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventStartTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer eventStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Maneuver event end time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2023-11-16T01:09:01.350012Z
   * Constraints: No constraints specified.
   */
  public String eventEndTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventEndTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer eventEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The estimated total active burn time of a maneuver, in seconds. This includes the sum of all burns in numAccelPoints. Not to be confused with the total duration of the maneuver.
   * Example: /// Example: 600.72
   * Constraints: No constraints specified.
   */
  public double totalBurnTime() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maneuver orbit determination fit data end time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2023-11-16T03:55:51Z
   * Constraints: No constraints specified.
   */
  public String odFitEndTime() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer odFitEndTimeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer odFitEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Target maneuvering on-orbit object. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
   * Example: /// Example: 12
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Optional ID of the sensor that detected this maneuver (for example, if detected by passive RF anomalies).
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Boolean indicating this maneuver was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Uncertainty in the occurrence of this maneuver (0 - 1).
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double maneuverUnc() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional purpose of the maneuver if known (e.g. North-South Station Keeping, East-West Station Keeping, Longitude Shift, Unknown).
   * Example: /// Example: North-South Station Keeping
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String characterization() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer characterizationAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer characterizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Uncertainty in the characterization or purpose assessment of this maneuver (0 - 1).
   * Example: /// Example: 0.15
   * Constraints: No constraints specified.
   */
  public double characterizationUnc() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional source-provided identifier for this maneuver event. In the case where multiple maneuver records are submitted for the same event, this field can be used to tie them together to the same event.
   * Example: /// Example: EVENT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String eventId() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventIdAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer eventIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Identifier provided by source to indicate the target on-orbit object performing this maneuver. This may be an internal identifier and not necessarily a valid satellite number/ID.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Optional identifier provided by source to indicate the sensor identifier used to detect this event. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Status of this maneuver (CANCELLED, PLANNED, POSSIBLE, REDACTED, VERIFIED).
   * CANCELLED:  A previously planned maneuver whose execution was cancelled.
   * PLANNED:  A maneuver planned to take place at the eventStartTime.
   * POSSIBLE:  A possible maneuver detected by observation of the spacecraft or by evaluation of the spacecraft orbit.
   * REDACTED:  A redaction of a reported possible maneuver that has been determined to have not taken place after further observation/evaluation.
   * VERIFIED:  A maneuver whose execution has been verified, either by the owner/operator or observation/evaluation.
   * Example: /// Example: POSSIBLE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String status() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors at the maneuver event time.
   * Example: /// Example: 0.715998327
   * Constraints: No constraints specified.
   */
  public double deltaPos() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
   * Example: /// Example: -0.022172844
   * Constraints: No constraints specified.
   */
  public double deltaPosU() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
   * Example: /// Example: -0.033700154
   * Constraints: No constraints specified.
   */
  public double deltaPosV() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Magnitude, in km, of the difference in the pre- and post-maneuver position vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
   * Example: /// Example: -0.714861014
   * Constraints: No constraints specified.
   */
  public double deltaPosW() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors at the maneuver event time.
   * Example: /// Example: 0.000631505
   * Constraints: No constraints specified.
   */
  public double deltaVel() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'U' unit vector at the maneuver event time.
   * Example: /// Example: 3.50165629389647e-05
   * Constraints: No constraints specified.
   */
  public double deltaVelU() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'V' unit vector at the maneuver event time.
   * Example: /// Example: 0.000544413
   * Constraints: No constraints specified.
   */
  public double deltaVelV() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Magnitude, in km/sec, of the difference in the pre- and post-maneuver velocity vectors in the direction of the pre-maneuver 'W' unit vector at the maneuver event time.
   * Example: /// Example: -0.000318099
   * Constraints: No constraints specified.
   */
  public double deltaVelW() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Difference in mass before and after the maneuver, in kg.
   * Example: /// Example: 0.15
   * Constraints: No constraints specified.
   */
  public double deltaMass() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional identifier of the element set for the pre-maneuver orbit.
   * Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String preEventIdElset() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer preEventIdElsetAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer preEventIdElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String preEventElset() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer preEventElsetAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer preEventElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Optional identifier of the state vector for the pre-maneuver trajectory of the spacecraft.
   * Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String preEventIdStateVector() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer preEventIdStateVectorAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer preEventIdStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String preEventStateVector() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer preEventStateVectorAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer preEventStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Pre-event X component of position in ECI space, in km.
   * Example: /// Example: 3584.432545
   * Constraints: No constraints specified.
   */
  public double prePosX() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event Y component of position in ECI space, in km.
   * Example: /// Example: 42028.43245
   * Constraints: No constraints specified.
   */
  public double prePosY() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event Z component of position in ECI space, in km.
   * Example: /// Example: -1.97765
   * Constraints: No constraints specified.
   */
  public double prePosZ() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event X component of velocity in ECI space, in km/sec.
   * Example: /// Example: -2.543266
   * Constraints: No constraints specified.
   */
  public double preVelX() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event Y component of velocity in ECI space, in km/sec.
   * Example: /// Example: 0.24876
   * Constraints: No constraints specified.
   */
  public double preVelY() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event Z component of velocity in ECI space, in km/sec.
   * Example: /// Example: 0.0067352
   * Constraints: No constraints specified.
   */
  public double preVelZ() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
   * Example: /// Example: 4.51e-07
   * Constraints: No constraints specified.
   */
  public double preRadiationPressCoeff() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
   * Example: /// Example: 0.000437116
   * Constraints: No constraints specified.
   */
  public double preBallisticCoeff() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft apogee (measured from Earth center), in kilometers.
   * Example: /// Example: 35802
   * Constraints: No constraints specified.
   */
  public double preApogee() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft perigee (measured from Earth center), in kilometers.
   * Example: /// Example: 35786.5
   * Constraints: No constraints specified.
   */
  public double prePerigee() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft orbital inclination, in degrees. 0-180.
   * Example: /// Example: 0.0336
   * Constraints: No constraints specified.
   */
  public double preInclination() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft eccentricity.
   * Example: /// Example: 0.00017
   * Constraints: No constraints specified.
   */
  public double preEccentricity() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft orbital period, in minutes.
   * Example: /// Example: 1436.12
   * Constraints: No constraints specified.
   */
  public double prePeriod() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
   * Example: /// Example: 98.3336
   * Constraints: No constraints specified.
   */
  public double preRaan() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft orbital Semi-Major Axis (SMA), in kilometers.
   * Example: /// Example: 42165.1
   * Constraints: No constraints specified.
   */
  public double preSma() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -93.12
   * Constraints: No constraints specified.
   */
  public double preGeoLongitude() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
   * Example: /// Example: -0.0125
   * Constraints: No constraints specified.
   */
  public double preDriftRate() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
   * Example: /// Example: 0.215
   * Constraints: No constraints specified.
   */
  public double preSigmaU() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
   * Example: /// Example: 1.97
   * Constraints: No constraints specified.
   */
  public double preSigmaV() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pre-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
   * Example: /// Example: 0.208
   * Constraints: No constraints specified.
   */
  public double preSigmaW() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional identifier of the element set for the post-maneuver orbit.
   * Example: /// Example: 225adf4c-8606-40a8-929e-63e22cffe220
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String postEventIdElset() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer postEventIdElsetAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer postEventIdElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String postEventElset() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer postEventElsetAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer postEventElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Optional identifier of the state vector for the post-maneuver trajectory of the spacecraft.
   * Example: /// Example: d83a23f8-1496-485a-bd88-ec5808c73299
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String postEventIdStateVector() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer postEventIdStateVectorAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer postEventIdStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String postEventStateVector() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer postEventStateVectorAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer postEventStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * Post-event X component of position in ECI space, in km.
   * Example: /// Example: 3589.351957
   * Constraints: No constraints specified.
   */
  public double postPosX() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event Y component of position in ECI space, in km.
   * Example: /// Example: 42017.26823
   * Constraints: No constraints specified.
   */
  public double postPosY() { int o = __offset(116); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event Z component of position in ECI space, in km.
   * Example: /// Example: -1.27161796
   * Constraints: No constraints specified.
   */
  public double postPosZ() { int o = __offset(118); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event X component of velocity in ECI space, in km/sec.
   * Example: /// Example: -3.063152826
   * Constraints: No constraints specified.
   */
  public double postVelX() { int o = __offset(120); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event Y component of velocity in ECI space, in km/sec.
   * Example: /// Example: 0.261586769
   * Constraints: No constraints specified.
   */
  public double postVelY() { int o = __offset(122); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event Z component of velocity in ECI space, in km/sec.
   * Example: /// Example: 0.006842148
   * Constraints: No constraints specified.
   */
  public double postVelZ() { int o = __offset(124); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event radiation pressure coefficient. The units of the radiation pressure coefficient vary depending on provider. Users should consult the data provider to verify the units of the radiation pressure coefficient.
   * Example: /// Example: 4.51e-07
   * Constraints: No constraints specified.
   */
  public double postRadiationPressCoeff() { int o = __offset(126); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event ballistic coefficient. The units of the ballistic coefficient vary depending on provider. Users should consult the data provider to verify the units of the ballistic coefficient.
   * Example: /// Example: 0.000433209
   * Constraints: No constraints specified.
   */
  public double postBallisticCoeff() { int o = __offset(128); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft apogee (measured from Earth center), in kilometers.
   * Example: /// Example: 35800.1
   * Constraints: No constraints specified.
   */
  public double postApogee() { int o = __offset(130); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft perigee (measured from Earth center), in kilometers.
   * Example: /// Example: 35787.9
   * Constraints: No constraints specified.
   */
  public double postPerigee() { int o = __offset(132); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft orbital inclination, in degrees. 0-180.
   * Example: /// Example: 0.0327
   * Constraints: No constraints specified.
   */
  public double postInclination() { int o = __offset(134); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft eccentricity.
   * Example: /// Example: 0.000164
   * Constraints: No constraints specified.
   */
  public double postEccentricity() { int o = __offset(136); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft orbital period, in minutes.
   * Example: /// Example: 1436.01
   * Constraints: No constraints specified.
   */
  public double postPeriod() { int o = __offset(138); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft Right Ascension of the Ascending Node (RAAN), in degrees.
   * Example: /// Example: 98.3335
   * Constraints: No constraints specified.
   */
  public double postRaan() { int o = __offset(140); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft Semi-Major Axis (SMA), in kilometers.
   * Example: /// Example: 42164.87
   * Constraints: No constraints specified.
   */
  public double postSma() { int o = __offset(142); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event spacecraft WGS-84 GEO belt longitude, represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -93.15
   * Constraints: No constraints specified.
   */
  public double postGeoLongitude() { int o = __offset(144); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event GEO drift rate of the spacecraft, in degrees per day. Negative values indicate westward drift.
   * Example: /// Example: -0.0125
   * Constraints: No constraints specified.
   */
  public double postDriftRate() { int o = __offset(146); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event standard deviation, in kilometers, of spacecraft position in the 'U' unit vector direction.
   * Example: /// Example: 12.285
   * Constraints: No constraints specified.
   */
  public double postSigmaU() { int o = __offset(148); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event standard deviation, in kilometers, of spacecraft position in the 'V' unit vector direction.
   * Example: /// Example: 71.339
   * Constraints: No constraints specified.
   */
  public double postSigmaV() { int o = __offset(150); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Post-event standard deviation, in kilometers, of spacecraft position in the 'W' unit vector direction.
   * Example: /// Example: 12.77
   * Constraints: No constraints specified.
   */
  public double postSigmaW() { int o = __offset(152); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional maneuver cross-track/radial/in-track covariance array, in meter and second based units, in the following order: CR_R, CI_R, CI_I, CC_R, CC_I, CC_C, CT_R, CT_I, CT_C, CT_T.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String cov(int j) { int o = __offset(154); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int covLength() { int o = __offset(154); return o != 0 ? __vector_len(o) : 0; }
  public StringVector covVector() { return covVector(new StringVector()); }
  public StringVector covVector(StringVector obj) { int o = __offset(154); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   *  Estimated mass of the object following the maneuver, in kg.
   * Example: /// Example: 1844.5
   * Constraints: No constraints specified.
   */
  public double postMass() { int o = __offset(156); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Estimated area of the object following the maneuver, in meters squared.
   * Example: /// Example: 35.77
   * Constraints: No constraints specified.
   */
  public double postArea() { int o = __offset(158); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of observations used to generate the maneuver data.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int numObs() { int o = __offset(160); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Description and notes of the maneuver.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String description() { int o = __offset(162); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(162, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 162, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: Example descriptor
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(164); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(164, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 164, 1); }
  /**
   * Name of the state model used to generate the maneuver data.
   * Example: /// Example: Example name
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String stateModel() { int o = __offset(166); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateModelAsByteBuffer() { return __vector_as_bytebuffer(166, 1); }
  public ByteBuffer stateModelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 166, 1); }
  /**
   * Version of the state model used to generate the maneuver data.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public double stateModelVersion() { int o = __offset(168); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total number of estimated acceleration points during the maneuver.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int numAccelPoints() { int o = __offset(170); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of elapsed times, in seconds from maneuver start time, at which each acceleration point is estimated. Number of elements must match the numAccelPoints.
   * Example: /// Example: [10.25, 50.56, 150.78]
   * Constraints: No constraints specified.
   */
  public String mnvrAccelTimes(int j) { int o = __offset(172); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int mnvrAccelTimesLength() { int o = __offset(172); return o != 0 ? __vector_len(o) : 0; }
  public StringVector mnvrAccelTimesVector() { return mnvrAccelTimesVector(new StringVector()); }
  public StringVector mnvrAccelTimesVector(StringVector obj) { int o = __offset(172); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of estimated acceleration values, in meters per second squared. Number of elements must match the numAccelPoints.
   * Example: /// Example: [0.05, 0.1, 0.05]
   * Constraints: No constraints specified.
   */
  public String mnvrAccels(int j) { int o = __offset(174); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int mnvrAccelsLength() { int o = __offset(174); return o != 0 ? __vector_len(o) : 0; }
  public StringVector mnvrAccelsVector() { return mnvrAccelsVector(new StringVector()); }
  public StringVector mnvrAccelsVector(StringVector obj) { int o = __offset(174); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the 1-sigma uncertainties in estimated accelerations, in meters per second squared. Number of elements must match the numAccelPoints.
   * Example: /// Example: [0.0005, 0.001, 0.0005]
   * Constraints: No constraints specified.
   */
  public String mnvrAccelUncs(int j) { int o = __offset(176); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int mnvrAccelUncsLength() { int o = __offset(176); return o != 0 ? __vector_len(o) : 0; }
  public StringVector mnvrAccelUncsVector() { return mnvrAccelUncsVector(new StringVector()); }
  public StringVector mnvrAccelUncsVector(StringVector obj) { int o = __offset(176); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(178); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(178, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 178, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(180); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(180, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 180, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(182); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(184); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(184, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 184, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(186); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(186, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 186, 1); }
  /**
   * Optional algorithm used to produce this record.
   * Example: /// Example: Example algorithm
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String algorithm() { int o = __offset(188); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer algorithmAsByteBuffer() { return __vector_as_bytebuffer(188, 1); }
  public ByteBuffer algorithmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 188, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(190); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(190, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 190, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(192); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(192, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 192, 1); }

  public static int createManeuver_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int satNo,
      int reportTimeOffset,
      int eventStartTimeOffset,
      int eventEndTimeOffset,
      double totalBurnTime,
      int odFitEndTimeOffset,
      int idOnOrbitOffset,
      int idSensorOffset,
      boolean uct,
      double maneuverUnc,
      int characterizationOffset,
      double characterizationUnc,
      int eventIdOffset,
      int origObjectIdOffset,
      int origSensorIdOffset,
      int statusOffset,
      double deltaPos,
      double deltaPosU,
      double deltaPosV,
      double deltaPosW,
      double deltaVel,
      double deltaVelU,
      double deltaVelV,
      double deltaVelW,
      double deltaMass,
      int preEventIdElsetOffset,
      int preEventElsetOffset,
      int preEventIdStateVectorOffset,
      int preEventStateVectorOffset,
      double prePosX,
      double prePosY,
      double prePosZ,
      double preVelX,
      double preVelY,
      double preVelZ,
      double preRadiationPressCoeff,
      double preBallisticCoeff,
      double preApogee,
      double prePerigee,
      double preInclination,
      double preEccentricity,
      double prePeriod,
      double preRaan,
      double preSma,
      double preGeoLongitude,
      double preDriftRate,
      double preSigmaU,
      double preSigmaV,
      double preSigmaW,
      int postEventIdElsetOffset,
      int postEventElsetOffset,
      int postEventIdStateVectorOffset,
      int postEventStateVectorOffset,
      double postPosX,
      double postPosY,
      double postPosZ,
      double postVelX,
      double postVelY,
      double postVelZ,
      double postRadiationPressCoeff,
      double postBallisticCoeff,
      double postApogee,
      double postPerigee,
      double postInclination,
      double postEccentricity,
      double postPeriod,
      double postRaan,
      double postSma,
      double postGeoLongitude,
      double postDriftRate,
      double postSigmaU,
      double postSigmaV,
      double postSigmaW,
      int covOffset,
      double postMass,
      double postArea,
      int numObs,
      int descriptionOffset,
      int descriptorOffset,
      int stateModelOffset,
      double stateModelVersion,
      int numAccelPoints,
      int mnvrAccelTimesOffset,
      int mnvrAccelsOffset,
      int mnvrAccelUncsOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int algorithmOffset,
      int transactionIdOffset,
      int origNetworkOffset) {
    builder.startTable(95);
    Maneuver_Abridged.addStateModelVersion(builder, stateModelVersion);
    Maneuver_Abridged.addPostArea(builder, postArea);
    Maneuver_Abridged.addPostMass(builder, postMass);
    Maneuver_Abridged.addPostSigmaW(builder, postSigmaW);
    Maneuver_Abridged.addPostSigmaV(builder, postSigmaV);
    Maneuver_Abridged.addPostSigmaU(builder, postSigmaU);
    Maneuver_Abridged.addPostDriftRate(builder, postDriftRate);
    Maneuver_Abridged.addPostGeoLongitude(builder, postGeoLongitude);
    Maneuver_Abridged.addPostSma(builder, postSma);
    Maneuver_Abridged.addPostRaan(builder, postRaan);
    Maneuver_Abridged.addPostPeriod(builder, postPeriod);
    Maneuver_Abridged.addPostEccentricity(builder, postEccentricity);
    Maneuver_Abridged.addPostInclination(builder, postInclination);
    Maneuver_Abridged.addPostPerigee(builder, postPerigee);
    Maneuver_Abridged.addPostApogee(builder, postApogee);
    Maneuver_Abridged.addPostBallisticCoeff(builder, postBallisticCoeff);
    Maneuver_Abridged.addPostRadiationPressCoeff(builder, postRadiationPressCoeff);
    Maneuver_Abridged.addPostVelZ(builder, postVelZ);
    Maneuver_Abridged.addPostVelY(builder, postVelY);
    Maneuver_Abridged.addPostVelX(builder, postVelX);
    Maneuver_Abridged.addPostPosZ(builder, postPosZ);
    Maneuver_Abridged.addPostPosY(builder, postPosY);
    Maneuver_Abridged.addPostPosX(builder, postPosX);
    Maneuver_Abridged.addPreSigmaW(builder, preSigmaW);
    Maneuver_Abridged.addPreSigmaV(builder, preSigmaV);
    Maneuver_Abridged.addPreSigmaU(builder, preSigmaU);
    Maneuver_Abridged.addPreDriftRate(builder, preDriftRate);
    Maneuver_Abridged.addPreGeoLongitude(builder, preGeoLongitude);
    Maneuver_Abridged.addPreSma(builder, preSma);
    Maneuver_Abridged.addPreRaan(builder, preRaan);
    Maneuver_Abridged.addPrePeriod(builder, prePeriod);
    Maneuver_Abridged.addPreEccentricity(builder, preEccentricity);
    Maneuver_Abridged.addPreInclination(builder, preInclination);
    Maneuver_Abridged.addPrePerigee(builder, prePerigee);
    Maneuver_Abridged.addPreApogee(builder, preApogee);
    Maneuver_Abridged.addPreBallisticCoeff(builder, preBallisticCoeff);
    Maneuver_Abridged.addPreRadiationPressCoeff(builder, preRadiationPressCoeff);
    Maneuver_Abridged.addPreVelZ(builder, preVelZ);
    Maneuver_Abridged.addPreVelY(builder, preVelY);
    Maneuver_Abridged.addPreVelX(builder, preVelX);
    Maneuver_Abridged.addPrePosZ(builder, prePosZ);
    Maneuver_Abridged.addPrePosY(builder, prePosY);
    Maneuver_Abridged.addPrePosX(builder, prePosX);
    Maneuver_Abridged.addDeltaMass(builder, deltaMass);
    Maneuver_Abridged.addDeltaVelW(builder, deltaVelW);
    Maneuver_Abridged.addDeltaVelV(builder, deltaVelV);
    Maneuver_Abridged.addDeltaVelU(builder, deltaVelU);
    Maneuver_Abridged.addDeltaVel(builder, deltaVel);
    Maneuver_Abridged.addDeltaPosW(builder, deltaPosW);
    Maneuver_Abridged.addDeltaPosV(builder, deltaPosV);
    Maneuver_Abridged.addDeltaPosU(builder, deltaPosU);
    Maneuver_Abridged.addDeltaPos(builder, deltaPos);
    Maneuver_Abridged.addCharacterizationUnc(builder, characterizationUnc);
    Maneuver_Abridged.addManeuverUnc(builder, maneuverUnc);
    Maneuver_Abridged.addTotalBurnTime(builder, totalBurnTime);
    Maneuver_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Maneuver_Abridged.addTransactionId(builder, transactionIdOffset);
    Maneuver_Abridged.addAlgorithm(builder, algorithmOffset);
    Maneuver_Abridged.addCreatedBy(builder, createdByOffset);
    Maneuver_Abridged.addCreatedAt(builder, createdAtOffset);
    Maneuver_Abridged.addOrigin(builder, originOffset);
    Maneuver_Abridged.addSource(builder, sourceOffset);
    Maneuver_Abridged.addMnvrAccelUncs(builder, mnvrAccelUncsOffset);
    Maneuver_Abridged.addMnvrAccels(builder, mnvrAccelsOffset);
    Maneuver_Abridged.addMnvrAccelTimes(builder, mnvrAccelTimesOffset);
    Maneuver_Abridged.addNumAccelPoints(builder, numAccelPoints);
    Maneuver_Abridged.addStateModel(builder, stateModelOffset);
    Maneuver_Abridged.addDescriptor(builder, descriptorOffset);
    Maneuver_Abridged.addDescription(builder, descriptionOffset);
    Maneuver_Abridged.addNumObs(builder, numObs);
    Maneuver_Abridged.addCov(builder, covOffset);
    Maneuver_Abridged.addPostEventStateVector(builder, postEventStateVectorOffset);
    Maneuver_Abridged.addPostEventIdStateVector(builder, postEventIdStateVectorOffset);
    Maneuver_Abridged.addPostEventElset(builder, postEventElsetOffset);
    Maneuver_Abridged.addPostEventIdElset(builder, postEventIdElsetOffset);
    Maneuver_Abridged.addPreEventStateVector(builder, preEventStateVectorOffset);
    Maneuver_Abridged.addPreEventIdStateVector(builder, preEventIdStateVectorOffset);
    Maneuver_Abridged.addPreEventElset(builder, preEventElsetOffset);
    Maneuver_Abridged.addPreEventIdElset(builder, preEventIdElsetOffset);
    Maneuver_Abridged.addStatus(builder, statusOffset);
    Maneuver_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    Maneuver_Abridged.addOrigObjectId(builder, origObjectIdOffset);
    Maneuver_Abridged.addEventId(builder, eventIdOffset);
    Maneuver_Abridged.addCharacterization(builder, characterizationOffset);
    Maneuver_Abridged.addIdSensor(builder, idSensorOffset);
    Maneuver_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    Maneuver_Abridged.addOdFitEndTime(builder, odFitEndTimeOffset);
    Maneuver_Abridged.addEventEndTime(builder, eventEndTimeOffset);
    Maneuver_Abridged.addEventStartTime(builder, eventStartTimeOffset);
    Maneuver_Abridged.addReportTime(builder, reportTimeOffset);
    Maneuver_Abridged.addSatNo(builder, satNo);
    Maneuver_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Maneuver_Abridged.addId(builder, idOffset);
    Maneuver_Abridged.addDataMode(builder, dataMode);
    Maneuver_Abridged.addUct(builder, uct);
    return Maneuver_Abridged.endManeuver_Abridged(builder);
  }

  public static void startManeuver_Abridged(FlatBufferBuilder builder) { builder.startTable(95); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(2, satNo, 0); }
  public static void addReportTime(FlatBufferBuilder builder, int reportTimeOffset) { builder.addOffset(3, reportTimeOffset, 0); }
  public static void addEventStartTime(FlatBufferBuilder builder, int eventStartTimeOffset) { builder.addOffset(4, eventStartTimeOffset, 0); }
  public static void addEventEndTime(FlatBufferBuilder builder, int eventEndTimeOffset) { builder.addOffset(5, eventEndTimeOffset, 0); }
  public static void addTotalBurnTime(FlatBufferBuilder builder, double totalBurnTime) { builder.addDouble(6, totalBurnTime, 0.0); }
  public static void addOdFitEndTime(FlatBufferBuilder builder, int odFitEndTimeOffset) { builder.addOffset(7, odFitEndTimeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(8, idOnOrbitOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(9, idSensorOffset, 0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(10, uct, false); }
  public static void addManeuverUnc(FlatBufferBuilder builder, double maneuverUnc) { builder.addDouble(11, maneuverUnc, 0.0); }
  public static void addCharacterization(FlatBufferBuilder builder, int characterizationOffset) { builder.addOffset(12, characterizationOffset, 0); }
  public static void addCharacterizationUnc(FlatBufferBuilder builder, double characterizationUnc) { builder.addDouble(13, characterizationUnc, 0.0); }
  public static void addEventId(FlatBufferBuilder builder, int eventIdOffset) { builder.addOffset(14, eventIdOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(15, origObjectIdOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(16, origSensorIdOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(17, statusOffset, 0); }
  public static void addDeltaPos(FlatBufferBuilder builder, double deltaPos) { builder.addDouble(18, deltaPos, 0.0); }
  public static void addDeltaPosU(FlatBufferBuilder builder, double deltaPosU) { builder.addDouble(19, deltaPosU, 0.0); }
  public static void addDeltaPosV(FlatBufferBuilder builder, double deltaPosV) { builder.addDouble(20, deltaPosV, 0.0); }
  public static void addDeltaPosW(FlatBufferBuilder builder, double deltaPosW) { builder.addDouble(21, deltaPosW, 0.0); }
  public static void addDeltaVel(FlatBufferBuilder builder, double deltaVel) { builder.addDouble(22, deltaVel, 0.0); }
  public static void addDeltaVelU(FlatBufferBuilder builder, double deltaVelU) { builder.addDouble(23, deltaVelU, 0.0); }
  public static void addDeltaVelV(FlatBufferBuilder builder, double deltaVelV) { builder.addDouble(24, deltaVelV, 0.0); }
  public static void addDeltaVelW(FlatBufferBuilder builder, double deltaVelW) { builder.addDouble(25, deltaVelW, 0.0); }
  public static void addDeltaMass(FlatBufferBuilder builder, double deltaMass) { builder.addDouble(26, deltaMass, 0.0); }
  public static void addPreEventIdElset(FlatBufferBuilder builder, int preEventIdElsetOffset) { builder.addOffset(27, preEventIdElsetOffset, 0); }
  public static void addPreEventElset(FlatBufferBuilder builder, int preEventElsetOffset) { builder.addOffset(28, preEventElsetOffset, 0); }
  public static void addPreEventIdStateVector(FlatBufferBuilder builder, int preEventIdStateVectorOffset) { builder.addOffset(29, preEventIdStateVectorOffset, 0); }
  public static void addPreEventStateVector(FlatBufferBuilder builder, int preEventStateVectorOffset) { builder.addOffset(30, preEventStateVectorOffset, 0); }
  public static void addPrePosX(FlatBufferBuilder builder, double prePosX) { builder.addDouble(31, prePosX, 0.0); }
  public static void addPrePosY(FlatBufferBuilder builder, double prePosY) { builder.addDouble(32, prePosY, 0.0); }
  public static void addPrePosZ(FlatBufferBuilder builder, double prePosZ) { builder.addDouble(33, prePosZ, 0.0); }
  public static void addPreVelX(FlatBufferBuilder builder, double preVelX) { builder.addDouble(34, preVelX, 0.0); }
  public static void addPreVelY(FlatBufferBuilder builder, double preVelY) { builder.addDouble(35, preVelY, 0.0); }
  public static void addPreVelZ(FlatBufferBuilder builder, double preVelZ) { builder.addDouble(36, preVelZ, 0.0); }
  public static void addPreRadiationPressCoeff(FlatBufferBuilder builder, double preRadiationPressCoeff) { builder.addDouble(37, preRadiationPressCoeff, 0.0); }
  public static void addPreBallisticCoeff(FlatBufferBuilder builder, double preBallisticCoeff) { builder.addDouble(38, preBallisticCoeff, 0.0); }
  public static void addPreApogee(FlatBufferBuilder builder, double preApogee) { builder.addDouble(39, preApogee, 0.0); }
  public static void addPrePerigee(FlatBufferBuilder builder, double prePerigee) { builder.addDouble(40, prePerigee, 0.0); }
  public static void addPreInclination(FlatBufferBuilder builder, double preInclination) { builder.addDouble(41, preInclination, 0.0); }
  public static void addPreEccentricity(FlatBufferBuilder builder, double preEccentricity) { builder.addDouble(42, preEccentricity, 0.0); }
  public static void addPrePeriod(FlatBufferBuilder builder, double prePeriod) { builder.addDouble(43, prePeriod, 0.0); }
  public static void addPreRaan(FlatBufferBuilder builder, double preRaan) { builder.addDouble(44, preRaan, 0.0); }
  public static void addPreSma(FlatBufferBuilder builder, double preSma) { builder.addDouble(45, preSma, 0.0); }
  public static void addPreGeoLongitude(FlatBufferBuilder builder, double preGeoLongitude) { builder.addDouble(46, preGeoLongitude, 0.0); }
  public static void addPreDriftRate(FlatBufferBuilder builder, double preDriftRate) { builder.addDouble(47, preDriftRate, 0.0); }
  public static void addPreSigmaU(FlatBufferBuilder builder, double preSigmaU) { builder.addDouble(48, preSigmaU, 0.0); }
  public static void addPreSigmaV(FlatBufferBuilder builder, double preSigmaV) { builder.addDouble(49, preSigmaV, 0.0); }
  public static void addPreSigmaW(FlatBufferBuilder builder, double preSigmaW) { builder.addDouble(50, preSigmaW, 0.0); }
  public static void addPostEventIdElset(FlatBufferBuilder builder, int postEventIdElsetOffset) { builder.addOffset(51, postEventIdElsetOffset, 0); }
  public static void addPostEventElset(FlatBufferBuilder builder, int postEventElsetOffset) { builder.addOffset(52, postEventElsetOffset, 0); }
  public static void addPostEventIdStateVector(FlatBufferBuilder builder, int postEventIdStateVectorOffset) { builder.addOffset(53, postEventIdStateVectorOffset, 0); }
  public static void addPostEventStateVector(FlatBufferBuilder builder, int postEventStateVectorOffset) { builder.addOffset(54, postEventStateVectorOffset, 0); }
  public static void addPostPosX(FlatBufferBuilder builder, double postPosX) { builder.addDouble(55, postPosX, 0.0); }
  public static void addPostPosY(FlatBufferBuilder builder, double postPosY) { builder.addDouble(56, postPosY, 0.0); }
  public static void addPostPosZ(FlatBufferBuilder builder, double postPosZ) { builder.addDouble(57, postPosZ, 0.0); }
  public static void addPostVelX(FlatBufferBuilder builder, double postVelX) { builder.addDouble(58, postVelX, 0.0); }
  public static void addPostVelY(FlatBufferBuilder builder, double postVelY) { builder.addDouble(59, postVelY, 0.0); }
  public static void addPostVelZ(FlatBufferBuilder builder, double postVelZ) { builder.addDouble(60, postVelZ, 0.0); }
  public static void addPostRadiationPressCoeff(FlatBufferBuilder builder, double postRadiationPressCoeff) { builder.addDouble(61, postRadiationPressCoeff, 0.0); }
  public static void addPostBallisticCoeff(FlatBufferBuilder builder, double postBallisticCoeff) { builder.addDouble(62, postBallisticCoeff, 0.0); }
  public static void addPostApogee(FlatBufferBuilder builder, double postApogee) { builder.addDouble(63, postApogee, 0.0); }
  public static void addPostPerigee(FlatBufferBuilder builder, double postPerigee) { builder.addDouble(64, postPerigee, 0.0); }
  public static void addPostInclination(FlatBufferBuilder builder, double postInclination) { builder.addDouble(65, postInclination, 0.0); }
  public static void addPostEccentricity(FlatBufferBuilder builder, double postEccentricity) { builder.addDouble(66, postEccentricity, 0.0); }
  public static void addPostPeriod(FlatBufferBuilder builder, double postPeriod) { builder.addDouble(67, postPeriod, 0.0); }
  public static void addPostRaan(FlatBufferBuilder builder, double postRaan) { builder.addDouble(68, postRaan, 0.0); }
  public static void addPostSma(FlatBufferBuilder builder, double postSma) { builder.addDouble(69, postSma, 0.0); }
  public static void addPostGeoLongitude(FlatBufferBuilder builder, double postGeoLongitude) { builder.addDouble(70, postGeoLongitude, 0.0); }
  public static void addPostDriftRate(FlatBufferBuilder builder, double postDriftRate) { builder.addDouble(71, postDriftRate, 0.0); }
  public static void addPostSigmaU(FlatBufferBuilder builder, double postSigmaU) { builder.addDouble(72, postSigmaU, 0.0); }
  public static void addPostSigmaV(FlatBufferBuilder builder, double postSigmaV) { builder.addDouble(73, postSigmaV, 0.0); }
  public static void addPostSigmaW(FlatBufferBuilder builder, double postSigmaW) { builder.addDouble(74, postSigmaW, 0.0); }
  public static void addCov(FlatBufferBuilder builder, int covOffset) { builder.addOffset(75, covOffset, 0); }
  public static int createCovVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCovVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPostMass(FlatBufferBuilder builder, double postMass) { builder.addDouble(76, postMass, 0.0); }
  public static void addPostArea(FlatBufferBuilder builder, double postArea) { builder.addDouble(77, postArea, 0.0); }
  public static void addNumObs(FlatBufferBuilder builder, int numObs) { builder.addInt(78, numObs, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(79, descriptionOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(80, descriptorOffset, 0); }
  public static void addStateModel(FlatBufferBuilder builder, int stateModelOffset) { builder.addOffset(81, stateModelOffset, 0); }
  public static void addStateModelVersion(FlatBufferBuilder builder, double stateModelVersion) { builder.addDouble(82, stateModelVersion, 0.0); }
  public static void addNumAccelPoints(FlatBufferBuilder builder, int numAccelPoints) { builder.addInt(83, numAccelPoints, 0); }
  public static void addMnvrAccelTimes(FlatBufferBuilder builder, int mnvrAccelTimesOffset) { builder.addOffset(84, mnvrAccelTimesOffset, 0); }
  public static int createMnvrAccelTimesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMnvrAccelTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMnvrAccels(FlatBufferBuilder builder, int mnvrAccelsOffset) { builder.addOffset(85, mnvrAccelsOffset, 0); }
  public static int createMnvrAccelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMnvrAccelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMnvrAccelUncs(FlatBufferBuilder builder, int mnvrAccelUncsOffset) { builder.addOffset(86, mnvrAccelUncsOffset, 0); }
  public static int createMnvrAccelUncsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMnvrAccelUncsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(87, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(88, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(89, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(90, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(91, createdByOffset, 0); }
  public static void addAlgorithm(FlatBufferBuilder builder, int algorithmOffset) { builder.addOffset(92, algorithmOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(93, transactionIdOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(94, origNetworkOffset, 0); }
  public static int endManeuver_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishManeuver_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MANE"); }
  public static void finishSizePrefixedManeuver_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MANE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Maneuver_Abridged get(int j) { return get(new Maneuver_Abridged(), j); }
    public Maneuver_Abridged get(Maneuver_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

