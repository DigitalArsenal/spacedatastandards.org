// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Provides information concerning search and rescue operations and other situations involving personnel recovery.
 */
@SuppressWarnings("unused")
public final class PersonnelRecovery_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PersonnelRecovery_Full getRootAsPersonnelRecovery_Full(ByteBuffer _bb) { return getRootAsPersonnelRecovery_Full(_bb, new PersonnelRecovery_Full()); }
  public static PersonnelRecovery_Full getRootAsPersonnelRecovery_Full(ByteBuffer _bb, PersonnelRecovery_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PersonnelRecovery_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "PERS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PersonnelRecovery_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: PERSONNEL_RECOVERY-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Specifies the type of incident resulting in a recovery or evacuation mission.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Emergency Type (e.g. NO STATEMENT, DOWN AIRCRAFT, MAN IN WATER, DITCHING, BAILOUT, DISTRESSED VEHICLE, GROUND INCIDENT, MEDICAL, ISOLATED PERSONS, etc.).
   * Example: /// Example: MEDICAL
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String type() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Time stamp of the original personnel recovery message, in ISO 8601 UTC format.
   * Example: /// Example: 2021-10-15T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String msgTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer msgTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * UUID identifying the Personnel Recovery  mission, which should remain the same on subsequent posts related to the same recovery mission.
   * Example: /// Example: RECOV-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String recovId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recovIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer recovIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of a weather report associated with this recovery.
   * Example: /// Example: WEATHER_REPORT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idWeatherReport() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idWeatherReportAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idWeatherReportInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 75.1234
   * Constraints: No constraints specified.
   */
  public double pickupLat() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 175.1234
   * Constraints: No constraints specified.
   */
  public double pickupLon() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point eight below ellipsoid.
   * Example: /// Example: 30.1234
   * Constraints: No constraints specified.
   */
  public double pickupAlt() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating the cancellation of this recovery.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean termInd() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The confirmation status of the isolated personnel identity. Intended as, but not constrained to, MIL-STD-6016 J6.1 Authentication Status, Isolated Personnel (NO STATEMENT, AUTHENTICATED, NOT AUTHENTICATED, AUTHENTICATED UNDER DURESS, NOT APPLICABLE):
   * AUTHENTICATED:  Confirmed Friend
   * NOT AUTHENTICATED: Unconfirmed status
   * AUTHENTICATED UNDER DURESS:  Authentication comprised by hostiles.
   * NOT APPLICABLE:  Authentication not required.
   * Example: /// Example: NO STATEMENT
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String authStatus() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer authStatusAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer authStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The count of persons requiring recovery.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numPersons() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The military classification of the personnel to be recovered. Intended as, but not constrained to, MIL-STD-6016 J6.1 Isolated Personnel Classification (NO STATEMENT, MILITARY, GOVERNMENT CIVILIAN, GOVERNMENT CONTRACTOR, CIVILIAN, MULTIPLE CLASSIFICATIONS).
   * Example: /// Example: CIVILIAN
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String milClass() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer milClassAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer milClassInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The country of origin or political entity of an isolated person subject to rescue or evacuation. If natAlliance is set to 126, then natAlliance1 must be non 0. If natAlliance is any number other than 126, then natAlliance1 will be set to 0 regardless. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s).
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int natAlliance() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Extended country of origin or political entity of an isolated person subject to rescue or evacuation. Specify an entry here only if natAlliance is 126. Defined in MIL-STD-6016 J6.1 Nationality/Alliance isolated person(s), 1.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int natAlliance1() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The survivor service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVIILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
   * Example: /// Example: NEUTRAL CIVILIAN
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String identity() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer identityAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer identityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
   * Example: /// Example: LL PHONE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String commEq1() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commEq1AsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer commEq1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
   * Example: /// Example: LL PHONE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String commEq2() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commEq2AsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer commEq2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Survivor communications equipment.  Intended as, but not constrained to, MIL-STD-6016 J6.1 Communications Equipment, Isolated Personnel (NO STATEMENT, SURVIVAL RADIO, RADIO BEACON, EPLRS, SIGNAL MIRROR, SMOKE FLARE, IR SIGNALLING DEVICE, SIGNALLING PANEL, FRIENDLY FORCE TRACKER, GPS BEACON, LL PHONE, TACTICAL RADIO LOS, TACTICAL RADIO BLOS).
   * Example: /// Example: LL PHONE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String commEq3() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commEq3AsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer commEq3InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Transmit voice frequency in 5Hz increments.
   * Example: /// Example: 5.5
   * Constraints: No constraints specified.
   */
  public double txFreq() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Receive voice frequency in 5Hz increments. This field will auto populate with the txFreq value if the post element is null.
   * Example: /// Example: 5.5
   * Constraints: No constraints specified.
   */
  public double rxFreq() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of littered personnel requiring recovery.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int numNonAmbulatory() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of ambulatory personnel requiring recovery.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numAmbulatory() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of injured, but ambulatory, personnel requiring recovery.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int numAmbulatoryInjured() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Survivor radio equipment. Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Type (NO STATEMENT, PRQ7SEL, PRC90, PRC112, PRC112B B1, PRC112C, PRC112D, PRC148 MBITR, PRC148 JEM, PRC149, PRC152, ACRPLB, OTHER).
   * Example: /// Example: NO STATEMENT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String survivorRadio() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer survivorRadioAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer survivorRadioInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Preloaded message conveying the situation confronting the isolated person(s). Intended as, but not constrained to, MIL-STD-6016 J6.1 Survivor Radio Messages (e.g. INJURED CANT MOVE NO KNOWN HOSTILES, INJURED CANT MOVE HOSTILES NEARBY, UNINJURED CANT MOVE HOSTILES NEARBY, UNINJURED NO KNOWN HOSTILES, INJURED LIMITED MOBILITY).
   * Example: /// Example: UNINJURED CANT MOVE HOSTILES NEARBY
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String survivorMessages() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer survivorMessagesAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer survivorMessagesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Flag indicating whether a radio identifier is reported.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean beaconInd() { int o = __offset(56); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The call sign of the personnel to be recovered.
   * Example: /// Example: BADGER
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String callSign() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Additional specific messages received from survivor.
   * Example: /// Example: Additional message from survivor.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String textMsg() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textMsgAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer textMsgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Mechanism used to verify the survivors identity.
   * Example: /// Example: PASSPORT
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String authMethod() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer authMethodAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer authMethodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String objectiveAreaInfo() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer objectiveAreaInfoAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer objectiveAreaInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String executionInfo() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer executionInfoAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer executionInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(78); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createPersonnelRecovery_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int typeOffset,
      int msgTimeOffset,
      int recovIdOffset,
      int idWeatherReportOffset,
      double pickupLat,
      double pickupLon,
      double pickupAlt,
      boolean termInd,
      int authStatusOffset,
      int numPersons,
      int milClassOffset,
      int natAlliance,
      int natAlliance1,
      int identityOffset,
      int commEq1Offset,
      int commEq2Offset,
      int commEq3Offset,
      double txFreq,
      double rxFreq,
      int numNonAmbulatory,
      int numAmbulatory,
      int numAmbulatoryInjured,
      int survivorRadioOffset,
      int survivorMessagesOffset,
      boolean beaconInd,
      int callSignOffset,
      int textMsgOffset,
      int authMethodOffset,
      int objectiveAreaInfoOffset,
      int executionInfoOffset,
      int origNetworkOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode) {
    builder.startTable(38);
    PersonnelRecovery_Full.addRxFreq(builder, rxFreq);
    PersonnelRecovery_Full.addTxFreq(builder, txFreq);
    PersonnelRecovery_Full.addPickupAlt(builder, pickupAlt);
    PersonnelRecovery_Full.addPickupLon(builder, pickupLon);
    PersonnelRecovery_Full.addPickupLat(builder, pickupLat);
    PersonnelRecovery_Full.addOrigin(builder, originOffset);
    PersonnelRecovery_Full.addSource(builder, sourceOffset);
    PersonnelRecovery_Full.addCreatedBy(builder, createdByOffset);
    PersonnelRecovery_Full.addCreatedAt(builder, createdAtOffset);
    PersonnelRecovery_Full.addOrigNetwork(builder, origNetworkOffset);
    PersonnelRecovery_Full.addExecutionInfo(builder, executionInfoOffset);
    PersonnelRecovery_Full.addObjectiveAreaInfo(builder, objectiveAreaInfoOffset);
    PersonnelRecovery_Full.addAuthMethod(builder, authMethodOffset);
    PersonnelRecovery_Full.addTextMsg(builder, textMsgOffset);
    PersonnelRecovery_Full.addCallSign(builder, callSignOffset);
    PersonnelRecovery_Full.addSurvivorMessages(builder, survivorMessagesOffset);
    PersonnelRecovery_Full.addSurvivorRadio(builder, survivorRadioOffset);
    PersonnelRecovery_Full.addNumAmbulatoryInjured(builder, numAmbulatoryInjured);
    PersonnelRecovery_Full.addNumAmbulatory(builder, numAmbulatory);
    PersonnelRecovery_Full.addNumNonAmbulatory(builder, numNonAmbulatory);
    PersonnelRecovery_Full.addCommEq3(builder, commEq3Offset);
    PersonnelRecovery_Full.addCommEq2(builder, commEq2Offset);
    PersonnelRecovery_Full.addCommEq1(builder, commEq1Offset);
    PersonnelRecovery_Full.addIdentity(builder, identityOffset);
    PersonnelRecovery_Full.addNatAlliance1(builder, natAlliance1);
    PersonnelRecovery_Full.addNatAlliance(builder, natAlliance);
    PersonnelRecovery_Full.addMilClass(builder, milClassOffset);
    PersonnelRecovery_Full.addNumPersons(builder, numPersons);
    PersonnelRecovery_Full.addAuthStatus(builder, authStatusOffset);
    PersonnelRecovery_Full.addIdWeatherReport(builder, idWeatherReportOffset);
    PersonnelRecovery_Full.addRecovId(builder, recovIdOffset);
    PersonnelRecovery_Full.addMsgTime(builder, msgTimeOffset);
    PersonnelRecovery_Full.addType(builder, typeOffset);
    PersonnelRecovery_Full.addClassificationMarking(builder, classificationMarkingOffset);
    PersonnelRecovery_Full.addId(builder, idOffset);
    PersonnelRecovery_Full.addDataMode(builder, dataMode);
    PersonnelRecovery_Full.addBeaconInd(builder, beaconInd);
    PersonnelRecovery_Full.addTermInd(builder, termInd);
    return PersonnelRecovery_Full.endPersonnelRecovery_Full(builder);
  }

  public static void startPersonnelRecovery_Full(FlatBufferBuilder builder) { builder.startTable(38); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(2, typeOffset, 0); }
  public static void addMsgTime(FlatBufferBuilder builder, int msgTimeOffset) { builder.addOffset(3, msgTimeOffset, 0); }
  public static void addRecovId(FlatBufferBuilder builder, int recovIdOffset) { builder.addOffset(4, recovIdOffset, 0); }
  public static void addIdWeatherReport(FlatBufferBuilder builder, int idWeatherReportOffset) { builder.addOffset(5, idWeatherReportOffset, 0); }
  public static void addPickupLat(FlatBufferBuilder builder, double pickupLat) { builder.addDouble(6, pickupLat, 0.0); }
  public static void addPickupLon(FlatBufferBuilder builder, double pickupLon) { builder.addDouble(7, pickupLon, 0.0); }
  public static void addPickupAlt(FlatBufferBuilder builder, double pickupAlt) { builder.addDouble(8, pickupAlt, 0.0); }
  public static void addTermInd(FlatBufferBuilder builder, boolean termInd) { builder.addBoolean(9, termInd, false); }
  public static void addAuthStatus(FlatBufferBuilder builder, int authStatusOffset) { builder.addOffset(10, authStatusOffset, 0); }
  public static void addNumPersons(FlatBufferBuilder builder, int numPersons) { builder.addInt(11, numPersons, 0); }
  public static void addMilClass(FlatBufferBuilder builder, int milClassOffset) { builder.addOffset(12, milClassOffset, 0); }
  public static void addNatAlliance(FlatBufferBuilder builder, int natAlliance) { builder.addInt(13, natAlliance, 0); }
  public static void addNatAlliance1(FlatBufferBuilder builder, int natAlliance1) { builder.addInt(14, natAlliance1, 0); }
  public static void addIdentity(FlatBufferBuilder builder, int identityOffset) { builder.addOffset(15, identityOffset, 0); }
  public static void addCommEq1(FlatBufferBuilder builder, int commEq1Offset) { builder.addOffset(16, commEq1Offset, 0); }
  public static void addCommEq2(FlatBufferBuilder builder, int commEq2Offset) { builder.addOffset(17, commEq2Offset, 0); }
  public static void addCommEq3(FlatBufferBuilder builder, int commEq3Offset) { builder.addOffset(18, commEq3Offset, 0); }
  public static void addTxFreq(FlatBufferBuilder builder, double txFreq) { builder.addDouble(19, txFreq, 0.0); }
  public static void addRxFreq(FlatBufferBuilder builder, double rxFreq) { builder.addDouble(20, rxFreq, 0.0); }
  public static void addNumNonAmbulatory(FlatBufferBuilder builder, int numNonAmbulatory) { builder.addInt(21, numNonAmbulatory, 0); }
  public static void addNumAmbulatory(FlatBufferBuilder builder, int numAmbulatory) { builder.addInt(22, numAmbulatory, 0); }
  public static void addNumAmbulatoryInjured(FlatBufferBuilder builder, int numAmbulatoryInjured) { builder.addInt(23, numAmbulatoryInjured, 0); }
  public static void addSurvivorRadio(FlatBufferBuilder builder, int survivorRadioOffset) { builder.addOffset(24, survivorRadioOffset, 0); }
  public static void addSurvivorMessages(FlatBufferBuilder builder, int survivorMessagesOffset) { builder.addOffset(25, survivorMessagesOffset, 0); }
  public static void addBeaconInd(FlatBufferBuilder builder, boolean beaconInd) { builder.addBoolean(26, beaconInd, false); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(27, callSignOffset, 0); }
  public static void addTextMsg(FlatBufferBuilder builder, int textMsgOffset) { builder.addOffset(28, textMsgOffset, 0); }
  public static void addAuthMethod(FlatBufferBuilder builder, int authMethodOffset) { builder.addOffset(29, authMethodOffset, 0); }
  public static void addObjectiveAreaInfo(FlatBufferBuilder builder, int objectiveAreaInfoOffset) { builder.addOffset(30, objectiveAreaInfoOffset, 0); }
  public static void addExecutionInfo(FlatBufferBuilder builder, int executionInfoOffset) { builder.addOffset(31, executionInfoOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(32, origNetworkOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(33, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(34, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(35, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(36, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(37, dataMode, 0); }
  public static int endPersonnelRecovery_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPersonnelRecovery_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "PERS"); }
  public static void finishSizePrefixedPersonnelRecovery_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "PERS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PersonnelRecovery_Full get(int j) { return get(new PersonnelRecovery_Full(), j); }
    public PersonnelRecovery_Full get(PersonnelRecovery_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

