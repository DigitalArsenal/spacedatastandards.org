// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
 */
@SuppressWarnings("unused")
public final class GNSSRawIF_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static GNSSRawIF_Ingest getRootAsGNSSRawIF_Ingest(ByteBuffer _bb) { return getRootAsGNSSRawIF_Ingest(_bb, new GNSSRawIF_Ingest()); }
  public static GNSSRawIF_Ingest getRootAsGNSSRawIF_Ingest(ByteBuffer _bb, GNSSRawIF_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean GNSSRawIF_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "GNSS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GNSSRawIF_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: GNSSRawIF-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the primary satellite on-orbit object.
   * Example: /// Example: 32375
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 32375
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: L2045
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
   * Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String esId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer esIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer esIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
   * Example: /// Example: GPS1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String receiver() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer receiverInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
   * Example: /// Example: [0, 1, 0]
   * Constraints: No constraints specified.
   */
  public String boresight(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int boresightLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector boresightVector() { return boresightVector(new StringVector()); }
  public StringVector boresightVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
   * Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
   * Constraints: No constraints specified.
   */
  public String quat(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int quatLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector quatVector() { return quatVector(new StringVector()); }
  public StringVector quatVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int startIndex() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2022-04-09T18:11:28.919768Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2022-04-09T18:12:28.919768Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 38.834
   * Constraints: No constraints specified.
   */
  public double startLat() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -104.821
   * Constraints: No constraints specified.
   */
  public double startLon() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
   * Example: /// Example: 525.664
   * Constraints: No constraints specified.
   */
  public double startAlt() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 38.922
   * Constraints: No constraints specified.
   */
  public double endLat() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -104.67
   * Constraints: No constraints specified.
   */
  public double endLon() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
   * Example: /// Example: 525.626
   * Constraints: No constraints specified.
   */
  public double endAlt() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
   * Example: /// Example: [1227.6, 1575.4]
   * Constraints: No constraints specified.
   */
  public String centerFreq(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int centerFreqLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector centerFreqVector() { return centerFreqVector(new StringVector()); }
  public StringVector centerFreqVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
   * Example: /// Example: [4.09, 5.87]
   * Constraints: No constraints specified.
   */
  public String ifFreq(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ifFreqLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ifFreqVector() { return ifFreqVector(new StringVector()); }
  public StringVector ifFreqVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The number of samples taken per second.
   * Example: /// Example: [8000, 9000]
   * Constraints: No constraints specified.
   */
  public String sampleRate(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sampleRateLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sampleRateVector() { return sampleRateVector(new StringVector()); }
  public StringVector sampleRateVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
   * Example: /// Example: ['NONE', 'NONE']
   * Constraints: No constraints specified.
   */
  public String postFourier(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int postFourierLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector postFourierVector() { return postFourierVector(new StringVector()); }
  public StringVector postFourierVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
   * Example: /// Example: COMPLEX
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String sampleType() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sampleTypeAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer sampleTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
   * Example: /// Example: 8
   * Constraints: No constraints specified.
   */
  public int bitDepth() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
   * Example: /// Example: [0.0271, 0.0016]
   * Constraints: No constraints specified.
   */
  public String diffCodeBias(int j) { int o = __offset(52); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int diffCodeBiasLength() { int o = __offset(52); return o != 0 ? __vector_len(o) : 0; }
  public StringVector diffCodeBiasVector() { return diffCodeBiasVector(new StringVector()); }
  public StringVector diffCodeBiasVector(StringVector obj) { int o = __offset(52); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The amount of data generated per unit time, expressed in Megabytes/minute.
   * Example: /// Example: 0.205
   * Constraints: No constraints specified.
   */
  public double dataRate() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
   * Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
   * Constraints: No constraints specified.
   */
  public String setId() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer setIdAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer setIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The number of raw IF records/files in a set.
   * Example: /// Example: 7
   * Constraints: No constraints specified.
   */
  public int setLength() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int sequenceId() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
   * Example: /// Example: somefile.hdf5
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String fileName() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileNameAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer fileNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['GNSSSET']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
   * Example: /// Example: ['GNSSSET_ID']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(66); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(66); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(66); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
   * Example: /// Example: 3168895
   * Constraints: No constraints specified.
   */
  public long fileSize() { int o = __offset(68); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(80); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }

  public static int createGNSSRawIF_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int esIdOffset,
      int receiverOffset,
      int boresightOffset,
      int quatOffset,
      int startIndex,
      int startTimeOffset,
      int endTimeOffset,
      double startLat,
      double startLon,
      double startAlt,
      double endLat,
      double endLon,
      double endAlt,
      int centerFreqOffset,
      int ifFreqOffset,
      int sampleRateOffset,
      int postFourierOffset,
      int sampleTypeOffset,
      int bitDepth,
      int diffCodeBiasOffset,
      double dataRate,
      int setIdOffset,
      int setLength,
      int sequenceId,
      int fileNameOffset,
      int srcTypsOffset,
      int srcIdsOffset,
      long fileSize,
      int tagsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(40);
    GNSSRawIF_Ingest.addFileSize(builder, fileSize);
    GNSSRawIF_Ingest.addDataRate(builder, dataRate);
    GNSSRawIF_Ingest.addEndAlt(builder, endAlt);
    GNSSRawIF_Ingest.addEndLon(builder, endLon);
    GNSSRawIF_Ingest.addEndLat(builder, endLat);
    GNSSRawIF_Ingest.addStartAlt(builder, startAlt);
    GNSSRawIF_Ingest.addStartLon(builder, startLon);
    GNSSRawIF_Ingest.addStartLat(builder, startLat);
    GNSSRawIF_Ingest.addOrigNetwork(builder, origNetworkOffset);
    GNSSRawIF_Ingest.addOrigin(builder, originOffset);
    GNSSRawIF_Ingest.addSource(builder, sourceOffset);
    GNSSRawIF_Ingest.addCreatedBy(builder, createdByOffset);
    GNSSRawIF_Ingest.addCreatedAt(builder, createdAtOffset);
    GNSSRawIF_Ingest.addTags(builder, tagsOffset);
    GNSSRawIF_Ingest.addSrcIds(builder, srcIdsOffset);
    GNSSRawIF_Ingest.addSrcTyps(builder, srcTypsOffset);
    GNSSRawIF_Ingest.addFileName(builder, fileNameOffset);
    GNSSRawIF_Ingest.addSequenceId(builder, sequenceId);
    GNSSRawIF_Ingest.addSetLength(builder, setLength);
    GNSSRawIF_Ingest.addSetId(builder, setIdOffset);
    GNSSRawIF_Ingest.addDiffCodeBias(builder, diffCodeBiasOffset);
    GNSSRawIF_Ingest.addBitDepth(builder, bitDepth);
    GNSSRawIF_Ingest.addSampleType(builder, sampleTypeOffset);
    GNSSRawIF_Ingest.addPostFourier(builder, postFourierOffset);
    GNSSRawIF_Ingest.addSampleRate(builder, sampleRateOffset);
    GNSSRawIF_Ingest.addIfFreq(builder, ifFreqOffset);
    GNSSRawIF_Ingest.addCenterFreq(builder, centerFreqOffset);
    GNSSRawIF_Ingest.addEndTime(builder, endTimeOffset);
    GNSSRawIF_Ingest.addStartTime(builder, startTimeOffset);
    GNSSRawIF_Ingest.addStartIndex(builder, startIndex);
    GNSSRawIF_Ingest.addQuat(builder, quatOffset);
    GNSSRawIF_Ingest.addBoresight(builder, boresightOffset);
    GNSSRawIF_Ingest.addReceiver(builder, receiverOffset);
    GNSSRawIF_Ingest.addEsId(builder, esIdOffset);
    GNSSRawIF_Ingest.addOrigObjectId(builder, origObjectIdOffset);
    GNSSRawIF_Ingest.addSatNo(builder, satNo);
    GNSSRawIF_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    GNSSRawIF_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    GNSSRawIF_Ingest.addId(builder, idOffset);
    GNSSRawIF_Ingest.addDataMode(builder, dataMode);
    return GNSSRawIF_Ingest.endGNSSRawIF_Ingest(builder);
  }

  public static void startGNSSRawIF_Ingest(FlatBufferBuilder builder) { builder.startTable(40); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(3, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(4, origObjectIdOffset, 0); }
  public static void addEsId(FlatBufferBuilder builder, int esIdOffset) { builder.addOffset(5, esIdOffset, 0); }
  public static void addReceiver(FlatBufferBuilder builder, int receiverOffset) { builder.addOffset(6, receiverOffset, 0); }
  public static void addBoresight(FlatBufferBuilder builder, int boresightOffset) { builder.addOffset(7, boresightOffset, 0); }
  public static int createBoresightVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBoresightVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addQuat(FlatBufferBuilder builder, int quatOffset) { builder.addOffset(8, quatOffset, 0); }
  public static int createQuatVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startQuatVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStartIndex(FlatBufferBuilder builder, int startIndex) { builder.addInt(9, startIndex, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(10, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(11, endTimeOffset, 0); }
  public static void addStartLat(FlatBufferBuilder builder, double startLat) { builder.addDouble(12, startLat, 0.0); }
  public static void addStartLon(FlatBufferBuilder builder, double startLon) { builder.addDouble(13, startLon, 0.0); }
  public static void addStartAlt(FlatBufferBuilder builder, double startAlt) { builder.addDouble(14, startAlt, 0.0); }
  public static void addEndLat(FlatBufferBuilder builder, double endLat) { builder.addDouble(15, endLat, 0.0); }
  public static void addEndLon(FlatBufferBuilder builder, double endLon) { builder.addDouble(16, endLon, 0.0); }
  public static void addEndAlt(FlatBufferBuilder builder, double endAlt) { builder.addDouble(17, endAlt, 0.0); }
  public static void addCenterFreq(FlatBufferBuilder builder, int centerFreqOffset) { builder.addOffset(18, centerFreqOffset, 0); }
  public static int createCenterFreqVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCenterFreqVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIfFreq(FlatBufferBuilder builder, int ifFreqOffset) { builder.addOffset(19, ifFreqOffset, 0); }
  public static int createIfFreqVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIfFreqVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSampleRate(FlatBufferBuilder builder, int sampleRateOffset) { builder.addOffset(20, sampleRateOffset, 0); }
  public static int createSampleRateVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSampleRateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPostFourier(FlatBufferBuilder builder, int postFourierOffset) { builder.addOffset(21, postFourierOffset, 0); }
  public static int createPostFourierVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPostFourierVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSampleType(FlatBufferBuilder builder, int sampleTypeOffset) { builder.addOffset(22, sampleTypeOffset, 0); }
  public static void addBitDepth(FlatBufferBuilder builder, int bitDepth) { builder.addInt(23, bitDepth, 0); }
  public static void addDiffCodeBias(FlatBufferBuilder builder, int diffCodeBiasOffset) { builder.addOffset(24, diffCodeBiasOffset, 0); }
  public static int createDiffCodeBiasVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDiffCodeBiasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDataRate(FlatBufferBuilder builder, double dataRate) { builder.addDouble(25, dataRate, 0.0); }
  public static void addSetId(FlatBufferBuilder builder, int setIdOffset) { builder.addOffset(26, setIdOffset, 0); }
  public static void addSetLength(FlatBufferBuilder builder, int setLength) { builder.addInt(27, setLength, 0); }
  public static void addSequenceId(FlatBufferBuilder builder, int sequenceId) { builder.addInt(28, sequenceId, 0); }
  public static void addFileName(FlatBufferBuilder builder, int fileNameOffset) { builder.addOffset(29, fileNameOffset, 0); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(30, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(31, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFileSize(FlatBufferBuilder builder, long fileSize) { builder.addLong(32, fileSize, 0L); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(33, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(34, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(35, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(36, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(37, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(38, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(39, origNetworkOffset, 0); }
  public static int endGNSSRawIF_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishGNSSRawIF_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "GNSS"); }
  public static void finishSizePrefixedGNSSRawIF_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "GNSS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GNSSRawIF_Ingest get(int j) { return get(new GNSSRawIF_Ingest(), j); }
    public GNSSRawIF_Ingest get(GNSSRawIF_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

