// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// No description available.
 */
@SuppressWarnings("unused")
public final class ItemTracking_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ItemTracking_Ingest getRootAsItemTracking_Ingest(ByteBuffer _bb) { return getRootAsItemTracking_Ingest(_bb, new ItemTracking_Ingest()); }
  public static ItemTracking_Ingest getRootAsItemTracking_Ingest(ByteBuffer _bb, ItemTracking_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ItemTracking_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ITEM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ItemTracking_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
   * Example: /// Example: ABC1234
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String scanCode() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scanCodeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer scanCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
   * Example: /// Example: bID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String scGenTool() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scGenToolAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer scGenToolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The ID of the scanner or input device.
   * Example: /// Example: 2051M
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String scannerId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scannerIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer scannerIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-03-21T14:22:00.123Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The UDL ID of the item this record is associated with.
   * Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idItem() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idItemAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idItemInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
   * Example: /// Example: CARGO
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String type() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * WGS84 latitude where the item was scanned, in degrees.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude where the item was scanned, in degrees.
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
   * Example: /// Example: TRANSIT
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String scanType() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scanTypeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer scanTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The United States distinguished visitor code of the person scanned, only applicable to people.
   * Example: /// Example: DV-4
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String dvCode() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dvCodeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer dvCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Optional notes or comments about the tracking data.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Array of keys that may be associated with this tracked item.
   * Example: /// Example: ['tapeColor', 'hazmat']
   * Constraints: No constraints specified.
   */
  public String keys(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int keysLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector keysVector() { return keysVector(new StringVector()); }
  public StringVector keysVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
   * Example: /// Example: ['yellow', 'false']
   * Constraints: No constraints specified.
   */
  public String values(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int valuesLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector valuesVector() { return valuesVector(new StringVector()); }
  public StringVector valuesVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2023-03-21T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createItemTracking_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int scanCodeOffset,
      int scGenToolOffset,
      int scannerIdOffset,
      int tsOffset,
      int idItemOffset,
      int typeOffset,
      double lat,
      double lon,
      int scanTypeOffset,
      int dvCodeOffset,
      int notesOffset,
      int keysOffset,
      int valuesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(22);
    ItemTracking_Ingest.addLon(builder, lon);
    ItemTracking_Ingest.addLat(builder, lat);
    ItemTracking_Ingest.addOrigNetwork(builder, origNetworkOffset);
    ItemTracking_Ingest.addOrigin(builder, originOffset);
    ItemTracking_Ingest.addSource(builder, sourceOffset);
    ItemTracking_Ingest.addSourceDl(builder, sourceDlOffset);
    ItemTracking_Ingest.addCreatedBy(builder, createdByOffset);
    ItemTracking_Ingest.addCreatedAt(builder, createdAtOffset);
    ItemTracking_Ingest.addValues(builder, valuesOffset);
    ItemTracking_Ingest.addKeys(builder, keysOffset);
    ItemTracking_Ingest.addNotes(builder, notesOffset);
    ItemTracking_Ingest.addDvCode(builder, dvCodeOffset);
    ItemTracking_Ingest.addScanType(builder, scanTypeOffset);
    ItemTracking_Ingest.addType(builder, typeOffset);
    ItemTracking_Ingest.addIdItem(builder, idItemOffset);
    ItemTracking_Ingest.addTs(builder, tsOffset);
    ItemTracking_Ingest.addScannerId(builder, scannerIdOffset);
    ItemTracking_Ingest.addScGenTool(builder, scGenToolOffset);
    ItemTracking_Ingest.addScanCode(builder, scanCodeOffset);
    ItemTracking_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    ItemTracking_Ingest.addId(builder, idOffset);
    ItemTracking_Ingest.addDataMode(builder, dataMode);
    return ItemTracking_Ingest.endItemTracking_Ingest(builder);
  }

  public static void startItemTracking_Ingest(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addScanCode(FlatBufferBuilder builder, int scanCodeOffset) { builder.addOffset(2, scanCodeOffset, 0); }
  public static void addScGenTool(FlatBufferBuilder builder, int scGenToolOffset) { builder.addOffset(3, scGenToolOffset, 0); }
  public static void addScannerId(FlatBufferBuilder builder, int scannerIdOffset) { builder.addOffset(4, scannerIdOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(5, tsOffset, 0); }
  public static void addIdItem(FlatBufferBuilder builder, int idItemOffset) { builder.addOffset(6, idItemOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(7, typeOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(8, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(9, lon, 0.0); }
  public static void addScanType(FlatBufferBuilder builder, int scanTypeOffset) { builder.addOffset(10, scanTypeOffset, 0); }
  public static void addDvCode(FlatBufferBuilder builder, int dvCodeOffset) { builder.addOffset(11, dvCodeOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(12, notesOffset, 0); }
  public static void addKeys(FlatBufferBuilder builder, int keysOffset) { builder.addOffset(13, keysOffset, 0); }
  public static int createKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(14, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(15, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(16, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(17, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(18, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(19, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(20, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(21, dataMode, 0); }
  public static int endItemTracking_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishItemTracking_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ITEM"); }
  public static void finishSizePrefixedItemTracking_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ITEM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ItemTracking_Ingest get(int j) { return get(new ItemTracking_Ingest(), j); }
    public ItemTracking_Ingest get(ItemTracking_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

