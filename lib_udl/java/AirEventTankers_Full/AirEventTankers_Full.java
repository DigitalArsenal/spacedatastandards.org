// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of tanker aircraft associated with this Air Event.
 */
@SuppressWarnings("unused")
public final class AirEventTankers_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirEventTankers_Full getRootAsAirEventTankers_Full(ByteBuffer _bb) { return getRootAsAirEventTankers_Full(_bb, new AirEventTankers_Full()); }
  public static AirEventTankers_Full getRootAsAirEventTankers_Full(ByteBuffer _bb, AirEventTankers_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirEventTankers_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirEventTankers_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The UDL ID of the aircraft sortie this tanker is associated with for this event.
   * Example: /// Example: d833a4bc-756b-41d5-8845-f146fe563387
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idTankerSortie() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idTankerSortieAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idTankerSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The UDL ID of the mission this tanker is associated with for this event.
   * Example: /// Example: edef700c-9917-4dbf-a153-89ffd4446fe9
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idTankerMission() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idTankerMissionAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idTankerMissionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The UDL ID of the airfield this tanker is associated with for this event.
   * Example: /// Example: b33955d2-67d3-42be-8316-263e284ce6cc
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idTankerAirfield() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idTankerAirfieldAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idTankerAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional tanker identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: ca673c580fb949a5b733f0e0b67ffab2
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalTankerId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalTankerIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer externalTankerIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Coordination record identifier of this tanker.
   * Example: /// Example: TTC601
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String tankerCoord() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerCoordAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer tankerCoordInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The Model Design Series designation of this tanker.
   * Example: /// Example: KC135R
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String tankerMds() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerMdsAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer tankerMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The Air Mobility Command (AMC) mission identifier of this tanker.
   * Example: /// Example: 8PH000B1S052
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String amcTankerMissionId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amcTankerMissionIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer amcTankerMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Alternate mission identifier of this tanker provided by source.
   * Example: /// Example: 1UN05201L121
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String altTankerMissionId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altTankerMissionIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer altTankerMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The call sign assigned to this tanker.
   * Example: /// Example: BAKER
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String tankerCallSign() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerCallSignAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer tankerCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The wing or unit that owns this tanker.
   * Example: /// Example: 117ARW
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String tankerOwner() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerOwnerAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer tankerOwnerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The name and/or number of the point of contact for this tanker.
   * Example: /// Example: JOHN SMITH (555)555-5555
   * Constraints: Minimum length = 0, Maximum length = 68
   */
  public String tankerPoc() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerPocAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer tankerPocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Identifies the itinerary point of a mission that this tanker is linked to.
   * Example: /// Example: 825
   * Constraints: No constraints specified.
   */
  public int tankerLegNum() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Location the tanker has been deployed to in preparation for an air refueling event.
   * Example: /// Example: KOFF
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String tankerDeployedIcao() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerDeployedIcaoAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer tankerDeployedIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Type of fuel delivery method used by the tanker during an air refueling event (BOOM, DROGUE, BOTH).
   * Example: /// Example: DROGUE
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String tankerDeliveryMethod() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerDeliveryMethodAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer tankerDeliveryMethodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Total weight of the fuel transferred from this tanker during an air refueling event, in pounds.
   * Example: /// Example: 15000000.1
   * Constraints: No constraints specified.
   */
  public double fuelOff() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Position of this tanker within a group of tankers in an air refueling event.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int tankerCellPosition() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Type of fuel being transferred from the tanker in an air refueling event.
   * Example: /// Example: JP8
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String tankerFuelType() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankerFuelTypeAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer tankerFuelTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Flag indicating that this tanker is flying a dual role mission in an air refueling event.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean dualRole() { int o = __offset(38); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createAirEventTankers_Full(FlatBufferBuilder builder,
      int idTankerSortieOffset,
      int idTankerMissionOffset,
      int idTankerAirfieldOffset,
      int externalTankerIdOffset,
      int tankerCoordOffset,
      int tankerMdsOffset,
      int amcTankerMissionIdOffset,
      int altTankerMissionIdOffset,
      int tankerCallSignOffset,
      int tankerOwnerOffset,
      int tankerPocOffset,
      int tankerLegNum,
      int tankerDeployedIcaoOffset,
      int tankerDeliveryMethodOffset,
      double fuelOff,
      int tankerCellPosition,
      int tankerFuelTypeOffset,
      boolean dualRole) {
    builder.startTable(18);
    AirEventTankers_Full.addFuelOff(builder, fuelOff);
    AirEventTankers_Full.addTankerFuelType(builder, tankerFuelTypeOffset);
    AirEventTankers_Full.addTankerCellPosition(builder, tankerCellPosition);
    AirEventTankers_Full.addTankerDeliveryMethod(builder, tankerDeliveryMethodOffset);
    AirEventTankers_Full.addTankerDeployedIcao(builder, tankerDeployedIcaoOffset);
    AirEventTankers_Full.addTankerLegNum(builder, tankerLegNum);
    AirEventTankers_Full.addTankerPoc(builder, tankerPocOffset);
    AirEventTankers_Full.addTankerOwner(builder, tankerOwnerOffset);
    AirEventTankers_Full.addTankerCallSign(builder, tankerCallSignOffset);
    AirEventTankers_Full.addAltTankerMissionId(builder, altTankerMissionIdOffset);
    AirEventTankers_Full.addAmcTankerMissionId(builder, amcTankerMissionIdOffset);
    AirEventTankers_Full.addTankerMds(builder, tankerMdsOffset);
    AirEventTankers_Full.addTankerCoord(builder, tankerCoordOffset);
    AirEventTankers_Full.addExternalTankerId(builder, externalTankerIdOffset);
    AirEventTankers_Full.addIdTankerAirfield(builder, idTankerAirfieldOffset);
    AirEventTankers_Full.addIdTankerMission(builder, idTankerMissionOffset);
    AirEventTankers_Full.addIdTankerSortie(builder, idTankerSortieOffset);
    AirEventTankers_Full.addDualRole(builder, dualRole);
    return AirEventTankers_Full.endAirEventTankers_Full(builder);
  }

  public static void startAirEventTankers_Full(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addIdTankerSortie(FlatBufferBuilder builder, int idTankerSortieOffset) { builder.addOffset(0, idTankerSortieOffset, 0); }
  public static void addIdTankerMission(FlatBufferBuilder builder, int idTankerMissionOffset) { builder.addOffset(1, idTankerMissionOffset, 0); }
  public static void addIdTankerAirfield(FlatBufferBuilder builder, int idTankerAirfieldOffset) { builder.addOffset(2, idTankerAirfieldOffset, 0); }
  public static void addExternalTankerId(FlatBufferBuilder builder, int externalTankerIdOffset) { builder.addOffset(3, externalTankerIdOffset, 0); }
  public static void addTankerCoord(FlatBufferBuilder builder, int tankerCoordOffset) { builder.addOffset(4, tankerCoordOffset, 0); }
  public static void addTankerMds(FlatBufferBuilder builder, int tankerMdsOffset) { builder.addOffset(5, tankerMdsOffset, 0); }
  public static void addAmcTankerMissionId(FlatBufferBuilder builder, int amcTankerMissionIdOffset) { builder.addOffset(6, amcTankerMissionIdOffset, 0); }
  public static void addAltTankerMissionId(FlatBufferBuilder builder, int altTankerMissionIdOffset) { builder.addOffset(7, altTankerMissionIdOffset, 0); }
  public static void addTankerCallSign(FlatBufferBuilder builder, int tankerCallSignOffset) { builder.addOffset(8, tankerCallSignOffset, 0); }
  public static void addTankerOwner(FlatBufferBuilder builder, int tankerOwnerOffset) { builder.addOffset(9, tankerOwnerOffset, 0); }
  public static void addTankerPoc(FlatBufferBuilder builder, int tankerPocOffset) { builder.addOffset(10, tankerPocOffset, 0); }
  public static void addTankerLegNum(FlatBufferBuilder builder, int tankerLegNum) { builder.addInt(11, tankerLegNum, 0); }
  public static void addTankerDeployedIcao(FlatBufferBuilder builder, int tankerDeployedIcaoOffset) { builder.addOffset(12, tankerDeployedIcaoOffset, 0); }
  public static void addTankerDeliveryMethod(FlatBufferBuilder builder, int tankerDeliveryMethodOffset) { builder.addOffset(13, tankerDeliveryMethodOffset, 0); }
  public static void addFuelOff(FlatBufferBuilder builder, double fuelOff) { builder.addDouble(14, fuelOff, 0.0); }
  public static void addTankerCellPosition(FlatBufferBuilder builder, int tankerCellPosition) { builder.addInt(15, tankerCellPosition, 0); }
  public static void addTankerFuelType(FlatBufferBuilder builder, int tankerFuelTypeOffset) { builder.addOffset(16, tankerFuelTypeOffset, 0); }
  public static void addDualRole(FlatBufferBuilder builder, boolean dualRole) { builder.addBoolean(17, dualRole, false); }
  public static int endAirEventTankers_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirEventTankers_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRE"); }
  public static void finishSizePrefixedAirEventTankers_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirEventTankers_Full get(int j) { return get(new AirEventTankers_Full(), j); }
    public AirEventTankers_Full get(AirEventTankers_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

