// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// High priority time windows.
 */
@SuppressWarnings("unused")
public final class ISRCollectionCriticalTimes_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionCriticalTimes_Ingest getRootAsISRCollectionCriticalTimes_Ingest(ByteBuffer _bb) { return getRootAsISRCollectionCriticalTimes_Ingest(_bb, new ISRCollectionCriticalTimes_Ingest()); }
  public static ISRCollectionCriticalTimes_Ingest getRootAsISRCollectionCriticalTimes_Ingest(ByteBuffer _bb, ISRCollectionCriticalTimes_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ISRCollectionCriticalTimes_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ISRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ISRCollectionCriticalTimes_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Critical start time to collect an image for this requirement.
   * Example: /// Example: 2021-01-19T01:01:15.001Z
   * Constraints: No constraints specified.
   */
  public String earliestImagingTime() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer earliestImagingTimeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer earliestImagingTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Critical stop time to collect an image for this requirement.
   * Example: /// Example: 2021-01-19T01:11:15.001Z
   * Constraints: No constraints specified.
   */
  public String latestImagingTime() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer latestImagingTimeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer latestImagingTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createISRCollectionCriticalTimes_Ingest(FlatBufferBuilder builder,
      int earliestImagingTimeOffset,
      int latestImagingTimeOffset) {
    builder.startTable(2);
    ISRCollectionCriticalTimes_Ingest.addLatestImagingTime(builder, latestImagingTimeOffset);
    ISRCollectionCriticalTimes_Ingest.addEarliestImagingTime(builder, earliestImagingTimeOffset);
    return ISRCollectionCriticalTimes_Ingest.endISRCollectionCriticalTimes_Ingest(builder);
  }

  public static void startISRCollectionCriticalTimes_Ingest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addEarliestImagingTime(FlatBufferBuilder builder, int earliestImagingTimeOffset) { builder.addOffset(0, earliestImagingTimeOffset, 0); }
  public static void addLatestImagingTime(FlatBufferBuilder builder, int latestImagingTimeOffset) { builder.addOffset(1, latestImagingTimeOffset, 0); }
  public static int endISRCollectionCriticalTimes_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishISRCollectionCriticalTimes_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ISRC"); }
  public static void finishSizePrefixedISRCollectionCriticalTimes_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ISRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ISRCollectionCriticalTimes_Ingest get(int j) { return get(new ISRCollectionCriticalTimes_Ingest(), j); }
    public ISRCollectionCriticalTimes_Ingest get(ISRCollectionCriticalTimes_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

