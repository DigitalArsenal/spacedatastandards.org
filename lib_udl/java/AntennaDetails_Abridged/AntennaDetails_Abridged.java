// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Detailed information for a spacecraft communication antenna. One antenna may have multiple AntennaDetails records, compiled by various sources.
 */
@SuppressWarnings("unused")
public final class AntennaDetails_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AntennaDetails_Abridged getRootAsAntennaDetails_Abridged(ByteBuffer _bb) { return getRootAsAntennaDetails_Abridged(_bb, new AntennaDetails_Abridged()); }
  public static AntennaDetails_Abridged getRootAsAntennaDetails_Abridged(ByteBuffer _bb, AntennaDetails_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AntennaDetails_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ANTE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AntennaDetails_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ANTENNADETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique identifier of the parent Antenna.
   * Example: /// Example: ANTENNA-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idAntenna() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAntennaAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idAntennaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Type of antenna (e.g. Reflector, Double Reflector, Shaped Reflector, Horn, Parabolic, etc.).
   * Example: /// Example: Reflector
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String type() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Antenna position (e.g. Top, Nadir, Side).
   * Example: /// Example: Top
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String position() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer positionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer positionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Antenna mode (e.g. TX,RX).
   * Example: /// Example: TX
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public byte mode() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Boolean indicating if this antenna is steerable.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean steerable() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating if this is a beam forming antenna.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean beamForming() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * ID of the organization that manufactures the antenna.
   * Example: /// Example: MANUFACTUREORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Antenna diameter in meters.
   * Example: /// Example: 0.01
   * Constraints: No constraints specified.
   */
  public double diameter() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
   * Example: /// Example: [0.03, 0.05]
   * Constraints: No constraints specified.
   */
  public String size(int j) { int o = __offset(24); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sizeLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sizeVector() { return sizeVector(new StringVector()); }
  public StringVector sizeVector(StringVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Antenna start of frequency range in Mhz.
   * Example: /// Example: 2.1
   * Constraints: No constraints specified.
   */
  public double startFrequency() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Antenna end of frequency range in Mhz.
   * Example: /// Example: 3.3
   * Constraints: No constraints specified.
   */
  public double endFrequency() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of angles between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
   * Example: /// Example: 14.1
   * Constraints: No constraints specified.
   */
  public double beamwidth() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Antenna maximum gain in dBi.
   * Example: /// Example: 20.1
   * Constraints: No constraints specified.
   */
  public double gain() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Antenna gain tolerance in dB.
   * Example: /// Example: 5.1
   * Constraints: No constraints specified.
   */
  public double gainTolerance() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Antenna polarization in degrees.
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double polarization() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Antenna description.
   * Example: /// Example: Description of antenna A
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String description() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAntennaDetails_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int idAntennaOffset,
      int classificationMarkingOffset,
      int typeOffset,
      int positionOffset,
      byte mode,
      boolean steerable,
      boolean beamForming,
      int manufacturerOrgIdOffset,
      double diameter,
      int sizeOffset,
      double startFrequency,
      double endFrequency,
      double beamwidth,
      double gain,
      double gainTolerance,
      double polarization,
      int descriptionOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(24);
    AntennaDetails_Abridged.addPolarization(builder, polarization);
    AntennaDetails_Abridged.addGainTolerance(builder, gainTolerance);
    AntennaDetails_Abridged.addGain(builder, gain);
    AntennaDetails_Abridged.addBeamwidth(builder, beamwidth);
    AntennaDetails_Abridged.addEndFrequency(builder, endFrequency);
    AntennaDetails_Abridged.addStartFrequency(builder, startFrequency);
    AntennaDetails_Abridged.addDiameter(builder, diameter);
    AntennaDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
    AntennaDetails_Abridged.addOrigin(builder, originOffset);
    AntennaDetails_Abridged.addSource(builder, sourceOffset);
    AntennaDetails_Abridged.addCreatedBy(builder, createdByOffset);
    AntennaDetails_Abridged.addCreatedAt(builder, createdAtOffset);
    AntennaDetails_Abridged.addDescription(builder, descriptionOffset);
    AntennaDetails_Abridged.addSize(builder, sizeOffset);
    AntennaDetails_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    AntennaDetails_Abridged.addPosition(builder, positionOffset);
    AntennaDetails_Abridged.addType(builder, typeOffset);
    AntennaDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    AntennaDetails_Abridged.addIdAntenna(builder, idAntennaOffset);
    AntennaDetails_Abridged.addId(builder, idOffset);
    AntennaDetails_Abridged.addDataMode(builder, dataMode);
    AntennaDetails_Abridged.addBeamForming(builder, beamForming);
    AntennaDetails_Abridged.addSteerable(builder, steerable);
    AntennaDetails_Abridged.addMode(builder, mode);
    return AntennaDetails_Abridged.endAntennaDetails_Abridged(builder);
  }

  public static void startAntennaDetails_Abridged(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdAntenna(FlatBufferBuilder builder, int idAntennaOffset) { builder.addOffset(1, idAntennaOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(3, typeOffset, 0); }
  public static void addPosition(FlatBufferBuilder builder, int positionOffset) { builder.addOffset(4, positionOffset, 0); }
  public static void addMode(FlatBufferBuilder builder, byte mode) { builder.addByte(5, mode, 0); }
  public static void addSteerable(FlatBufferBuilder builder, boolean steerable) { builder.addBoolean(6, steerable, false); }
  public static void addBeamForming(FlatBufferBuilder builder, boolean beamForming) { builder.addBoolean(7, beamForming, false); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(8, manufacturerOrgIdOffset, 0); }
  public static void addDiameter(FlatBufferBuilder builder, double diameter) { builder.addDouble(9, diameter, 0.0); }
  public static void addSize(FlatBufferBuilder builder, int sizeOffset) { builder.addOffset(10, sizeOffset, 0); }
  public static int createSizeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSizeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStartFrequency(FlatBufferBuilder builder, double startFrequency) { builder.addDouble(11, startFrequency, 0.0); }
  public static void addEndFrequency(FlatBufferBuilder builder, double endFrequency) { builder.addDouble(12, endFrequency, 0.0); }
  public static void addBeamwidth(FlatBufferBuilder builder, double beamwidth) { builder.addDouble(13, beamwidth, 0.0); }
  public static void addGain(FlatBufferBuilder builder, double gain) { builder.addDouble(14, gain, 0.0); }
  public static void addGainTolerance(FlatBufferBuilder builder, double gainTolerance) { builder.addDouble(15, gainTolerance, 0.0); }
  public static void addPolarization(FlatBufferBuilder builder, double polarization) { builder.addDouble(16, polarization, 0.0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(17, descriptionOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(18, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(19, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(20, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(21, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(22, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(23, dataMode, 0); }
  public static int endAntennaDetails_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAntennaDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ANTE"); }
  public static void finishSizePrefixedAntennaDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ANTE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AntennaDetails_Abridged get(int j) { return get(new AntennaDetails_Abridged(), j); }
    public AntennaDetails_Abridged get(AntennaDetails_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

