// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of observation data for electro-optical based sensor phenomenologies.
 */
@SuppressWarnings("unused")
public final class Sensor_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Sensor_Ingest getRootAsSensor_Ingest(ByteBuffer _bb) { return getRootAsSensor_Ingest(_bb, new Sensor_Ingest()); }
  public static Sensor_Ingest getRootAsSensor_Ingest(ByteBuffer _bb, Sensor_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Sensor_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SENS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Sensor_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idSensor() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique name of this sensor.
   * Example: /// Example: SENSOR_NAME
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String sensorName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sensorNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer sensorNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
   * Example: /// Example: 1234
   * Constraints: No constraints specified.
   */
  public int sensorNumber() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional short name for the sensor.
   * Example: /// Example: SNR-1
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String shortName() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer shortNameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer shortNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
   * Example: /// Example: observations
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String dataControl() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dataControlAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer dataControlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
   * Example: /// Example: AF-ID
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String afId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer afIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer afIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The sensor type at the site. Optional field, intended primarily for ASRs.
   * Example: /// Example: SENSOR_TYPE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String asrType() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer asrTypeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer asrTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Source of the data.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Optional flag indicating if the sensor is active.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean active() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String sensorcharacteristics(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sensorcharacteristicsLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sensorcharacteristicsVector() { return sensorcharacteristicsVector(new StringVector()); }
  public StringVector sensorcharacteristicsVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of SensorStats which contain statistics of a sensor.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String sensorStats(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sensorStatsLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sensorStatsVector() { return sensorStatsVector(new StringVector()); }
  public StringVector sensorStatsVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String sensorlimitsCollection(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sensorlimitsCollectionLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sensorlimitsCollectionVector() { return sensorlimitsCollectionVector(new StringVector()); }
  public StringVector sensorlimitsCollectionVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String entity() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Unique identifier of the parent entity. idEntity is required for Put.
   * Example: /// Example: ENTITY-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idEntity() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEntityAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer idEntityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String sensorObservationType() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sensorObservationTypeAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer sensorObservationTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String sensorType() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sensorTypeAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer sensorTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }

  public static int createSensor_Ingest(FlatBufferBuilder builder,
      int idSensorOffset,
      int sensorNameOffset,
      int classificationMarkingOffset,
      int sensorNumber,
      int shortNameOffset,
      int dataControlOffset,
      int afIdOffset,
      int asrTypeOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      boolean active,
      int sensorcharacteristicsOffset,
      int sensorStatsOffset,
      int sensorlimitsCollectionOffset,
      int entityOffset,
      int idEntityOffset,
      int sensorObservationTypeOffset,
      int sensorTypeOffset) {
    builder.startTable(22);
    Sensor_Ingest.addSensorType(builder, sensorTypeOffset);
    Sensor_Ingest.addSensorObservationType(builder, sensorObservationTypeOffset);
    Sensor_Ingest.addIdEntity(builder, idEntityOffset);
    Sensor_Ingest.addEntity(builder, entityOffset);
    Sensor_Ingest.addSensorlimitsCollection(builder, sensorlimitsCollectionOffset);
    Sensor_Ingest.addSensorStats(builder, sensorStatsOffset);
    Sensor_Ingest.addSensorcharacteristics(builder, sensorcharacteristicsOffset);
    Sensor_Ingest.addCreatedBy(builder, createdByOffset);
    Sensor_Ingest.addCreatedAt(builder, createdAtOffset);
    Sensor_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Sensor_Ingest.addOrigin(builder, originOffset);
    Sensor_Ingest.addSource(builder, sourceOffset);
    Sensor_Ingest.addAsrType(builder, asrTypeOffset);
    Sensor_Ingest.addAfId(builder, afIdOffset);
    Sensor_Ingest.addDataControl(builder, dataControlOffset);
    Sensor_Ingest.addShortName(builder, shortNameOffset);
    Sensor_Ingest.addSensorNumber(builder, sensorNumber);
    Sensor_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Sensor_Ingest.addSensorName(builder, sensorNameOffset);
    Sensor_Ingest.addIdSensor(builder, idSensorOffset);
    Sensor_Ingest.addActive(builder, active);
    Sensor_Ingest.addDataMode(builder, dataMode);
    return Sensor_Ingest.endSensor_Ingest(builder);
  }

  public static void startSensor_Ingest(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(0, idSensorOffset, 0); }
  public static void addSensorName(FlatBufferBuilder builder, int sensorNameOffset) { builder.addOffset(1, sensorNameOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addSensorNumber(FlatBufferBuilder builder, int sensorNumber) { builder.addInt(3, sensorNumber, 0); }
  public static void addShortName(FlatBufferBuilder builder, int shortNameOffset) { builder.addOffset(4, shortNameOffset, 0); }
  public static void addDataControl(FlatBufferBuilder builder, int dataControlOffset) { builder.addOffset(5, dataControlOffset, 0); }
  public static void addAfId(FlatBufferBuilder builder, int afIdOffset) { builder.addOffset(6, afIdOffset, 0); }
  public static void addAsrType(FlatBufferBuilder builder, int asrTypeOffset) { builder.addOffset(7, asrTypeOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(8, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(9, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(10, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(11, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(12, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(13, createdByOffset, 0); }
  public static void addActive(FlatBufferBuilder builder, boolean active) { builder.addBoolean(14, active, false); }
  public static void addSensorcharacteristics(FlatBufferBuilder builder, int sensorcharacteristicsOffset) { builder.addOffset(15, sensorcharacteristicsOffset, 0); }
  public static int createSensorcharacteristicsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSensorcharacteristicsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSensorStats(FlatBufferBuilder builder, int sensorStatsOffset) { builder.addOffset(16, sensorStatsOffset, 0); }
  public static int createSensorStatsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSensorStatsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSensorlimitsCollection(FlatBufferBuilder builder, int sensorlimitsCollectionOffset) { builder.addOffset(17, sensorlimitsCollectionOffset, 0); }
  public static int createSensorlimitsCollectionVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSensorlimitsCollectionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(18, entityOffset, 0); }
  public static void addIdEntity(FlatBufferBuilder builder, int idEntityOffset) { builder.addOffset(19, idEntityOffset, 0); }
  public static void addSensorObservationType(FlatBufferBuilder builder, int sensorObservationTypeOffset) { builder.addOffset(20, sensorObservationTypeOffset, 0); }
  public static void addSensorType(FlatBufferBuilder builder, int sensorTypeOffset) { builder.addOffset(21, sensorTypeOffset, 0); }
  public static int endSensor_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSensor_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SENS"); }
  public static void finishSizePrefixedSensor_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SENS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Sensor_Ingest get(int j) { return get(new Sensor_Ingest(), j); }
    public Sensor_Ingest get(Sensor_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

