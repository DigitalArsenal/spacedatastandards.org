// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).
 */
@SuppressWarnings("unused")
public final class IonoObservationProfileDensityShiftedChebyshevEntry_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationProfileDensityShiftedChebyshevEntry_Ingest getRootAsIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(ByteBuffer _bb) { return getRootAsIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(_bb, new IonoObservationProfileDensityShiftedChebyshevEntry_Ingest()); }
  public static IonoObservationProfileDensityShiftedChebyshevEntry_Ingest getRootAsIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(ByteBuffer _bb, IonoObservationProfileDensityShiftedChebyshevEntry_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationProfileDensityShiftedChebyshevEntry_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationProfileDensityShiftedChebyshevEntry_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The ionospheric plasma layer.
   * Example: /// Example: F2
   * Constraints: No constraints specified.
   */
  public String layer() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer layerAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer layerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Start frequency of the layer, in MHz.
   * Example: /// Example: 0.2
   * Constraints: No constraints specified.
   */
  public double fstart() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Stop frequency of the layer, in MHz.
   * Example: /// Example: 1.39
   * Constraints: No constraints specified.
   */
  public double fstop() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak height of the layer, in kilometers.
   * Example: /// Example: 110.1
   * Constraints: No constraints specified.
   */
  public double peakheight() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Height at which density is half of the peak Nm, in kilometers.
   * Example: /// Example: 210.1
   * Constraints: No constraints specified.
   */
  public double zhalfNm() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of coefficients in the expansion.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int n() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of coefficients.
   * Example: /// Example: [-11.2, -10.536, 3.357, -0.888, 0.155]
   * Constraints: No constraints specified.
   */
  public String coeffs(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int coeffsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector coeffsVector() { return coeffsVector(new StringVector()); }
  public StringVector coeffsVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Best fit error.
   * Example: /// Example: 0.02
   * Constraints: No constraints specified.
   */
  public double error() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(FlatBufferBuilder builder,
      int layerOffset,
      double fstart,
      double fstop,
      double peakheight,
      double zhalfNm,
      int n,
      int coeffsOffset,
      double error) {
    builder.startTable(8);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addError(builder, error);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addZhalfNm(builder, zhalfNm);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addPeakheight(builder, peakheight);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addFstop(builder, fstop);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addFstart(builder, fstart);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addCoeffs(builder, coeffsOffset);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addN(builder, n);
    IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.addLayer(builder, layerOffset);
    return IonoObservationProfileDensityShiftedChebyshevEntry_Ingest.endIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(builder);
  }

  public static void startIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addLayer(FlatBufferBuilder builder, int layerOffset) { builder.addOffset(0, layerOffset, 0); }
  public static void addFstart(FlatBufferBuilder builder, double fstart) { builder.addDouble(1, fstart, 0.0); }
  public static void addFstop(FlatBufferBuilder builder, double fstop) { builder.addDouble(2, fstop, 0.0); }
  public static void addPeakheight(FlatBufferBuilder builder, double peakheight) { builder.addDouble(3, peakheight, 0.0); }
  public static void addZhalfNm(FlatBufferBuilder builder, double zhalfNm) { builder.addDouble(4, zhalfNm, 0.0); }
  public static void addN(FlatBufferBuilder builder, int n) { builder.addInt(5, n, 0); }
  public static void addCoeffs(FlatBufferBuilder builder, int coeffsOffset) { builder.addOffset(6, coeffsOffset, 0); }
  public static int createCoeffsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCoeffsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addError(FlatBufferBuilder builder, double error) { builder.addDouble(7, error, 0.0); }
  public static int endIonoObservationProfileDensityShiftedChebyshevEntry_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationProfileDensityShiftedChebyshevEntry_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationProfileDensityShiftedChebyshevEntry_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationProfileDensityShiftedChebyshevEntry_Ingest get(int j) { return get(new IonoObservationProfileDensityShiftedChebyshevEntry_Ingest(), j); }
    public IonoObservationProfileDensityShiftedChebyshevEntry_Ingest get(IonoObservationProfileDensityShiftedChebyshevEntry_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

