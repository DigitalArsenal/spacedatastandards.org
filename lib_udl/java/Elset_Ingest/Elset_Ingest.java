// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// An element set is a collection of Keplerian orbital elements describing an orbit of a particular satellite. The data is used along with an orbit propagator in order to predict the motion of a satellite. The element set, or elset for short, consists of identification data, the classical elements and drag parameters.
 */
@SuppressWarnings("unused")
public final class Elset_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Elset_Ingest getRootAsElset_Ingest(ByteBuffer _bb) { return getRootAsElset_Ingest(_bb, new Elset_Ingest()); }
  public static Elset_Ingest getRootAsElset_Ingest(ByteBuffer _bb, Elset_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Elset_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ELSE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Elset_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ELSET-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idElset() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idElsetAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Elset epoch time in ISO 8601 UTC format, with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String epoch() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer epochAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer epochInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double meanMotion() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Unique identifier of the satellite on-orbit object, if correlated. For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Boolean indicating this Elset was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
   * Example: /// Example: 0.333
   * Constraints: No constraints specified.
   */
  public double eccentricity() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double inclination() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double raan() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double argOfPerigee() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double meanAnomaly() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The current revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
   * Example: /// Example: 111
   * Constraints: No constraints specified.
   */
  public int revNo() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double bStar() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * AGOM, expressed in m^2/kg, is the value of the (averaged) object Area times the solar radiation pressure coefficient(Gamma) over the object Mass. Applicable only with ephemType4.
   * Example: /// Example: 0.0126
   * Constraints: No constraints specified.
   */
  public double agom() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Ballistic coefficient, in m^2/kg. Applicable only with ephemType4.
   * Example: /// Example: 0.00815
   * Constraints: No constraints specified.
   */
  public double ballisticCoeff() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double meanMotionDot() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double meanMotionDdot() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass. Units are kilometers.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double semiMajorAxis() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Period of the orbit equal to inverse of mean motion, in minutes.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double period() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The orbit point furthest from the center of the earth in kilometers. If not provided, apogee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, apogee = (A * (1 + E)) in km. Note that the calculations are for computing the apogee radius from the center of the earth, to compute apogee altitude the radius of the earth should be subtracted (6378.135 km).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double apogee() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The orbit point nearest to the center of the earth in kilometers. If not provided, perigee will be computed from the TLE according to the following. Using mu, the standard gravitational parameter for the earth (398600.4418), semi-major axis A = (mu/(n * 2 * pi/(24*3600))^2)(1/3). Using semi-major axis A, eccentricity E, perigee = (A * (1 - E)) in km. Note that the calculations are for computing the perigee radius from the center of the earth, to compute perigee altitude the radius of the earth should be subtracted (6378.135 km).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double perigee() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional identifier provided by elset source to indicate the target onorbit object of this elset. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Unique identifier of the OD solution record that produced this elset. This ID can be used to obtain additional information on an OrbitDetermination object using the 'get by ID' operation (e.g. /udl/orbitdetermination/{id}). For example, the OrbitDetermination with idOrbitDetermination = abc would be queried as /udl/orbitdetermination/abc.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOrbitDetermination() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOrbitDeterminationAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer idOrbitDeterminationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Read only derived/generated line1 of a legacy TLE (two line element set) format, ignored on create/edit operations.
   * Example: /// Example: Example line1
   * Constraints: Minimum length = 0, Maximum length = 69
   */
  public String line1() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer line1AsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer line1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Read only derived/generated line2 of a legacy TLE (two line element set) format, ignored on create/edit operations.
   * Example: /// Example: Example line2
   * Constraints: Minimum length = 0, Maximum length = 69
   */
  public String line2() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer line2AsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer line2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: Example description
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(72); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(72); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(72); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional algorithm used to produce this record.
   * Example: /// Example: Example algorithm
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String algorithm() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer algorithmAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer algorithmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Optional array of UDL data (observation) UUIDs used to build this element set. See the associated sourcedDataTypes array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
   * Example: /// Example: ['OBSERVATION_UUID1', 'OBSERVATION_UUID2']
   * Constraints: No constraints specified.
   */
  public String sourcedData(int j) { int o = __offset(76); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sourcedDataLength() { int o = __offset(76); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sourcedDataVector() { return sourcedDataVector(new StringVector()); }
  public StringVector sourcedDataVector(StringVector obj) { int o = __offset(76); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional array of UDL observation data types used to build this element set (e.g. EO, RADAR, RF, DOA). See the associated sourcedData array for the specific UUIDs of observations for the positionally corresponding data types in this array (the two arrays must match in size).
   * Example: /// Example: ['RADAR', 'RF']
   * Constraints: No constraints specified.
   */
  public byte sourcedDataTypes() { int o = __offset(78); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * The ephemeris type associated with this TLE:
   * 0:&nbsp;SGP4 if orbital period&nbsp;&lt;&nbsp;225 minutes, and SDP4 otherwise
   * 1:&nbsp;SGP
   * 2:&nbsp;SGP4
   * 3:&nbsp;SDP4
   * 4:&nbsp;SGP8, also referred to as SGP4-XP
   * 5:&nbsp;SDP8
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int ephemType() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }

  public static int createElset_Ingest(FlatBufferBuilder builder,
      int idElsetOffset,
      int classificationMarkingOffset,
      int satNo,
      int epochOffset,
      double meanMotion,
      int idOnOrbitOffset,
      boolean uct,
      double eccentricity,
      double inclination,
      double raan,
      double argOfPerigee,
      double meanAnomaly,
      int revNo,
      double bStar,
      double agom,
      double ballisticCoeff,
      double meanMotionDot,
      double meanMotionDdot,
      double semiMajorAxis,
      double period,
      double apogee,
      double perigee,
      int origObjectIdOffset,
      int idOrbitDeterminationOffset,
      int line1Offset,
      int line2Offset,
      int descriptorOffset,
      int createdAtOffset,
      int createdByOffset,
      int rawFileUriOffset,
      int originOffset,
      int sourceDlOffset,
      int sourceOffset,
      byte dataMode,
      int tagsOffset,
      int algorithmOffset,
      int sourcedDataOffset,
      byte sourcedDataTypes,
      int transactionIdOffset,
      int ephemType,
      int origNetworkOffset) {
    builder.startTable(41);
    Elset_Ingest.addPerigee(builder, perigee);
    Elset_Ingest.addApogee(builder, apogee);
    Elset_Ingest.addPeriod(builder, period);
    Elset_Ingest.addSemiMajorAxis(builder, semiMajorAxis);
    Elset_Ingest.addMeanMotionDdot(builder, meanMotionDdot);
    Elset_Ingest.addMeanMotionDot(builder, meanMotionDot);
    Elset_Ingest.addBallisticCoeff(builder, ballisticCoeff);
    Elset_Ingest.addAgom(builder, agom);
    Elset_Ingest.addBStar(builder, bStar);
    Elset_Ingest.addMeanAnomaly(builder, meanAnomaly);
    Elset_Ingest.addArgOfPerigee(builder, argOfPerigee);
    Elset_Ingest.addRaan(builder, raan);
    Elset_Ingest.addInclination(builder, inclination);
    Elset_Ingest.addEccentricity(builder, eccentricity);
    Elset_Ingest.addMeanMotion(builder, meanMotion);
    Elset_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Elset_Ingest.addEphemType(builder, ephemType);
    Elset_Ingest.addTransactionId(builder, transactionIdOffset);
    Elset_Ingest.addSourcedData(builder, sourcedDataOffset);
    Elset_Ingest.addAlgorithm(builder, algorithmOffset);
    Elset_Ingest.addTags(builder, tagsOffset);
    Elset_Ingest.addSource(builder, sourceOffset);
    Elset_Ingest.addSourceDl(builder, sourceDlOffset);
    Elset_Ingest.addOrigin(builder, originOffset);
    Elset_Ingest.addRawFileUri(builder, rawFileUriOffset);
    Elset_Ingest.addCreatedBy(builder, createdByOffset);
    Elset_Ingest.addCreatedAt(builder, createdAtOffset);
    Elset_Ingest.addDescriptor(builder, descriptorOffset);
    Elset_Ingest.addLine2(builder, line2Offset);
    Elset_Ingest.addLine1(builder, line1Offset);
    Elset_Ingest.addIdOrbitDetermination(builder, idOrbitDeterminationOffset);
    Elset_Ingest.addOrigObjectId(builder, origObjectIdOffset);
    Elset_Ingest.addRevNo(builder, revNo);
    Elset_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    Elset_Ingest.addEpoch(builder, epochOffset);
    Elset_Ingest.addSatNo(builder, satNo);
    Elset_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Elset_Ingest.addIdElset(builder, idElsetOffset);
    Elset_Ingest.addSourcedDataTypes(builder, sourcedDataTypes);
    Elset_Ingest.addDataMode(builder, dataMode);
    Elset_Ingest.addUct(builder, uct);
    return Elset_Ingest.endElset_Ingest(builder);
  }

  public static void startElset_Ingest(FlatBufferBuilder builder) { builder.startTable(41); }
  public static void addIdElset(FlatBufferBuilder builder, int idElsetOffset) { builder.addOffset(0, idElsetOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(2, satNo, 0); }
  public static void addEpoch(FlatBufferBuilder builder, int epochOffset) { builder.addOffset(3, epochOffset, 0); }
  public static void addMeanMotion(FlatBufferBuilder builder, double meanMotion) { builder.addDouble(4, meanMotion, 0.0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(5, idOnOrbitOffset, 0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(6, uct, false); }
  public static void addEccentricity(FlatBufferBuilder builder, double eccentricity) { builder.addDouble(7, eccentricity, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double inclination) { builder.addDouble(8, inclination, 0.0); }
  public static void addRaan(FlatBufferBuilder builder, double raan) { builder.addDouble(9, raan, 0.0); }
  public static void addArgOfPerigee(FlatBufferBuilder builder, double argOfPerigee) { builder.addDouble(10, argOfPerigee, 0.0); }
  public static void addMeanAnomaly(FlatBufferBuilder builder, double meanAnomaly) { builder.addDouble(11, meanAnomaly, 0.0); }
  public static void addRevNo(FlatBufferBuilder builder, int revNo) { builder.addInt(12, revNo, 0); }
  public static void addBStar(FlatBufferBuilder builder, double bStar) { builder.addDouble(13, bStar, 0.0); }
  public static void addAgom(FlatBufferBuilder builder, double agom) { builder.addDouble(14, agom, 0.0); }
  public static void addBallisticCoeff(FlatBufferBuilder builder, double ballisticCoeff) { builder.addDouble(15, ballisticCoeff, 0.0); }
  public static void addMeanMotionDot(FlatBufferBuilder builder, double meanMotionDot) { builder.addDouble(16, meanMotionDot, 0.0); }
  public static void addMeanMotionDdot(FlatBufferBuilder builder, double meanMotionDdot) { builder.addDouble(17, meanMotionDdot, 0.0); }
  public static void addSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.addDouble(18, semiMajorAxis, 0.0); }
  public static void addPeriod(FlatBufferBuilder builder, double period) { builder.addDouble(19, period, 0.0); }
  public static void addApogee(FlatBufferBuilder builder, double apogee) { builder.addDouble(20, apogee, 0.0); }
  public static void addPerigee(FlatBufferBuilder builder, double perigee) { builder.addDouble(21, perigee, 0.0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(22, origObjectIdOffset, 0); }
  public static void addIdOrbitDetermination(FlatBufferBuilder builder, int idOrbitDeterminationOffset) { builder.addOffset(23, idOrbitDeterminationOffset, 0); }
  public static void addLine1(FlatBufferBuilder builder, int line1Offset) { builder.addOffset(24, line1Offset, 0); }
  public static void addLine2(FlatBufferBuilder builder, int line2Offset) { builder.addOffset(25, line2Offset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(26, descriptorOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(27, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(28, createdByOffset, 0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(29, rawFileUriOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(30, originOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(31, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(32, sourceOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(33, dataMode, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(34, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAlgorithm(FlatBufferBuilder builder, int algorithmOffset) { builder.addOffset(35, algorithmOffset, 0); }
  public static void addSourcedData(FlatBufferBuilder builder, int sourcedDataOffset) { builder.addOffset(36, sourcedDataOffset, 0); }
  public static int createSourcedDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSourcedDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSourcedDataTypes(FlatBufferBuilder builder, byte sourcedDataTypes) { builder.addByte(37, sourcedDataTypes, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(38, transactionIdOffset, 0); }
  public static void addEphemType(FlatBufferBuilder builder, int ephemType) { builder.addInt(39, ephemType, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(40, origNetworkOffset, 0); }
  public static int endElset_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishElset_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ELSE"); }
  public static void finishSizePrefixedElset_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ELSE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Elset_Ingest get(int j) { return get(new Elset_Ingest(), j); }
    public Elset_Ingest get(Elset_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

