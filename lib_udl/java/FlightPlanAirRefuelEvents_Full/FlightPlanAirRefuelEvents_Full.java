// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of air refueling events occurring on this flight.
 */
@SuppressWarnings("unused")
public final class FlightPlanAirRefuelEvents_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanAirRefuelEvents_Full getRootAsFlightPlanAirRefuelEvents_Full(ByteBuffer _bb) { return getRootAsFlightPlanAirRefuelEvents_Full(_bb, new FlightPlanAirRefuelEvents_Full()); }
  public static FlightPlanAirRefuelEvents_Full getRootAsFlightPlanAirRefuelEvents_Full(ByteBuffer _bb, FlightPlanAirRefuelEvents_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean FlightPlanAirRefuelEvents_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "FLIG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlightPlanAirRefuelEvents_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Additional degrade for air refueling, cumulative with fuelDegrade field percent.
   * Example: /// Example: 3.1
   * Constraints: No constraints specified.
   */
  public double arDegrade() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of this air refueling event within the flight plan.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int arNum() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Fuel onloaded (use positive numbers) or fuel offloaded (use negative numbers) in pounds.
   * Example: /// Example: 1500.1
   * Constraints: No constraints specified.
   */
  public double arExchangedFuel() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel required to fly from air refueling exit point to air refueling divert alternate airfield in pounds.
   * Example: /// Example: 143000.1
   * Constraints: No constraints specified.
   */
  public double divertFuel() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Fuel remaining at the air refueling exit in pounds.
   * Example: /// Example: 160000.1
   * Constraints: No constraints specified.
   */
  public double exitFuel() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createFlightPlanAirRefuelEvents_Full(FlatBufferBuilder builder,
      double arDegrade,
      int arNum,
      double arExchangedFuel,
      double divertFuel,
      double exitFuel) {
    builder.startTable(5);
    FlightPlanAirRefuelEvents_Full.addExitFuel(builder, exitFuel);
    FlightPlanAirRefuelEvents_Full.addDivertFuel(builder, divertFuel);
    FlightPlanAirRefuelEvents_Full.addArExchangedFuel(builder, arExchangedFuel);
    FlightPlanAirRefuelEvents_Full.addArDegrade(builder, arDegrade);
    FlightPlanAirRefuelEvents_Full.addArNum(builder, arNum);
    return FlightPlanAirRefuelEvents_Full.endFlightPlanAirRefuelEvents_Full(builder);
  }

  public static void startFlightPlanAirRefuelEvents_Full(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addArDegrade(FlatBufferBuilder builder, double arDegrade) { builder.addDouble(0, arDegrade, 0.0); }
  public static void addArNum(FlatBufferBuilder builder, int arNum) { builder.addInt(1, arNum, 0); }
  public static void addArExchangedFuel(FlatBufferBuilder builder, double arExchangedFuel) { builder.addDouble(2, arExchangedFuel, 0.0); }
  public static void addDivertFuel(FlatBufferBuilder builder, double divertFuel) { builder.addDouble(3, divertFuel, 0.0); }
  public static void addExitFuel(FlatBufferBuilder builder, double exitFuel) { builder.addDouble(4, exitFuel, 0.0); }
  public static int endFlightPlanAirRefuelEvents_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFlightPlanAirRefuelEvents_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "FLIG"); }
  public static void finishSizePrefixedFlightPlanAirRefuelEvents_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "FLIG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlightPlanAirRefuelEvents_Full get(int j) { return get(new FlightPlanAirRefuelEvents_Full(), j); }
    public FlightPlanAirRefuelEvents_Full get(FlightPlanAirRefuelEvents_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

