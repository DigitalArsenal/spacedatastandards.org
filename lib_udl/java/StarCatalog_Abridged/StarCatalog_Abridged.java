// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
 */
@SuppressWarnings("unused")
public final class StarCatalog_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static StarCatalog_Abridged getRootAsStarCatalog_Abridged(ByteBuffer _bb) { return getRootAsStarCatalog_Abridged(_bb, new StarCatalog_Abridged()); }
  public static StarCatalog_Abridged getRootAsStarCatalog_Abridged(ByteBuffer _bb, StarCatalog_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean StarCatalog_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "STAR"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public StarCatalog_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: STAR-CAT-DATASET-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The ID of this object in the specific catalog associated with this record.
   * Example: /// Example: 12345
   * Constraints: No constraints specified.
   */
  public long csId() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
   * Example: /// Example: 12345
   * Constraints: No constraints specified.
   */
  public int gncCatId() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The ID of this object in the Gaia DR3 Catalog.
   * Example: /// Example: 89012345678901
   * Constraints: No constraints specified.
   */
  public long gaiadr3CatId() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * The ID of this object in the Hipparcos Catalog.
   * Example: /// Example: 12345
   * Constraints: No constraints specified.
   */
  public int hipCatId() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The version of the catalog associated with this object.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public String catVersion() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer catVersionAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer catVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
   * Example: /// Example: 14.43
   * Constraints: No constraints specified.
   */
  public double ra() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
   * Example: /// Example: 509.466
   * Constraints: No constraints specified.
   */
  public double raUnc() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
   * Example: /// Example: 21.8
   * Constraints: No constraints specified.
   */
  public double dec() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
   * Example: /// Example: 40.996
   * Constraints: No constraints specified.
   */
  public double decUnc() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean posUncFlag() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Absolute stellar parallax of the source, in milliarcseconds.
   * Example: /// Example: -6.8
   * Constraints: No constraints specified.
   */
  public double parallax() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Uncertainty of the stellar parallax, in milliarcseconds.
   * Example: /// Example: 82.35
   * Constraints: No constraints specified.
   */
  public double parallaxUnc() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
   * Example: /// Example: 1000.45
   * Constraints: No constraints specified.
   */
  public double pmra() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Uncertainty of proper motion in right ascension, in milliarcseconds/year.
   * Example: /// Example: 5.6
   * Constraints: No constraints specified.
   */
  public double pmraUnc() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
   * Example: /// Example: -970.1003
   * Constraints: No constraints specified.
   */
  public double pmdec() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Uncertainty of proper motion in declination, in milliarcseconds/year.
   * Example: /// Example: 1.22
   * Constraints: No constraints specified.
   */
  public double pmdecUnc() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean pmUncFlag() { int o = __offset(40); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
   * Example: /// Example: GAIADR3
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public byte astrometryOrigin() { int o = __offset(42); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
   * Example: /// Example: 2016
   * Constraints: No constraints specified.
   */
  public double starEpoch() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Gaia DR3 optical photometric G-band magnitude in the Vega scale.
   * Example: /// Example: 0.0046
   * Constraints: No constraints specified.
   */
  public double gmag() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
   * Example: /// Example: 0.00292
   * Constraints: No constraints specified.
   */
  public double gmagUnc() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
   * Example: /// Example: 0.04559
   * Constraints: No constraints specified.
   */
  public double bpmag() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
   * Example: /// Example: 0.2227
   * Constraints: No constraints specified.
   */
  public double bpmagUnc() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Gaia DR3 optical Rp-band magnitude in the Vega scale.
   * Example: /// Example: 8.0047
   * Constraints: No constraints specified.
   */
  public double rpmag() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
   * Example: /// Example: 1.233
   * Constraints: No constraints specified.
   */
  public double rpmagUnc() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
   * Example: /// Example: 9.515
   * Constraints: No constraints specified.
   */
  public double jmag() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
   * Example: /// Example: 7.559
   * Constraints: No constraints specified.
   */
  public double jmagUnc() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
   * Example: /// Example: 13.545
   * Constraints: No constraints specified.
   */
  public double kmag() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
   * Example: /// Example: 0.052
   * Constraints: No constraints specified.
   */
  public double kmagUnc() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
   * Example: /// Example: 12.126
   * Constraints: No constraints specified.
   */
  public double hmag() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
   * Example: /// Example: 5.722
   * Constraints: No constraints specified.
   */
  public double hmagUnc() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating that the source exhibits variable magnitude.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean varFlag() { int o = __offset(70); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this is a multiple object source.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean multFlag() { int o = __offset(72); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The catalog ID of the nearest neighbor to this source.
   * Example: /// Example: 2456
   * Constraints: No constraints specified.
   */
  public int neighborId() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean neighborFlag() { int o = __offset(76); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Distance between source and nearest neighbor, in arcseconds.
   * Example: /// Example: 201.406
   * Constraints: No constraints specified.
   */
  public double neighborDistance() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean shiftFlag() { int o = __offset(80); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Photocentric shift caused by neighbors, in arcseconds.
   * Example: /// Example: 4.548
   * Constraints: No constraints specified.
   */
  public double shift() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Time the row was updated in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Application user who updated the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String origNetwork() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(98); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createStarCatalog_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      long csId,
      int gncCatId,
      long gaiadr3CatId,
      int hipCatId,
      int catVersionOffset,
      double ra,
      double raUnc,
      double dec,
      double decUnc,
      boolean posUncFlag,
      double parallax,
      double parallaxUnc,
      double pmra,
      double pmraUnc,
      double pmdec,
      double pmdecUnc,
      boolean pmUncFlag,
      byte astrometryOrigin,
      double starEpoch,
      double gmag,
      double gmagUnc,
      double bpmag,
      double bpmagUnc,
      double rpmag,
      double rpmagUnc,
      double jmag,
      double jmagUnc,
      double kmag,
      double kmagUnc,
      double hmag,
      double hmagUnc,
      boolean varFlag,
      boolean multFlag,
      int neighborId,
      boolean neighborFlag,
      double neighborDistance,
      boolean shiftFlag,
      double shift,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(48);
    StarCatalog_Abridged.addShift(builder, shift);
    StarCatalog_Abridged.addNeighborDistance(builder, neighborDistance);
    StarCatalog_Abridged.addHmagUnc(builder, hmagUnc);
    StarCatalog_Abridged.addHmag(builder, hmag);
    StarCatalog_Abridged.addKmagUnc(builder, kmagUnc);
    StarCatalog_Abridged.addKmag(builder, kmag);
    StarCatalog_Abridged.addJmagUnc(builder, jmagUnc);
    StarCatalog_Abridged.addJmag(builder, jmag);
    StarCatalog_Abridged.addRpmagUnc(builder, rpmagUnc);
    StarCatalog_Abridged.addRpmag(builder, rpmag);
    StarCatalog_Abridged.addBpmagUnc(builder, bpmagUnc);
    StarCatalog_Abridged.addBpmag(builder, bpmag);
    StarCatalog_Abridged.addGmagUnc(builder, gmagUnc);
    StarCatalog_Abridged.addGmag(builder, gmag);
    StarCatalog_Abridged.addStarEpoch(builder, starEpoch);
    StarCatalog_Abridged.addPmdecUnc(builder, pmdecUnc);
    StarCatalog_Abridged.addPmdec(builder, pmdec);
    StarCatalog_Abridged.addPmraUnc(builder, pmraUnc);
    StarCatalog_Abridged.addPmra(builder, pmra);
    StarCatalog_Abridged.addParallaxUnc(builder, parallaxUnc);
    StarCatalog_Abridged.addParallax(builder, parallax);
    StarCatalog_Abridged.addDecUnc(builder, decUnc);
    StarCatalog_Abridged.addDec(builder, dec);
    StarCatalog_Abridged.addRaUnc(builder, raUnc);
    StarCatalog_Abridged.addRa(builder, ra);
    StarCatalog_Abridged.addGaiadr3CatId(builder, gaiadr3CatId);
    StarCatalog_Abridged.addCsId(builder, csId);
    StarCatalog_Abridged.addOrigNetwork(builder, origNetworkOffset);
    StarCatalog_Abridged.addOrigin(builder, originOffset);
    StarCatalog_Abridged.addSource(builder, sourceOffset);
    StarCatalog_Abridged.addUpdatedBy(builder, updatedByOffset);
    StarCatalog_Abridged.addUpdatedAt(builder, updatedAtOffset);
    StarCatalog_Abridged.addCreatedBy(builder, createdByOffset);
    StarCatalog_Abridged.addCreatedAt(builder, createdAtOffset);
    StarCatalog_Abridged.addNeighborId(builder, neighborId);
    StarCatalog_Abridged.addCatVersion(builder, catVersionOffset);
    StarCatalog_Abridged.addHipCatId(builder, hipCatId);
    StarCatalog_Abridged.addGncCatId(builder, gncCatId);
    StarCatalog_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    StarCatalog_Abridged.addId(builder, idOffset);
    StarCatalog_Abridged.addDataMode(builder, dataMode);
    StarCatalog_Abridged.addShiftFlag(builder, shiftFlag);
    StarCatalog_Abridged.addNeighborFlag(builder, neighborFlag);
    StarCatalog_Abridged.addMultFlag(builder, multFlag);
    StarCatalog_Abridged.addVarFlag(builder, varFlag);
    StarCatalog_Abridged.addAstrometryOrigin(builder, astrometryOrigin);
    StarCatalog_Abridged.addPmUncFlag(builder, pmUncFlag);
    StarCatalog_Abridged.addPosUncFlag(builder, posUncFlag);
    return StarCatalog_Abridged.endStarCatalog_Abridged(builder);
  }

  public static void startStarCatalog_Abridged(FlatBufferBuilder builder) { builder.startTable(48); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addCsId(FlatBufferBuilder builder, long csId) { builder.addLong(2, csId, 0L); }
  public static void addGncCatId(FlatBufferBuilder builder, int gncCatId) { builder.addInt(3, gncCatId, 0); }
  public static void addGaiadr3CatId(FlatBufferBuilder builder, long gaiadr3CatId) { builder.addLong(4, gaiadr3CatId, 0L); }
  public static void addHipCatId(FlatBufferBuilder builder, int hipCatId) { builder.addInt(5, hipCatId, 0); }
  public static void addCatVersion(FlatBufferBuilder builder, int catVersionOffset) { builder.addOffset(6, catVersionOffset, 0); }
  public static void addRa(FlatBufferBuilder builder, double ra) { builder.addDouble(7, ra, 0.0); }
  public static void addRaUnc(FlatBufferBuilder builder, double raUnc) { builder.addDouble(8, raUnc, 0.0); }
  public static void addDec(FlatBufferBuilder builder, double dec) { builder.addDouble(9, dec, 0.0); }
  public static void addDecUnc(FlatBufferBuilder builder, double decUnc) { builder.addDouble(10, decUnc, 0.0); }
  public static void addPosUncFlag(FlatBufferBuilder builder, boolean posUncFlag) { builder.addBoolean(11, posUncFlag, false); }
  public static void addParallax(FlatBufferBuilder builder, double parallax) { builder.addDouble(12, parallax, 0.0); }
  public static void addParallaxUnc(FlatBufferBuilder builder, double parallaxUnc) { builder.addDouble(13, parallaxUnc, 0.0); }
  public static void addPmra(FlatBufferBuilder builder, double pmra) { builder.addDouble(14, pmra, 0.0); }
  public static void addPmraUnc(FlatBufferBuilder builder, double pmraUnc) { builder.addDouble(15, pmraUnc, 0.0); }
  public static void addPmdec(FlatBufferBuilder builder, double pmdec) { builder.addDouble(16, pmdec, 0.0); }
  public static void addPmdecUnc(FlatBufferBuilder builder, double pmdecUnc) { builder.addDouble(17, pmdecUnc, 0.0); }
  public static void addPmUncFlag(FlatBufferBuilder builder, boolean pmUncFlag) { builder.addBoolean(18, pmUncFlag, false); }
  public static void addAstrometryOrigin(FlatBufferBuilder builder, byte astrometryOrigin) { builder.addByte(19, astrometryOrigin, 0); }
  public static void addStarEpoch(FlatBufferBuilder builder, double starEpoch) { builder.addDouble(20, starEpoch, 0.0); }
  public static void addGmag(FlatBufferBuilder builder, double gmag) { builder.addDouble(21, gmag, 0.0); }
  public static void addGmagUnc(FlatBufferBuilder builder, double gmagUnc) { builder.addDouble(22, gmagUnc, 0.0); }
  public static void addBpmag(FlatBufferBuilder builder, double bpmag) { builder.addDouble(23, bpmag, 0.0); }
  public static void addBpmagUnc(FlatBufferBuilder builder, double bpmagUnc) { builder.addDouble(24, bpmagUnc, 0.0); }
  public static void addRpmag(FlatBufferBuilder builder, double rpmag) { builder.addDouble(25, rpmag, 0.0); }
  public static void addRpmagUnc(FlatBufferBuilder builder, double rpmagUnc) { builder.addDouble(26, rpmagUnc, 0.0); }
  public static void addJmag(FlatBufferBuilder builder, double jmag) { builder.addDouble(27, jmag, 0.0); }
  public static void addJmagUnc(FlatBufferBuilder builder, double jmagUnc) { builder.addDouble(28, jmagUnc, 0.0); }
  public static void addKmag(FlatBufferBuilder builder, double kmag) { builder.addDouble(29, kmag, 0.0); }
  public static void addKmagUnc(FlatBufferBuilder builder, double kmagUnc) { builder.addDouble(30, kmagUnc, 0.0); }
  public static void addHmag(FlatBufferBuilder builder, double hmag) { builder.addDouble(31, hmag, 0.0); }
  public static void addHmagUnc(FlatBufferBuilder builder, double hmagUnc) { builder.addDouble(32, hmagUnc, 0.0); }
  public static void addVarFlag(FlatBufferBuilder builder, boolean varFlag) { builder.addBoolean(33, varFlag, false); }
  public static void addMultFlag(FlatBufferBuilder builder, boolean multFlag) { builder.addBoolean(34, multFlag, false); }
  public static void addNeighborId(FlatBufferBuilder builder, int neighborId) { builder.addInt(35, neighborId, 0); }
  public static void addNeighborFlag(FlatBufferBuilder builder, boolean neighborFlag) { builder.addBoolean(36, neighborFlag, false); }
  public static void addNeighborDistance(FlatBufferBuilder builder, double neighborDistance) { builder.addDouble(37, neighborDistance, 0.0); }
  public static void addShiftFlag(FlatBufferBuilder builder, boolean shiftFlag) { builder.addBoolean(38, shiftFlag, false); }
  public static void addShift(FlatBufferBuilder builder, double shift) { builder.addDouble(39, shift, 0.0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(40, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(41, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(42, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(43, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(44, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(45, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(46, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(47, dataMode, 0); }
  public static int endStarCatalog_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishStarCatalog_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "STAR"); }
  public static void finishSizePrefixedStarCatalog_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "STAR"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public StarCatalog_Abridged get(int j) { return get(new StarCatalog_Abridged(), j); }
    public StarCatalog_Abridged get(StarCatalog_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

