// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
 */
@SuppressWarnings("unused")
public final class Site_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Site_Ingest getRootAsSite_Ingest(ByteBuffer _bb) { return getRootAsSite_Ingest(_bb, new Site_Ingest()); }
  public static Site_Ingest getRootAsSite_Ingest(ByteBuffer _bb, Site_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Site_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SITE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Site_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SITE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String entity() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the parent entity. idEntity is required for Put.
   * Example: /// Example: ENTITY-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idEntity() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEntityAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idEntityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the Parent Site record associated with this Site record.
   * Example: /// Example: ID-Parent-Site
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idParentSite() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idParentSiteAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idParentSiteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the Site record from the originating system.
   * Example: /// Example: ORIG-SITE-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origSiteId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSiteIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer origSiteIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the LZ record from the originating system.
   * Example: /// Example: ORIG-LZ-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origLzId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origLzIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer origLzIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Site number of a specific electronic site or its associated equipment.
   * Example: /// Example: 25200
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String pin() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pinAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer pinInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
   * Example: /// Example: AIRBASE
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String type() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
   * Example: /// Example: MILITARY
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String usage() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer usageAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer usageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
   * AF - Airfield
   * FD - Field
   * HC - High Crop.  1 meter and over.
   * HY - Highway
   * LB - Lake Bed
   * LC - Low Crop.  0-1 meters
   * O - Other. Explain In Remarks.
   * PD - Paddy
   * PK - Park
   * PS - Pasture
   * RB - Riverbed
   * SP - Sport Field
   * U - Unknown
   * Z - Inconclusive Analysis.
   * Example: /// Example: AF
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String lzUsage() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lzUsageAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer lzUsageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The name of this site.
   * Example: /// Example: Site Name
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String name() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: WGS
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String coordDatum() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer coordDatumAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer coordDatumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
   * Pos. 1-2.  Latitude Degrees     [00-90]
   * Pos. 3-4.  Latitude Minutes     [00-59]
   * Pos. 5-6.  Latitude Seconds     [00-59]
   * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
   * Pos. 10. Latitude Hemisphere       [NS] 
   * Pos. 11-13. Longitude Degrees     [00-180] 
   * Pos. 14-15. Longitude Minutes     [00-59] 
   * Pos. 16-17. Longitude Seconds     [00-59] 
   * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
   * Pos. 21. Longitude Hemisphere     [EW]
   * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
   * Example: /// Example: 340000000N0430000000E
   * Constraints: Minimum length = 0, Maximum length = 21
   */
  public String coord() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer coordAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer coordInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Indicates the plus or minus error assessed against the method used to derive the coordinate.
   * Example: /// Example: 12.345
   * Constraints: No constraints specified.
   */
  public double coordDerivAcc() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
   * Example: /// Example: BB002
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String osuffix() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer osuffixAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer osuffixInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The International Air Transport Association (IATA) code of this site, if applicable.
   * Example: /// Example: AAA
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String iata() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iataAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer iataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) code of this site, if applicable.
   * Example: /// Example: ICA1
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String icao() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer icaoAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer icaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
   * Example: /// Example: FAA1
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String faa() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer faaAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer faaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
   * Example: /// Example: AL006
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String airDefArea() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer airDefAreaAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer airDefAreaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Universal Transverse Mercator (UTM) grid coordinates.
   * Pos. 1-2, UTM Zone Column   [01-60
   * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
   * Pos. 4, UTM False Easting   [0-9]
   * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
   * Pos. 10-11, UTM False Northing    [0-9][0-9]
   * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
   * Example: /// Example: 19P4390691376966
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String utm() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer utmAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer utmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Indicates the grid system used in the development of the milGrid coordinates. Values are:
   * UPS - Universal Polar System
   * UTM - Universal Transverse Mercator.
   * Example: /// Example: UTM
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String milGridSys() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer milGridSysAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer milGridSysInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
   * 4Q (grid zone designator, GZD)
   * FJ (the 100,000-meter square identifier)
   * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
   * Example: /// Example: 4QFJ12345678
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String milGrid() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer milGridAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer milGridInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The category code that represents the associated site purpose within the target system.
   * Example: /// Example: 20345
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String catCode() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer catCodeAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer catCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Textual Description of Site catCode.
   * Example: /// Example: Radar Facility, General
   * Constraints: Minimum length = 0, Maximum length = 148
   */
  public String catText() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer catTextAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer catTextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * World Aeronautical Chart identifier for the area in which a designated place is located.
   * Example: /// Example: 0427
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String wac() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wacAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer wacInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: IZO7
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public String polSubdiv() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer polSubdivAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer polSubdivInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: E2
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String geoArea() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geoAreaAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer geoAreaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * The distance between Mean Sea Level and a referenced ellipsoid, in meters.
   * Example: /// Example: 12.34
   * Constraints: No constraints specified.
   */
  public double geoidalMslSep() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
   * Example: /// Example: OTHR
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String allegiance() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer allegianceAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer allegianceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
   * Example: /// Example: HL
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String altAllegiance() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altAllegianceAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer altAllegianceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
   * 0 - Does not meet criteria above
   * 1 - Primary importance to system
   * 2 - Secondary importance to system
   * 3 - Tertiary importance to system
   * O - Other. Explain in Remarks.
   * Example: /// Example: 1
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String classRating() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classRatingAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer classRatingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: EOB
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String fpa() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fpaAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer fpaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
   * Example: /// Example: 0427RT1030
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String beNumber() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer beNumberAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer beNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * The number of runways at the site, if applicable.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int runways() { int o = __offset(72); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The length of the longest runway at this site, if applicable, in meters.
   * Example: /// Example: 1000
   * Constraints: No constraints specified.
   */
  public int maxRunwayLength() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: RDY
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String condition() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer conditionAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer conditionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String conditionAvail() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer conditionAvailAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer conditionAvailInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: OPR
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String operStatus() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operStatusAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer operStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int grade() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: OCC
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String activity() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer activityAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer activityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: JG
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String functPrimary() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer functPrimaryAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer functPrimaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: AA
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String msnPrimary() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnPrimaryAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer msnPrimaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: AB
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String msnPrimarySpec() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnPrimarySpecAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer msnPrimarySpecInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * A sites ability to conduct nuclear warfare. Valid Values are:
   * A - Nuclear Ammo Or Warheads Available
   * N - No Nuclear Offense
   * O - Other. Explain in Remarks
   * U - Unknown
   * W - Nuclear Weapons Available
   * Y - Nuclear Warfare Offensive Capability
   * Z - Inconclusive Analysis.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String nucCap() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nucCapAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer nucCapInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
   * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
   * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
   * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
   * FAKER: Friendly track, object, or entity acting as an exercise hostile.
   * JOKER: Friendly track, object, or entity acting as an exercise suspect.
   * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
   * PENDING: Track object which has not been evaluated.
   * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
   * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
   * Example: /// Example: FRIEND
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String ident() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer identAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer identInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
   * Example: /// Example: 123.45
   * Constraints: No constraints specified.
   */
  public double elevMsl() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
   * Example: /// Example: 50
   * Constraints: No constraints specified.
   */
  public int elevMslConfLvl() { int o = __offset(98); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Indicates the plus or minus error assessed against the method used to derive the elevation.
   * Example: /// Example: 12.34
   * Constraints: No constraints specified.
   */
  public double elevMslDerivAcc() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public double vegHt() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: FR
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String vegType() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vegTypeAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer vegTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean popArea() { int o = __offset(106); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
   * Example: /// Example: 12.345
   * Constraints: No constraints specified.
   */
  public double popAreaProx() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional notes/comments for the site.
   * Example: /// Example: Example Notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Responsible Producer - Organization that is responsible for the maintenance of the record.
   * Example: /// Example: RT
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String resProd() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resProdAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer resProdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
   * Example: /// Example: 7
   * Constraints: No constraints specified.
   */
  public int eval() { int o = __offset(114); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
   * Example: /// Example: 2008-06-10
   * Constraints: No constraints specified.
   */
  public String reviewDate() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reviewDateAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer reviewDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
   * A - Active
   * I - Inactive
   * K - Acknowledged
   * L - Local
   * Q - A nominated (NOM) or Data Change Request (DCR) record
   * R - Production reduced by CMD decision
   * W - Working Record.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String recStatus() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recStatusAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer recStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
   * Example: /// Example: SOGPU----------
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String symCode() { int o = __offset(120); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer symCodeAsByteBuffer() { return __vector_as_bytebuffer(120, 1); }
  public ByteBuffer symCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 1); }
  /**
   * The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: Provider Reference Documentation
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String referenceDoc() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer referenceDocAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer referenceDocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(132); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(132, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 132, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(134); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createSite_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int entityOffset,
      int idEntityOffset,
      int idParentSiteOffset,
      int classificationMarkingOffset,
      int origSiteIdOffset,
      int origLzIdOffset,
      int pinOffset,
      int typeOffset,
      int usageOffset,
      int lzUsageOffset,
      int nameOffset,
      int coordDatumOffset,
      int coordOffset,
      double coordDerivAcc,
      int osuffixOffset,
      int iataOffset,
      int icaoOffset,
      int faaOffset,
      int airDefAreaOffset,
      int utmOffset,
      int milGridSysOffset,
      int milGridOffset,
      int catCodeOffset,
      int catTextOffset,
      int wacOffset,
      int polSubdivOffset,
      int geoAreaOffset,
      double geoidalMslSep,
      int allegianceOffset,
      int altAllegianceOffset,
      int classRatingOffset,
      int fpaOffset,
      int beNumberOffset,
      int runways,
      int maxRunwayLength,
      int conditionOffset,
      int conditionAvailOffset,
      int operStatusOffset,
      int grade,
      int activityOffset,
      int functPrimaryOffset,
      int msnPrimaryOffset,
      int msnPrimarySpecOffset,
      int nucCapOffset,
      int identOffset,
      double elevMsl,
      int elevMslConfLvl,
      double elevMslDerivAcc,
      double vegHt,
      int vegTypeOffset,
      boolean popArea,
      double popAreaProx,
      int notesOffset,
      int resProdOffset,
      int eval,
      int reviewDateOffset,
      int recStatusOffset,
      int symCodeOffset,
      int referenceDocOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(66);
    Site_Ingest.addPopAreaProx(builder, popAreaProx);
    Site_Ingest.addVegHt(builder, vegHt);
    Site_Ingest.addElevMslDerivAcc(builder, elevMslDerivAcc);
    Site_Ingest.addElevMsl(builder, elevMsl);
    Site_Ingest.addGeoidalMslSep(builder, geoidalMslSep);
    Site_Ingest.addCoordDerivAcc(builder, coordDerivAcc);
    Site_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Site_Ingest.addOrigin(builder, originOffset);
    Site_Ingest.addSource(builder, sourceOffset);
    Site_Ingest.addCreatedBy(builder, createdByOffset);
    Site_Ingest.addCreatedAt(builder, createdAtOffset);
    Site_Ingest.addReferenceDoc(builder, referenceDocOffset);
    Site_Ingest.addSymCode(builder, symCodeOffset);
    Site_Ingest.addRecStatus(builder, recStatusOffset);
    Site_Ingest.addReviewDate(builder, reviewDateOffset);
    Site_Ingest.addEval(builder, eval);
    Site_Ingest.addResProd(builder, resProdOffset);
    Site_Ingest.addNotes(builder, notesOffset);
    Site_Ingest.addVegType(builder, vegTypeOffset);
    Site_Ingest.addElevMslConfLvl(builder, elevMslConfLvl);
    Site_Ingest.addIdent(builder, identOffset);
    Site_Ingest.addNucCap(builder, nucCapOffset);
    Site_Ingest.addMsnPrimarySpec(builder, msnPrimarySpecOffset);
    Site_Ingest.addMsnPrimary(builder, msnPrimaryOffset);
    Site_Ingest.addFunctPrimary(builder, functPrimaryOffset);
    Site_Ingest.addActivity(builder, activityOffset);
    Site_Ingest.addGrade(builder, grade);
    Site_Ingest.addOperStatus(builder, operStatusOffset);
    Site_Ingest.addConditionAvail(builder, conditionAvailOffset);
    Site_Ingest.addCondition(builder, conditionOffset);
    Site_Ingest.addMaxRunwayLength(builder, maxRunwayLength);
    Site_Ingest.addRunways(builder, runways);
    Site_Ingest.addBeNumber(builder, beNumberOffset);
    Site_Ingest.addFpa(builder, fpaOffset);
    Site_Ingest.addClassRating(builder, classRatingOffset);
    Site_Ingest.addAltAllegiance(builder, altAllegianceOffset);
    Site_Ingest.addAllegiance(builder, allegianceOffset);
    Site_Ingest.addGeoArea(builder, geoAreaOffset);
    Site_Ingest.addPolSubdiv(builder, polSubdivOffset);
    Site_Ingest.addWac(builder, wacOffset);
    Site_Ingest.addCatText(builder, catTextOffset);
    Site_Ingest.addCatCode(builder, catCodeOffset);
    Site_Ingest.addMilGrid(builder, milGridOffset);
    Site_Ingest.addMilGridSys(builder, milGridSysOffset);
    Site_Ingest.addUtm(builder, utmOffset);
    Site_Ingest.addAirDefArea(builder, airDefAreaOffset);
    Site_Ingest.addFaa(builder, faaOffset);
    Site_Ingest.addIcao(builder, icaoOffset);
    Site_Ingest.addIata(builder, iataOffset);
    Site_Ingest.addOsuffix(builder, osuffixOffset);
    Site_Ingest.addCoord(builder, coordOffset);
    Site_Ingest.addCoordDatum(builder, coordDatumOffset);
    Site_Ingest.addName(builder, nameOffset);
    Site_Ingest.addLzUsage(builder, lzUsageOffset);
    Site_Ingest.addUsage(builder, usageOffset);
    Site_Ingest.addType(builder, typeOffset);
    Site_Ingest.addPin(builder, pinOffset);
    Site_Ingest.addOrigLzId(builder, origLzIdOffset);
    Site_Ingest.addOrigSiteId(builder, origSiteIdOffset);
    Site_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Site_Ingest.addIdParentSite(builder, idParentSiteOffset);
    Site_Ingest.addIdEntity(builder, idEntityOffset);
    Site_Ingest.addEntity(builder, entityOffset);
    Site_Ingest.addId(builder, idOffset);
    Site_Ingest.addDataMode(builder, dataMode);
    Site_Ingest.addPopArea(builder, popArea);
    return Site_Ingest.endSite_Ingest(builder);
  }

  public static void startSite_Ingest(FlatBufferBuilder builder) { builder.startTable(66); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(1, entityOffset, 0); }
  public static void addIdEntity(FlatBufferBuilder builder, int idEntityOffset) { builder.addOffset(2, idEntityOffset, 0); }
  public static void addIdParentSite(FlatBufferBuilder builder, int idParentSiteOffset) { builder.addOffset(3, idParentSiteOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(4, classificationMarkingOffset, 0); }
  public static void addOrigSiteId(FlatBufferBuilder builder, int origSiteIdOffset) { builder.addOffset(5, origSiteIdOffset, 0); }
  public static void addOrigLzId(FlatBufferBuilder builder, int origLzIdOffset) { builder.addOffset(6, origLzIdOffset, 0); }
  public static void addPin(FlatBufferBuilder builder, int pinOffset) { builder.addOffset(7, pinOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(8, typeOffset, 0); }
  public static void addUsage(FlatBufferBuilder builder, int usageOffset) { builder.addOffset(9, usageOffset, 0); }
  public static void addLzUsage(FlatBufferBuilder builder, int lzUsageOffset) { builder.addOffset(10, lzUsageOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(11, nameOffset, 0); }
  public static void addCoordDatum(FlatBufferBuilder builder, int coordDatumOffset) { builder.addOffset(12, coordDatumOffset, 0); }
  public static void addCoord(FlatBufferBuilder builder, int coordOffset) { builder.addOffset(13, coordOffset, 0); }
  public static void addCoordDerivAcc(FlatBufferBuilder builder, double coordDerivAcc) { builder.addDouble(14, coordDerivAcc, 0.0); }
  public static void addOsuffix(FlatBufferBuilder builder, int osuffixOffset) { builder.addOffset(15, osuffixOffset, 0); }
  public static void addIata(FlatBufferBuilder builder, int iataOffset) { builder.addOffset(16, iataOffset, 0); }
  public static void addIcao(FlatBufferBuilder builder, int icaoOffset) { builder.addOffset(17, icaoOffset, 0); }
  public static void addFaa(FlatBufferBuilder builder, int faaOffset) { builder.addOffset(18, faaOffset, 0); }
  public static void addAirDefArea(FlatBufferBuilder builder, int airDefAreaOffset) { builder.addOffset(19, airDefAreaOffset, 0); }
  public static void addUtm(FlatBufferBuilder builder, int utmOffset) { builder.addOffset(20, utmOffset, 0); }
  public static void addMilGridSys(FlatBufferBuilder builder, int milGridSysOffset) { builder.addOffset(21, milGridSysOffset, 0); }
  public static void addMilGrid(FlatBufferBuilder builder, int milGridOffset) { builder.addOffset(22, milGridOffset, 0); }
  public static void addCatCode(FlatBufferBuilder builder, int catCodeOffset) { builder.addOffset(23, catCodeOffset, 0); }
  public static void addCatText(FlatBufferBuilder builder, int catTextOffset) { builder.addOffset(24, catTextOffset, 0); }
  public static void addWac(FlatBufferBuilder builder, int wacOffset) { builder.addOffset(25, wacOffset, 0); }
  public static void addPolSubdiv(FlatBufferBuilder builder, int polSubdivOffset) { builder.addOffset(26, polSubdivOffset, 0); }
  public static void addGeoArea(FlatBufferBuilder builder, int geoAreaOffset) { builder.addOffset(27, geoAreaOffset, 0); }
  public static void addGeoidalMslSep(FlatBufferBuilder builder, double geoidalMslSep) { builder.addDouble(28, geoidalMslSep, 0.0); }
  public static void addAllegiance(FlatBufferBuilder builder, int allegianceOffset) { builder.addOffset(29, allegianceOffset, 0); }
  public static void addAltAllegiance(FlatBufferBuilder builder, int altAllegianceOffset) { builder.addOffset(30, altAllegianceOffset, 0); }
  public static void addClassRating(FlatBufferBuilder builder, int classRatingOffset) { builder.addOffset(31, classRatingOffset, 0); }
  public static void addFpa(FlatBufferBuilder builder, int fpaOffset) { builder.addOffset(32, fpaOffset, 0); }
  public static void addBeNumber(FlatBufferBuilder builder, int beNumberOffset) { builder.addOffset(33, beNumberOffset, 0); }
  public static void addRunways(FlatBufferBuilder builder, int runways) { builder.addInt(34, runways, 0); }
  public static void addMaxRunwayLength(FlatBufferBuilder builder, int maxRunwayLength) { builder.addInt(35, maxRunwayLength, 0); }
  public static void addCondition(FlatBufferBuilder builder, int conditionOffset) { builder.addOffset(36, conditionOffset, 0); }
  public static void addConditionAvail(FlatBufferBuilder builder, int conditionAvailOffset) { builder.addOffset(37, conditionAvailOffset, 0); }
  public static void addOperStatus(FlatBufferBuilder builder, int operStatusOffset) { builder.addOffset(38, operStatusOffset, 0); }
  public static void addGrade(FlatBufferBuilder builder, int grade) { builder.addInt(39, grade, 0); }
  public static void addActivity(FlatBufferBuilder builder, int activityOffset) { builder.addOffset(40, activityOffset, 0); }
  public static void addFunctPrimary(FlatBufferBuilder builder, int functPrimaryOffset) { builder.addOffset(41, functPrimaryOffset, 0); }
  public static void addMsnPrimary(FlatBufferBuilder builder, int msnPrimaryOffset) { builder.addOffset(42, msnPrimaryOffset, 0); }
  public static void addMsnPrimarySpec(FlatBufferBuilder builder, int msnPrimarySpecOffset) { builder.addOffset(43, msnPrimarySpecOffset, 0); }
  public static void addNucCap(FlatBufferBuilder builder, int nucCapOffset) { builder.addOffset(44, nucCapOffset, 0); }
  public static void addIdent(FlatBufferBuilder builder, int identOffset) { builder.addOffset(45, identOffset, 0); }
  public static void addElevMsl(FlatBufferBuilder builder, double elevMsl) { builder.addDouble(46, elevMsl, 0.0); }
  public static void addElevMslConfLvl(FlatBufferBuilder builder, int elevMslConfLvl) { builder.addInt(47, elevMslConfLvl, 0); }
  public static void addElevMslDerivAcc(FlatBufferBuilder builder, double elevMslDerivAcc) { builder.addDouble(48, elevMslDerivAcc, 0.0); }
  public static void addVegHt(FlatBufferBuilder builder, double vegHt) { builder.addDouble(49, vegHt, 0.0); }
  public static void addVegType(FlatBufferBuilder builder, int vegTypeOffset) { builder.addOffset(50, vegTypeOffset, 0); }
  public static void addPopArea(FlatBufferBuilder builder, boolean popArea) { builder.addBoolean(51, popArea, false); }
  public static void addPopAreaProx(FlatBufferBuilder builder, double popAreaProx) { builder.addDouble(52, popAreaProx, 0.0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(53, notesOffset, 0); }
  public static void addResProd(FlatBufferBuilder builder, int resProdOffset) { builder.addOffset(54, resProdOffset, 0); }
  public static void addEval(FlatBufferBuilder builder, int eval) { builder.addInt(55, eval, 0); }
  public static void addReviewDate(FlatBufferBuilder builder, int reviewDateOffset) { builder.addOffset(56, reviewDateOffset, 0); }
  public static void addRecStatus(FlatBufferBuilder builder, int recStatusOffset) { builder.addOffset(57, recStatusOffset, 0); }
  public static void addSymCode(FlatBufferBuilder builder, int symCodeOffset) { builder.addOffset(58, symCodeOffset, 0); }
  public static void addReferenceDoc(FlatBufferBuilder builder, int referenceDocOffset) { builder.addOffset(59, referenceDocOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(60, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(61, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(62, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(63, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(64, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(65, dataMode, 0); }
  public static int endSite_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSite_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SITE"); }
  public static void finishSizePrefixedSite_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SITE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Site_Ingest get(int j) { return get(new Site_Ingest(), j); }
    public Site_Ingest get(Site_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

