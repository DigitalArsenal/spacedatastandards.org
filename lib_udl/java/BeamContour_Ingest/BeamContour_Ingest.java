// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
 */
@SuppressWarnings("unused")
public final class BeamContour_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static BeamContour_Ingest getRootAsBeamContour_Ingest(ByteBuffer _bb) { return getRootAsBeamContour_Ingest(_bb, new BeamContour_Ingest()); }
  public static BeamContour_Ingest getRootAsBeamContour_Ingest(ByteBuffer _bb, BeamContour_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean BeamContour_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "BEAM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BeamContour_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: BEAMCONTOUR-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * ID of the beam.
   * Example: /// Example: REF-BEAM-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idBeam() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idBeamAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idBeamInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
   * Example: /// Example: BORESIGHT
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public byte type() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The index number of this contour. The value is required if type = CONTOUR.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public int contourIdx() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
   * Example: /// Example: 17.1
   * Constraints: No constraints specified.
   */
  public double gain() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The region name within the service area.
   * Example: /// Example: Example region name
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String regionName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer regionNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
   * Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
   * Constraints: No constraints specified.
   */
  public String geography() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geographyAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer geographyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String geographyText() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geographyTextAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer geographyTextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: No constraints specified.
   */
  public String geographyJson() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geographyJsonAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer geographyJsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Type of region as projected.
   * Example: /// Example: ST_Polygon
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String geographyType() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geographyTypeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer geographyTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public int geographyNdims() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 4326
   * Constraints: No constraints specified.
   */
  public int geographySrid() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(40); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createBeamContour_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idBeamOffset,
      byte type,
      int contourIdx,
      double gain,
      int regionNameOffset,
      int geographyOffset,
      int geographyTextOffset,
      int geographyJsonOffset,
      int geographyTypeOffset,
      int geographyNdims,
      int geographySrid,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(19);
    BeamContour_Ingest.addGain(builder, gain);
    BeamContour_Ingest.addOrigNetwork(builder, origNetworkOffset);
    BeamContour_Ingest.addOrigin(builder, originOffset);
    BeamContour_Ingest.addSource(builder, sourceOffset);
    BeamContour_Ingest.addCreatedBy(builder, createdByOffset);
    BeamContour_Ingest.addCreatedAt(builder, createdAtOffset);
    BeamContour_Ingest.addGeographySrid(builder, geographySrid);
    BeamContour_Ingest.addGeographyNdims(builder, geographyNdims);
    BeamContour_Ingest.addGeographyType(builder, geographyTypeOffset);
    BeamContour_Ingest.addGeographyJson(builder, geographyJsonOffset);
    BeamContour_Ingest.addGeographyText(builder, geographyTextOffset);
    BeamContour_Ingest.addGeography(builder, geographyOffset);
    BeamContour_Ingest.addRegionName(builder, regionNameOffset);
    BeamContour_Ingest.addContourIdx(builder, contourIdx);
    BeamContour_Ingest.addIdBeam(builder, idBeamOffset);
    BeamContour_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    BeamContour_Ingest.addId(builder, idOffset);
    BeamContour_Ingest.addDataMode(builder, dataMode);
    BeamContour_Ingest.addType(builder, type);
    return BeamContour_Ingest.endBeamContour_Ingest(builder);
  }

  public static void startBeamContour_Ingest(FlatBufferBuilder builder) { builder.startTable(19); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdBeam(FlatBufferBuilder builder, int idBeamOffset) { builder.addOffset(2, idBeamOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(3, type, 0); }
  public static void addContourIdx(FlatBufferBuilder builder, int contourIdx) { builder.addInt(4, contourIdx, 0); }
  public static void addGain(FlatBufferBuilder builder, double gain) { builder.addDouble(5, gain, 0.0); }
  public static void addRegionName(FlatBufferBuilder builder, int regionNameOffset) { builder.addOffset(6, regionNameOffset, 0); }
  public static void addGeography(FlatBufferBuilder builder, int geographyOffset) { builder.addOffset(7, geographyOffset, 0); }
  public static void addGeographyText(FlatBufferBuilder builder, int geographyTextOffset) { builder.addOffset(8, geographyTextOffset, 0); }
  public static void addGeographyJson(FlatBufferBuilder builder, int geographyJsonOffset) { builder.addOffset(9, geographyJsonOffset, 0); }
  public static void addGeographyType(FlatBufferBuilder builder, int geographyTypeOffset) { builder.addOffset(10, geographyTypeOffset, 0); }
  public static void addGeographyNdims(FlatBufferBuilder builder, int geographyNdims) { builder.addInt(11, geographyNdims, 0); }
  public static void addGeographySrid(FlatBufferBuilder builder, int geographySrid) { builder.addInt(12, geographySrid, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(13, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(14, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(15, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(16, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(17, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(18, dataMode, 0); }
  public static int endBeamContour_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishBeamContour_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "BEAM"); }
  public static void finishSizePrefixedBeamContour_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "BEAM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BeamContour_Ingest get(int j) { return get(new BeamContour_Ingest(), j); }
    public BeamContour_Ingest get(BeamContour_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

