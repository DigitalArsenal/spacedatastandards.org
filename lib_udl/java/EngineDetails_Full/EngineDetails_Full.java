// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
 */
@SuppressWarnings("unused")
public final class EngineDetails_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EngineDetails_Full getRootAsEngineDetails_Full(ByteBuffer _bb) { return getRootAsEngineDetails_Full(_bb, new EngineDetails_Full()); }
  public static EngineDetails_Full getRootAsEngineDetails_Full(ByteBuffer _bb, EngineDetails_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EngineDetails_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ENGI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EngineDetails_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ENGINEDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the parent engine record.
   * Example: /// Example: ENGINE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idEngine() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEngineAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idEngineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Engine type or family.
   * Example: /// Example: ENGINE_TYPE1
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String family() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer familyAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer familyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
   * Example: /// Example: Pressure Fed
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String cycleType() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cycleTypeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer cycleTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
   * Example: /// Example: Electric
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String characteristicType() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer characteristicTypeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer characteristicTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Organization ID of the engine manufacturer.
   * Example: /// Example: MANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Launch engine specific impulse in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double specificImpulse() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch engine maximum burn time in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double burnTime() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Engine maximum thrust at sea level in Kilo-Newtons.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double seaLevelThrust() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Engine maximum thrust in a vacuum in Kilo-Newtons.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double vacuumThrust() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Engine chamber pressure in bars.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double chamberPressure() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Engine nozzle expansion ratio.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double nozzleExpansionRatio() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Engine maximum number of firings.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int maxFirings() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
   * Example: /// Example: Liquid
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String propellant() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer propellantAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer propellantInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
   * Example: /// Example: Liquid Oxygen
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String oxidizer() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer oxidizerAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer oxidizerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Notes/Description of the engine.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(52); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createEngineDetails_Full(FlatBufferBuilder builder,
      int idOffset,
      int idEngineOffset,
      int classificationMarkingOffset,
      int familyOffset,
      int cycleTypeOffset,
      int characteristicTypeOffset,
      int manufacturerOrgIdOffset,
      double specificImpulse,
      double burnTime,
      double seaLevelThrust,
      double vacuumThrust,
      double chamberPressure,
      double nozzleExpansionRatio,
      int maxFirings,
      int propellantOffset,
      int oxidizerOffset,
      int notesOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int tagsOffset) {
    builder.startTable(26);
    EngineDetails_Full.addNozzleExpansionRatio(builder, nozzleExpansionRatio);
    EngineDetails_Full.addChamberPressure(builder, chamberPressure);
    EngineDetails_Full.addVacuumThrust(builder, vacuumThrust);
    EngineDetails_Full.addSeaLevelThrust(builder, seaLevelThrust);
    EngineDetails_Full.addBurnTime(builder, burnTime);
    EngineDetails_Full.addSpecificImpulse(builder, specificImpulse);
    EngineDetails_Full.addTags(builder, tagsOffset);
    EngineDetails_Full.addOrigNetwork(builder, origNetworkOffset);
    EngineDetails_Full.addOrigin(builder, originOffset);
    EngineDetails_Full.addSource(builder, sourceOffset);
    EngineDetails_Full.addUpdatedBy(builder, updatedByOffset);
    EngineDetails_Full.addUpdatedAt(builder, updatedAtOffset);
    EngineDetails_Full.addCreatedBy(builder, createdByOffset);
    EngineDetails_Full.addCreatedAt(builder, createdAtOffset);
    EngineDetails_Full.addNotes(builder, notesOffset);
    EngineDetails_Full.addOxidizer(builder, oxidizerOffset);
    EngineDetails_Full.addPropellant(builder, propellantOffset);
    EngineDetails_Full.addMaxFirings(builder, maxFirings);
    EngineDetails_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    EngineDetails_Full.addCharacteristicType(builder, characteristicTypeOffset);
    EngineDetails_Full.addCycleType(builder, cycleTypeOffset);
    EngineDetails_Full.addFamily(builder, familyOffset);
    EngineDetails_Full.addClassificationMarking(builder, classificationMarkingOffset);
    EngineDetails_Full.addIdEngine(builder, idEngineOffset);
    EngineDetails_Full.addId(builder, idOffset);
    EngineDetails_Full.addDataMode(builder, dataMode);
    return EngineDetails_Full.endEngineDetails_Full(builder);
  }

  public static void startEngineDetails_Full(FlatBufferBuilder builder) { builder.startTable(26); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdEngine(FlatBufferBuilder builder, int idEngineOffset) { builder.addOffset(1, idEngineOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addFamily(FlatBufferBuilder builder, int familyOffset) { builder.addOffset(3, familyOffset, 0); }
  public static void addCycleType(FlatBufferBuilder builder, int cycleTypeOffset) { builder.addOffset(4, cycleTypeOffset, 0); }
  public static void addCharacteristicType(FlatBufferBuilder builder, int characteristicTypeOffset) { builder.addOffset(5, characteristicTypeOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(6, manufacturerOrgIdOffset, 0); }
  public static void addSpecificImpulse(FlatBufferBuilder builder, double specificImpulse) { builder.addDouble(7, specificImpulse, 0.0); }
  public static void addBurnTime(FlatBufferBuilder builder, double burnTime) { builder.addDouble(8, burnTime, 0.0); }
  public static void addSeaLevelThrust(FlatBufferBuilder builder, double seaLevelThrust) { builder.addDouble(9, seaLevelThrust, 0.0); }
  public static void addVacuumThrust(FlatBufferBuilder builder, double vacuumThrust) { builder.addDouble(10, vacuumThrust, 0.0); }
  public static void addChamberPressure(FlatBufferBuilder builder, double chamberPressure) { builder.addDouble(11, chamberPressure, 0.0); }
  public static void addNozzleExpansionRatio(FlatBufferBuilder builder, double nozzleExpansionRatio) { builder.addDouble(12, nozzleExpansionRatio, 0.0); }
  public static void addMaxFirings(FlatBufferBuilder builder, int maxFirings) { builder.addInt(13, maxFirings, 0); }
  public static void addPropellant(FlatBufferBuilder builder, int propellantOffset) { builder.addOffset(14, propellantOffset, 0); }
  public static void addOxidizer(FlatBufferBuilder builder, int oxidizerOffset) { builder.addOffset(15, oxidizerOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(16, notesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(17, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(18, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(19, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(20, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(21, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(22, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(23, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(24, dataMode, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(25, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEngineDetails_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEngineDetails_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ENGI"); }
  public static void finishSizePrefixedEngineDetails_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ENGI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EngineDetails_Full get(int j) { return get(new EngineDetails_Full(), j); }
    public EngineDetails_Full get(EngineDetails_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

