// automatically generated by the FlatBuffers compiler, do not modify

package Bus_Abridged;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * A bus is the physical and software infrastructure backbone to which on-orbit satellite payloads are attached for power, control, and other support functions.
 */
@SuppressWarnings("unused")
public final class Bus_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Bus_Abridged getRootAsBus_Abridged(ByteBuffer _bb) { return getRootAsBus_Abridged(_bb, new Bus_Abridged()); }
  public static Bus_Abridged getRootAsBus_Abridged(ByteBuffer _bb, Bus_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Bus_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: BUS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Name of this bus.
   * Example: Example name
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * ID of the parent entity for this bus.
   * Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idEntity() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEntityAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idEntityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Type of this bus.
   * Example: Example type
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String type() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Maximum mass at launch, lower bounds, in kilograms.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxLaunchMassLower() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum mass at launch, upper bounds, in kilograms.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxLaunchMassUpper() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum mass on station at beginning of life, in kilograms.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxBOLStationMass() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average mass available on this bus for payloads, in kilograms.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double avgPayloadMass() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum payload mass available, in kilograms.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxPayloadMass() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum mass of this bus without payloads or fuel, in kilograms.
   * Example: 2858.1
   * Constraints: No constraints specified.
   */
  public double minDryMass() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average mass of this bus without payloads or fuel, in kilograms.
   * Example: 2879.1
   * Constraints: No constraints specified.
   */
  public double avgDryMass() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Median mass of this bus without payloads or fuel, in kilograms.
   * Example: 2950.1
   * Constraints: No constraints specified.
   */
  public double medianDryMass() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum mass of this bus without payloads or fuel, in kilograms.
   * Example: 2900.1
   * Constraints: No constraints specified.
   */
  public double maxDryMass() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum mass of this bus with fuel, but without payloads, in kilograms.
   * Example: 5192.1
   * Constraints: No constraints specified.
   */
  public double minWetMass() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average mass of this bus with fuel, but without payloads, in kilograms.
   * Example: 5246.1
   * Constraints: No constraints specified.
   */
  public double avgWetMass() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Median mass of this bus with fuel, but without payloads, in kilograms.
   * Example: 5260.1
   * Constraints: No constraints specified.
   */
  public double medianWetMass() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum mass of this bus with fuel, but without payloads, in kilograms.
   * Example: 5300.0
   * Constraints: No constraints specified.
   */
  public double maxWetMass() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum power at beginning of life, lower bounds, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxBOLPowerLower() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum power at beginning of life, upper bounds, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxBOLPowerUpper() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum power at end of life, lower bounds, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxEOLPowerLower() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum power at end of life, upper bounds, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxEOLPowerUpper() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average power available on this bus, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double avgSpacecraftPower() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum power available on this bus, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxSpacecraftPower() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Orbit averaged power (the power averaged over one orbit) available on this bus, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double oapSpacecraftPower() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average power available on this bus for payloads, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double avgPayloadPower() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum payload power available, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double maxPayloadPower() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Orbit averaged power (the power averaged over one orbit) available on this bus for payloads, in kilowatts.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double oapPayloadPower() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Body dimension in X direction pertaining to length, in meters.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double bodyDimensionX() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Body dimension in Y direction pertaining to height, in meters.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double bodyDimensionY() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Body dimension in Z direction pertaining to width, in meters.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double bodyDimensionZ() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The radial dimension available on this bus for payloads, in meters.
   * Example: 1.1
   * Constraints: No constraints specified.
   */
  public double payloadDimensionX() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The in-track dimension available on this bus for payloads, in meters.
   * Example: 1.1
   * Constraints: No constraints specified.
   */
  public double payloadDimensionY() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The cross-track dimension available on this bus for payloads, in meters.
   * Example: 1.1
   * Constraints: No constraints specified.
   */
  public double payloadDimensionZ() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The volume available on this bus for payloads, in cubic meters.
   * Example: 1.1
   * Constraints: No constraints specified.
   */
  public double payloadVolume() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch envelope dimension in X direction, in meters.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double launchEnvelopeDimensionX() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch envelope dimension in Y direction, in meters.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double launchEnvelopeDimensionY() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Launch envelope dimension in Z direction, in meters.
   * Example: 10.1
   * Constraints: No constraints specified.
   */
  public double launchEnvelopeDimensionZ() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of orbit types this bus can support.
   * Example: 3
   * Constraints: No constraints specified.
   */
  public int numOrbitType() { int o = __offset(80); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Unique identifier of the organization which manufactures the telemetry tracking and command subsystem for this bus.
   * Example: TELEMETRYTRACKINGMANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String telemetryTrackingManufacturerOrgId() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer telemetryTrackingManufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer telemetryTrackingManufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Unique identifier of the organization which manufactures the main onboard computer for this bus.
   * Example: MAINCOMPUTERMANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String mainComputerManufacturerOrgId() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mainComputerManufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer mainComputerManufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Unique identifier of the organization which manufactures this bus.
   * Example: MANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Unique identifier of the organization which designs the bus kit.
   * Example: BUSKITDESIGNERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String busKitDesignerOrgId() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer busKitDesignerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer busKitDesignerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Country where this bus was manufactured. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
   * Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * Mass category of this bus (e.g. 1 - 10 kg: Nanosatellite, 10 - 100 kg: Microsatellite, 100 - 500 kg: Minisatellite, 1000 - 2500kg: Medium satellite, etc.).
   * Example: Nanosatellite
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String massCategory() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer massCategoryAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer massCategoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Power category of this bus (e.g. 0-1kW low power, etc).
   * Example: low power
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String powerCategory() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer powerCategoryAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer powerCategoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Boolean indicating if this bus is generic.
   * Example: False
   * Constraints: No constraints specified.
   */
  public boolean generic() { int o = __offset(96); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Notes/description of the bus.
   * Example: Dedicated small spacecraft bus.
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String description() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Attitude and Orbital Control Notes/description for the bus.
   * Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String aocsNotes() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aocsNotesAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer aocsNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Source of the data.
   * Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data: EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data. REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis. SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets. TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics. 
   * Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(108); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }

  public static int createBus_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int nameOffset,
      int classificationMarkingOffset,
      int idEntityOffset,
      int typeOffset,
      double maxLaunchMassLower,
      double maxLaunchMassUpper,
      double maxBOLStationMass,
      double avgPayloadMass,
      double maxPayloadMass,
      double minDryMass,
      double avgDryMass,
      double medianDryMass,
      double maxDryMass,
      double minWetMass,
      double avgWetMass,
      double medianWetMass,
      double maxWetMass,
      double maxBOLPowerLower,
      double maxBOLPowerUpper,
      double maxEOLPowerLower,
      double maxEOLPowerUpper,
      double avgSpacecraftPower,
      double maxSpacecraftPower,
      double oapSpacecraftPower,
      double avgPayloadPower,
      double maxPayloadPower,
      double oapPayloadPower,
      double bodyDimensionX,
      double bodyDimensionY,
      double bodyDimensionZ,
      double payloadDimensionX,
      double payloadDimensionY,
      double payloadDimensionZ,
      double payloadVolume,
      double launchEnvelopeDimensionX,
      double launchEnvelopeDimensionY,
      double launchEnvelopeDimensionZ,
      int numOrbitType,
      int telemetryTrackingManufacturerOrgIdOffset,
      int mainComputerManufacturerOrgIdOffset,
      int manufacturerOrgIdOffset,
      int busKitDesignerOrgIdOffset,
      int countryCodeOffset,
      int massCategoryOffset,
      int powerCategoryOffset,
      boolean generic,
      int descriptionOffset,
      int aocsNotesOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset) {
    builder.startTable(55);
    Bus_Abridged.addLaunchEnvelopeDimensionZ(builder, launchEnvelopeDimensionZ);
    Bus_Abridged.addLaunchEnvelopeDimensionY(builder, launchEnvelopeDimensionY);
    Bus_Abridged.addLaunchEnvelopeDimensionX(builder, launchEnvelopeDimensionX);
    Bus_Abridged.addPayloadVolume(builder, payloadVolume);
    Bus_Abridged.addPayloadDimensionZ(builder, payloadDimensionZ);
    Bus_Abridged.addPayloadDimensionY(builder, payloadDimensionY);
    Bus_Abridged.addPayloadDimensionX(builder, payloadDimensionX);
    Bus_Abridged.addBodyDimensionZ(builder, bodyDimensionZ);
    Bus_Abridged.addBodyDimensionY(builder, bodyDimensionY);
    Bus_Abridged.addBodyDimensionX(builder, bodyDimensionX);
    Bus_Abridged.addOapPayloadPower(builder, oapPayloadPower);
    Bus_Abridged.addMaxPayloadPower(builder, maxPayloadPower);
    Bus_Abridged.addAvgPayloadPower(builder, avgPayloadPower);
    Bus_Abridged.addOapSpacecraftPower(builder, oapSpacecraftPower);
    Bus_Abridged.addMaxSpacecraftPower(builder, maxSpacecraftPower);
    Bus_Abridged.addAvgSpacecraftPower(builder, avgSpacecraftPower);
    Bus_Abridged.addMaxEolpowerUpper(builder, maxEOLPowerUpper);
    Bus_Abridged.addMaxEolpowerLower(builder, maxEOLPowerLower);
    Bus_Abridged.addMaxBolpowerUpper(builder, maxBOLPowerUpper);
    Bus_Abridged.addMaxBolpowerLower(builder, maxBOLPowerLower);
    Bus_Abridged.addMaxWetMass(builder, maxWetMass);
    Bus_Abridged.addMedianWetMass(builder, medianWetMass);
    Bus_Abridged.addAvgWetMass(builder, avgWetMass);
    Bus_Abridged.addMinWetMass(builder, minWetMass);
    Bus_Abridged.addMaxDryMass(builder, maxDryMass);
    Bus_Abridged.addMedianDryMass(builder, medianDryMass);
    Bus_Abridged.addAvgDryMass(builder, avgDryMass);
    Bus_Abridged.addMinDryMass(builder, minDryMass);
    Bus_Abridged.addMaxPayloadMass(builder, maxPayloadMass);
    Bus_Abridged.addAvgPayloadMass(builder, avgPayloadMass);
    Bus_Abridged.addMaxBolstationMass(builder, maxBOLStationMass);
    Bus_Abridged.addMaxLaunchMassUpper(builder, maxLaunchMassUpper);
    Bus_Abridged.addMaxLaunchMassLower(builder, maxLaunchMassLower);
    Bus_Abridged.addCreatedBy(builder, createdByOffset);
    Bus_Abridged.addCreatedAt(builder, createdAtOffset);
    Bus_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Bus_Abridged.addOrigin(builder, originOffset);
    Bus_Abridged.addSource(builder, sourceOffset);
    Bus_Abridged.addAocsNotes(builder, aocsNotesOffset);
    Bus_Abridged.addDescription(builder, descriptionOffset);
    Bus_Abridged.addPowerCategory(builder, powerCategoryOffset);
    Bus_Abridged.addMassCategory(builder, massCategoryOffset);
    Bus_Abridged.addCountryCode(builder, countryCodeOffset);
    Bus_Abridged.addBusKitDesignerOrgId(builder, busKitDesignerOrgIdOffset);
    Bus_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    Bus_Abridged.addMainComputerManufacturerOrgId(builder, mainComputerManufacturerOrgIdOffset);
    Bus_Abridged.addTelemetryTrackingManufacturerOrgId(builder, telemetryTrackingManufacturerOrgIdOffset);
    Bus_Abridged.addNumOrbitType(builder, numOrbitType);
    Bus_Abridged.addType(builder, typeOffset);
    Bus_Abridged.addIdEntity(builder, idEntityOffset);
    Bus_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Bus_Abridged.addName(builder, nameOffset);
    Bus_Abridged.addId(builder, idOffset);
    Bus_Abridged.addDataMode(builder, dataMode);
    Bus_Abridged.addGeneric(builder, generic);
    return Bus_Abridged.endBus_Abridged(builder);
  }

  public static void startBus_Abridged(FlatBufferBuilder builder) { builder.startTable(55); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addIdEntity(FlatBufferBuilder builder, int idEntityOffset) { builder.addOffset(3, idEntityOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(4, typeOffset, 0); }
  public static void addMaxLaunchMassLower(FlatBufferBuilder builder, double maxLaunchMassLower) { builder.addDouble(5, maxLaunchMassLower, 0.0); }
  public static void addMaxLaunchMassUpper(FlatBufferBuilder builder, double maxLaunchMassUpper) { builder.addDouble(6, maxLaunchMassUpper, 0.0); }
  public static void addMaxBolstationMass(FlatBufferBuilder builder, double maxBOLStationMass) { builder.addDouble(7, maxBOLStationMass, 0.0); }
  public static void addAvgPayloadMass(FlatBufferBuilder builder, double avgPayloadMass) { builder.addDouble(8, avgPayloadMass, 0.0); }
  public static void addMaxPayloadMass(FlatBufferBuilder builder, double maxPayloadMass) { builder.addDouble(9, maxPayloadMass, 0.0); }
  public static void addMinDryMass(FlatBufferBuilder builder, double minDryMass) { builder.addDouble(10, minDryMass, 0.0); }
  public static void addAvgDryMass(FlatBufferBuilder builder, double avgDryMass) { builder.addDouble(11, avgDryMass, 0.0); }
  public static void addMedianDryMass(FlatBufferBuilder builder, double medianDryMass) { builder.addDouble(12, medianDryMass, 0.0); }
  public static void addMaxDryMass(FlatBufferBuilder builder, double maxDryMass) { builder.addDouble(13, maxDryMass, 0.0); }
  public static void addMinWetMass(FlatBufferBuilder builder, double minWetMass) { builder.addDouble(14, minWetMass, 0.0); }
  public static void addAvgWetMass(FlatBufferBuilder builder, double avgWetMass) { builder.addDouble(15, avgWetMass, 0.0); }
  public static void addMedianWetMass(FlatBufferBuilder builder, double medianWetMass) { builder.addDouble(16, medianWetMass, 0.0); }
  public static void addMaxWetMass(FlatBufferBuilder builder, double maxWetMass) { builder.addDouble(17, maxWetMass, 0.0); }
  public static void addMaxBolpowerLower(FlatBufferBuilder builder, double maxBOLPowerLower) { builder.addDouble(18, maxBOLPowerLower, 0.0); }
  public static void addMaxBolpowerUpper(FlatBufferBuilder builder, double maxBOLPowerUpper) { builder.addDouble(19, maxBOLPowerUpper, 0.0); }
  public static void addMaxEolpowerLower(FlatBufferBuilder builder, double maxEOLPowerLower) { builder.addDouble(20, maxEOLPowerLower, 0.0); }
  public static void addMaxEolpowerUpper(FlatBufferBuilder builder, double maxEOLPowerUpper) { builder.addDouble(21, maxEOLPowerUpper, 0.0); }
  public static void addAvgSpacecraftPower(FlatBufferBuilder builder, double avgSpacecraftPower) { builder.addDouble(22, avgSpacecraftPower, 0.0); }
  public static void addMaxSpacecraftPower(FlatBufferBuilder builder, double maxSpacecraftPower) { builder.addDouble(23, maxSpacecraftPower, 0.0); }
  public static void addOapSpacecraftPower(FlatBufferBuilder builder, double oapSpacecraftPower) { builder.addDouble(24, oapSpacecraftPower, 0.0); }
  public static void addAvgPayloadPower(FlatBufferBuilder builder, double avgPayloadPower) { builder.addDouble(25, avgPayloadPower, 0.0); }
  public static void addMaxPayloadPower(FlatBufferBuilder builder, double maxPayloadPower) { builder.addDouble(26, maxPayloadPower, 0.0); }
  public static void addOapPayloadPower(FlatBufferBuilder builder, double oapPayloadPower) { builder.addDouble(27, oapPayloadPower, 0.0); }
  public static void addBodyDimensionX(FlatBufferBuilder builder, double bodyDimensionX) { builder.addDouble(28, bodyDimensionX, 0.0); }
  public static void addBodyDimensionY(FlatBufferBuilder builder, double bodyDimensionY) { builder.addDouble(29, bodyDimensionY, 0.0); }
  public static void addBodyDimensionZ(FlatBufferBuilder builder, double bodyDimensionZ) { builder.addDouble(30, bodyDimensionZ, 0.0); }
  public static void addPayloadDimensionX(FlatBufferBuilder builder, double payloadDimensionX) { builder.addDouble(31, payloadDimensionX, 0.0); }
  public static void addPayloadDimensionY(FlatBufferBuilder builder, double payloadDimensionY) { builder.addDouble(32, payloadDimensionY, 0.0); }
  public static void addPayloadDimensionZ(FlatBufferBuilder builder, double payloadDimensionZ) { builder.addDouble(33, payloadDimensionZ, 0.0); }
  public static void addPayloadVolume(FlatBufferBuilder builder, double payloadVolume) { builder.addDouble(34, payloadVolume, 0.0); }
  public static void addLaunchEnvelopeDimensionX(FlatBufferBuilder builder, double launchEnvelopeDimensionX) { builder.addDouble(35, launchEnvelopeDimensionX, 0.0); }
  public static void addLaunchEnvelopeDimensionY(FlatBufferBuilder builder, double launchEnvelopeDimensionY) { builder.addDouble(36, launchEnvelopeDimensionY, 0.0); }
  public static void addLaunchEnvelopeDimensionZ(FlatBufferBuilder builder, double launchEnvelopeDimensionZ) { builder.addDouble(37, launchEnvelopeDimensionZ, 0.0); }
  public static void addNumOrbitType(FlatBufferBuilder builder, int numOrbitType) { builder.addInt(38, numOrbitType, 0); }
  public static void addTelemetryTrackingManufacturerOrgId(FlatBufferBuilder builder, int telemetryTrackingManufacturerOrgIdOffset) { builder.addOffset(39, telemetryTrackingManufacturerOrgIdOffset, 0); }
  public static void addMainComputerManufacturerOrgId(FlatBufferBuilder builder, int mainComputerManufacturerOrgIdOffset) { builder.addOffset(40, mainComputerManufacturerOrgIdOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(41, manufacturerOrgIdOffset, 0); }
  public static void addBusKitDesignerOrgId(FlatBufferBuilder builder, int busKitDesignerOrgIdOffset) { builder.addOffset(42, busKitDesignerOrgIdOffset, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(43, countryCodeOffset, 0); }
  public static void addMassCategory(FlatBufferBuilder builder, int massCategoryOffset) { builder.addOffset(44, massCategoryOffset, 0); }
  public static void addPowerCategory(FlatBufferBuilder builder, int powerCategoryOffset) { builder.addOffset(45, powerCategoryOffset, 0); }
  public static void addGeneric(FlatBufferBuilder builder, boolean generic) { builder.addBoolean(46, generic, false); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(47, descriptionOffset, 0); }
  public static void addAocsNotes(FlatBufferBuilder builder, int aocsNotesOffset) { builder.addOffset(48, aocsNotesOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(49, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(50, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(51, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(52, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(53, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(54, createdByOffset, 0); }
  public static int endBus_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Bus_Abridged get(int j) { return get(new Bus_Abridged(), j); }
    public Bus_Abridged get(Bus_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

