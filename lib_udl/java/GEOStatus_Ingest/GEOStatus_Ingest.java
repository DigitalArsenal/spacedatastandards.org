// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
 */
@SuppressWarnings("unused")
public final class GEOStatus_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static GEOStatus_Ingest getRootAsGEOStatus_Ingest(ByteBuffer _bb) { return getRootAsGEOStatus_Ingest(_bb, new GEOStatus_Ingest()); }
  public static GEOStatus_Ingest getRootAsGEOStatus_Ingest(ByteBuffer _bb, GEOStatus_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean GEOStatus_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "GEOS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GEOStatus_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: GEOSTATUS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the object on-orbit object.
   * Example: /// Example: REF-ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Sine of inclination times the sine of right ascension.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double ss() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sine of inclination times the cosine of right ascension.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double sc() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Objects displacement from geostationary orbit in deg^2/day^2.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relativeEnergy() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Corrective or overriding long term trend for longitudinal change in degrees/day.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double longitudeRate() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
   * Example: /// Example: 180.1
   * Constraints: No constraints specified.
   */
  public double longitudeMin() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
   * Example: /// Example: 1.01
   * Constraints: No constraints specified.
   */
  public double longitudeMax() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Indicates the confidence level in the entry.  (Low, Medium, High).
   * Example: /// Example: Low
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String confidenceLevel() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer confidenceLevelAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer confidenceLevelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Geosynchronous plane changing status.  (Current, Never, Former, Future).
   * Example: /// Example: Current
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String planeChangeStatus() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer planeChangeStatusAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer planeChangeStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Indicates the trough (gravity well) or drift direction of a space object:
   * 255 - Influenced by 255° longitude trough. 
   * 75 - Influenced by 75° longitude trough. 
   * Both - Oscillating between both 255 and 75 troughs. 
   * East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
   * West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
   * Example: /// Example: West
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String troughType() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer troughTypeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer troughTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Lost space object indicator.  (True or False).
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean lostFlag() { int o = __offset(30); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Semi-annual correction.  (True or False).
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean semiAnnualCorrFlag() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Space object status.  (Active, Dead, Unknown).
   * Example: /// Example: Active
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String objectStatus() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer objectStatusAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer objectStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 21
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }

  public static int createGEOStatus_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int origObjectIdOffset,
      double ss,
      double sc,
      double relativeEnergy,
      double longitudeRate,
      double longitudeMin,
      double longitudeMax,
      int confidenceLevelOffset,
      int planeChangeStatusOffset,
      int troughTypeOffset,
      boolean lostFlag,
      boolean semiAnnualCorrFlag,
      int objectStatusOffset,
      int rawFileUriOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int satNo,
      int origNetworkOffset) {
    builder.startTable(24);
    GEOStatus_Ingest.addLongitudeMax(builder, longitudeMax);
    GEOStatus_Ingest.addLongitudeMin(builder, longitudeMin);
    GEOStatus_Ingest.addLongitudeRate(builder, longitudeRate);
    GEOStatus_Ingest.addRelativeEnergy(builder, relativeEnergy);
    GEOStatus_Ingest.addSc(builder, sc);
    GEOStatus_Ingest.addSs(builder, ss);
    GEOStatus_Ingest.addOrigNetwork(builder, origNetworkOffset);
    GEOStatus_Ingest.addSatNo(builder, satNo);
    GEOStatus_Ingest.addOrigin(builder, originOffset);
    GEOStatus_Ingest.addSource(builder, sourceOffset);
    GEOStatus_Ingest.addCreatedBy(builder, createdByOffset);
    GEOStatus_Ingest.addCreatedAt(builder, createdAtOffset);
    GEOStatus_Ingest.addRawFileUri(builder, rawFileUriOffset);
    GEOStatus_Ingest.addObjectStatus(builder, objectStatusOffset);
    GEOStatus_Ingest.addTroughType(builder, troughTypeOffset);
    GEOStatus_Ingest.addPlaneChangeStatus(builder, planeChangeStatusOffset);
    GEOStatus_Ingest.addConfidenceLevel(builder, confidenceLevelOffset);
    GEOStatus_Ingest.addOrigObjectId(builder, origObjectIdOffset);
    GEOStatus_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    GEOStatus_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    GEOStatus_Ingest.addId(builder, idOffset);
    GEOStatus_Ingest.addDataMode(builder, dataMode);
    GEOStatus_Ingest.addSemiAnnualCorrFlag(builder, semiAnnualCorrFlag);
    GEOStatus_Ingest.addLostFlag(builder, lostFlag);
    return GEOStatus_Ingest.endGEOStatus_Ingest(builder);
  }

  public static void startGEOStatus_Ingest(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(3, origObjectIdOffset, 0); }
  public static void addSs(FlatBufferBuilder builder, double ss) { builder.addDouble(4, ss, 0.0); }
  public static void addSc(FlatBufferBuilder builder, double sc) { builder.addDouble(5, sc, 0.0); }
  public static void addRelativeEnergy(FlatBufferBuilder builder, double relativeEnergy) { builder.addDouble(6, relativeEnergy, 0.0); }
  public static void addLongitudeRate(FlatBufferBuilder builder, double longitudeRate) { builder.addDouble(7, longitudeRate, 0.0); }
  public static void addLongitudeMin(FlatBufferBuilder builder, double longitudeMin) { builder.addDouble(8, longitudeMin, 0.0); }
  public static void addLongitudeMax(FlatBufferBuilder builder, double longitudeMax) { builder.addDouble(9, longitudeMax, 0.0); }
  public static void addConfidenceLevel(FlatBufferBuilder builder, int confidenceLevelOffset) { builder.addOffset(10, confidenceLevelOffset, 0); }
  public static void addPlaneChangeStatus(FlatBufferBuilder builder, int planeChangeStatusOffset) { builder.addOffset(11, planeChangeStatusOffset, 0); }
  public static void addTroughType(FlatBufferBuilder builder, int troughTypeOffset) { builder.addOffset(12, troughTypeOffset, 0); }
  public static void addLostFlag(FlatBufferBuilder builder, boolean lostFlag) { builder.addBoolean(13, lostFlag, false); }
  public static void addSemiAnnualCorrFlag(FlatBufferBuilder builder, boolean semiAnnualCorrFlag) { builder.addBoolean(14, semiAnnualCorrFlag, false); }
  public static void addObjectStatus(FlatBufferBuilder builder, int objectStatusOffset) { builder.addOffset(15, objectStatusOffset, 0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(16, rawFileUriOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(17, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(18, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(19, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(20, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(21, dataMode, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(22, satNo, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(23, origNetworkOffset, 0); }
  public static int endGEOStatus_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishGEOStatus_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "GEOS"); }
  public static void finishSizePrefixedGEOStatus_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "GEOS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GEOStatus_Ingest get(int j) { return get(new GEOStatus_Ingest(), j); }
    public GEOStatus_Ingest get(GEOStatus_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

