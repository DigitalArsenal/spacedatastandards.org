// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
 */
@SuppressWarnings("unused")
public final class DataLinkSpecTracks_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DataLinkSpecTracks_Ingest getRootAsDataLinkSpecTracks_Ingest(ByteBuffer _bb) { return getRootAsDataLinkSpecTracks_Ingest(_bb, new DataLinkSpecTracks_Ingest()); }
  public static DataLinkSpecTracks_Ingest getRootAsDataLinkSpecTracks_Ingest(ByteBuffer _bb, DataLinkSpecTracks_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DataLinkSpecTracks_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataLinkSpecTracks_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
   * Example: /// Example: 12345
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String specTrackNum() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer specTrackNumAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer specTrackNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Description of the special track number.
   * Example: /// Example: SAM SITE CHARLIE
   * Constraints: Minimum length = 0, Maximum length = 40
   */
  public String specTrackNumDesc() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer specTrackNumDescAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer specTrackNumDescInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createDataLinkSpecTracks_Ingest(FlatBufferBuilder builder,
      int specTrackNumOffset,
      int specTrackNumDescOffset) {
    builder.startTable(2);
    DataLinkSpecTracks_Ingest.addSpecTrackNumDesc(builder, specTrackNumDescOffset);
    DataLinkSpecTracks_Ingest.addSpecTrackNum(builder, specTrackNumOffset);
    return DataLinkSpecTracks_Ingest.endDataLinkSpecTracks_Ingest(builder);
  }

  public static void startDataLinkSpecTracks_Ingest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addSpecTrackNum(FlatBufferBuilder builder, int specTrackNumOffset) { builder.addOffset(0, specTrackNumOffset, 0); }
  public static void addSpecTrackNumDesc(FlatBufferBuilder builder, int specTrackNumDescOffset) { builder.addOffset(1, specTrackNumDescOffset, 0); }
  public static int endDataLinkSpecTracks_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDataLinkSpecTracks_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DATA"); }
  public static void finishSizePrefixedDataLinkSpecTracks_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DATA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataLinkSpecTracks_Ingest get(int j) { return get(new DataLinkSpecTracks_Ingest(), j); }
    public DataLinkSpecTracks_Ingest get(DataLinkSpecTracks_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

