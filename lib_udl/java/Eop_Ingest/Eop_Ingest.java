// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
 * Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
 * Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
 * Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
 * IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
 */
@SuppressWarnings("unused")
public final class Eop_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Eop_Ingest getRootAsEop_Ingest(ByteBuffer _bb) { return getRootAsEop_Ingest(_bb, new Eop_Ingest()); }
  public static Eop_Ingest getRootAsEop_Ingest(ByteBuffer _bb, Eop_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Eop_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EOPI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Eop_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: EOP-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String eopDate() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eopDateAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer eopDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
   * Example: /// Example: I
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public byte polarMotionState() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
   * Example: /// Example: 0.182987
   * Constraints: No constraints specified.
   */
  public double polarMotionX() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Estimated uncertainty/error in polarMotionX value in arc seconds.
   * Example: /// Example: 0.000672
   * Constraints: No constraints specified.
   */
  public double polarMotionXunc() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
   * Example: /// Example: 0.168775
   * Constraints: No constraints specified.
   */
  public double polarMotionY() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Estimated uncertainty/error in polarMotionY value in arc seconds.
   * Example: /// Example: 0.000345
   * Constraints: No constraints specified.
   */
  public double polarMotionYunc() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
   * Example: /// Example: I
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public byte ut1Utcstate() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
   * Example: /// Example: -0.1251659
   * Constraints: No constraints specified.
   */
  public double ut1Utc() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated uncertainty/error in the ut1UTC value in seconds.
   * Example: /// Example: 2.07e-05
   * Constraints: No constraints specified.
   */
  public double ut1Utcunc() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
   * Example: /// Example: 1.8335
   * Constraints: No constraints specified.
   */
  public double lod() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated uncertainty/error in the lod value in seconds.
   * Example: /// Example: 0.0201
   * Constraints: No constraints specified.
   */
  public double lodUnc() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
   * Example: /// Example: I
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public byte nutationState() { int o = __offset(30); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
   * Example: /// Example: -10.437
   * Constraints: No constraints specified.
   */
  public double dPsi() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated uncertainty/error in the dPSI value in milliseconds of arc.
   * Example: /// Example: 0.507
   * Constraints: No constraints specified.
   */
  public double dPsiunc() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
   * Example: /// Example: -0.917
   * Constraints: No constraints specified.
   */
  public double dEpsilon() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
   * Example: /// Example: 0.165
   * Constraints: No constraints specified.
   */
  public double dEpsilonUnc() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
   * Example: /// Example: -0.086
   * Constraints: No constraints specified.
   */
  public double dX() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
   * Example: /// Example: 0.202
   * Constraints: No constraints specified.
   */
  public double dXunc() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
   * Example: /// Example: 0.13
   * Constraints: No constraints specified.
   */
  public double dY() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
   * Example: /// Example: 0.165
   * Constraints: No constraints specified.
   */
  public double dYunc() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
   * Example: /// Example: 0.1824
   * Constraints: No constraints specified.
   */
  public double polarMotionXb() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
   * Example: /// Example: 0.1679
   * Constraints: No constraints specified.
   */
  public double polarMotionYb() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
   * Example: /// Example: -0.1253
   * Constraints: No constraints specified.
   */
  public double ut1Utcb() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
   * Example: /// Example: -9.9
   * Constraints: No constraints specified.
   */
  public double dPsib() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
   * Example: /// Example: -1.7
   * Constraints: No constraints specified.
   */
  public double dEpsilonB() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
   * Example: /// Example: 0.129
   * Constraints: No constraints specified.
   */
  public double dXb() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
   * Example: /// Example: -0.653
   * Constraints: No constraints specified.
   */
  public double dYb() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
   * Example: /// Example: IAU1980
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String precessionNutationStd() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer precessionNutationStdAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer precessionNutationStdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }

  public static int createEop_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int eopDateOffset,
      byte polarMotionState,
      double polarMotionX,
      double polarMotionXunc,
      double polarMotionY,
      double polarMotionYunc,
      byte ut1Utcstate,
      double ut1Utc,
      double ut1Utcunc,
      double lod,
      double lodUnc,
      byte nutationState,
      double dPsi,
      double dPsiunc,
      double dEpsilon,
      double dEpsilonUnc,
      double dX,
      double dXunc,
      double dY,
      double dYunc,
      double polarMotionXb,
      double polarMotionYb,
      double ut1Utcb,
      double dPsib,
      double dEpsilonB,
      double dXb,
      double dYb,
      int precessionNutationStdOffset,
      int rawFileUriOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int origNetworkOffset) {
    builder.startTable(37);
    Eop_Ingest.addDYb(builder, dYb);
    Eop_Ingest.addDXb(builder, dXb);
    Eop_Ingest.addDEpsilonB(builder, dEpsilonB);
    Eop_Ingest.addDPsib(builder, dPsib);
    Eop_Ingest.addUt1Utcb(builder, ut1Utcb);
    Eop_Ingest.addPolarMotionYb(builder, polarMotionYb);
    Eop_Ingest.addPolarMotionXb(builder, polarMotionXb);
    Eop_Ingest.addDYunc(builder, dYunc);
    Eop_Ingest.addDY(builder, dY);
    Eop_Ingest.addDXunc(builder, dXunc);
    Eop_Ingest.addDX(builder, dX);
    Eop_Ingest.addDEpsilonUnc(builder, dEpsilonUnc);
    Eop_Ingest.addDEpsilon(builder, dEpsilon);
    Eop_Ingest.addDPsiunc(builder, dPsiunc);
    Eop_Ingest.addDPsi(builder, dPsi);
    Eop_Ingest.addLodUnc(builder, lodUnc);
    Eop_Ingest.addLod(builder, lod);
    Eop_Ingest.addUt1Utcunc(builder, ut1Utcunc);
    Eop_Ingest.addUt1Utc(builder, ut1Utc);
    Eop_Ingest.addPolarMotionYunc(builder, polarMotionYunc);
    Eop_Ingest.addPolarMotionY(builder, polarMotionY);
    Eop_Ingest.addPolarMotionXunc(builder, polarMotionXunc);
    Eop_Ingest.addPolarMotionX(builder, polarMotionX);
    Eop_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Eop_Ingest.addCreatedBy(builder, createdByOffset);
    Eop_Ingest.addCreatedAt(builder, createdAtOffset);
    Eop_Ingest.addOrigin(builder, originOffset);
    Eop_Ingest.addSource(builder, sourceOffset);
    Eop_Ingest.addRawFileUri(builder, rawFileUriOffset);
    Eop_Ingest.addPrecessionNutationStd(builder, precessionNutationStdOffset);
    Eop_Ingest.addEopDate(builder, eopDateOffset);
    Eop_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Eop_Ingest.addId(builder, idOffset);
    Eop_Ingest.addDataMode(builder, dataMode);
    Eop_Ingest.addNutationState(builder, nutationState);
    Eop_Ingest.addUt1Utcstate(builder, ut1Utcstate);
    Eop_Ingest.addPolarMotionState(builder, polarMotionState);
    return Eop_Ingest.endEop_Ingest(builder);
  }

  public static void startEop_Ingest(FlatBufferBuilder builder) { builder.startTable(37); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addEopDate(FlatBufferBuilder builder, int eopDateOffset) { builder.addOffset(2, eopDateOffset, 0); }
  public static void addPolarMotionState(FlatBufferBuilder builder, byte polarMotionState) { builder.addByte(3, polarMotionState, 0); }
  public static void addPolarMotionX(FlatBufferBuilder builder, double polarMotionX) { builder.addDouble(4, polarMotionX, 0.0); }
  public static void addPolarMotionXunc(FlatBufferBuilder builder, double polarMotionXunc) { builder.addDouble(5, polarMotionXunc, 0.0); }
  public static void addPolarMotionY(FlatBufferBuilder builder, double polarMotionY) { builder.addDouble(6, polarMotionY, 0.0); }
  public static void addPolarMotionYunc(FlatBufferBuilder builder, double polarMotionYunc) { builder.addDouble(7, polarMotionYunc, 0.0); }
  public static void addUt1Utcstate(FlatBufferBuilder builder, byte ut1Utcstate) { builder.addByte(8, ut1Utcstate, 0); }
  public static void addUt1Utc(FlatBufferBuilder builder, double ut1Utc) { builder.addDouble(9, ut1Utc, 0.0); }
  public static void addUt1Utcunc(FlatBufferBuilder builder, double ut1Utcunc) { builder.addDouble(10, ut1Utcunc, 0.0); }
  public static void addLod(FlatBufferBuilder builder, double lod) { builder.addDouble(11, lod, 0.0); }
  public static void addLodUnc(FlatBufferBuilder builder, double lodUnc) { builder.addDouble(12, lodUnc, 0.0); }
  public static void addNutationState(FlatBufferBuilder builder, byte nutationState) { builder.addByte(13, nutationState, 0); }
  public static void addDPsi(FlatBufferBuilder builder, double dPsi) { builder.addDouble(14, dPsi, 0.0); }
  public static void addDPsiunc(FlatBufferBuilder builder, double dPsiunc) { builder.addDouble(15, dPsiunc, 0.0); }
  public static void addDEpsilon(FlatBufferBuilder builder, double dEpsilon) { builder.addDouble(16, dEpsilon, 0.0); }
  public static void addDEpsilonUnc(FlatBufferBuilder builder, double dEpsilonUnc) { builder.addDouble(17, dEpsilonUnc, 0.0); }
  public static void addDX(FlatBufferBuilder builder, double dX) { builder.addDouble(18, dX, 0.0); }
  public static void addDXunc(FlatBufferBuilder builder, double dXunc) { builder.addDouble(19, dXunc, 0.0); }
  public static void addDY(FlatBufferBuilder builder, double dY) { builder.addDouble(20, dY, 0.0); }
  public static void addDYunc(FlatBufferBuilder builder, double dYunc) { builder.addDouble(21, dYunc, 0.0); }
  public static void addPolarMotionXb(FlatBufferBuilder builder, double polarMotionXb) { builder.addDouble(22, polarMotionXb, 0.0); }
  public static void addPolarMotionYb(FlatBufferBuilder builder, double polarMotionYb) { builder.addDouble(23, polarMotionYb, 0.0); }
  public static void addUt1Utcb(FlatBufferBuilder builder, double ut1Utcb) { builder.addDouble(24, ut1Utcb, 0.0); }
  public static void addDPsib(FlatBufferBuilder builder, double dPsib) { builder.addDouble(25, dPsib, 0.0); }
  public static void addDEpsilonB(FlatBufferBuilder builder, double dEpsilonB) { builder.addDouble(26, dEpsilonB, 0.0); }
  public static void addDXb(FlatBufferBuilder builder, double dXb) { builder.addDouble(27, dXb, 0.0); }
  public static void addDYb(FlatBufferBuilder builder, double dYb) { builder.addDouble(28, dYb, 0.0); }
  public static void addPrecessionNutationStd(FlatBufferBuilder builder, int precessionNutationStdOffset) { builder.addOffset(29, precessionNutationStdOffset, 0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(30, rawFileUriOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(31, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(32, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(33, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(34, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(35, createdByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(36, origNetworkOffset, 0); }
  public static int endEop_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEop_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EOPI"); }
  public static void finishSizePrefixedEop_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EOPI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Eop_Ingest get(int j) { return get(new Eop_Ingest(), j); }
    public Eop_Ingest get(Eop_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

