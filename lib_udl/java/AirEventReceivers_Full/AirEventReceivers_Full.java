// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of receiver aircraft associated with this Air Event.
 */
@SuppressWarnings("unused")
public final class AirEventReceivers_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirEventReceivers_Full getRootAsAirEventReceivers_Full(ByteBuffer _bb) { return getRootAsAirEventReceivers_Full(_bb, new AirEventReceivers_Full()); }
  public static AirEventReceivers_Full getRootAsAirEventReceivers_Full(ByteBuffer _bb, AirEventReceivers_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirEventReceivers_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirEventReceivers_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The UDL ID of the aircraft sortie this receiver is associated with for this event.
   * Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idReceiverSortie() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idReceiverSortieAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idReceiverSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The UDL ID of the mission this receiver is associated with for this event.
   * Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idReceiverMission() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idReceiverMissionAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idReceiverMissionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The UDL ID of the airfield this receiver is associated with for this event.
   * Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idReceiverAirfield() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idReceiverAirfieldAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idReceiverAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalReceiverId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalReceiverIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer externalReceiverIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Coordination record identifier of this receiver.
   * Example: /// Example: TTC601
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String receiverCoord() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverCoordAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer receiverCoordInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The Model Design Series designation of this receiver.
   * Example: /// Example: KC135R
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String receiverMds() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverMdsAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer receiverMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The Air Mobility Command (AMC) mission identifier of this receiver.
   * Example: /// Example: 8PH000B1S052
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String amcReceiverMissionId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amcReceiverMissionIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer amcReceiverMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Alternate mission identifier of this receiver provided by source.
   * Example: /// Example: 1UN05201L121
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String altReceiverMissionId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altReceiverMissionIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer altReceiverMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The call sign assigned to this receiver.
   * Example: /// Example: BAKER
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String receiverCallSign() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverCallSignAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer receiverCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The wing or unit that owns this receiver.
   * Example: /// Example: 117ARW
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String receiverOwner() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverOwnerAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer receiverOwnerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The name and/or number of the point of contact for this receiver.
   * Example: /// Example: JOHN SMITH (555)555-5555
   * Constraints: Minimum length = 0, Maximum length = 68
   */
  public String receiverPoc() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverPocAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer receiverPocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Identifies the itinerary point of a mission that this receiver is linked to.
   * Example: /// Example: 825
   * Constraints: No constraints specified.
   */
  public int receiverLegNum() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Location the receiver is deployed to for an air refueling event.
   * Example: /// Example: KOFF
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String receiverDeployedIcao() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverDeployedIcaoAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer receiverDeployedIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
   * Example: /// Example: DROGUE
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String receiverDeliveryMethod() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverDeliveryMethodAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer receiverDeliveryMethodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
   * Example: /// Example: 15000000.1
   * Constraints: No constraints specified.
   */
  public double fuelOn() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Position of this receiver within a group of receivers in an air refueling event.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int receiverCellPosition() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Indicates the unique number by Unit ID, which identifies an air refueling event.
   * Example: /// Example: 1018
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String sequenceNum() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sequenceNumAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer sequenceNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
   * Example: /// Example: AMC
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String recOrg() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recOrgAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer recOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Number of aircraft contained within one receiver coordination record for an air refueling event.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int numRecAircraft() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Type of fuel being transferred to the receiver in an air refueling event.
   * Example: /// Example: JP8
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String receiverFuelType() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverFuelTypeAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer receiverFuelTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Name of the receiver exercise associated with an air refueling event.
   * Example: /// Example: NATO19
   * Constraints: Minimum length = 0, Maximum length = 12
   */
  public String receiverExercise() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverExerciseAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer receiverExerciseInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The package identifier for the receiver in an air refueling event.
   * Example: /// Example: 135
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String packageId() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer packageIdAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer packageIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }

  public static int createAirEventReceivers_Full(FlatBufferBuilder builder,
      int idReceiverSortieOffset,
      int idReceiverMissionOffset,
      int idReceiverAirfieldOffset,
      int externalReceiverIdOffset,
      int receiverCoordOffset,
      int receiverMdsOffset,
      int amcReceiverMissionIdOffset,
      int altReceiverMissionIdOffset,
      int receiverCallSignOffset,
      int receiverOwnerOffset,
      int receiverPocOffset,
      int receiverLegNum,
      int receiverDeployedIcaoOffset,
      int receiverDeliveryMethodOffset,
      double fuelOn,
      int receiverCellPosition,
      int sequenceNumOffset,
      int recOrgOffset,
      int numRecAircraft,
      int receiverFuelTypeOffset,
      int receiverExerciseOffset,
      int packageIdOffset) {
    builder.startTable(22);
    AirEventReceivers_Full.addFuelOn(builder, fuelOn);
    AirEventReceivers_Full.addPackageId(builder, packageIdOffset);
    AirEventReceivers_Full.addReceiverExercise(builder, receiverExerciseOffset);
    AirEventReceivers_Full.addReceiverFuelType(builder, receiverFuelTypeOffset);
    AirEventReceivers_Full.addNumRecAircraft(builder, numRecAircraft);
    AirEventReceivers_Full.addRecOrg(builder, recOrgOffset);
    AirEventReceivers_Full.addSequenceNum(builder, sequenceNumOffset);
    AirEventReceivers_Full.addReceiverCellPosition(builder, receiverCellPosition);
    AirEventReceivers_Full.addReceiverDeliveryMethod(builder, receiverDeliveryMethodOffset);
    AirEventReceivers_Full.addReceiverDeployedIcao(builder, receiverDeployedIcaoOffset);
    AirEventReceivers_Full.addReceiverLegNum(builder, receiverLegNum);
    AirEventReceivers_Full.addReceiverPoc(builder, receiverPocOffset);
    AirEventReceivers_Full.addReceiverOwner(builder, receiverOwnerOffset);
    AirEventReceivers_Full.addReceiverCallSign(builder, receiverCallSignOffset);
    AirEventReceivers_Full.addAltReceiverMissionId(builder, altReceiverMissionIdOffset);
    AirEventReceivers_Full.addAmcReceiverMissionId(builder, amcReceiverMissionIdOffset);
    AirEventReceivers_Full.addReceiverMds(builder, receiverMdsOffset);
    AirEventReceivers_Full.addReceiverCoord(builder, receiverCoordOffset);
    AirEventReceivers_Full.addExternalReceiverId(builder, externalReceiverIdOffset);
    AirEventReceivers_Full.addIdReceiverAirfield(builder, idReceiverAirfieldOffset);
    AirEventReceivers_Full.addIdReceiverMission(builder, idReceiverMissionOffset);
    AirEventReceivers_Full.addIdReceiverSortie(builder, idReceiverSortieOffset);
    return AirEventReceivers_Full.endAirEventReceivers_Full(builder);
  }

  public static void startAirEventReceivers_Full(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addIdReceiverSortie(FlatBufferBuilder builder, int idReceiverSortieOffset) { builder.addOffset(0, idReceiverSortieOffset, 0); }
  public static void addIdReceiverMission(FlatBufferBuilder builder, int idReceiverMissionOffset) { builder.addOffset(1, idReceiverMissionOffset, 0); }
  public static void addIdReceiverAirfield(FlatBufferBuilder builder, int idReceiverAirfieldOffset) { builder.addOffset(2, idReceiverAirfieldOffset, 0); }
  public static void addExternalReceiverId(FlatBufferBuilder builder, int externalReceiverIdOffset) { builder.addOffset(3, externalReceiverIdOffset, 0); }
  public static void addReceiverCoord(FlatBufferBuilder builder, int receiverCoordOffset) { builder.addOffset(4, receiverCoordOffset, 0); }
  public static void addReceiverMds(FlatBufferBuilder builder, int receiverMdsOffset) { builder.addOffset(5, receiverMdsOffset, 0); }
  public static void addAmcReceiverMissionId(FlatBufferBuilder builder, int amcReceiverMissionIdOffset) { builder.addOffset(6, amcReceiverMissionIdOffset, 0); }
  public static void addAltReceiverMissionId(FlatBufferBuilder builder, int altReceiverMissionIdOffset) { builder.addOffset(7, altReceiverMissionIdOffset, 0); }
  public static void addReceiverCallSign(FlatBufferBuilder builder, int receiverCallSignOffset) { builder.addOffset(8, receiverCallSignOffset, 0); }
  public static void addReceiverOwner(FlatBufferBuilder builder, int receiverOwnerOffset) { builder.addOffset(9, receiverOwnerOffset, 0); }
  public static void addReceiverPoc(FlatBufferBuilder builder, int receiverPocOffset) { builder.addOffset(10, receiverPocOffset, 0); }
  public static void addReceiverLegNum(FlatBufferBuilder builder, int receiverLegNum) { builder.addInt(11, receiverLegNum, 0); }
  public static void addReceiverDeployedIcao(FlatBufferBuilder builder, int receiverDeployedIcaoOffset) { builder.addOffset(12, receiverDeployedIcaoOffset, 0); }
  public static void addReceiverDeliveryMethod(FlatBufferBuilder builder, int receiverDeliveryMethodOffset) { builder.addOffset(13, receiverDeliveryMethodOffset, 0); }
  public static void addFuelOn(FlatBufferBuilder builder, double fuelOn) { builder.addDouble(14, fuelOn, 0.0); }
  public static void addReceiverCellPosition(FlatBufferBuilder builder, int receiverCellPosition) { builder.addInt(15, receiverCellPosition, 0); }
  public static void addSequenceNum(FlatBufferBuilder builder, int sequenceNumOffset) { builder.addOffset(16, sequenceNumOffset, 0); }
  public static void addRecOrg(FlatBufferBuilder builder, int recOrgOffset) { builder.addOffset(17, recOrgOffset, 0); }
  public static void addNumRecAircraft(FlatBufferBuilder builder, int numRecAircraft) { builder.addInt(18, numRecAircraft, 0); }
  public static void addReceiverFuelType(FlatBufferBuilder builder, int receiverFuelTypeOffset) { builder.addOffset(19, receiverFuelTypeOffset, 0); }
  public static void addReceiverExercise(FlatBufferBuilder builder, int receiverExerciseOffset) { builder.addOffset(20, receiverExerciseOffset, 0); }
  public static void addPackageId(FlatBufferBuilder builder, int packageIdOffset) { builder.addOffset(21, packageIdOffset, 0); }
  public static int endAirEventReceivers_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirEventReceivers_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRE"); }
  public static void finishSizePrefixedAirEventReceivers_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirEventReceivers_Full get(int j) { return get(new AirEventReceivers_Full(), j); }
    public AirEventReceivers_Full get(AirEventReceivers_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

