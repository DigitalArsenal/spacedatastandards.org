// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
@SuppressWarnings("unused")
public final class MtiJobRequest_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiJobRequest_Full getRootAsMtiJobRequest_Full(ByteBuffer _bb) { return getRootAsMtiJobRequest_Full(_bb, new MtiJobRequest_Full()); }
  public static MtiJobRequest_Full getRootAsMtiJobRequest_Full(ByteBuffer _bb, MtiJobRequest_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiJobRequest_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTIJ"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiJobRequest_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The requestor of the sensor service.
   * Example: /// Example: REQUESTER
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String r1() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer r1AsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer r1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier for the tasking message sent by the requesting station.
   * Example: /// Example: IDENTIFIER
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String r2() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer r2AsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer r2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The priority of the request relative to other requests originated by the requesting station.
   * Example: /// Example: 15
   * Constraints: No constraints specified.
   */
  public int r3() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r4() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r5() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r6() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r7() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r8() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r9() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r10() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double r11() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Identifies the radar mode requested by the requestor.
   * Example: /// Example: MODE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String r12() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer r12AsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer r12InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Specifies the radar range resolution requested by the requestor, expressed in centimeters.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int r13() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
   * Example: /// Example: 100
   * Constraints: No constraints specified.
   */
  public int r14() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String jobReqEst() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jobReqEstAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer jobReqEstInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int r21() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int r22() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Specifies the revisit interval for the radar job, expressed in deciseconds.
   * Example: /// Example: 100
   * Constraints: No constraints specified.
   */
  public int r23() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * the type of sensor or the platform.
   * Example: /// Example: TYPE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String r24() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer r24AsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer r24InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The particular variant of the sensor type.
   * Example: /// Example: VARIANT
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String r25() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer r25AsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer r25InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean r26() { int o = __offset(44); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createMtiJobRequest_Full(FlatBufferBuilder builder,
      int r1Offset,
      int r2Offset,
      int r3,
      double r4,
      double r5,
      double r6,
      double r7,
      double r8,
      double r9,
      double r10,
      double r11,
      int r12Offset,
      int r13,
      int r14,
      int jobReqEstOffset,
      int r21,
      int r22,
      int r23,
      int r24Offset,
      int r25Offset,
      boolean r26) {
    builder.startTable(21);
    MtiJobRequest_Full.addR11(builder, r11);
    MtiJobRequest_Full.addR10(builder, r10);
    MtiJobRequest_Full.addR9(builder, r9);
    MtiJobRequest_Full.addR8(builder, r8);
    MtiJobRequest_Full.addR7(builder, r7);
    MtiJobRequest_Full.addR6(builder, r6);
    MtiJobRequest_Full.addR5(builder, r5);
    MtiJobRequest_Full.addR4(builder, r4);
    MtiJobRequest_Full.addR25(builder, r25Offset);
    MtiJobRequest_Full.addR24(builder, r24Offset);
    MtiJobRequest_Full.addR23(builder, r23);
    MtiJobRequest_Full.addR22(builder, r22);
    MtiJobRequest_Full.addR21(builder, r21);
    MtiJobRequest_Full.addJobReqEst(builder, jobReqEstOffset);
    MtiJobRequest_Full.addR14(builder, r14);
    MtiJobRequest_Full.addR13(builder, r13);
    MtiJobRequest_Full.addR12(builder, r12Offset);
    MtiJobRequest_Full.addR3(builder, r3);
    MtiJobRequest_Full.addR2(builder, r2Offset);
    MtiJobRequest_Full.addR1(builder, r1Offset);
    MtiJobRequest_Full.addR26(builder, r26);
    return MtiJobRequest_Full.endMtiJobRequest_Full(builder);
  }

  public static void startMtiJobRequest_Full(FlatBufferBuilder builder) { builder.startTable(21); }
  public static void addR1(FlatBufferBuilder builder, int r1Offset) { builder.addOffset(0, r1Offset, 0); }
  public static void addR2(FlatBufferBuilder builder, int r2Offset) { builder.addOffset(1, r2Offset, 0); }
  public static void addR3(FlatBufferBuilder builder, int r3) { builder.addInt(2, r3, 0); }
  public static void addR4(FlatBufferBuilder builder, double r4) { builder.addDouble(3, r4, 0.0); }
  public static void addR5(FlatBufferBuilder builder, double r5) { builder.addDouble(4, r5, 0.0); }
  public static void addR6(FlatBufferBuilder builder, double r6) { builder.addDouble(5, r6, 0.0); }
  public static void addR7(FlatBufferBuilder builder, double r7) { builder.addDouble(6, r7, 0.0); }
  public static void addR8(FlatBufferBuilder builder, double r8) { builder.addDouble(7, r8, 0.0); }
  public static void addR9(FlatBufferBuilder builder, double r9) { builder.addDouble(8, r9, 0.0); }
  public static void addR10(FlatBufferBuilder builder, double r10) { builder.addDouble(9, r10, 0.0); }
  public static void addR11(FlatBufferBuilder builder, double r11) { builder.addDouble(10, r11, 0.0); }
  public static void addR12(FlatBufferBuilder builder, int r12Offset) { builder.addOffset(11, r12Offset, 0); }
  public static void addR13(FlatBufferBuilder builder, int r13) { builder.addInt(12, r13, 0); }
  public static void addR14(FlatBufferBuilder builder, int r14) { builder.addInt(13, r14, 0); }
  public static void addJobReqEst(FlatBufferBuilder builder, int jobReqEstOffset) { builder.addOffset(14, jobReqEstOffset, 0); }
  public static void addR21(FlatBufferBuilder builder, int r21) { builder.addInt(15, r21, 0); }
  public static void addR22(FlatBufferBuilder builder, int r22) { builder.addInt(16, r22, 0); }
  public static void addR23(FlatBufferBuilder builder, int r23) { builder.addInt(17, r23, 0); }
  public static void addR24(FlatBufferBuilder builder, int r24Offset) { builder.addOffset(18, r24Offset, 0); }
  public static void addR25(FlatBufferBuilder builder, int r25Offset) { builder.addOffset(19, r25Offset, 0); }
  public static void addR26(FlatBufferBuilder builder, boolean r26) { builder.addBoolean(20, r26, false); }
  public static int endMtiJobRequest_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiJobRequest_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTIJ"); }
  public static void finishSizePrefixedMtiJobRequest_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTIJ"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiJobRequest_Full get(int j) { return get(new MtiJobRequest_Full(), j); }
    public MtiJobRequest_Full get(MtiJobRequest_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

