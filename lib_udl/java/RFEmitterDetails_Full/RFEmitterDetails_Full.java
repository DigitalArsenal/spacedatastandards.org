// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
 */
@SuppressWarnings("unused")
public final class RFEmitterDetails_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static RFEmitterDetails_Full getRootAsRFEmitterDetails_Full(ByteBuffer _bb) { return getRootAsRFEmitterDetails_Full(_bb, new RFEmitterDetails_Full()); }
  public static RFEmitterDetails_Full getRootAsRFEmitterDetails_Full(ByteBuffer _bb, RFEmitterDetails_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean RFEmitterDetails_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "RFEM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RFEmitterDetails_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: RFEMITTERDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique identifier of the parent RF Emitter.
   * Example: /// Example: RFEMITTER-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idRfemitter() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idRfemitterAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idRfemitterInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Designator of this RF Emitter.
   * Example: /// Example: DESIGNATOR
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String designator() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer designatorAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer designatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Optional alternate name or alias for this RF Emitter.
   * Example: /// Example: ALTERNATE_NAME
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String altName() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altNameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer altNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Family of this RF Emitter type.
   * Example: /// Example: FAMILY
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String family() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer familyAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer familyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Name of the production facility for this RF Emitter.
   * Example: /// Example: PRODUCTION_FACILITY
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String productionFacilityName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer productionFacilityNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer productionFacilityNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Alternate facility name for this RF Emitter.
   * Example: /// Example: ALTERNATE_FACILITY_NAME
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String alternateFacilityName() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer alternateFacilityNameAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer alternateFacilityNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Unique identifier of the organization which manufactures this RF Emitter.
   * Example: /// Example: MANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Unique identifier of the location of the production facility for this RF Emitter.
   * Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String productionFacilityLocationId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer productionFacilityLocationIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer productionFacilityLocationIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double systemSensitivityStart() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
   * Example: /// Example: 150.23
   * Constraints: No constraints specified.
   */
  public double systemSensitivityEnd() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Type or name of receiver.
   * Example: /// Example: RECEIVER_TYPE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String receiverType() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverTypeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer receiverTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Receiver sensitivity in dBm.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double receiverSensitivity() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Receiver bandwidth in Mhz.
   * Example: /// Example: 15.23
   * Constraints: No constraints specified.
   */
  public double receiverBandwidth() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Transmitter frequency in Mhz.
   * Example: /// Example: 105.9
   * Constraints: No constraints specified.
   */
  public double transmitterFrequency() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Transmitter bandwidth in Mhz.
   * Example: /// Example: 0.125
   * Constraints: No constraints specified.
   */
  public double transmitterBandwidth() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Transmit power in Watts.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double transmitPower() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Barrage noise bandwidth in Mhz.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double barrageNoiseBandwidth() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Doppler noise value in Mhz.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double dopplerNoise() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Digital Form Radio Memory instantaneous bandwidth in Mhz.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double drfmInstantaneousBandwidth() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of channels.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int numChannels() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of bits.
   * Example: /// Example: 256
   * Constraints: No constraints specified.
   */
  public int numBits() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
   * Example: /// Example: [1.1, 2.2]
   * Constraints: No constraints specified.
   */
  public String antennaSize(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int antennaSizeLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector antennaSizeVector() { return antennaSizeVector(new StringVector()); }
  public StringVector antennaSizeVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * For parabolic/dish antennas, the diameter of the antenna in meters.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double antennaDiameter() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Notes on the RF Emitter.
   * Example: /// Example: NOTES
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String notes() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Secondary notes on the RF Emitter.
   * Example: /// Example: MORE_NOTES
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String secondaryNotes() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer secondaryNotesAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer secondaryNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Detailed description of the RF Emitter.
   * Example: /// Example: DESCRIPTION
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String description() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Array of URLs containing additional information on this RF Emitter.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String urls(int j) { int o = __offset(60); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int urlsLength() { int o = __offset(60); return o != 0 ? __vector_len(o) : 0; }
  public StringVector urlsVector() { return urlsVector(new StringVector()); }
  public StringVector urlsVector(StringVector obj) { int o = __offset(60); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(68); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String productionFacilityLocation() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer productionFacilityLocationAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer productionFacilityLocationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String manufacturerOrg() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer manufacturerOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }

  public static int createRFEmitterDetails_Full(FlatBufferBuilder builder,
      int idOffset,
      int idRfemitterOffset,
      int classificationMarkingOffset,
      int designatorOffset,
      int altNameOffset,
      int familyOffset,
      int productionFacilityNameOffset,
      int alternateFacilityNameOffset,
      int manufacturerOrgIdOffset,
      int productionFacilityLocationIdOffset,
      double systemSensitivityStart,
      double systemSensitivityEnd,
      int receiverTypeOffset,
      double receiverSensitivity,
      double receiverBandwidth,
      double transmitterFrequency,
      double transmitterBandwidth,
      double transmitPower,
      double barrageNoiseBandwidth,
      double dopplerNoise,
      double drfmInstantaneousBandwidth,
      int numChannels,
      int numBits,
      int antennaSizeOffset,
      double antennaDiameter,
      int notesOffset,
      int secondaryNotesOffset,
      int descriptionOffset,
      int urlsOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int productionFacilityLocationOffset,
      int manufacturerOrgOffset) {
    builder.startTable(39);
    RFEmitterDetails_Full.addAntennaDiameter(builder, antennaDiameter);
    RFEmitterDetails_Full.addDrfmInstantaneousBandwidth(builder, drfmInstantaneousBandwidth);
    RFEmitterDetails_Full.addDopplerNoise(builder, dopplerNoise);
    RFEmitterDetails_Full.addBarrageNoiseBandwidth(builder, barrageNoiseBandwidth);
    RFEmitterDetails_Full.addTransmitPower(builder, transmitPower);
    RFEmitterDetails_Full.addTransmitterBandwidth(builder, transmitterBandwidth);
    RFEmitterDetails_Full.addTransmitterFrequency(builder, transmitterFrequency);
    RFEmitterDetails_Full.addReceiverBandwidth(builder, receiverBandwidth);
    RFEmitterDetails_Full.addReceiverSensitivity(builder, receiverSensitivity);
    RFEmitterDetails_Full.addSystemSensitivityEnd(builder, systemSensitivityEnd);
    RFEmitterDetails_Full.addSystemSensitivityStart(builder, systemSensitivityStart);
    RFEmitterDetails_Full.addManufacturerOrg(builder, manufacturerOrgOffset);
    RFEmitterDetails_Full.addProductionFacilityLocation(builder, productionFacilityLocationOffset);
    RFEmitterDetails_Full.addUpdatedBy(builder, updatedByOffset);
    RFEmitterDetails_Full.addUpdatedAt(builder, updatedAtOffset);
    RFEmitterDetails_Full.addCreatedBy(builder, createdByOffset);
    RFEmitterDetails_Full.addCreatedAt(builder, createdAtOffset);
    RFEmitterDetails_Full.addOrigNetwork(builder, origNetworkOffset);
    RFEmitterDetails_Full.addOrigin(builder, originOffset);
    RFEmitterDetails_Full.addSource(builder, sourceOffset);
    RFEmitterDetails_Full.addUrls(builder, urlsOffset);
    RFEmitterDetails_Full.addDescription(builder, descriptionOffset);
    RFEmitterDetails_Full.addSecondaryNotes(builder, secondaryNotesOffset);
    RFEmitterDetails_Full.addNotes(builder, notesOffset);
    RFEmitterDetails_Full.addAntennaSize(builder, antennaSizeOffset);
    RFEmitterDetails_Full.addNumBits(builder, numBits);
    RFEmitterDetails_Full.addNumChannels(builder, numChannels);
    RFEmitterDetails_Full.addReceiverType(builder, receiverTypeOffset);
    RFEmitterDetails_Full.addProductionFacilityLocationId(builder, productionFacilityLocationIdOffset);
    RFEmitterDetails_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    RFEmitterDetails_Full.addAlternateFacilityName(builder, alternateFacilityNameOffset);
    RFEmitterDetails_Full.addProductionFacilityName(builder, productionFacilityNameOffset);
    RFEmitterDetails_Full.addFamily(builder, familyOffset);
    RFEmitterDetails_Full.addAltName(builder, altNameOffset);
    RFEmitterDetails_Full.addDesignator(builder, designatorOffset);
    RFEmitterDetails_Full.addClassificationMarking(builder, classificationMarkingOffset);
    RFEmitterDetails_Full.addIdRfemitter(builder, idRfemitterOffset);
    RFEmitterDetails_Full.addId(builder, idOffset);
    RFEmitterDetails_Full.addDataMode(builder, dataMode);
    return RFEmitterDetails_Full.endRFEmitterDetails_Full(builder);
  }

  public static void startRFEmitterDetails_Full(FlatBufferBuilder builder) { builder.startTable(39); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdRfemitter(FlatBufferBuilder builder, int idRfemitterOffset) { builder.addOffset(1, idRfemitterOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addDesignator(FlatBufferBuilder builder, int designatorOffset) { builder.addOffset(3, designatorOffset, 0); }
  public static void addAltName(FlatBufferBuilder builder, int altNameOffset) { builder.addOffset(4, altNameOffset, 0); }
  public static void addFamily(FlatBufferBuilder builder, int familyOffset) { builder.addOffset(5, familyOffset, 0); }
  public static void addProductionFacilityName(FlatBufferBuilder builder, int productionFacilityNameOffset) { builder.addOffset(6, productionFacilityNameOffset, 0); }
  public static void addAlternateFacilityName(FlatBufferBuilder builder, int alternateFacilityNameOffset) { builder.addOffset(7, alternateFacilityNameOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(8, manufacturerOrgIdOffset, 0); }
  public static void addProductionFacilityLocationId(FlatBufferBuilder builder, int productionFacilityLocationIdOffset) { builder.addOffset(9, productionFacilityLocationIdOffset, 0); }
  public static void addSystemSensitivityStart(FlatBufferBuilder builder, double systemSensitivityStart) { builder.addDouble(10, systemSensitivityStart, 0.0); }
  public static void addSystemSensitivityEnd(FlatBufferBuilder builder, double systemSensitivityEnd) { builder.addDouble(11, systemSensitivityEnd, 0.0); }
  public static void addReceiverType(FlatBufferBuilder builder, int receiverTypeOffset) { builder.addOffset(12, receiverTypeOffset, 0); }
  public static void addReceiverSensitivity(FlatBufferBuilder builder, double receiverSensitivity) { builder.addDouble(13, receiverSensitivity, 0.0); }
  public static void addReceiverBandwidth(FlatBufferBuilder builder, double receiverBandwidth) { builder.addDouble(14, receiverBandwidth, 0.0); }
  public static void addTransmitterFrequency(FlatBufferBuilder builder, double transmitterFrequency) { builder.addDouble(15, transmitterFrequency, 0.0); }
  public static void addTransmitterBandwidth(FlatBufferBuilder builder, double transmitterBandwidth) { builder.addDouble(16, transmitterBandwidth, 0.0); }
  public static void addTransmitPower(FlatBufferBuilder builder, double transmitPower) { builder.addDouble(17, transmitPower, 0.0); }
  public static void addBarrageNoiseBandwidth(FlatBufferBuilder builder, double barrageNoiseBandwidth) { builder.addDouble(18, barrageNoiseBandwidth, 0.0); }
  public static void addDopplerNoise(FlatBufferBuilder builder, double dopplerNoise) { builder.addDouble(19, dopplerNoise, 0.0); }
  public static void addDrfmInstantaneousBandwidth(FlatBufferBuilder builder, double drfmInstantaneousBandwidth) { builder.addDouble(20, drfmInstantaneousBandwidth, 0.0); }
  public static void addNumChannels(FlatBufferBuilder builder, int numChannels) { builder.addInt(21, numChannels, 0); }
  public static void addNumBits(FlatBufferBuilder builder, int numBits) { builder.addInt(22, numBits, 0); }
  public static void addAntennaSize(FlatBufferBuilder builder, int antennaSizeOffset) { builder.addOffset(23, antennaSizeOffset, 0); }
  public static int createAntennaSizeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAntennaSizeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAntennaDiameter(FlatBufferBuilder builder, double antennaDiameter) { builder.addDouble(24, antennaDiameter, 0.0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(25, notesOffset, 0); }
  public static void addSecondaryNotes(FlatBufferBuilder builder, int secondaryNotesOffset) { builder.addOffset(26, secondaryNotesOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(27, descriptionOffset, 0); }
  public static void addUrls(FlatBufferBuilder builder, int urlsOffset) { builder.addOffset(28, urlsOffset, 0); }
  public static int createUrlsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUrlsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(29, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(30, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(31, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(32, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(33, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(34, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(35, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(36, updatedByOffset, 0); }
  public static void addProductionFacilityLocation(FlatBufferBuilder builder, int productionFacilityLocationOffset) { builder.addOffset(37, productionFacilityLocationOffset, 0); }
  public static void addManufacturerOrg(FlatBufferBuilder builder, int manufacturerOrgOffset) { builder.addOffset(38, manufacturerOrgOffset, 0); }
  public static int endRFEmitterDetails_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishRFEmitterDetails_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "RFEM"); }
  public static void finishSizePrefixedRFEmitterDetails_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "RFEM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RFEmitterDetails_Full get(int j) { return get(new RFEmitterDetails_Full(), j); }
    public RFEmitterDetails_Full get(RFEmitterDetails_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

