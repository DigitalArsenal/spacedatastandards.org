// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
 */
@SuppressWarnings("unused")
public final class SolarArrayDetails_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SolarArrayDetails_Full getRootAsSolarArrayDetails_Full(ByteBuffer _bb) { return getRootAsSolarArrayDetails_Full(_bb, new SolarArrayDetails_Full()); }
  public static SolarArrayDetails_Full getRootAsSolarArrayDetails_Full(ByteBuffer _bb, SolarArrayDetails_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SolarArrayDetails_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SOLA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SolarArrayDetails_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SOLARARRAYDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique identifier of the parent SolarArray.
   * Example: /// Example: SOLARARRAY-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idSolarArray() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSolarArrayAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idSolarArrayInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Type of solar array (e.g. U Shaped).
   * Example: /// Example: U Shaped
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String type() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Solar array technology (e.g. Ga-As).
   * Example: /// Example: Ga-As
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String technology() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer technologyAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer technologyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Solar array junction technology (e.g. Triple).
   * Example: /// Example: Triple
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String junctionTechnology() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer junctionTechnologyAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer junctionTechnologyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the organization that manufactures the solar array.
   * Example: /// Example: MANUFACTURERORG-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Solar Array span in meters.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double span() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Solar Array area in square meters.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double area() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Solar array description/notes.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String description() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String manufacturerOrg() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer manufacturerOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }

  public static int createSolarArrayDetails_Full(FlatBufferBuilder builder,
      int idOffset,
      int idSolarArrayOffset,
      int classificationMarkingOffset,
      int typeOffset,
      int technologyOffset,
      int junctionTechnologyOffset,
      int manufacturerOrgIdOffset,
      double span,
      double area,
      int descriptionOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int tagsOffset,
      int manufacturerOrgOffset) {
    builder.startTable(20);
    SolarArrayDetails_Full.addArea(builder, area);
    SolarArrayDetails_Full.addSpan(builder, span);
    SolarArrayDetails_Full.addManufacturerOrg(builder, manufacturerOrgOffset);
    SolarArrayDetails_Full.addTags(builder, tagsOffset);
    SolarArrayDetails_Full.addOrigNetwork(builder, origNetworkOffset);
    SolarArrayDetails_Full.addOrigin(builder, originOffset);
    SolarArrayDetails_Full.addSource(builder, sourceOffset);
    SolarArrayDetails_Full.addUpdatedBy(builder, updatedByOffset);
    SolarArrayDetails_Full.addUpdatedAt(builder, updatedAtOffset);
    SolarArrayDetails_Full.addCreatedBy(builder, createdByOffset);
    SolarArrayDetails_Full.addCreatedAt(builder, createdAtOffset);
    SolarArrayDetails_Full.addDescription(builder, descriptionOffset);
    SolarArrayDetails_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    SolarArrayDetails_Full.addJunctionTechnology(builder, junctionTechnologyOffset);
    SolarArrayDetails_Full.addTechnology(builder, technologyOffset);
    SolarArrayDetails_Full.addType(builder, typeOffset);
    SolarArrayDetails_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SolarArrayDetails_Full.addIdSolarArray(builder, idSolarArrayOffset);
    SolarArrayDetails_Full.addId(builder, idOffset);
    SolarArrayDetails_Full.addDataMode(builder, dataMode);
    return SolarArrayDetails_Full.endSolarArrayDetails_Full(builder);
  }

  public static void startSolarArrayDetails_Full(FlatBufferBuilder builder) { builder.startTable(20); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdSolarArray(FlatBufferBuilder builder, int idSolarArrayOffset) { builder.addOffset(1, idSolarArrayOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(3, typeOffset, 0); }
  public static void addTechnology(FlatBufferBuilder builder, int technologyOffset) { builder.addOffset(4, technologyOffset, 0); }
  public static void addJunctionTechnology(FlatBufferBuilder builder, int junctionTechnologyOffset) { builder.addOffset(5, junctionTechnologyOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(6, manufacturerOrgIdOffset, 0); }
  public static void addSpan(FlatBufferBuilder builder, double span) { builder.addDouble(7, span, 0.0); }
  public static void addArea(FlatBufferBuilder builder, double area) { builder.addDouble(8, area, 0.0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(9, descriptionOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(10, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(11, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(12, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(13, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(14, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(15, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(16, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(17, dataMode, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(18, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addManufacturerOrg(FlatBufferBuilder builder, int manufacturerOrgOffset) { builder.addOffset(19, manufacturerOrgOffset, 0); }
  public static int endSolarArrayDetails_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSolarArrayDetails_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SOLA"); }
  public static void finishSizePrefixedSolarArrayDetails_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SOLA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SolarArrayDetails_Full get(int j) { return get(new SolarArrayDetails_Full(), j); }
    public SolarArrayDetails_Full get(SolarArrayDetails_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

