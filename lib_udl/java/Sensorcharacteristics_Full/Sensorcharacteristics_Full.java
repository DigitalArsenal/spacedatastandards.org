// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of characteristics and capabilities of a sensor.
 */
@SuppressWarnings("unused")
public final class Sensorcharacteristics_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Sensorcharacteristics_Full getRootAsSensorcharacteristics_Full(ByteBuffer _bb) { return getRootAsSensorcharacteristics_Full(_bb, new Sensorcharacteristics_Full()); }
  public static Sensorcharacteristics_Full getRootAsSensorcharacteristics_Full(ByteBuffer _bb, Sensorcharacteristics_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Sensorcharacteristics_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SENS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Sensorcharacteristics_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SENSORCHARACTERISTICS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique identifier of the parent sensor.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idSensor() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Azimuth rate acquisition limit (rad/min).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double azimuthRate() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Elevation rate acquisition limit (rad/min).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double elevationRateGeolm() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum range measurement capability of the sensor (km).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double minRangeLimit() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum observable range limit (km) -- sensor cannot acquire beyond this range.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double maxRangeLimit() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For Orbiting Sensors, First Card Azimuth limit #1 (left, deg).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double leftClockAngle() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For Orbiting Sensors, First Card Azimuth limit #3 (left, deg).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double rightClockAngle() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The angle of the center of a phased array sensor.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double boresight() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of degrees off of the boresight for the sensor (degrees).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double boresightOffAngle() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Negative Range-rate/relative velocity limit (km/sec).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double negativeRangeRateLimit() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Positive Range-rate/relative velocity limit (km/sec).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double positiveRangeRateLimit() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Absolute magnitude acquisition limit for optical sensors.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double magnitudeLimit() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Beginning track angle limit (rad). Track angle is the angle between the camera axis and the gimbal plane. Values range from 0 - PI/2.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double trackAngle() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Signal to Noise Ratio (in db). The values for this range from 0.0 - + 99.99 dB.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double minSignalNoiseRatio() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The beam width of a Sensor's Fan (range). The values for this range from (0.0 to PI).
   * Example: /// Example: 3.1
   * Constraints: No constraints specified.
   */
  public double fanBeamWidth() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum taskable range of the sensor (km).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double taskableRange() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum observable sensor range (km).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double maxObservableRange() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radio frequency (if sensor is RF).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double radioFrequency() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radar frequency of the sensor (if a radar sensor).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double radarFrequency() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radar transmit power in Watts.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double transmitPower() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Horizontal field of view.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double hFov() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vertical field of view.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double vFov() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Horizontal pixel resolution.
   * Example: /// Example: 1000
   * Constraints: No constraints specified.
   */
  public int hResPixels() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Vertical pixel resolution.
   * Example: /// Example: 1000
   * Constraints: No constraints specified.
   */
  public int vResPixels() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Sensor band.
   * Example: /// Example: BAND
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String band() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bandAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer bandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Max deviation angle of the sensor in degrees.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double maxDeviationAngle() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optical sensor camera aperture.
   * Example: /// Example: 2.23
   * Constraints: No constraints specified.
   */
  public double aperture() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Leftmost GEO belt longitude limit for this sensor (if applicable).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double leftGeoBeltLimit() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rightmost GEO belt longitude limit for this sensor (if applicable).
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double rightGeoBeltLimit() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For ASR (Air Surveillance Radar) sensors, the scan (360 deg sweep) rate of the radar, in scans/minute.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double asrScanRate() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For radar based sensors, K-factor is a relative indicator of refractivity that infers the amount of radar beam bending due to atmosphere. (1<K<2).
   * Example: /// Example: 1.4
   * Constraints: No constraints specified.
   */
  public double k() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For radar based sensors, the focal point elevation of the radar at the site, in meters.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double focalPoint() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For tower sensors, the physical height of the sensor tower, in meters.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double towerHeight() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * True North correction for the sensor, in ACP (Azimunth Change Pulse) count.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int trueNorthCorrector() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Angle between magnetic north and true north at the sensor site, in degrees.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double magDec() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peformance zone-1 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double z1MinRange() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peformance zone-2 minimum range, in km. Note that the zones apply only to the PSR/Search radars.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double z2MinRange() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peformance zone-1 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double z1MaxRange() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peformance zone-2 maximum range, in km. Note that the zones apply only to the PSR/Search radars.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double z2MaxRange() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For radar based sensors, radar maximum unambiguous range, in km.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double radarMur() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For radar based sensors, probability of the indication of the presence of a radar target due to noise or interference.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double probFalseAlarm() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For radar based sensors, pulse repetition frequency, in Hz. Number of new pulses tranmistted per second.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double prf() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For radar based sensors, radar pulse width, in microseconds. The transmit time of a pulse.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double radarPulseWidth() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For radar based sensors, number of integrated pulses in a transmit cycle.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int numIntegratedPulses() { int o = __offset(96); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Antenna true tilt, in degrees.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double trueTilt() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Message data format transmitted by the sensor digitizer.
   * Example: /// Example: DATA_FORMAT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String radarMessageFormat() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer radarMessageFormatAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer radarMessageFormatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * For radar based sensors, expression of the radar system noise, aggregated as an equivalent thermal noise value, in degrees Kelvin.
   * Example: /// Example: 3.5
   * Constraints: No constraints specified.
   */
  public double systemNoiseTemperature() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(106); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(114); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(114, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 1); }

  public static int createSensorcharacteristics_Full(FlatBufferBuilder builder,
      int idOffset,
      int idSensorOffset,
      int classificationMarkingOffset,
      int origNetworkOffset,
      double azimuthRate,
      double elevationRateGeolm,
      double minRangeLimit,
      double maxRangeLimit,
      double leftClockAngle,
      double rightClockAngle,
      double boresight,
      double boresightOffAngle,
      double negativeRangeRateLimit,
      double positiveRangeRateLimit,
      double magnitudeLimit,
      double trackAngle,
      double minSignalNoiseRatio,
      double fanBeamWidth,
      double taskableRange,
      double maxObservableRange,
      double radioFrequency,
      double radarFrequency,
      double transmitPower,
      double hFov,
      double vFov,
      int hResPixels,
      int vResPixels,
      int bandOffset,
      double maxDeviationAngle,
      double aperture,
      double leftGeoBeltLimit,
      double rightGeoBeltLimit,
      double asrScanRate,
      double k,
      double focalPoint,
      double towerHeight,
      int trueNorthCorrector,
      double magDec,
      double z1MinRange,
      double z2MinRange,
      double z1MaxRange,
      double z2MaxRange,
      double radarMur,
      double probFalseAlarm,
      double prf,
      double radarPulseWidth,
      int numIntegratedPulses,
      double trueTilt,
      int radarMessageFormatOffset,
      double systemNoiseTemperature,
      int sourceOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset) {
    builder.startTable(56);
    Sensorcharacteristics_Full.addSystemNoiseTemperature(builder, systemNoiseTemperature);
    Sensorcharacteristics_Full.addTrueTilt(builder, trueTilt);
    Sensorcharacteristics_Full.addRadarPulseWidth(builder, radarPulseWidth);
    Sensorcharacteristics_Full.addPrf(builder, prf);
    Sensorcharacteristics_Full.addProbFalseAlarm(builder, probFalseAlarm);
    Sensorcharacteristics_Full.addRadarMur(builder, radarMur);
    Sensorcharacteristics_Full.addZ2MaxRange(builder, z2MaxRange);
    Sensorcharacteristics_Full.addZ1MaxRange(builder, z1MaxRange);
    Sensorcharacteristics_Full.addZ2MinRange(builder, z2MinRange);
    Sensorcharacteristics_Full.addZ1MinRange(builder, z1MinRange);
    Sensorcharacteristics_Full.addMagDec(builder, magDec);
    Sensorcharacteristics_Full.addTowerHeight(builder, towerHeight);
    Sensorcharacteristics_Full.addFocalPoint(builder, focalPoint);
    Sensorcharacteristics_Full.addK(builder, k);
    Sensorcharacteristics_Full.addAsrScanRate(builder, asrScanRate);
    Sensorcharacteristics_Full.addRightGeoBeltLimit(builder, rightGeoBeltLimit);
    Sensorcharacteristics_Full.addLeftGeoBeltLimit(builder, leftGeoBeltLimit);
    Sensorcharacteristics_Full.addAperture(builder, aperture);
    Sensorcharacteristics_Full.addMaxDeviationAngle(builder, maxDeviationAngle);
    Sensorcharacteristics_Full.addVFov(builder, vFov);
    Sensorcharacteristics_Full.addHFov(builder, hFov);
    Sensorcharacteristics_Full.addTransmitPower(builder, transmitPower);
    Sensorcharacteristics_Full.addRadarFrequency(builder, radarFrequency);
    Sensorcharacteristics_Full.addRadioFrequency(builder, radioFrequency);
    Sensorcharacteristics_Full.addMaxObservableRange(builder, maxObservableRange);
    Sensorcharacteristics_Full.addTaskableRange(builder, taskableRange);
    Sensorcharacteristics_Full.addFanBeamWidth(builder, fanBeamWidth);
    Sensorcharacteristics_Full.addMinSignalNoiseRatio(builder, minSignalNoiseRatio);
    Sensorcharacteristics_Full.addTrackAngle(builder, trackAngle);
    Sensorcharacteristics_Full.addMagnitudeLimit(builder, magnitudeLimit);
    Sensorcharacteristics_Full.addPositiveRangeRateLimit(builder, positiveRangeRateLimit);
    Sensorcharacteristics_Full.addNegativeRangeRateLimit(builder, negativeRangeRateLimit);
    Sensorcharacteristics_Full.addBoresightOffAngle(builder, boresightOffAngle);
    Sensorcharacteristics_Full.addBoresight(builder, boresight);
    Sensorcharacteristics_Full.addRightClockAngle(builder, rightClockAngle);
    Sensorcharacteristics_Full.addLeftClockAngle(builder, leftClockAngle);
    Sensorcharacteristics_Full.addMaxRangeLimit(builder, maxRangeLimit);
    Sensorcharacteristics_Full.addMinRangeLimit(builder, minRangeLimit);
    Sensorcharacteristics_Full.addElevationRateGeolm(builder, elevationRateGeolm);
    Sensorcharacteristics_Full.addAzimuthRate(builder, azimuthRate);
    Sensorcharacteristics_Full.addUpdatedBy(builder, updatedByOffset);
    Sensorcharacteristics_Full.addUpdatedAt(builder, updatedAtOffset);
    Sensorcharacteristics_Full.addCreatedBy(builder, createdByOffset);
    Sensorcharacteristics_Full.addCreatedAt(builder, createdAtOffset);
    Sensorcharacteristics_Full.addSource(builder, sourceOffset);
    Sensorcharacteristics_Full.addRadarMessageFormat(builder, radarMessageFormatOffset);
    Sensorcharacteristics_Full.addNumIntegratedPulses(builder, numIntegratedPulses);
    Sensorcharacteristics_Full.addTrueNorthCorrector(builder, trueNorthCorrector);
    Sensorcharacteristics_Full.addBand(builder, bandOffset);
    Sensorcharacteristics_Full.addVResPixels(builder, vResPixels);
    Sensorcharacteristics_Full.addHResPixels(builder, hResPixels);
    Sensorcharacteristics_Full.addOrigNetwork(builder, origNetworkOffset);
    Sensorcharacteristics_Full.addClassificationMarking(builder, classificationMarkingOffset);
    Sensorcharacteristics_Full.addIdSensor(builder, idSensorOffset);
    Sensorcharacteristics_Full.addId(builder, idOffset);
    Sensorcharacteristics_Full.addDataMode(builder, dataMode);
    return Sensorcharacteristics_Full.endSensorcharacteristics_Full(builder);
  }

  public static void startSensorcharacteristics_Full(FlatBufferBuilder builder) { builder.startTable(56); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(1, idSensorOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(3, origNetworkOffset, 0); }
  public static void addAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.addDouble(4, azimuthRate, 0.0); }
  public static void addElevationRateGeolm(FlatBufferBuilder builder, double elevationRateGeolm) { builder.addDouble(5, elevationRateGeolm, 0.0); }
  public static void addMinRangeLimit(FlatBufferBuilder builder, double minRangeLimit) { builder.addDouble(6, minRangeLimit, 0.0); }
  public static void addMaxRangeLimit(FlatBufferBuilder builder, double maxRangeLimit) { builder.addDouble(7, maxRangeLimit, 0.0); }
  public static void addLeftClockAngle(FlatBufferBuilder builder, double leftClockAngle) { builder.addDouble(8, leftClockAngle, 0.0); }
  public static void addRightClockAngle(FlatBufferBuilder builder, double rightClockAngle) { builder.addDouble(9, rightClockAngle, 0.0); }
  public static void addBoresight(FlatBufferBuilder builder, double boresight) { builder.addDouble(10, boresight, 0.0); }
  public static void addBoresightOffAngle(FlatBufferBuilder builder, double boresightOffAngle) { builder.addDouble(11, boresightOffAngle, 0.0); }
  public static void addNegativeRangeRateLimit(FlatBufferBuilder builder, double negativeRangeRateLimit) { builder.addDouble(12, negativeRangeRateLimit, 0.0); }
  public static void addPositiveRangeRateLimit(FlatBufferBuilder builder, double positiveRangeRateLimit) { builder.addDouble(13, positiveRangeRateLimit, 0.0); }
  public static void addMagnitudeLimit(FlatBufferBuilder builder, double magnitudeLimit) { builder.addDouble(14, magnitudeLimit, 0.0); }
  public static void addTrackAngle(FlatBufferBuilder builder, double trackAngle) { builder.addDouble(15, trackAngle, 0.0); }
  public static void addMinSignalNoiseRatio(FlatBufferBuilder builder, double minSignalNoiseRatio) { builder.addDouble(16, minSignalNoiseRatio, 0.0); }
  public static void addFanBeamWidth(FlatBufferBuilder builder, double fanBeamWidth) { builder.addDouble(17, fanBeamWidth, 0.0); }
  public static void addTaskableRange(FlatBufferBuilder builder, double taskableRange) { builder.addDouble(18, taskableRange, 0.0); }
  public static void addMaxObservableRange(FlatBufferBuilder builder, double maxObservableRange) { builder.addDouble(19, maxObservableRange, 0.0); }
  public static void addRadioFrequency(FlatBufferBuilder builder, double radioFrequency) { builder.addDouble(20, radioFrequency, 0.0); }
  public static void addRadarFrequency(FlatBufferBuilder builder, double radarFrequency) { builder.addDouble(21, radarFrequency, 0.0); }
  public static void addTransmitPower(FlatBufferBuilder builder, double transmitPower) { builder.addDouble(22, transmitPower, 0.0); }
  public static void addHFov(FlatBufferBuilder builder, double hFov) { builder.addDouble(23, hFov, 0.0); }
  public static void addVFov(FlatBufferBuilder builder, double vFov) { builder.addDouble(24, vFov, 0.0); }
  public static void addHResPixels(FlatBufferBuilder builder, int hResPixels) { builder.addInt(25, hResPixels, 0); }
  public static void addVResPixels(FlatBufferBuilder builder, int vResPixels) { builder.addInt(26, vResPixels, 0); }
  public static void addBand(FlatBufferBuilder builder, int bandOffset) { builder.addOffset(27, bandOffset, 0); }
  public static void addMaxDeviationAngle(FlatBufferBuilder builder, double maxDeviationAngle) { builder.addDouble(28, maxDeviationAngle, 0.0); }
  public static void addAperture(FlatBufferBuilder builder, double aperture) { builder.addDouble(29, aperture, 0.0); }
  public static void addLeftGeoBeltLimit(FlatBufferBuilder builder, double leftGeoBeltLimit) { builder.addDouble(30, leftGeoBeltLimit, 0.0); }
  public static void addRightGeoBeltLimit(FlatBufferBuilder builder, double rightGeoBeltLimit) { builder.addDouble(31, rightGeoBeltLimit, 0.0); }
  public static void addAsrScanRate(FlatBufferBuilder builder, double asrScanRate) { builder.addDouble(32, asrScanRate, 0.0); }
  public static void addK(FlatBufferBuilder builder, double k) { builder.addDouble(33, k, 0.0); }
  public static void addFocalPoint(FlatBufferBuilder builder, double focalPoint) { builder.addDouble(34, focalPoint, 0.0); }
  public static void addTowerHeight(FlatBufferBuilder builder, double towerHeight) { builder.addDouble(35, towerHeight, 0.0); }
  public static void addTrueNorthCorrector(FlatBufferBuilder builder, int trueNorthCorrector) { builder.addInt(36, trueNorthCorrector, 0); }
  public static void addMagDec(FlatBufferBuilder builder, double magDec) { builder.addDouble(37, magDec, 0.0); }
  public static void addZ1MinRange(FlatBufferBuilder builder, double z1MinRange) { builder.addDouble(38, z1MinRange, 0.0); }
  public static void addZ2MinRange(FlatBufferBuilder builder, double z2MinRange) { builder.addDouble(39, z2MinRange, 0.0); }
  public static void addZ1MaxRange(FlatBufferBuilder builder, double z1MaxRange) { builder.addDouble(40, z1MaxRange, 0.0); }
  public static void addZ2MaxRange(FlatBufferBuilder builder, double z2MaxRange) { builder.addDouble(41, z2MaxRange, 0.0); }
  public static void addRadarMur(FlatBufferBuilder builder, double radarMur) { builder.addDouble(42, radarMur, 0.0); }
  public static void addProbFalseAlarm(FlatBufferBuilder builder, double probFalseAlarm) { builder.addDouble(43, probFalseAlarm, 0.0); }
  public static void addPrf(FlatBufferBuilder builder, double prf) { builder.addDouble(44, prf, 0.0); }
  public static void addRadarPulseWidth(FlatBufferBuilder builder, double radarPulseWidth) { builder.addDouble(45, radarPulseWidth, 0.0); }
  public static void addNumIntegratedPulses(FlatBufferBuilder builder, int numIntegratedPulses) { builder.addInt(46, numIntegratedPulses, 0); }
  public static void addTrueTilt(FlatBufferBuilder builder, double trueTilt) { builder.addDouble(47, trueTilt, 0.0); }
  public static void addRadarMessageFormat(FlatBufferBuilder builder, int radarMessageFormatOffset) { builder.addOffset(48, radarMessageFormatOffset, 0); }
  public static void addSystemNoiseTemperature(FlatBufferBuilder builder, double systemNoiseTemperature) { builder.addDouble(49, systemNoiseTemperature, 0.0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(50, sourceOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(51, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(52, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(53, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(54, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(55, updatedByOffset, 0); }
  public static int endSensorcharacteristics_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSensorcharacteristics_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SENS"); }
  public static void finishSizePrefixedSensorcharacteristics_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SENS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Sensorcharacteristics_Full get(int j) { return get(new Sensorcharacteristics_Full(), j); }
    public Sensorcharacteristics_Full get(Sensorcharacteristics_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

