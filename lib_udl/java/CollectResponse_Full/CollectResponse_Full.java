// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
 */
@SuppressWarnings("unused")
public final class CollectResponse_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static CollectResponse_Full getRootAsCollectResponse_Full(ByteBuffer _bb) { return getRootAsCollectResponse_Full(_bb, new CollectResponse_Full()); }
  public static CollectResponse_Full getRootAsCollectResponse_Full(ByteBuffer _bb, CollectResponse_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean CollectResponse_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "COLL"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CollectResponse_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: COLLECTRESPONSE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the request associated with this response.
   * Example: /// Example: REF-REQUEST-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idRequest() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idRequestAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idRequestInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the target on-orbit object associated with this response.
   * Example: /// Example: REF-ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 101
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onOrbit() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onOrbitAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer onOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Optional task ID associated with the request/response.
   * Example: /// Example: TASK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String taskId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer taskIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Unique identifier of the parent plan or schedule associated with the request/response.
   * Example: /// Example: REF-PLAN-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idPlan() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idPlanAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer idPlanInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
   * Example: /// Example: EXTERNAL-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
   * ACCEPTED: The collect or contact request has been received and accepted.
   * CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
   * COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
   * COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
   * DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
   * FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
   * PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
   * PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
   * REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
   * SCHEDULED: The request was received and has been scheduled for execution.
   * Example: /// Example: ACCEPTED
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String status() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The actual start time of the collect or contact, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String actualStartTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualStartTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer actualStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The actual end time of the collect or contact, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T18:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String actualEndTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualEndTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer actualEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Proposed alternative start time, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String altStartTime() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altStartTimeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer altStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Proposed alternative end time, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T18:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String altEndTime() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altEndTimeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer altEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Error code associated with this request/response.
   * Example: /// Example: ERROR CODE
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String errCode() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errCodeAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer errCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
   * Example: /// Example: ['DOA', 'DWELL']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
   * Example: /// Example: ['DOA_ID', 'DWELL_ID']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Notes or comments associated with this response.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: REF-SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(56); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createCollectResponse_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idRequestOffset,
      int idOnOrbitOffset,
      int origObjectIdOffset,
      int satNo,
      int onOrbitOffset,
      int taskIdOffset,
      int idPlanOffset,
      int externalIdOffset,
      int statusOffset,
      int actualStartTimeOffset,
      int actualEndTimeOffset,
      int altStartTimeOffset,
      int altEndTimeOffset,
      int errCodeOffset,
      int srcTypsOffset,
      int srcIdsOffset,
      int notesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      byte dataMode,
      int tagsOffset) {
    builder.startTable(28);
    CollectResponse_Full.addTags(builder, tagsOffset);
    CollectResponse_Full.addOrigSensorId(builder, origSensorIdOffset);
    CollectResponse_Full.addIdSensor(builder, idSensorOffset);
    CollectResponse_Full.addOrigNetwork(builder, origNetworkOffset);
    CollectResponse_Full.addOrigin(builder, originOffset);
    CollectResponse_Full.addSource(builder, sourceOffset);
    CollectResponse_Full.addCreatedBy(builder, createdByOffset);
    CollectResponse_Full.addCreatedAt(builder, createdAtOffset);
    CollectResponse_Full.addNotes(builder, notesOffset);
    CollectResponse_Full.addSrcIds(builder, srcIdsOffset);
    CollectResponse_Full.addSrcTyps(builder, srcTypsOffset);
    CollectResponse_Full.addErrCode(builder, errCodeOffset);
    CollectResponse_Full.addAltEndTime(builder, altEndTimeOffset);
    CollectResponse_Full.addAltStartTime(builder, altStartTimeOffset);
    CollectResponse_Full.addActualEndTime(builder, actualEndTimeOffset);
    CollectResponse_Full.addActualStartTime(builder, actualStartTimeOffset);
    CollectResponse_Full.addStatus(builder, statusOffset);
    CollectResponse_Full.addExternalId(builder, externalIdOffset);
    CollectResponse_Full.addIdPlan(builder, idPlanOffset);
    CollectResponse_Full.addTaskId(builder, taskIdOffset);
    CollectResponse_Full.addOnOrbit(builder, onOrbitOffset);
    CollectResponse_Full.addSatNo(builder, satNo);
    CollectResponse_Full.addOrigObjectId(builder, origObjectIdOffset);
    CollectResponse_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    CollectResponse_Full.addIdRequest(builder, idRequestOffset);
    CollectResponse_Full.addClassificationMarking(builder, classificationMarkingOffset);
    CollectResponse_Full.addId(builder, idOffset);
    CollectResponse_Full.addDataMode(builder, dataMode);
    return CollectResponse_Full.endCollectResponse_Full(builder);
  }

  public static void startCollectResponse_Full(FlatBufferBuilder builder) { builder.startTable(28); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdRequest(FlatBufferBuilder builder, int idRequestOffset) { builder.addOffset(2, idRequestOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(3, idOnOrbitOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(4, origObjectIdOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(5, satNo, 0); }
  public static void addOnOrbit(FlatBufferBuilder builder, int onOrbitOffset) { builder.addOffset(6, onOrbitOffset, 0); }
  public static void addTaskId(FlatBufferBuilder builder, int taskIdOffset) { builder.addOffset(7, taskIdOffset, 0); }
  public static void addIdPlan(FlatBufferBuilder builder, int idPlanOffset) { builder.addOffset(8, idPlanOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(9, externalIdOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(10, statusOffset, 0); }
  public static void addActualStartTime(FlatBufferBuilder builder, int actualStartTimeOffset) { builder.addOffset(11, actualStartTimeOffset, 0); }
  public static void addActualEndTime(FlatBufferBuilder builder, int actualEndTimeOffset) { builder.addOffset(12, actualEndTimeOffset, 0); }
  public static void addAltStartTime(FlatBufferBuilder builder, int altStartTimeOffset) { builder.addOffset(13, altStartTimeOffset, 0); }
  public static void addAltEndTime(FlatBufferBuilder builder, int altEndTimeOffset) { builder.addOffset(14, altEndTimeOffset, 0); }
  public static void addErrCode(FlatBufferBuilder builder, int errCodeOffset) { builder.addOffset(15, errCodeOffset, 0); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(16, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(17, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(18, notesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(19, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(20, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(21, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(22, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(23, origNetworkOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(24, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(25, origSensorIdOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(26, dataMode, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(27, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endCollectResponse_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishCollectResponse_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "COLL"); }
  public static void finishSizePrefixedCollectResponse_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "COLL"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CollectResponse_Full get(int j) { return get(new CollectResponse_Full(), j); }
    public CollectResponse_Full get(CollectResponse_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

