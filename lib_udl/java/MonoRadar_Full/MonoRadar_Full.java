// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
 */
@SuppressWarnings("unused")
public final class MonoRadar_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MonoRadar_Full getRootAsMonoRadar_Full(ByteBuffer _bb) { return getRootAsMonoRadar_Full(_bb, new MonoRadar_Full()); }
  public static MonoRadar_Full getRootAsMonoRadar_Full(ByteBuffer _bb, MonoRadar_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MonoRadar_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MonoRadar_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: MONORADAR-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Test target indicator.
   * Example: /// Example: TTI
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tti() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ttiAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ttiInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * ID of the radar site or station providing the data.
   * Example: /// Example: REF-SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double senlat() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double senlon() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude, in kilometers, at time of observation (ts).
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * System Area Code.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int sac() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * System Identification Code.
   * Example: /// Example: 40
   * Constraints: No constraints specified.
   */
  public int sic() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Aircraft identification from an aircraft equipped with a Mode S transponder.
   * Example: /// Example: TGT-ID
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tgtid() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tgtidAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer tgtidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
   * Example: /// Example: ADDR-ID
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String addr() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer addrAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer addrInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
   * Example: /// Example: CAT48
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public String msgfmt() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgfmtAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer msgfmtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
   * Example: /// Example: BCN
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public String msgtyp() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgtypAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer msgtypInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Flag indicating military message.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean af() { int o = __offset(30); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating FAA/Civ message.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean faa() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean spi() { int o = __offset(34); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating whether AIMS present.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean aims() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that target was detected using data from an MTI receiver.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean mti() { int o = __offset(38); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Number of beacon hits received on the target.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int bcnhits() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Target detection time, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String msgts() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgtsAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer msgtsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Measured slant range to target from the observing site, in km.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double rng() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double az() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Azimuth Change Pulse count at target detection.
   * Example: /// Example: 100
   * Constraints: No constraints specified.
   */
  public int acp() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Measured height of the target, in km. (for 3D radars).
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double alt3d() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mode-C altitude (uncorrected pressure altitude), in km.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double mc() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Status of the mode-C validity bit.
   * Example: /// Example: MCV
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String mcv() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mcvAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer mcvInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Indicator that the mode-C response was garbled.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean mcg() { int o = __offset(58); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Mode-1 interrogation response (mission code).
   * Example: /// Example: MISSION_CODE
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String m1() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m1AsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer m1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Status of the mode-1 validity bit.
   * Example: /// Example: M1V
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String m1v() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m1vAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer m1vInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Indicator that the mode-1 response was garbled.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean m1g() { int o = __offset(64); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Mode-2 interrogation response (military identification code).
   * Example: /// Example: MILITARY_ID_CODE
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String m2() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m2AsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer m2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Status of the mode-2 validity bit.
   * Example: /// Example: M2V
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String m2v() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m2vAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer m2vInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Status of the mode-2 X-Pulse response validation.
   * Example: /// Example: M2XV
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String m2xv() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m2xvAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer m2xvInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Indicator that the mode-2 response was garbled.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean m2g() { int o = __offset(72); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Mode-3/A interrogation response (aircraft identification).
   * Example: /// Example: AIRCRAFT_ID
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String m3a() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m3aAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer m3aInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Status of the mode-3/A validity bit.
   * Example: /// Example: M3AV
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String m3av() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m3avAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer m3avInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Indicator that the mode-3/A response was garbled.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean m3ag() { int o = __offset(78); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Status of the mode-3 X-Pulse response validation.
   * Example: /// Example: M3AXV
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String m3axv() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m3axvAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer m3axvInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Mode-4 interrogation response (Identification Friend/Foe).
   * Example: /// Example: ID_FRIEND
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String m4() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m4AsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer m4InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Status of the mode-4 validity bit.
   * Example: /// Example: M4V
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String m4v() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m4vAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer m4vInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Mode-4 D1 & D2 response status.
   * Example: /// Example: STATUS
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String m4d1d2() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer m4d1d2AsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer m4d1d2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Mode-S Comm B message data.
   * Example: /// Example: MSCOMMB
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String mscommb() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mscommbAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer mscommbInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Flag indicating military emergency.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean milemrgcy() { int o = __offset(90); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * 7500 squawk present (hijack).
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean code7500() { int o = __offset(92); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * 7600 squawk present (loss of comm).
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean code7600() { int o = __offset(94); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * 7700 squawk present (general emergency).
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean code7700() { int o = __offset(96); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Target ground speed, in meters/second.
   * Example: /// Example: 30.23
   * Constraints: No constraints specified.
   */
  public double grndspd() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target heading, in degrees from true North at the target position.
   * Example: /// Example: 30.23
   * Constraints: No constraints specified.
   */
  public double hdng() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
   * Example: /// Example: 30
   * Constraints: No constraints specified.
   */
  public int trknum() { int o = __offset(102); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Type of sensor(s) maintaining track.
   * Example: /// Example: RAD
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String rad() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer radAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer radInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Indication of Horizontal Maneuver detection.
   * Example: /// Example: MAH
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String mah() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mahAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer mahInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * Climbing/Descending mode indicator.
   * Example: /// Example: CDM
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String cdm() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cdmAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer cdmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Array of local 2d-cartesian [x, y] coordinates of target, in km.
   * Example: /// Example: [1.2, 2.2]
   * Constraints: No constraints specified.
   */
  public String cartpos(int j) { int o = __offset(110); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int cartposLength() { int o = __offset(110); return o != 0 ? __vector_len(o) : 0; }
  public StringVector cartposVector() { return cartposVector(new StringVector()); }
  public StringVector cartposVector(StringVector obj) { int o = __offset(110); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Runlength of the primary surveillance radar track, in degrees.
   * Example: /// Example: 44.23
   * Constraints: No constraints specified.
   */
  public double psrrl() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Runlength of the secondary surveillance radar track, in degrees.
   * Example: /// Example: 44.23
   * Constraints: No constraints specified.
   */
  public double ssrl() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target range delta between PSR and SSR (reference PSR-SSR), in km.
   * Example: /// Example: 44.23
   * Constraints: No constraints specified.
   */
  public double rngdelt() { int o = __offset(116); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
   * Example: /// Example: 44.23
   * Constraints: No constraints specified.
   */
  public double azdelt() { int o = __offset(118); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Warning/Error Conditions and Target Classification.
   * Example: /// Example: ['WARNING', 'WARNING']
   * Constraints: No constraints specified.
   */
  public String wectc(int j) { int o = __offset(120); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int wectcLength() { int o = __offset(120); return o != 0 ? __vector_len(o) : 0; }
  public StringVector wectcVector() { return wectcVector(new StringVector()); }
  public StringVector wectcVector(StringVector obj) { int o = __offset(120); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean mrgrpt() { int o = __offset(122); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * ARTS quality.
   * Example: /// Example: QUALITY
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String artsqual() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer artsqualAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer artsqualInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Track eligibility flag.
   * Example: /// Example: ELIGIBILITY
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String trkelig() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trkeligAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer trkeligInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * Target confidence.
   * Example: /// Example: CONFIDENCE
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String tgtconf() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tgtconfAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer tgtconfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Target correlation flag.
   * Example: /// Example: CORRELATION
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tgtcorr() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tgtcorrAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer tgtcorrInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
   * Example: /// Example: 0.4
   * Constraints: No constraints specified.
   */
  public double tis() { int o = __offset(132); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(134); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(134); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(134); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(140); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(140, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 140, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(142); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(144); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(144, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 144, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(146); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(146, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 146, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(148); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(148, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 148, 1); }

  public static int createMonoRadar_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int ttiOffset,
      int idSensorOffset,
      double senlat,
      double senlon,
      double senalt,
      int sac,
      int sic,
      int tgtidOffset,
      int addrOffset,
      int msgfmtOffset,
      int msgtypOffset,
      boolean af,
      boolean faa,
      boolean spi,
      boolean aims,
      boolean mti,
      int bcnhits,
      int tsOffset,
      int msgtsOffset,
      double rng,
      double az,
      int acp,
      double alt3d,
      double mc,
      int mcvOffset,
      boolean mcg,
      int m1Offset,
      int m1vOffset,
      boolean m1g,
      int m2Offset,
      int m2vOffset,
      int m2xvOffset,
      boolean m2g,
      int m3aOffset,
      int m3avOffset,
      boolean m3ag,
      int m3axvOffset,
      int m4Offset,
      int m4vOffset,
      int m4d1d2Offset,
      int mscommbOffset,
      boolean milemrgcy,
      boolean code7500,
      boolean code7600,
      boolean code7700,
      double grndspd,
      double hdng,
      int trknum,
      int radOffset,
      int mahOffset,
      int cdmOffset,
      int cartposOffset,
      double psrrl,
      double ssrl,
      double rngdelt,
      double azdelt,
      int wectcOffset,
      boolean mrgrpt,
      int artsqualOffset,
      int trkeligOffset,
      int tgtconfOffset,
      int tgtcorrOffset,
      double tis,
      int tagsOffset,
      int origSensorIdOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int origNetworkOffset) {
    builder.startTable(73);
    MonoRadar_Full.addTis(builder, tis);
    MonoRadar_Full.addAzdelt(builder, azdelt);
    MonoRadar_Full.addRngdelt(builder, rngdelt);
    MonoRadar_Full.addSsrl(builder, ssrl);
    MonoRadar_Full.addPsrrl(builder, psrrl);
    MonoRadar_Full.addHdng(builder, hdng);
    MonoRadar_Full.addGrndspd(builder, grndspd);
    MonoRadar_Full.addMc(builder, mc);
    MonoRadar_Full.addAlt3d(builder, alt3d);
    MonoRadar_Full.addAz(builder, az);
    MonoRadar_Full.addRng(builder, rng);
    MonoRadar_Full.addSenalt(builder, senalt);
    MonoRadar_Full.addSenlon(builder, senlon);
    MonoRadar_Full.addSenlat(builder, senlat);
    MonoRadar_Full.addOrigNetwork(builder, origNetworkOffset);
    MonoRadar_Full.addCreatedBy(builder, createdByOffset);
    MonoRadar_Full.addCreatedAt(builder, createdAtOffset);
    MonoRadar_Full.addOrigin(builder, originOffset);
    MonoRadar_Full.addSource(builder, sourceOffset);
    MonoRadar_Full.addOrigSensorId(builder, origSensorIdOffset);
    MonoRadar_Full.addTags(builder, tagsOffset);
    MonoRadar_Full.addTgtcorr(builder, tgtcorrOffset);
    MonoRadar_Full.addTgtconf(builder, tgtconfOffset);
    MonoRadar_Full.addTrkelig(builder, trkeligOffset);
    MonoRadar_Full.addArtsqual(builder, artsqualOffset);
    MonoRadar_Full.addWectc(builder, wectcOffset);
    MonoRadar_Full.addCartpos(builder, cartposOffset);
    MonoRadar_Full.addCdm(builder, cdmOffset);
    MonoRadar_Full.addMah(builder, mahOffset);
    MonoRadar_Full.addRad(builder, radOffset);
    MonoRadar_Full.addTrknum(builder, trknum);
    MonoRadar_Full.addMscommb(builder, mscommbOffset);
    MonoRadar_Full.addM4d1d2(builder, m4d1d2Offset);
    MonoRadar_Full.addM4v(builder, m4vOffset);
    MonoRadar_Full.addM4(builder, m4Offset);
    MonoRadar_Full.addM3axv(builder, m3axvOffset);
    MonoRadar_Full.addM3av(builder, m3avOffset);
    MonoRadar_Full.addM3a(builder, m3aOffset);
    MonoRadar_Full.addM2xv(builder, m2xvOffset);
    MonoRadar_Full.addM2v(builder, m2vOffset);
    MonoRadar_Full.addM2(builder, m2Offset);
    MonoRadar_Full.addM1v(builder, m1vOffset);
    MonoRadar_Full.addM1(builder, m1Offset);
    MonoRadar_Full.addMcv(builder, mcvOffset);
    MonoRadar_Full.addAcp(builder, acp);
    MonoRadar_Full.addMsgts(builder, msgtsOffset);
    MonoRadar_Full.addTs(builder, tsOffset);
    MonoRadar_Full.addBcnhits(builder, bcnhits);
    MonoRadar_Full.addMsgtyp(builder, msgtypOffset);
    MonoRadar_Full.addMsgfmt(builder, msgfmtOffset);
    MonoRadar_Full.addAddr(builder, addrOffset);
    MonoRadar_Full.addTgtid(builder, tgtidOffset);
    MonoRadar_Full.addSic(builder, sic);
    MonoRadar_Full.addSac(builder, sac);
    MonoRadar_Full.addIdSensor(builder, idSensorOffset);
    MonoRadar_Full.addTti(builder, ttiOffset);
    MonoRadar_Full.addClassificationMarking(builder, classificationMarkingOffset);
    MonoRadar_Full.addId(builder, idOffset);
    MonoRadar_Full.addDataMode(builder, dataMode);
    MonoRadar_Full.addMrgrpt(builder, mrgrpt);
    MonoRadar_Full.addCode7700(builder, code7700);
    MonoRadar_Full.addCode7600(builder, code7600);
    MonoRadar_Full.addCode7500(builder, code7500);
    MonoRadar_Full.addMilemrgcy(builder, milemrgcy);
    MonoRadar_Full.addM3ag(builder, m3ag);
    MonoRadar_Full.addM2g(builder, m2g);
    MonoRadar_Full.addM1g(builder, m1g);
    MonoRadar_Full.addMcg(builder, mcg);
    MonoRadar_Full.addMti(builder, mti);
    MonoRadar_Full.addAims(builder, aims);
    MonoRadar_Full.addSpi(builder, spi);
    MonoRadar_Full.addFaa(builder, faa);
    MonoRadar_Full.addAf(builder, af);
    return MonoRadar_Full.endMonoRadar_Full(builder);
  }

  public static void startMonoRadar_Full(FlatBufferBuilder builder) { builder.startTable(73); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addTti(FlatBufferBuilder builder, int ttiOffset) { builder.addOffset(2, ttiOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(3, idSensorOffset, 0); }
  public static void addSenlat(FlatBufferBuilder builder, double senlat) { builder.addDouble(4, senlat, 0.0); }
  public static void addSenlon(FlatBufferBuilder builder, double senlon) { builder.addDouble(5, senlon, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(6, senalt, 0.0); }
  public static void addSac(FlatBufferBuilder builder, int sac) { builder.addInt(7, sac, 0); }
  public static void addSic(FlatBufferBuilder builder, int sic) { builder.addInt(8, sic, 0); }
  public static void addTgtid(FlatBufferBuilder builder, int tgtidOffset) { builder.addOffset(9, tgtidOffset, 0); }
  public static void addAddr(FlatBufferBuilder builder, int addrOffset) { builder.addOffset(10, addrOffset, 0); }
  public static void addMsgfmt(FlatBufferBuilder builder, int msgfmtOffset) { builder.addOffset(11, msgfmtOffset, 0); }
  public static void addMsgtyp(FlatBufferBuilder builder, int msgtypOffset) { builder.addOffset(12, msgtypOffset, 0); }
  public static void addAf(FlatBufferBuilder builder, boolean af) { builder.addBoolean(13, af, false); }
  public static void addFaa(FlatBufferBuilder builder, boolean faa) { builder.addBoolean(14, faa, false); }
  public static void addSpi(FlatBufferBuilder builder, boolean spi) { builder.addBoolean(15, spi, false); }
  public static void addAims(FlatBufferBuilder builder, boolean aims) { builder.addBoolean(16, aims, false); }
  public static void addMti(FlatBufferBuilder builder, boolean mti) { builder.addBoolean(17, mti, false); }
  public static void addBcnhits(FlatBufferBuilder builder, int bcnhits) { builder.addInt(18, bcnhits, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(19, tsOffset, 0); }
  public static void addMsgts(FlatBufferBuilder builder, int msgtsOffset) { builder.addOffset(20, msgtsOffset, 0); }
  public static void addRng(FlatBufferBuilder builder, double rng) { builder.addDouble(21, rng, 0.0); }
  public static void addAz(FlatBufferBuilder builder, double az) { builder.addDouble(22, az, 0.0); }
  public static void addAcp(FlatBufferBuilder builder, int acp) { builder.addInt(23, acp, 0); }
  public static void addAlt3d(FlatBufferBuilder builder, double alt3d) { builder.addDouble(24, alt3d, 0.0); }
  public static void addMc(FlatBufferBuilder builder, double mc) { builder.addDouble(25, mc, 0.0); }
  public static void addMcv(FlatBufferBuilder builder, int mcvOffset) { builder.addOffset(26, mcvOffset, 0); }
  public static void addMcg(FlatBufferBuilder builder, boolean mcg) { builder.addBoolean(27, mcg, false); }
  public static void addM1(FlatBufferBuilder builder, int m1Offset) { builder.addOffset(28, m1Offset, 0); }
  public static void addM1v(FlatBufferBuilder builder, int m1vOffset) { builder.addOffset(29, m1vOffset, 0); }
  public static void addM1g(FlatBufferBuilder builder, boolean m1g) { builder.addBoolean(30, m1g, false); }
  public static void addM2(FlatBufferBuilder builder, int m2Offset) { builder.addOffset(31, m2Offset, 0); }
  public static void addM2v(FlatBufferBuilder builder, int m2vOffset) { builder.addOffset(32, m2vOffset, 0); }
  public static void addM2xv(FlatBufferBuilder builder, int m2xvOffset) { builder.addOffset(33, m2xvOffset, 0); }
  public static void addM2g(FlatBufferBuilder builder, boolean m2g) { builder.addBoolean(34, m2g, false); }
  public static void addM3a(FlatBufferBuilder builder, int m3aOffset) { builder.addOffset(35, m3aOffset, 0); }
  public static void addM3av(FlatBufferBuilder builder, int m3avOffset) { builder.addOffset(36, m3avOffset, 0); }
  public static void addM3ag(FlatBufferBuilder builder, boolean m3ag) { builder.addBoolean(37, m3ag, false); }
  public static void addM3axv(FlatBufferBuilder builder, int m3axvOffset) { builder.addOffset(38, m3axvOffset, 0); }
  public static void addM4(FlatBufferBuilder builder, int m4Offset) { builder.addOffset(39, m4Offset, 0); }
  public static void addM4v(FlatBufferBuilder builder, int m4vOffset) { builder.addOffset(40, m4vOffset, 0); }
  public static void addM4d1d2(FlatBufferBuilder builder, int m4d1d2Offset) { builder.addOffset(41, m4d1d2Offset, 0); }
  public static void addMscommb(FlatBufferBuilder builder, int mscommbOffset) { builder.addOffset(42, mscommbOffset, 0); }
  public static void addMilemrgcy(FlatBufferBuilder builder, boolean milemrgcy) { builder.addBoolean(43, milemrgcy, false); }
  public static void addCode7500(FlatBufferBuilder builder, boolean code7500) { builder.addBoolean(44, code7500, false); }
  public static void addCode7600(FlatBufferBuilder builder, boolean code7600) { builder.addBoolean(45, code7600, false); }
  public static void addCode7700(FlatBufferBuilder builder, boolean code7700) { builder.addBoolean(46, code7700, false); }
  public static void addGrndspd(FlatBufferBuilder builder, double grndspd) { builder.addDouble(47, grndspd, 0.0); }
  public static void addHdng(FlatBufferBuilder builder, double hdng) { builder.addDouble(48, hdng, 0.0); }
  public static void addTrknum(FlatBufferBuilder builder, int trknum) { builder.addInt(49, trknum, 0); }
  public static void addRad(FlatBufferBuilder builder, int radOffset) { builder.addOffset(50, radOffset, 0); }
  public static void addMah(FlatBufferBuilder builder, int mahOffset) { builder.addOffset(51, mahOffset, 0); }
  public static void addCdm(FlatBufferBuilder builder, int cdmOffset) { builder.addOffset(52, cdmOffset, 0); }
  public static void addCartpos(FlatBufferBuilder builder, int cartposOffset) { builder.addOffset(53, cartposOffset, 0); }
  public static int createCartposVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCartposVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPsrrl(FlatBufferBuilder builder, double psrrl) { builder.addDouble(54, psrrl, 0.0); }
  public static void addSsrl(FlatBufferBuilder builder, double ssrl) { builder.addDouble(55, ssrl, 0.0); }
  public static void addRngdelt(FlatBufferBuilder builder, double rngdelt) { builder.addDouble(56, rngdelt, 0.0); }
  public static void addAzdelt(FlatBufferBuilder builder, double azdelt) { builder.addDouble(57, azdelt, 0.0); }
  public static void addWectc(FlatBufferBuilder builder, int wectcOffset) { builder.addOffset(58, wectcOffset, 0); }
  public static int createWectcVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startWectcVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMrgrpt(FlatBufferBuilder builder, boolean mrgrpt) { builder.addBoolean(59, mrgrpt, false); }
  public static void addArtsqual(FlatBufferBuilder builder, int artsqualOffset) { builder.addOffset(60, artsqualOffset, 0); }
  public static void addTrkelig(FlatBufferBuilder builder, int trkeligOffset) { builder.addOffset(61, trkeligOffset, 0); }
  public static void addTgtconf(FlatBufferBuilder builder, int tgtconfOffset) { builder.addOffset(62, tgtconfOffset, 0); }
  public static void addTgtcorr(FlatBufferBuilder builder, int tgtcorrOffset) { builder.addOffset(63, tgtcorrOffset, 0); }
  public static void addTis(FlatBufferBuilder builder, double tis) { builder.addDouble(64, tis, 0.0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(65, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(66, origSensorIdOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(67, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(68, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(69, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(70, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(71, createdByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(72, origNetworkOffset, 0); }
  public static int endMonoRadar_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMonoRadar_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MONO"); }
  public static void finishSizePrefixedMonoRadar_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MonoRadar_Full get(int j) { return get(new MonoRadar_Full(), j); }
    public MonoRadar_Full get(MonoRadar_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

