// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Provides information on the dates, actors, locations, fatalities, and types of all reported political violence and protest events across the world.
 */
@SuppressWarnings("unused")
public final class SigAct_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SigAct_Full getRootAsSigAct_Full(ByteBuffer _bb) { return getRootAsSigAct_Full(_bb, new SigAct_Full()); }
  public static SigAct_Full getRootAsSigAct_Full(ByteBuffer _bb, SigAct_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SigAct_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SIGA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SigAct_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SIGACT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The source language of the significant event using the ISO 639-3, 3 character code definition.
   * Example: /// Example: eng
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String sourceLanguage() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceLanguageAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer sourceLanguageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The city in or near which this event occurred.
   * Example: /// Example: Austin
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String city() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cityAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer cityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The district in which this event occurred.
   * Example: /// Example: district 12
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String district() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer districtAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer districtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The province in which this event occurred.
   * Example: /// Example: Province_Example
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String province() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer provinceAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer provinceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * WGS-84 centroid latitude of the event location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.31
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 centroid longitude of the event location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 90.23
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
   * &nbsp;&nbsp;4Q (grid zone designator, GZD)
   * &nbsp;&nbsp;FJ (the 100,000-meter square identifier)
   * &nbsp;&nbsp;12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
   * Example: /// Example: 4QFJ12345678
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String milgrid() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer milgridAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer milgridInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Area in which important military events occur or are progressing.  A theater can include the entirety of the airspace, land and sea area that is or that may potentially become involved in war operations.
   * Example: /// Example: Kabul
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String theater() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer theaterAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer theaterInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String area() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer areaAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer areaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String atext() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atextAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer atextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String agjson() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agjsonAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer agjsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Type of region as projected on the ground.
   * Example: /// Example: Type1
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String atype() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atypeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer atypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int andims() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int asrid() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The approximate start time of the event, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-01T01:02:03.123Z
   * Constraints: No constraints specified.
   */
  public String eventStart() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventStartAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer eventStartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The approximate end time of the event, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-01T01:02:03.123Z
   * Constraints: No constraints specified.
   */
  public String eventEnd() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventEndAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer eventEndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Date of the report or filing.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String reportDate() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reportDateAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer reportDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * A list of one or more actors involved in the event.
   * Example: /// Example: ['US', 'CAN']
   * Constraints: No constraints specified.
   */
  public String actors(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int actorsLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector actorsVector() { return actorsVector(new StringVector()); }
  public StringVector actorsVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Number of civilians abducted in the activity.
   * Example: /// Example: 423
   * Constraints: No constraints specified.
   */
  public int civAbd() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of civilians detained in the activity.
   * Example: /// Example: 234
   * Constraints: No constraints specified.
   */
  public int civDet() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of civilians killed in the activity.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int civKia() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of civilians wounded in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int civWound() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of coalition members abducted in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int coalAbd() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of coalition members detained in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int coalDet() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of coalition members killed in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int coalKia() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of coalition members wounded in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int coalWound() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of enemy combatants abducted in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int enemyAbd() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of enemy combatants detained in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int enemyDet() { int o = __offset(64); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of enemy combatants killed in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int enemyKia() { int o = __offset(66); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of friendlies abducted in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int friendlyAbd() { int o = __offset(68); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of friendlies in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int friendlyDet() { int o = __offset(70); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of friendlies killed in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int friendlyKia() { int o = __offset(72); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of friendlies wounded in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int friendlyWound() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of Host Nation members abducted in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int hostNatAbd() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of Host Nation members detained in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int hostNatDet() { int o = __offset(78); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of Host Nation members killed in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int hostNatKia() { int o = __offset(80); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of Host Nation members wounded in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int hostNatWound() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side A members abducted in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideAabd() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side A members detained in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideAdet() { int o = __offset(86); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side A members killed in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideAkia() { int o = __offset(88); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side A members wounded in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideAwound() { int o = __offset(90); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side B members abducted in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideBabd() { int o = __offset(92); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side B members detained in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideBdet() { int o = __offset(94); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side B members killed in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideBkia() { int o = __offset(96); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of side B members wounded in the activity.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int sideBwound() { int o = __offset(98); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The name of the target.  The target may be an individual, an entity, or a country/region.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String target() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer targetAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer targetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * A description of the event.
   * Example: /// Example: Example_Description
   * Constraints: Minimum length = 0, Maximum length = 4096
   */
  public String eventDescription() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventDescriptionAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer eventDescriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * The type of event (e.g.  Military, Natural, Political, Social, etc.).
   * Example: /// Example: Military
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String eventType() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventTypeAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer eventTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * The mode of this attack or event (e.g. Direct Fire, IED Explosion, etc.).
   * Example: /// Example: IED Explosion
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String typeOfAttack() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeOfAttackAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer typeOfAttackInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * Flag indicating that this attack was of a complex or coordinated nature.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean complexAttack() { int o = __offset(108); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Unique identifier assigned to each event record that uniquely identifies it in the master dataset.  This ID is provided for convenience of mapping to external systems.
   * Example: /// Example: NUMBER-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String idNumber() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idNumberAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer idNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Estimate of the confidence that this event occurred.
   * Example: /// Example: 13
   * Constraints: No constraints specified.
   */
  public int confidence() { int o = __offset(112); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Estimate of the accuracy that this event occurred as described/reported.
   * Example: /// Example: 13
   * Constraints: No constraints specified.
   */
  public int accuracy() { int o = __offset(114); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * 1 (high) for events where the reporting allows the coder to identify the event in full. That is, events where the individual happening is described by the original source in a sufficiently detailed way as to identify individual incidents, i.e. separate activities of fighting in a single location:
   * 2 (lower) for events where an aggregation of information was already made by the source material that is impossible to undo in the coding process. Such events are described by the original source only as aggregates (totals) of multiple separate activities of fighting spanning over a longer period than a single, clearly defined day.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int clarity() { int o = __offset(116); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * This is the raw CAMEO action code describing the action that Actor1 performed upon Actor2.  Additional information about Cameo Codes can be obtained from the GDELT project documentation here: https://www.gdeltproject.org/data.html#documentation.
   * Example: /// Example: CAMEO_CODE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String cameoCode() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cameoCodeAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer cameoCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * CAMEO event codes are defined in a three-level taxonomy. For events at level three in the taxonomy, this yields its level two leaf root node. For example, code 0251 (Appeal for easing of administrative sanctions) would yield an EventBaseCode of 025 (Appeal to yield). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
   * Example: /// Example: Example_cameoBaseCode
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String cameoBaseCode() { int o = __offset(120); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cameoBaseCodeAsByteBuffer() { return __vector_as_bytebuffer(120, 1); }
  public ByteBuffer cameoBaseCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 1); }
  /**
   * Similar to EventBaseCode, this defines the root-level category the event code falls under. For example, code 0251 (Appeal for easing of administrative sanctions) has a root code of 02 (Appeal). This makes it possible to aggregate events at various resolutions of specificity. For events at levels two or one, this field will be set to EventCode.
   * Example: /// Example: Example_cameoRootCode
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String cameoRootCode() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cameoRootCodeAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer cameoRootCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Each CAMEO event code is assigned a numeric score from -10 to +10, capturing the theoretical potential impact that type of event will have on the stability of a country. This is known as the Goldstein Scale. NOTE: this score is based on the type of event, not the specifics of the actual event record being recorded  thus two riots, one with 10 people and one with 10,000, will both receive the same Goldstein score. This can be aggregated to various levels of time resolution to yield an approximation of the stability of a location over time.
   * Example: /// Example: 9.32
   * Constraints: No constraints specified.
   */
  public double goldstein() { int o = __offset(124); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The source of the document or report.
   * Example: /// Example: Example_documentSource
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String documentSource() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer documentSourceAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer documentSourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * The filename of the document or report.
   * Example: /// Example: Example_documentFilename
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String documentFilename() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer documentFilenameAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer documentFilenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Flag indicating this SigAct record has an associated txt file stored in the UDL. Retrieve the txt file by using the GET/udl/sigact/getFile/{id} where id is the same as the SigAct record id. The maximum file size for this service is 10,000,000 bytes (10MB). Files exceeding the maximum size will be rejected.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean hasAttachment() { int o = __offset(130); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Size of the associated text file. Units in bytes. If filesize is provided without an associated file, it defaults to 0.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public long filesize() { int o = __offset(132); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * MD5 value of the file. The ingest/create operation will automatically generate the value.
   * Example: /// Example: 120EA8A25E5D487BF68B5F7096440019
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String checksumValue() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer checksumValueAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer checksumValueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }
  /**
   * The reporting unit.
   * Example: /// Example: Unit_1
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String repUnit() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer repUnitAsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer repUnitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * The reporting unit type.
   * Example: /// Example: Example_repUnitType
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String repUnitType() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer repUnitTypeAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer repUnitTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * The activity the unit was engaged in.
   * Example: /// Example: Example_Activity
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String repUnitActivity() { int o = __offset(140); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer repUnitActivityAsByteBuffer() { return __vector_as_bytebuffer(140, 1); }
  public ByteBuffer repUnitActivityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 140, 1); }
  /**
   * This is the total number of mentions of this event across all source documents during the 15 minute update in which it was first seen. Multiple references to an event within a single document also contribute to this count. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
   * Example: /// Example: 8
   * Constraints: No constraints specified.
   */
  public int numMentions() { int o = __offset(142); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * This is the total number of information sources containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
   * Example: /// Example: 8
   * Constraints: No constraints specified.
   */
  public int numSources() { int o = __offset(144); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * This is the total number of source documents containing one or more mentions of this event during the 15 minute update in which it was first seen. This can be used as a method of assessing the importance of an event: the more discussion of that event, the more likely it is to be significant.
   * Example: /// Example: 8
   * Constraints: No constraints specified.
   */
  public int numArticles() { int o = __offset(146); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * This is the average tone of all documents containing one or more mentions of this event during the 15 minute update in which it was first seen. The score ranges from -100 (extremely negative) to +100 (extremely positive). Common values range between -10 and +10, with 0 indicating neutral.
   * Example: /// Example: 8.23
   * Constraints: No constraints specified.
   */
  public double avgTone() { int o = __offset(148); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * This field records the URL or citation of the first news report it found this event in. In most cases this is the first report it saw the article in, but due to the timing and flow of news reports through the processing pipeline, this may not always be the very first report, but is at least in the first few reports.
   * Example: /// Example: Example_URL
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String sourceUrl() { int o = __offset(150); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceUrlAsByteBuffer() { return __vector_as_bytebuffer(150, 1); }
  public ByteBuffer sourceUrlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 150, 1); }
  /**
   * Related document ids.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String relatedDocs(int j) { int o = __offset(152); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int relatedDocsLength() { int o = __offset(152); return o != 0 ? __vector_len(o) : 0; }
  public StringVector relatedDocsVector() { return relatedDocsVector(new StringVector()); }
  public StringVector relatedDocsVector(StringVector obj) { int o = __offset(152); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A summary of the event.
   * Example: /// Example: Example_Summary
   * Constraints: Minimum length = 0, Maximum length = 4096
   */
  public String summary() { int o = __offset(154); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer summaryAsByteBuffer() { return __vector_as_bytebuffer(154, 1); }
  public ByteBuffer summaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 154, 1); }
  /**
   * Notes related to the documents or event.
   * Example: /// Example: Example_Notes
   * Constraints: Minimum length = 0, Maximum length = 4096
   */
  public String notes() { int o = __offset(156); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(156, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 156, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(158); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(158, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 158, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: No constraints specified.
   */
  public String createdBy() { int o = __offset(160); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(160, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 160, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(162); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(162, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 162, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(164); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(164, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 164, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(166); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(168); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(168, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 168, 1); }

  public static int createSigAct_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int sourceLanguageOffset,
      int countryCodeOffset,
      int cityOffset,
      int districtOffset,
      int provinceOffset,
      double lat,
      double lon,
      int milgridOffset,
      int theaterOffset,
      int areaOffset,
      int atextOffset,
      int agjsonOffset,
      int atypeOffset,
      int andims,
      int asrid,
      int eventStartOffset,
      int eventEndOffset,
      int reportDateOffset,
      int actorsOffset,
      int civAbd,
      int civDet,
      int civKia,
      int civWound,
      int coalAbd,
      int coalDet,
      int coalKia,
      int coalWound,
      int enemyAbd,
      int enemyDet,
      int enemyKia,
      int friendlyAbd,
      int friendlyDet,
      int friendlyKia,
      int friendlyWound,
      int hostNatAbd,
      int hostNatDet,
      int hostNatKia,
      int hostNatWound,
      int sideAabd,
      int sideAdet,
      int sideAkia,
      int sideAwound,
      int sideBabd,
      int sideBdet,
      int sideBkia,
      int sideBwound,
      int targetOffset,
      int eventDescriptionOffset,
      int eventTypeOffset,
      int typeOfAttackOffset,
      boolean complexAttack,
      int idNumberOffset,
      int confidence,
      int accuracy,
      int clarity,
      int cameoCodeOffset,
      int cameoBaseCodeOffset,
      int cameoRootCodeOffset,
      double goldstein,
      int documentSourceOffset,
      int documentFilenameOffset,
      boolean hasAttachment,
      long filesize,
      int checksumValueOffset,
      int repUnitOffset,
      int repUnitTypeOffset,
      int repUnitActivityOffset,
      int numMentions,
      int numSources,
      int numArticles,
      double avgTone,
      int sourceUrlOffset,
      int relatedDocsOffset,
      int summaryOffset,
      int notesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(83);
    SigAct_Full.addAvgTone(builder, avgTone);
    SigAct_Full.addFilesize(builder, filesize);
    SigAct_Full.addGoldstein(builder, goldstein);
    SigAct_Full.addLon(builder, lon);
    SigAct_Full.addLat(builder, lat);
    SigAct_Full.addOrigNetwork(builder, origNetworkOffset);
    SigAct_Full.addOrigin(builder, originOffset);
    SigAct_Full.addSource(builder, sourceOffset);
    SigAct_Full.addCreatedBy(builder, createdByOffset);
    SigAct_Full.addCreatedAt(builder, createdAtOffset);
    SigAct_Full.addNotes(builder, notesOffset);
    SigAct_Full.addSummary(builder, summaryOffset);
    SigAct_Full.addRelatedDocs(builder, relatedDocsOffset);
    SigAct_Full.addSourceUrl(builder, sourceUrlOffset);
    SigAct_Full.addNumArticles(builder, numArticles);
    SigAct_Full.addNumSources(builder, numSources);
    SigAct_Full.addNumMentions(builder, numMentions);
    SigAct_Full.addRepUnitActivity(builder, repUnitActivityOffset);
    SigAct_Full.addRepUnitType(builder, repUnitTypeOffset);
    SigAct_Full.addRepUnit(builder, repUnitOffset);
    SigAct_Full.addChecksumValue(builder, checksumValueOffset);
    SigAct_Full.addDocumentFilename(builder, documentFilenameOffset);
    SigAct_Full.addDocumentSource(builder, documentSourceOffset);
    SigAct_Full.addCameoRootCode(builder, cameoRootCodeOffset);
    SigAct_Full.addCameoBaseCode(builder, cameoBaseCodeOffset);
    SigAct_Full.addCameoCode(builder, cameoCodeOffset);
    SigAct_Full.addClarity(builder, clarity);
    SigAct_Full.addAccuracy(builder, accuracy);
    SigAct_Full.addConfidence(builder, confidence);
    SigAct_Full.addIdNumber(builder, idNumberOffset);
    SigAct_Full.addTypeOfAttack(builder, typeOfAttackOffset);
    SigAct_Full.addEventType(builder, eventTypeOffset);
    SigAct_Full.addEventDescription(builder, eventDescriptionOffset);
    SigAct_Full.addTarget(builder, targetOffset);
    SigAct_Full.addSideBwound(builder, sideBwound);
    SigAct_Full.addSideBkia(builder, sideBkia);
    SigAct_Full.addSideBdet(builder, sideBdet);
    SigAct_Full.addSideBabd(builder, sideBabd);
    SigAct_Full.addSideAwound(builder, sideAwound);
    SigAct_Full.addSideAkia(builder, sideAkia);
    SigAct_Full.addSideAdet(builder, sideAdet);
    SigAct_Full.addSideAabd(builder, sideAabd);
    SigAct_Full.addHostNatWound(builder, hostNatWound);
    SigAct_Full.addHostNatKia(builder, hostNatKia);
    SigAct_Full.addHostNatDet(builder, hostNatDet);
    SigAct_Full.addHostNatAbd(builder, hostNatAbd);
    SigAct_Full.addFriendlyWound(builder, friendlyWound);
    SigAct_Full.addFriendlyKia(builder, friendlyKia);
    SigAct_Full.addFriendlyDet(builder, friendlyDet);
    SigAct_Full.addFriendlyAbd(builder, friendlyAbd);
    SigAct_Full.addEnemyKia(builder, enemyKia);
    SigAct_Full.addEnemyDet(builder, enemyDet);
    SigAct_Full.addEnemyAbd(builder, enemyAbd);
    SigAct_Full.addCoalWound(builder, coalWound);
    SigAct_Full.addCoalKia(builder, coalKia);
    SigAct_Full.addCoalDet(builder, coalDet);
    SigAct_Full.addCoalAbd(builder, coalAbd);
    SigAct_Full.addCivWound(builder, civWound);
    SigAct_Full.addCivKia(builder, civKia);
    SigAct_Full.addCivDet(builder, civDet);
    SigAct_Full.addCivAbd(builder, civAbd);
    SigAct_Full.addActors(builder, actorsOffset);
    SigAct_Full.addReportDate(builder, reportDateOffset);
    SigAct_Full.addEventEnd(builder, eventEndOffset);
    SigAct_Full.addEventStart(builder, eventStartOffset);
    SigAct_Full.addAsrid(builder, asrid);
    SigAct_Full.addAndims(builder, andims);
    SigAct_Full.addAtype(builder, atypeOffset);
    SigAct_Full.addAgjson(builder, agjsonOffset);
    SigAct_Full.addAtext(builder, atextOffset);
    SigAct_Full.addArea(builder, areaOffset);
    SigAct_Full.addTheater(builder, theaterOffset);
    SigAct_Full.addMilgrid(builder, milgridOffset);
    SigAct_Full.addProvince(builder, provinceOffset);
    SigAct_Full.addDistrict(builder, districtOffset);
    SigAct_Full.addCity(builder, cityOffset);
    SigAct_Full.addCountryCode(builder, countryCodeOffset);
    SigAct_Full.addSourceLanguage(builder, sourceLanguageOffset);
    SigAct_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SigAct_Full.addId(builder, idOffset);
    SigAct_Full.addDataMode(builder, dataMode);
    SigAct_Full.addHasAttachment(builder, hasAttachment);
    SigAct_Full.addComplexAttack(builder, complexAttack);
    return SigAct_Full.endSigAct_Full(builder);
  }

  public static void startSigAct_Full(FlatBufferBuilder builder) { builder.startTable(83); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addSourceLanguage(FlatBufferBuilder builder, int sourceLanguageOffset) { builder.addOffset(2, sourceLanguageOffset, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(3, countryCodeOffset, 0); }
  public static void addCity(FlatBufferBuilder builder, int cityOffset) { builder.addOffset(4, cityOffset, 0); }
  public static void addDistrict(FlatBufferBuilder builder, int districtOffset) { builder.addOffset(5, districtOffset, 0); }
  public static void addProvince(FlatBufferBuilder builder, int provinceOffset) { builder.addOffset(6, provinceOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(7, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(8, lon, 0.0); }
  public static void addMilgrid(FlatBufferBuilder builder, int milgridOffset) { builder.addOffset(9, milgridOffset, 0); }
  public static void addTheater(FlatBufferBuilder builder, int theaterOffset) { builder.addOffset(10, theaterOffset, 0); }
  public static void addArea(FlatBufferBuilder builder, int areaOffset) { builder.addOffset(11, areaOffset, 0); }
  public static void addAtext(FlatBufferBuilder builder, int atextOffset) { builder.addOffset(12, atextOffset, 0); }
  public static void addAgjson(FlatBufferBuilder builder, int agjsonOffset) { builder.addOffset(13, agjsonOffset, 0); }
  public static void addAtype(FlatBufferBuilder builder, int atypeOffset) { builder.addOffset(14, atypeOffset, 0); }
  public static void addAndims(FlatBufferBuilder builder, int andims) { builder.addInt(15, andims, 0); }
  public static void addAsrid(FlatBufferBuilder builder, int asrid) { builder.addInt(16, asrid, 0); }
  public static void addEventStart(FlatBufferBuilder builder, int eventStartOffset) { builder.addOffset(17, eventStartOffset, 0); }
  public static void addEventEnd(FlatBufferBuilder builder, int eventEndOffset) { builder.addOffset(18, eventEndOffset, 0); }
  public static void addReportDate(FlatBufferBuilder builder, int reportDateOffset) { builder.addOffset(19, reportDateOffset, 0); }
  public static void addActors(FlatBufferBuilder builder, int actorsOffset) { builder.addOffset(20, actorsOffset, 0); }
  public static int createActorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startActorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCivAbd(FlatBufferBuilder builder, int civAbd) { builder.addInt(21, civAbd, 0); }
  public static void addCivDet(FlatBufferBuilder builder, int civDet) { builder.addInt(22, civDet, 0); }
  public static void addCivKia(FlatBufferBuilder builder, int civKia) { builder.addInt(23, civKia, 0); }
  public static void addCivWound(FlatBufferBuilder builder, int civWound) { builder.addInt(24, civWound, 0); }
  public static void addCoalAbd(FlatBufferBuilder builder, int coalAbd) { builder.addInt(25, coalAbd, 0); }
  public static void addCoalDet(FlatBufferBuilder builder, int coalDet) { builder.addInt(26, coalDet, 0); }
  public static void addCoalKia(FlatBufferBuilder builder, int coalKia) { builder.addInt(27, coalKia, 0); }
  public static void addCoalWound(FlatBufferBuilder builder, int coalWound) { builder.addInt(28, coalWound, 0); }
  public static void addEnemyAbd(FlatBufferBuilder builder, int enemyAbd) { builder.addInt(29, enemyAbd, 0); }
  public static void addEnemyDet(FlatBufferBuilder builder, int enemyDet) { builder.addInt(30, enemyDet, 0); }
  public static void addEnemyKia(FlatBufferBuilder builder, int enemyKia) { builder.addInt(31, enemyKia, 0); }
  public static void addFriendlyAbd(FlatBufferBuilder builder, int friendlyAbd) { builder.addInt(32, friendlyAbd, 0); }
  public static void addFriendlyDet(FlatBufferBuilder builder, int friendlyDet) { builder.addInt(33, friendlyDet, 0); }
  public static void addFriendlyKia(FlatBufferBuilder builder, int friendlyKia) { builder.addInt(34, friendlyKia, 0); }
  public static void addFriendlyWound(FlatBufferBuilder builder, int friendlyWound) { builder.addInt(35, friendlyWound, 0); }
  public static void addHostNatAbd(FlatBufferBuilder builder, int hostNatAbd) { builder.addInt(36, hostNatAbd, 0); }
  public static void addHostNatDet(FlatBufferBuilder builder, int hostNatDet) { builder.addInt(37, hostNatDet, 0); }
  public static void addHostNatKia(FlatBufferBuilder builder, int hostNatKia) { builder.addInt(38, hostNatKia, 0); }
  public static void addHostNatWound(FlatBufferBuilder builder, int hostNatWound) { builder.addInt(39, hostNatWound, 0); }
  public static void addSideAabd(FlatBufferBuilder builder, int sideAabd) { builder.addInt(40, sideAabd, 0); }
  public static void addSideAdet(FlatBufferBuilder builder, int sideAdet) { builder.addInt(41, sideAdet, 0); }
  public static void addSideAkia(FlatBufferBuilder builder, int sideAkia) { builder.addInt(42, sideAkia, 0); }
  public static void addSideAwound(FlatBufferBuilder builder, int sideAwound) { builder.addInt(43, sideAwound, 0); }
  public static void addSideBabd(FlatBufferBuilder builder, int sideBabd) { builder.addInt(44, sideBabd, 0); }
  public static void addSideBdet(FlatBufferBuilder builder, int sideBdet) { builder.addInt(45, sideBdet, 0); }
  public static void addSideBkia(FlatBufferBuilder builder, int sideBkia) { builder.addInt(46, sideBkia, 0); }
  public static void addSideBwound(FlatBufferBuilder builder, int sideBwound) { builder.addInt(47, sideBwound, 0); }
  public static void addTarget(FlatBufferBuilder builder, int targetOffset) { builder.addOffset(48, targetOffset, 0); }
  public static void addEventDescription(FlatBufferBuilder builder, int eventDescriptionOffset) { builder.addOffset(49, eventDescriptionOffset, 0); }
  public static void addEventType(FlatBufferBuilder builder, int eventTypeOffset) { builder.addOffset(50, eventTypeOffset, 0); }
  public static void addTypeOfAttack(FlatBufferBuilder builder, int typeOfAttackOffset) { builder.addOffset(51, typeOfAttackOffset, 0); }
  public static void addComplexAttack(FlatBufferBuilder builder, boolean complexAttack) { builder.addBoolean(52, complexAttack, false); }
  public static void addIdNumber(FlatBufferBuilder builder, int idNumberOffset) { builder.addOffset(53, idNumberOffset, 0); }
  public static void addConfidence(FlatBufferBuilder builder, int confidence) { builder.addInt(54, confidence, 0); }
  public static void addAccuracy(FlatBufferBuilder builder, int accuracy) { builder.addInt(55, accuracy, 0); }
  public static void addClarity(FlatBufferBuilder builder, int clarity) { builder.addInt(56, clarity, 0); }
  public static void addCameoCode(FlatBufferBuilder builder, int cameoCodeOffset) { builder.addOffset(57, cameoCodeOffset, 0); }
  public static void addCameoBaseCode(FlatBufferBuilder builder, int cameoBaseCodeOffset) { builder.addOffset(58, cameoBaseCodeOffset, 0); }
  public static void addCameoRootCode(FlatBufferBuilder builder, int cameoRootCodeOffset) { builder.addOffset(59, cameoRootCodeOffset, 0); }
  public static void addGoldstein(FlatBufferBuilder builder, double goldstein) { builder.addDouble(60, goldstein, 0.0); }
  public static void addDocumentSource(FlatBufferBuilder builder, int documentSourceOffset) { builder.addOffset(61, documentSourceOffset, 0); }
  public static void addDocumentFilename(FlatBufferBuilder builder, int documentFilenameOffset) { builder.addOffset(62, documentFilenameOffset, 0); }
  public static void addHasAttachment(FlatBufferBuilder builder, boolean hasAttachment) { builder.addBoolean(63, hasAttachment, false); }
  public static void addFilesize(FlatBufferBuilder builder, long filesize) { builder.addLong(64, filesize, 0L); }
  public static void addChecksumValue(FlatBufferBuilder builder, int checksumValueOffset) { builder.addOffset(65, checksumValueOffset, 0); }
  public static void addRepUnit(FlatBufferBuilder builder, int repUnitOffset) { builder.addOffset(66, repUnitOffset, 0); }
  public static void addRepUnitType(FlatBufferBuilder builder, int repUnitTypeOffset) { builder.addOffset(67, repUnitTypeOffset, 0); }
  public static void addRepUnitActivity(FlatBufferBuilder builder, int repUnitActivityOffset) { builder.addOffset(68, repUnitActivityOffset, 0); }
  public static void addNumMentions(FlatBufferBuilder builder, int numMentions) { builder.addInt(69, numMentions, 0); }
  public static void addNumSources(FlatBufferBuilder builder, int numSources) { builder.addInt(70, numSources, 0); }
  public static void addNumArticles(FlatBufferBuilder builder, int numArticles) { builder.addInt(71, numArticles, 0); }
  public static void addAvgTone(FlatBufferBuilder builder, double avgTone) { builder.addDouble(72, avgTone, 0.0); }
  public static void addSourceUrl(FlatBufferBuilder builder, int sourceUrlOffset) { builder.addOffset(73, sourceUrlOffset, 0); }
  public static void addRelatedDocs(FlatBufferBuilder builder, int relatedDocsOffset) { builder.addOffset(74, relatedDocsOffset, 0); }
  public static int createRelatedDocsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRelatedDocsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSummary(FlatBufferBuilder builder, int summaryOffset) { builder.addOffset(75, summaryOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(76, notesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(77, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(78, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(79, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(80, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(81, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(82, origNetworkOffset, 0); }
  public static int endSigAct_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSigAct_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SIGA"); }
  public static void finishSizePrefixedSigAct_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SIGA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SigAct_Full get(int j) { return get(new SigAct_Full(), j); }
    public SigAct_Full get(SigAct_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

