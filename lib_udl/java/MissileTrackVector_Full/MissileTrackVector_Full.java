// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Schema for Missile Track Vector data.
 */
@SuppressWarnings("unused")
public final class MissileTrackVector_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MissileTrackVector_Full getRootAsMissileTrackVector_Full(ByteBuffer _bb) { return getRootAsMissileTrackVector_Full(_bb, new MissileTrackVector_Full()); }
  public static MissileTrackVector_Full getRootAsMissileTrackVector_Full(ByteBuffer _bb, MissileTrackVector_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MissileTrackVector_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MISS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MissileTrackVector_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Type of vector represented (e.g. LOS, PREDICTED, STATE).
   * Example: /// Example: STATE
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String type() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Object to which this vector applies.
   * Example: /// Example: TARGET
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String object() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer objectAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer objectInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Vector timestamp in ISO8601 UTC format, with microsecond precision.
   * Example: /// Example: 2024-03-30T15:02:39.346768Z
   * Constraints: No constraints specified.
   */
  public String epoch() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer epochAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer epochInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the reporting sensor of the object.
   * Example: /// Example: a7e99418-b6d6-29ab-e767-440a989cce26
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Optional identifier provided by the source to indicate the reporting sensor of the object. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 46
   */
  public String origSensorId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Three element array, expressing the cartesian position vector of the target object, in kilometers, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x, y, z].
   * Example: /// Example: [-1456.91592, -2883.54041, 6165.55186]
   * Constraints: No constraints specified.
   */
  public String pos(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int posLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector posVector() { return posVector(new StringVector()); }
  public StringVector posVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Three element array, expressing the cartesian velocity vector of the target object, in kilometers/second, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x', y', z'].
   * Example: /// Example: [-1.21981, -6.60208, -3.36515]
   * Constraints: No constraints specified.
   */
  public String vel(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int velLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector velVector() { return velVector(new StringVector()); }
  public StringVector velVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Three element array, expressing the cartesian acceleration vector of the target object, in kilometers/second^2, in the specified referenceFrame. If referenceFrame is null then ECEF should be assumed. The array element order is [x'', y'', z''].
   * Example: /// Example: [0.59236, -0.03537, 0.35675]
   * Constraints: No constraints specified.
   */
  public String accel(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int accelLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector accelVector() { return accelVector(new StringVector()); }
  public StringVector accelVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Track object course, in degrees clockwise from true north.
   * Example: /// Example: 7.3580153
   * Constraints: No constraints specified.
   */
  public double course() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Track object speed, in kilometers/sec.
   * Example: /// Example: 15.03443
   * Constraints: No constraints specified.
   */
  public double spd() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The reference frame of the cartesian vector (ECEF, J2000). If the referenceFrame is null it is assumed to be ECEF.
   * Example: /// Example: ECEF
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String referenceFrame() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer referenceFrameAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer referenceFrameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Covariance matrix, in kilometer and second based units, in the specified covReferenceFrame.
   * If the covReferenceFrame is null it is assumed to be UVW. The array values (1-45) represent the upper triangular half of the position-velocity-acceleration covariance matrix.
   * The covariance elements are position dependent within the array with values ordered as follows:
   * &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y'&nbsp;&nbsp;&nbsp;&nbsp;z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x"&nbsp;&nbsp;&nbsp;&nbsp;y"&nbsp;&nbsp;&nbsp;&nbsp;z"
   * x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;9
   * y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;&nbsp;12&nbsp;&nbsp;&nbsp;13&nbsp;&nbsp;&nbsp;14&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;16&nbsp;&nbsp;&nbsp;17
   * z&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;18&nbsp;&nbsp;&nbsp;19&nbsp;&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;21&nbsp;&nbsp;&nbsp;22&nbsp;&nbsp;&nbsp;23&nbsp;&nbsp;&nbsp;24
   * x'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;25&nbsp;&nbsp;&nbsp;26&nbsp;&nbsp;&nbsp;27&nbsp;&nbsp;&nbsp;28&nbsp;&nbsp;&nbsp;29&nbsp;&nbsp;&nbsp;30
   * y'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;31&nbsp;&nbsp;&nbsp;32&nbsp;&nbsp;&nbsp;33&nbsp;&nbsp;&nbsp;34&nbsp;&nbsp;&nbsp;35
   * z'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;36&nbsp;&nbsp;&nbsp;37&nbsp;&nbsp;&nbsp;38&nbsp;&nbsp;&nbsp;39
   * x"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;40&nbsp;&nbsp;&nbsp;41&nbsp;&nbsp;&nbsp;42
   * y"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;43&nbsp;&nbsp;&nbsp;44
   * z"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45
   * The cov array should contain only the upper right triangle values from top left down to bottom right, in order.
   * Example: /// Example: [1.1, 2.2, 3.3]
   * Constraints: No constraints specified.
   */
  public String cov(int j) { int o = __offset(26); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int covLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public StringVector covVector() { return covVector(new StringVector()); }
  public StringVector covVector(StringVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The reference frame of the covariance elements (ECEF, J2000, UVW). If the referenceFrame is null it is assumed to be UVW.
   * Example: /// Example: ECEF
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String covReferenceFrame() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer covReferenceFrameAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer covReferenceFrameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * WGS-84 object latitude subpoint at epoch, represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.0
   * Constraints: No constraints specified.
   */
  public double vectorLat() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 object longitude subpoint at epoch, represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 150.0
   * Constraints: No constraints specified.
   */
  public double vectorLon() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Object altitude at epoch, expressed in kilometers above WGS-84 ellipsoid.
   * Example: /// Example: 25.0
   * Constraints: No constraints specified.
   */
  public double vectorAlt() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Confidence of the vector, 0-100.
   * Example: /// Example: 100
   * Constraints: No constraints specified.
   */
  public int confidence() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Status of the vector (e.g. INITIAL, UPDATE).
   * Example: /// Example: INITIAL
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String status() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Source of the time value.
   * Example: /// Example: Sensor 1
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String timeSource() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeSourceAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer timeSourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The quaternion describing the attitude of the spacecraft with respect to the reference frame listed in the 'referenceFrame' field. The array element order convention is the three vector components, followed by the scalar component.
   * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
   * Constraints: No constraints specified.
   */
  public String quat(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int quatLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector quatVector() { return quatVector(new StringVector()); }
  public StringVector quatVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The flight azimuth associated with the current state vector (0-360 degrees).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double flightAz() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createMissileTrackVector_Full(FlatBufferBuilder builder,
      int typeOffset,
      int objectOffset,
      int epochOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int posOffset,
      int velOffset,
      int accelOffset,
      double course,
      double spd,
      int referenceFrameOffset,
      int covOffset,
      int covReferenceFrameOffset,
      double vectorLat,
      double vectorLon,
      double vectorAlt,
      int confidence,
      int statusOffset,
      int timeSourceOffset,
      int quatOffset,
      double flightAz) {
    builder.startTable(21);
    MissileTrackVector_Full.addFlightAz(builder, flightAz);
    MissileTrackVector_Full.addVectorAlt(builder, vectorAlt);
    MissileTrackVector_Full.addVectorLon(builder, vectorLon);
    MissileTrackVector_Full.addVectorLat(builder, vectorLat);
    MissileTrackVector_Full.addSpd(builder, spd);
    MissileTrackVector_Full.addCourse(builder, course);
    MissileTrackVector_Full.addQuat(builder, quatOffset);
    MissileTrackVector_Full.addTimeSource(builder, timeSourceOffset);
    MissileTrackVector_Full.addStatus(builder, statusOffset);
    MissileTrackVector_Full.addConfidence(builder, confidence);
    MissileTrackVector_Full.addCovReferenceFrame(builder, covReferenceFrameOffset);
    MissileTrackVector_Full.addCov(builder, covOffset);
    MissileTrackVector_Full.addReferenceFrame(builder, referenceFrameOffset);
    MissileTrackVector_Full.addAccel(builder, accelOffset);
    MissileTrackVector_Full.addVel(builder, velOffset);
    MissileTrackVector_Full.addPos(builder, posOffset);
    MissileTrackVector_Full.addOrigSensorId(builder, origSensorIdOffset);
    MissileTrackVector_Full.addIdSensor(builder, idSensorOffset);
    MissileTrackVector_Full.addEpoch(builder, epochOffset);
    MissileTrackVector_Full.addObject(builder, objectOffset);
    MissileTrackVector_Full.addType(builder, typeOffset);
    return MissileTrackVector_Full.endMissileTrackVector_Full(builder);
  }

  public static void startMissileTrackVector_Full(FlatBufferBuilder builder) { builder.startTable(21); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(0, typeOffset, 0); }
  public static void addObject(FlatBufferBuilder builder, int objectOffset) { builder.addOffset(1, objectOffset, 0); }
  public static void addEpoch(FlatBufferBuilder builder, int epochOffset) { builder.addOffset(2, epochOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(3, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(4, origSensorIdOffset, 0); }
  public static void addPos(FlatBufferBuilder builder, int posOffset) { builder.addOffset(5, posOffset, 0); }
  public static int createPosVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPosVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVel(FlatBufferBuilder builder, int velOffset) { builder.addOffset(6, velOffset, 0); }
  public static int createVelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAccel(FlatBufferBuilder builder, int accelOffset) { builder.addOffset(7, accelOffset, 0); }
  public static int createAccelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAccelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCourse(FlatBufferBuilder builder, double course) { builder.addDouble(8, course, 0.0); }
  public static void addSpd(FlatBufferBuilder builder, double spd) { builder.addDouble(9, spd, 0.0); }
  public static void addReferenceFrame(FlatBufferBuilder builder, int referenceFrameOffset) { builder.addOffset(10, referenceFrameOffset, 0); }
  public static void addCov(FlatBufferBuilder builder, int covOffset) { builder.addOffset(11, covOffset, 0); }
  public static int createCovVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCovVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCovReferenceFrame(FlatBufferBuilder builder, int covReferenceFrameOffset) { builder.addOffset(12, covReferenceFrameOffset, 0); }
  public static void addVectorLat(FlatBufferBuilder builder, double vectorLat) { builder.addDouble(13, vectorLat, 0.0); }
  public static void addVectorLon(FlatBufferBuilder builder, double vectorLon) { builder.addDouble(14, vectorLon, 0.0); }
  public static void addVectorAlt(FlatBufferBuilder builder, double vectorAlt) { builder.addDouble(15, vectorAlt, 0.0); }
  public static void addConfidence(FlatBufferBuilder builder, int confidence) { builder.addInt(16, confidence, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(17, statusOffset, 0); }
  public static void addTimeSource(FlatBufferBuilder builder, int timeSourceOffset) { builder.addOffset(18, timeSourceOffset, 0); }
  public static void addQuat(FlatBufferBuilder builder, int quatOffset) { builder.addOffset(19, quatOffset, 0); }
  public static int createQuatVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startQuatVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFlightAz(FlatBufferBuilder builder, double flightAz) { builder.addDouble(20, flightAz, 0.0); }
  public static int endMissileTrackVector_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMissileTrackVector_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MISS"); }
  public static void finishSizePrefixedMissileTrackVector_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MISS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MissileTrackVector_Full get(int j) { return get(new MissileTrackVector_Full(), j); }
    public MissileTrackVector_Full get(MissileTrackVector_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

