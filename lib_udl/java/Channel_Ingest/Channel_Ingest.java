// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Channel information on a particular transponder.
 */
@SuppressWarnings("unused")
public final class Channel_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Channel_Ingest getRootAsChannel_Ingest(ByteBuffer _bb) { return getRootAsChannel_Ingest(_bb, new Channel_Ingest()); }
  public static Channel_Ingest getRootAsChannel_Ingest(ByteBuffer _bb, Channel_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Channel_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "CHAN"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Channel_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: CHANNEL-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * ID of the parent transponder object for this Channel.
   * Example: /// Example: REF-TRANSPONDER-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idTransponder() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idTransponderAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idTransponderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Channel name.
   * Example: /// Example: Example name
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Channel type.
   * Example: /// Example: Example type
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String type() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Identifier of the particular beam for this channel.
   * Example: /// Example: REF-BEAM-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idBeam() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idBeamAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idBeamInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
   * Example: /// Example: B8VD
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String beamName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer beamNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer beamNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * ID of the RF Band object for this channel.
   * Example: /// Example: REF-RFBAND-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idRfband() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idRfbandAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer idRfbandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Channel encryption.
   * Example: /// Example: Example encryption
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String encryption() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer encryptionAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer encryptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Pkg.
   * Example: /// Example: Example pkg
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String pkg() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pkgAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer pkgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Res.
   * Example: /// Example: Example res
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String res() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer resInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Channel compression.
   * Example: /// Example: Example compression
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String compression() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer compressionAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer compressionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Channel vPid.
   * Example: /// Example: VP-ID
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String vpid() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vpidAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer vpidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Channel aPid.
   * Example: /// Example: AP-ID
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String apid() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer apidAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer apidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * SID.
   * Example: /// Example: S-ID
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String sid() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sidAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer sidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Owner.
   * Example: /// Example: example_owner
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String owner() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer ownerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Source of the data.
   * Example: /// Example: system.source
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: example_origin
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(42); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }

  public static int createChannel_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int idTransponderOffset,
      int nameOffset,
      int classificationMarkingOffset,
      int typeOffset,
      int idBeamOffset,
      int beamNameOffset,
      int idRfbandOffset,
      int encryptionOffset,
      int pkgOffset,
      int resOffset,
      int compressionOffset,
      int vpidOffset,
      int apidOffset,
      int sidOffset,
      int ownerOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset) {
    builder.startTable(22);
    Channel_Ingest.addCreatedBy(builder, createdByOffset);
    Channel_Ingest.addCreatedAt(builder, createdAtOffset);
    Channel_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Channel_Ingest.addOrigin(builder, originOffset);
    Channel_Ingest.addSource(builder, sourceOffset);
    Channel_Ingest.addOwner(builder, ownerOffset);
    Channel_Ingest.addSid(builder, sidOffset);
    Channel_Ingest.addApid(builder, apidOffset);
    Channel_Ingest.addVpid(builder, vpidOffset);
    Channel_Ingest.addCompression(builder, compressionOffset);
    Channel_Ingest.addRes(builder, resOffset);
    Channel_Ingest.addPkg(builder, pkgOffset);
    Channel_Ingest.addEncryption(builder, encryptionOffset);
    Channel_Ingest.addIdRfband(builder, idRfbandOffset);
    Channel_Ingest.addBeamName(builder, beamNameOffset);
    Channel_Ingest.addIdBeam(builder, idBeamOffset);
    Channel_Ingest.addType(builder, typeOffset);
    Channel_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Channel_Ingest.addName(builder, nameOffset);
    Channel_Ingest.addIdTransponder(builder, idTransponderOffset);
    Channel_Ingest.addId(builder, idOffset);
    Channel_Ingest.addDataMode(builder, dataMode);
    return Channel_Ingest.endChannel_Ingest(builder);
  }

  public static void startChannel_Ingest(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdTransponder(FlatBufferBuilder builder, int idTransponderOffset) { builder.addOffset(1, idTransponderOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(3, classificationMarkingOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(4, typeOffset, 0); }
  public static void addIdBeam(FlatBufferBuilder builder, int idBeamOffset) { builder.addOffset(5, idBeamOffset, 0); }
  public static void addBeamName(FlatBufferBuilder builder, int beamNameOffset) { builder.addOffset(6, beamNameOffset, 0); }
  public static void addIdRfband(FlatBufferBuilder builder, int idRfbandOffset) { builder.addOffset(7, idRfbandOffset, 0); }
  public static void addEncryption(FlatBufferBuilder builder, int encryptionOffset) { builder.addOffset(8, encryptionOffset, 0); }
  public static void addPkg(FlatBufferBuilder builder, int pkgOffset) { builder.addOffset(9, pkgOffset, 0); }
  public static void addRes(FlatBufferBuilder builder, int resOffset) { builder.addOffset(10, resOffset, 0); }
  public static void addCompression(FlatBufferBuilder builder, int compressionOffset) { builder.addOffset(11, compressionOffset, 0); }
  public static void addVpid(FlatBufferBuilder builder, int vpidOffset) { builder.addOffset(12, vpidOffset, 0); }
  public static void addApid(FlatBufferBuilder builder, int apidOffset) { builder.addOffset(13, apidOffset, 0); }
  public static void addSid(FlatBufferBuilder builder, int sidOffset) { builder.addOffset(14, sidOffset, 0); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(15, ownerOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(16, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(17, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(18, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(19, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(20, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(21, createdByOffset, 0); }
  public static int endChannel_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishChannel_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "CHAN"); }
  public static void finishSizePrefixedChannel_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "CHAN"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Channel_Ingest get(int j) { return get(new Channel_Ingest(), j); }
    public Channel_Ingest get(Channel_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

