// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection that specifies the naval flight operations for this ATO.
 */
@SuppressWarnings("unused")
public final class NavalFlightOperations_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static NavalFlightOperations_Ingest getRootAsNavalFlightOperations_Ingest(ByteBuffer _bb) { return getRootAsNavalFlightOperations_Ingest(_bb, new NavalFlightOperations_Ingest()); }
  public static NavalFlightOperations_Ingest getRootAsNavalFlightOperations_Ingest(ByteBuffer _bb, NavalFlightOperations_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean NavalFlightOperations_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "NAVA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NavalFlightOperations_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
   * Example: /// Example: USS WASP
   * Constraints: Minimum length = 1, Maximum length = 48
   */
  public String shipName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer shipNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer shipNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The time when flight operations begin in ISO8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-02-25T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String fltOpStart() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fltOpStartAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer fltOpStartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The time when flight operations end in ISO8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-02-25T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String fltOpStop() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fltOpStopAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer fltOpStopInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
   * Example: /// Example: ['2021-02-25T12:00:00.123Z']
   * Constraints: No constraints specified.
   */
  public String schdLaunchRcvyTime(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int schdLaunchRcvyTimeLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector schdLaunchRcvyTimeVector() { return schdLaunchRcvyTimeVector(new StringVector()); }
  public StringVector schdLaunchRcvyTimeVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createNavalFlightOperations_Ingest(FlatBufferBuilder builder,
      int shipNameOffset,
      int fltOpStartOffset,
      int fltOpStopOffset,
      int schdLaunchRcvyTimeOffset) {
    builder.startTable(4);
    NavalFlightOperations_Ingest.addSchdLaunchRcvyTime(builder, schdLaunchRcvyTimeOffset);
    NavalFlightOperations_Ingest.addFltOpStop(builder, fltOpStopOffset);
    NavalFlightOperations_Ingest.addFltOpStart(builder, fltOpStartOffset);
    NavalFlightOperations_Ingest.addShipName(builder, shipNameOffset);
    return NavalFlightOperations_Ingest.endNavalFlightOperations_Ingest(builder);
  }

  public static void startNavalFlightOperations_Ingest(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addShipName(FlatBufferBuilder builder, int shipNameOffset) { builder.addOffset(0, shipNameOffset, 0); }
  public static void addFltOpStart(FlatBufferBuilder builder, int fltOpStartOffset) { builder.addOffset(1, fltOpStartOffset, 0); }
  public static void addFltOpStop(FlatBufferBuilder builder, int fltOpStopOffset) { builder.addOffset(2, fltOpStopOffset, 0); }
  public static void addSchdLaunchRcvyTime(FlatBufferBuilder builder, int schdLaunchRcvyTimeOffset) { builder.addOffset(3, schdLaunchRcvyTimeOffset, 0); }
  public static int createSchdLaunchRcvyTimeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSchdLaunchRcvyTimeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endNavalFlightOperations_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishNavalFlightOperations_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "NAVA"); }
  public static void finishSizePrefixedNavalFlightOperations_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "NAVA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public NavalFlightOperations_Ingest get(int j) { return get(new NavalFlightOperations_Ingest(), j); }
    public NavalFlightOperations_Ingest get(NavalFlightOperations_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

