// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// This service provides operations for manipulation and querying of maritime Vessel data. Vessel contains the static data of the specific vessel: mmsi, cruise speed, max speed, etc.
 */
@SuppressWarnings("unused")
public final class Vessel_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Vessel_Ingest getRootAsVessel_Ingest(ByteBuffer _bb) { return getRootAsVessel_Ingest(_bb, new Vessel_Ingest()); }
  public static Vessel_Ingest getRootAsVessel_Ingest(ByteBuffer _bb, Vessel_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Vessel_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "VESS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Vessel_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String entity() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer entityAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer entityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the parent entity. idEntity is required for Put.
   * Example: /// Example: ENTITY-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idEntity() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEntityAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idEntityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The original source Id for this vessel.
   * Example: /// Example: 590b5194fc32e75dd00682ba
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String altVesselId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altVesselIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer altVesselIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The UDL ID of the organization that owns the vessel.
   * Example: /// Example: 0147f777-w09a-835f-85aa-0a07a730fgg0
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOrganization() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOrganizationAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idOrganizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The name of this vessel. Vessel names that exceed the AIS 20 character are shortened (not truncated) to 15 character-spaces, followed by an underscore and the last 4 characters-spaces of the vessel full name.
   * Example: /// Example: DORNUM
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String vesselName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vesselNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer vesselNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The reported ship type (e.g. Passenger, Tanker, Cargo, Other, etc.).
   * Example: /// Example: Passenger
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String vesselType() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vesselTypeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer vesselTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The common name for a group of ships with similar design, usually named for the first vessel of the class.
   * Example: /// Example: Nimitz
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String vesselClass() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vesselClassAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer vesselClassInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Further description or explanation of the vessel or type.
   * Example: /// Example: Search and Rescue Vessel
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String vesselDescription() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vesselDescriptionAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer vesselDescriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The Ship Control Number (SCONUM) is a naval vessel identification number (alphanumeric code) assigned by the Office of Naval Intelligence. SCONUM is sometimes referred to as NOIC ID. SCONUMs are typically of the form A#####, where A is an alpha character and # is numerical.
   * Example: /// Example: B45524
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String sconum() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sconumAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer sconumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The International Maritime Organization Number of the vessel. IMON is a seven-digit number that uniquely identifies the vessel.
   * Example: /// Example: 9566356
   * Constraints: No constraints specified.
   */
  public int imon() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The Maritime Mobile Service Identity of the vessel. MMSI is a nine-digit number that identifies the transmitter station of the vessel.
   * Example: /// Example: 416450000
   * Constraints: Minimum length = 0, Maximum length = 9
   */
  public String mmsi() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mmsiAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer mmsiInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * A uniquely designated identifier for the vessel's transmitter station. All radio transmissions must be individually identified by the call sign. Merchant and naval vessels are assigned call signs by their national licensing authorities.
   * Example: /// Example: V2OZ
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String callsign() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callsignAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer callsignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The flag of the subject vessel.
   * Example: /// Example: United States
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String vesselFlag() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vesselFlagAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer vesselFlagInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Year the vessel went into service.
   * Example: /// Example: 2014
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String yearBuilt() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer yearBuiltAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer yearBuiltInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The shipbuilder who built this vessel.
   * Example: /// Example: Samsung Heavy Inds - Geoje
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String vesselBuilder() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vesselBuilderAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer vesselBuilderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The status of this vessel.
   * Example: /// Example: In Service/Commission
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String status() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The date this vessel was first seen.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String firstSeen() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firstSeenAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer firstSeenInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The overall length of the vessel, in meters. A value of 511 indicates a vessel length of 511 meters or greater.
   * Example: /// Example: 511.1
   * Constraints: No constraints specified.
   */
  public double length() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The breadth of the vessel, in meters. A value of 63 indicates a vessel breadth of 63 meters or greater.
   * Example: /// Example: 24.1
   * Constraints: No constraints specified.
   */
  public double width() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The maximum static draught, in meters, of the vessel defined as the distance between the ship’s keel and the waterline of the vessel.
   * Example: /// Example: 21.1
   * Constraints: No constraints specified.
   */
  public double maxDraught() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The weight in tons, of this vessel.
   * Example: /// Example: 3423.76
   * Constraints: No constraints specified.
   */
  public double vslWt() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The maximum possible speed of this vessel in meters per second.
   * Example: /// Example: 32.5
   * Constraints: No constraints specified.
   */
  public double maxSpeed() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The stern type code (Counter, Cruiser) associated with this vessel.
   * Example: /// Example: Cruiser
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String sternType() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sternTypeAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer sternTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * The number of blades per shaft for this vessel.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int numBlades() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number of shafts on this vessel.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int numShafts() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The type of propulsion employed by this vessel.
   * Example: /// Example: Diesel
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String propType() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer propTypeAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer propTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * The vessel hull number designation of this maritime vessel. The hull number is a 1-6 character alphanumeric entry assigned to a ship and painted on the hull.
   * Example: /// Example: A30081
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public String hullNum() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hullNumAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer hullNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public byte dataMode() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }

  public static int createVessel_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int entityOffset,
      int idEntityOffset,
      int altVesselIdOffset,
      int idOrganizationOffset,
      int vesselNameOffset,
      int vesselTypeOffset,
      int vesselClassOffset,
      int vesselDescriptionOffset,
      int sconumOffset,
      int imon,
      int mmsiOffset,
      int callsignOffset,
      int vesselFlagOffset,
      int yearBuiltOffset,
      int vesselBuilderOffset,
      int statusOffset,
      int firstSeenOffset,
      double length,
      double width,
      double maxDraught,
      double vslWt,
      double maxSpeed,
      int sternTypeOffset,
      int numBlades,
      int numShafts,
      int propTypeOffset,
      int hullNumOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(35);
    Vessel_Ingest.addMaxSpeed(builder, maxSpeed);
    Vessel_Ingest.addVslWt(builder, vslWt);
    Vessel_Ingest.addMaxDraught(builder, maxDraught);
    Vessel_Ingest.addWidth(builder, width);
    Vessel_Ingest.addLength(builder, length);
    Vessel_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Vessel_Ingest.addOrigin(builder, originOffset);
    Vessel_Ingest.addSource(builder, sourceOffset);
    Vessel_Ingest.addCreatedBy(builder, createdByOffset);
    Vessel_Ingest.addCreatedAt(builder, createdAtOffset);
    Vessel_Ingest.addHullNum(builder, hullNumOffset);
    Vessel_Ingest.addPropType(builder, propTypeOffset);
    Vessel_Ingest.addNumShafts(builder, numShafts);
    Vessel_Ingest.addNumBlades(builder, numBlades);
    Vessel_Ingest.addSternType(builder, sternTypeOffset);
    Vessel_Ingest.addFirstSeen(builder, firstSeenOffset);
    Vessel_Ingest.addStatus(builder, statusOffset);
    Vessel_Ingest.addVesselBuilder(builder, vesselBuilderOffset);
    Vessel_Ingest.addYearBuilt(builder, yearBuiltOffset);
    Vessel_Ingest.addVesselFlag(builder, vesselFlagOffset);
    Vessel_Ingest.addCallsign(builder, callsignOffset);
    Vessel_Ingest.addMmsi(builder, mmsiOffset);
    Vessel_Ingest.addImon(builder, imon);
    Vessel_Ingest.addSconum(builder, sconumOffset);
    Vessel_Ingest.addVesselDescription(builder, vesselDescriptionOffset);
    Vessel_Ingest.addVesselClass(builder, vesselClassOffset);
    Vessel_Ingest.addVesselType(builder, vesselTypeOffset);
    Vessel_Ingest.addVesselName(builder, vesselNameOffset);
    Vessel_Ingest.addIdOrganization(builder, idOrganizationOffset);
    Vessel_Ingest.addAltVesselId(builder, altVesselIdOffset);
    Vessel_Ingest.addIdEntity(builder, idEntityOffset);
    Vessel_Ingest.addEntity(builder, entityOffset);
    Vessel_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Vessel_Ingest.addId(builder, idOffset);
    Vessel_Ingest.addDataMode(builder, dataMode);
    return Vessel_Ingest.endVessel_Ingest(builder);
  }

  public static void startVessel_Ingest(FlatBufferBuilder builder) { builder.startTable(35); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addEntity(FlatBufferBuilder builder, int entityOffset) { builder.addOffset(2, entityOffset, 0); }
  public static void addIdEntity(FlatBufferBuilder builder, int idEntityOffset) { builder.addOffset(3, idEntityOffset, 0); }
  public static void addAltVesselId(FlatBufferBuilder builder, int altVesselIdOffset) { builder.addOffset(4, altVesselIdOffset, 0); }
  public static void addIdOrganization(FlatBufferBuilder builder, int idOrganizationOffset) { builder.addOffset(5, idOrganizationOffset, 0); }
  public static void addVesselName(FlatBufferBuilder builder, int vesselNameOffset) { builder.addOffset(6, vesselNameOffset, 0); }
  public static void addVesselType(FlatBufferBuilder builder, int vesselTypeOffset) { builder.addOffset(7, vesselTypeOffset, 0); }
  public static void addVesselClass(FlatBufferBuilder builder, int vesselClassOffset) { builder.addOffset(8, vesselClassOffset, 0); }
  public static void addVesselDescription(FlatBufferBuilder builder, int vesselDescriptionOffset) { builder.addOffset(9, vesselDescriptionOffset, 0); }
  public static void addSconum(FlatBufferBuilder builder, int sconumOffset) { builder.addOffset(10, sconumOffset, 0); }
  public static void addImon(FlatBufferBuilder builder, int imon) { builder.addInt(11, imon, 0); }
  public static void addMmsi(FlatBufferBuilder builder, int mmsiOffset) { builder.addOffset(12, mmsiOffset, 0); }
  public static void addCallsign(FlatBufferBuilder builder, int callsignOffset) { builder.addOffset(13, callsignOffset, 0); }
  public static void addVesselFlag(FlatBufferBuilder builder, int vesselFlagOffset) { builder.addOffset(14, vesselFlagOffset, 0); }
  public static void addYearBuilt(FlatBufferBuilder builder, int yearBuiltOffset) { builder.addOffset(15, yearBuiltOffset, 0); }
  public static void addVesselBuilder(FlatBufferBuilder builder, int vesselBuilderOffset) { builder.addOffset(16, vesselBuilderOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(17, statusOffset, 0); }
  public static void addFirstSeen(FlatBufferBuilder builder, int firstSeenOffset) { builder.addOffset(18, firstSeenOffset, 0); }
  public static void addLength(FlatBufferBuilder builder, double length) { builder.addDouble(19, length, 0.0); }
  public static void addWidth(FlatBufferBuilder builder, double width) { builder.addDouble(20, width, 0.0); }
  public static void addMaxDraught(FlatBufferBuilder builder, double maxDraught) { builder.addDouble(21, maxDraught, 0.0); }
  public static void addVslWt(FlatBufferBuilder builder, double vslWt) { builder.addDouble(22, vslWt, 0.0); }
  public static void addMaxSpeed(FlatBufferBuilder builder, double maxSpeed) { builder.addDouble(23, maxSpeed, 0.0); }
  public static void addSternType(FlatBufferBuilder builder, int sternTypeOffset) { builder.addOffset(24, sternTypeOffset, 0); }
  public static void addNumBlades(FlatBufferBuilder builder, int numBlades) { builder.addInt(25, numBlades, 0); }
  public static void addNumShafts(FlatBufferBuilder builder, int numShafts) { builder.addInt(26, numShafts, 0); }
  public static void addPropType(FlatBufferBuilder builder, int propTypeOffset) { builder.addOffset(27, propTypeOffset, 0); }
  public static void addHullNum(FlatBufferBuilder builder, int hullNumOffset) { builder.addOffset(28, hullNumOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(29, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(30, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(31, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(32, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(33, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(34, origNetworkOffset, 0); }
  public static int endVessel_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishVessel_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "VESS"); }
  public static void finishSizePrefixedVessel_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "VESS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Vessel_Ingest get(int j) { return get(new Vessel_Ingest(), j); }
    public Vessel_Ingest get(Vessel_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

