// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
 */
@SuppressWarnings("unused")
public final class EOObservation_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EOObservation_Full getRootAsEOObservation_Full(ByteBuffer _bb) { return getRootAsEOObservation_Full(_bb, new EOObservation_Full()); }
  public static EOObservation_Full getRootAsEOObservation_Full(ByteBuffer _bb, EOObservation_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EOObservation_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EOOB"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EOObservation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: EOOBSERVATION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double corrQuality() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Unique identifier of the target on-orbit object, if correlated.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the Sky Imagery.
   * Example: /// Example: SKYIMAGERY-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSkyImagery() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSkyImageryAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idSkyImageryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
   * Example: /// Example: AUTOTRACK
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String collectMethod() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectMethodAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer collectMethodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier to indicate the specific tasking which produced this observation.
   * Example: /// Example: TASK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String taskId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer taskIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Optional identifier of the track to which this observation belongs.
   * Example: /// Example: TRACK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trackId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer trackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
   * Example: /// Example: FIRST
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String obPosition() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obPositionAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer obPositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(34); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Line of sight azimuth angle in degrees and topocentric frame.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double azimuth() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight azimuth angle, in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double azimuthUnc() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor line of sight azimuth angle bias in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double azimuthBias() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight azimuth in degrees per second.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double azimuthRate() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight elevation in degrees and topocentric frame.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double elevation() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight elevation angle, in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double elevationUnc() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor line of sight elevation bias in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double elevationBias() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight elevation in degrees per second.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double elevationRate() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight range in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double range() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight range, in kilometers.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double rangeUnc() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor line of sight range bias in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double rangeBias() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight range in km/sec.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double rangeRate() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight range rate, in kilometers/second.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double rangeRateUnc() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double ra() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double raRate() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight right ascension angle, in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double raUnc() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor line of sight right ascension bias in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double raBias() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double declination() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double declinationRate() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight declination angle, in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double declinationUnc() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor line of sight declination angle bias in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double declinationBias() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losx() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losy() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losz() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight pointing in micro-radians.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losUnc() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losxvel() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losyvel() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double loszvel() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double senlat() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double senlon() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude at obTime (if mobile/onorbit) in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senx() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double seny() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senz() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvelx() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvely() { int o = __offset(106); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvelz() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
   * Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
   * Constraints: No constraints specified.
   */
  public String senQuat(int j) { int o = __offset(110); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int senQuatLength() { int o = __offset(110); return o != 0 ? __vector_len(o) : 0; }
  public StringVector senQuatVector() { return senQuatVector(new StringVector()); }
  public StringVector senQuatVector(StringVector obj) { int o = __offset(110); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The number of RSOs detected in the sensor field of view.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int fovCount() { int o = __offset(112); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Image exposure duration in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double expDuration() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double zeroptd() { int o = __offset(116); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Net object signature = counts / expDuration.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double netObjSig() { int o = __offset(118); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Net object signature uncertainty = counts uncertainty / expDuration.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double netObjSigUnc() { int o = __offset(120); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Calibrated magnitude in units of magnitudes.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double mag() { int o = __offset(122); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Uncertainty of calibrated magnitude in units of magnitudes.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double magUnc() { int o = __offset(124); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double magNormRange() { int o = __offset(126); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For GEO detections, the latitude in degrees north.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double geolat() { int o = __offset(128); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For GEO detections, the longitude in degrees east.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double geolon() { int o = __offset(130); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For GEO detections, the altitude in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double geoalt() { int o = __offset(132); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For GEO detections, the range in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double georange() { int o = __offset(134); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double skyBkgrnd() { int o = __offset(136); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double primaryExtinction() { int o = __offset(138); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Primary Extinction Coefficient Uncertainty, in Magnitudes.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double primaryExtinctionUnc() { int o = __offset(140); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double solarPhaseAngle() { int o = __offset(142); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double solarEqPhaseAngle() { int o = __offset(144); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Angle from the sun to the equatorial plane.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double solarDecAngle() { int o = __offset(146); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Shutter delay in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double shutterDelay() { int o = __offset(148); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor timing bias in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double timingBias() { int o = __offset(150); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(152); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(152, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 152, 1); }
  /**
   * Intensity of the target for IR observations, in kw/sr/um.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double intensity() { int o = __offset(154); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Background intensity for IR observations, in kw/sr/um.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double bgIntensity() { int o = __offset(156); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: PROVIDED_DATA1
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(158); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(158, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 158, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(160); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(160, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 160, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(162); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(162, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 162, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(164); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(166); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(166); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(166); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(168); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(168, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 168, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(170); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(170, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 170, 1); }
  /**
   * This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double zeroPtdUnc() { int o = __offset(172); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String eoobservationDetails() { int o = __offset(174); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eoobservationDetailsAsByteBuffer() { return __vector_as_bytebuffer(174, 1); }
  public ByteBuffer eoobservationDetailsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 174, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onOrbit() { int o = __offset(176); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onOrbitAsByteBuffer() { return __vector_as_bytebuffer(176, 1); }
  public ByteBuffer onOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 176, 1); }
  /**
   * The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte referenceFrame() { int o = __offset(178); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte senReferenceFrame() { int o = __offset(180); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Boolean indicating that the target object was in umbral eclipse at the time of this observation.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean umbra() { int o = __offset(182); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean penumbra() { int o = __offset(184); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(186); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(186, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 186, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(188); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(188, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 188, 1); }
  /**
   * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
   * Example: /// Example: OPTICAL
   * Constraints: No constraints specified.
   */
  public String type() { int o = __offset(190); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(190, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 190, 1); }

  public static int createEOObservation_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int obTimeOffset,
      double corrQuality,
      int idOnOrbitOffset,
      int idSensorOffset,
      int idSkyImageryOffset,
      int collectMethodOffset,
      int satNo,
      int taskIdOffset,
      int transactionIdOffset,
      int trackIdOffset,
      int obPositionOffset,
      int origObjectIdOffset,
      int origSensorIdOffset,
      boolean uct,
      double azimuth,
      double azimuthUnc,
      double azimuthBias,
      double azimuthRate,
      double elevation,
      double elevationUnc,
      double elevationBias,
      double elevationRate,
      double range,
      double rangeUnc,
      double rangeBias,
      double rangeRate,
      double rangeRateUnc,
      double ra,
      double raRate,
      double raUnc,
      double raBias,
      double declination,
      double declinationRate,
      double declinationUnc,
      double declinationBias,
      double losx,
      double losy,
      double losz,
      double losUnc,
      double losxvel,
      double losyvel,
      double loszvel,
      double senlat,
      double senlon,
      double senalt,
      double senx,
      double seny,
      double senz,
      double senvelx,
      double senvely,
      double senvelz,
      int senQuatOffset,
      int fovCount,
      double expDuration,
      double zeroptd,
      double netObjSig,
      double netObjSigUnc,
      double mag,
      double magUnc,
      double magNormRange,
      double geolat,
      double geolon,
      double geoalt,
      double georange,
      double skyBkgrnd,
      double primaryExtinction,
      double primaryExtinctionUnc,
      double solarPhaseAngle,
      double solarEqPhaseAngle,
      double solarDecAngle,
      double shutterDelay,
      double timingBias,
      int rawFileUriOffset,
      double intensity,
      double bgIntensity,
      int descriptorOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int tagsOffset,
      int createdAtOffset,
      int createdByOffset,
      double zeroPtdUnc,
      int eoobservationDetailsOffset,
      int onOrbitOffset,
      byte referenceFrame,
      byte senReferenceFrame,
      boolean umbra,
      boolean penumbra,
      int origNetworkOffset,
      int sourceDlOffset,
      int typeOffset) {
    builder.startTable(94);
    EOObservation_Full.addZeroPtdUnc(builder, zeroPtdUnc);
    EOObservation_Full.addBgIntensity(builder, bgIntensity);
    EOObservation_Full.addIntensity(builder, intensity);
    EOObservation_Full.addTimingBias(builder, timingBias);
    EOObservation_Full.addShutterDelay(builder, shutterDelay);
    EOObservation_Full.addSolarDecAngle(builder, solarDecAngle);
    EOObservation_Full.addSolarEqPhaseAngle(builder, solarEqPhaseAngle);
    EOObservation_Full.addSolarPhaseAngle(builder, solarPhaseAngle);
    EOObservation_Full.addPrimaryExtinctionUnc(builder, primaryExtinctionUnc);
    EOObservation_Full.addPrimaryExtinction(builder, primaryExtinction);
    EOObservation_Full.addSkyBkgrnd(builder, skyBkgrnd);
    EOObservation_Full.addGeorange(builder, georange);
    EOObservation_Full.addGeoalt(builder, geoalt);
    EOObservation_Full.addGeolon(builder, geolon);
    EOObservation_Full.addGeolat(builder, geolat);
    EOObservation_Full.addMagNormRange(builder, magNormRange);
    EOObservation_Full.addMagUnc(builder, magUnc);
    EOObservation_Full.addMag(builder, mag);
    EOObservation_Full.addNetObjSigUnc(builder, netObjSigUnc);
    EOObservation_Full.addNetObjSig(builder, netObjSig);
    EOObservation_Full.addZeroptd(builder, zeroptd);
    EOObservation_Full.addExpDuration(builder, expDuration);
    EOObservation_Full.addSenvelz(builder, senvelz);
    EOObservation_Full.addSenvely(builder, senvely);
    EOObservation_Full.addSenvelx(builder, senvelx);
    EOObservation_Full.addSenz(builder, senz);
    EOObservation_Full.addSeny(builder, seny);
    EOObservation_Full.addSenx(builder, senx);
    EOObservation_Full.addSenalt(builder, senalt);
    EOObservation_Full.addSenlon(builder, senlon);
    EOObservation_Full.addSenlat(builder, senlat);
    EOObservation_Full.addLoszvel(builder, loszvel);
    EOObservation_Full.addLosyvel(builder, losyvel);
    EOObservation_Full.addLosxvel(builder, losxvel);
    EOObservation_Full.addLosUnc(builder, losUnc);
    EOObservation_Full.addLosz(builder, losz);
    EOObservation_Full.addLosy(builder, losy);
    EOObservation_Full.addLosx(builder, losx);
    EOObservation_Full.addDeclinationBias(builder, declinationBias);
    EOObservation_Full.addDeclinationUnc(builder, declinationUnc);
    EOObservation_Full.addDeclinationRate(builder, declinationRate);
    EOObservation_Full.addDeclination(builder, declination);
    EOObservation_Full.addRaBias(builder, raBias);
    EOObservation_Full.addRaUnc(builder, raUnc);
    EOObservation_Full.addRaRate(builder, raRate);
    EOObservation_Full.addRa(builder, ra);
    EOObservation_Full.addRangeRateUnc(builder, rangeRateUnc);
    EOObservation_Full.addRangeRate(builder, rangeRate);
    EOObservation_Full.addRangeBias(builder, rangeBias);
    EOObservation_Full.addRangeUnc(builder, rangeUnc);
    EOObservation_Full.addRange(builder, range);
    EOObservation_Full.addElevationRate(builder, elevationRate);
    EOObservation_Full.addElevationBias(builder, elevationBias);
    EOObservation_Full.addElevationUnc(builder, elevationUnc);
    EOObservation_Full.addElevation(builder, elevation);
    EOObservation_Full.addAzimuthRate(builder, azimuthRate);
    EOObservation_Full.addAzimuthBias(builder, azimuthBias);
    EOObservation_Full.addAzimuthUnc(builder, azimuthUnc);
    EOObservation_Full.addAzimuth(builder, azimuth);
    EOObservation_Full.addCorrQuality(builder, corrQuality);
    EOObservation_Full.addType(builder, typeOffset);
    EOObservation_Full.addSourceDl(builder, sourceDlOffset);
    EOObservation_Full.addOrigNetwork(builder, origNetworkOffset);
    EOObservation_Full.addOnOrbit(builder, onOrbitOffset);
    EOObservation_Full.addEoobservationDetails(builder, eoobservationDetailsOffset);
    EOObservation_Full.addCreatedBy(builder, createdByOffset);
    EOObservation_Full.addCreatedAt(builder, createdAtOffset);
    EOObservation_Full.addTags(builder, tagsOffset);
    EOObservation_Full.addOrigin(builder, originOffset);
    EOObservation_Full.addSource(builder, sourceOffset);
    EOObservation_Full.addDescriptor(builder, descriptorOffset);
    EOObservation_Full.addRawFileUri(builder, rawFileUriOffset);
    EOObservation_Full.addFovCount(builder, fovCount);
    EOObservation_Full.addSenQuat(builder, senQuatOffset);
    EOObservation_Full.addOrigSensorId(builder, origSensorIdOffset);
    EOObservation_Full.addOrigObjectId(builder, origObjectIdOffset);
    EOObservation_Full.addObPosition(builder, obPositionOffset);
    EOObservation_Full.addTrackId(builder, trackIdOffset);
    EOObservation_Full.addTransactionId(builder, transactionIdOffset);
    EOObservation_Full.addTaskId(builder, taskIdOffset);
    EOObservation_Full.addSatNo(builder, satNo);
    EOObservation_Full.addCollectMethod(builder, collectMethodOffset);
    EOObservation_Full.addIdSkyImagery(builder, idSkyImageryOffset);
    EOObservation_Full.addIdSensor(builder, idSensorOffset);
    EOObservation_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    EOObservation_Full.addObTime(builder, obTimeOffset);
    EOObservation_Full.addClassificationMarking(builder, classificationMarkingOffset);
    EOObservation_Full.addId(builder, idOffset);
    EOObservation_Full.addPenumbra(builder, penumbra);
    EOObservation_Full.addUmbra(builder, umbra);
    EOObservation_Full.addSenReferenceFrame(builder, senReferenceFrame);
    EOObservation_Full.addReferenceFrame(builder, referenceFrame);
    EOObservation_Full.addDataMode(builder, dataMode);
    EOObservation_Full.addUct(builder, uct);
    return EOObservation_Full.endEOObservation_Full(builder);
  }

  public static void startEOObservation_Full(FlatBufferBuilder builder) { builder.startTable(94); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(2, obTimeOffset, 0); }
  public static void addCorrQuality(FlatBufferBuilder builder, double corrQuality) { builder.addDouble(3, corrQuality, 0.0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(4, idOnOrbitOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(5, idSensorOffset, 0); }
  public static void addIdSkyImagery(FlatBufferBuilder builder, int idSkyImageryOffset) { builder.addOffset(6, idSkyImageryOffset, 0); }
  public static void addCollectMethod(FlatBufferBuilder builder, int collectMethodOffset) { builder.addOffset(7, collectMethodOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(8, satNo, 0); }
  public static void addTaskId(FlatBufferBuilder builder, int taskIdOffset) { builder.addOffset(9, taskIdOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(10, transactionIdOffset, 0); }
  public static void addTrackId(FlatBufferBuilder builder, int trackIdOffset) { builder.addOffset(11, trackIdOffset, 0); }
  public static void addObPosition(FlatBufferBuilder builder, int obPositionOffset) { builder.addOffset(12, obPositionOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(13, origObjectIdOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(14, origSensorIdOffset, 0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(15, uct, false); }
  public static void addAzimuth(FlatBufferBuilder builder, double azimuth) { builder.addDouble(16, azimuth, 0.0); }
  public static void addAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.addDouble(17, azimuthUnc, 0.0); }
  public static void addAzimuthBias(FlatBufferBuilder builder, double azimuthBias) { builder.addDouble(18, azimuthBias, 0.0); }
  public static void addAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.addDouble(19, azimuthRate, 0.0); }
  public static void addElevation(FlatBufferBuilder builder, double elevation) { builder.addDouble(20, elevation, 0.0); }
  public static void addElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.addDouble(21, elevationUnc, 0.0); }
  public static void addElevationBias(FlatBufferBuilder builder, double elevationBias) { builder.addDouble(22, elevationBias, 0.0); }
  public static void addElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.addDouble(23, elevationRate, 0.0); }
  public static void addRange(FlatBufferBuilder builder, double range) { builder.addDouble(24, range, 0.0); }
  public static void addRangeUnc(FlatBufferBuilder builder, double rangeUnc) { builder.addDouble(25, rangeUnc, 0.0); }
  public static void addRangeBias(FlatBufferBuilder builder, double rangeBias) { builder.addDouble(26, rangeBias, 0.0); }
  public static void addRangeRate(FlatBufferBuilder builder, double rangeRate) { builder.addDouble(27, rangeRate, 0.0); }
  public static void addRangeRateUnc(FlatBufferBuilder builder, double rangeRateUnc) { builder.addDouble(28, rangeRateUnc, 0.0); }
  public static void addRa(FlatBufferBuilder builder, double ra) { builder.addDouble(29, ra, 0.0); }
  public static void addRaRate(FlatBufferBuilder builder, double raRate) { builder.addDouble(30, raRate, 0.0); }
  public static void addRaUnc(FlatBufferBuilder builder, double raUnc) { builder.addDouble(31, raUnc, 0.0); }
  public static void addRaBias(FlatBufferBuilder builder, double raBias) { builder.addDouble(32, raBias, 0.0); }
  public static void addDeclination(FlatBufferBuilder builder, double declination) { builder.addDouble(33, declination, 0.0); }
  public static void addDeclinationRate(FlatBufferBuilder builder, double declinationRate) { builder.addDouble(34, declinationRate, 0.0); }
  public static void addDeclinationUnc(FlatBufferBuilder builder, double declinationUnc) { builder.addDouble(35, declinationUnc, 0.0); }
  public static void addDeclinationBias(FlatBufferBuilder builder, double declinationBias) { builder.addDouble(36, declinationBias, 0.0); }
  public static void addLosx(FlatBufferBuilder builder, double losx) { builder.addDouble(37, losx, 0.0); }
  public static void addLosy(FlatBufferBuilder builder, double losy) { builder.addDouble(38, losy, 0.0); }
  public static void addLosz(FlatBufferBuilder builder, double losz) { builder.addDouble(39, losz, 0.0); }
  public static void addLosUnc(FlatBufferBuilder builder, double losUnc) { builder.addDouble(40, losUnc, 0.0); }
  public static void addLosxvel(FlatBufferBuilder builder, double losxvel) { builder.addDouble(41, losxvel, 0.0); }
  public static void addLosyvel(FlatBufferBuilder builder, double losyvel) { builder.addDouble(42, losyvel, 0.0); }
  public static void addLoszvel(FlatBufferBuilder builder, double loszvel) { builder.addDouble(43, loszvel, 0.0); }
  public static void addSenlat(FlatBufferBuilder builder, double senlat) { builder.addDouble(44, senlat, 0.0); }
  public static void addSenlon(FlatBufferBuilder builder, double senlon) { builder.addDouble(45, senlon, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(46, senalt, 0.0); }
  public static void addSenx(FlatBufferBuilder builder, double senx) { builder.addDouble(47, senx, 0.0); }
  public static void addSeny(FlatBufferBuilder builder, double seny) { builder.addDouble(48, seny, 0.0); }
  public static void addSenz(FlatBufferBuilder builder, double senz) { builder.addDouble(49, senz, 0.0); }
  public static void addSenvelx(FlatBufferBuilder builder, double senvelx) { builder.addDouble(50, senvelx, 0.0); }
  public static void addSenvely(FlatBufferBuilder builder, double senvely) { builder.addDouble(51, senvely, 0.0); }
  public static void addSenvelz(FlatBufferBuilder builder, double senvelz) { builder.addDouble(52, senvelz, 0.0); }
  public static void addSenQuat(FlatBufferBuilder builder, int senQuatOffset) { builder.addOffset(53, senQuatOffset, 0); }
  public static int createSenQuatVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSenQuatVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFovCount(FlatBufferBuilder builder, int fovCount) { builder.addInt(54, fovCount, 0); }
  public static void addExpDuration(FlatBufferBuilder builder, double expDuration) { builder.addDouble(55, expDuration, 0.0); }
  public static void addZeroptd(FlatBufferBuilder builder, double zeroptd) { builder.addDouble(56, zeroptd, 0.0); }
  public static void addNetObjSig(FlatBufferBuilder builder, double netObjSig) { builder.addDouble(57, netObjSig, 0.0); }
  public static void addNetObjSigUnc(FlatBufferBuilder builder, double netObjSigUnc) { builder.addDouble(58, netObjSigUnc, 0.0); }
  public static void addMag(FlatBufferBuilder builder, double mag) { builder.addDouble(59, mag, 0.0); }
  public static void addMagUnc(FlatBufferBuilder builder, double magUnc) { builder.addDouble(60, magUnc, 0.0); }
  public static void addMagNormRange(FlatBufferBuilder builder, double magNormRange) { builder.addDouble(61, magNormRange, 0.0); }
  public static void addGeolat(FlatBufferBuilder builder, double geolat) { builder.addDouble(62, geolat, 0.0); }
  public static void addGeolon(FlatBufferBuilder builder, double geolon) { builder.addDouble(63, geolon, 0.0); }
  public static void addGeoalt(FlatBufferBuilder builder, double geoalt) { builder.addDouble(64, geoalt, 0.0); }
  public static void addGeorange(FlatBufferBuilder builder, double georange) { builder.addDouble(65, georange, 0.0); }
  public static void addSkyBkgrnd(FlatBufferBuilder builder, double skyBkgrnd) { builder.addDouble(66, skyBkgrnd, 0.0); }
  public static void addPrimaryExtinction(FlatBufferBuilder builder, double primaryExtinction) { builder.addDouble(67, primaryExtinction, 0.0); }
  public static void addPrimaryExtinctionUnc(FlatBufferBuilder builder, double primaryExtinctionUnc) { builder.addDouble(68, primaryExtinctionUnc, 0.0); }
  public static void addSolarPhaseAngle(FlatBufferBuilder builder, double solarPhaseAngle) { builder.addDouble(69, solarPhaseAngle, 0.0); }
  public static void addSolarEqPhaseAngle(FlatBufferBuilder builder, double solarEqPhaseAngle) { builder.addDouble(70, solarEqPhaseAngle, 0.0); }
  public static void addSolarDecAngle(FlatBufferBuilder builder, double solarDecAngle) { builder.addDouble(71, solarDecAngle, 0.0); }
  public static void addShutterDelay(FlatBufferBuilder builder, double shutterDelay) { builder.addDouble(72, shutterDelay, 0.0); }
  public static void addTimingBias(FlatBufferBuilder builder, double timingBias) { builder.addDouble(73, timingBias, 0.0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(74, rawFileUriOffset, 0); }
  public static void addIntensity(FlatBufferBuilder builder, double intensity) { builder.addDouble(75, intensity, 0.0); }
  public static void addBgIntensity(FlatBufferBuilder builder, double bgIntensity) { builder.addDouble(76, bgIntensity, 0.0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(77, descriptorOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(78, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(79, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(80, dataMode, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(81, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(82, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(83, createdByOffset, 0); }
  public static void addZeroPtdUnc(FlatBufferBuilder builder, double zeroPtdUnc) { builder.addDouble(84, zeroPtdUnc, 0.0); }
  public static void addEoobservationDetails(FlatBufferBuilder builder, int eoobservationDetailsOffset) { builder.addOffset(85, eoobservationDetailsOffset, 0); }
  public static void addOnOrbit(FlatBufferBuilder builder, int onOrbitOffset) { builder.addOffset(86, onOrbitOffset, 0); }
  public static void addReferenceFrame(FlatBufferBuilder builder, byte referenceFrame) { builder.addByte(87, referenceFrame, 0); }
  public static void addSenReferenceFrame(FlatBufferBuilder builder, byte senReferenceFrame) { builder.addByte(88, senReferenceFrame, 0); }
  public static void addUmbra(FlatBufferBuilder builder, boolean umbra) { builder.addBoolean(89, umbra, false); }
  public static void addPenumbra(FlatBufferBuilder builder, boolean penumbra) { builder.addBoolean(90, penumbra, false); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(91, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(92, sourceDlOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(93, typeOffset, 0); }
  public static int endEOObservation_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEOObservation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EOOB"); }
  public static void finishSizePrefixedEOObservation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EOOB"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EOObservation_Full get(int j) { return get(new EOObservation_Full(), j); }
    public EOObservation_Full get(EOObservation_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

