// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Event Evolution is a unique service supporting the association of UDL records of various data types to a common event or activity. The associations may be a one time summary, aggregating sources of a past event, or of an ongoing activity that evolves over a period of time.
 */
@SuppressWarnings("unused")
public final class EventEvolution_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EventEvolution_Abridged getRootAsEventEvolution_Abridged(ByteBuffer _bb) { return getRootAsEventEvolution_Abridged(_bb, new EventEvolution_Abridged()); }
  public static EventEvolution_Abridged getRootAsEventEvolution_Abridged(ByteBuffer _bb, EventEvolution_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EventEvolution_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EVEN"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EventEvolution_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: EVENT_EVOL_ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * User-provided unique identifier of this activity or event. This ID should remain the same on subsequent updates in order to associate all records pertaining to the activity or event.
   * Example: /// Example: EVENT_ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String eventId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer eventIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The activity or event type associated with this record (e.g. BREAKUP, DIRECT FIRE, IED, LAUNCH, PROTEST, etc.). For Significant Activities, recommended but not constrained to, CAMEO.Manual.1.1b3 Chapter 6. Note that the evolution of an event may incorporate records of various types, for example, a LAUNCH event may evolve into a BREAKUP event.
   * Example: /// Example: PROTEST
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String category() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer categoryAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer categoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Summary or description of the activity or event.
   * Example: /// Example: Example summary of the event.
   * Constraints: Minimum length = 1, Maximum length = 4096
   */
  public String summary() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer summaryAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer summaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
   * Example: /// Example: 2021-12-02T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The actual or estimated start time of the activity or event, in ISO 8601 UTC format.
   * Example: /// Example: 2021-12-03T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The status of this activity or event.  (ACTIVE, CONCLUDED, UNKNOWN).
   * Example: /// Example: UNKNOWN
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String status() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the state/province in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
   * Example: /// Example: Colorado
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String geoAdminLevel1() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geoAdminLevel1AsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer geoAdminLevel1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example this may be the city/district in which a terrestrial event takes place, or with which the event is attributed for non-localized or non-terrestrial activity.
   * Example: /// Example: El Paso County
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String geoAdminLevel2() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geoAdminLevel2AsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer geoAdminLevel2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body.
   * Example: /// Example: Colorado Springs
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String geoAdminLevel3() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geoAdminLevel3AsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer geoAdminLevel3InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Flag indicating that this record is for the purpose of redacting one or more previously specified records from association with this activity or event.  If this flag is set then all records indicated in srcTyps/srcIds should be removed from event association.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean redact() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this activity or event. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['AIS', 'CONJUNCTION']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUIDs of the UDL data records that are related to the determination of this activity or event. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
   * Example: /// Example: ['SRC_ID_1', 'SRC_ID_2']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional description of the relationship between the records provided in the srcTyps/srcIds and the activity or event.
   * Example: /// Example: Description of relationship between srcTyps and srcIds
   * Constraints: Minimum length = 0, Maximum length = 2056
   */
  public String dataDescription() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dataDescriptionAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer dataDescriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String atext() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atextAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer atextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: No constraints specified.
   */
  public String agjson() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agjsonAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer agjsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Type of region as projected on the ground.
   * Example: /// Example: POLYGON
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String atype() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atypeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer atypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int andims() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 4326
   * Constraints: No constraints specified.
   */
  public int asrid() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * List of URLs to before/after images of this point of interest entity.
   * Example: /// Example: ['URL1', 'URL2']
   * Constraints: No constraints specified.
   */
  public String url(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int urlLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector urlVector() { return urlVector(new StringVector()); }
  public StringVector urlVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(48); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2021-12-02T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(60); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createEventEvolution_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int eventIdOffset,
      int categoryOffset,
      int summaryOffset,
      int startTimeOffset,
      int endTimeOffset,
      int statusOffset,
      int countryCodeOffset,
      int geoAdminLevel1Offset,
      int geoAdminLevel2Offset,
      int geoAdminLevel3Offset,
      boolean redact,
      int srcTypsOffset,
      int srcIdsOffset,
      int dataDescriptionOffset,
      int atextOffset,
      int agjsonOffset,
      int atypeOffset,
      int andims,
      int asrid,
      int urlOffset,
      int tagsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(29);
    EventEvolution_Abridged.addOrigNetwork(builder, origNetworkOffset);
    EventEvolution_Abridged.addOrigin(builder, originOffset);
    EventEvolution_Abridged.addSource(builder, sourceOffset);
    EventEvolution_Abridged.addCreatedBy(builder, createdByOffset);
    EventEvolution_Abridged.addCreatedAt(builder, createdAtOffset);
    EventEvolution_Abridged.addTags(builder, tagsOffset);
    EventEvolution_Abridged.addUrl(builder, urlOffset);
    EventEvolution_Abridged.addAsrid(builder, asrid);
    EventEvolution_Abridged.addAndims(builder, andims);
    EventEvolution_Abridged.addAtype(builder, atypeOffset);
    EventEvolution_Abridged.addAgjson(builder, agjsonOffset);
    EventEvolution_Abridged.addAtext(builder, atextOffset);
    EventEvolution_Abridged.addDataDescription(builder, dataDescriptionOffset);
    EventEvolution_Abridged.addSrcIds(builder, srcIdsOffset);
    EventEvolution_Abridged.addSrcTyps(builder, srcTypsOffset);
    EventEvolution_Abridged.addGeoAdminLevel3(builder, geoAdminLevel3Offset);
    EventEvolution_Abridged.addGeoAdminLevel2(builder, geoAdminLevel2Offset);
    EventEvolution_Abridged.addGeoAdminLevel1(builder, geoAdminLevel1Offset);
    EventEvolution_Abridged.addCountryCode(builder, countryCodeOffset);
    EventEvolution_Abridged.addStatus(builder, statusOffset);
    EventEvolution_Abridged.addEndTime(builder, endTimeOffset);
    EventEvolution_Abridged.addStartTime(builder, startTimeOffset);
    EventEvolution_Abridged.addSummary(builder, summaryOffset);
    EventEvolution_Abridged.addCategory(builder, categoryOffset);
    EventEvolution_Abridged.addEventId(builder, eventIdOffset);
    EventEvolution_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    EventEvolution_Abridged.addId(builder, idOffset);
    EventEvolution_Abridged.addDataMode(builder, dataMode);
    EventEvolution_Abridged.addRedact(builder, redact);
    return EventEvolution_Abridged.endEventEvolution_Abridged(builder);
  }

  public static void startEventEvolution_Abridged(FlatBufferBuilder builder) { builder.startTable(29); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addEventId(FlatBufferBuilder builder, int eventIdOffset) { builder.addOffset(2, eventIdOffset, 0); }
  public static void addCategory(FlatBufferBuilder builder, int categoryOffset) { builder.addOffset(3, categoryOffset, 0); }
  public static void addSummary(FlatBufferBuilder builder, int summaryOffset) { builder.addOffset(4, summaryOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(5, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(6, endTimeOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(7, statusOffset, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(8, countryCodeOffset, 0); }
  public static void addGeoAdminLevel1(FlatBufferBuilder builder, int geoAdminLevel1Offset) { builder.addOffset(9, geoAdminLevel1Offset, 0); }
  public static void addGeoAdminLevel2(FlatBufferBuilder builder, int geoAdminLevel2Offset) { builder.addOffset(10, geoAdminLevel2Offset, 0); }
  public static void addGeoAdminLevel3(FlatBufferBuilder builder, int geoAdminLevel3Offset) { builder.addOffset(11, geoAdminLevel3Offset, 0); }
  public static void addRedact(FlatBufferBuilder builder, boolean redact) { builder.addBoolean(12, redact, false); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(13, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(14, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDataDescription(FlatBufferBuilder builder, int dataDescriptionOffset) { builder.addOffset(15, dataDescriptionOffset, 0); }
  public static void addAtext(FlatBufferBuilder builder, int atextOffset) { builder.addOffset(16, atextOffset, 0); }
  public static void addAgjson(FlatBufferBuilder builder, int agjsonOffset) { builder.addOffset(17, agjsonOffset, 0); }
  public static void addAtype(FlatBufferBuilder builder, int atypeOffset) { builder.addOffset(18, atypeOffset, 0); }
  public static void addAndims(FlatBufferBuilder builder, int andims) { builder.addInt(19, andims, 0); }
  public static void addAsrid(FlatBufferBuilder builder, int asrid) { builder.addInt(20, asrid, 0); }
  public static void addUrl(FlatBufferBuilder builder, int urlOffset) { builder.addOffset(21, urlOffset, 0); }
  public static int createUrlVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUrlVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(22, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(23, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(24, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(25, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(26, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(27, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(28, dataMode, 0); }
  public static int endEventEvolution_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEventEvolution_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EVEN"); }
  public static void finishSizePrefixedEventEvolution_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EVEN"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EventEvolution_Abridged get(int j) { return get(new EventEvolution_Abridged(), j); }
    public EventEvolution_Abridged get(EventEvolution_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

