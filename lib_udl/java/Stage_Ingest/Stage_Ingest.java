// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
 */
@SuppressWarnings("unused")
public final class Stage_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Stage_Ingest getRootAsStage_Ingest(ByteBuffer _bb) { return getRootAsStage_Ingest(_bb, new Stage_Ingest()); }
  public static Stage_Ingest getRootAsStage_Ingest(ByteBuffer _bb, Stage_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Stage_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "STAG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Stage_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: STAGE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the launch vehicle record for this stage.
   * Example: /// Example: LAUNCHVEHICLE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idLaunchVehicle() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idLaunchVehicleAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idLaunchVehicleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Identifier of the Engine record for this stage.
   * Example: /// Example: ENGINE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idEngine() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEngineAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idEngineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The stage number of this launch stage.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int stageNumber() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
   * Example: /// Example: Electrostatic Ion
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String type() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * ID of the organization that manufactures this launch stage.
   * Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The number of the specified engines on this launch stage.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numEngines() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Stage length in meters.
   * Example: /// Example: 25.13
   * Constraints: No constraints specified.
   */
  public double length() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Stage maximum external diameter in meters.
   * Example: /// Example: 3.95
   * Constraints: No constraints specified.
   */
  public double diameter() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Stage gross mass in kg.
   * Example: /// Example: 9956.1
   * Constraints: No constraints specified.
   */
  public double mass() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Engine vernier or additional engine type.
   * Example: /// Example: vernier
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String vernier() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vernierAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer vernierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Number of vernier or additional engines.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int numVernier() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Thrust of the stage main engine at sea level in kN.
   * Example: /// Example: 733.4
   * Constraints: No constraints specified.
   */
  public double mainEngineThrustSeaLevel() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Thrust of the stage main engine in a vacuum in kN.
   * Example: /// Example: 733.4
   * Constraints: No constraints specified.
   */
  public double mainEngineThrustVacuum() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total thrust of the stage at sea level in kN.
   * Example: /// Example: 733.4
   * Constraints: No constraints specified.
   */
  public double thrustSeaLevel() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total thrust of the stage in a vacuum in kN.
   * Example: /// Example: 733.4
   * Constraints: No constraints specified.
   */
  public double thrustVacuum() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total burn time of the stage engines in seconds.
   * Example: /// Example: 256.3
   * Constraints: No constraints specified.
   */
  public double burnTime() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of burns for the stage engines.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numBurns() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Total burn time of the vernier or additional stage engines in seconds.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double vernierBurnTime() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total number of burns of the vernier or additional stage engines.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int vernierNumBurns() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Total thrust of one of the vernier or additional engines at sea level in kN.
   * Example: /// Example: 4.1
   * Constraints: No constraints specified.
   */
  public double vernierThrustSeaLevel() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total thrust of one of the vernier or additional engines in a vacuum in kN.
   * Example: /// Example: 3.2
   * Constraints: No constraints specified.
   */
  public double vernierThrustVacuum() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of launch stage elements used in this stage.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int numStageElements() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Boolean indicating if this launch stage is reusable.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean reusable() { int o = __offset(52); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating if this launch stage can be restarted.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean restartable() { int o = __offset(54); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Control thruster 1 type.
   * Example: /// Example: controlThruster1
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String controlThruster1() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer controlThruster1AsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer controlThruster1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Number of type control thruster 1.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numControlThruster1() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Control thruster 2 type.
   * Example: /// Example: controlThruster2
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String controlThruster2() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer controlThruster2AsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer controlThruster2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Number of type control thruster 2.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numControlThruster2() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of URLs of photos of the stage.
   * Example: /// Example: ['photoURL']
   * Constraints: No constraints specified.
   */
  public String photoUrls(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int photoUrlsLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector photoUrlsVector() { return photoUrlsVector(new StringVector()); }
  public StringVector photoUrlsVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Description/notes of the stage.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String notes() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Description/notes of the stage avionics.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String avionicsNotes() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer avionicsNotesAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer avionicsNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(82); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createStage_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int idLaunchVehicleOffset,
      int idEngineOffset,
      int classificationMarkingOffset,
      int stageNumber,
      int typeOffset,
      int manufacturerOrgIdOffset,
      int numEngines,
      double length,
      double diameter,
      double mass,
      int vernierOffset,
      int numVernier,
      double mainEngineThrustSeaLevel,
      double mainEngineThrustVacuum,
      double thrustSeaLevel,
      double thrustVacuum,
      double burnTime,
      int numBurns,
      double vernierBurnTime,
      int vernierNumBurns,
      double vernierThrustSeaLevel,
      double vernierThrustVacuum,
      int numStageElements,
      boolean reusable,
      boolean restartable,
      int controlThruster1Offset,
      int numControlThruster1,
      int controlThruster2Offset,
      int numControlThruster2,
      int photoUrlsOffset,
      int notesOffset,
      int avionicsNotesOffset,
      int tagsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(40);
    Stage_Ingest.addVernierThrustVacuum(builder, vernierThrustVacuum);
    Stage_Ingest.addVernierThrustSeaLevel(builder, vernierThrustSeaLevel);
    Stage_Ingest.addVernierBurnTime(builder, vernierBurnTime);
    Stage_Ingest.addBurnTime(builder, burnTime);
    Stage_Ingest.addThrustVacuum(builder, thrustVacuum);
    Stage_Ingest.addThrustSeaLevel(builder, thrustSeaLevel);
    Stage_Ingest.addMainEngineThrustVacuum(builder, mainEngineThrustVacuum);
    Stage_Ingest.addMainEngineThrustSeaLevel(builder, mainEngineThrustSeaLevel);
    Stage_Ingest.addMass(builder, mass);
    Stage_Ingest.addDiameter(builder, diameter);
    Stage_Ingest.addLength(builder, length);
    Stage_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Stage_Ingest.addOrigin(builder, originOffset);
    Stage_Ingest.addSource(builder, sourceOffset);
    Stage_Ingest.addCreatedBy(builder, createdByOffset);
    Stage_Ingest.addCreatedAt(builder, createdAtOffset);
    Stage_Ingest.addTags(builder, tagsOffset);
    Stage_Ingest.addAvionicsNotes(builder, avionicsNotesOffset);
    Stage_Ingest.addNotes(builder, notesOffset);
    Stage_Ingest.addPhotoUrls(builder, photoUrlsOffset);
    Stage_Ingest.addNumControlThruster2(builder, numControlThruster2);
    Stage_Ingest.addControlThruster2(builder, controlThruster2Offset);
    Stage_Ingest.addNumControlThruster1(builder, numControlThruster1);
    Stage_Ingest.addControlThruster1(builder, controlThruster1Offset);
    Stage_Ingest.addNumStageElements(builder, numStageElements);
    Stage_Ingest.addVernierNumBurns(builder, vernierNumBurns);
    Stage_Ingest.addNumBurns(builder, numBurns);
    Stage_Ingest.addNumVernier(builder, numVernier);
    Stage_Ingest.addVernier(builder, vernierOffset);
    Stage_Ingest.addNumEngines(builder, numEngines);
    Stage_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    Stage_Ingest.addType(builder, typeOffset);
    Stage_Ingest.addStageNumber(builder, stageNumber);
    Stage_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Stage_Ingest.addIdEngine(builder, idEngineOffset);
    Stage_Ingest.addIdLaunchVehicle(builder, idLaunchVehicleOffset);
    Stage_Ingest.addId(builder, idOffset);
    Stage_Ingest.addDataMode(builder, dataMode);
    Stage_Ingest.addRestartable(builder, restartable);
    Stage_Ingest.addReusable(builder, reusable);
    return Stage_Ingest.endStage_Ingest(builder);
  }

  public static void startStage_Ingest(FlatBufferBuilder builder) { builder.startTable(40); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdLaunchVehicle(FlatBufferBuilder builder, int idLaunchVehicleOffset) { builder.addOffset(1, idLaunchVehicleOffset, 0); }
  public static void addIdEngine(FlatBufferBuilder builder, int idEngineOffset) { builder.addOffset(2, idEngineOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(3, classificationMarkingOffset, 0); }
  public static void addStageNumber(FlatBufferBuilder builder, int stageNumber) { builder.addInt(4, stageNumber, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(5, typeOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(6, manufacturerOrgIdOffset, 0); }
  public static void addNumEngines(FlatBufferBuilder builder, int numEngines) { builder.addInt(7, numEngines, 0); }
  public static void addLength(FlatBufferBuilder builder, double length) { builder.addDouble(8, length, 0.0); }
  public static void addDiameter(FlatBufferBuilder builder, double diameter) { builder.addDouble(9, diameter, 0.0); }
  public static void addMass(FlatBufferBuilder builder, double mass) { builder.addDouble(10, mass, 0.0); }
  public static void addVernier(FlatBufferBuilder builder, int vernierOffset) { builder.addOffset(11, vernierOffset, 0); }
  public static void addNumVernier(FlatBufferBuilder builder, int numVernier) { builder.addInt(12, numVernier, 0); }
  public static void addMainEngineThrustSeaLevel(FlatBufferBuilder builder, double mainEngineThrustSeaLevel) { builder.addDouble(13, mainEngineThrustSeaLevel, 0.0); }
  public static void addMainEngineThrustVacuum(FlatBufferBuilder builder, double mainEngineThrustVacuum) { builder.addDouble(14, mainEngineThrustVacuum, 0.0); }
  public static void addThrustSeaLevel(FlatBufferBuilder builder, double thrustSeaLevel) { builder.addDouble(15, thrustSeaLevel, 0.0); }
  public static void addThrustVacuum(FlatBufferBuilder builder, double thrustVacuum) { builder.addDouble(16, thrustVacuum, 0.0); }
  public static void addBurnTime(FlatBufferBuilder builder, double burnTime) { builder.addDouble(17, burnTime, 0.0); }
  public static void addNumBurns(FlatBufferBuilder builder, int numBurns) { builder.addInt(18, numBurns, 0); }
  public static void addVernierBurnTime(FlatBufferBuilder builder, double vernierBurnTime) { builder.addDouble(19, vernierBurnTime, 0.0); }
  public static void addVernierNumBurns(FlatBufferBuilder builder, int vernierNumBurns) { builder.addInt(20, vernierNumBurns, 0); }
  public static void addVernierThrustSeaLevel(FlatBufferBuilder builder, double vernierThrustSeaLevel) { builder.addDouble(21, vernierThrustSeaLevel, 0.0); }
  public static void addVernierThrustVacuum(FlatBufferBuilder builder, double vernierThrustVacuum) { builder.addDouble(22, vernierThrustVacuum, 0.0); }
  public static void addNumStageElements(FlatBufferBuilder builder, int numStageElements) { builder.addInt(23, numStageElements, 0); }
  public static void addReusable(FlatBufferBuilder builder, boolean reusable) { builder.addBoolean(24, reusable, false); }
  public static void addRestartable(FlatBufferBuilder builder, boolean restartable) { builder.addBoolean(25, restartable, false); }
  public static void addControlThruster1(FlatBufferBuilder builder, int controlThruster1Offset) { builder.addOffset(26, controlThruster1Offset, 0); }
  public static void addNumControlThruster1(FlatBufferBuilder builder, int numControlThruster1) { builder.addInt(27, numControlThruster1, 0); }
  public static void addControlThruster2(FlatBufferBuilder builder, int controlThruster2Offset) { builder.addOffset(28, controlThruster2Offset, 0); }
  public static void addNumControlThruster2(FlatBufferBuilder builder, int numControlThruster2) { builder.addInt(29, numControlThruster2, 0); }
  public static void addPhotoUrls(FlatBufferBuilder builder, int photoUrlsOffset) { builder.addOffset(30, photoUrlsOffset, 0); }
  public static int createPhotoUrlsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPhotoUrlsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(31, notesOffset, 0); }
  public static void addAvionicsNotes(FlatBufferBuilder builder, int avionicsNotesOffset) { builder.addOffset(32, avionicsNotesOffset, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(33, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(34, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(35, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(36, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(37, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(38, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(39, dataMode, 0); }
  public static int endStage_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishStage_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "STAG"); }
  public static void finishSizePrefixedStage_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "STAG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Stage_Ingest get(int j) { return get(new Stage_Ingest(), j); }
    public Stage_Ingest get(Stage_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

