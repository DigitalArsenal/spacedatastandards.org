// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// OnOrbit objects of interest, which include information about the last known state of the object.
 */
@SuppressWarnings("unused")
public final class ObjectOfInterest_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ObjectOfInterest_Ingest getRootAsObjectOfInterest_Ingest(ByteBuffer _bb) { return getRootAsObjectOfInterest_Ingest(_bb, new ObjectOfInterest_Ingest()); }
  public static ObjectOfInterest_Ingest getRootAsObjectOfInterest_Ingest(ByteBuffer _bb, ObjectOfInterest_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ObjectOfInterest_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "OBJE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ObjectOfInterest_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: OBJECTOFINTEREST-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * UUID of the parent Onorbit record.
   * Example: /// Example: REF-ONORBIT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Unique name of the object of interest event.
   * Example: /// Example: Example_name
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String name() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Sensor tasking start time for object of interest.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String sensorTaskingStartTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sensorTaskingStartTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer sensorTaskingStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Sensor tasking stop time for object of interest.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String sensorTaskingStopTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sensorTaskingStopTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer sensorTaskingStopTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Priority of the object of interest as an integer (1=highest priority).
   * Example: /// Example: 7
   * Constraints: No constraints specified.
   */
  public int priority() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
   * Example: /// Example: OPEN
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String status() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Time of last status change of the object of interest event.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String statusDate() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusDateAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer statusDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Description of the object of interest event.
   * Example: /// Example: Example description
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String description() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Last reported observation time in ISO 8601 UTC time, with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String lastObTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastObTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer lastObTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String missedObTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missedObTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer missedObTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Possible delta V applications for the object of interest, in km/sec.
   * Example: /// Example: [1.1, 2.2, 3.3]
   * Constraints: No constraints specified.
   */
  public String deltaVs(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int deltaVsLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector deltaVsVector() { return deltaVsVector(new StringVector()); }
  public StringVector deltaVsVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Possible delta time applications for the object of interest, in seconds.
   * Example: /// Example: [1.1, 2.2, 3.3]
   * Constraints: No constraints specified.
   */
  public String deltaTs(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int deltaTsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector deltaTsVector() { return deltaTsVector(new StringVector()); }
  public StringVector deltaTsVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String svEpoch() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer svEpochAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer svEpochInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Last reported x position of the object in km, in J2000 coordinates.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double x() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported y position of the object in km, in J2000 coordinates.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double y() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported z position of the object in km, in J2000 coordinates.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double z() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported x velocity of the object in km/sec, in J2000 coordinates.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double xvel() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported y velocity of the object in km/sec, in J2000 coordinates.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double yvel() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported z velocity of the object in km/sec, in J2000 coordinates.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double zvel() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String elsetEpoch() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer elsetEpochAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer elsetEpochInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double meanMotion() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double eccentricity() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double inclination() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double raan() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double argOfPerigee() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double meanAnomaly() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int revNo() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double bStar() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double meanMotionDot() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double meanMotionDdot() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double semiMajorAxis() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double period() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double apogee() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
   * Example: /// Example: 123.4
   * Constraints: No constraints specified.
   */
  public double perigee() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
   * Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
   * Constraints: No constraints specified.
   */
  public String affectedObjects(int j) { int o = __offset(78); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int affectedObjectsLength() { int o = __offset(78); return o != 0 ? __vector_len(o) : 0; }
  public StringVector affectedObjectsVector() { return affectedObjectsVector(new StringVector()); }
  public StringVector affectedObjectsVector(StringVector obj) { int o = __offset(78); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(90); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createObjectOfInterest_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int satNo,
      int nameOffset,
      int sensorTaskingStartTimeOffset,
      int sensorTaskingStopTimeOffset,
      int priority,
      int statusOffset,
      int statusDateOffset,
      int descriptionOffset,
      int lastObTimeOffset,
      int missedObTimeOffset,
      int deltaVsOffset,
      int deltaTsOffset,
      int svEpochOffset,
      double x,
      double y,
      double z,
      double xvel,
      double yvel,
      double zvel,
      int elsetEpochOffset,
      double meanMotion,
      double eccentricity,
      double inclination,
      double raan,
      double argOfPerigee,
      double meanAnomaly,
      int revNo,
      double bStar,
      double meanMotionDot,
      double meanMotionDdot,
      double semiMajorAxis,
      double period,
      double apogee,
      double perigee,
      int affectedObjectsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(44);
    ObjectOfInterest_Ingest.addPerigee(builder, perigee);
    ObjectOfInterest_Ingest.addApogee(builder, apogee);
    ObjectOfInterest_Ingest.addPeriod(builder, period);
    ObjectOfInterest_Ingest.addSemiMajorAxis(builder, semiMajorAxis);
    ObjectOfInterest_Ingest.addMeanMotionDdot(builder, meanMotionDdot);
    ObjectOfInterest_Ingest.addMeanMotionDot(builder, meanMotionDot);
    ObjectOfInterest_Ingest.addBStar(builder, bStar);
    ObjectOfInterest_Ingest.addMeanAnomaly(builder, meanAnomaly);
    ObjectOfInterest_Ingest.addArgOfPerigee(builder, argOfPerigee);
    ObjectOfInterest_Ingest.addRaan(builder, raan);
    ObjectOfInterest_Ingest.addInclination(builder, inclination);
    ObjectOfInterest_Ingest.addEccentricity(builder, eccentricity);
    ObjectOfInterest_Ingest.addMeanMotion(builder, meanMotion);
    ObjectOfInterest_Ingest.addZvel(builder, zvel);
    ObjectOfInterest_Ingest.addYvel(builder, yvel);
    ObjectOfInterest_Ingest.addXvel(builder, xvel);
    ObjectOfInterest_Ingest.addZ(builder, z);
    ObjectOfInterest_Ingest.addY(builder, y);
    ObjectOfInterest_Ingest.addX(builder, x);
    ObjectOfInterest_Ingest.addOrigNetwork(builder, origNetworkOffset);
    ObjectOfInterest_Ingest.addOrigin(builder, originOffset);
    ObjectOfInterest_Ingest.addSource(builder, sourceOffset);
    ObjectOfInterest_Ingest.addCreatedBy(builder, createdByOffset);
    ObjectOfInterest_Ingest.addCreatedAt(builder, createdAtOffset);
    ObjectOfInterest_Ingest.addAffectedObjects(builder, affectedObjectsOffset);
    ObjectOfInterest_Ingest.addRevNo(builder, revNo);
    ObjectOfInterest_Ingest.addElsetEpoch(builder, elsetEpochOffset);
    ObjectOfInterest_Ingest.addSvEpoch(builder, svEpochOffset);
    ObjectOfInterest_Ingest.addDeltaTs(builder, deltaTsOffset);
    ObjectOfInterest_Ingest.addDeltaVs(builder, deltaVsOffset);
    ObjectOfInterest_Ingest.addMissedObTime(builder, missedObTimeOffset);
    ObjectOfInterest_Ingest.addLastObTime(builder, lastObTimeOffset);
    ObjectOfInterest_Ingest.addDescription(builder, descriptionOffset);
    ObjectOfInterest_Ingest.addStatusDate(builder, statusDateOffset);
    ObjectOfInterest_Ingest.addStatus(builder, statusOffset);
    ObjectOfInterest_Ingest.addPriority(builder, priority);
    ObjectOfInterest_Ingest.addSensorTaskingStopTime(builder, sensorTaskingStopTimeOffset);
    ObjectOfInterest_Ingest.addSensorTaskingStartTime(builder, sensorTaskingStartTimeOffset);
    ObjectOfInterest_Ingest.addName(builder, nameOffset);
    ObjectOfInterest_Ingest.addSatNo(builder, satNo);
    ObjectOfInterest_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    ObjectOfInterest_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    ObjectOfInterest_Ingest.addId(builder, idOffset);
    ObjectOfInterest_Ingest.addDataMode(builder, dataMode);
    return ObjectOfInterest_Ingest.endObjectOfInterest_Ingest(builder);
  }

  public static void startObjectOfInterest_Ingest(FlatBufferBuilder builder) { builder.startTable(44); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(3, satNo, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(4, nameOffset, 0); }
  public static void addSensorTaskingStartTime(FlatBufferBuilder builder, int sensorTaskingStartTimeOffset) { builder.addOffset(5, sensorTaskingStartTimeOffset, 0); }
  public static void addSensorTaskingStopTime(FlatBufferBuilder builder, int sensorTaskingStopTimeOffset) { builder.addOffset(6, sensorTaskingStopTimeOffset, 0); }
  public static void addPriority(FlatBufferBuilder builder, int priority) { builder.addInt(7, priority, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(8, statusOffset, 0); }
  public static void addStatusDate(FlatBufferBuilder builder, int statusDateOffset) { builder.addOffset(9, statusDateOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(10, descriptionOffset, 0); }
  public static void addLastObTime(FlatBufferBuilder builder, int lastObTimeOffset) { builder.addOffset(11, lastObTimeOffset, 0); }
  public static void addMissedObTime(FlatBufferBuilder builder, int missedObTimeOffset) { builder.addOffset(12, missedObTimeOffset, 0); }
  public static void addDeltaVs(FlatBufferBuilder builder, int deltaVsOffset) { builder.addOffset(13, deltaVsOffset, 0); }
  public static int createDeltaVsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDeltaVsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDeltaTs(FlatBufferBuilder builder, int deltaTsOffset) { builder.addOffset(14, deltaTsOffset, 0); }
  public static int createDeltaTsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDeltaTsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSvEpoch(FlatBufferBuilder builder, int svEpochOffset) { builder.addOffset(15, svEpochOffset, 0); }
  public static void addX(FlatBufferBuilder builder, double x) { builder.addDouble(16, x, 0.0); }
  public static void addY(FlatBufferBuilder builder, double y) { builder.addDouble(17, y, 0.0); }
  public static void addZ(FlatBufferBuilder builder, double z) { builder.addDouble(18, z, 0.0); }
  public static void addXvel(FlatBufferBuilder builder, double xvel) { builder.addDouble(19, xvel, 0.0); }
  public static void addYvel(FlatBufferBuilder builder, double yvel) { builder.addDouble(20, yvel, 0.0); }
  public static void addZvel(FlatBufferBuilder builder, double zvel) { builder.addDouble(21, zvel, 0.0); }
  public static void addElsetEpoch(FlatBufferBuilder builder, int elsetEpochOffset) { builder.addOffset(22, elsetEpochOffset, 0); }
  public static void addMeanMotion(FlatBufferBuilder builder, double meanMotion) { builder.addDouble(23, meanMotion, 0.0); }
  public static void addEccentricity(FlatBufferBuilder builder, double eccentricity) { builder.addDouble(24, eccentricity, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double inclination) { builder.addDouble(25, inclination, 0.0); }
  public static void addRaan(FlatBufferBuilder builder, double raan) { builder.addDouble(26, raan, 0.0); }
  public static void addArgOfPerigee(FlatBufferBuilder builder, double argOfPerigee) { builder.addDouble(27, argOfPerigee, 0.0); }
  public static void addMeanAnomaly(FlatBufferBuilder builder, double meanAnomaly) { builder.addDouble(28, meanAnomaly, 0.0); }
  public static void addRevNo(FlatBufferBuilder builder, int revNo) { builder.addInt(29, revNo, 0); }
  public static void addBStar(FlatBufferBuilder builder, double bStar) { builder.addDouble(30, bStar, 0.0); }
  public static void addMeanMotionDot(FlatBufferBuilder builder, double meanMotionDot) { builder.addDouble(31, meanMotionDot, 0.0); }
  public static void addMeanMotionDdot(FlatBufferBuilder builder, double meanMotionDdot) { builder.addDouble(32, meanMotionDdot, 0.0); }
  public static void addSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.addDouble(33, semiMajorAxis, 0.0); }
  public static void addPeriod(FlatBufferBuilder builder, double period) { builder.addDouble(34, period, 0.0); }
  public static void addApogee(FlatBufferBuilder builder, double apogee) { builder.addDouble(35, apogee, 0.0); }
  public static void addPerigee(FlatBufferBuilder builder, double perigee) { builder.addDouble(36, perigee, 0.0); }
  public static void addAffectedObjects(FlatBufferBuilder builder, int affectedObjectsOffset) { builder.addOffset(37, affectedObjectsOffset, 0); }
  public static int createAffectedObjectsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAffectedObjectsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(38, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(39, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(40, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(41, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(42, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(43, dataMode, 0); }
  public static int endObjectOfInterest_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishObjectOfInterest_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "OBJE"); }
  public static void finishSizePrefixedObjectOfInterest_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "OBJE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ObjectOfInterest_Ingest get(int j) { return get(new ObjectOfInterest_Ingest(), j); }
    public ObjectOfInterest_Ingest get(ObjectOfInterest_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

