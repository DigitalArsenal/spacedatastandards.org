// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Details for a navigation payload from  Seradata.
 */
@SuppressWarnings("unused")
public final class SeradataNavigation_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SeradataNavigation_Ingest getRootAsSeradataNavigation_Ingest(ByteBuffer _bb) { return getRootAsSeradataNavigation_Ingest(_bb, new SeradataNavigation_Ingest()); }
  public static SeradataNavigation_Ingest getRootAsSeradataNavigation_Ingest(ByteBuffer _bb, SeradataNavigation_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SeradataNavigation_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SERA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SeradataNavigation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SERADATANAVIGATION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * UUID of the parent Navigation record.
   * Example: /// Example: idNavigation
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idNavigation() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idNavigationAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idNavigationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
   * Example: /// Example: spacecraftId
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String spacecraftId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer spacecraftIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer spacecraftIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Hosted for company/Organization Id.
   * Example: /// Example: hostedForCompanyOrgId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String hostedForCompanyOrgId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hostedForCompanyOrgIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer hostedForCompanyOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Manufacturer Organization Id.
   * Example: /// Example: manufacturerOrgId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Navigation payload type, e.g. WAAS, GAGAN, etc.
   * Example: /// Example: WAAS
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String payloadType() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer payloadTypeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer payloadTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Modes of operation.
   * Example: /// Example: Military
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String modes() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modesAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer modesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Frequency for this payload.
   * Example: /// Example: 1234
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String modeFrequency() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modeFrequencyAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer modeFrequencyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Location accuracy in meters.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double locationAccuracy() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
   * Example: /// Example: partnerSpacecraftId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String partnerSpacecraftId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer partnerSpacecraftIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer partnerSpacecraftIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Area of coverage, e.g. Worldwide, India, etc.
   * Example: /// Example: Worldwide
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String areaCoverage() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer areaCoverageAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer areaCoverageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Payload notes.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String notes() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Sensor name from Seradata, e.g. WAAS GEO-5, etc.
   * Example: /// Example: WAAS GEO-5
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String name() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
   * Example: /// Example: Rubidium
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String clockType() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clockTypeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer clockTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(44); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createSeradataNavigation_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idNavigationOffset,
      int spacecraftIdOffset,
      int hostedForCompanyOrgIdOffset,
      int manufacturerOrgIdOffset,
      int payloadTypeOffset,
      int modesOffset,
      int modeFrequencyOffset,
      double locationAccuracy,
      int partnerSpacecraftIdOffset,
      int areaCoverageOffset,
      int notesOffset,
      int nameOffset,
      int clockTypeOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(21);
    SeradataNavigation_Ingest.addLocationAccuracy(builder, locationAccuracy);
    SeradataNavigation_Ingest.addOrigNetwork(builder, origNetworkOffset);
    SeradataNavigation_Ingest.addOrigin(builder, originOffset);
    SeradataNavigation_Ingest.addSource(builder, sourceOffset);
    SeradataNavigation_Ingest.addCreatedBy(builder, createdByOffset);
    SeradataNavigation_Ingest.addCreatedAt(builder, createdAtOffset);
    SeradataNavigation_Ingest.addClockType(builder, clockTypeOffset);
    SeradataNavigation_Ingest.addName(builder, nameOffset);
    SeradataNavigation_Ingest.addNotes(builder, notesOffset);
    SeradataNavigation_Ingest.addAreaCoverage(builder, areaCoverageOffset);
    SeradataNavigation_Ingest.addPartnerSpacecraftId(builder, partnerSpacecraftIdOffset);
    SeradataNavigation_Ingest.addModeFrequency(builder, modeFrequencyOffset);
    SeradataNavigation_Ingest.addModes(builder, modesOffset);
    SeradataNavigation_Ingest.addPayloadType(builder, payloadTypeOffset);
    SeradataNavigation_Ingest.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    SeradataNavigation_Ingest.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
    SeradataNavigation_Ingest.addSpacecraftId(builder, spacecraftIdOffset);
    SeradataNavigation_Ingest.addIdNavigation(builder, idNavigationOffset);
    SeradataNavigation_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    SeradataNavigation_Ingest.addId(builder, idOffset);
    SeradataNavigation_Ingest.addDataMode(builder, dataMode);
    return SeradataNavigation_Ingest.endSeradataNavigation_Ingest(builder);
  }

  public static void startSeradataNavigation_Ingest(FlatBufferBuilder builder) { builder.startTable(21); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdNavigation(FlatBufferBuilder builder, int idNavigationOffset) { builder.addOffset(2, idNavigationOffset, 0); }
  public static void addSpacecraftId(FlatBufferBuilder builder, int spacecraftIdOffset) { builder.addOffset(3, spacecraftIdOffset, 0); }
  public static void addHostedForCompanyOrgId(FlatBufferBuilder builder, int hostedForCompanyOrgIdOffset) { builder.addOffset(4, hostedForCompanyOrgIdOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(5, manufacturerOrgIdOffset, 0); }
  public static void addPayloadType(FlatBufferBuilder builder, int payloadTypeOffset) { builder.addOffset(6, payloadTypeOffset, 0); }
  public static void addModes(FlatBufferBuilder builder, int modesOffset) { builder.addOffset(7, modesOffset, 0); }
  public static void addModeFrequency(FlatBufferBuilder builder, int modeFrequencyOffset) { builder.addOffset(8, modeFrequencyOffset, 0); }
  public static void addLocationAccuracy(FlatBufferBuilder builder, double locationAccuracy) { builder.addDouble(9, locationAccuracy, 0.0); }
  public static void addPartnerSpacecraftId(FlatBufferBuilder builder, int partnerSpacecraftIdOffset) { builder.addOffset(10, partnerSpacecraftIdOffset, 0); }
  public static void addAreaCoverage(FlatBufferBuilder builder, int areaCoverageOffset) { builder.addOffset(11, areaCoverageOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(12, notesOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(13, nameOffset, 0); }
  public static void addClockType(FlatBufferBuilder builder, int clockTypeOffset) { builder.addOffset(14, clockTypeOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(15, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(16, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(17, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(18, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(19, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(20, dataMode, 0); }
  public static int endSeradataNavigation_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSeradataNavigation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SERA"); }
  public static void finishSizePrefixedSeradataNavigation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SERA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SeradataNavigation_Ingest get(int j) { return get(new SeradataNavigation_Ingest(), j); }
    public SeradataNavigation_Ingest get(SeradataNavigation_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

