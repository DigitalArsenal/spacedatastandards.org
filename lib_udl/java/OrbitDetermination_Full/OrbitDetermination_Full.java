// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
 */
@SuppressWarnings("unused")
public final class OrbitDetermination_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OrbitDetermination_Full getRootAsOrbitDetermination_Full(ByteBuffer _bb) { return getRootAsOrbitDetermination_Full(_bb, new OrbitDetermination_Full()); }
  public static OrbitDetermination_Full getRootAsOrbitDetermination_Full(ByteBuffer _bb, OrbitDetermination_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OrbitDetermination_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ORBI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OrbitDetermination_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
   * Example: /// Example: 2023-08-28T11:20:21.247192Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
   * Example: /// Example: 2023-08-28T15:20:21.247192Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
   * Example: /// Example: 54741
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 54741
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
   * Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String aprioriIdElset() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aprioriIdElsetAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer aprioriIdElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String aprioriElset() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aprioriElsetAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer aprioriElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
   * Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String aprioriIdStateVector() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aprioriIdStateVectorAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer aprioriIdStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String aprioriStateVector() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aprioriStateVectorAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer aprioriStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Flag indicating whether this is an initial orbit determination.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean initialOd() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
   * Example: /// Example: 2023-08-28T11:20:21.247192Z
   * Constraints: No constraints specified.
   */
  public String lastObStart() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastObStartAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer lastObStartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
   * Example: /// Example: 2023-08-28T11:20:21.247192Z
   * Constraints: No constraints specified.
   */
  public String lastObEnd() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastObEndAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer lastObEndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The time span used for the OD of the object, in days.
   * Example: /// Example: 3.5
   * Constraints: No constraints specified.
   */
  public double timeSpan() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
   * Example: /// Example: 2023-08-28T11:20:21.247192Z
   * Constraints: No constraints specified.
   */
  public String effectiveFrom() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effectiveFromAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer effectiveFromInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
   * Example: /// Example: 2023-08-30T08:15:00.123456Z
   * Constraints: No constraints specified.
   */
  public String effectiveUntil() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effectiveUntilAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer effectiveUntilInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
   * Example: /// Example: 0.991
   * Constraints: No constraints specified.
   */
  public double wrms() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
   * Example: /// Example: 1.02
   * Constraints: No constraints specified.
   */
  public double previousWrms() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
   * Example: /// Example: 0.985
   * Constraints: No constraints specified.
   */
  public double firstPassWrms() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
   * Example: /// Example: 0.975
   * Constraints: No constraints specified.
   */
  public double bestPassWrms() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Error growth rate of the OD solution in kilometers per day.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double errorGrowthRate() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double edr() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
   * Example: /// Example: BLS
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String method() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer methodAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer methodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
   * Example: /// Example: ASW
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String methodSource() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer methodSourceAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer methodSourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * The fit span, in days, used in a Batch Least Squares (BLS) OD.
   * Example: /// Example: 0.6
   * Constraints: No constraints specified.
   */
  public double fitSpan() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating whether the ballistic coefficient was estimated during this OD solution.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean ballisticCoeffEst() { int o = __offset(56); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Model used to estimate the ballistic coefficient.
   * Example: /// Example: GaussMarkov
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String ballisticCoeffModel() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ballisticCoeffModelAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer ballisticCoeffModelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Flag indicating whether the AGOM was estimated during this OD solution.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean agomEst() { int o = __offset(60); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Model used to estimate the AGOM.
   * Example: /// Example: RandomWalk
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String agomModel() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agomModelAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer agomModelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
   * Example: /// Example: 0.001
   * Constraints: No constraints specified.
   */
  public double rmsConvergenceCriteria() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of iterations taken for the algorithm to converge on an OD solution.
   * Example: /// Example: 8
   * Constraints: No constraints specified.
   */
  public int numIterations() { int o = __offset(66); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
   * Example: /// Example: ['EO', 'RADAR']
   * Constraints: No constraints specified.
   */
  public String acceptedObTyps(int j) { int o = __offset(68); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int acceptedObTypsLength() { int o = __offset(68); return o != 0 ? __vector_len(o) : 0; }
  public StringVector acceptedObTypsVector() { return acceptedObTypsVector(new StringVector()); }
  public StringVector acceptedObTypsVector(StringVector obj) { int o = __offset(68); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
   * Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
   * Constraints: No constraints specified.
   */
  public String acceptedObIds(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int acceptedObIdsLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector acceptedObIdsVector() { return acceptedObIdsVector(new StringVector()); }
  public StringVector acceptedObIdsVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
   * Example: /// Example: ['DOA', 'RF']
   * Constraints: No constraints specified.
   */
  public String rejectedObTyps(int j) { int o = __offset(72); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rejectedObTypsLength() { int o = __offset(72); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rejectedObTypsVector() { return rejectedObTypsVector(new StringVector()); }
  public StringVector rejectedObTypsVector(StringVector obj) { int o = __offset(72); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
   * Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
   * Constraints: No constraints specified.
   */
  public String rejectedObIds(int j) { int o = __offset(74); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rejectedObIdsLength() { int o = __offset(74); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rejectedObIdsVector() { return rejectedObIdsVector(new StringVector()); }
  public StringVector rejectedObIdsVector(StringVector obj) { int o = __offset(74); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
   * Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
   * Constraints: No constraints specified.
   */
  public String sensorIds(int j) { int o = __offset(76); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sensorIdsLength() { int o = __offset(76); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sensorIdsVector() { return sensorIdsVector(new StringVector()); }
  public StringVector sensorIdsVector(StringVector obj) { int o = __offset(76); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(90); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onOrbit() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onOrbitAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer onOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }

  public static int createOrbitDetermination_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int startTimeOffset,
      int endTimeOffset,
      int idOnOrbitOffset,
      int origObjectIdOffset,
      int satNo,
      int aprioriIdElsetOffset,
      int aprioriElsetOffset,
      int aprioriIdStateVectorOffset,
      int aprioriStateVectorOffset,
      boolean initialOd,
      int lastObStartOffset,
      int lastObEndOffset,
      double timeSpan,
      int effectiveFromOffset,
      int effectiveUntilOffset,
      double wrms,
      double previousWrms,
      double firstPassWrms,
      double bestPassWrms,
      double errorGrowthRate,
      double edr,
      int methodOffset,
      int methodSourceOffset,
      double fitSpan,
      boolean ballisticCoeffEst,
      int ballisticCoeffModelOffset,
      boolean agomEst,
      int agomModelOffset,
      double rmsConvergenceCriteria,
      int numIterations,
      int acceptedObTypsOffset,
      int acceptedObIdsOffset,
      int rejectedObTypsOffset,
      int rejectedObIdsOffset,
      int sensorIdsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int onOrbitOffset) {
    builder.startTable(45);
    OrbitDetermination_Full.addRmsConvergenceCriteria(builder, rmsConvergenceCriteria);
    OrbitDetermination_Full.addFitSpan(builder, fitSpan);
    OrbitDetermination_Full.addEdr(builder, edr);
    OrbitDetermination_Full.addErrorGrowthRate(builder, errorGrowthRate);
    OrbitDetermination_Full.addBestPassWrms(builder, bestPassWrms);
    OrbitDetermination_Full.addFirstPassWrms(builder, firstPassWrms);
    OrbitDetermination_Full.addPreviousWrms(builder, previousWrms);
    OrbitDetermination_Full.addWrms(builder, wrms);
    OrbitDetermination_Full.addTimeSpan(builder, timeSpan);
    OrbitDetermination_Full.addOnOrbit(builder, onOrbitOffset);
    OrbitDetermination_Full.addOrigNetwork(builder, origNetworkOffset);
    OrbitDetermination_Full.addOrigin(builder, originOffset);
    OrbitDetermination_Full.addSource(builder, sourceOffset);
    OrbitDetermination_Full.addSourceDl(builder, sourceDlOffset);
    OrbitDetermination_Full.addCreatedBy(builder, createdByOffset);
    OrbitDetermination_Full.addCreatedAt(builder, createdAtOffset);
    OrbitDetermination_Full.addSensorIds(builder, sensorIdsOffset);
    OrbitDetermination_Full.addRejectedObIds(builder, rejectedObIdsOffset);
    OrbitDetermination_Full.addRejectedObTyps(builder, rejectedObTypsOffset);
    OrbitDetermination_Full.addAcceptedObIds(builder, acceptedObIdsOffset);
    OrbitDetermination_Full.addAcceptedObTyps(builder, acceptedObTypsOffset);
    OrbitDetermination_Full.addNumIterations(builder, numIterations);
    OrbitDetermination_Full.addAgomModel(builder, agomModelOffset);
    OrbitDetermination_Full.addBallisticCoeffModel(builder, ballisticCoeffModelOffset);
    OrbitDetermination_Full.addMethodSource(builder, methodSourceOffset);
    OrbitDetermination_Full.addMethod(builder, methodOffset);
    OrbitDetermination_Full.addEffectiveUntil(builder, effectiveUntilOffset);
    OrbitDetermination_Full.addEffectiveFrom(builder, effectiveFromOffset);
    OrbitDetermination_Full.addLastObEnd(builder, lastObEndOffset);
    OrbitDetermination_Full.addLastObStart(builder, lastObStartOffset);
    OrbitDetermination_Full.addAprioriStateVector(builder, aprioriStateVectorOffset);
    OrbitDetermination_Full.addAprioriIdStateVector(builder, aprioriIdStateVectorOffset);
    OrbitDetermination_Full.addAprioriElset(builder, aprioriElsetOffset);
    OrbitDetermination_Full.addAprioriIdElset(builder, aprioriIdElsetOffset);
    OrbitDetermination_Full.addSatNo(builder, satNo);
    OrbitDetermination_Full.addOrigObjectId(builder, origObjectIdOffset);
    OrbitDetermination_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    OrbitDetermination_Full.addEndTime(builder, endTimeOffset);
    OrbitDetermination_Full.addStartTime(builder, startTimeOffset);
    OrbitDetermination_Full.addClassificationMarking(builder, classificationMarkingOffset);
    OrbitDetermination_Full.addId(builder, idOffset);
    OrbitDetermination_Full.addDataMode(builder, dataMode);
    OrbitDetermination_Full.addAgomEst(builder, agomEst);
    OrbitDetermination_Full.addBallisticCoeffEst(builder, ballisticCoeffEst);
    OrbitDetermination_Full.addInitialOd(builder, initialOd);
    return OrbitDetermination_Full.endOrbitDetermination_Full(builder);
  }

  public static void startOrbitDetermination_Full(FlatBufferBuilder builder) { builder.startTable(45); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(2, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(3, endTimeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(4, idOnOrbitOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(5, origObjectIdOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(6, satNo, 0); }
  public static void addAprioriIdElset(FlatBufferBuilder builder, int aprioriIdElsetOffset) { builder.addOffset(7, aprioriIdElsetOffset, 0); }
  public static void addAprioriElset(FlatBufferBuilder builder, int aprioriElsetOffset) { builder.addOffset(8, aprioriElsetOffset, 0); }
  public static void addAprioriIdStateVector(FlatBufferBuilder builder, int aprioriIdStateVectorOffset) { builder.addOffset(9, aprioriIdStateVectorOffset, 0); }
  public static void addAprioriStateVector(FlatBufferBuilder builder, int aprioriStateVectorOffset) { builder.addOffset(10, aprioriStateVectorOffset, 0); }
  public static void addInitialOd(FlatBufferBuilder builder, boolean initialOd) { builder.addBoolean(11, initialOd, false); }
  public static void addLastObStart(FlatBufferBuilder builder, int lastObStartOffset) { builder.addOffset(12, lastObStartOffset, 0); }
  public static void addLastObEnd(FlatBufferBuilder builder, int lastObEndOffset) { builder.addOffset(13, lastObEndOffset, 0); }
  public static void addTimeSpan(FlatBufferBuilder builder, double timeSpan) { builder.addDouble(14, timeSpan, 0.0); }
  public static void addEffectiveFrom(FlatBufferBuilder builder, int effectiveFromOffset) { builder.addOffset(15, effectiveFromOffset, 0); }
  public static void addEffectiveUntil(FlatBufferBuilder builder, int effectiveUntilOffset) { builder.addOffset(16, effectiveUntilOffset, 0); }
  public static void addWrms(FlatBufferBuilder builder, double wrms) { builder.addDouble(17, wrms, 0.0); }
  public static void addPreviousWrms(FlatBufferBuilder builder, double previousWrms) { builder.addDouble(18, previousWrms, 0.0); }
  public static void addFirstPassWrms(FlatBufferBuilder builder, double firstPassWrms) { builder.addDouble(19, firstPassWrms, 0.0); }
  public static void addBestPassWrms(FlatBufferBuilder builder, double bestPassWrms) { builder.addDouble(20, bestPassWrms, 0.0); }
  public static void addErrorGrowthRate(FlatBufferBuilder builder, double errorGrowthRate) { builder.addDouble(21, errorGrowthRate, 0.0); }
  public static void addEdr(FlatBufferBuilder builder, double edr) { builder.addDouble(22, edr, 0.0); }
  public static void addMethod(FlatBufferBuilder builder, int methodOffset) { builder.addOffset(23, methodOffset, 0); }
  public static void addMethodSource(FlatBufferBuilder builder, int methodSourceOffset) { builder.addOffset(24, methodSourceOffset, 0); }
  public static void addFitSpan(FlatBufferBuilder builder, double fitSpan) { builder.addDouble(25, fitSpan, 0.0); }
  public static void addBallisticCoeffEst(FlatBufferBuilder builder, boolean ballisticCoeffEst) { builder.addBoolean(26, ballisticCoeffEst, false); }
  public static void addBallisticCoeffModel(FlatBufferBuilder builder, int ballisticCoeffModelOffset) { builder.addOffset(27, ballisticCoeffModelOffset, 0); }
  public static void addAgomEst(FlatBufferBuilder builder, boolean agomEst) { builder.addBoolean(28, agomEst, false); }
  public static void addAgomModel(FlatBufferBuilder builder, int agomModelOffset) { builder.addOffset(29, agomModelOffset, 0); }
  public static void addRmsConvergenceCriteria(FlatBufferBuilder builder, double rmsConvergenceCriteria) { builder.addDouble(30, rmsConvergenceCriteria, 0.0); }
  public static void addNumIterations(FlatBufferBuilder builder, int numIterations) { builder.addInt(31, numIterations, 0); }
  public static void addAcceptedObTyps(FlatBufferBuilder builder, int acceptedObTypsOffset) { builder.addOffset(32, acceptedObTypsOffset, 0); }
  public static int createAcceptedObTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAcceptedObTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAcceptedObIds(FlatBufferBuilder builder, int acceptedObIdsOffset) { builder.addOffset(33, acceptedObIdsOffset, 0); }
  public static int createAcceptedObIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAcceptedObIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRejectedObTyps(FlatBufferBuilder builder, int rejectedObTypsOffset) { builder.addOffset(34, rejectedObTypsOffset, 0); }
  public static int createRejectedObTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRejectedObTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRejectedObIds(FlatBufferBuilder builder, int rejectedObIdsOffset) { builder.addOffset(35, rejectedObIdsOffset, 0); }
  public static int createRejectedObIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRejectedObIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSensorIds(FlatBufferBuilder builder, int sensorIdsOffset) { builder.addOffset(36, sensorIdsOffset, 0); }
  public static int createSensorIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSensorIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(37, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(38, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(39, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(40, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(41, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(42, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(43, dataMode, 0); }
  public static void addOnOrbit(FlatBufferBuilder builder, int onOrbitOffset) { builder.addOffset(44, onOrbitOffset, 0); }
  public static int endOrbitDetermination_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOrbitDetermination_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ORBI"); }
  public static void finishSizePrefixedOrbitDetermination_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ORBI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OrbitDetermination_Full get(int j) { return get(new OrbitDetermination_Full(), j); }
    public OrbitDetermination_Full get(OrbitDetermination_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

