// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Supports Sensor Data Records (SDR) from space-borne Energetic Charged Particle (ECP) Sensors.  SDR contains sensor status telemetry and raw dosimeter measurements of the space environment.
 */
@SuppressWarnings("unused")
public final class ECPSDR_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ECPSDR_Abridged getRootAsECPSDR_Abridged(ByteBuffer _bb) { return getRootAsECPSDR_Abridged(_bb, new ECPSDR_Abridged()); }
  public static ECPSDR_Abridged getRootAsECPSDR_Abridged(ByteBuffer _bb, ECPSDR_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ECPSDR_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ECPS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ECPSDR_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ECPSDR-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the on-orbit satellite hosting the sensor.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite/catalog number of the on-orbit satellite hosting the sensor.
   * Example: /// Example: 101
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by the record source to indicate the satellite hosting the sensor.  This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Optional identifier provided by the record source to indicate the sensor identifier which produced this data.  This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The type of data associated with this record (STANDARD, TRANSIENT).
   * Example: /// Example: STANDARD
   * Constraints: Minimum length = 1, Maximum length = 12
   */
  public String type() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Time stamp of time packet receipt on ground, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String msgTime() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgTimeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer msgTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Time of the observation, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Flag indicating whether this record is an original or re-transmitted dataset (TRUE indicates a retransmit from the host).
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean retransmit() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The sensor mode associated with this measurements (NORMAL, TEST).
   * Example: /// Example: TEST
   * Constraints: Minimum length = 0, Maximum length = 12
   */
  public String senMode() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer senModeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer senModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Unitless dosimeter detector bias for MedLET and HiLET.  MedLET (Linear Energy Transfer) and HiLET subsensors detect particles above LET thresholds, 300keV and 1MeV, respectively.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int dosBias() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Internal 5V current monitor for analog supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int asl5VcurrMon() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Internal 5V current monitor for digital supply line.  This is sensor status telemetry.  See vRef for conversion factor to Volts.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int dsl5VcurrMon() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Power supply temperature monitor.  This is sensor status telemetry.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int psTempMon() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CDS Charge Plate voltage monitor.  See vRef for conversion factor to Volts.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int cdsPlateVmon() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CDS reference voltage monitor.  See vRef for conversion factor to Volts.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int cdsRefVmon() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Unitless sensor mounting plate temperature.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int mpTemp() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Reference voltage (volts/bit).  Conversion factor used to convert analog V monitor data from bytes to volts.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int vRef() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Photodiode 1 signal level.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int pd1SigLev() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Photodiode 2 signal level.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int pd2SigLev() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of ESD triggers, low byte of 2-byte counter.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int esdTrigCountL() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of ESD triggers, high byte of 2-byte counter.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int esdTrigCountH() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * LowLET dosimeter low range output.  Low byte of (LowLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int lowLetL() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * LowLET dosimeter medium range output.  Medium byte of (LowLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int lowLetM() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET1 dosimeter low range output.   Low byte of the 1st (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet1L() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET1 dosimeter medium range output.  Medium byte of the 1st (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet1M() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET2 dosimeter low range output.  Low byte of the 2nd (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet2L() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET2 dosimeter medium range output.  Medium byte of the 2nd (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet2M() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET3 dosimeter low range output.  Low byte of the 3rd (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet3L() { int o = __offset(64); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET3 dosimeter medium range output.  Medium byte of the 3rd (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet3M() { int o = __offset(66); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET4 dosimeter low range output.  Low byte of the 4th (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet4L() { int o = __offset(68); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * MedLET4 dosimeter medium range output.  Medium byte of the 4th (MedLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int medLet4M() { int o = __offset(70); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * HiLET dosimeter low range output.  Low byte of scaler (HiLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int hiLetL() { int o = __offset(72); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Unitless HiLET dosimeter medium range output.  Medium byte of (HiLET) dosimeter output.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int hiLetM() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Surface dosimeter low range output (converts to pico-coulombs/bit).   Low byte of 3 bytes.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int surfDosL() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Surface dosimeter medium range output (converts to pico-coulombs/bit).  Middle byte of 3 bytes.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int surfDosM() { int o = __offset(78); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Surface dosimeter high range output (converts to pico-coulombs/bit).  High byte of 3 bytes.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int surfDosH() { int o = __offset(80); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Surface dosimeter charge rate low output (converts to pico-amps/bit).  Low byte of 2 bytes.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int surfDosChargeL() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Surface dosimeter charge rate high output (converts to pico-amps/bit).   High byte of 2 bytes.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int surfDosChargeH() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Surface dosimeter status byte.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int surfDosStat() { int o = __offset(86); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CDS throttle number of seconds between CDS transient capture readouts.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int cdsThrottle() { int o = __offset(88); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * CDS Threshold setting for ESD detection threshold.  The CDS Threshold is the adjustable sensitivity of recording/digitizing an ESD as a transient packet.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int cdsThreshold() { int o = __offset(90); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Two byte CRC-16-CCITT checksum (ordered as first byte, second byte).
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int checksum() { int o = __offset(92); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of 144 digitized samples of ESD waveform for transient packets.
   * Example: /// Example: [1, 2, 3]
   * Constraints: No constraints specified.
   */
  public String transientData(int j) { int o = __offset(94); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int transientDataLength() { int o = __offset(94); return o != 0 ? __vector_len(o) : 0; }
  public StringVector transientDataVector() { return transientDataVector(new StringVector()); }
  public StringVector transientDataVector(StringVector obj) { int o = __offset(94); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(106); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createECPSDR_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int typeOffset,
      int msgTimeOffset,
      int obTimeOffset,
      boolean retransmit,
      int senModeOffset,
      int dosBias,
      int asl5VcurrMon,
      int dsl5VcurrMon,
      int psTempMon,
      int cdsPlateVmon,
      int cdsRefVmon,
      int mpTemp,
      int vRef,
      int pd1SigLev,
      int pd2SigLev,
      int esdTrigCountL,
      int esdTrigCountH,
      int lowLetL,
      int lowLetM,
      int medLet1L,
      int medLet1M,
      int medLet2L,
      int medLet2M,
      int medLet3L,
      int medLet3M,
      int medLet4L,
      int medLet4M,
      int hiLetL,
      int hiLetM,
      int surfDosL,
      int surfDosM,
      int surfDosH,
      int surfDosChargeL,
      int surfDosChargeH,
      int surfDosStat,
      int cdsThrottle,
      int cdsThreshold,
      int checksum,
      int transientDataOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(52);
    ECPSDR_Abridged.addOrigNetwork(builder, origNetworkOffset);
    ECPSDR_Abridged.addOrigin(builder, originOffset);
    ECPSDR_Abridged.addSource(builder, sourceOffset);
    ECPSDR_Abridged.addCreatedBy(builder, createdByOffset);
    ECPSDR_Abridged.addCreatedAt(builder, createdAtOffset);
    ECPSDR_Abridged.addTransientData(builder, transientDataOffset);
    ECPSDR_Abridged.addChecksum(builder, checksum);
    ECPSDR_Abridged.addCdsThreshold(builder, cdsThreshold);
    ECPSDR_Abridged.addCdsThrottle(builder, cdsThrottle);
    ECPSDR_Abridged.addSurfDosStat(builder, surfDosStat);
    ECPSDR_Abridged.addSurfDosChargeH(builder, surfDosChargeH);
    ECPSDR_Abridged.addSurfDosChargeL(builder, surfDosChargeL);
    ECPSDR_Abridged.addSurfDosH(builder, surfDosH);
    ECPSDR_Abridged.addSurfDosM(builder, surfDosM);
    ECPSDR_Abridged.addSurfDosL(builder, surfDosL);
    ECPSDR_Abridged.addHiLetM(builder, hiLetM);
    ECPSDR_Abridged.addHiLetL(builder, hiLetL);
    ECPSDR_Abridged.addMedLet4M(builder, medLet4M);
    ECPSDR_Abridged.addMedLet4L(builder, medLet4L);
    ECPSDR_Abridged.addMedLet3M(builder, medLet3M);
    ECPSDR_Abridged.addMedLet3L(builder, medLet3L);
    ECPSDR_Abridged.addMedLet2M(builder, medLet2M);
    ECPSDR_Abridged.addMedLet2L(builder, medLet2L);
    ECPSDR_Abridged.addMedLet1M(builder, medLet1M);
    ECPSDR_Abridged.addMedLet1L(builder, medLet1L);
    ECPSDR_Abridged.addLowLetM(builder, lowLetM);
    ECPSDR_Abridged.addLowLetL(builder, lowLetL);
    ECPSDR_Abridged.addEsdTrigCountH(builder, esdTrigCountH);
    ECPSDR_Abridged.addEsdTrigCountL(builder, esdTrigCountL);
    ECPSDR_Abridged.addPd2SigLev(builder, pd2SigLev);
    ECPSDR_Abridged.addPd1SigLev(builder, pd1SigLev);
    ECPSDR_Abridged.addVRef(builder, vRef);
    ECPSDR_Abridged.addMpTemp(builder, mpTemp);
    ECPSDR_Abridged.addCdsRefVmon(builder, cdsRefVmon);
    ECPSDR_Abridged.addCdsPlateVmon(builder, cdsPlateVmon);
    ECPSDR_Abridged.addPsTempMon(builder, psTempMon);
    ECPSDR_Abridged.addDsl5VcurrMon(builder, dsl5VcurrMon);
    ECPSDR_Abridged.addAsl5VcurrMon(builder, asl5VcurrMon);
    ECPSDR_Abridged.addDosBias(builder, dosBias);
    ECPSDR_Abridged.addSenMode(builder, senModeOffset);
    ECPSDR_Abridged.addObTime(builder, obTimeOffset);
    ECPSDR_Abridged.addMsgTime(builder, msgTimeOffset);
    ECPSDR_Abridged.addType(builder, typeOffset);
    ECPSDR_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    ECPSDR_Abridged.addIdSensor(builder, idSensorOffset);
    ECPSDR_Abridged.addOrigObjectId(builder, origObjectIdOffset);
    ECPSDR_Abridged.addSatNo(builder, satNo);
    ECPSDR_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    ECPSDR_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    ECPSDR_Abridged.addId(builder, idOffset);
    ECPSDR_Abridged.addDataMode(builder, dataMode);
    ECPSDR_Abridged.addRetransmit(builder, retransmit);
    return ECPSDR_Abridged.endECPSDR_Abridged(builder);
  }

  public static void startECPSDR_Abridged(FlatBufferBuilder builder) { builder.startTable(52); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(3, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(4, origObjectIdOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(5, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(6, origSensorIdOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(7, typeOffset, 0); }
  public static void addMsgTime(FlatBufferBuilder builder, int msgTimeOffset) { builder.addOffset(8, msgTimeOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(9, obTimeOffset, 0); }
  public static void addRetransmit(FlatBufferBuilder builder, boolean retransmit) { builder.addBoolean(10, retransmit, false); }
  public static void addSenMode(FlatBufferBuilder builder, int senModeOffset) { builder.addOffset(11, senModeOffset, 0); }
  public static void addDosBias(FlatBufferBuilder builder, int dosBias) { builder.addInt(12, dosBias, 0); }
  public static void addAsl5VcurrMon(FlatBufferBuilder builder, int asl5VcurrMon) { builder.addInt(13, asl5VcurrMon, 0); }
  public static void addDsl5VcurrMon(FlatBufferBuilder builder, int dsl5VcurrMon) { builder.addInt(14, dsl5VcurrMon, 0); }
  public static void addPsTempMon(FlatBufferBuilder builder, int psTempMon) { builder.addInt(15, psTempMon, 0); }
  public static void addCdsPlateVmon(FlatBufferBuilder builder, int cdsPlateVmon) { builder.addInt(16, cdsPlateVmon, 0); }
  public static void addCdsRefVmon(FlatBufferBuilder builder, int cdsRefVmon) { builder.addInt(17, cdsRefVmon, 0); }
  public static void addMpTemp(FlatBufferBuilder builder, int mpTemp) { builder.addInt(18, mpTemp, 0); }
  public static void addVRef(FlatBufferBuilder builder, int vRef) { builder.addInt(19, vRef, 0); }
  public static void addPd1SigLev(FlatBufferBuilder builder, int pd1SigLev) { builder.addInt(20, pd1SigLev, 0); }
  public static void addPd2SigLev(FlatBufferBuilder builder, int pd2SigLev) { builder.addInt(21, pd2SigLev, 0); }
  public static void addEsdTrigCountL(FlatBufferBuilder builder, int esdTrigCountL) { builder.addInt(22, esdTrigCountL, 0); }
  public static void addEsdTrigCountH(FlatBufferBuilder builder, int esdTrigCountH) { builder.addInt(23, esdTrigCountH, 0); }
  public static void addLowLetL(FlatBufferBuilder builder, int lowLetL) { builder.addInt(24, lowLetL, 0); }
  public static void addLowLetM(FlatBufferBuilder builder, int lowLetM) { builder.addInt(25, lowLetM, 0); }
  public static void addMedLet1L(FlatBufferBuilder builder, int medLet1L) { builder.addInt(26, medLet1L, 0); }
  public static void addMedLet1M(FlatBufferBuilder builder, int medLet1M) { builder.addInt(27, medLet1M, 0); }
  public static void addMedLet2L(FlatBufferBuilder builder, int medLet2L) { builder.addInt(28, medLet2L, 0); }
  public static void addMedLet2M(FlatBufferBuilder builder, int medLet2M) { builder.addInt(29, medLet2M, 0); }
  public static void addMedLet3L(FlatBufferBuilder builder, int medLet3L) { builder.addInt(30, medLet3L, 0); }
  public static void addMedLet3M(FlatBufferBuilder builder, int medLet3M) { builder.addInt(31, medLet3M, 0); }
  public static void addMedLet4L(FlatBufferBuilder builder, int medLet4L) { builder.addInt(32, medLet4L, 0); }
  public static void addMedLet4M(FlatBufferBuilder builder, int medLet4M) { builder.addInt(33, medLet4M, 0); }
  public static void addHiLetL(FlatBufferBuilder builder, int hiLetL) { builder.addInt(34, hiLetL, 0); }
  public static void addHiLetM(FlatBufferBuilder builder, int hiLetM) { builder.addInt(35, hiLetM, 0); }
  public static void addSurfDosL(FlatBufferBuilder builder, int surfDosL) { builder.addInt(36, surfDosL, 0); }
  public static void addSurfDosM(FlatBufferBuilder builder, int surfDosM) { builder.addInt(37, surfDosM, 0); }
  public static void addSurfDosH(FlatBufferBuilder builder, int surfDosH) { builder.addInt(38, surfDosH, 0); }
  public static void addSurfDosChargeL(FlatBufferBuilder builder, int surfDosChargeL) { builder.addInt(39, surfDosChargeL, 0); }
  public static void addSurfDosChargeH(FlatBufferBuilder builder, int surfDosChargeH) { builder.addInt(40, surfDosChargeH, 0); }
  public static void addSurfDosStat(FlatBufferBuilder builder, int surfDosStat) { builder.addInt(41, surfDosStat, 0); }
  public static void addCdsThrottle(FlatBufferBuilder builder, int cdsThrottle) { builder.addInt(42, cdsThrottle, 0); }
  public static void addCdsThreshold(FlatBufferBuilder builder, int cdsThreshold) { builder.addInt(43, cdsThreshold, 0); }
  public static void addChecksum(FlatBufferBuilder builder, int checksum) { builder.addInt(44, checksum, 0); }
  public static void addTransientData(FlatBufferBuilder builder, int transientDataOffset) { builder.addOffset(45, transientDataOffset, 0); }
  public static int createTransientDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTransientDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(46, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(47, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(48, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(49, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(50, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(51, dataMode, 0); }
  public static int endECPSDR_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishECPSDR_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ECPS"); }
  public static void finishSizePrefixedECPSDR_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ECPS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ECPSDR_Abridged get(int j) { return get(new ECPSDR_Abridged(), j); }
    public ECPSDR_Abridged get(ECPSDR_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

