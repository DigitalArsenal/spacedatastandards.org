// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
 */
@SuppressWarnings("unused")
public final class DataLinkReferences_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DataLinkReferences_Full getRootAsDataLinkReferences_Full(ByteBuffer _bb) { return getRootAsDataLinkReferences_Full(_bb, new DataLinkReferences_Full()); }
  public static DataLinkReferences_Full getRootAsDataLinkReferences_Full(ByteBuffer _bb, DataLinkReferences_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DataLinkReferences_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataLinkReferences_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Specifies an alphabetic serial identifier a reference pertaining to the data link message.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String refSerialId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refSerialIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer refSerialIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Specifies the type of document referenced.
   * Example: /// Example: ABSTAT
   * Constraints: Minimum length = 0, Maximum length = 56
   */
  public String refType() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer refTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The originator of this reference.
   * Example: /// Example: CENTCOM
   * Constraints: Minimum length = 0, Maximum length = 30
   */
  public String refOriginator() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refOriginatorAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer refOriginatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String refTs() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refTsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer refTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Serial number assigned to this reference.
   * Example: /// Example: 1402001
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String refSerialNum() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refSerialNumAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer refSerialNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Indicates any special actions, restrictions, guidance, or information relating to this reference.
   * Example: /// Example: NOTAL
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String refSpecialNotation() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refSpecialNotationAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer refSpecialNotationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
   * Example: /// Example: ['RDU', 'C-123-92']
   * Constraints: No constraints specified.
   */
  public String refSics(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int refSicsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector refSicsVector() { return refSicsVector(new StringVector()); }
  public StringVector refSicsVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createDataLinkReferences_Full(FlatBufferBuilder builder,
      int refSerialIdOffset,
      int refTypeOffset,
      int refOriginatorOffset,
      int refTsOffset,
      int refSerialNumOffset,
      int refSpecialNotationOffset,
      int refSicsOffset) {
    builder.startTable(7);
    DataLinkReferences_Full.addRefSics(builder, refSicsOffset);
    DataLinkReferences_Full.addRefSpecialNotation(builder, refSpecialNotationOffset);
    DataLinkReferences_Full.addRefSerialNum(builder, refSerialNumOffset);
    DataLinkReferences_Full.addRefTs(builder, refTsOffset);
    DataLinkReferences_Full.addRefOriginator(builder, refOriginatorOffset);
    DataLinkReferences_Full.addRefType(builder, refTypeOffset);
    DataLinkReferences_Full.addRefSerialId(builder, refSerialIdOffset);
    return DataLinkReferences_Full.endDataLinkReferences_Full(builder);
  }

  public static void startDataLinkReferences_Full(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addRefSerialId(FlatBufferBuilder builder, int refSerialIdOffset) { builder.addOffset(0, refSerialIdOffset, 0); }
  public static void addRefType(FlatBufferBuilder builder, int refTypeOffset) { builder.addOffset(1, refTypeOffset, 0); }
  public static void addRefOriginator(FlatBufferBuilder builder, int refOriginatorOffset) { builder.addOffset(2, refOriginatorOffset, 0); }
  public static void addRefTs(FlatBufferBuilder builder, int refTsOffset) { builder.addOffset(3, refTsOffset, 0); }
  public static void addRefSerialNum(FlatBufferBuilder builder, int refSerialNumOffset) { builder.addOffset(4, refSerialNumOffset, 0); }
  public static void addRefSpecialNotation(FlatBufferBuilder builder, int refSpecialNotationOffset) { builder.addOffset(5, refSpecialNotationOffset, 0); }
  public static void addRefSics(FlatBufferBuilder builder, int refSicsOffset) { builder.addOffset(6, refSicsOffset, 0); }
  public static int createRefSicsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRefSicsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endDataLinkReferences_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDataLinkReferences_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DATA"); }
  public static void finishSizePrefixedDataLinkReferences_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DATA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataLinkReferences_Full get(int j) { return get(new DataLinkReferences_Full(), j); }
    public DataLinkReferences_Full get(DataLinkReferences_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

