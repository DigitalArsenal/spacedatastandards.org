// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Tasking desired collection requirements.
 */
@SuppressWarnings("unused")
public final class ISRCollectionRequirements_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static ISRCollectionRequirements_Ingest getRootAsISRCollectionRequirements_Ingest(ByteBuffer _bb) { return getRootAsISRCollectionRequirements_Ingest(_bb, new ISRCollectionRequirements_Ingest()); }
  public static ISRCollectionRequirements_Ingest getRootAsISRCollectionRequirements_Ingest(ByteBuffer _bb, ISRCollectionRequirements_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean ISRCollectionRequirements_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ISRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ISRCollectionRequirements_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Collection Requirement Unique Identifier.
   * Example: /// Example: ISCRCOLLECTIONREQUIREMENTS
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Encryption hashing algorithm.
   * Example: /// Example: HASH
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String hash() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hashAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer hashInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Type collection this requirement applies to.
   * Example: /// Example: COLLECTION_TYPE
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String type() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Collection Requirement Unique Identifier.
   * Example: /// Example: CRID
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String cridNumbers() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cridNumbersAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer cridNumbersInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * 1-n priority for this collection requirement.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double priority() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Record id.
   * Example: /// Example: RECORD-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String recordId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recordIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer recordIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Reconnaissance Survey information the operator needs.
   * Example: /// Example: SURVEY_INFO
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String reconSurvey() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reconSurveyAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer reconSurveyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Primary type of intelligence to be collected for this requirement.
   * Example: /// Example: Sig
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String intelDiscipline() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer intelDisciplineAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer intelDisciplineInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Sub category of primary intelligence to be collected for this requirement.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean secondary() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Is this collection requirement an emphasized/critical requirement.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean emphasized() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Is this collection request for the Prism system?.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean isPrismCr() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Start time for this requirement, should be within the mission time window.
   * Example: /// Example: 2021-01-19T01:01:15.001Z
   * Constraints: No constraints specified.
   */
  public String start() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer startInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Stop time for this requirement, should be within the mission time window.
   * Example: /// Example: 2021-01-19T01:20:01.001Z
   * Constraints: No constraints specified.
   */
  public String stop() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stopAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer stopInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Human readable name for this operation.
   * Example: /// Example: NAME
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String operation() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operationAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer operationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The name of the military unit that this assigned collection requirement will support.
   * Example: /// Example: UNIT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String supportedUnit() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer supportedUnitAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer supportedUnitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Country code of the collection requirement. A Country may represent countries, multi-national consortiums, and international organizations.
   * Example: /// Example: COUNTRY_CODE
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String country() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer countryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Region of the collection requirement.
   * Example: /// Example: REGION
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String region() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer regionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Subregion of the collection requirement.
   * Example: /// Example: SUBREGION
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String subregion() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer subregionAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer subregionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Free text field for the user to specify special instructions needed for this collection.
   * Example: /// Example: TEXT
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String specialComGuidance() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer specialComGuidanceAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer specialComGuidanceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String criticalTimes() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer criticalTimesAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer criticalTimesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String exploitationRequirement() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer exploitationRequirementAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer exploitationRequirementInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Array of POI Id's for the targets being tasked.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String targetList(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int targetListLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector targetListVector() { return targetListVector(new StringVector()); }
  public StringVector targetListVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createISRCollectionRequirements_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int hashOffset,
      int typeOffset,
      int cridNumbersOffset,
      double priority,
      int recordIdOffset,
      int reconSurveyOffset,
      int intelDisciplineOffset,
      boolean secondary,
      boolean emphasized,
      boolean isPrismCr,
      int startOffset,
      int stopOffset,
      int operationOffset,
      int supportedUnitOffset,
      int countryOffset,
      int regionOffset,
      int subregionOffset,
      int specialComGuidanceOffset,
      int criticalTimesOffset,
      int exploitationRequirementOffset,
      int targetListOffset) {
    builder.startTable(22);
    ISRCollectionRequirements_Ingest.addPriority(builder, priority);
    ISRCollectionRequirements_Ingest.addTargetList(builder, targetListOffset);
    ISRCollectionRequirements_Ingest.addExploitationRequirement(builder, exploitationRequirementOffset);
    ISRCollectionRequirements_Ingest.addCriticalTimes(builder, criticalTimesOffset);
    ISRCollectionRequirements_Ingest.addSpecialComGuidance(builder, specialComGuidanceOffset);
    ISRCollectionRequirements_Ingest.addSubregion(builder, subregionOffset);
    ISRCollectionRequirements_Ingest.addRegion(builder, regionOffset);
    ISRCollectionRequirements_Ingest.addCountry(builder, countryOffset);
    ISRCollectionRequirements_Ingest.addSupportedUnit(builder, supportedUnitOffset);
    ISRCollectionRequirements_Ingest.addOperation(builder, operationOffset);
    ISRCollectionRequirements_Ingest.addStop(builder, stopOffset);
    ISRCollectionRequirements_Ingest.addStart(builder, startOffset);
    ISRCollectionRequirements_Ingest.addIntelDiscipline(builder, intelDisciplineOffset);
    ISRCollectionRequirements_Ingest.addReconSurvey(builder, reconSurveyOffset);
    ISRCollectionRequirements_Ingest.addRecordId(builder, recordIdOffset);
    ISRCollectionRequirements_Ingest.addCridNumbers(builder, cridNumbersOffset);
    ISRCollectionRequirements_Ingest.addType(builder, typeOffset);
    ISRCollectionRequirements_Ingest.addHash(builder, hashOffset);
    ISRCollectionRequirements_Ingest.addId(builder, idOffset);
    ISRCollectionRequirements_Ingest.addIsPrismCr(builder, isPrismCr);
    ISRCollectionRequirements_Ingest.addEmphasized(builder, emphasized);
    ISRCollectionRequirements_Ingest.addSecondary(builder, secondary);
    return ISRCollectionRequirements_Ingest.endISRCollectionRequirements_Ingest(builder);
  }

  public static void startISRCollectionRequirements_Ingest(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(1, hashOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(2, typeOffset, 0); }
  public static void addCridNumbers(FlatBufferBuilder builder, int cridNumbersOffset) { builder.addOffset(3, cridNumbersOffset, 0); }
  public static void addPriority(FlatBufferBuilder builder, double priority) { builder.addDouble(4, priority, 0.0); }
  public static void addRecordId(FlatBufferBuilder builder, int recordIdOffset) { builder.addOffset(5, recordIdOffset, 0); }
  public static void addReconSurvey(FlatBufferBuilder builder, int reconSurveyOffset) { builder.addOffset(6, reconSurveyOffset, 0); }
  public static void addIntelDiscipline(FlatBufferBuilder builder, int intelDisciplineOffset) { builder.addOffset(7, intelDisciplineOffset, 0); }
  public static void addSecondary(FlatBufferBuilder builder, boolean secondary) { builder.addBoolean(8, secondary, false); }
  public static void addEmphasized(FlatBufferBuilder builder, boolean emphasized) { builder.addBoolean(9, emphasized, false); }
  public static void addIsPrismCr(FlatBufferBuilder builder, boolean isPrismCr) { builder.addBoolean(10, isPrismCr, false); }
  public static void addStart(FlatBufferBuilder builder, int startOffset) { builder.addOffset(11, startOffset, 0); }
  public static void addStop(FlatBufferBuilder builder, int stopOffset) { builder.addOffset(12, stopOffset, 0); }
  public static void addOperation(FlatBufferBuilder builder, int operationOffset) { builder.addOffset(13, operationOffset, 0); }
  public static void addSupportedUnit(FlatBufferBuilder builder, int supportedUnitOffset) { builder.addOffset(14, supportedUnitOffset, 0); }
  public static void addCountry(FlatBufferBuilder builder, int countryOffset) { builder.addOffset(15, countryOffset, 0); }
  public static void addRegion(FlatBufferBuilder builder, int regionOffset) { builder.addOffset(16, regionOffset, 0); }
  public static void addSubregion(FlatBufferBuilder builder, int subregionOffset) { builder.addOffset(17, subregionOffset, 0); }
  public static void addSpecialComGuidance(FlatBufferBuilder builder, int specialComGuidanceOffset) { builder.addOffset(18, specialComGuidanceOffset, 0); }
  public static void addCriticalTimes(FlatBufferBuilder builder, int criticalTimesOffset) { builder.addOffset(19, criticalTimesOffset, 0); }
  public static void addExploitationRequirement(FlatBufferBuilder builder, int exploitationRequirementOffset) { builder.addOffset(20, exploitationRequirementOffset, 0); }
  public static void addTargetList(FlatBufferBuilder builder, int targetListOffset) { builder.addOffset(21, targetListOffset, 0); }
  public static int createTargetListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTargetListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endISRCollectionRequirements_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishISRCollectionRequirements_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ISRC"); }
  public static void finishSizePrefixedISRCollectionRequirements_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ISRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ISRCollectionRequirements_Ingest get(int j) { return get(new ISRCollectionRequirements_Ingest(), j); }
    public ISRCollectionRequirements_Ingest get(ISRCollectionRequirements_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

