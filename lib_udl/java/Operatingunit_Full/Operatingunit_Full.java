// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of a unit or organization which operates or controls an space-related Entity such as an on-orbit payload, a sensor, etc.  A contact may belong to an organization.
 */
@SuppressWarnings("unused")
public final class Operatingunit_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Operatingunit_Full getRootAsOperatingunit_Full(ByteBuffer _bb) { return getRootAsOperatingunit_Full(_bb, new Operatingunit_Full()); }
  public static Operatingunit_Full getRootAsOperatingunit_Full(ByteBuffer _bb, Operatingunit_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Operatingunit_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "OPER"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Operatingunit_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: OPERATINGUNIT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idOperatingUnit() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOperatingUnitAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idOperatingUnitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the operating unit record from the originating system.
   * Example: /// Example: 32100000000021
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String altOperatingUnitId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altOperatingUnitIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer altOperatingUnitIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Name of the operating unit.
   * Example: /// Example: SOME_NAME
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String name() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Description of the operating unit.
   * Example: /// Example: Description of unit
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String description() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the location record for this operating unit.
   * Example: /// Example: LOCATION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idLocation() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idLocationAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idLocationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the contact for this operating unit.
   * Example: /// Example: CONTACT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idContact() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idContactAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idContactInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Unique identifier of the organization record for this operating unit.
   * Example: /// Example: ORGANIZATION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOrganization() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOrganizationAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer idOrganizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * An optional identifier for this operating unit that may be composed from items such as the originating organization, allegiance, one-up number, etc.
   * Example: /// Example: AZXAZ12345
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String unitIdentifier() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unitIdentifierAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer unitIdentifierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The DoD Standard country code designator for the country or political entity to which the operating unit geographic coordinates reside . This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
   * Example: /// Example: IQ
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
   * Example: /// Example: IZ
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String altCountryCode() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altCountryCodeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer altCountryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * World Aeronautical Chart identifier for the area in which a designated operating unit is located.
   * Example: /// Example: 0427
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String wac() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wacAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer wacInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The Degree to which an operating unit is ready to perform the overall operational mission(s) for which it was organized and equipped.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: OPR
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String operStatus() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operStatusAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer operStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The physical manner of being or state of existence of the operating unit.  A physical condition that must be considered in the determining of a course of action.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: RDY
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String condition() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer conditionAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer conditionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Availability of the operating unit relative to its condition.  Indicates the reason the operating unit is not fully operational.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String conditionAvail() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer conditionAvailAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer conditionAvailInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
   * Example: /// Example: 7
   * Constraints: No constraints specified.
   */
  public int eval() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: EOB
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String fpa() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fpaAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer fpaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
   * ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
   * FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
   * HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
   * FAKER: Friendly track, object, or entity acting as an exercise hostile.
   * JOKER: Friendly track, object, or entity acting as an exercise suspect.
   * NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
   * PENDING: Track object which has not been evaluated.
   * SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
   * UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
   * Example: /// Example: FRIEND
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String ident() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer identAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer identInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The DoD Standard country code designator for the country or political entity to which the operating unit owes its allegiance.  This field will be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
   * Example: /// Example: OTHR
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String allegiance() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer allegianceAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer allegianceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
   * Example: /// Example: HL
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String altAllegiance() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altAllegianceAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer altAllegianceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Location name for the coordinates.
   * Example: /// Example: LOCATION_NAME
   * Constraints: Minimum length = 0, Maximum length = 54
   */
  public String locName() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locNameAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer locNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Indicates the reason that the operating unit is at that location.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: GR
   * Constraints: Minimum length = 0, Maximum length = 9
   */
  public String locReason() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locReasonAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer locReasonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * An aggregation of military units within a single service (i.e., ARMY, AIR FORCE, etc.) which operates under a single authority to accomplish a common mission. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: NV
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String force() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer forceAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer forceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The specific name for a given force.  For example, Force = ADF (Air Defense Force) and Force Name = Army Air Defense Force.
   * Example: /// Example: FORCE-NAME
   * Constraints: Minimum length = 0, Maximum length = 54
   */
  public String forceName() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer forceNameAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer forceNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Principal combat-related role that an operating unit is organized, structured and equipped to perform.  Or, the specialized military or paramilitary branch in which an individual serves, their specialization.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: MIL
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String functRole() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer functRoleAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer functRoleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Indicates the principal type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: W6
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String msnPrimary() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnPrimaryAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer msnPrimaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Indicates the principal specialty type of mission that an operating unit is organized and equipped to perform.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: QK
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String msnPrimarySpecialty() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnPrimarySpecialtyAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer msnPrimarySpecialtyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * This field contains a value indicating whether the record is a master unit record (True) or a detail record (False).  Master records contain basic information that does not change over time for each unit that has been selected to be projected.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean masterUnit() { int o = __offset(58); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * This field contains a value indicating whether the record is a stylized operating unit record (True) or a regular operating unit  record (False).  A stylized operating unit is a type of operating unit with one set of equipment that can be assigned to one or more superiors.  A stylized operating unit is generally useful for lower echelon operating units where the number of operating units and types of equipment are equal for multiple organizations.  In lieu of creating unique operating unit records for each operating unit, a template is created for the operating unit and its equipment.  This template enables the user to assign the operating unit to multiple organizations.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean stylizedUnit() { int o = __offset(60); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Combat status of a divisional or equivalent operating unit.  Currently, this data element applies only to operating units of the Former Soviet Union.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: 5
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String divCat() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer divCatAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer divCatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Organizational level of the operating unit.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: SHIP
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String echelon() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer echelonAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer echelonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Indicates the major group or level to which an echelon belongs.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: 68
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String echelonTier() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer echelonTierAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer echelonTierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Naval fleet to which an operating unit is assigned.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String fleetId() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fleetIdAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer fleetIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * A code describing the amount of operating unit participation in a deployment.   The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: ND
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String deployStatus() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer deployStatusAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer deployStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * The country code of the observed flag flown.
   * Example: /// Example: IZ
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String flagFlown() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flagFlownAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer flagFlownInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * A mathematical model of the earth used to calculate coordinates on a map.  US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums.  The datum must be specified to ensure accuracy of coordinates.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: WGS
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String coordDatum() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer coordDatumAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer coordDatumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * "Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
   * Pos. 1-2.  Latitude Degrees     [00-90]
   * Pos. 3-4.  Latitude Minutes     [00-59]
   * Pos. 5-6.  Latitude Seconds     [00-59]
   * Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
   * Pos. 10. Latitude Hemisphere       [NS] 
   * Pos. 11-13. Longitude Degrees     [00-180] 
   * Pos. 14-15. Longitude Minutes     [00-59] 
   * Pos. 16-17. Longitude Seconds     [00-59] 
   * Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
   * Pos. 21. Longitude Hemisphere     [EW]
   * Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U]]".
   * Example: /// Example: 340000000N0430000000E
   * Constraints: Minimum length = 0, Maximum length = 21
   */
  public String coord() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer coordAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer coordInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Indicates the plus or minus error assessed against the method used to derive the coordinate.
   * Example: /// Example: 12.345
   * Constraints: No constraints specified.
   */
  public double coordDerivAcc() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum.
   * Example: /// Example: 123.45
   * Constraints: No constraints specified.
   */
  public double elevMsl() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
   * Example: /// Example: 50
   * Constraints: No constraints specified.
   */
  public int elevMslConfLvl() { int o = __offset(86); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Indicates the plus or minus error assessed against the method used to derive the elevation.
   * Example: /// Example: 12.34
   * Constraints: No constraints specified.
   */
  public double elevMslDerivAcc() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The distance between Mean Sea Level and a referenced ellipsoid.
   * Example: /// Example: 12.34
   * Constraints: No constraints specified.
   */
  public double geoidalMslSep() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * "Indicates the grid system used in the development of the milGrid coordinates. Values are:
   * UPS - Universal Polar System
   * UTM - Universal Transverse Mercator".
   * Example: /// Example: UTM
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String milGridSys() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer milGridSysAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer milGridSysInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
   * 4Q (grid zone designator, GZD)
   * FJ (the 100,000-meter square identifier)
   * 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
   * Example: /// Example: 4QFJ12345678
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String milGrid() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer milGridAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer milGridInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Universal Transverse Mercator (UTM) grid coordinates.
   * Pos. 1-2, UTM Zone Column   [01-60
   * Pos. 3, UTM Zone Row   [C-HJ-NP-X]
   * Pos. 4, UTM False Easting   [0-9]
   * Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
   * Pos. 10-11, UTM False Northing    [0-9][0-9]
   * Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
   * Example: /// Example: 19P4390691376966
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String utm() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer utmAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer utmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
   * Example: /// Example: AL006
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String airDefArea() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer airDefAreaAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer airDefAreaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Political subdivision in which the geographic coordinates reside.  The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: IZ07
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public String polSubdiv() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer polSubdivAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer polSubdivInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element AFFILIATION.
   * Example: /// Example: SOGPU----------
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String symCode() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer symCodeAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer symCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Indicates the importance of the operating unit to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
   * 0 - Does not meet criteria above
   * 1 - Primary importance to system
   * 2 - Secondary importance to system
   * 3 - Tertiary importance to system
   * O - Other. Explain in Remarks.
   * Example: /// Example: 1
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String classRating() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classRatingAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer classRatingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs. Values are:
   * A - Active
   * I - Inactive
   * K - Acknowledged
   * L - Local
   * Q - A nominated (NOM) or Data Change Request (DCR) record
   * R - Production reduced by CMD decision
   * W - Working Record.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String recStatus() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recStatusAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer recStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency.  This date cannot be greater than the current date.
   * Example: /// Example: 2008-06-10
   * Constraints: No constraints specified.
   */
  public String reviewDate() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reviewDateAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer reviewDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Responsible Producer - Organization that is responsible for the maintenance of the record.
   * Example: /// Example: RT
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String resProd() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resProdAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer resProdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * The reference documentiation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
   * Example: /// Example: Provider Reference Documentation
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String referenceDoc() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer referenceDocAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer referenceDocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * Remarks contain amplifying information for a specific service. The information may contain context and interpretations for consumer use.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String operatingUnitRemarks(int j) { int o = __offset(114); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int operatingUnitRemarksLength() { int o = __offset(114); return o != 0 ? __vector_len(o) : 0; }
  public StringVector operatingUnitRemarksVector() { return operatingUnitRemarksVector(new StringVector()); }
  public StringVector operatingUnitRemarksVector(StringVector obj) { int o = __offset(114); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(120); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(120, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Source of the data.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(128); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String organization() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer organizationAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer organizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String location() { int o = __offset(132); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locationAsByteBuffer() { return __vector_as_bytebuffer(132, 1); }
  public ByteBuffer locationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 132, 1); }

  public static int createOperatingunit_Full(FlatBufferBuilder builder,
      int idOperatingUnitOffset,
      int classificationMarkingOffset,
      int altOperatingUnitIdOffset,
      int nameOffset,
      int descriptionOffset,
      int idLocationOffset,
      int idContactOffset,
      int idOrganizationOffset,
      int unitIdentifierOffset,
      int countryCodeOffset,
      int altCountryCodeOffset,
      int wacOffset,
      int operStatusOffset,
      int conditionOffset,
      int conditionAvailOffset,
      int eval,
      int fpaOffset,
      int identOffset,
      int allegianceOffset,
      int altAllegianceOffset,
      int locNameOffset,
      int locReasonOffset,
      int forceOffset,
      int forceNameOffset,
      int functRoleOffset,
      int msnPrimaryOffset,
      int msnPrimarySpecialtyOffset,
      boolean masterUnit,
      boolean stylizedUnit,
      int divCatOffset,
      int echelonOffset,
      int echelonTierOffset,
      int fleetIdOffset,
      int deployStatusOffset,
      int flagFlownOffset,
      int coordDatumOffset,
      int coordOffset,
      double coordDerivAcc,
      double lat,
      double lon,
      double elevMsl,
      int elevMslConfLvl,
      double elevMslDerivAcc,
      double geoidalMslSep,
      int milGridSysOffset,
      int milGridOffset,
      int utmOffset,
      int airDefAreaOffset,
      int polSubdivOffset,
      int symCodeOffset,
      int classRatingOffset,
      int recStatusOffset,
      int reviewDateOffset,
      int resProdOffset,
      int referenceDocOffset,
      int operatingUnitRemarksOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int organizationOffset,
      int locationOffset) {
    builder.startTable(65);
    Operatingunit_Full.addGeoidalMslSep(builder, geoidalMslSep);
    Operatingunit_Full.addElevMslDerivAcc(builder, elevMslDerivAcc);
    Operatingunit_Full.addElevMsl(builder, elevMsl);
    Operatingunit_Full.addLon(builder, lon);
    Operatingunit_Full.addLat(builder, lat);
    Operatingunit_Full.addCoordDerivAcc(builder, coordDerivAcc);
    Operatingunit_Full.addLocation(builder, locationOffset);
    Operatingunit_Full.addOrganization(builder, organizationOffset);
    Operatingunit_Full.addOrigin(builder, originOffset);
    Operatingunit_Full.addSource(builder, sourceOffset);
    Operatingunit_Full.addUpdatedBy(builder, updatedByOffset);
    Operatingunit_Full.addUpdatedAt(builder, updatedAtOffset);
    Operatingunit_Full.addCreatedBy(builder, createdByOffset);
    Operatingunit_Full.addCreatedAt(builder, createdAtOffset);
    Operatingunit_Full.addOperatingUnitRemarks(builder, operatingUnitRemarksOffset);
    Operatingunit_Full.addReferenceDoc(builder, referenceDocOffset);
    Operatingunit_Full.addResProd(builder, resProdOffset);
    Operatingunit_Full.addReviewDate(builder, reviewDateOffset);
    Operatingunit_Full.addRecStatus(builder, recStatusOffset);
    Operatingunit_Full.addClassRating(builder, classRatingOffset);
    Operatingunit_Full.addSymCode(builder, symCodeOffset);
    Operatingunit_Full.addPolSubdiv(builder, polSubdivOffset);
    Operatingunit_Full.addAirDefArea(builder, airDefAreaOffset);
    Operatingunit_Full.addUtm(builder, utmOffset);
    Operatingunit_Full.addMilGrid(builder, milGridOffset);
    Operatingunit_Full.addMilGridSys(builder, milGridSysOffset);
    Operatingunit_Full.addElevMslConfLvl(builder, elevMslConfLvl);
    Operatingunit_Full.addCoord(builder, coordOffset);
    Operatingunit_Full.addCoordDatum(builder, coordDatumOffset);
    Operatingunit_Full.addFlagFlown(builder, flagFlownOffset);
    Operatingunit_Full.addDeployStatus(builder, deployStatusOffset);
    Operatingunit_Full.addFleetId(builder, fleetIdOffset);
    Operatingunit_Full.addEchelonTier(builder, echelonTierOffset);
    Operatingunit_Full.addEchelon(builder, echelonOffset);
    Operatingunit_Full.addDivCat(builder, divCatOffset);
    Operatingunit_Full.addMsnPrimarySpecialty(builder, msnPrimarySpecialtyOffset);
    Operatingunit_Full.addMsnPrimary(builder, msnPrimaryOffset);
    Operatingunit_Full.addFunctRole(builder, functRoleOffset);
    Operatingunit_Full.addForceName(builder, forceNameOffset);
    Operatingunit_Full.addForce(builder, forceOffset);
    Operatingunit_Full.addLocReason(builder, locReasonOffset);
    Operatingunit_Full.addLocName(builder, locNameOffset);
    Operatingunit_Full.addAltAllegiance(builder, altAllegianceOffset);
    Operatingunit_Full.addAllegiance(builder, allegianceOffset);
    Operatingunit_Full.addIdent(builder, identOffset);
    Operatingunit_Full.addFpa(builder, fpaOffset);
    Operatingunit_Full.addEval(builder, eval);
    Operatingunit_Full.addConditionAvail(builder, conditionAvailOffset);
    Operatingunit_Full.addCondition(builder, conditionOffset);
    Operatingunit_Full.addOperStatus(builder, operStatusOffset);
    Operatingunit_Full.addWac(builder, wacOffset);
    Operatingunit_Full.addAltCountryCode(builder, altCountryCodeOffset);
    Operatingunit_Full.addCountryCode(builder, countryCodeOffset);
    Operatingunit_Full.addUnitIdentifier(builder, unitIdentifierOffset);
    Operatingunit_Full.addIdOrganization(builder, idOrganizationOffset);
    Operatingunit_Full.addIdContact(builder, idContactOffset);
    Operatingunit_Full.addIdLocation(builder, idLocationOffset);
    Operatingunit_Full.addDescription(builder, descriptionOffset);
    Operatingunit_Full.addName(builder, nameOffset);
    Operatingunit_Full.addAltOperatingUnitId(builder, altOperatingUnitIdOffset);
    Operatingunit_Full.addClassificationMarking(builder, classificationMarkingOffset);
    Operatingunit_Full.addIdOperatingUnit(builder, idOperatingUnitOffset);
    Operatingunit_Full.addDataMode(builder, dataMode);
    Operatingunit_Full.addStylizedUnit(builder, stylizedUnit);
    Operatingunit_Full.addMasterUnit(builder, masterUnit);
    return Operatingunit_Full.endOperatingunit_Full(builder);
  }

  public static void startOperatingunit_Full(FlatBufferBuilder builder) { builder.startTable(65); }
  public static void addIdOperatingUnit(FlatBufferBuilder builder, int idOperatingUnitOffset) { builder.addOffset(0, idOperatingUnitOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addAltOperatingUnitId(FlatBufferBuilder builder, int altOperatingUnitIdOffset) { builder.addOffset(2, altOperatingUnitIdOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(3, nameOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(4, descriptionOffset, 0); }
  public static void addIdLocation(FlatBufferBuilder builder, int idLocationOffset) { builder.addOffset(5, idLocationOffset, 0); }
  public static void addIdContact(FlatBufferBuilder builder, int idContactOffset) { builder.addOffset(6, idContactOffset, 0); }
  public static void addIdOrganization(FlatBufferBuilder builder, int idOrganizationOffset) { builder.addOffset(7, idOrganizationOffset, 0); }
  public static void addUnitIdentifier(FlatBufferBuilder builder, int unitIdentifierOffset) { builder.addOffset(8, unitIdentifierOffset, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(9, countryCodeOffset, 0); }
  public static void addAltCountryCode(FlatBufferBuilder builder, int altCountryCodeOffset) { builder.addOffset(10, altCountryCodeOffset, 0); }
  public static void addWac(FlatBufferBuilder builder, int wacOffset) { builder.addOffset(11, wacOffset, 0); }
  public static void addOperStatus(FlatBufferBuilder builder, int operStatusOffset) { builder.addOffset(12, operStatusOffset, 0); }
  public static void addCondition(FlatBufferBuilder builder, int conditionOffset) { builder.addOffset(13, conditionOffset, 0); }
  public static void addConditionAvail(FlatBufferBuilder builder, int conditionAvailOffset) { builder.addOffset(14, conditionAvailOffset, 0); }
  public static void addEval(FlatBufferBuilder builder, int eval) { builder.addInt(15, eval, 0); }
  public static void addFpa(FlatBufferBuilder builder, int fpaOffset) { builder.addOffset(16, fpaOffset, 0); }
  public static void addIdent(FlatBufferBuilder builder, int identOffset) { builder.addOffset(17, identOffset, 0); }
  public static void addAllegiance(FlatBufferBuilder builder, int allegianceOffset) { builder.addOffset(18, allegianceOffset, 0); }
  public static void addAltAllegiance(FlatBufferBuilder builder, int altAllegianceOffset) { builder.addOffset(19, altAllegianceOffset, 0); }
  public static void addLocName(FlatBufferBuilder builder, int locNameOffset) { builder.addOffset(20, locNameOffset, 0); }
  public static void addLocReason(FlatBufferBuilder builder, int locReasonOffset) { builder.addOffset(21, locReasonOffset, 0); }
  public static void addForce(FlatBufferBuilder builder, int forceOffset) { builder.addOffset(22, forceOffset, 0); }
  public static void addForceName(FlatBufferBuilder builder, int forceNameOffset) { builder.addOffset(23, forceNameOffset, 0); }
  public static void addFunctRole(FlatBufferBuilder builder, int functRoleOffset) { builder.addOffset(24, functRoleOffset, 0); }
  public static void addMsnPrimary(FlatBufferBuilder builder, int msnPrimaryOffset) { builder.addOffset(25, msnPrimaryOffset, 0); }
  public static void addMsnPrimarySpecialty(FlatBufferBuilder builder, int msnPrimarySpecialtyOffset) { builder.addOffset(26, msnPrimarySpecialtyOffset, 0); }
  public static void addMasterUnit(FlatBufferBuilder builder, boolean masterUnit) { builder.addBoolean(27, masterUnit, false); }
  public static void addStylizedUnit(FlatBufferBuilder builder, boolean stylizedUnit) { builder.addBoolean(28, stylizedUnit, false); }
  public static void addDivCat(FlatBufferBuilder builder, int divCatOffset) { builder.addOffset(29, divCatOffset, 0); }
  public static void addEchelon(FlatBufferBuilder builder, int echelonOffset) { builder.addOffset(30, echelonOffset, 0); }
  public static void addEchelonTier(FlatBufferBuilder builder, int echelonTierOffset) { builder.addOffset(31, echelonTierOffset, 0); }
  public static void addFleetId(FlatBufferBuilder builder, int fleetIdOffset) { builder.addOffset(32, fleetIdOffset, 0); }
  public static void addDeployStatus(FlatBufferBuilder builder, int deployStatusOffset) { builder.addOffset(33, deployStatusOffset, 0); }
  public static void addFlagFlown(FlatBufferBuilder builder, int flagFlownOffset) { builder.addOffset(34, flagFlownOffset, 0); }
  public static void addCoordDatum(FlatBufferBuilder builder, int coordDatumOffset) { builder.addOffset(35, coordDatumOffset, 0); }
  public static void addCoord(FlatBufferBuilder builder, int coordOffset) { builder.addOffset(36, coordOffset, 0); }
  public static void addCoordDerivAcc(FlatBufferBuilder builder, double coordDerivAcc) { builder.addDouble(37, coordDerivAcc, 0.0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(38, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(39, lon, 0.0); }
  public static void addElevMsl(FlatBufferBuilder builder, double elevMsl) { builder.addDouble(40, elevMsl, 0.0); }
  public static void addElevMslConfLvl(FlatBufferBuilder builder, int elevMslConfLvl) { builder.addInt(41, elevMslConfLvl, 0); }
  public static void addElevMslDerivAcc(FlatBufferBuilder builder, double elevMslDerivAcc) { builder.addDouble(42, elevMslDerivAcc, 0.0); }
  public static void addGeoidalMslSep(FlatBufferBuilder builder, double geoidalMslSep) { builder.addDouble(43, geoidalMslSep, 0.0); }
  public static void addMilGridSys(FlatBufferBuilder builder, int milGridSysOffset) { builder.addOffset(44, milGridSysOffset, 0); }
  public static void addMilGrid(FlatBufferBuilder builder, int milGridOffset) { builder.addOffset(45, milGridOffset, 0); }
  public static void addUtm(FlatBufferBuilder builder, int utmOffset) { builder.addOffset(46, utmOffset, 0); }
  public static void addAirDefArea(FlatBufferBuilder builder, int airDefAreaOffset) { builder.addOffset(47, airDefAreaOffset, 0); }
  public static void addPolSubdiv(FlatBufferBuilder builder, int polSubdivOffset) { builder.addOffset(48, polSubdivOffset, 0); }
  public static void addSymCode(FlatBufferBuilder builder, int symCodeOffset) { builder.addOffset(49, symCodeOffset, 0); }
  public static void addClassRating(FlatBufferBuilder builder, int classRatingOffset) { builder.addOffset(50, classRatingOffset, 0); }
  public static void addRecStatus(FlatBufferBuilder builder, int recStatusOffset) { builder.addOffset(51, recStatusOffset, 0); }
  public static void addReviewDate(FlatBufferBuilder builder, int reviewDateOffset) { builder.addOffset(52, reviewDateOffset, 0); }
  public static void addResProd(FlatBufferBuilder builder, int resProdOffset) { builder.addOffset(53, resProdOffset, 0); }
  public static void addReferenceDoc(FlatBufferBuilder builder, int referenceDocOffset) { builder.addOffset(54, referenceDocOffset, 0); }
  public static void addOperatingUnitRemarks(FlatBufferBuilder builder, int operatingUnitRemarksOffset) { builder.addOffset(55, operatingUnitRemarksOffset, 0); }
  public static int createOperatingUnitRemarksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOperatingUnitRemarksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(56, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(57, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(58, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(59, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(60, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(61, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(62, dataMode, 0); }
  public static void addOrganization(FlatBufferBuilder builder, int organizationOffset) { builder.addOffset(63, organizationOffset, 0); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addOffset(64, locationOffset, 0); }
  public static int endOperatingunit_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOperatingunit_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "OPER"); }
  public static void finishSizePrefixedOperatingunit_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "OPER"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Operatingunit_Full get(int j) { return get(new Operatingunit_Full(), j); }
    public Operatingunit_Full get(Operatingunit_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

