// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
 */
@SuppressWarnings("unused")
public final class DataLinkRefPoints_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DataLinkRefPoints_Ingest getRootAsDataLinkRefPoints_Ingest(ByteBuffer _bb) { return getRootAsDataLinkRefPoints_Ingest(_bb, new DataLinkRefPoints_Ingest()); }
  public static DataLinkRefPoints_Ingest getRootAsDataLinkRefPoints_Ingest(ByteBuffer _bb, DataLinkRefPoints_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DataLinkRefPoints_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataLinkRefPoints_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Type of data link reference point or grid origin.
   * Example: /// Example: DLRP
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public String refPointType() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refPointTypeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer refPointTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier to designate a reference point.
   * Example: /// Example: L5
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String refDes() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refDesAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer refDesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The location name of the point of reference for this data link message.
   * Example: /// Example: FORT BRAGG
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String refLocName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer refLocNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer refLocNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double refLat() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double refLon() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-08T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String effEventTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effEventTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer effEventTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }

  public static int createDataLinkRefPoints_Ingest(FlatBufferBuilder builder,
      int refPointTypeOffset,
      int refDesOffset,
      int refLocNameOffset,
      double refLat,
      double refLon,
      int effEventTimeOffset) {
    builder.startTable(6);
    DataLinkRefPoints_Ingest.addRefLon(builder, refLon);
    DataLinkRefPoints_Ingest.addRefLat(builder, refLat);
    DataLinkRefPoints_Ingest.addEffEventTime(builder, effEventTimeOffset);
    DataLinkRefPoints_Ingest.addRefLocName(builder, refLocNameOffset);
    DataLinkRefPoints_Ingest.addRefDes(builder, refDesOffset);
    DataLinkRefPoints_Ingest.addRefPointType(builder, refPointTypeOffset);
    return DataLinkRefPoints_Ingest.endDataLinkRefPoints_Ingest(builder);
  }

  public static void startDataLinkRefPoints_Ingest(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addRefPointType(FlatBufferBuilder builder, int refPointTypeOffset) { builder.addOffset(0, refPointTypeOffset, 0); }
  public static void addRefDes(FlatBufferBuilder builder, int refDesOffset) { builder.addOffset(1, refDesOffset, 0); }
  public static void addRefLocName(FlatBufferBuilder builder, int refLocNameOffset) { builder.addOffset(2, refLocNameOffset, 0); }
  public static void addRefLat(FlatBufferBuilder builder, double refLat) { builder.addDouble(3, refLat, 0.0); }
  public static void addRefLon(FlatBufferBuilder builder, double refLon) { builder.addDouble(4, refLon, 0.0); }
  public static void addEffEventTime(FlatBufferBuilder builder, int effEventTimeOffset) { builder.addOffset(5, effEventTimeOffset, 0); }
  public static int endDataLinkRefPoints_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDataLinkRefPoints_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DATA"); }
  public static void finishSizePrefixedDataLinkRefPoints_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DATA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataLinkRefPoints_Ingest get(int j) { return get(new DataLinkRefPoints_Ingest(), j); }
    public DataLinkRefPoints_Ingest get(DataLinkRefPoints_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

