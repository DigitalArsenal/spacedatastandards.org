// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// No description available.
 */
@SuppressWarnings("unused")
public final class Item_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Item_Abridged getRootAsItem_Abridged(ByteBuffer _bb) { return getRootAsItem_Abridged(_bb, new Item_Abridged()); }
  public static Item_Abridged getRootAsItem_Abridged(ByteBuffer _bb, Item_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Item_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ITEM"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Item_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The UDL ID of the air load plan this item is associated with.
   * Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAirLoadPlan() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAirLoadPlanAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idAirLoadPlanInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
   * Example: /// Example: 12345ABCD
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String scanCode() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scanCodeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer scanCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
   * Example: /// Example: bID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String scGenTool() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scGenToolAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer scGenToolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
   * Example: /// Example: CARGO
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String type() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
   * Example: /// Example: PALLET
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String cargoType() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cargoTypeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer cargoTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Name of the item. Applicable for equipment and cargo item types only.
   * Example: /// Example: Product Name
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String name() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
   * Example: /// Example: RMS
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String destination() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer destinationAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer destinationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The departure code or location where this item has left or is leaving.
   * Example: /// Example: CHS
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String departure() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer departureAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer departureInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The name of the unit receiving this item.
   * Example: /// Example: 50 SBN
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String receivingUnit() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receivingUnitAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer receivingUnitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The military branch receiving this item.
   * Example: /// Example: Air Force
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String receivingBranch() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receivingBranchAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer receivingBranchInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
   * Example: /// Example: 2023-03-13
   * Constraints: No constraints specified.
   */
  public String lastArrDate() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastArrDateAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer lastArrDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The unit line number of this item.
   * Example: /// Example: T01ME01
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String uln() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ulnAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer ulnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Weight of the item in kilograms (if item is a passenger, include on-person bags).
   * Example: /// Example: 5443.335
   * Constraints: No constraints specified.
   */
  public double weight() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-03-13T16:06:00.123Z
   * Constraints: No constraints specified.
   */
  public String weightTs() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer weightTsAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer weightTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The classification code of the commodity or group of commodities.
   * Example: /// Example: 2304116
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String commodityCode() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commodityCodeAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer commodityCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
   * Example: /// Example: STCC
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String commoditySys() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commoditySysAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer commoditySysInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The code denoting the type of material item.
   * Example: /// Example: 530500234
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String productCode() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer productCodeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer productCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
   * Example: /// Example: NSN
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String productSys() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer productSysAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer productSysInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Width of the cargo in meters. Applicable for cargo item types only.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double width() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Length of the cargo in meters. Applicable for cargo item types only.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double length() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Height of the cargo in meters. Applicable for cargo item types only.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double height() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The volume of the item, in cubic meters. Applicable for cargo item types only.
   * Example: /// Example: 7.8902
   * Constraints: No constraints specified.
   */
  public double volume() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Center of gravity position of the item, measured from the item's front datum, in centimeters.
   * Example: /// Example: 112.014
   * Constraints: No constraints specified.
   */
  public double cg() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
   * Example: /// Example: 412.1
   * Constraints: No constraints specified.
   */
  public double fs() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
   * Example: /// Example: 3.1
   * Constraints: No constraints specified.
   */
  public double centerlineOffset() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
   * Example: /// Example: 4000.1
   * Constraints: No constraints specified.
   */
  public double moment() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean airdrop() { int o = __offset(60); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Transportation Control Number of the cargo. Applicable for cargo item types only.
   * Example: /// Example: M1358232245912XXX
   * Constraints: Minimum length = 0, Maximum length = 17
   */
  public String tcn() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tcnAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer tcnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Array of UN hazard classes or division codes that apply to this item.
   * Example: /// Example: [1.1, 1.2]
   * Constraints: No constraints specified.
   */
  public String hazCodes(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int hazCodesLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector hazCodesVector() { return hazCodesVector(new StringVector()); }
  public StringVector hazCodesVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Net explosive weight of the item, in kilograms.
   * Example: /// Example: 51.437
   * Constraints: No constraints specified.
   */
  public double netExpWt() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating this item acts as a container and contains additional items.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean container() { int o = __offset(68); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Array of tracking identifiers that are contained within this item.
   * Example: /// Example: ['2UJ8843K', '745YV1T65']
   * Constraints: No constraints specified.
   */
  public String itemContains(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int itemContainsLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector itemContainsVector() { return itemContainsVector(new StringVector()); }
  public StringVector itemContainsVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int numPalletPos() { int o = __offset(72); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * United States Distinguished Visitor Code, only applicable to people.
   * Example: /// Example: DV-2
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String dvCode() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dvCodeAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer dvCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Optional notes or comments about this item.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
   * Example: /// Example: ['key1', 'key2']
   * Constraints: No constraints specified.
   */
  public String keys(int j) { int o = __offset(78); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int keysLength() { int o = __offset(78); return o != 0 ? __vector_len(o) : 0; }
  public StringVector keysVector() { return keysVector(new StringVector()); }
  public StringVector keysVector(StringVector obj) { int o = __offset(78); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
   * Example: /// Example: ['value1', 'value2']
   * Constraints: No constraints specified.
   */
  public String values(int j) { int o = __offset(80); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int valuesLength() { int o = __offset(80); return o != 0 ? __vector_len(o) : 0; }
  public StringVector valuesVector() { return valuesVector(new StringVector()); }
  public StringVector valuesVector(StringVector obj) { int o = __offset(80); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
   * Example: /// Example: Alt Data Format
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String altDataFormat() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altDataFormatAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer altDataFormatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
   * Example: /// Example: Accepting System
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String accSystem() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer accSystemAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer accSystemInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Additional data required to find this item in the accepting system.
   * Example: /// Example: Accepting System Notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String accSysNotes() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer accSysNotesAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer accSysNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
   * Example: /// Example: ['System key1', 'System key2']
   * Constraints: No constraints specified.
   */
  public String accSysKeys(int j) { int o = __offset(88); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int accSysKeysLength() { int o = __offset(88); return o != 0 ? __vector_len(o) : 0; }
  public StringVector accSysKeysVector() { return accSysKeysVector(new StringVector()); }
  public StringVector accSysKeysVector(StringVector obj) { int o = __offset(88); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
   * Example: /// Example: ['System value1', 'System value2']
   * Constraints: No constraints specified.
   */
  public String accSysValues(int j) { int o = __offset(90); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int accSysValuesLength() { int o = __offset(90); return o != 0 ? __vector_len(o) : 0; }
  public StringVector accSysValuesVector() { return accSysValuesVector(new StringVector()); }
  public StringVector accSysValuesVector(StringVector obj) { int o = __offset(90); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2023-03-21T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(104); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createItem_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idAirLoadPlanOffset,
      int scanCodeOffset,
      int scGenToolOffset,
      int typeOffset,
      int cargoTypeOffset,
      int nameOffset,
      int destinationOffset,
      int departureOffset,
      int receivingUnitOffset,
      int receivingBranchOffset,
      int lastArrDateOffset,
      int ulnOffset,
      double weight,
      int weightTsOffset,
      int commodityCodeOffset,
      int commoditySysOffset,
      int productCodeOffset,
      int productSysOffset,
      double width,
      double length,
      double height,
      double volume,
      double cg,
      double fs,
      double centerlineOffset,
      double moment,
      boolean airdrop,
      int tcnOffset,
      int hazCodesOffset,
      double netExpWt,
      boolean container,
      int itemContainsOffset,
      int numPalletPos,
      int dvCodeOffset,
      int notesOffset,
      int keysOffset,
      int valuesOffset,
      int altDataFormatOffset,
      int accSystemOffset,
      int accSysNotesOffset,
      int accSysKeysOffset,
      int accSysValuesOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(51);
    Item_Abridged.addNetExpWt(builder, netExpWt);
    Item_Abridged.addMoment(builder, moment);
    Item_Abridged.addCenterlineOffset(builder, centerlineOffset);
    Item_Abridged.addFs(builder, fs);
    Item_Abridged.addCg(builder, cg);
    Item_Abridged.addVolume(builder, volume);
    Item_Abridged.addHeight(builder, height);
    Item_Abridged.addLength(builder, length);
    Item_Abridged.addWidth(builder, width);
    Item_Abridged.addWeight(builder, weight);
    Item_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Item_Abridged.addOrigin(builder, originOffset);
    Item_Abridged.addSource(builder, sourceOffset);
    Item_Abridged.addSourceDl(builder, sourceDlOffset);
    Item_Abridged.addCreatedBy(builder, createdByOffset);
    Item_Abridged.addCreatedAt(builder, createdAtOffset);
    Item_Abridged.addAccSysValues(builder, accSysValuesOffset);
    Item_Abridged.addAccSysKeys(builder, accSysKeysOffset);
    Item_Abridged.addAccSysNotes(builder, accSysNotesOffset);
    Item_Abridged.addAccSystem(builder, accSystemOffset);
    Item_Abridged.addAltDataFormat(builder, altDataFormatOffset);
    Item_Abridged.addValues(builder, valuesOffset);
    Item_Abridged.addKeys(builder, keysOffset);
    Item_Abridged.addNotes(builder, notesOffset);
    Item_Abridged.addDvCode(builder, dvCodeOffset);
    Item_Abridged.addNumPalletPos(builder, numPalletPos);
    Item_Abridged.addItemContains(builder, itemContainsOffset);
    Item_Abridged.addHazCodes(builder, hazCodesOffset);
    Item_Abridged.addTcn(builder, tcnOffset);
    Item_Abridged.addProductSys(builder, productSysOffset);
    Item_Abridged.addProductCode(builder, productCodeOffset);
    Item_Abridged.addCommoditySys(builder, commoditySysOffset);
    Item_Abridged.addCommodityCode(builder, commodityCodeOffset);
    Item_Abridged.addWeightTs(builder, weightTsOffset);
    Item_Abridged.addUln(builder, ulnOffset);
    Item_Abridged.addLastArrDate(builder, lastArrDateOffset);
    Item_Abridged.addReceivingBranch(builder, receivingBranchOffset);
    Item_Abridged.addReceivingUnit(builder, receivingUnitOffset);
    Item_Abridged.addDeparture(builder, departureOffset);
    Item_Abridged.addDestination(builder, destinationOffset);
    Item_Abridged.addName(builder, nameOffset);
    Item_Abridged.addCargoType(builder, cargoTypeOffset);
    Item_Abridged.addType(builder, typeOffset);
    Item_Abridged.addScGenTool(builder, scGenToolOffset);
    Item_Abridged.addScanCode(builder, scanCodeOffset);
    Item_Abridged.addIdAirLoadPlan(builder, idAirLoadPlanOffset);
    Item_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Item_Abridged.addId(builder, idOffset);
    Item_Abridged.addDataMode(builder, dataMode);
    Item_Abridged.addContainer(builder, container);
    Item_Abridged.addAirdrop(builder, airdrop);
    return Item_Abridged.endItem_Abridged(builder);
  }

  public static void startItem_Abridged(FlatBufferBuilder builder) { builder.startTable(51); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdAirLoadPlan(FlatBufferBuilder builder, int idAirLoadPlanOffset) { builder.addOffset(2, idAirLoadPlanOffset, 0); }
  public static void addScanCode(FlatBufferBuilder builder, int scanCodeOffset) { builder.addOffset(3, scanCodeOffset, 0); }
  public static void addScGenTool(FlatBufferBuilder builder, int scGenToolOffset) { builder.addOffset(4, scGenToolOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(5, typeOffset, 0); }
  public static void addCargoType(FlatBufferBuilder builder, int cargoTypeOffset) { builder.addOffset(6, cargoTypeOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(7, nameOffset, 0); }
  public static void addDestination(FlatBufferBuilder builder, int destinationOffset) { builder.addOffset(8, destinationOffset, 0); }
  public static void addDeparture(FlatBufferBuilder builder, int departureOffset) { builder.addOffset(9, departureOffset, 0); }
  public static void addReceivingUnit(FlatBufferBuilder builder, int receivingUnitOffset) { builder.addOffset(10, receivingUnitOffset, 0); }
  public static void addReceivingBranch(FlatBufferBuilder builder, int receivingBranchOffset) { builder.addOffset(11, receivingBranchOffset, 0); }
  public static void addLastArrDate(FlatBufferBuilder builder, int lastArrDateOffset) { builder.addOffset(12, lastArrDateOffset, 0); }
  public static void addUln(FlatBufferBuilder builder, int ulnOffset) { builder.addOffset(13, ulnOffset, 0); }
  public static void addWeight(FlatBufferBuilder builder, double weight) { builder.addDouble(14, weight, 0.0); }
  public static void addWeightTs(FlatBufferBuilder builder, int weightTsOffset) { builder.addOffset(15, weightTsOffset, 0); }
  public static void addCommodityCode(FlatBufferBuilder builder, int commodityCodeOffset) { builder.addOffset(16, commodityCodeOffset, 0); }
  public static void addCommoditySys(FlatBufferBuilder builder, int commoditySysOffset) { builder.addOffset(17, commoditySysOffset, 0); }
  public static void addProductCode(FlatBufferBuilder builder, int productCodeOffset) { builder.addOffset(18, productCodeOffset, 0); }
  public static void addProductSys(FlatBufferBuilder builder, int productSysOffset) { builder.addOffset(19, productSysOffset, 0); }
  public static void addWidth(FlatBufferBuilder builder, double width) { builder.addDouble(20, width, 0.0); }
  public static void addLength(FlatBufferBuilder builder, double length) { builder.addDouble(21, length, 0.0); }
  public static void addHeight(FlatBufferBuilder builder, double height) { builder.addDouble(22, height, 0.0); }
  public static void addVolume(FlatBufferBuilder builder, double volume) { builder.addDouble(23, volume, 0.0); }
  public static void addCg(FlatBufferBuilder builder, double cg) { builder.addDouble(24, cg, 0.0); }
  public static void addFs(FlatBufferBuilder builder, double fs) { builder.addDouble(25, fs, 0.0); }
  public static void addCenterlineOffset(FlatBufferBuilder builder, double centerlineOffset) { builder.addDouble(26, centerlineOffset, 0.0); }
  public static void addMoment(FlatBufferBuilder builder, double moment) { builder.addDouble(27, moment, 0.0); }
  public static void addAirdrop(FlatBufferBuilder builder, boolean airdrop) { builder.addBoolean(28, airdrop, false); }
  public static void addTcn(FlatBufferBuilder builder, int tcnOffset) { builder.addOffset(29, tcnOffset, 0); }
  public static void addHazCodes(FlatBufferBuilder builder, int hazCodesOffset) { builder.addOffset(30, hazCodesOffset, 0); }
  public static int createHazCodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHazCodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNetExpWt(FlatBufferBuilder builder, double netExpWt) { builder.addDouble(31, netExpWt, 0.0); }
  public static void addContainer(FlatBufferBuilder builder, boolean container) { builder.addBoolean(32, container, false); }
  public static void addItemContains(FlatBufferBuilder builder, int itemContainsOffset) { builder.addOffset(33, itemContainsOffset, 0); }
  public static int createItemContainsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startItemContainsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNumPalletPos(FlatBufferBuilder builder, int numPalletPos) { builder.addInt(34, numPalletPos, 0); }
  public static void addDvCode(FlatBufferBuilder builder, int dvCodeOffset) { builder.addOffset(35, dvCodeOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(36, notesOffset, 0); }
  public static void addKeys(FlatBufferBuilder builder, int keysOffset) { builder.addOffset(37, keysOffset, 0); }
  public static int createKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(38, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAltDataFormat(FlatBufferBuilder builder, int altDataFormatOffset) { builder.addOffset(39, altDataFormatOffset, 0); }
  public static void addAccSystem(FlatBufferBuilder builder, int accSystemOffset) { builder.addOffset(40, accSystemOffset, 0); }
  public static void addAccSysNotes(FlatBufferBuilder builder, int accSysNotesOffset) { builder.addOffset(41, accSysNotesOffset, 0); }
  public static void addAccSysKeys(FlatBufferBuilder builder, int accSysKeysOffset) { builder.addOffset(42, accSysKeysOffset, 0); }
  public static int createAccSysKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAccSysKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAccSysValues(FlatBufferBuilder builder, int accSysValuesOffset) { builder.addOffset(43, accSysValuesOffset, 0); }
  public static int createAccSysValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAccSysValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(44, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(45, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(46, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(47, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(48, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(49, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(50, dataMode, 0); }
  public static int endItem_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishItem_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ITEM"); }
  public static void finishSizePrefixedItem_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ITEM"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Item_Abridged get(int j) { return get(new Item_Abridged(), j); }
    public Item_Abridged get(Item_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

