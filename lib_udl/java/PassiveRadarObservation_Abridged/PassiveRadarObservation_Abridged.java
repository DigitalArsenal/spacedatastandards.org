// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
 */
@SuppressWarnings("unused")
public final class PassiveRadarObservation_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PassiveRadarObservation_Abridged getRootAsPassiveRadarObservation_Abridged(ByteBuffer _bb) { return getRootAsPassiveRadarObservation_Abridged(_bb, new PassiveRadarObservation_Abridged()); }
  public static PassiveRadarObservation_Abridged getRootAsPassiveRadarObservation_Abridged(ByteBuffer _bb, PassiveRadarObservation_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PassiveRadarObservation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "PASS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PassiveRadarObservation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Ob detection time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2023-01-24T23:35:26.518152Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
   * Example: /// Example: 40699
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Satellite/Catalog number of the target on-orbit object.
   * Example: /// Example: 40699
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
   * Example: /// Example: OCULUSA
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
   * Example: /// Example: RED_CLIFFS_3ABCRN
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idRfemitter() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idRfemitterAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer idRfemitterInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
   * Example: /// Example: OculusRef1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensorRefReceiver() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorRefReceiverAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer idSensorRefReceiverInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Optional external observation identifier provided by the source.
   * Example: /// Example: 26892
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String extObservationId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer extObservationIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer extObservationIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Optional identifier to indicate the specific tasking which produced this observation.
   * Example: /// Example: TASK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String taskId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer taskIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Unique identifier of a track that represents a tracklet for this observation.
   * Example: /// Example: 12212
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trackId() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackIdAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer trackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
   * Example: /// Example: FIRST
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String obPosition() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obPositionAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer obPositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Line of sight azimuth angle in degrees and topocentric frame.
   * Example: /// Example: 134.5
   * Constraints: No constraints specified.
   */
  public double azimuth() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double azimuthUnc() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor azimuth angle bias in degrees.
   * Example: /// Example: 0.123
   * Constraints: No constraints specified.
   */
  public double azimuthBias() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight azimuth in degrees per second.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double azimuthRate() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight elevation in degrees and topocentric frame.
   * Example: /// Example: 76.1
   * Constraints: No constraints specified.
   */
  public double elevation() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double elevationUnc() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor elevation bias in degrees.
   * Example: /// Example: 0.123
   * Constraints: No constraints specified.
   */
  public double elevationBias() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the line of sight elevation in degrees per second.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double elevationRate() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
   * Example: /// Example: 0.00505820232809312
   * Constraints: No constraints specified.
   */
  public double delay() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the delay measurement, in seconds.
   * Example: /// Example: 3.1e-06
   * Constraints: No constraints specified.
   */
  public double delayUnc() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Delay bias in seconds.
   * Example: /// Example: 1.23e-06
   * Constraints: No constraints specified.
   */
  public double delayBias() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
   * Example: /// Example: 754.8212
   * Constraints: No constraints specified.
   */
  public double bistaticRange() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in bistatic range in kilometers.
   * Example: /// Example: 5.1
   * Constraints: No constraints specified.
   */
  public double bistaticRangeUnc() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor bistatic range bias in kilometers.
   * Example: /// Example: 2.34
   * Constraints: No constraints specified.
   */
  public double bistaticRangeBias() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rate of change of the bistatic path in kilometers/sec.
   * Example: /// Example: -0.30222
   * Constraints: No constraints specified.
   */
  public double bistaticRangeRate() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
   * Example: /// Example: 0.123
   * Constraints: No constraints specified.
   */
  public double bistaticRangeRateUnc() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Bistatic range acceleration in kilometers/sec^2.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double bistaticRangeAccel() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double bistaticRangeAccelUnc() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Doppler measurement in hertz.
   * Example: /// Example: -101.781641000597
   * Constraints: No constraints specified.
   */
  public double doppler() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the Doppler measurement in hertz.
   * Example: /// Example: 0.2
   * Constraints: No constraints specified.
   */
  public double dopplerUnc() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Coning angle in degrees.
   * Example: /// Example: 60.1
   * Constraints: No constraints specified.
   */
  public double coning() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in the coning angle measurement, in degrees.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double coningUnc() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
   * Example: /// Example: 0.00592856674135648
   * Constraints: No constraints specified.
   */
  public double tof() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in time of flight in seconds.
   * Example: /// Example: 3.1e-06
   * Constraints: No constraints specified.
   */
  public double tofUnc() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Time of Flight (TOF) bias in seconds.
   * Example: /// Example: 1.23e-06
   * Constraints: No constraints specified.
   */
  public double tofBias() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The target Acceleration measurement in kilometers/sec^2 for this observation.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double accel() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double accelUnc() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight right ascension in degrees and J2000 coordinate frame.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double ra() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight declination angle in degrees and J2000 coordinate frame.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double declination() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: -35.1181763996856
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 139.613567052763
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
   * Example: /// Example: 478.056378
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * X velocity of target in kilometers/sec in J2000 coordinate frame.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double xvel() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Y velocity of target in kilometers/sec in J2000 coordinate frame.
   * Example: /// Example: 3.21
   * Constraints: No constraints specified.
   */
  public double yvel() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Z velocity of target in kilometers/sec in J2000 coordinate frame.
   * Example: /// Example: 3.12
   * Constraints: No constraints specified.
   */
  public double zvel() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radar cross section in meters squared for polarization principal.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double rcs() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double rcsUnc() { int o = __offset(106); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radar cross section in meters squared for orthogonal polarization.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double orthogonalRcs() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double orthogonalRcsUnc() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Signal to noise ratio, in dB.
   * Example: /// Example: 17.292053
   * Constraints: No constraints specified.
   */
  public double snr() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor timing bias in seconds.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double timingBias() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: Descriptor
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(120); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(120, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(132); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
   * Example: /// Example: RADAR
   * Constraints: No constraints specified.
   */
  public String type() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }

  public static int createPassiveRadarObservation_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int obTimeOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int idRfemitterOffset,
      int idSensorRefReceiverOffset,
      int extObservationIdOffset,
      int taskIdOffset,
      int trackIdOffset,
      int obPositionOffset,
      boolean uct,
      double azimuth,
      double azimuthUnc,
      double azimuthBias,
      double azimuthRate,
      double elevation,
      double elevationUnc,
      double elevationBias,
      double elevationRate,
      double delay,
      double delayUnc,
      double delayBias,
      double bistaticRange,
      double bistaticRangeUnc,
      double bistaticRangeBias,
      double bistaticRangeRate,
      double bistaticRangeRateUnc,
      double bistaticRangeAccel,
      double bistaticRangeAccelUnc,
      double doppler,
      double dopplerUnc,
      double coning,
      double coningUnc,
      double tof,
      double tofUnc,
      double tofBias,
      double accel,
      double accelUnc,
      double ra,
      double declination,
      double lat,
      double lon,
      double alt,
      double xvel,
      double yvel,
      double zvel,
      double rcs,
      double rcsUnc,
      double orthogonalRcs,
      double orthogonalRcsUnc,
      double snr,
      double timingBias,
      int transactionIdOffset,
      int descriptorOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      int sourceDlOffset,
      byte dataMode,
      int typeOffset) {
    builder.startTable(66);
    PassiveRadarObservation_Abridged.addTimingBias(builder, timingBias);
    PassiveRadarObservation_Abridged.addSnr(builder, snr);
    PassiveRadarObservation_Abridged.addOrthogonalRcsUnc(builder, orthogonalRcsUnc);
    PassiveRadarObservation_Abridged.addOrthogonalRcs(builder, orthogonalRcs);
    PassiveRadarObservation_Abridged.addRcsUnc(builder, rcsUnc);
    PassiveRadarObservation_Abridged.addRcs(builder, rcs);
    PassiveRadarObservation_Abridged.addZvel(builder, zvel);
    PassiveRadarObservation_Abridged.addYvel(builder, yvel);
    PassiveRadarObservation_Abridged.addXvel(builder, xvel);
    PassiveRadarObservation_Abridged.addAlt(builder, alt);
    PassiveRadarObservation_Abridged.addLon(builder, lon);
    PassiveRadarObservation_Abridged.addLat(builder, lat);
    PassiveRadarObservation_Abridged.addDeclination(builder, declination);
    PassiveRadarObservation_Abridged.addRa(builder, ra);
    PassiveRadarObservation_Abridged.addAccelUnc(builder, accelUnc);
    PassiveRadarObservation_Abridged.addAccel(builder, accel);
    PassiveRadarObservation_Abridged.addTofBias(builder, tofBias);
    PassiveRadarObservation_Abridged.addTofUnc(builder, tofUnc);
    PassiveRadarObservation_Abridged.addTof(builder, tof);
    PassiveRadarObservation_Abridged.addConingUnc(builder, coningUnc);
    PassiveRadarObservation_Abridged.addConing(builder, coning);
    PassiveRadarObservation_Abridged.addDopplerUnc(builder, dopplerUnc);
    PassiveRadarObservation_Abridged.addDoppler(builder, doppler);
    PassiveRadarObservation_Abridged.addBistaticRangeAccelUnc(builder, bistaticRangeAccelUnc);
    PassiveRadarObservation_Abridged.addBistaticRangeAccel(builder, bistaticRangeAccel);
    PassiveRadarObservation_Abridged.addBistaticRangeRateUnc(builder, bistaticRangeRateUnc);
    PassiveRadarObservation_Abridged.addBistaticRangeRate(builder, bistaticRangeRate);
    PassiveRadarObservation_Abridged.addBistaticRangeBias(builder, bistaticRangeBias);
    PassiveRadarObservation_Abridged.addBistaticRangeUnc(builder, bistaticRangeUnc);
    PassiveRadarObservation_Abridged.addBistaticRange(builder, bistaticRange);
    PassiveRadarObservation_Abridged.addDelayBias(builder, delayBias);
    PassiveRadarObservation_Abridged.addDelayUnc(builder, delayUnc);
    PassiveRadarObservation_Abridged.addDelay(builder, delay);
    PassiveRadarObservation_Abridged.addElevationRate(builder, elevationRate);
    PassiveRadarObservation_Abridged.addElevationBias(builder, elevationBias);
    PassiveRadarObservation_Abridged.addElevationUnc(builder, elevationUnc);
    PassiveRadarObservation_Abridged.addElevation(builder, elevation);
    PassiveRadarObservation_Abridged.addAzimuthRate(builder, azimuthRate);
    PassiveRadarObservation_Abridged.addAzimuthBias(builder, azimuthBias);
    PassiveRadarObservation_Abridged.addAzimuthUnc(builder, azimuthUnc);
    PassiveRadarObservation_Abridged.addAzimuth(builder, azimuth);
    PassiveRadarObservation_Abridged.addType(builder, typeOffset);
    PassiveRadarObservation_Abridged.addSourceDl(builder, sourceDlOffset);
    PassiveRadarObservation_Abridged.addOrigNetwork(builder, origNetworkOffset);
    PassiveRadarObservation_Abridged.addOrigin(builder, originOffset);
    PassiveRadarObservation_Abridged.addSource(builder, sourceOffset);
    PassiveRadarObservation_Abridged.addCreatedBy(builder, createdByOffset);
    PassiveRadarObservation_Abridged.addCreatedAt(builder, createdAtOffset);
    PassiveRadarObservation_Abridged.addDescriptor(builder, descriptorOffset);
    PassiveRadarObservation_Abridged.addTransactionId(builder, transactionIdOffset);
    PassiveRadarObservation_Abridged.addObPosition(builder, obPositionOffset);
    PassiveRadarObservation_Abridged.addTrackId(builder, trackIdOffset);
    PassiveRadarObservation_Abridged.addTaskId(builder, taskIdOffset);
    PassiveRadarObservation_Abridged.addExtObservationId(builder, extObservationIdOffset);
    PassiveRadarObservation_Abridged.addIdSensorRefReceiver(builder, idSensorRefReceiverOffset);
    PassiveRadarObservation_Abridged.addIdRfemitter(builder, idRfemitterOffset);
    PassiveRadarObservation_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    PassiveRadarObservation_Abridged.addIdSensor(builder, idSensorOffset);
    PassiveRadarObservation_Abridged.addOrigObjectId(builder, origObjectIdOffset);
    PassiveRadarObservation_Abridged.addSatNo(builder, satNo);
    PassiveRadarObservation_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    PassiveRadarObservation_Abridged.addObTime(builder, obTimeOffset);
    PassiveRadarObservation_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    PassiveRadarObservation_Abridged.addId(builder, idOffset);
    PassiveRadarObservation_Abridged.addDataMode(builder, dataMode);
    PassiveRadarObservation_Abridged.addUct(builder, uct);
    return PassiveRadarObservation_Abridged.endPassiveRadarObservation_Abridged(builder);
  }

  public static void startPassiveRadarObservation_Abridged(FlatBufferBuilder builder) { builder.startTable(66); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(2, obTimeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(3, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(4, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(5, origObjectIdOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(6, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(7, origSensorIdOffset, 0); }
  public static void addIdRfemitter(FlatBufferBuilder builder, int idRfemitterOffset) { builder.addOffset(8, idRfemitterOffset, 0); }
  public static void addIdSensorRefReceiver(FlatBufferBuilder builder, int idSensorRefReceiverOffset) { builder.addOffset(9, idSensorRefReceiverOffset, 0); }
  public static void addExtObservationId(FlatBufferBuilder builder, int extObservationIdOffset) { builder.addOffset(10, extObservationIdOffset, 0); }
  public static void addTaskId(FlatBufferBuilder builder, int taskIdOffset) { builder.addOffset(11, taskIdOffset, 0); }
  public static void addTrackId(FlatBufferBuilder builder, int trackIdOffset) { builder.addOffset(12, trackIdOffset, 0); }
  public static void addObPosition(FlatBufferBuilder builder, int obPositionOffset) { builder.addOffset(13, obPositionOffset, 0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(14, uct, false); }
  public static void addAzimuth(FlatBufferBuilder builder, double azimuth) { builder.addDouble(15, azimuth, 0.0); }
  public static void addAzimuthUnc(FlatBufferBuilder builder, double azimuthUnc) { builder.addDouble(16, azimuthUnc, 0.0); }
  public static void addAzimuthBias(FlatBufferBuilder builder, double azimuthBias) { builder.addDouble(17, azimuthBias, 0.0); }
  public static void addAzimuthRate(FlatBufferBuilder builder, double azimuthRate) { builder.addDouble(18, azimuthRate, 0.0); }
  public static void addElevation(FlatBufferBuilder builder, double elevation) { builder.addDouble(19, elevation, 0.0); }
  public static void addElevationUnc(FlatBufferBuilder builder, double elevationUnc) { builder.addDouble(20, elevationUnc, 0.0); }
  public static void addElevationBias(FlatBufferBuilder builder, double elevationBias) { builder.addDouble(21, elevationBias, 0.0); }
  public static void addElevationRate(FlatBufferBuilder builder, double elevationRate) { builder.addDouble(22, elevationRate, 0.0); }
  public static void addDelay(FlatBufferBuilder builder, double delay) { builder.addDouble(23, delay, 0.0); }
  public static void addDelayUnc(FlatBufferBuilder builder, double delayUnc) { builder.addDouble(24, delayUnc, 0.0); }
  public static void addDelayBias(FlatBufferBuilder builder, double delayBias) { builder.addDouble(25, delayBias, 0.0); }
  public static void addBistaticRange(FlatBufferBuilder builder, double bistaticRange) { builder.addDouble(26, bistaticRange, 0.0); }
  public static void addBistaticRangeUnc(FlatBufferBuilder builder, double bistaticRangeUnc) { builder.addDouble(27, bistaticRangeUnc, 0.0); }
  public static void addBistaticRangeBias(FlatBufferBuilder builder, double bistaticRangeBias) { builder.addDouble(28, bistaticRangeBias, 0.0); }
  public static void addBistaticRangeRate(FlatBufferBuilder builder, double bistaticRangeRate) { builder.addDouble(29, bistaticRangeRate, 0.0); }
  public static void addBistaticRangeRateUnc(FlatBufferBuilder builder, double bistaticRangeRateUnc) { builder.addDouble(30, bistaticRangeRateUnc, 0.0); }
  public static void addBistaticRangeAccel(FlatBufferBuilder builder, double bistaticRangeAccel) { builder.addDouble(31, bistaticRangeAccel, 0.0); }
  public static void addBistaticRangeAccelUnc(FlatBufferBuilder builder, double bistaticRangeAccelUnc) { builder.addDouble(32, bistaticRangeAccelUnc, 0.0); }
  public static void addDoppler(FlatBufferBuilder builder, double doppler) { builder.addDouble(33, doppler, 0.0); }
  public static void addDopplerUnc(FlatBufferBuilder builder, double dopplerUnc) { builder.addDouble(34, dopplerUnc, 0.0); }
  public static void addConing(FlatBufferBuilder builder, double coning) { builder.addDouble(35, coning, 0.0); }
  public static void addConingUnc(FlatBufferBuilder builder, double coningUnc) { builder.addDouble(36, coningUnc, 0.0); }
  public static void addTof(FlatBufferBuilder builder, double tof) { builder.addDouble(37, tof, 0.0); }
  public static void addTofUnc(FlatBufferBuilder builder, double tofUnc) { builder.addDouble(38, tofUnc, 0.0); }
  public static void addTofBias(FlatBufferBuilder builder, double tofBias) { builder.addDouble(39, tofBias, 0.0); }
  public static void addAccel(FlatBufferBuilder builder, double accel) { builder.addDouble(40, accel, 0.0); }
  public static void addAccelUnc(FlatBufferBuilder builder, double accelUnc) { builder.addDouble(41, accelUnc, 0.0); }
  public static void addRa(FlatBufferBuilder builder, double ra) { builder.addDouble(42, ra, 0.0); }
  public static void addDeclination(FlatBufferBuilder builder, double declination) { builder.addDouble(43, declination, 0.0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(44, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(45, lon, 0.0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(46, alt, 0.0); }
  public static void addXvel(FlatBufferBuilder builder, double xvel) { builder.addDouble(47, xvel, 0.0); }
  public static void addYvel(FlatBufferBuilder builder, double yvel) { builder.addDouble(48, yvel, 0.0); }
  public static void addZvel(FlatBufferBuilder builder, double zvel) { builder.addDouble(49, zvel, 0.0); }
  public static void addRcs(FlatBufferBuilder builder, double rcs) { builder.addDouble(50, rcs, 0.0); }
  public static void addRcsUnc(FlatBufferBuilder builder, double rcsUnc) { builder.addDouble(51, rcsUnc, 0.0); }
  public static void addOrthogonalRcs(FlatBufferBuilder builder, double orthogonalRcs) { builder.addDouble(52, orthogonalRcs, 0.0); }
  public static void addOrthogonalRcsUnc(FlatBufferBuilder builder, double orthogonalRcsUnc) { builder.addDouble(53, orthogonalRcsUnc, 0.0); }
  public static void addSnr(FlatBufferBuilder builder, double snr) { builder.addDouble(54, snr, 0.0); }
  public static void addTimingBias(FlatBufferBuilder builder, double timingBias) { builder.addDouble(55, timingBias, 0.0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(56, transactionIdOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(57, descriptorOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(58, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(59, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(60, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(61, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(62, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(63, sourceDlOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(64, dataMode, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(65, typeOffset, 0); }
  public static int endPassiveRadarObservation_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPassiveRadarObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "PASS"); }
  public static void finishSizePrefixedPassiveRadarObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "PASS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PassiveRadarObservation_Abridged get(int j) { return get(new PassiveRadarObservation_Abridged(), j); }
    public PassiveRadarObservation_Abridged get(PassiveRadarObservation_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

