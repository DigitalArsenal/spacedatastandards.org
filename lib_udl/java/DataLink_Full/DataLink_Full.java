// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Beta Version DataLink: Detailed instructions regarding the operations of data links.
 */
@SuppressWarnings("unused")
public final class DataLink_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DataLink_Full getRootAsDataLink_Full(ByteBuffer _bb) { return getRootAsDataLink_Full(_bb, new DataLink_Full()); }
  public static DataLink_Full getRootAsDataLink_Full(ByteBuffer _bb, DataLink_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DataLink_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataLink_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Specifies the unique operation or exercise name, nickname, or codeword assigned to a joint exercise or operation plan.
   * Example: /// Example: DESERT WIND
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String opExName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opExNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer opExNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The identifier of the originator of this message.
   * Example: /// Example: USCENTCOM
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String originator() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originatorAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer originatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The start of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The end of the effective time period of this data link message, in ISO 8601 UTC format with millisecond precision. This may be a relative stop time if used with stopTimeMod.
   * Example: /// Example: 2024-01-08T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String stopTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stopTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer stopTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * A qualifier for the end of the effective time period of this data link message, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
   * Example: /// Example: AFTER
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String stopTimeMod() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stopTimeModAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer stopTimeModInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
   * Example: /// Example: SACEUR 106
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String planOrigNum() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer planOrigNumAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer planOrigNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Provides an additional caveat further identifying the exercise or modifies the exercise nickname.
   * Example: /// Example: CONTROL
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String opExInfo() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opExInfoAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer opExInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The secondary nickname of the option or the alternative of the operational plan or order.
   * Example: /// Example: ORANGE
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String opExInfoAlt() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opExInfoAltAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer opExInfoAltInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The unique message identifier assigned by the originator.
   * Example: /// Example: 1201003
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String serialNum() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serialNumAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer serialNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The month in which this message originated.
   * Example: /// Example: OCT
   * Constraints: Minimum length = 0, Maximum length = 12
   */
  public String month() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer monthAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer monthInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The qualifier which caveats the message status such as AMP (Amplification), CHG (Change), etc.
   * Example: /// Example: CHG
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String qualifier() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer qualifierAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer qualifierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The serial number associated with the message qualifier.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int qualSn() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String references(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int referencesLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector referencesVector() { return referencesVector(new StringVector()); }
  public StringVector referencesVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The identifier for this data link message cancellation.
   * Example: /// Example: ABSTAT
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String canxId() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer canxIdAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer canxIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The originator of this data link message cancellation.
   * Example: /// Example: 505 AOC
   * Constraints: Minimum length = 0, Maximum length = 30
   */
  public String canxOriginator() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer canxOriginatorAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer canxOriginatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Timestamp of the data link message cancellation, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String canxTs() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer canxTsAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer canxTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Serial number assigned to this data link message cancellation.
   * Example: /// Example: ABC1234567
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String canxSerialNum() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer canxSerialNumAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer canxSerialNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Indicates any special actions, restrictions, guidance, or information relating to this data link message cancellation.
   * Example: /// Example: PASEP
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String canxSpecialNotation() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer canxSpecialNotationAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer canxSpecialNotationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Array of NATO Subject Indicator Codes (SIC) or filing numbers of this data link message or document being cancelled.
   * Example: /// Example: ['RDU', 'X234BS']
   * Constraints: No constraints specified.
   */
  public String canxSics(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int canxSicsLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector canxSicsVector() { return canxSicsVector(new StringVector()); }
  public StringVector canxSicsVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The name of the point of contact for this data link message.
   * Example: /// Example: F. BURNS
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String pocName() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pocNameAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer pocNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The rank or position of the point of contact for this data link message in a military or civilian organization.
   * Example: /// Example: MAJ
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String pocRank() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pocRankAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer pocRankInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The unit identifier or call sign of the point of contact for this data link message.
   * Example: /// Example: 4077 MASH
   * Constraints: Minimum length = 0, Maximum length = 38
   */
  public String pocCallSign() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pocCallSignAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer pocCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * The location name of the point of contact for this data link message.
   * Example: /// Example: CAMP SWAMPY
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String pocLocName() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pocLocNameAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer pocLocNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * WGS84 latitude of the point of contact for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double pocLat() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the point of contact for this data link message, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double pocLon() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of telephone numbers, radio frequency values, or email addresses of the point of contact for this data link message.
   * Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
   * Constraints: No constraints specified.
   */
  public String pocNums(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int pocNumsLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector pocNumsVector() { return pocNumsVector(new StringVector()); }
  public StringVector pocNumsVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The code for the point of reference from which the coordinates and networks are computed.
   * Example: /// Example: EUR-T
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String geoDatum() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geoDatumAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer geoDatumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String refPoints(int j) { int o = __offset(62); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int refPointsLength() { int o = __offset(62); return o != 0 ? __vector_len(o) : 0; }
  public StringVector refPointsVector() { return refPointsVector(new StringVector()); }
  public StringVector refPointsVector(StringVector obj) { int o = __offset(62); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of information regarding the function, frequency, and priority of interface control and coordination nets for this data link message. There can be 1 to many DataLinkVoiceCoord collections within the datalink service.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String voiceCoord(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int voiceCoordLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector voiceCoordVector() { return voiceCoordVector(new StringVector()); }
  public StringVector voiceCoordVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Indicates the data terminal settings the system defaults to, either automatic correlation/decorrelation (AUTO) or manual (MAN).
   * Example: /// Example: MAN
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String sysDefaultCode() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sysDefaultCodeAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sysDefaultCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The correlation window size multiplier to stretch or reduce the window size. Required if sysDefaultCode field is "MAN". Allowable entries are 0.5 to 3.0 in increments of 0.1.
   * Example: /// Example: 2.1
   * Constraints: No constraints specified.
   */
  public double winSizeMult() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number added to the basic window calculated from track qualities to ensure that windows still allow valid correlations. Required if sysDefaultCode field is "MAN". Allowable entries are 0.0 to 2.0 in increments of 0.25.
   * Example: /// Example: 1.25
   * Constraints: No constraints specified.
   */
  public double winSizeMin() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Track quality to prevent correlation windows from being unrealistically large. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 3 to 7.
   * Example: /// Example: 6
   * Constraints: No constraints specified.
   */
  public int minTrackQual() { int o = __offset(72); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Track quality to prevent correlation windows from being unrealistically small. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 8 to 15.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int maxTrackQual() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Track quality to enter if too many duals involving low track quality tracks are occurring. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 2 to 6.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int resTrackQual() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum difference between the reported course of the remote track and the calculated course of the local track. Required if sysDefaultCode field is "MAN". Allowable entries are 15 to 90 in increments of 15 degrees.
   * Example: /// Example: 60
   * Constraints: No constraints specified.
   */
  public int courseDiff() { int o = __offset(78); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum percentage the faster track speed may differ from the slower track speed. Required if sysDefaultCode field is "MAN". Allowable entries are 10 to 100 in increments of 10.
   * Example: /// Example: 50
   * Constraints: No constraints specified.
   */
  public int speedDiff() { int o = __offset(80); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum altitude difference between two air tracks, in thousands of feet. Required if sysDefaultCode field is "MAN". Allowable entires are 5 to 50 in increments of 5000 feet.
   * Example: /// Example: 20
   * Constraints: No constraints specified.
   */
  public int altDiff() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number used for minimum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int minGeoPosQual() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number used for maximum geodetic position quality. Required if sysDefaultCode field is "MAN". Allowable entires are integers from 1 to 15.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int maxGeoPosQual() { int o = __offset(86); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Distance between the common and remote track is to exceed the applicable correlation window for the two tracks in order to be decorrelated. Required if sysDefaultCode field is "MAN". Allowable entries are 1.0 to 2.0 in increments of 0.1.
   * Example: /// Example: 1.7
   * Constraints: No constraints specified.
   */
  public double decorrWinMult() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of consecutive remote track reports that must meet the decorrelation criteria before the decorrelation is executed. Required if sysDefaultCode field is "MAN". Allowable entries are integers from 1 to 5.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int consecDecorr() { int o = __offset(90); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String multiDuty(int j) { int o = __offset(92); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int multiDutyLength() { int o = __offset(92); return o != 0 ? __vector_len(o) : 0; }
  public StringVector multiDutyVector() { return multiDutyVector(new StringVector()); }
  public StringVector multiDutyVector(StringVector obj) { int o = __offset(92); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String ops(int j) { int o = __offset(94); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int opsLength() { int o = __offset(94); return o != 0 ? __vector_len(o) : 0; }
  public StringVector opsVector() { return opsVector(new StringVector()); }
  public StringVector opsVector(StringVector obj) { int o = __offset(94); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Designator of the unit for Joint Range Extension (JRE).
   * Example: /// Example: CVN-72
   * Constraints: Minimum length = 0, Maximum length = 30
   */
  public String jreUnitDes() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jreUnitDesAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer jreUnitDesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Call sign which identifies one or more communications facilities, commands, authorities, or activities for Joint Range Extension (JRE) units.
   * Example: /// Example: CHARLIE ONE
   * Constraints: Minimum length = 0, Maximum length = 38
   */
  public String jreCallSign() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jreCallSignAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer jreCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Link-16 octal track number assigned as the primary JTIDS unit address.
   * Example: /// Example: 71777
   * Constraints: No constraints specified.
   */
  public int jrePriAdd() { int o = __offset(100); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Link-16 octal track number assigned as the secondary JTIDS unit address.
   * Example: /// Example: 77771
   * Constraints: No constraints specified.
   */
  public int jreSecAdd() { int o = __offset(102); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Joint Range Extension (JRE) unit details.
   * Example: /// Example: JRE details
   * Constraints: Minimum length = 0, Maximum length = 3000
   */
  public String jreDetails() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jreDetailsAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer jreDetailsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String specTracks(int j) { int o = __offset(106); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int specTracksLength() { int o = __offset(106); return o != 0 ? __vector_len(o) : 0; }
  public StringVector specTracksVector() { return specTracksVector(new StringVector()); }
  public StringVector specTracksVector(StringVector obj) { int o = __offset(106); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of non-link specific data unit designators.
   * Example: /// Example: ['CS:GRAY GHOST', 'CS:WHITE WHALE']
   * Constraints: No constraints specified.
   */
  public String nonLinkUnitDes(int j) { int o = __offset(108); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int nonLinkUnitDesLength() { int o = __offset(108); return o != 0 ? __vector_len(o) : 0; }
  public StringVector nonLinkUnitDesVector() { return nonLinkUnitDesVector(new StringVector()); }
  public StringVector nonLinkUnitDesVector(StringVector obj) { int o = __offset(108); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Link-16 octal track numbers used as the lower limit of a track block.
   * Example: /// Example: [1234, 2345]
   * Constraints: No constraints specified.
   */
  public String trackNumBlockLls(int j) { int o = __offset(110); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int trackNumBlockLlsLength() { int o = __offset(110); return o != 0 ? __vector_len(o) : 0; }
  public StringVector trackNumBlockLlsVector() { return trackNumBlockLlsVector(new StringVector()); }
  public StringVector trackNumBlockLlsVector(StringVector obj) { int o = __offset(110); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of defined ranges of Link-11/11B track numbers assigned to a participating unit or reporting unit.
   * Example: /// Example: ['0200-0300', '0400-4412']
   * Constraints: No constraints specified.
   */
  public String trackNumBlocks(int j) { int o = __offset(112); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int trackNumBlocksLength() { int o = __offset(112); return o != 0 ? __vector_len(o) : 0; }
  public StringVector trackNumBlocksVector() { return trackNumBlocksVector(new StringVector()); }
  public StringVector trackNumBlocksVector(StringVector obj) { int o = __offset(112); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Data link management code word.
   * Example: /// Example: VICTOR
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String mgmtCode() { int o = __offset(114); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mgmtCodeAsByteBuffer() { return __vector_as_bytebuffer(114, 1); }
  public ByteBuffer mgmtCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 1); }
  /**
   * Data link management code word meaning.
   * Example: /// Example: ORBIT AT POINT BRAVO
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String mgmtCodeMeaning() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mgmtCodeMeaningAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer mgmtCodeMeaningInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Flag Indicating if formal acknowledgement is required for the particular data link message being sent.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean ackReq() { int o = __offset(118); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Array of instructions for acknowledging and the force or units required to acknowledge the data link message being sent.
   * Example: /// Example: ['AOC EXT 2345', '317 AW']
   * Constraints: No constraints specified.
   */
  public String ackInstUnits(int j) { int o = __offset(120); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ackInstUnitsLength() { int o = __offset(120); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ackInstUnitsVector() { return ackInstUnitsVector(new StringVector()); }
  public StringVector ackInstUnitsVector(StringVector obj) { int o = __offset(120); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Markings that define the source material or the original classification authority for this data link message.
   * Example: /// Example: USJFCOM EXORD SOLID WASTE 98
   * Constraints: Minimum length = 0, Maximum length = 55
   */
  public String classSource() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classSourceAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer classSourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Array of codes that indicate the reasons material is classified.
   * Example: /// Example: ['15C', '15D']
   * Constraints: No constraints specified.
   */
  public String classReasons(int j) { int o = __offset(124); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int classReasonsLength() { int o = __offset(124); return o != 0 ? __vector_len(o) : 0; }
  public StringVector classReasonsVector() { return classReasonsVector(new StringVector()); }
  public StringVector classReasonsVector(StringVector obj) { int o = __offset(124); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of markings that provide the literal guidance or dates for the downgrading or declassification of this data link message.
   * Example: /// Example: ['AT EXERCISE ENDEX', 'DATE:25NOV1997']
   * Constraints: No constraints specified.
   */
  public String decInstDates(int j) { int o = __offset(126); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int decInstDatesLength() { int o = __offset(126); return o != 0 ? __vector_len(o) : 0; }
  public StringVector decInstDatesVector() { return decInstDatesVector(new StringVector()); }
  public StringVector decInstDatesVector(StringVector obj) { int o = __offset(126); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of codes that provide justification for exemption from automatic downgrading or declassification.
   * Example: /// Example: ['X1', 'X2']
   * Constraints: No constraints specified.
   */
  public String decExemptCodes(int j) { int o = __offset(128); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int decExemptCodesLength() { int o = __offset(128); return o != 0 ? __vector_len(o) : 0; }
  public StringVector decExemptCodesVector() { return decExemptCodesVector(new StringVector()); }
  public StringVector decExemptCodesVector(StringVector obj) { int o = __offset(128); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of remarks associated with this data link message.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String remarks(int j) { int o = __offset(130); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int remarksLength() { int o = __offset(130); return o != 0 ? __vector_len(o) : 0; }
  public StringVector remarksVector() { return remarksVector(new StringVector()); }
  public StringVector remarksVector(StringVector obj) { int o = __offset(130); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(132); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(132, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 132, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(140); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(140, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 140, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(142); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(142, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 142, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(144); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(144, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 144, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(146); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(146, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 146, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(148); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(148, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 148, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(150); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createDataLink_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int opExNameOffset,
      int originatorOffset,
      int startTimeOffset,
      int stopTimeOffset,
      int stopTimeModOffset,
      int planOrigNumOffset,
      int opExInfoOffset,
      int opExInfoAltOffset,
      int serialNumOffset,
      int monthOffset,
      int qualifierOffset,
      int qualSn,
      int referencesOffset,
      int canxIdOffset,
      int canxOriginatorOffset,
      int canxTsOffset,
      int canxSerialNumOffset,
      int canxSpecialNotationOffset,
      int canxSicsOffset,
      int pocNameOffset,
      int pocRankOffset,
      int pocCallSignOffset,
      int pocLocNameOffset,
      double pocLat,
      double pocLon,
      int pocNumsOffset,
      int geoDatumOffset,
      int refPointsOffset,
      int voiceCoordOffset,
      int sysDefaultCodeOffset,
      double winSizeMult,
      double winSizeMin,
      int minTrackQual,
      int maxTrackQual,
      int resTrackQual,
      int courseDiff,
      int speedDiff,
      int altDiff,
      int minGeoPosQual,
      int maxGeoPosQual,
      double decorrWinMult,
      int consecDecorr,
      int multiDutyOffset,
      int opsOffset,
      int jreUnitDesOffset,
      int jreCallSignOffset,
      int jrePriAdd,
      int jreSecAdd,
      int jreDetailsOffset,
      int specTracksOffset,
      int nonLinkUnitDesOffset,
      int trackNumBlockLlsOffset,
      int trackNumBlocksOffset,
      int mgmtCodeOffset,
      int mgmtCodeMeaningOffset,
      boolean ackReq,
      int ackInstUnitsOffset,
      int classSourceOffset,
      int classReasonsOffset,
      int decInstDatesOffset,
      int decExemptCodesOffset,
      int remarksOffset,
      int rawFileUriOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(74);
    DataLink_Full.addDecorrWinMult(builder, decorrWinMult);
    DataLink_Full.addWinSizeMin(builder, winSizeMin);
    DataLink_Full.addWinSizeMult(builder, winSizeMult);
    DataLink_Full.addPocLon(builder, pocLon);
    DataLink_Full.addPocLat(builder, pocLat);
    DataLink_Full.addOrigNetwork(builder, origNetworkOffset);
    DataLink_Full.addOrigin(builder, originOffset);
    DataLink_Full.addSource(builder, sourceOffset);
    DataLink_Full.addSourceDl(builder, sourceDlOffset);
    DataLink_Full.addUpdatedBy(builder, updatedByOffset);
    DataLink_Full.addUpdatedAt(builder, updatedAtOffset);
    DataLink_Full.addCreatedBy(builder, createdByOffset);
    DataLink_Full.addCreatedAt(builder, createdAtOffset);
    DataLink_Full.addRawFileUri(builder, rawFileUriOffset);
    DataLink_Full.addRemarks(builder, remarksOffset);
    DataLink_Full.addDecExemptCodes(builder, decExemptCodesOffset);
    DataLink_Full.addDecInstDates(builder, decInstDatesOffset);
    DataLink_Full.addClassReasons(builder, classReasonsOffset);
    DataLink_Full.addClassSource(builder, classSourceOffset);
    DataLink_Full.addAckInstUnits(builder, ackInstUnitsOffset);
    DataLink_Full.addMgmtCodeMeaning(builder, mgmtCodeMeaningOffset);
    DataLink_Full.addMgmtCode(builder, mgmtCodeOffset);
    DataLink_Full.addTrackNumBlocks(builder, trackNumBlocksOffset);
    DataLink_Full.addTrackNumBlockLls(builder, trackNumBlockLlsOffset);
    DataLink_Full.addNonLinkUnitDes(builder, nonLinkUnitDesOffset);
    DataLink_Full.addSpecTracks(builder, specTracksOffset);
    DataLink_Full.addJreDetails(builder, jreDetailsOffset);
    DataLink_Full.addJreSecAdd(builder, jreSecAdd);
    DataLink_Full.addJrePriAdd(builder, jrePriAdd);
    DataLink_Full.addJreCallSign(builder, jreCallSignOffset);
    DataLink_Full.addJreUnitDes(builder, jreUnitDesOffset);
    DataLink_Full.addOps(builder, opsOffset);
    DataLink_Full.addMultiDuty(builder, multiDutyOffset);
    DataLink_Full.addConsecDecorr(builder, consecDecorr);
    DataLink_Full.addMaxGeoPosQual(builder, maxGeoPosQual);
    DataLink_Full.addMinGeoPosQual(builder, minGeoPosQual);
    DataLink_Full.addAltDiff(builder, altDiff);
    DataLink_Full.addSpeedDiff(builder, speedDiff);
    DataLink_Full.addCourseDiff(builder, courseDiff);
    DataLink_Full.addResTrackQual(builder, resTrackQual);
    DataLink_Full.addMaxTrackQual(builder, maxTrackQual);
    DataLink_Full.addMinTrackQual(builder, minTrackQual);
    DataLink_Full.addSysDefaultCode(builder, sysDefaultCodeOffset);
    DataLink_Full.addVoiceCoord(builder, voiceCoordOffset);
    DataLink_Full.addRefPoints(builder, refPointsOffset);
    DataLink_Full.addGeoDatum(builder, geoDatumOffset);
    DataLink_Full.addPocNums(builder, pocNumsOffset);
    DataLink_Full.addPocLocName(builder, pocLocNameOffset);
    DataLink_Full.addPocCallSign(builder, pocCallSignOffset);
    DataLink_Full.addPocRank(builder, pocRankOffset);
    DataLink_Full.addPocName(builder, pocNameOffset);
    DataLink_Full.addCanxSics(builder, canxSicsOffset);
    DataLink_Full.addCanxSpecialNotation(builder, canxSpecialNotationOffset);
    DataLink_Full.addCanxSerialNum(builder, canxSerialNumOffset);
    DataLink_Full.addCanxTs(builder, canxTsOffset);
    DataLink_Full.addCanxOriginator(builder, canxOriginatorOffset);
    DataLink_Full.addCanxId(builder, canxIdOffset);
    DataLink_Full.addReferences(builder, referencesOffset);
    DataLink_Full.addQualSn(builder, qualSn);
    DataLink_Full.addQualifier(builder, qualifierOffset);
    DataLink_Full.addMonth(builder, monthOffset);
    DataLink_Full.addSerialNum(builder, serialNumOffset);
    DataLink_Full.addOpExInfoAlt(builder, opExInfoAltOffset);
    DataLink_Full.addOpExInfo(builder, opExInfoOffset);
    DataLink_Full.addPlanOrigNum(builder, planOrigNumOffset);
    DataLink_Full.addStopTimeMod(builder, stopTimeModOffset);
    DataLink_Full.addStopTime(builder, stopTimeOffset);
    DataLink_Full.addStartTime(builder, startTimeOffset);
    DataLink_Full.addOriginator(builder, originatorOffset);
    DataLink_Full.addOpExName(builder, opExNameOffset);
    DataLink_Full.addClassificationMarking(builder, classificationMarkingOffset);
    DataLink_Full.addId(builder, idOffset);
    DataLink_Full.addDataMode(builder, dataMode);
    DataLink_Full.addAckReq(builder, ackReq);
    return DataLink_Full.endDataLink_Full(builder);
  }

  public static void startDataLink_Full(FlatBufferBuilder builder) { builder.startTable(74); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addOpExName(FlatBufferBuilder builder, int opExNameOffset) { builder.addOffset(2, opExNameOffset, 0); }
  public static void addOriginator(FlatBufferBuilder builder, int originatorOffset) { builder.addOffset(3, originatorOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(4, startTimeOffset, 0); }
  public static void addStopTime(FlatBufferBuilder builder, int stopTimeOffset) { builder.addOffset(5, stopTimeOffset, 0); }
  public static void addStopTimeMod(FlatBufferBuilder builder, int stopTimeModOffset) { builder.addOffset(6, stopTimeModOffset, 0); }
  public static void addPlanOrigNum(FlatBufferBuilder builder, int planOrigNumOffset) { builder.addOffset(7, planOrigNumOffset, 0); }
  public static void addOpExInfo(FlatBufferBuilder builder, int opExInfoOffset) { builder.addOffset(8, opExInfoOffset, 0); }
  public static void addOpExInfoAlt(FlatBufferBuilder builder, int opExInfoAltOffset) { builder.addOffset(9, opExInfoAltOffset, 0); }
  public static void addSerialNum(FlatBufferBuilder builder, int serialNumOffset) { builder.addOffset(10, serialNumOffset, 0); }
  public static void addMonth(FlatBufferBuilder builder, int monthOffset) { builder.addOffset(11, monthOffset, 0); }
  public static void addQualifier(FlatBufferBuilder builder, int qualifierOffset) { builder.addOffset(12, qualifierOffset, 0); }
  public static void addQualSn(FlatBufferBuilder builder, int qualSn) { builder.addInt(13, qualSn, 0); }
  public static void addReferences(FlatBufferBuilder builder, int referencesOffset) { builder.addOffset(14, referencesOffset, 0); }
  public static int createReferencesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReferencesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCanxId(FlatBufferBuilder builder, int canxIdOffset) { builder.addOffset(15, canxIdOffset, 0); }
  public static void addCanxOriginator(FlatBufferBuilder builder, int canxOriginatorOffset) { builder.addOffset(16, canxOriginatorOffset, 0); }
  public static void addCanxTs(FlatBufferBuilder builder, int canxTsOffset) { builder.addOffset(17, canxTsOffset, 0); }
  public static void addCanxSerialNum(FlatBufferBuilder builder, int canxSerialNumOffset) { builder.addOffset(18, canxSerialNumOffset, 0); }
  public static void addCanxSpecialNotation(FlatBufferBuilder builder, int canxSpecialNotationOffset) { builder.addOffset(19, canxSpecialNotationOffset, 0); }
  public static void addCanxSics(FlatBufferBuilder builder, int canxSicsOffset) { builder.addOffset(20, canxSicsOffset, 0); }
  public static int createCanxSicsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCanxSicsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPocName(FlatBufferBuilder builder, int pocNameOffset) { builder.addOffset(21, pocNameOffset, 0); }
  public static void addPocRank(FlatBufferBuilder builder, int pocRankOffset) { builder.addOffset(22, pocRankOffset, 0); }
  public static void addPocCallSign(FlatBufferBuilder builder, int pocCallSignOffset) { builder.addOffset(23, pocCallSignOffset, 0); }
  public static void addPocLocName(FlatBufferBuilder builder, int pocLocNameOffset) { builder.addOffset(24, pocLocNameOffset, 0); }
  public static void addPocLat(FlatBufferBuilder builder, double pocLat) { builder.addDouble(25, pocLat, 0.0); }
  public static void addPocLon(FlatBufferBuilder builder, double pocLon) { builder.addDouble(26, pocLon, 0.0); }
  public static void addPocNums(FlatBufferBuilder builder, int pocNumsOffset) { builder.addOffset(27, pocNumsOffset, 0); }
  public static int createPocNumsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPocNumsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGeoDatum(FlatBufferBuilder builder, int geoDatumOffset) { builder.addOffset(28, geoDatumOffset, 0); }
  public static void addRefPoints(FlatBufferBuilder builder, int refPointsOffset) { builder.addOffset(29, refPointsOffset, 0); }
  public static int createRefPointsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRefPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVoiceCoord(FlatBufferBuilder builder, int voiceCoordOffset) { builder.addOffset(30, voiceCoordOffset, 0); }
  public static int createVoiceCoordVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVoiceCoordVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSysDefaultCode(FlatBufferBuilder builder, int sysDefaultCodeOffset) { builder.addOffset(31, sysDefaultCodeOffset, 0); }
  public static void addWinSizeMult(FlatBufferBuilder builder, double winSizeMult) { builder.addDouble(32, winSizeMult, 0.0); }
  public static void addWinSizeMin(FlatBufferBuilder builder, double winSizeMin) { builder.addDouble(33, winSizeMin, 0.0); }
  public static void addMinTrackQual(FlatBufferBuilder builder, int minTrackQual) { builder.addInt(34, minTrackQual, 0); }
  public static void addMaxTrackQual(FlatBufferBuilder builder, int maxTrackQual) { builder.addInt(35, maxTrackQual, 0); }
  public static void addResTrackQual(FlatBufferBuilder builder, int resTrackQual) { builder.addInt(36, resTrackQual, 0); }
  public static void addCourseDiff(FlatBufferBuilder builder, int courseDiff) { builder.addInt(37, courseDiff, 0); }
  public static void addSpeedDiff(FlatBufferBuilder builder, int speedDiff) { builder.addInt(38, speedDiff, 0); }
  public static void addAltDiff(FlatBufferBuilder builder, int altDiff) { builder.addInt(39, altDiff, 0); }
  public static void addMinGeoPosQual(FlatBufferBuilder builder, int minGeoPosQual) { builder.addInt(40, minGeoPosQual, 0); }
  public static void addMaxGeoPosQual(FlatBufferBuilder builder, int maxGeoPosQual) { builder.addInt(41, maxGeoPosQual, 0); }
  public static void addDecorrWinMult(FlatBufferBuilder builder, double decorrWinMult) { builder.addDouble(42, decorrWinMult, 0.0); }
  public static void addConsecDecorr(FlatBufferBuilder builder, int consecDecorr) { builder.addInt(43, consecDecorr, 0); }
  public static void addMultiDuty(FlatBufferBuilder builder, int multiDutyOffset) { builder.addOffset(44, multiDutyOffset, 0); }
  public static int createMultiDutyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMultiDutyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOps(FlatBufferBuilder builder, int opsOffset) { builder.addOffset(45, opsOffset, 0); }
  public static int createOpsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOpsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addJreUnitDes(FlatBufferBuilder builder, int jreUnitDesOffset) { builder.addOffset(46, jreUnitDesOffset, 0); }
  public static void addJreCallSign(FlatBufferBuilder builder, int jreCallSignOffset) { builder.addOffset(47, jreCallSignOffset, 0); }
  public static void addJrePriAdd(FlatBufferBuilder builder, int jrePriAdd) { builder.addInt(48, jrePriAdd, 0); }
  public static void addJreSecAdd(FlatBufferBuilder builder, int jreSecAdd) { builder.addInt(49, jreSecAdd, 0); }
  public static void addJreDetails(FlatBufferBuilder builder, int jreDetailsOffset) { builder.addOffset(50, jreDetailsOffset, 0); }
  public static void addSpecTracks(FlatBufferBuilder builder, int specTracksOffset) { builder.addOffset(51, specTracksOffset, 0); }
  public static int createSpecTracksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSpecTracksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNonLinkUnitDes(FlatBufferBuilder builder, int nonLinkUnitDesOffset) { builder.addOffset(52, nonLinkUnitDesOffset, 0); }
  public static int createNonLinkUnitDesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNonLinkUnitDesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTrackNumBlockLls(FlatBufferBuilder builder, int trackNumBlockLlsOffset) { builder.addOffset(53, trackNumBlockLlsOffset, 0); }
  public static int createTrackNumBlockLlsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrackNumBlockLlsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTrackNumBlocks(FlatBufferBuilder builder, int trackNumBlocksOffset) { builder.addOffset(54, trackNumBlocksOffset, 0); }
  public static int createTrackNumBlocksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrackNumBlocksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMgmtCode(FlatBufferBuilder builder, int mgmtCodeOffset) { builder.addOffset(55, mgmtCodeOffset, 0); }
  public static void addMgmtCodeMeaning(FlatBufferBuilder builder, int mgmtCodeMeaningOffset) { builder.addOffset(56, mgmtCodeMeaningOffset, 0); }
  public static void addAckReq(FlatBufferBuilder builder, boolean ackReq) { builder.addBoolean(57, ackReq, false); }
  public static void addAckInstUnits(FlatBufferBuilder builder, int ackInstUnitsOffset) { builder.addOffset(58, ackInstUnitsOffset, 0); }
  public static int createAckInstUnitsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAckInstUnitsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addClassSource(FlatBufferBuilder builder, int classSourceOffset) { builder.addOffset(59, classSourceOffset, 0); }
  public static void addClassReasons(FlatBufferBuilder builder, int classReasonsOffset) { builder.addOffset(60, classReasonsOffset, 0); }
  public static int createClassReasonsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startClassReasonsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDecInstDates(FlatBufferBuilder builder, int decInstDatesOffset) { builder.addOffset(61, decInstDatesOffset, 0); }
  public static int createDecInstDatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDecInstDatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDecExemptCodes(FlatBufferBuilder builder, int decExemptCodesOffset) { builder.addOffset(62, decExemptCodesOffset, 0); }
  public static int createDecExemptCodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDecExemptCodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRemarks(FlatBufferBuilder builder, int remarksOffset) { builder.addOffset(63, remarksOffset, 0); }
  public static int createRemarksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRemarksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(64, rawFileUriOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(65, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(66, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(67, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(68, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(69, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(70, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(71, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(72, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(73, dataMode, 0); }
  public static int endDataLink_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDataLink_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DATA"); }
  public static void finishSizePrefixedDataLink_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DATA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataLink_Full get(int j) { return get(new DataLink_Full(), j); }
    public DataLink_Full get(DataLink_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

