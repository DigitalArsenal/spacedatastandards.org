// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Schema for the CotPositionData to post.
 */
@SuppressWarnings("unused")
public final class CotPositionData_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static CotPositionData_Ingest getRootAsCotPositionData_Ingest(ByteBuffer _bb) { return getRootAsCotPositionData_Ingest(_bb, new CotPositionData_Ingest()); }
  public static CotPositionData_Ingest getRootAsCotPositionData_Ingest(ByteBuffer _bb, CotPositionData_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean CotPositionData_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "COTP"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CotPositionData_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Name of the POI target Object.
   * Example: /// Example: POI_NAME
   * Constraints: Minimum length = 1, Maximum length = 2147483647
   */
  public String callSign() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
   * Example: /// Example: Team Member
   * Constraints: Minimum length = 1, Maximum length = 2147483647
   */
  public String teamRole() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer teamRoleAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer teamRoleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Description of the POI target Object.
   * Example: /// Example: Description of the object
   * Constraints: Minimum length = 1, Maximum length = 2147483647
   */
  public String team() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer teamAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer teamInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createCotPositionData_Ingest(FlatBufferBuilder builder,
      int callSignOffset,
      int teamRoleOffset,
      int teamOffset) {
    builder.startTable(3);
    CotPositionData_Ingest.addTeam(builder, teamOffset);
    CotPositionData_Ingest.addTeamRole(builder, teamRoleOffset);
    CotPositionData_Ingest.addCallSign(builder, callSignOffset);
    return CotPositionData_Ingest.endCotPositionData_Ingest(builder);
  }

  public static void startCotPositionData_Ingest(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(0, callSignOffset, 0); }
  public static void addTeamRole(FlatBufferBuilder builder, int teamRoleOffset) { builder.addOffset(1, teamRoleOffset, 0); }
  public static void addTeam(FlatBufferBuilder builder, int teamOffset) { builder.addOffset(2, teamOffset, 0); }
  public static int endCotPositionData_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishCotPositionData_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "COTP"); }
  public static void finishSizePrefixedCotPositionData_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "COTP"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CotPositionData_Ingest get(int j) { return get(new CotPositionData_Ingest(), j); }
    public CotPositionData_Ingest get(CotPositionData_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

