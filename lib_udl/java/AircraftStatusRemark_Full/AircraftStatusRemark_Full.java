// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Properties and characteristics of a remark that is associated with an aircraft status.
 */
@SuppressWarnings("unused")
public final class AircraftStatusRemark_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AircraftStatusRemark_Full getRootAsAircraftStatusRemark_Full(ByteBuffer _bb) { return getRootAsAircraftStatusRemark_Full(_bb, new AircraftStatusRemark_Full()); }
  public static AircraftStatusRemark_Full getRootAsAircraftStatusRemark_Full(ByteBuffer _bb, AircraftStatusRemark_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AircraftStatusRemark_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AircraftStatusRemark_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The ID of the Aircraft Status to which this remark applies.
   * Example: /// Example: 388b1f64-ccff-4113-b049-3cf5542c2a42
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idAircraftStatus() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAircraftStatusAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idAircraftStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the Aircraft Status Remark record from the originating system.
   * Example: /// Example: GDSSBL022307131714250077
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String altRmkId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altRmkIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer altRmkIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The name of the remark.
   * Example: /// Example: DISCREPANCY - 202297501
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String name() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The text of the remark.
   * Example: /// Example: Remark text
   * Constraints: Minimum length = 1, Maximum length = 1024
   */
  public String text() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer textAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer textInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Time the remark was created in the originating system in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T15:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String timestamp() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timestampAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer timestampInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The name or ID of the external user that updated this remark in the originating system.
   * Example: /// Example: JOHN SMITH
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String lastUpdatedBy() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastUpdatedByAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer lastUpdatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Time the remark was last updated in the originating system in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String lastUpdatedAt() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastUpdatedAtAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer lastUpdatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(38); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAircraftStatusRemark_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idAircraftStatusOffset,
      int altRmkIdOffset,
      int nameOffset,
      int textOffset,
      int timestampOffset,
      int lastUpdatedByOffset,
      int lastUpdatedAtOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(18);
    AircraftStatusRemark_Full.addOrigNetwork(builder, origNetworkOffset);
    AircraftStatusRemark_Full.addOrigin(builder, originOffset);
    AircraftStatusRemark_Full.addSource(builder, sourceOffset);
    AircraftStatusRemark_Full.addSourceDl(builder, sourceDlOffset);
    AircraftStatusRemark_Full.addUpdatedBy(builder, updatedByOffset);
    AircraftStatusRemark_Full.addUpdatedAt(builder, updatedAtOffset);
    AircraftStatusRemark_Full.addCreatedBy(builder, createdByOffset);
    AircraftStatusRemark_Full.addCreatedAt(builder, createdAtOffset);
    AircraftStatusRemark_Full.addLastUpdatedAt(builder, lastUpdatedAtOffset);
    AircraftStatusRemark_Full.addLastUpdatedBy(builder, lastUpdatedByOffset);
    AircraftStatusRemark_Full.addTimestamp(builder, timestampOffset);
    AircraftStatusRemark_Full.addText(builder, textOffset);
    AircraftStatusRemark_Full.addName(builder, nameOffset);
    AircraftStatusRemark_Full.addAltRmkId(builder, altRmkIdOffset);
    AircraftStatusRemark_Full.addIdAircraftStatus(builder, idAircraftStatusOffset);
    AircraftStatusRemark_Full.addClassificationMarking(builder, classificationMarkingOffset);
    AircraftStatusRemark_Full.addId(builder, idOffset);
    AircraftStatusRemark_Full.addDataMode(builder, dataMode);
    return AircraftStatusRemark_Full.endAircraftStatusRemark_Full(builder);
  }

  public static void startAircraftStatusRemark_Full(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdAircraftStatus(FlatBufferBuilder builder, int idAircraftStatusOffset) { builder.addOffset(2, idAircraftStatusOffset, 0); }
  public static void addAltRmkId(FlatBufferBuilder builder, int altRmkIdOffset) { builder.addOffset(3, altRmkIdOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(4, nameOffset, 0); }
  public static void addText(FlatBufferBuilder builder, int textOffset) { builder.addOffset(5, textOffset, 0); }
  public static void addTimestamp(FlatBufferBuilder builder, int timestampOffset) { builder.addOffset(6, timestampOffset, 0); }
  public static void addLastUpdatedBy(FlatBufferBuilder builder, int lastUpdatedByOffset) { builder.addOffset(7, lastUpdatedByOffset, 0); }
  public static void addLastUpdatedAt(FlatBufferBuilder builder, int lastUpdatedAtOffset) { builder.addOffset(8, lastUpdatedAtOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(9, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(10, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(11, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(12, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(13, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(14, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(15, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(16, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(17, dataMode, 0); }
  public static int endAircraftStatusRemark_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraftStatusRemark_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraftStatusRemark_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AircraftStatusRemark_Full get(int j) { return get(new AircraftStatusRemark_Full(), j); }
    public AircraftStatusRemark_Full get(AircraftStatusRemark_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

