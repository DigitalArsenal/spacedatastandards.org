// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
 */
@SuppressWarnings("unused")
public final class OnboardNavigation_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OnboardNavigation_Full getRootAsOnboardNavigation_Full(ByteBuffer _bb) { return getRootAsOnboardNavigation_Full(_bb, new OnboardNavigation_Full()); }
  public static OnboardNavigation_Full getRootAsOnboardNavigation_Full(ByteBuffer _bb, OnboardNavigation_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OnboardNavigation_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ONBO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OnboardNavigation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ONBOARD-NAVIGATION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the primary satellite on-orbit object.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 101
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onOrbit() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onOrbitAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer onOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Start time of the sensor data, in ISO 8601 UTC format.
   * Example: /// Example: 2021-07-20T01:02:03.123456Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * End time of the sensor data, in ISO 8601 UTC format.
   * Example: /// Example: 2021-07-20T01:02:03.123456Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
   * Example: /// Example: EPHEMERISSET-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String esId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer esIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer esIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The name or identifier the star catalog in use.
   * Example: /// Example: STAR-CAT-NAME
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String starCatName() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer starCatNameAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer starCatNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The last load time of the current star catalog onboard this spacecraft.
   * Example: /// Example: 2021-07-21T01:02:03.123Z
   * Constraints: No constraints specified.
   */
  public String starCatLoadTime() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer starCatLoadTimeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer starCatLoadTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Unique identifier of the last onboard state vector.
   * Example: /// Example: STATE-VECTOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idStateVector() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idStateVectorAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer idStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
   * Example: /// Example: ['2021-07-21T01:02:03.120003Z']
   * Constraints: No constraints specified.
   */
  public String ts(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tsLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tsVector() { return tsVector(new StringVector()); }
  public StringVector tsVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte referenceFrame() { int o = __offset(30); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
   * Example: /// Example: [[1.1, 2.2, 3.3]]
   * Constraints: No constraints specified.
   */
  public String sunSensor(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sunSensorLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sunSensorVector() { return sunSensorVector(new StringVector()); }
  public StringVector sunSensorVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
   * Example: /// Example: [[1.1, 2.2, 3.3]]
   * Constraints: No constraints specified.
   */
  public String mag(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int magLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector magVector() { return magVector(new StringVector()); }
  public StringVector magVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
   * Example: /// Example: [[1.1, 2.2, 3.3]]
   * Constraints: No constraints specified.
   */
  public String starTracker(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int starTrackerLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector starTrackerVector() { return starTrackerVector(new StringVector()); }
  public StringVector starTrackerVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
   * Example: /// Example: [[1.1, 2.2, 3.3]]
   * Constraints: No constraints specified.
   */
  public String deltaPos(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int deltaPosLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector deltaPosVector() { return deltaPosVector(new StringVector()); }
  public StringVector deltaPosVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public byte dataMode() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createOnboardNavigation_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int satNo,
      int onOrbitOffset,
      int origObjectIdOffset,
      int startTimeOffset,
      int endTimeOffset,
      int esIdOffset,
      int starCatNameOffset,
      int starCatLoadTimeOffset,
      int idStateVectorOffset,
      int tsOffset,
      byte referenceFrame,
      int sunSensorOffset,
      int magOffset,
      int starTrackerOffset,
      int deltaPosOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(24);
    OnboardNavigation_Full.addOrigNetwork(builder, origNetworkOffset);
    OnboardNavigation_Full.addOrigin(builder, originOffset);
    OnboardNavigation_Full.addSource(builder, sourceOffset);
    OnboardNavigation_Full.addCreatedBy(builder, createdByOffset);
    OnboardNavigation_Full.addCreatedAt(builder, createdAtOffset);
    OnboardNavigation_Full.addDeltaPos(builder, deltaPosOffset);
    OnboardNavigation_Full.addStarTracker(builder, starTrackerOffset);
    OnboardNavigation_Full.addMag(builder, magOffset);
    OnboardNavigation_Full.addSunSensor(builder, sunSensorOffset);
    OnboardNavigation_Full.addTs(builder, tsOffset);
    OnboardNavigation_Full.addIdStateVector(builder, idStateVectorOffset);
    OnboardNavigation_Full.addStarCatLoadTime(builder, starCatLoadTimeOffset);
    OnboardNavigation_Full.addStarCatName(builder, starCatNameOffset);
    OnboardNavigation_Full.addEsId(builder, esIdOffset);
    OnboardNavigation_Full.addEndTime(builder, endTimeOffset);
    OnboardNavigation_Full.addStartTime(builder, startTimeOffset);
    OnboardNavigation_Full.addOrigObjectId(builder, origObjectIdOffset);
    OnboardNavigation_Full.addOnOrbit(builder, onOrbitOffset);
    OnboardNavigation_Full.addSatNo(builder, satNo);
    OnboardNavigation_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    OnboardNavigation_Full.addClassificationMarking(builder, classificationMarkingOffset);
    OnboardNavigation_Full.addId(builder, idOffset);
    OnboardNavigation_Full.addDataMode(builder, dataMode);
    OnboardNavigation_Full.addReferenceFrame(builder, referenceFrame);
    return OnboardNavigation_Full.endOnboardNavigation_Full(builder);
  }

  public static void startOnboardNavigation_Full(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(3, satNo, 0); }
  public static void addOnOrbit(FlatBufferBuilder builder, int onOrbitOffset) { builder.addOffset(4, onOrbitOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(5, origObjectIdOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(6, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(7, endTimeOffset, 0); }
  public static void addEsId(FlatBufferBuilder builder, int esIdOffset) { builder.addOffset(8, esIdOffset, 0); }
  public static void addStarCatName(FlatBufferBuilder builder, int starCatNameOffset) { builder.addOffset(9, starCatNameOffset, 0); }
  public static void addStarCatLoadTime(FlatBufferBuilder builder, int starCatLoadTimeOffset) { builder.addOffset(10, starCatLoadTimeOffset, 0); }
  public static void addIdStateVector(FlatBufferBuilder builder, int idStateVectorOffset) { builder.addOffset(11, idStateVectorOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(12, tsOffset, 0); }
  public static int createTsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReferenceFrame(FlatBufferBuilder builder, byte referenceFrame) { builder.addByte(13, referenceFrame, 0); }
  public static void addSunSensor(FlatBufferBuilder builder, int sunSensorOffset) { builder.addOffset(14, sunSensorOffset, 0); }
  public static int createSunSensorVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSunSensorVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMag(FlatBufferBuilder builder, int magOffset) { builder.addOffset(15, magOffset, 0); }
  public static int createMagVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMagVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStarTracker(FlatBufferBuilder builder, int starTrackerOffset) { builder.addOffset(16, starTrackerOffset, 0); }
  public static int createStarTrackerVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStarTrackerVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDeltaPos(FlatBufferBuilder builder, int deltaPosOffset) { builder.addOffset(17, deltaPosOffset, 0); }
  public static int createDeltaPosVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDeltaPosVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(18, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(19, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(20, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(21, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(22, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(23, dataMode, 0); }
  public static int endOnboardNavigation_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOnboardNavigation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ONBO"); }
  public static void finishSizePrefixedOnboardNavigation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ONBO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OnboardNavigation_Full get(int j) { return get(new OnboardNavigation_Full(), j); }
    public OnboardNavigation_Full get(OnboardNavigation_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

