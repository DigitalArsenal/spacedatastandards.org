// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Discrepancy information associated with this LogisticsSupport record.
 */
@SuppressWarnings("unused")
public final class LogisticsDiscrepancyInfos_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LogisticsDiscrepancyInfos_Ingest getRootAsLogisticsDiscrepancyInfos_Ingest(ByteBuffer _bb) { return getRootAsLogisticsDiscrepancyInfos_Ingest(_bb, new LogisticsDiscrepancyInfos_Ingest()); }
  public static LogisticsDiscrepancyInfos_Ingest getRootAsLogisticsDiscrepancyInfos_Ingest(ByteBuffer _bb, LogisticsDiscrepancyInfos_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LogisticsDiscrepancyInfos_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LOGI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogisticsDiscrepancyInfos_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Job Control Number of the discrepancy.
   * Example: /// Example: 231942400
   * Constraints: Minimum length = 0, Maximum length = 12
   */
  public String jcn() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jcnAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer jcnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The aircraft discrepancy description.
   * Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
   * Constraints: Minimum length = 0, Maximum length = 680
   */
  public String discrepancyInfo() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer discrepancyInfoAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer discrepancyInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The job start time, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-17T10:30:00.123Z
   * Constraints: No constraints specified.
   */
  public String jobStTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jobStTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer jobStTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-17T10:30:00.123Z
   * Constraints: No constraints specified.
   */
  public String closureTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer closureTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer closureTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createLogisticsDiscrepancyInfos_Ingest(FlatBufferBuilder builder,
      int jcnOffset,
      int discrepancyInfoOffset,
      int jobStTimeOffset,
      int closureTimeOffset) {
    builder.startTable(4);
    LogisticsDiscrepancyInfos_Ingest.addClosureTime(builder, closureTimeOffset);
    LogisticsDiscrepancyInfos_Ingest.addJobStTime(builder, jobStTimeOffset);
    LogisticsDiscrepancyInfos_Ingest.addDiscrepancyInfo(builder, discrepancyInfoOffset);
    LogisticsDiscrepancyInfos_Ingest.addJcn(builder, jcnOffset);
    return LogisticsDiscrepancyInfos_Ingest.endLogisticsDiscrepancyInfos_Ingest(builder);
  }

  public static void startLogisticsDiscrepancyInfos_Ingest(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addJcn(FlatBufferBuilder builder, int jcnOffset) { builder.addOffset(0, jcnOffset, 0); }
  public static void addDiscrepancyInfo(FlatBufferBuilder builder, int discrepancyInfoOffset) { builder.addOffset(1, discrepancyInfoOffset, 0); }
  public static void addJobStTime(FlatBufferBuilder builder, int jobStTimeOffset) { builder.addOffset(2, jobStTimeOffset, 0); }
  public static void addClosureTime(FlatBufferBuilder builder, int closureTimeOffset) { builder.addOffset(3, closureTimeOffset, 0); }
  public static int endLogisticsDiscrepancyInfos_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLogisticsDiscrepancyInfos_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LOGI"); }
  public static void finishSizePrefixedLogisticsDiscrepancyInfos_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LOGI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogisticsDiscrepancyInfos_Ingest get(int j) { return get(new LogisticsDiscrepancyInfos_Ingest(), j); }
    public LogisticsDiscrepancyInfos_Ingest get(LogisticsDiscrepancyInfos_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

