// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Schema for the CotData to post.
 */
@SuppressWarnings("unused")
public final class CotData_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static CotData_Ingest getRootAsCotData_Ingest(ByteBuffer _bb) { return getRootAsCotData_Ingest(_bb, new CotData_Ingest()); }
  public static CotData_Ingest getRootAsCotData_Ingest(ByteBuffer _bb, CotData_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean CotData_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "COTD"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CotData_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Identifier of the sender of the cot message which should remain the same on subsequent POI records of the same point of interest.
   * Example: /// Example: POI-ID
   * Constraints: No constraints specified.
   */
  public String senderUid() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer senderUidAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer senderUidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * How the event point was generated, in CoT object heirarchy notation (optional, CoT).
   * Example: /// Example: h-e
   * Constraints: No constraints specified.
   */
  public String how() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer howAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer howInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double ce() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Height above lat/lon point, in meters (1-sigma, if representing linear error).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double le() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Stale timestamp (optional), in ISO8601 UTC format.
   * Example: /// Example: 2020-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String stale() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer staleAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer staleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Start time of event validity (optional), in ISO8601 UTC format.
   * Example: /// Example: 2020-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String start() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer startInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Event type, in CoT object heirarchy notation (optional, CoT).
   * Example: /// Example: a-h-G
   * Constraints: No constraints specified.
   */
  public String type() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Point height above ellipsoid (WGS-84), in meters.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String cotPositionData() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cotPositionDataAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer cotPositionDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String cotChatData() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cotChatDataAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer cotChatDataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Optional list of call signs to send message to directly.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String callSigns(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int callSignsLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector callSignsVector() { return callSignsVector(new StringVector()); }
  public StringVector callSignsVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional list of TAK user ids to send message to directly.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String uids(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int uidsLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector uidsVector() { return uidsVector(new StringVector()); }
  public StringVector uidsVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional set of groups to send message to specifically.  If not specified, the message will be sent to the default _ANON_ group.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String groups(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int groupsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector groupsVector() { return groupsVector(new StringVector()); }
  public StringVector groupsVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createCotData_Ingest(FlatBufferBuilder builder,
      int senderUidOffset,
      int howOffset,
      double ce,
      double le,
      int staleOffset,
      int startOffset,
      double lat,
      double lon,
      int typeOffset,
      double alt,
      int cotPositionDataOffset,
      int cotChatDataOffset,
      int callSignsOffset,
      int uidsOffset,
      int groupsOffset) {
    builder.startTable(15);
    CotData_Ingest.addAlt(builder, alt);
    CotData_Ingest.addLon(builder, lon);
    CotData_Ingest.addLat(builder, lat);
    CotData_Ingest.addLe(builder, le);
    CotData_Ingest.addCe(builder, ce);
    CotData_Ingest.addGroups(builder, groupsOffset);
    CotData_Ingest.addUids(builder, uidsOffset);
    CotData_Ingest.addCallSigns(builder, callSignsOffset);
    CotData_Ingest.addCotChatData(builder, cotChatDataOffset);
    CotData_Ingest.addCotPositionData(builder, cotPositionDataOffset);
    CotData_Ingest.addType(builder, typeOffset);
    CotData_Ingest.addStart(builder, startOffset);
    CotData_Ingest.addStale(builder, staleOffset);
    CotData_Ingest.addHow(builder, howOffset);
    CotData_Ingest.addSenderUid(builder, senderUidOffset);
    return CotData_Ingest.endCotData_Ingest(builder);
  }

  public static void startCotData_Ingest(FlatBufferBuilder builder) { builder.startTable(15); }
  public static void addSenderUid(FlatBufferBuilder builder, int senderUidOffset) { builder.addOffset(0, senderUidOffset, 0); }
  public static void addHow(FlatBufferBuilder builder, int howOffset) { builder.addOffset(1, howOffset, 0); }
  public static void addCe(FlatBufferBuilder builder, double ce) { builder.addDouble(2, ce, 0.0); }
  public static void addLe(FlatBufferBuilder builder, double le) { builder.addDouble(3, le, 0.0); }
  public static void addStale(FlatBufferBuilder builder, int staleOffset) { builder.addOffset(4, staleOffset, 0); }
  public static void addStart(FlatBufferBuilder builder, int startOffset) { builder.addOffset(5, startOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(6, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(7, lon, 0.0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(8, typeOffset, 0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(9, alt, 0.0); }
  public static void addCotPositionData(FlatBufferBuilder builder, int cotPositionDataOffset) { builder.addOffset(10, cotPositionDataOffset, 0); }
  public static void addCotChatData(FlatBufferBuilder builder, int cotChatDataOffset) { builder.addOffset(11, cotChatDataOffset, 0); }
  public static void addCallSigns(FlatBufferBuilder builder, int callSignsOffset) { builder.addOffset(12, callSignsOffset, 0); }
  public static int createCallSignsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCallSignsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUids(FlatBufferBuilder builder, int uidsOffset) { builder.addOffset(13, uidsOffset, 0); }
  public static int createUidsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUidsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addGroups(FlatBufferBuilder builder, int groupsOffset) { builder.addOffset(14, groupsOffset, 0); }
  public static int createGroupsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGroupsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endCotData_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishCotData_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "COTD"); }
  public static void finishSizePrefixedCotData_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "COTD"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CotData_Ingest get(int j) { return get(new CotData_Ingest(), j); }
    public CotData_Ingest get(CotData_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

