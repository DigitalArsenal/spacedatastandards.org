// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
 */
@SuppressWarnings("unused")
public final class MtiHRRScatterer_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiHRRScatterer_Abridged getRootAsMtiHRRScatterer_Abridged(ByteBuffer _bb) { return getRootAsMtiHRRScatterer_Abridged(_bb, new MtiHRRScatterer_Abridged()); }
  public static MtiHRRScatterer_Abridged getRootAsMtiHRRScatterer_Abridged(ByteBuffer _bb, MtiHRRScatterer_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiHRRScatterer_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTIH"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiHRRScatterer_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Scatterer’s power magnitude.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h321() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Scatterer’s complex phase, in degrees.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h322() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h323() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h324() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createMtiHRRScatterer_Abridged(FlatBufferBuilder builder,
      int h321,
      int h322,
      int h323,
      int h324) {
    builder.startTable(4);
    MtiHRRScatterer_Abridged.addH324(builder, h324);
    MtiHRRScatterer_Abridged.addH323(builder, h323);
    MtiHRRScatterer_Abridged.addH322(builder, h322);
    MtiHRRScatterer_Abridged.addH321(builder, h321);
    return MtiHRRScatterer_Abridged.endMtiHRRScatterer_Abridged(builder);
  }

  public static void startMtiHRRScatterer_Abridged(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addH321(FlatBufferBuilder builder, int h321) { builder.addInt(0, h321, 0); }
  public static void addH322(FlatBufferBuilder builder, int h322) { builder.addInt(1, h322, 0); }
  public static void addH323(FlatBufferBuilder builder, int h323) { builder.addInt(2, h323, 0); }
  public static void addH324(FlatBufferBuilder builder, int h324) { builder.addInt(3, h324, 0); }
  public static int endMtiHRRScatterer_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiHRRScatterer_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTIH"); }
  public static void finishSizePrefixedMtiHRRScatterer_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTIH"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiHRRScatterer_Abridged get(int j) { return get(new MtiHRRScatterer_Abridged(), j); }
    public MtiHRRScatterer_Abridged get(MtiHRRScatterer_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

