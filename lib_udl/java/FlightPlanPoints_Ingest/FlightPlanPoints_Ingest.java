// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Array of point data for this Point Group.
 */
@SuppressWarnings("unused")
public final class FlightPlanPoints_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanPoints_Ingest getRootAsFlightPlanPoints_Ingest(ByteBuffer _bb) { return getRootAsFlightPlanPoints_Ingest(_bb, new FlightPlanPoints_Ingest()); }
  public static FlightPlanPoints_Ingest getRootAsFlightPlanPoints_Ingest(ByteBuffer _bb, FlightPlanPoints_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean FlightPlanPoints_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "FLIG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlightPlanPoints_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Name of this point.
   * Example: /// Example: CRUISE ALTITUDE ETP
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String pointName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pointNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer pointNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double fppLat() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double fppLon() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2023-09-09T01:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String fppEta() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fppEtaAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer fppEtaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
   * Example: /// Example: 4250.1
   * Constraints: No constraints specified.
   */
  public double fppReqFuel() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createFlightPlanPoints_Ingest(FlatBufferBuilder builder,
      int pointNameOffset,
      double fppLat,
      double fppLon,
      int fppEtaOffset,
      double fppReqFuel) {
    builder.startTable(5);
    FlightPlanPoints_Ingest.addFppReqFuel(builder, fppReqFuel);
    FlightPlanPoints_Ingest.addFppLon(builder, fppLon);
    FlightPlanPoints_Ingest.addFppLat(builder, fppLat);
    FlightPlanPoints_Ingest.addFppEta(builder, fppEtaOffset);
    FlightPlanPoints_Ingest.addPointName(builder, pointNameOffset);
    return FlightPlanPoints_Ingest.endFlightPlanPoints_Ingest(builder);
  }

  public static void startFlightPlanPoints_Ingest(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addPointName(FlatBufferBuilder builder, int pointNameOffset) { builder.addOffset(0, pointNameOffset, 0); }
  public static void addFppLat(FlatBufferBuilder builder, double fppLat) { builder.addDouble(1, fppLat, 0.0); }
  public static void addFppLon(FlatBufferBuilder builder, double fppLon) { builder.addDouble(2, fppLon, 0.0); }
  public static void addFppEta(FlatBufferBuilder builder, int fppEtaOffset) { builder.addOffset(3, fppEtaOffset, 0); }
  public static void addFppReqFuel(FlatBufferBuilder builder, double fppReqFuel) { builder.addDouble(4, fppReqFuel, 0.0); }
  public static int endFlightPlanPoints_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFlightPlanPoints_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "FLIG"); }
  public static void finishSizePrefixedFlightPlanPoints_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "FLIG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlightPlanPoints_Ingest get(int j) { return get(new FlightPlanPoints_Ingest(), j); }
    public FlightPlanPoints_Ingest get(FlightPlanPoints_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

