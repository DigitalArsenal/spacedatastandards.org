// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The airfield status contains dynamic data of an airfield's capabilities.
 */
@SuppressWarnings("unused")
public final class AirfieldStatus_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirfieldStatus_Abridged getRootAsAirfieldStatus_Abridged(ByteBuffer _bb) { return getRootAsAirfieldStatus_Abridged(_bb, new AirfieldStatus_Abridged()); }
  public static AirfieldStatus_Abridged getRootAsAirfieldStatus_Abridged(ByteBuffer _bb, AirfieldStatus_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirfieldStatus_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRF"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirfieldStatus_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the Airfield for which this status is referencing.
   * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idAirfield() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAirfieldAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Alternate airfield identifier provided by the source.
   * Example: /// Example: AIRFIELD-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String altAirfieldId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altAirfieldIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer altAirfieldIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Maximum on ground (MOG) number of high-reach/wide-body passenger aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int passengerServiceMog() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of fleet aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int fleetServiceMog() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of high-reach/wide-body cargo aircraft that can be serviced simultaneously based on spacing and manpower at the time of status.
   * Example: /// Example: 8
   * Constraints: No constraints specified.
   */
  public int cargoMog() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of aircraft that can be simultaneously refueled based on spacing and manpower at the time of status.
   * Example: /// Example: 9
   * Constraints: No constraints specified.
   */
  public int fuelMog() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of fuel types available at the airfield. This array must be the same length as fuelQtys.
   * Example: /// Example: ['JP-8', 'Jet A', 'AVGAS']
   * Constraints: No constraints specified.
   */
  public String fuelTypes(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int fuelTypesLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector fuelTypesVector() { return fuelTypesVector(new StringVector()); }
  public StringVector fuelTypesVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of quantities for each fuel type at the airfield, in kilograms. The values in this array must correspond to the position index in fuelTypes. This array must be the same length as fuelTypes.
   * Example: /// Example: [263083.6, 286674.9, 18143.69]
   * Constraints: No constraints specified.
   */
  public String fuelQtys(int j) { int o = __offset(22); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int fuelQtysLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public StringVector fuelQtysVector() { return fuelQtysVector(new StringVector()); }
  public StringVector fuelQtysVector(StringVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Maximum on ground (MOG) number of aircraft that can be simultaneously ground handled for standard maintenance based on spacing and manpower at the time of status.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int mxMog() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of aircraft due to items not directly related to the airfield infrastructure or aircraft servicing capability based on spacing and manpower at the time of status.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int operatingMog() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number of aircraft that are currently on ground (COG) at the airfield.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int numCog() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of working wide-body aircraft based on spacing and manpower at the time of status.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int wideWorkingMog() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of parking wide-body aircraft based on spacing and manpower at the time of status.
   * Example: /// Example: 7
   * Constraints: No constraints specified.
   */
  public int wideParkingMog() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of working narrow-body aircraft based on spacing and manpower at the time of status.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int narrowWorkingMog() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum on ground (MOG) number of parking narrow-body aircraft based on spacing and manpower at the time of status.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int narrowParkingMog() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of material handling equipment types at the airfield. This array must be the same length as mheQtys.
   * Example: /// Example: ['30k', 'AT', '60k']
   * Constraints: No constraints specified.
   */
  public String mheTypes(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int mheTypesLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector mheTypesVector() { return mheTypesVector(new StringVector()); }
  public StringVector mheTypesVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of quantities for each material handling equipment types at the airfield. The values in this array must correspond to the position index in mheTypes. This array must be the same length as mheTypes.
   * Example: /// Example: [1, 3, 1]
   * Constraints: No constraints specified.
   */
  public String mheQtys(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int mheQtysLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector mheQtysVector() { return mheQtysVector(new StringVector()); }
  public StringVector mheQtysVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The level of medical support and capabilities available at the airfield.
   * Example: /// Example: Large Field Hospital
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String medCap() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer medCapAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer medCapInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The category of aircraft rescue and fire fighting (ARFF) services that are currently available at the airfield. Entries should include  the code (FAA or ICAO) and the category.
   * Example: /// Example: FAA-A
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String arffCat() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arffCatAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer arffCatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The expected time to receive ground support equipment (e.g. power units, air units, cables, hoses, etc.), in minutes.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int gseTime() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number or ID of primary runway at the airfield.
   * Example: /// Example: 35R
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String priRwyNum() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer priRwyNumAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer priRwyNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The primary runway condition reading value used for determining runway braking action, from 0 to 26. A value of 0 indicates braking action is poor or non-existent, where a value of 26 indicates braking action is good.
   * Example: /// Example: 23
   * Constraints: No constraints specified.
   */
  public int rwyCondReading() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The primary runway friction factor which is dependent on the surface friction between the tires of the aircraft and the runway surface, from 0 to 100. A lower number indicates less friction and less braking response.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int rwyFrictionFactor() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of markings currently on the primary runway.
   * Example: /// Example: ['Aiming Point', 'Threshold']
   * Constraints: No constraints specified.
   */
  public String rwyMarkings(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rwyMarkingsLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rwyMarkingsVector() { return rwyMarkingsVector(new StringVector()); }
  public StringVector rwyMarkingsVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Description of the current status of the airfield.
   * Example: /// Example: Status message about the airfield.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String message() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer messageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The primary frequency which the airfield is currently operating, in megahertz.
   * Example: /// Example: 123.45
   * Constraints: No constraints specified.
   */
  public double priFreq() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of slot types that an airfield requires a particular aircraft provide in order to consume a slot at this location.
   * Example: /// Example: ['PARKING', 'WORKING', 'LANDING']
   * Constraints: No constraints specified.
   */
  public String slotTypesReq(int j) { int o = __offset(60); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int slotTypesReqLength() { int o = __offset(60); return o != 0 ? __vector_len(o) : 0; }
  public StringVector slotTypesReqVector() { return slotTypesReqVector(new StringVector()); }
  public StringVector slotTypesReqVector(StringVector obj) { int o = __offset(60); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(74); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirfieldStatus_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idAirfieldOffset,
      int altAirfieldIdOffset,
      int passengerServiceMog,
      int fleetServiceMog,
      int cargoMog,
      int fuelMog,
      int fuelTypesOffset,
      int fuelQtysOffset,
      int mxMog,
      int operatingMog,
      int numCog,
      int wideWorkingMog,
      int wideParkingMog,
      int narrowWorkingMog,
      int narrowParkingMog,
      int mheTypesOffset,
      int mheQtysOffset,
      int medCapOffset,
      int arffCatOffset,
      int gseTime,
      int priRwyNumOffset,
      int rwyCondReading,
      int rwyFrictionFactor,
      int rwyMarkingsOffset,
      int messageOffset,
      double priFreq,
      int slotTypesReqOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(36);
    AirfieldStatus_Abridged.addPriFreq(builder, priFreq);
    AirfieldStatus_Abridged.addOrigNetwork(builder, origNetworkOffset);
    AirfieldStatus_Abridged.addOrigin(builder, originOffset);
    AirfieldStatus_Abridged.addSource(builder, sourceOffset);
    AirfieldStatus_Abridged.addSourceDl(builder, sourceDlOffset);
    AirfieldStatus_Abridged.addCreatedBy(builder, createdByOffset);
    AirfieldStatus_Abridged.addCreatedAt(builder, createdAtOffset);
    AirfieldStatus_Abridged.addSlotTypesReq(builder, slotTypesReqOffset);
    AirfieldStatus_Abridged.addMessage(builder, messageOffset);
    AirfieldStatus_Abridged.addRwyMarkings(builder, rwyMarkingsOffset);
    AirfieldStatus_Abridged.addRwyFrictionFactor(builder, rwyFrictionFactor);
    AirfieldStatus_Abridged.addRwyCondReading(builder, rwyCondReading);
    AirfieldStatus_Abridged.addPriRwyNum(builder, priRwyNumOffset);
    AirfieldStatus_Abridged.addGseTime(builder, gseTime);
    AirfieldStatus_Abridged.addArffCat(builder, arffCatOffset);
    AirfieldStatus_Abridged.addMedCap(builder, medCapOffset);
    AirfieldStatus_Abridged.addMheQtys(builder, mheQtysOffset);
    AirfieldStatus_Abridged.addMheTypes(builder, mheTypesOffset);
    AirfieldStatus_Abridged.addNarrowParkingMog(builder, narrowParkingMog);
    AirfieldStatus_Abridged.addNarrowWorkingMog(builder, narrowWorkingMog);
    AirfieldStatus_Abridged.addWideParkingMog(builder, wideParkingMog);
    AirfieldStatus_Abridged.addWideWorkingMog(builder, wideWorkingMog);
    AirfieldStatus_Abridged.addNumCog(builder, numCog);
    AirfieldStatus_Abridged.addOperatingMog(builder, operatingMog);
    AirfieldStatus_Abridged.addMxMog(builder, mxMog);
    AirfieldStatus_Abridged.addFuelQtys(builder, fuelQtysOffset);
    AirfieldStatus_Abridged.addFuelTypes(builder, fuelTypesOffset);
    AirfieldStatus_Abridged.addFuelMog(builder, fuelMog);
    AirfieldStatus_Abridged.addCargoMog(builder, cargoMog);
    AirfieldStatus_Abridged.addFleetServiceMog(builder, fleetServiceMog);
    AirfieldStatus_Abridged.addPassengerServiceMog(builder, passengerServiceMog);
    AirfieldStatus_Abridged.addAltAirfieldId(builder, altAirfieldIdOffset);
    AirfieldStatus_Abridged.addIdAirfield(builder, idAirfieldOffset);
    AirfieldStatus_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    AirfieldStatus_Abridged.addId(builder, idOffset);
    AirfieldStatus_Abridged.addDataMode(builder, dataMode);
    return AirfieldStatus_Abridged.endAirfieldStatus_Abridged(builder);
  }

  public static void startAirfieldStatus_Abridged(FlatBufferBuilder builder) { builder.startTable(36); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdAirfield(FlatBufferBuilder builder, int idAirfieldOffset) { builder.addOffset(2, idAirfieldOffset, 0); }
  public static void addAltAirfieldId(FlatBufferBuilder builder, int altAirfieldIdOffset) { builder.addOffset(3, altAirfieldIdOffset, 0); }
  public static void addPassengerServiceMog(FlatBufferBuilder builder, int passengerServiceMog) { builder.addInt(4, passengerServiceMog, 0); }
  public static void addFleetServiceMog(FlatBufferBuilder builder, int fleetServiceMog) { builder.addInt(5, fleetServiceMog, 0); }
  public static void addCargoMog(FlatBufferBuilder builder, int cargoMog) { builder.addInt(6, cargoMog, 0); }
  public static void addFuelMog(FlatBufferBuilder builder, int fuelMog) { builder.addInt(7, fuelMog, 0); }
  public static void addFuelTypes(FlatBufferBuilder builder, int fuelTypesOffset) { builder.addOffset(8, fuelTypesOffset, 0); }
  public static int createFuelTypesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFuelTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFuelQtys(FlatBufferBuilder builder, int fuelQtysOffset) { builder.addOffset(9, fuelQtysOffset, 0); }
  public static int createFuelQtysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFuelQtysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMxMog(FlatBufferBuilder builder, int mxMog) { builder.addInt(10, mxMog, 0); }
  public static void addOperatingMog(FlatBufferBuilder builder, int operatingMog) { builder.addInt(11, operatingMog, 0); }
  public static void addNumCog(FlatBufferBuilder builder, int numCog) { builder.addInt(12, numCog, 0); }
  public static void addWideWorkingMog(FlatBufferBuilder builder, int wideWorkingMog) { builder.addInt(13, wideWorkingMog, 0); }
  public static void addWideParkingMog(FlatBufferBuilder builder, int wideParkingMog) { builder.addInt(14, wideParkingMog, 0); }
  public static void addNarrowWorkingMog(FlatBufferBuilder builder, int narrowWorkingMog) { builder.addInt(15, narrowWorkingMog, 0); }
  public static void addNarrowParkingMog(FlatBufferBuilder builder, int narrowParkingMog) { builder.addInt(16, narrowParkingMog, 0); }
  public static void addMheTypes(FlatBufferBuilder builder, int mheTypesOffset) { builder.addOffset(17, mheTypesOffset, 0); }
  public static int createMheTypesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMheTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMheQtys(FlatBufferBuilder builder, int mheQtysOffset) { builder.addOffset(18, mheQtysOffset, 0); }
  public static int createMheQtysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMheQtysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMedCap(FlatBufferBuilder builder, int medCapOffset) { builder.addOffset(19, medCapOffset, 0); }
  public static void addArffCat(FlatBufferBuilder builder, int arffCatOffset) { builder.addOffset(20, arffCatOffset, 0); }
  public static void addGseTime(FlatBufferBuilder builder, int gseTime) { builder.addInt(21, gseTime, 0); }
  public static void addPriRwyNum(FlatBufferBuilder builder, int priRwyNumOffset) { builder.addOffset(22, priRwyNumOffset, 0); }
  public static void addRwyCondReading(FlatBufferBuilder builder, int rwyCondReading) { builder.addInt(23, rwyCondReading, 0); }
  public static void addRwyFrictionFactor(FlatBufferBuilder builder, int rwyFrictionFactor) { builder.addInt(24, rwyFrictionFactor, 0); }
  public static void addRwyMarkings(FlatBufferBuilder builder, int rwyMarkingsOffset) { builder.addOffset(25, rwyMarkingsOffset, 0); }
  public static int createRwyMarkingsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRwyMarkingsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMessage(FlatBufferBuilder builder, int messageOffset) { builder.addOffset(26, messageOffset, 0); }
  public static void addPriFreq(FlatBufferBuilder builder, double priFreq) { builder.addDouble(27, priFreq, 0.0); }
  public static void addSlotTypesReq(FlatBufferBuilder builder, int slotTypesReqOffset) { builder.addOffset(28, slotTypesReqOffset, 0); }
  public static int createSlotTypesReqVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSlotTypesReqVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(29, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(30, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(31, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(32, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(33, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(34, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(35, dataMode, 0); }
  public static int endAirfieldStatus_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirfieldStatus_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRF"); }
  public static void finishSizePrefixedAirfieldStatus_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRF"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirfieldStatus_Abridged get(int j) { return get(new AirfieldStatus_Abridged(), j); }
    public AirfieldStatus_Abridged get(AirfieldStatus_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

