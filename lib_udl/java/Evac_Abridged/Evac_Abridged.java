// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
 */
@SuppressWarnings("unused")
public final class Evac_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Evac_Abridged getRootAsEvac_Abridged(ByteBuffer _bb) { return getRootAsEvac_Abridged(_bb, new Evac_Abridged()); }
  public static Evac_Abridged getRootAsEvac_Abridged(ByteBuffer _bb, Evac_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Evac_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EVAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Evac_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: MEDEVACEVENT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
   * Example: /// Example: MedEvac-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String medevacId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer medevacIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer medevacIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The type of this medevac record (REQUEST, RESPONSE).
   * Example: /// Example: REQUEST
   * Constraints: Minimum length = 1, Maximum length = 8
   */
  public byte type() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
   * Example: /// Example: GROUND
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String missionType() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionTypeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer missionTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of a weather report associated with this evacuation.
   * Example: /// Example: WeatherReport-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idWeatherReport() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idWeatherReportAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idWeatherReportInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Number of people Killed In Action.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int numKia() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of people Wounded In Action.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int numWia() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of littered personnel requiring evacuation.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int numLitter() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of ambulatory personnel requiring evacuation.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int numAmbulatory() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Flag indicating whether the mission requires medical personnel.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean medicReq() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Externally provided Medevac request number (e.g. MED.1.223908).
   * Example: /// Example: MED.1.234567
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String reqNum() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqNumAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer reqNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The request time, in ISO 8601 UTC format.
   * Example: /// Example: 2021-10-15T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String reqTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer reqTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The call sign of this medevac requestor.
   * Example: /// Example: Bravo
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String reqCallSign() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqCallSignAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer reqCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The expected pickup time, in ISO 8601 UTC format.
   * Example: /// Example: 2021-10-20T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String pickupTime() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pickupTimeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer pickupTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 75.1234
   * Constraints: No constraints specified.
   */
  public double pickupLat() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 175.1234
   * Constraints: No constraints specified.
   */
  public double pickupLon() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
   * Example: /// Example: 30.1234
   * Constraints: No constraints specified.
   */
  public double pickupAlt() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
   * Example: /// Example: 10.1234
   * Constraints: No constraints specified.
   */
  public double ce() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Height above lat/lon point, in meters (1-sigma, if representing linear error).
   * Example: /// Example: 5.1234
   * Constraints: No constraints specified.
   */
  public double le() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
   * Example: /// Example: ROCKY
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String terrain() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer terrainAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer terrainInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Amplifying data for the terrain describing important obstacles in or around the zone.
   * Example: /// Example: N/A
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String obstaclesRemarks() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obstaclesRemarksAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer obstaclesRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Amplifying data for the terrain describing any notable additional terrain features.
   * Example: /// Example: N/A
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String terrainRemarks() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer terrainRemarksAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer terrainRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The name of the zone.
   * Example: /// Example: example-zone
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String zoneName() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zoneNameAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer zoneNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
   * Example: /// Example: ILLUMINATION
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String zoneMarking() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zoneMarkingAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer zoneMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
   * Example: /// Example: NO ENEMY
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String zoneSecurity() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zoneSecurityAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer zoneSecurityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
   * Example: /// Example: RED
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String zoneMarkingColor() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zoneMarkingColorAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer zoneMarkingColorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Flag indicating that the pickup site is hot and hostiles are in the area.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean zoneHot() { int o = __offset(58); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The contact frequency, in Hz, of the agency or zone controller.
   * Example: /// Example: 3.11
   * Constraints: No constraints specified.
   */
  public double cntctFreq() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The call sign of the zone controller.
   * Example: /// Example: Tango
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String zoneContrCallSign() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zoneContrCallSignAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer zoneContrCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * The count of people requiring medevac.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int numCasualties() { int o = __offset(64); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Additional comments for the medevac mission.
   * Example: /// Example: Comments concerning mission
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String comments() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commentsAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer commentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String casualtyInfo(int j) { int o = __offset(68); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int casualtyInfoLength() { int o = __offset(68); return o != 0 ? __vector_len(o) : 0; }
  public StringVector casualtyInfoVector() { return casualtyInfoVector(new StringVector()); }
  public StringVector casualtyInfoVector(StringVector obj) { int o = __offset(68); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String enemyData(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int enemyDataLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector enemyDataVector() { return enemyDataVector(new StringVector()); }
  public StringVector enemyDataVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(82); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createEvac_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int medevacIdOffset,
      byte type,
      int missionTypeOffset,
      int idWeatherReportOffset,
      int numKia,
      int numWia,
      int numLitter,
      int numAmbulatory,
      boolean medicReq,
      int reqNumOffset,
      int reqTimeOffset,
      int reqCallSignOffset,
      int pickupTimeOffset,
      double pickupLat,
      double pickupLon,
      double pickupAlt,
      double ce,
      double le,
      int terrainOffset,
      int obstaclesRemarksOffset,
      int terrainRemarksOffset,
      int zoneNameOffset,
      int zoneMarkingOffset,
      int zoneSecurityOffset,
      int zoneMarkingColorOffset,
      boolean zoneHot,
      double cntctFreq,
      int zoneContrCallSignOffset,
      int numCasualties,
      int commentsOffset,
      int casualtyInfoOffset,
      int enemyDataOffset,
      int origNetworkOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode) {
    builder.startTable(40);
    Evac_Abridged.addCntctFreq(builder, cntctFreq);
    Evac_Abridged.addLe(builder, le);
    Evac_Abridged.addCe(builder, ce);
    Evac_Abridged.addPickupAlt(builder, pickupAlt);
    Evac_Abridged.addPickupLon(builder, pickupLon);
    Evac_Abridged.addPickupLat(builder, pickupLat);
    Evac_Abridged.addOrigin(builder, originOffset);
    Evac_Abridged.addSource(builder, sourceOffset);
    Evac_Abridged.addCreatedBy(builder, createdByOffset);
    Evac_Abridged.addCreatedAt(builder, createdAtOffset);
    Evac_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Evac_Abridged.addEnemyData(builder, enemyDataOffset);
    Evac_Abridged.addCasualtyInfo(builder, casualtyInfoOffset);
    Evac_Abridged.addComments(builder, commentsOffset);
    Evac_Abridged.addNumCasualties(builder, numCasualties);
    Evac_Abridged.addZoneContrCallSign(builder, zoneContrCallSignOffset);
    Evac_Abridged.addZoneMarkingColor(builder, zoneMarkingColorOffset);
    Evac_Abridged.addZoneSecurity(builder, zoneSecurityOffset);
    Evac_Abridged.addZoneMarking(builder, zoneMarkingOffset);
    Evac_Abridged.addZoneName(builder, zoneNameOffset);
    Evac_Abridged.addTerrainRemarks(builder, terrainRemarksOffset);
    Evac_Abridged.addObstaclesRemarks(builder, obstaclesRemarksOffset);
    Evac_Abridged.addTerrain(builder, terrainOffset);
    Evac_Abridged.addPickupTime(builder, pickupTimeOffset);
    Evac_Abridged.addReqCallSign(builder, reqCallSignOffset);
    Evac_Abridged.addReqTime(builder, reqTimeOffset);
    Evac_Abridged.addReqNum(builder, reqNumOffset);
    Evac_Abridged.addNumAmbulatory(builder, numAmbulatory);
    Evac_Abridged.addNumLitter(builder, numLitter);
    Evac_Abridged.addNumWia(builder, numWia);
    Evac_Abridged.addNumKia(builder, numKia);
    Evac_Abridged.addIdWeatherReport(builder, idWeatherReportOffset);
    Evac_Abridged.addMissionType(builder, missionTypeOffset);
    Evac_Abridged.addMedevacId(builder, medevacIdOffset);
    Evac_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Evac_Abridged.addId(builder, idOffset);
    Evac_Abridged.addDataMode(builder, dataMode);
    Evac_Abridged.addZoneHot(builder, zoneHot);
    Evac_Abridged.addMedicReq(builder, medicReq);
    Evac_Abridged.addType(builder, type);
    return Evac_Abridged.endEvac_Abridged(builder);
  }

  public static void startEvac_Abridged(FlatBufferBuilder builder) { builder.startTable(40); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addMedevacId(FlatBufferBuilder builder, int medevacIdOffset) { builder.addOffset(2, medevacIdOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(3, type, 0); }
  public static void addMissionType(FlatBufferBuilder builder, int missionTypeOffset) { builder.addOffset(4, missionTypeOffset, 0); }
  public static void addIdWeatherReport(FlatBufferBuilder builder, int idWeatherReportOffset) { builder.addOffset(5, idWeatherReportOffset, 0); }
  public static void addNumKia(FlatBufferBuilder builder, int numKia) { builder.addInt(6, numKia, 0); }
  public static void addNumWia(FlatBufferBuilder builder, int numWia) { builder.addInt(7, numWia, 0); }
  public static void addNumLitter(FlatBufferBuilder builder, int numLitter) { builder.addInt(8, numLitter, 0); }
  public static void addNumAmbulatory(FlatBufferBuilder builder, int numAmbulatory) { builder.addInt(9, numAmbulatory, 0); }
  public static void addMedicReq(FlatBufferBuilder builder, boolean medicReq) { builder.addBoolean(10, medicReq, false); }
  public static void addReqNum(FlatBufferBuilder builder, int reqNumOffset) { builder.addOffset(11, reqNumOffset, 0); }
  public static void addReqTime(FlatBufferBuilder builder, int reqTimeOffset) { builder.addOffset(12, reqTimeOffset, 0); }
  public static void addReqCallSign(FlatBufferBuilder builder, int reqCallSignOffset) { builder.addOffset(13, reqCallSignOffset, 0); }
  public static void addPickupTime(FlatBufferBuilder builder, int pickupTimeOffset) { builder.addOffset(14, pickupTimeOffset, 0); }
  public static void addPickupLat(FlatBufferBuilder builder, double pickupLat) { builder.addDouble(15, pickupLat, 0.0); }
  public static void addPickupLon(FlatBufferBuilder builder, double pickupLon) { builder.addDouble(16, pickupLon, 0.0); }
  public static void addPickupAlt(FlatBufferBuilder builder, double pickupAlt) { builder.addDouble(17, pickupAlt, 0.0); }
  public static void addCe(FlatBufferBuilder builder, double ce) { builder.addDouble(18, ce, 0.0); }
  public static void addLe(FlatBufferBuilder builder, double le) { builder.addDouble(19, le, 0.0); }
  public static void addTerrain(FlatBufferBuilder builder, int terrainOffset) { builder.addOffset(20, terrainOffset, 0); }
  public static void addObstaclesRemarks(FlatBufferBuilder builder, int obstaclesRemarksOffset) { builder.addOffset(21, obstaclesRemarksOffset, 0); }
  public static void addTerrainRemarks(FlatBufferBuilder builder, int terrainRemarksOffset) { builder.addOffset(22, terrainRemarksOffset, 0); }
  public static void addZoneName(FlatBufferBuilder builder, int zoneNameOffset) { builder.addOffset(23, zoneNameOffset, 0); }
  public static void addZoneMarking(FlatBufferBuilder builder, int zoneMarkingOffset) { builder.addOffset(24, zoneMarkingOffset, 0); }
  public static void addZoneSecurity(FlatBufferBuilder builder, int zoneSecurityOffset) { builder.addOffset(25, zoneSecurityOffset, 0); }
  public static void addZoneMarkingColor(FlatBufferBuilder builder, int zoneMarkingColorOffset) { builder.addOffset(26, zoneMarkingColorOffset, 0); }
  public static void addZoneHot(FlatBufferBuilder builder, boolean zoneHot) { builder.addBoolean(27, zoneHot, false); }
  public static void addCntctFreq(FlatBufferBuilder builder, double cntctFreq) { builder.addDouble(28, cntctFreq, 0.0); }
  public static void addZoneContrCallSign(FlatBufferBuilder builder, int zoneContrCallSignOffset) { builder.addOffset(29, zoneContrCallSignOffset, 0); }
  public static void addNumCasualties(FlatBufferBuilder builder, int numCasualties) { builder.addInt(30, numCasualties, 0); }
  public static void addComments(FlatBufferBuilder builder, int commentsOffset) { builder.addOffset(31, commentsOffset, 0); }
  public static void addCasualtyInfo(FlatBufferBuilder builder, int casualtyInfoOffset) { builder.addOffset(32, casualtyInfoOffset, 0); }
  public static int createCasualtyInfoVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCasualtyInfoVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEnemyData(FlatBufferBuilder builder, int enemyDataOffset) { builder.addOffset(33, enemyDataOffset, 0); }
  public static int createEnemyDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEnemyDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(34, origNetworkOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(35, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(36, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(37, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(38, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(39, dataMode, 0); }
  public static int endEvac_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEvac_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EVAC"); }
  public static void finishSizePrefixedEvac_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EVAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Evac_Abridged get(int j) { return get(new Evac_Abridged(), j); }
    public Evac_Abridged get(Evac_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

