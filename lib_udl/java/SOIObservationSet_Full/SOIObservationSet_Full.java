// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// These services provide operations for posting space object idenfification observation sets.
 */
@SuppressWarnings("unused")
public final class SOIObservationSet_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SOIObservationSet_Full getRootAsSOIObservationSet_Full(ByteBuffer _bb) { return getRootAsSOIObservationSet_Full(_bb, new SOIObservationSet_Full()); }
  public static SOIObservationSet_Full getRootAsSOIObservationSet_Full(ByteBuffer _bb, SOIObservationSet_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SOIObservationSet_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SOIO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SOIObservationSet_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * SOI msgCreateDate time in ISO 8601 UTC time, with millisecond precision.
   * Example: /// Example: 2022-07-07T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String msgCreateDate() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgCreateDateAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer msgCreateDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * ID of the observing sensor.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Optional identifier provided by the record source to indicate the sensor identifier to which this attitude set applies if this set is reporting a single sensor orientation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * ID of the AttitudeSet record for the observing sensor.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String sensorAsId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sensorAsIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer sensorAsIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the target on-orbit object, if correlated.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 101
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Sensor WGS84 latitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double senlat() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor WGS84 longitude at startTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values south of equator).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double senlon() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude at startTime (if mobile/onorbit) in kilometers.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian X position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senx() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Y position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double seny() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Z position of the observing mobile/onorbit sensor at startTime, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senz() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian X velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvelx() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Y velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvely() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Cartesian Z velocity of the observing mobile/onorbit sensor at startTime, in kilometers per second, in the specified senReferenceFrame. If senReferenceFrame is null then J2K should be assumed.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvelz() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * ID of the UDL Elset of the Space Object under observation.
   * Example: /// Example: REF-ELSET-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idElset() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idElsetAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer idElsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Observation set detection start time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Observation set detection end time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The number of observation records in the set.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numObs() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Observation type (OPTICAL, RADAR).
   * Example: /// Example: OPTICAL
   * Constraints: Minimum length = 1, Maximum length = 24
   */
  public byte type() { int o = __offset(48); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Polar angle of the gimbal/mount at observation set detection start time in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double polarAngleStart() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Polar angle of the gimbal/mount at observation set detection end time in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double polarAngleEnd() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The reference frame of the observation measurements. If the referenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte referenceFrame() { int o = __offset(54); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte senReferenceFrame() { int o = __offset(56); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Line of sight declination at observation set detection start time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losDeclinationStart() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Line of sight declination at observation set detection end time. Specified in degrees, in the specified referenceFrame. If referenceFrame is null then J2K should be assumed (e.g -30 to 130.0).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double losDeclinationEnd() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pointing angle of the Azimuth gimbal/mount at observation set detection start time. Specified in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double pointingAngleAzStart() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pointing angle of the Azimuth gimbal/mount at observation set detection end time. Specified in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double pointingAngleAzEnd() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pointing angle of the Elevation gimbal/mount at observation set detection start time. Specified in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double pointingAngleElStart() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pointing angle of the Elevation gimbal/mount at observation set detection end time. Specified in degrees.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double pointingAngleElEnd() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pixel array size (width) in pixels.
   * Example: /// Example: 32
   * Constraints: No constraints specified.
   */
  public int pixelArrayWidth() { int o = __offset(70); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Pixel array size (height) in pixels.
   * Example: /// Example: 32
   * Constraints: No constraints specified.
   */
  public int pixelArrayHeight() { int o = __offset(72); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The value is the number of spectral filters used.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int numSpectralFilters() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of the SpectralFilters keywords, must be present for all values n=1 to numSpectralFilters, in incrementing order of n, and for no other values of n.
   * Example: /// Example: ['Keyword1', 'Keyword2']
   * Constraints: No constraints specified.
   */
  public String spectralFilters(int j) { int o = __offset(76); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int spectralFiltersLength() { int o = __offset(76); return o != 0 ? __vector_len(o) : 0; }
  public StringVector spectralFiltersVector() { return spectralFiltersVector(new StringVector()); }
  public StringVector spectralFiltersVector(StringVector obj) { int o = __offset(76); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Mode indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
   * Example: /// Example: RATE TRACK
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String collectionMode() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionModeAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer collectionModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * The gain used during the collection, in units of photoelectrons per analog-to-digital unit (e-/ADU). If no gain is used, the value = 1.
   * Example: /// Example: 234.2
   * Constraints: No constraints specified.
   */
  public double gain() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of pixels binned horizontally.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int binningHoriz() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number of pixels binned vertically.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int binningVert() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The in-band solar magnitude at 1 A.U.
   * Example: /// Example: -26.91
   * Constraints: No constraints specified.
   */
  public double solarMag() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum valid pixel value.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int pixelMin() { int o = __offset(88); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum valid pixel value.
   * Example: /// Example: 16383
   * Constraints: No constraints specified.
   */
  public int pixelMax() { int o = __offset(90); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Software Version used to Capture, Process, and Deliver the data.
   * Example: /// Example: GSV99/17-1
   * Constraints: Minimum length = 0, Maximum length = 70
   */
  public String softwareVersion() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer softwareVersionAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer softwareVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Name of the target satellite.
   * Example: /// Example: TITAN 3C TRANSTAGE R/B
   * Constraints: Minimum length = 0, Maximum length = 70
   */
  public String satelliteName() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer satelliteNameAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer satelliteNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Name of the Star Catalog used for photometry and astrometry.
   * Example: /// Example: SSTRC5
   * Constraints: Minimum length = 0, Maximum length = 70
   */
  public String starCatName() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer starCatNameAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer starCatNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Object Correlation Quality value. Measures how close the observed object's orbit is to matching an object in the catalog. The scale of this field may vary depending on provider. Users should consult the data provider to verify the meaning of the value (e.g. A value of 0.0 indicates a high/strong correlation, while a value closer to 1.0 indicates low/weak correlation).
   * Example: /// Example: 0.327
   * Constraints: No constraints specified.
   */
  public double corrQuality() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating whether the target object was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an OnOrbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean uct() { int o = __offset(100); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Key to indicate which, if any of, the pre/post photometer calibrations are valid for use when generating data for the EOSSA file. If the field is not populated, then the provided calibration data will be used when generating the EOSSA file (e.g. PRE, POST, BOTH, NONE).
   * Example: /// Example: BOTH
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String validCalibrations() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer validCalibrationsAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer validCalibrationsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Type of calibration used by the Sensor (e.g. ALL SKY, DIFFERENTIAL, DEFAULT, NONE).
   * Example: /// Example: ALL SKY
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String calibrationType() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer calibrationTypeAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer calibrationTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * A threshold for percent of pixels that make up object signal that are beyond the saturation point for the sensor that are removed in the EOSSA file, in range of 0 to 1.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double percentSatThreshold() { int o = __offset(106); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating if any change event was detected, based on historical collection data for the object.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean changeDetected() { int o = __offset(108); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating if a periodicity change event was detected, based on historical collection data for the object.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean periodicityChangeDetected() { int o = __offset(110); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating if a brightness variance change event was detected, based on historical collection data for the object.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean brightnessVarianceChangeDetected() { int o = __offset(112); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating if a solar phase angle brightness change event was detected, based on historical collection data for the object.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean solarPhaseAngleBrightnessChangeDetected() { int o = __offset(114); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Overall qualitative confidence assessment of change detection results (e.g. HIGH, MEDIUM, LOW).
   * Example: /// Example: MEDIUM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String changeConf() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer changeConfAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer changeConfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Qualitative Collection Density assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
   * Example: /// Example: MEDIUM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String collectionDensityConf() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionDensityConfAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer collectionDensityConfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * Qualitative Periodicity Sampling assessment, with respect to confidence of detecting a change event (e.g. HIGH, MEDIUM, LOW).
   * Example: /// Example: MEDIUM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String periodicitySamplingConf() { int o = __offset(120); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer periodicitySamplingConfAsByteBuffer() { return __vector_as_bytebuffer(120, 1); }
  public ByteBuffer periodicitySamplingConfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 120, 1); }
  /**
   * Qualitative assessment of the periodicity detection results from the Attitude and Shape Retrieval (ASR) Periodicity Assessment (PA) Tool (e.g. HIGH, MEDIUM, LOW).
   * Example: /// Example: MEDIUM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String periodicityDetectionConf() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer periodicityDetectionConfAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer periodicityDetectionConfInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Universally Unique collection ID. Mechanism to correlate Single Point Photometry (SPP) JSON files to images.
   * Example: /// Example: b5133288-ab63-4b15-81f6-c7eec0cdb0c0
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String collectionId() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionIdAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer collectionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Array of SOI Calibrations associated with this SOIObservationSet.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String calibrations(int j) { int o = __offset(126); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int calibrationsLength() { int o = __offset(126); return o != 0 ? __vector_len(o) : 0; }
  public StringVector calibrationsVector() { return calibrationsVector(new StringVector()); }
  public StringVector calibrationsVector(StringVector obj) { int o = __offset(126); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(128); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(128); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(128); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * OpticalSOIObservations associated with this SOIObservationSet.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String opticalSoiobservationList(int j) { int o = __offset(132); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int opticalSoiobservationListLength() { int o = __offset(132); return o != 0 ? __vector_len(o) : 0; }
  public StringVector opticalSoiobservationListVector() { return opticalSoiobservationListVector(new StringVector()); }
  public StringVector opticalSoiobservationListVector(StringVector obj) { int o = __offset(132); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * RadarSOIObservations associated with this RadarSOIObservationSet.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String radarSoiobservationList(int j) { int o = __offset(134); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int radarSoiobservationListLength() { int o = __offset(134); return o != 0 ? __vector_len(o) : 0; }
  public StringVector radarSoiobservationListVector() { return radarSoiobservationListVector(new StringVector()); }
  public StringVector radarSoiobservationListVector(StringVector obj) { int o = __offset(134); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(140); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(140, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 140, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(142); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(142, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 142, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(144); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(144, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 144, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(146); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(146, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 146, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(148); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createSOIObservationSet_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int msgCreateDateOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int sensorAsIdOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      double senlat,
      double senlon,
      double senalt,
      double senx,
      double seny,
      double senz,
      double senvelx,
      double senvely,
      double senvelz,
      int idElsetOffset,
      int startTimeOffset,
      int endTimeOffset,
      int numObs,
      byte type,
      double polarAngleStart,
      double polarAngleEnd,
      byte referenceFrame,
      byte senReferenceFrame,
      double losDeclinationStart,
      double losDeclinationEnd,
      double pointingAngleAzStart,
      double pointingAngleAzEnd,
      double pointingAngleElStart,
      double pointingAngleElEnd,
      int pixelArrayWidth,
      int pixelArrayHeight,
      int numSpectralFilters,
      int spectralFiltersOffset,
      int collectionModeOffset,
      double gain,
      int binningHoriz,
      int binningVert,
      double solarMag,
      int pixelMin,
      int pixelMax,
      int softwareVersionOffset,
      int satelliteNameOffset,
      int starCatNameOffset,
      double corrQuality,
      boolean uct,
      int validCalibrationsOffset,
      int calibrationTypeOffset,
      double percentSatThreshold,
      boolean changeDetected,
      boolean periodicityChangeDetected,
      boolean brightnessVarianceChangeDetected,
      boolean solarPhaseAngleBrightnessChangeDetected,
      int changeConfOffset,
      int collectionDensityConfOffset,
      int periodicitySamplingConfOffset,
      int periodicityDetectionConfOffset,
      int collectionIdOffset,
      int calibrationsOffset,
      int tagsOffset,
      int transactionIdOffset,
      int opticalSoiobservationListOffset,
      int radarSoiobservationListOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      int sourceDlOffset,
      byte dataMode) {
    builder.startTable(73);
    SOIObservationSet_Full.addPercentSatThreshold(builder, percentSatThreshold);
    SOIObservationSet_Full.addCorrQuality(builder, corrQuality);
    SOIObservationSet_Full.addSolarMag(builder, solarMag);
    SOIObservationSet_Full.addGain(builder, gain);
    SOIObservationSet_Full.addPointingAngleElEnd(builder, pointingAngleElEnd);
    SOIObservationSet_Full.addPointingAngleElStart(builder, pointingAngleElStart);
    SOIObservationSet_Full.addPointingAngleAzEnd(builder, pointingAngleAzEnd);
    SOIObservationSet_Full.addPointingAngleAzStart(builder, pointingAngleAzStart);
    SOIObservationSet_Full.addLosDeclinationEnd(builder, losDeclinationEnd);
    SOIObservationSet_Full.addLosDeclinationStart(builder, losDeclinationStart);
    SOIObservationSet_Full.addPolarAngleEnd(builder, polarAngleEnd);
    SOIObservationSet_Full.addPolarAngleStart(builder, polarAngleStart);
    SOIObservationSet_Full.addSenvelz(builder, senvelz);
    SOIObservationSet_Full.addSenvely(builder, senvely);
    SOIObservationSet_Full.addSenvelx(builder, senvelx);
    SOIObservationSet_Full.addSenz(builder, senz);
    SOIObservationSet_Full.addSeny(builder, seny);
    SOIObservationSet_Full.addSenx(builder, senx);
    SOIObservationSet_Full.addSenalt(builder, senalt);
    SOIObservationSet_Full.addSenlon(builder, senlon);
    SOIObservationSet_Full.addSenlat(builder, senlat);
    SOIObservationSet_Full.addSourceDl(builder, sourceDlOffset);
    SOIObservationSet_Full.addOrigNetwork(builder, origNetworkOffset);
    SOIObservationSet_Full.addOrigin(builder, originOffset);
    SOIObservationSet_Full.addSource(builder, sourceOffset);
    SOIObservationSet_Full.addCreatedBy(builder, createdByOffset);
    SOIObservationSet_Full.addCreatedAt(builder, createdAtOffset);
    SOIObservationSet_Full.addRadarSoiobservationList(builder, radarSoiobservationListOffset);
    SOIObservationSet_Full.addOpticalSoiobservationList(builder, opticalSoiobservationListOffset);
    SOIObservationSet_Full.addTransactionId(builder, transactionIdOffset);
    SOIObservationSet_Full.addTags(builder, tagsOffset);
    SOIObservationSet_Full.addCalibrations(builder, calibrationsOffset);
    SOIObservationSet_Full.addCollectionId(builder, collectionIdOffset);
    SOIObservationSet_Full.addPeriodicityDetectionConf(builder, periodicityDetectionConfOffset);
    SOIObservationSet_Full.addPeriodicitySamplingConf(builder, periodicitySamplingConfOffset);
    SOIObservationSet_Full.addCollectionDensityConf(builder, collectionDensityConfOffset);
    SOIObservationSet_Full.addChangeConf(builder, changeConfOffset);
    SOIObservationSet_Full.addCalibrationType(builder, calibrationTypeOffset);
    SOIObservationSet_Full.addValidCalibrations(builder, validCalibrationsOffset);
    SOIObservationSet_Full.addStarCatName(builder, starCatNameOffset);
    SOIObservationSet_Full.addSatelliteName(builder, satelliteNameOffset);
    SOIObservationSet_Full.addSoftwareVersion(builder, softwareVersionOffset);
    SOIObservationSet_Full.addPixelMax(builder, pixelMax);
    SOIObservationSet_Full.addPixelMin(builder, pixelMin);
    SOIObservationSet_Full.addBinningVert(builder, binningVert);
    SOIObservationSet_Full.addBinningHoriz(builder, binningHoriz);
    SOIObservationSet_Full.addCollectionMode(builder, collectionModeOffset);
    SOIObservationSet_Full.addSpectralFilters(builder, spectralFiltersOffset);
    SOIObservationSet_Full.addNumSpectralFilters(builder, numSpectralFilters);
    SOIObservationSet_Full.addPixelArrayHeight(builder, pixelArrayHeight);
    SOIObservationSet_Full.addPixelArrayWidth(builder, pixelArrayWidth);
    SOIObservationSet_Full.addNumObs(builder, numObs);
    SOIObservationSet_Full.addEndTime(builder, endTimeOffset);
    SOIObservationSet_Full.addStartTime(builder, startTimeOffset);
    SOIObservationSet_Full.addIdElset(builder, idElsetOffset);
    SOIObservationSet_Full.addOrigObjectId(builder, origObjectIdOffset);
    SOIObservationSet_Full.addSatNo(builder, satNo);
    SOIObservationSet_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    SOIObservationSet_Full.addSensorAsId(builder, sensorAsIdOffset);
    SOIObservationSet_Full.addOrigSensorId(builder, origSensorIdOffset);
    SOIObservationSet_Full.addIdSensor(builder, idSensorOffset);
    SOIObservationSet_Full.addMsgCreateDate(builder, msgCreateDateOffset);
    SOIObservationSet_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SOIObservationSet_Full.addId(builder, idOffset);
    SOIObservationSet_Full.addDataMode(builder, dataMode);
    SOIObservationSet_Full.addSolarPhaseAngleBrightnessChangeDetected(builder, solarPhaseAngleBrightnessChangeDetected);
    SOIObservationSet_Full.addBrightnessVarianceChangeDetected(builder, brightnessVarianceChangeDetected);
    SOIObservationSet_Full.addPeriodicityChangeDetected(builder, periodicityChangeDetected);
    SOIObservationSet_Full.addChangeDetected(builder, changeDetected);
    SOIObservationSet_Full.addUct(builder, uct);
    SOIObservationSet_Full.addSenReferenceFrame(builder, senReferenceFrame);
    SOIObservationSet_Full.addReferenceFrame(builder, referenceFrame);
    SOIObservationSet_Full.addType(builder, type);
    return SOIObservationSet_Full.endSOIObservationSet_Full(builder);
  }

  public static void startSOIObservationSet_Full(FlatBufferBuilder builder) { builder.startTable(73); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addMsgCreateDate(FlatBufferBuilder builder, int msgCreateDateOffset) { builder.addOffset(2, msgCreateDateOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(3, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(4, origSensorIdOffset, 0); }
  public static void addSensorAsId(FlatBufferBuilder builder, int sensorAsIdOffset) { builder.addOffset(5, sensorAsIdOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(6, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(7, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(8, origObjectIdOffset, 0); }
  public static void addSenlat(FlatBufferBuilder builder, double senlat) { builder.addDouble(9, senlat, 0.0); }
  public static void addSenlon(FlatBufferBuilder builder, double senlon) { builder.addDouble(10, senlon, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(11, senalt, 0.0); }
  public static void addSenx(FlatBufferBuilder builder, double senx) { builder.addDouble(12, senx, 0.0); }
  public static void addSeny(FlatBufferBuilder builder, double seny) { builder.addDouble(13, seny, 0.0); }
  public static void addSenz(FlatBufferBuilder builder, double senz) { builder.addDouble(14, senz, 0.0); }
  public static void addSenvelx(FlatBufferBuilder builder, double senvelx) { builder.addDouble(15, senvelx, 0.0); }
  public static void addSenvely(FlatBufferBuilder builder, double senvely) { builder.addDouble(16, senvely, 0.0); }
  public static void addSenvelz(FlatBufferBuilder builder, double senvelz) { builder.addDouble(17, senvelz, 0.0); }
  public static void addIdElset(FlatBufferBuilder builder, int idElsetOffset) { builder.addOffset(18, idElsetOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(19, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(20, endTimeOffset, 0); }
  public static void addNumObs(FlatBufferBuilder builder, int numObs) { builder.addInt(21, numObs, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(22, type, 0); }
  public static void addPolarAngleStart(FlatBufferBuilder builder, double polarAngleStart) { builder.addDouble(23, polarAngleStart, 0.0); }
  public static void addPolarAngleEnd(FlatBufferBuilder builder, double polarAngleEnd) { builder.addDouble(24, polarAngleEnd, 0.0); }
  public static void addReferenceFrame(FlatBufferBuilder builder, byte referenceFrame) { builder.addByte(25, referenceFrame, 0); }
  public static void addSenReferenceFrame(FlatBufferBuilder builder, byte senReferenceFrame) { builder.addByte(26, senReferenceFrame, 0); }
  public static void addLosDeclinationStart(FlatBufferBuilder builder, double losDeclinationStart) { builder.addDouble(27, losDeclinationStart, 0.0); }
  public static void addLosDeclinationEnd(FlatBufferBuilder builder, double losDeclinationEnd) { builder.addDouble(28, losDeclinationEnd, 0.0); }
  public static void addPointingAngleAzStart(FlatBufferBuilder builder, double pointingAngleAzStart) { builder.addDouble(29, pointingAngleAzStart, 0.0); }
  public static void addPointingAngleAzEnd(FlatBufferBuilder builder, double pointingAngleAzEnd) { builder.addDouble(30, pointingAngleAzEnd, 0.0); }
  public static void addPointingAngleElStart(FlatBufferBuilder builder, double pointingAngleElStart) { builder.addDouble(31, pointingAngleElStart, 0.0); }
  public static void addPointingAngleElEnd(FlatBufferBuilder builder, double pointingAngleElEnd) { builder.addDouble(32, pointingAngleElEnd, 0.0); }
  public static void addPixelArrayWidth(FlatBufferBuilder builder, int pixelArrayWidth) { builder.addInt(33, pixelArrayWidth, 0); }
  public static void addPixelArrayHeight(FlatBufferBuilder builder, int pixelArrayHeight) { builder.addInt(34, pixelArrayHeight, 0); }
  public static void addNumSpectralFilters(FlatBufferBuilder builder, int numSpectralFilters) { builder.addInt(35, numSpectralFilters, 0); }
  public static void addSpectralFilters(FlatBufferBuilder builder, int spectralFiltersOffset) { builder.addOffset(36, spectralFiltersOffset, 0); }
  public static int createSpectralFiltersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSpectralFiltersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCollectionMode(FlatBufferBuilder builder, int collectionModeOffset) { builder.addOffset(37, collectionModeOffset, 0); }
  public static void addGain(FlatBufferBuilder builder, double gain) { builder.addDouble(38, gain, 0.0); }
  public static void addBinningHoriz(FlatBufferBuilder builder, int binningHoriz) { builder.addInt(39, binningHoriz, 0); }
  public static void addBinningVert(FlatBufferBuilder builder, int binningVert) { builder.addInt(40, binningVert, 0); }
  public static void addSolarMag(FlatBufferBuilder builder, double solarMag) { builder.addDouble(41, solarMag, 0.0); }
  public static void addPixelMin(FlatBufferBuilder builder, int pixelMin) { builder.addInt(42, pixelMin, 0); }
  public static void addPixelMax(FlatBufferBuilder builder, int pixelMax) { builder.addInt(43, pixelMax, 0); }
  public static void addSoftwareVersion(FlatBufferBuilder builder, int softwareVersionOffset) { builder.addOffset(44, softwareVersionOffset, 0); }
  public static void addSatelliteName(FlatBufferBuilder builder, int satelliteNameOffset) { builder.addOffset(45, satelliteNameOffset, 0); }
  public static void addStarCatName(FlatBufferBuilder builder, int starCatNameOffset) { builder.addOffset(46, starCatNameOffset, 0); }
  public static void addCorrQuality(FlatBufferBuilder builder, double corrQuality) { builder.addDouble(47, corrQuality, 0.0); }
  public static void addUct(FlatBufferBuilder builder, boolean uct) { builder.addBoolean(48, uct, false); }
  public static void addValidCalibrations(FlatBufferBuilder builder, int validCalibrationsOffset) { builder.addOffset(49, validCalibrationsOffset, 0); }
  public static void addCalibrationType(FlatBufferBuilder builder, int calibrationTypeOffset) { builder.addOffset(50, calibrationTypeOffset, 0); }
  public static void addPercentSatThreshold(FlatBufferBuilder builder, double percentSatThreshold) { builder.addDouble(51, percentSatThreshold, 0.0); }
  public static void addChangeDetected(FlatBufferBuilder builder, boolean changeDetected) { builder.addBoolean(52, changeDetected, false); }
  public static void addPeriodicityChangeDetected(FlatBufferBuilder builder, boolean periodicityChangeDetected) { builder.addBoolean(53, periodicityChangeDetected, false); }
  public static void addBrightnessVarianceChangeDetected(FlatBufferBuilder builder, boolean brightnessVarianceChangeDetected) { builder.addBoolean(54, brightnessVarianceChangeDetected, false); }
  public static void addSolarPhaseAngleBrightnessChangeDetected(FlatBufferBuilder builder, boolean solarPhaseAngleBrightnessChangeDetected) { builder.addBoolean(55, solarPhaseAngleBrightnessChangeDetected, false); }
  public static void addChangeConf(FlatBufferBuilder builder, int changeConfOffset) { builder.addOffset(56, changeConfOffset, 0); }
  public static void addCollectionDensityConf(FlatBufferBuilder builder, int collectionDensityConfOffset) { builder.addOffset(57, collectionDensityConfOffset, 0); }
  public static void addPeriodicitySamplingConf(FlatBufferBuilder builder, int periodicitySamplingConfOffset) { builder.addOffset(58, periodicitySamplingConfOffset, 0); }
  public static void addPeriodicityDetectionConf(FlatBufferBuilder builder, int periodicityDetectionConfOffset) { builder.addOffset(59, periodicityDetectionConfOffset, 0); }
  public static void addCollectionId(FlatBufferBuilder builder, int collectionIdOffset) { builder.addOffset(60, collectionIdOffset, 0); }
  public static void addCalibrations(FlatBufferBuilder builder, int calibrationsOffset) { builder.addOffset(61, calibrationsOffset, 0); }
  public static int createCalibrationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCalibrationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(62, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(63, transactionIdOffset, 0); }
  public static void addOpticalSoiobservationList(FlatBufferBuilder builder, int opticalSoiobservationListOffset) { builder.addOffset(64, opticalSoiobservationListOffset, 0); }
  public static int createOpticalSoiobservationListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOpticalSoiobservationListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRadarSoiobservationList(FlatBufferBuilder builder, int radarSoiobservationListOffset) { builder.addOffset(65, radarSoiobservationListOffset, 0); }
  public static int createRadarSoiobservationListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRadarSoiobservationListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(66, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(67, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(68, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(69, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(70, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(71, sourceDlOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(72, dataMode, 0); }
  public static int endSOIObservationSet_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSOIObservationSet_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SOIO"); }
  public static void finishSizePrefixedSOIObservationSet_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SOIO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SOIObservationSet_Full get(int j) { return get(new SOIObservationSet_Full(), j); }
    public SOIObservationSet_Full get(SOIObservationSet_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

