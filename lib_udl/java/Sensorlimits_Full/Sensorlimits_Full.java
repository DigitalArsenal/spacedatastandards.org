// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
 */
@SuppressWarnings("unused")
public final class Sensorlimits_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Sensorlimits_Full getRootAsSensorlimits_Full(ByteBuffer _bb) { return getRootAsSensorlimits_Full(_bb, new Sensorlimits_Full()); }
  public static Sensorlimits_Full getRootAsSensorlimits_Full(ByteBuffer _bb, Sensorlimits_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Sensorlimits_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SENS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Sensorlimits_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SENSORLIMITS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idSensorLimits() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorLimitsAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idSensorLimitsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double upperLeftAzimuthLimit() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double upperRightAzimuthLimit() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double lowerRightAzimuthLimit() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double lowerLeftAzimuthLimit() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double lowerLeftElevationLimit() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double upperLeftElevationLimit() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double lowerRightElevationLimit() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double upperRightElevationLimit() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(28); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Unique identifier of the target sensor object.
   * Example: /// Example: SENSORLIMITS-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }

  public static int createSensorlimits_Full(FlatBufferBuilder builder,
      int idSensorLimitsOffset,
      int classificationMarkingOffset,
      int origNetworkOffset,
      double upperLeftAzimuthLimit,
      double upperRightAzimuthLimit,
      double lowerRightAzimuthLimit,
      double lowerLeftAzimuthLimit,
      double lowerLeftElevationLimit,
      double upperLeftElevationLimit,
      double lowerRightElevationLimit,
      double upperRightElevationLimit,
      int sourceOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int idSensorOffset) {
    builder.startTable(18);
    Sensorlimits_Full.addUpperRightElevationLimit(builder, upperRightElevationLimit);
    Sensorlimits_Full.addLowerRightElevationLimit(builder, lowerRightElevationLimit);
    Sensorlimits_Full.addUpperLeftElevationLimit(builder, upperLeftElevationLimit);
    Sensorlimits_Full.addLowerLeftElevationLimit(builder, lowerLeftElevationLimit);
    Sensorlimits_Full.addLowerLeftAzimuthLimit(builder, lowerLeftAzimuthLimit);
    Sensorlimits_Full.addLowerRightAzimuthLimit(builder, lowerRightAzimuthLimit);
    Sensorlimits_Full.addUpperRightAzimuthLimit(builder, upperRightAzimuthLimit);
    Sensorlimits_Full.addUpperLeftAzimuthLimit(builder, upperLeftAzimuthLimit);
    Sensorlimits_Full.addIdSensor(builder, idSensorOffset);
    Sensorlimits_Full.addUpdatedBy(builder, updatedByOffset);
    Sensorlimits_Full.addUpdatedAt(builder, updatedAtOffset);
    Sensorlimits_Full.addCreatedBy(builder, createdByOffset);
    Sensorlimits_Full.addCreatedAt(builder, createdAtOffset);
    Sensorlimits_Full.addSource(builder, sourceOffset);
    Sensorlimits_Full.addOrigNetwork(builder, origNetworkOffset);
    Sensorlimits_Full.addClassificationMarking(builder, classificationMarkingOffset);
    Sensorlimits_Full.addIdSensorLimits(builder, idSensorLimitsOffset);
    Sensorlimits_Full.addDataMode(builder, dataMode);
    return Sensorlimits_Full.endSensorlimits_Full(builder);
  }

  public static void startSensorlimits_Full(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addIdSensorLimits(FlatBufferBuilder builder, int idSensorLimitsOffset) { builder.addOffset(0, idSensorLimitsOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(2, origNetworkOffset, 0); }
  public static void addUpperLeftAzimuthLimit(FlatBufferBuilder builder, double upperLeftAzimuthLimit) { builder.addDouble(3, upperLeftAzimuthLimit, 0.0); }
  public static void addUpperRightAzimuthLimit(FlatBufferBuilder builder, double upperRightAzimuthLimit) { builder.addDouble(4, upperRightAzimuthLimit, 0.0); }
  public static void addLowerRightAzimuthLimit(FlatBufferBuilder builder, double lowerRightAzimuthLimit) { builder.addDouble(5, lowerRightAzimuthLimit, 0.0); }
  public static void addLowerLeftAzimuthLimit(FlatBufferBuilder builder, double lowerLeftAzimuthLimit) { builder.addDouble(6, lowerLeftAzimuthLimit, 0.0); }
  public static void addLowerLeftElevationLimit(FlatBufferBuilder builder, double lowerLeftElevationLimit) { builder.addDouble(7, lowerLeftElevationLimit, 0.0); }
  public static void addUpperLeftElevationLimit(FlatBufferBuilder builder, double upperLeftElevationLimit) { builder.addDouble(8, upperLeftElevationLimit, 0.0); }
  public static void addLowerRightElevationLimit(FlatBufferBuilder builder, double lowerRightElevationLimit) { builder.addDouble(9, lowerRightElevationLimit, 0.0); }
  public static void addUpperRightElevationLimit(FlatBufferBuilder builder, double upperRightElevationLimit) { builder.addDouble(10, upperRightElevationLimit, 0.0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(11, sourceOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(12, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(13, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(14, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(15, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(16, updatedByOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(17, idSensorOffset, 0); }
  public static int endSensorlimits_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSensorlimits_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SENS"); }
  public static void finishSizePrefixedSensorlimits_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SENS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Sensorlimits_Full get(int j) { return get(new Sensorlimits_Full(), j); }
    public Sensorlimits_Full get(Sensorlimits_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

