// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
 */
@SuppressWarnings("unused")
public final class NavigationalObstruction_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static NavigationalObstruction_Abridged getRootAsNavigationalObstruction_Abridged(ByteBuffer _bb) { return getRootAsNavigationalObstruction_Abridged(_bb, new NavigationalObstruction_Abridged()); }
  public static NavigationalObstruction_Abridged getRootAsNavigationalObstruction_Abridged(ByteBuffer _bb, NavigationalObstruction_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean NavigationalObstruction_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "NAVI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public NavigationalObstruction_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Start date of this obstruction data set's currency, in ISO 8601 date-only format.
   * Example: /// Example: 2024-06-13
   * Constraints: No constraints specified.
   */
  public String cycleDate() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cycleDateAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer cycleDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Type of obstacle (e.g. P for point, V for vector, L for line).
   * Example: /// Example: V
   * Constraints: Minimum length = 1, Maximum length = 1
   */
  public String obstacleType() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obstacleTypeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer obstacleTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The ID of this obstacle.
   * Example: /// Example: 359655
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String obstacleId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obstacleIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer obstacleIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: OU812
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String externalId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The original ID for this obstacle.
   * Example: /// Example: L0000002289
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer origIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
   * Example: /// Example: 23
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String provinceCode() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer provinceCodeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer provinceCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 46.757211
   * Constraints: No constraints specified.
   */
  public double pointLat() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -67.759494
   * Constraints: No constraints specified.
   */
  public double pointLon() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -122.197891
   * Constraints: No constraints specified.
   */
  public double lineNelon() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 49.000584
   * Constraints: No constraints specified.
   */
  public double lineNelat() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -122.722946
   * Constraints: No constraints specified.
   */
  public double lineSwlon() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 48.507027
   * Constraints: No constraints specified.
   */
  public double lineSwlat() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * ID of the starting point of a line segment.
   * Example: /// Example: 359655
   * Constraints: No constraints specified.
   */
  public int segStartPoint() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * ID of the end point of a line segment.
   * Example: /// Example: 359655
   * Constraints: No constraints specified.
   */
  public int segEndPoint() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Identifies the sequence number of a line segment.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int segNum() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
   * Example: /// Example: AT040
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String facc() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer faccAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer faccInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Identifying code for the type of this point obstacle.
   * Example: /// Example: 540
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String featureCode() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer featureCodeAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer featureCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Identifying code for the type of this point obstacle.
   * Example: /// Example: 540
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String featureType() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer featureTypeAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer featureTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Type name of point obstacle.
   * Example: /// Example: PYLON
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String featureName() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer featureNameAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer featureNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
   * Example: /// Example: Powerline Pylon, General
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String featureDescription() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer featureDescriptionAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer featureDescriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
   * Example: /// Example: 262
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String wac() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wacAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer wacInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * This obstacle's World Area Code installation number (WAC-INNR).
   * Example: /// Example: 0409-00039
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String wacInnr() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wacInnrAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer wacInnrInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
   * Example: /// Example: S
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String multObs() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer multObsAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer multObsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Indicates the number of obstructions associated with a feature.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numObs() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
   * Example: /// Example: WGS-84
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String horizDatumCode() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer horizDatumCodeAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer horizDatumCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * The height Above Ground Level (AGL) of the point obstacle in feet.
   * Example: /// Example: 314.1
   * Constraints: No constraints specified.
   */
  public double heightAgl() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
   * Example: /// Example: 30.1
   * Constraints: No constraints specified.
   */
  public double heightAglacc() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
   * Example: /// Example: 1154.1
   * Constraints: No constraints specified.
   */
  public double heightMsl() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
   * Example: /// Example: 34.1
   * Constraints: No constraints specified.
   */
  public double heightMslacc() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The elevation at the point obstacle's location in feet.
   * Example: /// Example: 840.1
   * Constraints: No constraints specified.
   */
  public double elevation() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The difference between the assigned elevation of this point and its true elevation, in feet.
   * Example: /// Example: 17.1
   * Constraints: No constraints specified.
   */
  public double elevationAcc() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
   * Example: /// Example: 8.1
   * Constraints: No constraints specified.
   */
  public double horizAcc() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
   * Example: /// Example: 0
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String quality() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer qualityAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer qualityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
   * Example: /// Example: U
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String lightingCode() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lightingCodeAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer lightingCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * The surface material composition code of this point obstacle.
   * Example: /// Example: U
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String surfaceMatCode() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer surfaceMatCodeAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer surfaceMatCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * The side or sides of this obstruction feature which produces the greatest reflectivity potential.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int directivityCode() { int o = __offset(80); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Method used to confirm the existence of this obstacle.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int validationCode() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
   * Example: /// Example: V
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String transactionCode() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionCodeAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer transactionCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Code denoting the action, review, or process that updated this obstacle.
   * Example: /// Example: OT
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String processCode() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer processCodeAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer processCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Indicates if this obstacle record is Active (A) or Deleted (D).
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String actDelCode() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actDelCodeAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer actDelCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Name of the agency that produced this obstruction data set.
   * Example: /// Example: ACME
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String producer() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer producerAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer producerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * The organization that entered obstacle data other than the producer.
   * Example: /// Example: ACME
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String derivingOrg() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer derivingOrgAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer derivingOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * The organization that deleted this obstacle record.
   * Example: /// Example: ACME
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String deletingOrg() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer deletingOrgAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer deletingOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
   * Example: /// Example: 2016-04-01
   * Constraints: No constraints specified.
   */
  public String sourceDate() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDateAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer sourceDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
   * Example: /// Example: 2020-02-26
   * Constraints: No constraints specified.
   */
  public String revDate() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer revDateAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer revDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
   * Example: /// Example: 1991-03-28
   * Constraints: No constraints specified.
   */
  public String initRecordDate() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer initRecordDateAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer initRecordDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
   * Example: /// Example: ['key1', 'key2']
   * Constraints: No constraints specified.
   */
  public String keys(int j) { int o = __offset(102); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int keysLength() { int o = __offset(102); return o != 0 ? __vector_len(o) : 0; }
  public StringVector keysVector() { return keysVector(new StringVector()); }
  public StringVector keysVector(StringVector obj) { int o = __offset(102); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
   * Example: /// Example: ['value1', 'value2']
   * Constraints: No constraints specified.
   */
  public String values(int j) { int o = __offset(104); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int valuesLength() { int o = __offset(104); return o != 0 ? __vector_len(o) : 0; }
  public StringVector valuesVector() { return valuesVector(new StringVector()); }
  public StringVector valuesVector(StringVector obj) { int o = __offset(104); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Remarks regarding this obstacle.
   * Example: /// Example: Obstacle remarks
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String obstacleRemarks() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obstacleRemarksAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer obstacleRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
   * Example: /// Example: 2024-07-11
   * Constraints: No constraints specified.
   */
  public String nextCycleDate() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nextCycleDateAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer nextCycleDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
   * Example: /// Example: 2024-04-23
   * Constraints: No constraints specified.
   */
  public String baselineCutoffDate() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer baselineCutoffDateAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer baselineCutoffDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
   * Example: /// Example: 2024-05-21
   * Constraints: No constraints specified.
   */
  public String cutoffDate() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cutoffDateAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer cutoffDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
   * Example: /// Example: 2406
   * Constraints: No constraints specified.
   */
  public int airacCycle() { int o = __offset(114); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
   * Example: /// Example: 2405
   * Constraints: No constraints specified.
   */
  public int baseAiracCycle() { int o = __offset(116); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String ownerCountryCode() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerCountryCodeAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer ownerCountryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 99.1
   * Constraints: No constraints specified.
   */
  public double boundNelon() { int o = __offset(120); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 29.1
   * Constraints: No constraints specified.
   */
  public double boundNelat() { int o = __offset(122); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -144.1
   * Constraints: No constraints specified.
   */
  public double boundSwlon() { int o = __offset(124); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: -44.1
   * Constraints: No constraints specified.
   */
  public double boundSwlat() { int o = __offset(126); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
   * Example: /// Example: 20.1
   * Constraints: No constraints specified.
   */
  public double minHeightAgl() { int o = __offset(128); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of point features associated with this obstruction data set.
   * Example: /// Example: 21830590
   * Constraints: No constraints specified.
   */
  public int numPoints() { int o = __offset(130); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number of line features associated with this obstruction data set.
   * Example: /// Example: 45993
   * Constraints: No constraints specified.
   */
  public int numLines() { int o = __offset(132); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Remarks concerning this obstruction's data set.
   * Example: /// Example: Data set remarks
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String dataSetRemarks() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dataSetRemarksAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer dataSetRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }
  /**
   * The name of the point file associated with this obstruction data set.
   * Example: /// Example: points.txt
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String pointsFilename() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pointsFilenameAsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer pointsFilenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * The name of the line file associated with this obstruction data set.
   * Example: /// Example: lines.txt
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String linesFilename() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linesFilenameAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer linesFilenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * The name of the vector file associated with this obstruction data set.
   * Example: /// Example: vectors.txt
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String vectorsFilename() { int o = __offset(140); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vectorsFilenameAsByteBuffer() { return __vector_as_bytebuffer(140, 1); }
  public ByteBuffer vectorsFilenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 140, 1); }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(142); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(142, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 142, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(144); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(144, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 144, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(146); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(146, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 146, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(148); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(148, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 148, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(150); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(150, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 150, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(152); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(152, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 152, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(154); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(154, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 154, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(156); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createNavigationalObstruction_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int cycleDateOffset,
      int obstacleTypeOffset,
      int obstacleIdOffset,
      int externalIdOffset,
      int origIdOffset,
      int countryCodeOffset,
      int provinceCodeOffset,
      double pointLat,
      double pointLon,
      double lineNelon,
      double lineNelat,
      double lineSwlon,
      double lineSwlat,
      int segStartPoint,
      int segEndPoint,
      int segNum,
      int faccOffset,
      int featureCodeOffset,
      int featureTypeOffset,
      int featureNameOffset,
      int featureDescriptionOffset,
      int wacOffset,
      int wacInnrOffset,
      int multObsOffset,
      int numObs,
      int horizDatumCodeOffset,
      double heightAgl,
      double heightAglacc,
      double heightMsl,
      double heightMslacc,
      double elevation,
      double elevationAcc,
      double horizAcc,
      int qualityOffset,
      int lightingCodeOffset,
      int surfaceMatCodeOffset,
      int directivityCode,
      int validationCode,
      int transactionCodeOffset,
      int processCodeOffset,
      int actDelCodeOffset,
      int producerOffset,
      int derivingOrgOffset,
      int deletingOrgOffset,
      int sourceDateOffset,
      int revDateOffset,
      int initRecordDateOffset,
      int keysOffset,
      int valuesOffset,
      int obstacleRemarksOffset,
      int nextCycleDateOffset,
      int baselineCutoffDateOffset,
      int cutoffDateOffset,
      int airacCycle,
      int baseAiracCycle,
      int ownerCountryCodeOffset,
      double boundNelon,
      double boundNelat,
      double boundSwlon,
      double boundSwlat,
      double minHeightAgl,
      int numPoints,
      int numLines,
      int dataSetRemarksOffset,
      int pointsFilenameOffset,
      int linesFilenameOffset,
      int vectorsFilenameOffset,
      int rawFileUriOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(77);
    NavigationalObstruction_Abridged.addMinHeightAgl(builder, minHeightAgl);
    NavigationalObstruction_Abridged.addBoundSwlat(builder, boundSwlat);
    NavigationalObstruction_Abridged.addBoundSwlon(builder, boundSwlon);
    NavigationalObstruction_Abridged.addBoundNelat(builder, boundNelat);
    NavigationalObstruction_Abridged.addBoundNelon(builder, boundNelon);
    NavigationalObstruction_Abridged.addHorizAcc(builder, horizAcc);
    NavigationalObstruction_Abridged.addElevationAcc(builder, elevationAcc);
    NavigationalObstruction_Abridged.addElevation(builder, elevation);
    NavigationalObstruction_Abridged.addHeightMslacc(builder, heightMslacc);
    NavigationalObstruction_Abridged.addHeightMsl(builder, heightMsl);
    NavigationalObstruction_Abridged.addHeightAglacc(builder, heightAglacc);
    NavigationalObstruction_Abridged.addHeightAgl(builder, heightAgl);
    NavigationalObstruction_Abridged.addLineSwlat(builder, lineSwlat);
    NavigationalObstruction_Abridged.addLineSwlon(builder, lineSwlon);
    NavigationalObstruction_Abridged.addLineNelat(builder, lineNelat);
    NavigationalObstruction_Abridged.addLineNelon(builder, lineNelon);
    NavigationalObstruction_Abridged.addPointLon(builder, pointLon);
    NavigationalObstruction_Abridged.addPointLat(builder, pointLat);
    NavigationalObstruction_Abridged.addOrigNetwork(builder, origNetworkOffset);
    NavigationalObstruction_Abridged.addOrigin(builder, originOffset);
    NavigationalObstruction_Abridged.addSource(builder, sourceOffset);
    NavigationalObstruction_Abridged.addSourceDl(builder, sourceDlOffset);
    NavigationalObstruction_Abridged.addCreatedBy(builder, createdByOffset);
    NavigationalObstruction_Abridged.addCreatedAt(builder, createdAtOffset);
    NavigationalObstruction_Abridged.addRawFileUri(builder, rawFileUriOffset);
    NavigationalObstruction_Abridged.addVectorsFilename(builder, vectorsFilenameOffset);
    NavigationalObstruction_Abridged.addLinesFilename(builder, linesFilenameOffset);
    NavigationalObstruction_Abridged.addPointsFilename(builder, pointsFilenameOffset);
    NavigationalObstruction_Abridged.addDataSetRemarks(builder, dataSetRemarksOffset);
    NavigationalObstruction_Abridged.addNumLines(builder, numLines);
    NavigationalObstruction_Abridged.addNumPoints(builder, numPoints);
    NavigationalObstruction_Abridged.addOwnerCountryCode(builder, ownerCountryCodeOffset);
    NavigationalObstruction_Abridged.addBaseAiracCycle(builder, baseAiracCycle);
    NavigationalObstruction_Abridged.addAiracCycle(builder, airacCycle);
    NavigationalObstruction_Abridged.addCutoffDate(builder, cutoffDateOffset);
    NavigationalObstruction_Abridged.addBaselineCutoffDate(builder, baselineCutoffDateOffset);
    NavigationalObstruction_Abridged.addNextCycleDate(builder, nextCycleDateOffset);
    NavigationalObstruction_Abridged.addObstacleRemarks(builder, obstacleRemarksOffset);
    NavigationalObstruction_Abridged.addValues(builder, valuesOffset);
    NavigationalObstruction_Abridged.addKeys(builder, keysOffset);
    NavigationalObstruction_Abridged.addInitRecordDate(builder, initRecordDateOffset);
    NavigationalObstruction_Abridged.addRevDate(builder, revDateOffset);
    NavigationalObstruction_Abridged.addSourceDate(builder, sourceDateOffset);
    NavigationalObstruction_Abridged.addDeletingOrg(builder, deletingOrgOffset);
    NavigationalObstruction_Abridged.addDerivingOrg(builder, derivingOrgOffset);
    NavigationalObstruction_Abridged.addProducer(builder, producerOffset);
    NavigationalObstruction_Abridged.addActDelCode(builder, actDelCodeOffset);
    NavigationalObstruction_Abridged.addProcessCode(builder, processCodeOffset);
    NavigationalObstruction_Abridged.addTransactionCode(builder, transactionCodeOffset);
    NavigationalObstruction_Abridged.addValidationCode(builder, validationCode);
    NavigationalObstruction_Abridged.addDirectivityCode(builder, directivityCode);
    NavigationalObstruction_Abridged.addSurfaceMatCode(builder, surfaceMatCodeOffset);
    NavigationalObstruction_Abridged.addLightingCode(builder, lightingCodeOffset);
    NavigationalObstruction_Abridged.addQuality(builder, qualityOffset);
    NavigationalObstruction_Abridged.addHorizDatumCode(builder, horizDatumCodeOffset);
    NavigationalObstruction_Abridged.addNumObs(builder, numObs);
    NavigationalObstruction_Abridged.addMultObs(builder, multObsOffset);
    NavigationalObstruction_Abridged.addWacInnr(builder, wacInnrOffset);
    NavigationalObstruction_Abridged.addWac(builder, wacOffset);
    NavigationalObstruction_Abridged.addFeatureDescription(builder, featureDescriptionOffset);
    NavigationalObstruction_Abridged.addFeatureName(builder, featureNameOffset);
    NavigationalObstruction_Abridged.addFeatureType(builder, featureTypeOffset);
    NavigationalObstruction_Abridged.addFeatureCode(builder, featureCodeOffset);
    NavigationalObstruction_Abridged.addFacc(builder, faccOffset);
    NavigationalObstruction_Abridged.addSegNum(builder, segNum);
    NavigationalObstruction_Abridged.addSegEndPoint(builder, segEndPoint);
    NavigationalObstruction_Abridged.addSegStartPoint(builder, segStartPoint);
    NavigationalObstruction_Abridged.addProvinceCode(builder, provinceCodeOffset);
    NavigationalObstruction_Abridged.addCountryCode(builder, countryCodeOffset);
    NavigationalObstruction_Abridged.addOrigId(builder, origIdOffset);
    NavigationalObstruction_Abridged.addExternalId(builder, externalIdOffset);
    NavigationalObstruction_Abridged.addObstacleId(builder, obstacleIdOffset);
    NavigationalObstruction_Abridged.addObstacleType(builder, obstacleTypeOffset);
    NavigationalObstruction_Abridged.addCycleDate(builder, cycleDateOffset);
    NavigationalObstruction_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    NavigationalObstruction_Abridged.addId(builder, idOffset);
    NavigationalObstruction_Abridged.addDataMode(builder, dataMode);
    return NavigationalObstruction_Abridged.endNavigationalObstruction_Abridged(builder);
  }

  public static void startNavigationalObstruction_Abridged(FlatBufferBuilder builder) { builder.startTable(77); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addCycleDate(FlatBufferBuilder builder, int cycleDateOffset) { builder.addOffset(2, cycleDateOffset, 0); }
  public static void addObstacleType(FlatBufferBuilder builder, int obstacleTypeOffset) { builder.addOffset(3, obstacleTypeOffset, 0); }
  public static void addObstacleId(FlatBufferBuilder builder, int obstacleIdOffset) { builder.addOffset(4, obstacleIdOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(5, externalIdOffset, 0); }
  public static void addOrigId(FlatBufferBuilder builder, int origIdOffset) { builder.addOffset(6, origIdOffset, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(7, countryCodeOffset, 0); }
  public static void addProvinceCode(FlatBufferBuilder builder, int provinceCodeOffset) { builder.addOffset(8, provinceCodeOffset, 0); }
  public static void addPointLat(FlatBufferBuilder builder, double pointLat) { builder.addDouble(9, pointLat, 0.0); }
  public static void addPointLon(FlatBufferBuilder builder, double pointLon) { builder.addDouble(10, pointLon, 0.0); }
  public static void addLineNelon(FlatBufferBuilder builder, double lineNelon) { builder.addDouble(11, lineNelon, 0.0); }
  public static void addLineNelat(FlatBufferBuilder builder, double lineNelat) { builder.addDouble(12, lineNelat, 0.0); }
  public static void addLineSwlon(FlatBufferBuilder builder, double lineSwlon) { builder.addDouble(13, lineSwlon, 0.0); }
  public static void addLineSwlat(FlatBufferBuilder builder, double lineSwlat) { builder.addDouble(14, lineSwlat, 0.0); }
  public static void addSegStartPoint(FlatBufferBuilder builder, int segStartPoint) { builder.addInt(15, segStartPoint, 0); }
  public static void addSegEndPoint(FlatBufferBuilder builder, int segEndPoint) { builder.addInt(16, segEndPoint, 0); }
  public static void addSegNum(FlatBufferBuilder builder, int segNum) { builder.addInt(17, segNum, 0); }
  public static void addFacc(FlatBufferBuilder builder, int faccOffset) { builder.addOffset(18, faccOffset, 0); }
  public static void addFeatureCode(FlatBufferBuilder builder, int featureCodeOffset) { builder.addOffset(19, featureCodeOffset, 0); }
  public static void addFeatureType(FlatBufferBuilder builder, int featureTypeOffset) { builder.addOffset(20, featureTypeOffset, 0); }
  public static void addFeatureName(FlatBufferBuilder builder, int featureNameOffset) { builder.addOffset(21, featureNameOffset, 0); }
  public static void addFeatureDescription(FlatBufferBuilder builder, int featureDescriptionOffset) { builder.addOffset(22, featureDescriptionOffset, 0); }
  public static void addWac(FlatBufferBuilder builder, int wacOffset) { builder.addOffset(23, wacOffset, 0); }
  public static void addWacInnr(FlatBufferBuilder builder, int wacInnrOffset) { builder.addOffset(24, wacInnrOffset, 0); }
  public static void addMultObs(FlatBufferBuilder builder, int multObsOffset) { builder.addOffset(25, multObsOffset, 0); }
  public static void addNumObs(FlatBufferBuilder builder, int numObs) { builder.addInt(26, numObs, 0); }
  public static void addHorizDatumCode(FlatBufferBuilder builder, int horizDatumCodeOffset) { builder.addOffset(27, horizDatumCodeOffset, 0); }
  public static void addHeightAgl(FlatBufferBuilder builder, double heightAgl) { builder.addDouble(28, heightAgl, 0.0); }
  public static void addHeightAglacc(FlatBufferBuilder builder, double heightAglacc) { builder.addDouble(29, heightAglacc, 0.0); }
  public static void addHeightMsl(FlatBufferBuilder builder, double heightMsl) { builder.addDouble(30, heightMsl, 0.0); }
  public static void addHeightMslacc(FlatBufferBuilder builder, double heightMslacc) { builder.addDouble(31, heightMslacc, 0.0); }
  public static void addElevation(FlatBufferBuilder builder, double elevation) { builder.addDouble(32, elevation, 0.0); }
  public static void addElevationAcc(FlatBufferBuilder builder, double elevationAcc) { builder.addDouble(33, elevationAcc, 0.0); }
  public static void addHorizAcc(FlatBufferBuilder builder, double horizAcc) { builder.addDouble(34, horizAcc, 0.0); }
  public static void addQuality(FlatBufferBuilder builder, int qualityOffset) { builder.addOffset(35, qualityOffset, 0); }
  public static void addLightingCode(FlatBufferBuilder builder, int lightingCodeOffset) { builder.addOffset(36, lightingCodeOffset, 0); }
  public static void addSurfaceMatCode(FlatBufferBuilder builder, int surfaceMatCodeOffset) { builder.addOffset(37, surfaceMatCodeOffset, 0); }
  public static void addDirectivityCode(FlatBufferBuilder builder, int directivityCode) { builder.addInt(38, directivityCode, 0); }
  public static void addValidationCode(FlatBufferBuilder builder, int validationCode) { builder.addInt(39, validationCode, 0); }
  public static void addTransactionCode(FlatBufferBuilder builder, int transactionCodeOffset) { builder.addOffset(40, transactionCodeOffset, 0); }
  public static void addProcessCode(FlatBufferBuilder builder, int processCodeOffset) { builder.addOffset(41, processCodeOffset, 0); }
  public static void addActDelCode(FlatBufferBuilder builder, int actDelCodeOffset) { builder.addOffset(42, actDelCodeOffset, 0); }
  public static void addProducer(FlatBufferBuilder builder, int producerOffset) { builder.addOffset(43, producerOffset, 0); }
  public static void addDerivingOrg(FlatBufferBuilder builder, int derivingOrgOffset) { builder.addOffset(44, derivingOrgOffset, 0); }
  public static void addDeletingOrg(FlatBufferBuilder builder, int deletingOrgOffset) { builder.addOffset(45, deletingOrgOffset, 0); }
  public static void addSourceDate(FlatBufferBuilder builder, int sourceDateOffset) { builder.addOffset(46, sourceDateOffset, 0); }
  public static void addRevDate(FlatBufferBuilder builder, int revDateOffset) { builder.addOffset(47, revDateOffset, 0); }
  public static void addInitRecordDate(FlatBufferBuilder builder, int initRecordDateOffset) { builder.addOffset(48, initRecordDateOffset, 0); }
  public static void addKeys(FlatBufferBuilder builder, int keysOffset) { builder.addOffset(49, keysOffset, 0); }
  public static int createKeysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startKeysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addValues(FlatBufferBuilder builder, int valuesOffset) { builder.addOffset(50, valuesOffset, 0); }
  public static int createValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addObstacleRemarks(FlatBufferBuilder builder, int obstacleRemarksOffset) { builder.addOffset(51, obstacleRemarksOffset, 0); }
  public static void addNextCycleDate(FlatBufferBuilder builder, int nextCycleDateOffset) { builder.addOffset(52, nextCycleDateOffset, 0); }
  public static void addBaselineCutoffDate(FlatBufferBuilder builder, int baselineCutoffDateOffset) { builder.addOffset(53, baselineCutoffDateOffset, 0); }
  public static void addCutoffDate(FlatBufferBuilder builder, int cutoffDateOffset) { builder.addOffset(54, cutoffDateOffset, 0); }
  public static void addAiracCycle(FlatBufferBuilder builder, int airacCycle) { builder.addInt(55, airacCycle, 0); }
  public static void addBaseAiracCycle(FlatBufferBuilder builder, int baseAiracCycle) { builder.addInt(56, baseAiracCycle, 0); }
  public static void addOwnerCountryCode(FlatBufferBuilder builder, int ownerCountryCodeOffset) { builder.addOffset(57, ownerCountryCodeOffset, 0); }
  public static void addBoundNelon(FlatBufferBuilder builder, double boundNelon) { builder.addDouble(58, boundNelon, 0.0); }
  public static void addBoundNelat(FlatBufferBuilder builder, double boundNelat) { builder.addDouble(59, boundNelat, 0.0); }
  public static void addBoundSwlon(FlatBufferBuilder builder, double boundSwlon) { builder.addDouble(60, boundSwlon, 0.0); }
  public static void addBoundSwlat(FlatBufferBuilder builder, double boundSwlat) { builder.addDouble(61, boundSwlat, 0.0); }
  public static void addMinHeightAgl(FlatBufferBuilder builder, double minHeightAgl) { builder.addDouble(62, minHeightAgl, 0.0); }
  public static void addNumPoints(FlatBufferBuilder builder, int numPoints) { builder.addInt(63, numPoints, 0); }
  public static void addNumLines(FlatBufferBuilder builder, int numLines) { builder.addInt(64, numLines, 0); }
  public static void addDataSetRemarks(FlatBufferBuilder builder, int dataSetRemarksOffset) { builder.addOffset(65, dataSetRemarksOffset, 0); }
  public static void addPointsFilename(FlatBufferBuilder builder, int pointsFilenameOffset) { builder.addOffset(66, pointsFilenameOffset, 0); }
  public static void addLinesFilename(FlatBufferBuilder builder, int linesFilenameOffset) { builder.addOffset(67, linesFilenameOffset, 0); }
  public static void addVectorsFilename(FlatBufferBuilder builder, int vectorsFilenameOffset) { builder.addOffset(68, vectorsFilenameOffset, 0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(69, rawFileUriOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(70, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(71, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(72, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(73, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(74, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(75, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(76, dataMode, 0); }
  public static int endNavigationalObstruction_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishNavigationalObstruction_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "NAVI"); }
  public static void finishSizePrefixedNavigationalObstruction_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "NAVI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public NavigationalObstruction_Abridged get(int j) { return get(new NavigationalObstruction_Abridged(), j); }
    public NavigationalObstruction_Abridged get(NavigationalObstruction_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

