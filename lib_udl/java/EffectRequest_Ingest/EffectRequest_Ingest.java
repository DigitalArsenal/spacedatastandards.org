// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A request for various effects on a target.
 */
@SuppressWarnings("unused")
public final class EffectRequest_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EffectRequest_Ingest getRootAsEffectRequest_Ingest(ByteBuffer _bb) { return getRootAsEffectRequest_Ingest(_bb, new EffectRequest_Ingest()); }
  public static EffectRequest_Ingest getRootAsEffectRequest_Ingest(ByteBuffer _bb, EffectRequest_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EffectRequest_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EFFE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EffectRequest_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: EFFECTREQUEST-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The extenal system identifier of this request. A human readable unique id.
   * Example: /// Example: EXTERNALREQUEST-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalRequestId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalRequestIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer externalRequestIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
   * Example: /// Example: ['COVER', 'DECEIVE']
   * Constraints: No constraints specified.
   */
  public String effectList(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int effectListLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector effectListVector() { return effectListVector(new StringVector()); }
  public StringVector effectListVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
   * Example: /// Example: CREATED
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String state() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer stateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Specific descriptive instantiation of the effect, e.g., playbook to be used.
   * Example: /// Example: Example Notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String context() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer contextAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer contextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The time the effect should start, in ISO8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The time the effect should end, in ISO8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
   * BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
   * IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
   * NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
   * NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
   * Example: /// Example: NoLaterThan
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String deadlineType() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer deadlineTypeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer deadlineTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The source type of the targetId identifier (POI, TRACK).
   * Example: /// Example: POI
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String targetSrcType() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer targetSrcTypeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer targetSrcTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
   * Example: /// Example: TARGETSRC-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String targetSrcId() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer targetSrcIdAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer targetSrcIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The priority (LOW, MEDIUM, HIGH) of this request.
   * Example: /// Example: LOW
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String priority() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer priorityAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer priorityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The type or class of the preference model used to evaluate this offer.
   * Example: /// Example: Preference model
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String modelClass() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modelClassAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer modelClassInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
   * Example: /// Example: ['COST', 'RISK']
   * Constraints: No constraints specified.
   */
  public String metricTypes(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int metricTypesLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector metricTypesVector() { return metricTypesVector(new StringVector()); }
  public StringVector metricTypesVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
   * Example: /// Example: [0.5, 0.6]
   * Constraints: No constraints specified.
   */
  public String metricWeights(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int metricWeightsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector metricWeightsVector() { return metricWeightsVector(new StringVector()); }
  public StringVector metricWeightsVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(42); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }

  public static int createEffectRequest_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int externalRequestIdOffset,
      int effectListOffset,
      int stateOffset,
      int contextOffset,
      int startTimeOffset,
      int endTimeOffset,
      int deadlineTypeOffset,
      int targetSrcTypeOffset,
      int targetSrcIdOffset,
      int priorityOffset,
      int modelClassOffset,
      int metricTypesOffset,
      int metricWeightsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(21);
    EffectRequest_Ingest.addOrigNetwork(builder, origNetworkOffset);
    EffectRequest_Ingest.addOrigin(builder, originOffset);
    EffectRequest_Ingest.addSource(builder, sourceOffset);
    EffectRequest_Ingest.addCreatedBy(builder, createdByOffset);
    EffectRequest_Ingest.addCreatedAt(builder, createdAtOffset);
    EffectRequest_Ingest.addMetricWeights(builder, metricWeightsOffset);
    EffectRequest_Ingest.addMetricTypes(builder, metricTypesOffset);
    EffectRequest_Ingest.addModelClass(builder, modelClassOffset);
    EffectRequest_Ingest.addPriority(builder, priorityOffset);
    EffectRequest_Ingest.addTargetSrcId(builder, targetSrcIdOffset);
    EffectRequest_Ingest.addTargetSrcType(builder, targetSrcTypeOffset);
    EffectRequest_Ingest.addDeadlineType(builder, deadlineTypeOffset);
    EffectRequest_Ingest.addEndTime(builder, endTimeOffset);
    EffectRequest_Ingest.addStartTime(builder, startTimeOffset);
    EffectRequest_Ingest.addContext(builder, contextOffset);
    EffectRequest_Ingest.addState(builder, stateOffset);
    EffectRequest_Ingest.addEffectList(builder, effectListOffset);
    EffectRequest_Ingest.addExternalRequestId(builder, externalRequestIdOffset);
    EffectRequest_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    EffectRequest_Ingest.addId(builder, idOffset);
    EffectRequest_Ingest.addDataMode(builder, dataMode);
    return EffectRequest_Ingest.endEffectRequest_Ingest(builder);
  }

  public static void startEffectRequest_Ingest(FlatBufferBuilder builder) { builder.startTable(21); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addExternalRequestId(FlatBufferBuilder builder, int externalRequestIdOffset) { builder.addOffset(2, externalRequestIdOffset, 0); }
  public static void addEffectList(FlatBufferBuilder builder, int effectListOffset) { builder.addOffset(3, effectListOffset, 0); }
  public static int createEffectListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEffectListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addState(FlatBufferBuilder builder, int stateOffset) { builder.addOffset(4, stateOffset, 0); }
  public static void addContext(FlatBufferBuilder builder, int contextOffset) { builder.addOffset(5, contextOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(6, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(7, endTimeOffset, 0); }
  public static void addDeadlineType(FlatBufferBuilder builder, int deadlineTypeOffset) { builder.addOffset(8, deadlineTypeOffset, 0); }
  public static void addTargetSrcType(FlatBufferBuilder builder, int targetSrcTypeOffset) { builder.addOffset(9, targetSrcTypeOffset, 0); }
  public static void addTargetSrcId(FlatBufferBuilder builder, int targetSrcIdOffset) { builder.addOffset(10, targetSrcIdOffset, 0); }
  public static void addPriority(FlatBufferBuilder builder, int priorityOffset) { builder.addOffset(11, priorityOffset, 0); }
  public static void addModelClass(FlatBufferBuilder builder, int modelClassOffset) { builder.addOffset(12, modelClassOffset, 0); }
  public static void addMetricTypes(FlatBufferBuilder builder, int metricTypesOffset) { builder.addOffset(13, metricTypesOffset, 0); }
  public static int createMetricTypesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMetricTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMetricWeights(FlatBufferBuilder builder, int metricWeightsOffset) { builder.addOffset(14, metricWeightsOffset, 0); }
  public static int createMetricWeightsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMetricWeightsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(15, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(16, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(17, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(18, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(19, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(20, origNetworkOffset, 0); }
  public static int endEffectRequest_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEffectRequest_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EFFE"); }
  public static void finishSizePrefixedEffectRequest_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EFFE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EffectRequest_Ingest get(int j) { return get(new EffectRequest_Ingest(), j); }
    public EffectRequest_Ingest get(EffectRequest_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

