// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
 */
@SuppressWarnings("unused")
public final class AircraftMissionTasking_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionTasking_Ingest getRootAsAircraftMissionTasking_Ingest(ByteBuffer _bb) { return getRootAsAircraftMissionTasking_Ingest(_bb, new AircraftMissionTasking_Ingest()); }
  public static AircraftMissionTasking_Ingest getRootAsAircraftMissionTasking_Ingest(ByteBuffer _bb, AircraftMissionTasking_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AircraftMissionTasking_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AircraftMissionTasking_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
   * Example: /// Example: US
   * Constraints: Minimum length = 1, Maximum length = 4
   */
  public String countryCode() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The service tasked with conducting this aircraft mission tasking for the exercise or operation.
   * Example: /// Example: A
   * Constraints: Minimum length = 1, Maximum length = 1
   */
  public String taskedService() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taskedServiceAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer taskedServiceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The designator of the unit that is tasked to perform this aircraft mission tasking.
   * Example: /// Example: AMPHIB5DIV
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String unitDesignator() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unitDesignatorAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer unitDesignatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The tasked units location expressed as an ICAO or a place name.
   * Example: /// Example: ICAO:KXXQ
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String unitLocName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unitLocNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer unitLocNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * An indicator of whether a mission is or will be a residual mission.
   * Example: /// Example: N
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String resMsnInd() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resMsnIndAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer resMsnIndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The AMC number assigned to identify one aircraft from another.
   * Example: /// Example: AMC:JJXD123HA045
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String amcMsnNum() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amcMsnNumAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer amcMsnNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The identifier for the composite set of missions for this operation/exercise.
   * Example: /// Example: ZZ
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String pkgId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pkgIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer pkgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
   * Example: /// Example: MC
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String msnCommander() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnCommanderAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer msnCommanderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The mission number assigned to this mission.
   * Example: /// Example: D123HA
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String msnNum() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnNumAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer msnNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The code for the preferred type or designator for a tasked air mission.
   * Example: /// Example: CAS
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String priMsnType() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer priMsnTypeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer priMsnTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The code for the alternative type of a tasked air mission.
   * Example: /// Example: SEAD
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String secMsnType() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer secMsnTypeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer secMsnTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
   * Example: /// Example: 30
   * Constraints: No constraints specified.
   */
  public int alertStatus() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The location or name specified for the departure of the tasked air mission.
   * Example: /// Example: ICAO:KBIF
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String depLocName() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depLocNameAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer depLocNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
   * Example: /// Example: 32WDL123123
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String depLocUtm() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depLocUtmAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer depLocUtmInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
   * Example: /// Example: 35.123
   * Constraints: No constraints specified.
   */
  public double depLocLat() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
   * Example: /// Example: 79.2354
   * Constraints: No constraints specified.
   */
  public double depLocLon() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-10-25T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String depTime() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depTimeAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer depTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * An array of locations specified for the recovery of the tasked air mission represented by varying formats.
   * Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
   * Constraints: No constraints specified.
   */
  public String rcvyLocName(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rcvyLocNameLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rcvyLocNameVector() { return rcvyLocNameVector(new StringVector()); }
  public StringVector rcvyLocNameVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
   * Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
   * Constraints: No constraints specified.
   */
  public String rcvyLocUtm(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rcvyLocUtmLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rcvyLocUtmVector() { return rcvyLocUtmVector(new StringVector()); }
  public StringVector rcvyLocUtmVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
   * Example: /// Example: [48.8584, 40.7554]
   * Constraints: No constraints specified.
   */
  public String rcvyLocLat(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rcvyLocLatLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rcvyLocLatVector() { return rcvyLocLatVector(new StringVector()); }
  public StringVector rcvyLocLatVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
   * Example: /// Example: [2.2945, -73.9866]
   * Constraints: No constraints specified.
   */
  public String rcvyLocLon(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rcvyLocLonLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rcvyLocLonVector() { return rcvyLocLonVector(new StringVector()); }
  public StringVector rcvyLocLonVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
   * Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
   * Constraints: No constraints specified.
   */
  public String rcvyTime(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rcvyTimeLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rcvyTimeVector() { return rcvyTimeVector(new StringVector()); }
  public StringVector rcvyTimeVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A collection of the individual aircraft assigned to this aircraft mission tasking.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String indActasking(int j) { int o = __offset(48); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int indActaskingLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public StringVector indActaskingVector() { return indActaskingVector(new StringVector()); }
  public StringVector indActaskingVector(StringVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A collection of aircraft mission location information for this aircraft mission tasking.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String acMsnLocSeg(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int acMsnLocSegLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector acMsnLocSegVector() { return acMsnLocSegVector(new StringVector()); }
  public StringVector acMsnLocSegVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAircraftMissionTasking_Ingest(FlatBufferBuilder builder,
      int countryCodeOffset,
      int taskedServiceOffset,
      int unitDesignatorOffset,
      int unitLocNameOffset,
      int resMsnIndOffset,
      int amcMsnNumOffset,
      int pkgIdOffset,
      int msnCommanderOffset,
      int msnNumOffset,
      int priMsnTypeOffset,
      int secMsnTypeOffset,
      int alertStatus,
      int depLocNameOffset,
      int depLocUtmOffset,
      double depLocLat,
      double depLocLon,
      int depTimeOffset,
      int rcvyLocNameOffset,
      int rcvyLocUtmOffset,
      int rcvyLocLatOffset,
      int rcvyLocLonOffset,
      int rcvyTimeOffset,
      int indActaskingOffset,
      int acMsnLocSegOffset) {
    builder.startTable(24);
    AircraftMissionTasking_Ingest.addDepLocLon(builder, depLocLon);
    AircraftMissionTasking_Ingest.addDepLocLat(builder, depLocLat);
    AircraftMissionTasking_Ingest.addAcMsnLocSeg(builder, acMsnLocSegOffset);
    AircraftMissionTasking_Ingest.addIndActasking(builder, indActaskingOffset);
    AircraftMissionTasking_Ingest.addRcvyTime(builder, rcvyTimeOffset);
    AircraftMissionTasking_Ingest.addRcvyLocLon(builder, rcvyLocLonOffset);
    AircraftMissionTasking_Ingest.addRcvyLocLat(builder, rcvyLocLatOffset);
    AircraftMissionTasking_Ingest.addRcvyLocUtm(builder, rcvyLocUtmOffset);
    AircraftMissionTasking_Ingest.addRcvyLocName(builder, rcvyLocNameOffset);
    AircraftMissionTasking_Ingest.addDepTime(builder, depTimeOffset);
    AircraftMissionTasking_Ingest.addDepLocUtm(builder, depLocUtmOffset);
    AircraftMissionTasking_Ingest.addDepLocName(builder, depLocNameOffset);
    AircraftMissionTasking_Ingest.addAlertStatus(builder, alertStatus);
    AircraftMissionTasking_Ingest.addSecMsnType(builder, secMsnTypeOffset);
    AircraftMissionTasking_Ingest.addPriMsnType(builder, priMsnTypeOffset);
    AircraftMissionTasking_Ingest.addMsnNum(builder, msnNumOffset);
    AircraftMissionTasking_Ingest.addMsnCommander(builder, msnCommanderOffset);
    AircraftMissionTasking_Ingest.addPkgId(builder, pkgIdOffset);
    AircraftMissionTasking_Ingest.addAmcMsnNum(builder, amcMsnNumOffset);
    AircraftMissionTasking_Ingest.addResMsnInd(builder, resMsnIndOffset);
    AircraftMissionTasking_Ingest.addUnitLocName(builder, unitLocNameOffset);
    AircraftMissionTasking_Ingest.addUnitDesignator(builder, unitDesignatorOffset);
    AircraftMissionTasking_Ingest.addTaskedService(builder, taskedServiceOffset);
    AircraftMissionTasking_Ingest.addCountryCode(builder, countryCodeOffset);
    return AircraftMissionTasking_Ingest.endAircraftMissionTasking_Ingest(builder);
  }

  public static void startAircraftMissionTasking_Ingest(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(0, countryCodeOffset, 0); }
  public static void addTaskedService(FlatBufferBuilder builder, int taskedServiceOffset) { builder.addOffset(1, taskedServiceOffset, 0); }
  public static void addUnitDesignator(FlatBufferBuilder builder, int unitDesignatorOffset) { builder.addOffset(2, unitDesignatorOffset, 0); }
  public static void addUnitLocName(FlatBufferBuilder builder, int unitLocNameOffset) { builder.addOffset(3, unitLocNameOffset, 0); }
  public static void addResMsnInd(FlatBufferBuilder builder, int resMsnIndOffset) { builder.addOffset(4, resMsnIndOffset, 0); }
  public static void addAmcMsnNum(FlatBufferBuilder builder, int amcMsnNumOffset) { builder.addOffset(5, amcMsnNumOffset, 0); }
  public static void addPkgId(FlatBufferBuilder builder, int pkgIdOffset) { builder.addOffset(6, pkgIdOffset, 0); }
  public static void addMsnCommander(FlatBufferBuilder builder, int msnCommanderOffset) { builder.addOffset(7, msnCommanderOffset, 0); }
  public static void addMsnNum(FlatBufferBuilder builder, int msnNumOffset) { builder.addOffset(8, msnNumOffset, 0); }
  public static void addPriMsnType(FlatBufferBuilder builder, int priMsnTypeOffset) { builder.addOffset(9, priMsnTypeOffset, 0); }
  public static void addSecMsnType(FlatBufferBuilder builder, int secMsnTypeOffset) { builder.addOffset(10, secMsnTypeOffset, 0); }
  public static void addAlertStatus(FlatBufferBuilder builder, int alertStatus) { builder.addInt(11, alertStatus, 0); }
  public static void addDepLocName(FlatBufferBuilder builder, int depLocNameOffset) { builder.addOffset(12, depLocNameOffset, 0); }
  public static void addDepLocUtm(FlatBufferBuilder builder, int depLocUtmOffset) { builder.addOffset(13, depLocUtmOffset, 0); }
  public static void addDepLocLat(FlatBufferBuilder builder, double depLocLat) { builder.addDouble(14, depLocLat, 0.0); }
  public static void addDepLocLon(FlatBufferBuilder builder, double depLocLon) { builder.addDouble(15, depLocLon, 0.0); }
  public static void addDepTime(FlatBufferBuilder builder, int depTimeOffset) { builder.addOffset(16, depTimeOffset, 0); }
  public static void addRcvyLocName(FlatBufferBuilder builder, int rcvyLocNameOffset) { builder.addOffset(17, rcvyLocNameOffset, 0); }
  public static int createRcvyLocNameVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRcvyLocNameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRcvyLocUtm(FlatBufferBuilder builder, int rcvyLocUtmOffset) { builder.addOffset(18, rcvyLocUtmOffset, 0); }
  public static int createRcvyLocUtmVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRcvyLocUtmVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRcvyLocLat(FlatBufferBuilder builder, int rcvyLocLatOffset) { builder.addOffset(19, rcvyLocLatOffset, 0); }
  public static int createRcvyLocLatVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRcvyLocLatVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRcvyLocLon(FlatBufferBuilder builder, int rcvyLocLonOffset) { builder.addOffset(20, rcvyLocLonOffset, 0); }
  public static int createRcvyLocLonVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRcvyLocLonVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRcvyTime(FlatBufferBuilder builder, int rcvyTimeOffset) { builder.addOffset(21, rcvyTimeOffset, 0); }
  public static int createRcvyTimeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRcvyTimeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIndActasking(FlatBufferBuilder builder, int indActaskingOffset) { builder.addOffset(22, indActaskingOffset, 0); }
  public static int createIndActaskingVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIndActaskingVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAcMsnLocSeg(FlatBufferBuilder builder, int acMsnLocSegOffset) { builder.addOffset(23, acMsnLocSegOffset, 0); }
  public static int createAcMsnLocSegVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAcMsnLocSegVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAircraftMissionTasking_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraftMissionTasking_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraftMissionTasking_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AircraftMissionTasking_Ingest get(int j) { return get(new AircraftMissionTasking_Ingest(), j); }
    public AircraftMissionTasking_Ingest get(AircraftMissionTasking_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

