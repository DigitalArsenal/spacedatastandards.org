// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Contains details of the OnOrbit object.
 */
@SuppressWarnings("unused")
public final class OnorbitDetails extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OnorbitDetails getRootAsOnorbitDetails(ByteBuffer _bb) { return getRootAsOnorbitDetails(_bb, new OnorbitDetails()); }
  public static OnorbitDetails getRootAsOnorbitDetails(ByteBuffer _bb, OnorbitDetails obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OnorbitDetailsBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "ONOR"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OnorbitDetails __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: ONORBITDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * UUID of the parent Onorbit record.
   * Example: /// Example: REF-ONORBIT-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Time of last reported observation for this object in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String lastObTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastObTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer lastObTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Current/latest visual magnitude in M.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double vismag() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum visual magnitude in M.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double vismagMin() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum visual magnitude in M.
   * Example: /// Example: 15.23
   * Constraints: No constraints specified.
   */
  public double vismagMax() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mean visual magnitude in M.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double vismagMean() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Current/latest radar cross section in meters squared.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double rcs() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum radar cross section in meters squared.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double rcsMin() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum radar cross section in meters squared.
   * Example: /// Example: 15.23
   * Constraints: No constraints specified.
   */
  public double rcsMax() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mean radar cross section in meters squared.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double rcsMean() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total beginning of life delta V of the spacecraft, in meters per second.
   * Example: /// Example: 1000.1
   * Constraints: No constraints specified.
   */
  public double bolDeltaV() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum delta V available for this on-orbit spacecraft, in meters per second.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxDeltaV() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The 1-sigma uncertainty of the total spacecraft delta V, in meters per second.
   * Example: /// Example: 50.1
   * Constraints: No constraints specified.
   */
  public double deltaVunc() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Estimated maximum burn duration for the object, in seconds.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double estDeltaVduration() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of distinct missions the spacecraft performs.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int numMission() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of the type of missions the spacecraft performs. Must contain the same number of elements as the value of numMission.
   * Example: /// Example: ['Weather', 'Space Weather']
   * Constraints: No constraints specified.
   */
  public String missionTypes(int j) { int o = __offset(38); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int missionTypesLength() { int o = __offset(38); return o != 0 ? __vector_len(o) : 0; }
  public StringVector missionTypesVector() { return missionTypesVector(new StringVector()); }
  public StringVector missionTypesVector(StringVector obj) { int o = __offset(38); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Type of the bus on the spacecraft.
   * Example: /// Example: A2100
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String busType() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer busTypeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer busTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * GEO slot if applicable, in degrees. -180 (West of Prime Meridian) to 180 degrees (East of Prime Meridian). Prime Meridian is 0.
   * Example: /// Example: 90.23
   * Constraints: No constraints specified.
   */
  public double geoSlot() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * GEO drift rate, if applicable in degrees per day.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double driftRate() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft dry mass (without fuel or disposables) in kilograms.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double dryMass() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mass of fuel and disposables at launch time in kilograms.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double additionalMass() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double launchMassMin() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Nominal mass of spacecraft and fuel at launch time, in kilograms.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double launchMass() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum (estimated) mass of spacecraft and fuel at launch time, in kilograms.
   * Example: /// Example: 15.23
   * Constraints: No constraints specified.
   */
  public double launchMassMax() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft beginning of life fuel mass, in orbit, in kilograms.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double bolFuelMass() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated total current mass of the spacecraft, in kilograms.
   * Example: /// Example: 500
   * Constraints: No constraints specified.
   */
  public double currentMass() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The 1-sigma uncertainty of the total spacecraft mass, in kilograms.
   * Example: /// Example: 50.1
   * Constraints: No constraints specified.
   */
  public double totalMassUnc() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft deployed area of solar array in meters squared.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double solarArrayArea() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating whether a spacecraft is maneuverable. Note that a spacecraft may have propulsion capability but may not be maneuverable due to lack of fuel, anomalous condition, or other operational constraints.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean maneuverable() { int o = __offset(64); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Estimated remaining fuel for the object in kilograms.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double fuelRemaining() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average cross sectional area in meters squared.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double crossSection() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average cross sectional area of the bus in meters squared.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double busCrossSection() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum dimension across the spacecraft (e.g., tip-to-tip across the solar panel arrays) in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double maxRadius() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum dimension of the box circumscribing the spacecraft (d = sqrt(a*a + b*b + c*c) where a is the tip-to-tip dimension, b and c are perpendicular to that.) in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double colaRadius() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The radius used for long-term debris environment projection analyses that is not as conservative as COLA Radius, in meters.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double adeptRadius() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of sub-satellites or deployable objects on the spacecraft.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int numDeployable() { int o = __offset(78); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of satellite deployable objects. Must contain the same number of elements as the value of numDeployable.
   * Example: /// Example: ['GOES-18A', 'GOES-18B']
   * Constraints: No constraints specified.
   */
  public String depNames(int j) { int o = __offset(80); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int depNamesLength() { int o = __offset(80); return o != 0 ? __vector_len(o) : 0; }
  public StringVector depNamesVector() { return depNamesVector(new StringVector()); }
  public StringVector depNamesVector(StringVector obj) { int o = __offset(80); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the estimated mass of each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
   * Example: /// Example: [20, 21]
   * Constraints: No constraints specified.
   */
  public String depEstMasses(int j) { int o = __offset(82); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int depEstMassesLength() { int o = __offset(82); return o != 0 ? __vector_len(o) : 0; }
  public StringVector depEstMassesVector() { return depEstMassesVector(new StringVector()); }
  public StringVector depEstMassesVector(StringVector obj) { int o = __offset(82); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the 1-sigma uncertainty of the mass for each deployable object, in kilograms. Must contain the same number of elements as the value of numDeployable.
   * Example: /// Example: [10, 5]
   * Constraints: No constraints specified.
   */
  public String depMassUncs(int j) { int o = __offset(84); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int depMassUncsLength() { int o = __offset(84); return o != 0 ? __vector_len(o) : 0; }
  public StringVector depMassUncsVector() { return depMassUncsVector(new StringVector()); }
  public StringVector depMassUncsVector(StringVector obj) { int o = __offset(84); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * The name of the source who last provided an observation for this idOnOrbit.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String lastObSource() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastObSourceAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer lastObSourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(92); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }

  public static int createOnorbitDetails(FlatBufferBuilder builder,
      int idOffset,
      int idOnOrbitOffset,
      int classificationMarkingOffset,
      int lastObTimeOffset,
      double vismag,
      double vismagMin,
      double vismagMax,
      double vismagMean,
      double rcs,
      double rcsMin,
      double rcsMax,
      double rcsMean,
      double bolDeltaV,
      double maxDeltaV,
      double deltaVunc,
      double estDeltaVduration,
      int numMission,
      int missionTypesOffset,
      int busTypeOffset,
      double geoSlot,
      double driftRate,
      double dryMass,
      double additionalMass,
      double launchMassMin,
      double launchMass,
      double launchMassMax,
      double bolFuelMass,
      double currentMass,
      double totalMassUnc,
      double solarArrayArea,
      boolean maneuverable,
      double fuelRemaining,
      double crossSection,
      double busCrossSection,
      double maxRadius,
      double colaRadius,
      double adeptRadius,
      int numDeployable,
      int depNamesOffset,
      int depEstMassesOffset,
      int depMassUncsOffset,
      int sourceOffset,
      int originOffset,
      int lastObSourceOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int origNetworkOffset) {
    builder.startTable(50);
    OnorbitDetails.addAdeptRadius(builder, adeptRadius);
    OnorbitDetails.addColaRadius(builder, colaRadius);
    OnorbitDetails.addMaxRadius(builder, maxRadius);
    OnorbitDetails.addBusCrossSection(builder, busCrossSection);
    OnorbitDetails.addCrossSection(builder, crossSection);
    OnorbitDetails.addFuelRemaining(builder, fuelRemaining);
    OnorbitDetails.addSolarArrayArea(builder, solarArrayArea);
    OnorbitDetails.addTotalMassUnc(builder, totalMassUnc);
    OnorbitDetails.addCurrentMass(builder, currentMass);
    OnorbitDetails.addBolFuelMass(builder, bolFuelMass);
    OnorbitDetails.addLaunchMassMax(builder, launchMassMax);
    OnorbitDetails.addLaunchMass(builder, launchMass);
    OnorbitDetails.addLaunchMassMin(builder, launchMassMin);
    OnorbitDetails.addAdditionalMass(builder, additionalMass);
    OnorbitDetails.addDryMass(builder, dryMass);
    OnorbitDetails.addDriftRate(builder, driftRate);
    OnorbitDetails.addGeoSlot(builder, geoSlot);
    OnorbitDetails.addEstDeltaVduration(builder, estDeltaVduration);
    OnorbitDetails.addDeltaVunc(builder, deltaVunc);
    OnorbitDetails.addMaxDeltaV(builder, maxDeltaV);
    OnorbitDetails.addBolDeltaV(builder, bolDeltaV);
    OnorbitDetails.addRcsMean(builder, rcsMean);
    OnorbitDetails.addRcsMax(builder, rcsMax);
    OnorbitDetails.addRcsMin(builder, rcsMin);
    OnorbitDetails.addRcs(builder, rcs);
    OnorbitDetails.addVismagMean(builder, vismagMean);
    OnorbitDetails.addVismagMax(builder, vismagMax);
    OnorbitDetails.addVismagMin(builder, vismagMin);
    OnorbitDetails.addVismag(builder, vismag);
    OnorbitDetails.addOrigNetwork(builder, origNetworkOffset);
    OnorbitDetails.addUpdatedBy(builder, updatedByOffset);
    OnorbitDetails.addUpdatedAt(builder, updatedAtOffset);
    OnorbitDetails.addCreatedBy(builder, createdByOffset);
    OnorbitDetails.addCreatedAt(builder, createdAtOffset);
    OnorbitDetails.addLastObSource(builder, lastObSourceOffset);
    OnorbitDetails.addOrigin(builder, originOffset);
    OnorbitDetails.addSource(builder, sourceOffset);
    OnorbitDetails.addDepMassUncs(builder, depMassUncsOffset);
    OnorbitDetails.addDepEstMasses(builder, depEstMassesOffset);
    OnorbitDetails.addDepNames(builder, depNamesOffset);
    OnorbitDetails.addNumDeployable(builder, numDeployable);
    OnorbitDetails.addBusType(builder, busTypeOffset);
    OnorbitDetails.addMissionTypes(builder, missionTypesOffset);
    OnorbitDetails.addNumMission(builder, numMission);
    OnorbitDetails.addLastObTime(builder, lastObTimeOffset);
    OnorbitDetails.addClassificationMarking(builder, classificationMarkingOffset);
    OnorbitDetails.addIdOnOrbit(builder, idOnOrbitOffset);
    OnorbitDetails.addId(builder, idOffset);
    OnorbitDetails.addDataMode(builder, dataMode);
    OnorbitDetails.addManeuverable(builder, maneuverable);
    return OnorbitDetails.endOnorbitDetails(builder);
  }

  public static void startOnorbitDetails(FlatBufferBuilder builder) { builder.startTable(50); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(1, idOnOrbitOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addLastObTime(FlatBufferBuilder builder, int lastObTimeOffset) { builder.addOffset(3, lastObTimeOffset, 0); }
  public static void addVismag(FlatBufferBuilder builder, double vismag) { builder.addDouble(4, vismag, 0.0); }
  public static void addVismagMin(FlatBufferBuilder builder, double vismagMin) { builder.addDouble(5, vismagMin, 0.0); }
  public static void addVismagMax(FlatBufferBuilder builder, double vismagMax) { builder.addDouble(6, vismagMax, 0.0); }
  public static void addVismagMean(FlatBufferBuilder builder, double vismagMean) { builder.addDouble(7, vismagMean, 0.0); }
  public static void addRcs(FlatBufferBuilder builder, double rcs) { builder.addDouble(8, rcs, 0.0); }
  public static void addRcsMin(FlatBufferBuilder builder, double rcsMin) { builder.addDouble(9, rcsMin, 0.0); }
  public static void addRcsMax(FlatBufferBuilder builder, double rcsMax) { builder.addDouble(10, rcsMax, 0.0); }
  public static void addRcsMean(FlatBufferBuilder builder, double rcsMean) { builder.addDouble(11, rcsMean, 0.0); }
  public static void addBolDeltaV(FlatBufferBuilder builder, double bolDeltaV) { builder.addDouble(12, bolDeltaV, 0.0); }
  public static void addMaxDeltaV(FlatBufferBuilder builder, double maxDeltaV) { builder.addDouble(13, maxDeltaV, 0.0); }
  public static void addDeltaVunc(FlatBufferBuilder builder, double deltaVunc) { builder.addDouble(14, deltaVunc, 0.0); }
  public static void addEstDeltaVduration(FlatBufferBuilder builder, double estDeltaVduration) { builder.addDouble(15, estDeltaVduration, 0.0); }
  public static void addNumMission(FlatBufferBuilder builder, int numMission) { builder.addInt(16, numMission, 0); }
  public static void addMissionTypes(FlatBufferBuilder builder, int missionTypesOffset) { builder.addOffset(17, missionTypesOffset, 0); }
  public static int createMissionTypesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMissionTypesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBusType(FlatBufferBuilder builder, int busTypeOffset) { builder.addOffset(18, busTypeOffset, 0); }
  public static void addGeoSlot(FlatBufferBuilder builder, double geoSlot) { builder.addDouble(19, geoSlot, 0.0); }
  public static void addDriftRate(FlatBufferBuilder builder, double driftRate) { builder.addDouble(20, driftRate, 0.0); }
  public static void addDryMass(FlatBufferBuilder builder, double dryMass) { builder.addDouble(21, dryMass, 0.0); }
  public static void addAdditionalMass(FlatBufferBuilder builder, double additionalMass) { builder.addDouble(22, additionalMass, 0.0); }
  public static void addLaunchMassMin(FlatBufferBuilder builder, double launchMassMin) { builder.addDouble(23, launchMassMin, 0.0); }
  public static void addLaunchMass(FlatBufferBuilder builder, double launchMass) { builder.addDouble(24, launchMass, 0.0); }
  public static void addLaunchMassMax(FlatBufferBuilder builder, double launchMassMax) { builder.addDouble(25, launchMassMax, 0.0); }
  public static void addBolFuelMass(FlatBufferBuilder builder, double bolFuelMass) { builder.addDouble(26, bolFuelMass, 0.0); }
  public static void addCurrentMass(FlatBufferBuilder builder, double currentMass) { builder.addDouble(27, currentMass, 0.0); }
  public static void addTotalMassUnc(FlatBufferBuilder builder, double totalMassUnc) { builder.addDouble(28, totalMassUnc, 0.0); }
  public static void addSolarArrayArea(FlatBufferBuilder builder, double solarArrayArea) { builder.addDouble(29, solarArrayArea, 0.0); }
  public static void addManeuverable(FlatBufferBuilder builder, boolean maneuverable) { builder.addBoolean(30, maneuverable, false); }
  public static void addFuelRemaining(FlatBufferBuilder builder, double fuelRemaining) { builder.addDouble(31, fuelRemaining, 0.0); }
  public static void addCrossSection(FlatBufferBuilder builder, double crossSection) { builder.addDouble(32, crossSection, 0.0); }
  public static void addBusCrossSection(FlatBufferBuilder builder, double busCrossSection) { builder.addDouble(33, busCrossSection, 0.0); }
  public static void addMaxRadius(FlatBufferBuilder builder, double maxRadius) { builder.addDouble(34, maxRadius, 0.0); }
  public static void addColaRadius(FlatBufferBuilder builder, double colaRadius) { builder.addDouble(35, colaRadius, 0.0); }
  public static void addAdeptRadius(FlatBufferBuilder builder, double adeptRadius) { builder.addDouble(36, adeptRadius, 0.0); }
  public static void addNumDeployable(FlatBufferBuilder builder, int numDeployable) { builder.addInt(37, numDeployable, 0); }
  public static void addDepNames(FlatBufferBuilder builder, int depNamesOffset) { builder.addOffset(38, depNamesOffset, 0); }
  public static int createDepNamesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDepNamesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDepEstMasses(FlatBufferBuilder builder, int depEstMassesOffset) { builder.addOffset(39, depEstMassesOffset, 0); }
  public static int createDepEstMassesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDepEstMassesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDepMassUncs(FlatBufferBuilder builder, int depMassUncsOffset) { builder.addOffset(40, depMassUncsOffset, 0); }
  public static int createDepMassUncsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDepMassUncsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(41, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(42, originOffset, 0); }
  public static void addLastObSource(FlatBufferBuilder builder, int lastObSourceOffset) { builder.addOffset(43, lastObSourceOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(44, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(45, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(46, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(47, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(48, updatedByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(49, origNetworkOffset, 0); }
  public static int endOnorbitDetails(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOnorbitDetailsBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "ONOR"); }
  public static void finishSizePrefixedOnorbitDetailsBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "ONOR"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OnorbitDetails get(int j) { return get(new OnorbitDetails(), j); }
    public OnorbitDetails get(OnorbitDetails obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

