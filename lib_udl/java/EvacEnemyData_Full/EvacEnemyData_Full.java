// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Data defining any enemy intelligence reported by the requestor.
 */
@SuppressWarnings("unused")
public final class EvacEnemyData_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EvacEnemyData_Full getRootAsEvacEnemyData_Full(ByteBuffer _bb) { return getRootAsEvacEnemyData_Full(_bb, new EvacEnemyData_Full()); }
  public static EvacEnemyData_Full getRootAsEvacEnemyData_Full(ByteBuffer _bb, EvacEnemyData_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EvacEnemyData_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EVAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EvacEnemyData_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
   * Example: /// Example: NORTH
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String dirToEnemy() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dirToEnemyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer dirToEnemyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
   * Example: /// Example: SMALL ARMS
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String hostileFireType() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hostileFireTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer hostileFireTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Comments provided by friendlies about the evac zone.
   * Example: /// Example: Comments from friendlies.
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String friendliesRemarks() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer friendliesRemarksAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer friendliesRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Hot Landing Zone remarks.
   * Example: /// Example: Remarks about hot landing zone.
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String hlzRemarks() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hlzRemarksAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer hlzRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createEvacEnemyData_Full(FlatBufferBuilder builder,
      int dirToEnemyOffset,
      int hostileFireTypeOffset,
      int friendliesRemarksOffset,
      int hlzRemarksOffset) {
    builder.startTable(4);
    EvacEnemyData_Full.addHlzRemarks(builder, hlzRemarksOffset);
    EvacEnemyData_Full.addFriendliesRemarks(builder, friendliesRemarksOffset);
    EvacEnemyData_Full.addHostileFireType(builder, hostileFireTypeOffset);
    EvacEnemyData_Full.addDirToEnemy(builder, dirToEnemyOffset);
    return EvacEnemyData_Full.endEvacEnemyData_Full(builder);
  }

  public static void startEvacEnemyData_Full(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addDirToEnemy(FlatBufferBuilder builder, int dirToEnemyOffset) { builder.addOffset(0, dirToEnemyOffset, 0); }
  public static void addHostileFireType(FlatBufferBuilder builder, int hostileFireTypeOffset) { builder.addOffset(1, hostileFireTypeOffset, 0); }
  public static void addFriendliesRemarks(FlatBufferBuilder builder, int friendliesRemarksOffset) { builder.addOffset(2, friendliesRemarksOffset, 0); }
  public static void addHlzRemarks(FlatBufferBuilder builder, int hlzRemarksOffset) { builder.addOffset(3, hlzRemarksOffset, 0); }
  public static int endEvacEnemyData_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEvacEnemyData_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EVAC"); }
  public static void finishSizePrefixedEvacEnemyData_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EVAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EvacEnemyData_Full get(int j) { return get(new EvacEnemyData_Full(), j); }
    public EvacEnemyData_Full get(EvacEnemyData_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

