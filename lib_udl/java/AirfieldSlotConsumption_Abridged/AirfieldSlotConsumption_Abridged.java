// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Airfield slot use data. Contains the dynamic data associated with the status and use of specific airfield slots.
 */
@SuppressWarnings("unused")
public final class AirfieldSlotConsumption_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirfieldSlotConsumption_Abridged getRootAsAirfieldSlotConsumption_Abridged(ByteBuffer _bb) { return getRootAsAirfieldSlotConsumption_Abridged(_bb, new AirfieldSlotConsumption_Abridged()); }
  public static AirfieldSlotConsumption_Abridged getRootAsAirfieldSlotConsumption_Abridged(ByteBuffer _bb, AirfieldSlotConsumption_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirfieldSlotConsumption_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRF"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirfieldSlotConsumption_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the airfield slot for which this slot consumption record is referencing.
   * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idAirfieldSlot() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAirfieldSlotAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idAirfieldSlotInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Current status of this slot (REQUESTED / APPROVED / DENIED / BLOCKED / OTHER).
   * Example: /// Example: APPROVED
   * Constraints: Minimum length = 0, Maximum length = 9
   */
  public byte status() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Flag indicating if the slot is occupied.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean occupied() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Identifying name of the aircraft using this slot. Names are often Prior Permission Required (PPR) numbers or other similar human-readable identifiers.
   * Example: /// Example: APRON1-230401001
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String consumer() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer consumerAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer consumerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The aircraft Model Design Series designation of the aircraft occupying this slot.
   * Example: /// Example: C017A
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String occAircraftMds() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer occAircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer occAircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The tail number of the aircraft occupying this slot.
   * Example: /// Example: N702JG
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String occTailNumber() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer occTailNumberAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer occTailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Array of call signs of the aircraft using this slot.
   * Example: /// Example: ['RCH123', 'ABC123', 'LLS442']
   * Constraints: No constraints specified.
   */
  public String callSigns(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int callSignsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector callSignsVector() { return callSignsVector(new StringVector()); }
  public StringVector callSignsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Mission identifier using this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
   * Example: /// Example: AJM123456123
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String missionId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer missionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Number of aircraft using this slot for this time.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numAircraft() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Time the aircraft began occupying this slot, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-01-01T01:01:03.123Z
   * Constraints: No constraints specified.
   */
  public String occStartTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer occStartTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer occStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The aircraft Model Design Series designation of the aircraft this slot is reserved for.
   * Example: /// Example: C017A
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String resAircraftMds() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resAircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer resAircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The tail number of the aircraft this slot is reserved for.
   * Example: /// Example: N702JG
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String resTailNumber() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resTailNumberAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer resTailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Indicates the type of reservation (e.g. M for Mission, A for Aircraft, O for Other).
   * Example: /// Example: M
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String resType() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resTypeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer resTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The reason the slot reservation was made.
   * Example: /// Example: Maintenance needed
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String resReason() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resReasonAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer resReasonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Mission identifier reserving this slot according to Mobility Air Forces (MAF) Encode/Decode procedures.
   * Example: /// Example: AJM123456123
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String resMissionId() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resMissionIdAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer resMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The start of the slot window, in ISO 8601 UTC format.
   * Example: /// Example: 2023-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The end of the slot window, in ISO 8601 UTC format.
   * Example: /// Example: 2023-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The desired time for aircraft action such as landing, take off, parking, etc., in ISO 8601 UTC format.
   * Example: /// Example: 2023-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String targetTime() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer targetTimeAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer targetTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Unique identifier of the sortie arriving at the slot start time.
   * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idArrSortie() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idArrSortieAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer idArrSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Unique identifier of the sortie departing at the slot end time.
   * Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idDepSortie() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idDepSortieAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer idDepSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Alternate identifier of the sortie arriving at the slot start time provided by the source.
   * Example: /// Example: ALT-SORTIE-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String altArrSortieId() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altArrSortieIdAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer altArrSortieIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Alternate identifier of the sortie departing at the slot end time provided by the source.
   * Example: /// Example: ALT-SORTIE-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String altDepSortieId() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altDepSortieIdAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer altDepSortieIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Comments from the requester.
   * Example: /// Example: Sorry for the late notice.
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String reqComment() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqCommentAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer reqCommentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Comments from the approver.
   * Example: /// Example: The request was denied due to inoperable fuel pumps.
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String appComment() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer appCommentAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer appCommentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Short name of the organization requesting use of this slot.
   * Example: /// Example: TACC
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String reqOrg() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqOrgAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer reqOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Initials of the person requesting the use of this slot. Use SYSTEM if this request is auto-generated by an auto-planning system.
   * Example: /// Example: CB
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String reqInitials() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqInitialsAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer reqInitialsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Short name of the organization approving the use of this slot.
   * Example: /// Example: KCHS/BOPS
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String appOrg() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer appOrgAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer appOrgInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Initials of the person approving the use of this slot. Use SYSTEM if auto-approved without human involvement.
   * Example: /// Example: CB
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String appInitials() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer appInitialsAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer appInitialsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(76); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirfieldSlotConsumption_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idAirfieldSlotOffset,
      byte status,
      boolean occupied,
      int consumerOffset,
      int occAircraftMdsOffset,
      int occTailNumberOffset,
      int callSignsOffset,
      int missionIdOffset,
      int numAircraft,
      int occStartTimeOffset,
      int resAircraftMdsOffset,
      int resTailNumberOffset,
      int resTypeOffset,
      int resReasonOffset,
      int resMissionIdOffset,
      int startTimeOffset,
      int endTimeOffset,
      int targetTimeOffset,
      int idArrSortieOffset,
      int idDepSortieOffset,
      int altArrSortieIdOffset,
      int altDepSortieIdOffset,
      int reqCommentOffset,
      int appCommentOffset,
      int reqOrgOffset,
      int reqInitialsOffset,
      int appOrgOffset,
      int appInitialsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(37);
    AirfieldSlotConsumption_Abridged.addOrigNetwork(builder, origNetworkOffset);
    AirfieldSlotConsumption_Abridged.addOrigin(builder, originOffset);
    AirfieldSlotConsumption_Abridged.addSource(builder, sourceOffset);
    AirfieldSlotConsumption_Abridged.addSourceDl(builder, sourceDlOffset);
    AirfieldSlotConsumption_Abridged.addCreatedBy(builder, createdByOffset);
    AirfieldSlotConsumption_Abridged.addCreatedAt(builder, createdAtOffset);
    AirfieldSlotConsumption_Abridged.addAppInitials(builder, appInitialsOffset);
    AirfieldSlotConsumption_Abridged.addAppOrg(builder, appOrgOffset);
    AirfieldSlotConsumption_Abridged.addReqInitials(builder, reqInitialsOffset);
    AirfieldSlotConsumption_Abridged.addReqOrg(builder, reqOrgOffset);
    AirfieldSlotConsumption_Abridged.addAppComment(builder, appCommentOffset);
    AirfieldSlotConsumption_Abridged.addReqComment(builder, reqCommentOffset);
    AirfieldSlotConsumption_Abridged.addAltDepSortieId(builder, altDepSortieIdOffset);
    AirfieldSlotConsumption_Abridged.addAltArrSortieId(builder, altArrSortieIdOffset);
    AirfieldSlotConsumption_Abridged.addIdDepSortie(builder, idDepSortieOffset);
    AirfieldSlotConsumption_Abridged.addIdArrSortie(builder, idArrSortieOffset);
    AirfieldSlotConsumption_Abridged.addTargetTime(builder, targetTimeOffset);
    AirfieldSlotConsumption_Abridged.addEndTime(builder, endTimeOffset);
    AirfieldSlotConsumption_Abridged.addStartTime(builder, startTimeOffset);
    AirfieldSlotConsumption_Abridged.addResMissionId(builder, resMissionIdOffset);
    AirfieldSlotConsumption_Abridged.addResReason(builder, resReasonOffset);
    AirfieldSlotConsumption_Abridged.addResType(builder, resTypeOffset);
    AirfieldSlotConsumption_Abridged.addResTailNumber(builder, resTailNumberOffset);
    AirfieldSlotConsumption_Abridged.addResAircraftMds(builder, resAircraftMdsOffset);
    AirfieldSlotConsumption_Abridged.addOccStartTime(builder, occStartTimeOffset);
    AirfieldSlotConsumption_Abridged.addNumAircraft(builder, numAircraft);
    AirfieldSlotConsumption_Abridged.addMissionId(builder, missionIdOffset);
    AirfieldSlotConsumption_Abridged.addCallSigns(builder, callSignsOffset);
    AirfieldSlotConsumption_Abridged.addOccTailNumber(builder, occTailNumberOffset);
    AirfieldSlotConsumption_Abridged.addOccAircraftMds(builder, occAircraftMdsOffset);
    AirfieldSlotConsumption_Abridged.addConsumer(builder, consumerOffset);
    AirfieldSlotConsumption_Abridged.addIdAirfieldSlot(builder, idAirfieldSlotOffset);
    AirfieldSlotConsumption_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    AirfieldSlotConsumption_Abridged.addId(builder, idOffset);
    AirfieldSlotConsumption_Abridged.addDataMode(builder, dataMode);
    AirfieldSlotConsumption_Abridged.addOccupied(builder, occupied);
    AirfieldSlotConsumption_Abridged.addStatus(builder, status);
    return AirfieldSlotConsumption_Abridged.endAirfieldSlotConsumption_Abridged(builder);
  }

  public static void startAirfieldSlotConsumption_Abridged(FlatBufferBuilder builder) { builder.startTable(37); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdAirfieldSlot(FlatBufferBuilder builder, int idAirfieldSlotOffset) { builder.addOffset(2, idAirfieldSlotOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, byte status) { builder.addByte(3, status, 0); }
  public static void addOccupied(FlatBufferBuilder builder, boolean occupied) { builder.addBoolean(4, occupied, false); }
  public static void addConsumer(FlatBufferBuilder builder, int consumerOffset) { builder.addOffset(5, consumerOffset, 0); }
  public static void addOccAircraftMds(FlatBufferBuilder builder, int occAircraftMdsOffset) { builder.addOffset(6, occAircraftMdsOffset, 0); }
  public static void addOccTailNumber(FlatBufferBuilder builder, int occTailNumberOffset) { builder.addOffset(7, occTailNumberOffset, 0); }
  public static void addCallSigns(FlatBufferBuilder builder, int callSignsOffset) { builder.addOffset(8, callSignsOffset, 0); }
  public static int createCallSignsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCallSignsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMissionId(FlatBufferBuilder builder, int missionIdOffset) { builder.addOffset(9, missionIdOffset, 0); }
  public static void addNumAircraft(FlatBufferBuilder builder, int numAircraft) { builder.addInt(10, numAircraft, 0); }
  public static void addOccStartTime(FlatBufferBuilder builder, int occStartTimeOffset) { builder.addOffset(11, occStartTimeOffset, 0); }
  public static void addResAircraftMds(FlatBufferBuilder builder, int resAircraftMdsOffset) { builder.addOffset(12, resAircraftMdsOffset, 0); }
  public static void addResTailNumber(FlatBufferBuilder builder, int resTailNumberOffset) { builder.addOffset(13, resTailNumberOffset, 0); }
  public static void addResType(FlatBufferBuilder builder, int resTypeOffset) { builder.addOffset(14, resTypeOffset, 0); }
  public static void addResReason(FlatBufferBuilder builder, int resReasonOffset) { builder.addOffset(15, resReasonOffset, 0); }
  public static void addResMissionId(FlatBufferBuilder builder, int resMissionIdOffset) { builder.addOffset(16, resMissionIdOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(17, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(18, endTimeOffset, 0); }
  public static void addTargetTime(FlatBufferBuilder builder, int targetTimeOffset) { builder.addOffset(19, targetTimeOffset, 0); }
  public static void addIdArrSortie(FlatBufferBuilder builder, int idArrSortieOffset) { builder.addOffset(20, idArrSortieOffset, 0); }
  public static void addIdDepSortie(FlatBufferBuilder builder, int idDepSortieOffset) { builder.addOffset(21, idDepSortieOffset, 0); }
  public static void addAltArrSortieId(FlatBufferBuilder builder, int altArrSortieIdOffset) { builder.addOffset(22, altArrSortieIdOffset, 0); }
  public static void addAltDepSortieId(FlatBufferBuilder builder, int altDepSortieIdOffset) { builder.addOffset(23, altDepSortieIdOffset, 0); }
  public static void addReqComment(FlatBufferBuilder builder, int reqCommentOffset) { builder.addOffset(24, reqCommentOffset, 0); }
  public static void addAppComment(FlatBufferBuilder builder, int appCommentOffset) { builder.addOffset(25, appCommentOffset, 0); }
  public static void addReqOrg(FlatBufferBuilder builder, int reqOrgOffset) { builder.addOffset(26, reqOrgOffset, 0); }
  public static void addReqInitials(FlatBufferBuilder builder, int reqInitialsOffset) { builder.addOffset(27, reqInitialsOffset, 0); }
  public static void addAppOrg(FlatBufferBuilder builder, int appOrgOffset) { builder.addOffset(28, appOrgOffset, 0); }
  public static void addAppInitials(FlatBufferBuilder builder, int appInitialsOffset) { builder.addOffset(29, appInitialsOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(30, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(31, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(32, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(33, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(34, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(35, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(36, dataMode, 0); }
  public static int endAirfieldSlotConsumption_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirfieldSlotConsumption_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRF"); }
  public static void finishSizePrefixedAirfieldSlotConsumption_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRF"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirfieldSlotConsumption_Abridged get(int j) { return get(new AirfieldSlotConsumption_Abridged(), j); }
    public AirfieldSlotConsumption_Abridged get(AirfieldSlotConsumption_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

