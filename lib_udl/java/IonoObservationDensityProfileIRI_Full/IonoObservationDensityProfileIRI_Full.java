// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Full set of the IRI formalism coefficients.
 */
@SuppressWarnings("unused")
public final class IonoObservationDensityProfileIRI_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationDensityProfileIRI_Full getRootAsIonoObservationDensityProfileIRI_Full(ByteBuffer _bb) { return getRootAsIonoObservationDensityProfileIRI_Full(_bb, new IonoObservationDensityProfileIRI_Full()); }
  public static IonoObservationDensityProfileIRI_Full getRootAsIonoObservationDensityProfileIRI_Full(ByteBuffer _bb, IonoObservationDensityProfileIRI_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationDensityProfileIRI_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationDensityProfileIRI_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Description of IRI implementation.
   * Example: /// Example: Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available.
   * Constraints: No constraints specified.
   */
  public String description() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Peak density of F2 layer, in grams per cubic centimeter.
   * Example: /// Example: 313283.1
   * Constraints: No constraints specified.
   */
  public double nmF2() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak height of F2 layer, in kilometers.
   * Example: /// Example: 265.42
   * Constraints: No constraints specified.
   */
  public double hmF2() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * B0 parameter of the F2 layer shape.
   * Example: /// Example: 245.1
   * Constraints: No constraints specified.
   */
  public double b0() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * B1 parameter of the F2 layer shape.
   * Example: /// Example: 3.45
   * Constraints: No constraints specified.
   */
  public double b1() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak density of the F1 layer, in grams per cubic centimeter.
   * Example: /// Example: 210486
   * Constraints: No constraints specified.
   */
  public double nmF1() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak height of the F1 layer, in kilometers.
   * Example: /// Example: 210.3
   * Constraints: No constraints specified.
   */
  public double hmF1() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * D1 parameter of the F1 layer shape.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public double d1() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Height HZ of the interim layer, in kilometers.
   * Example: /// Example: 142.7
   * Constraints: No constraints specified.
   */
  public double hz() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The valley height, in kilometers.
   * Example: /// Example: 116.2
   * Constraints: No constraints specified.
   */
  public double hValTop() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The valley depth, in grams per cubic centimeter.
   * Example: /// Example: 147025.1
   * Constraints: No constraints specified.
   */
  public double nValB() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak density of the E layer, in per cubic centimeter.
   * Example: /// Example: 154164.1
   * Constraints: No constraints specified.
   */
  public double nmE() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak height of the F2 layer, in kilometers.
   * Example: /// Example: 99.8
   * Constraints: No constraints specified.
   */
  public double hmE() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Height of the intermediate region at the top of D region, in kilometers.
   * Example: /// Example: 85.6
   * Constraints: No constraints specified.
   */
  public double hdx() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak density of the D layer, in per cubic centimeter.
   * Example: /// Example: 937543116.1
   * Constraints: No constraints specified.
   */
  public double nmD() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak height of the D layer, in kilometers.
   * Example: /// Example: 81.1
   * Constraints: No constraints specified.
   */
  public double hmD() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Starting height of the D layer, in kilometers.
   * Example: /// Example: 50.1
   * Constraints: No constraints specified.
   */
  public double ha() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * TBD.
   * Example: /// Example: 0.0474732023322638
   * Constraints: No constraints specified.
   */
  public double fp1() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * TBD.
   * Example: /// Example: -0.00112685246984002
   * Constraints: No constraints specified.
   */
  public double fp2() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * TBD.
   * Example: /// Example: 0.00827559450035957
   * Constraints: No constraints specified.
   */
  public double fp30() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * TBD.
   * Example: /// Example: 0.000201178475411428
   * Constraints: No constraints specified.
   */
  public double fp3U() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
   * Example: /// Example: 35.1
   * Constraints: No constraints specified.
   */
  public double chi() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createIonoObservationDensityProfileIRI_Full(FlatBufferBuilder builder,
      int descriptionOffset,
      double nmF2,
      double hmF2,
      double b0,
      double b1,
      double nmF1,
      double hmF1,
      double d1,
      double hz,
      double hValTop,
      double nValB,
      double nmE,
      double hmE,
      double hdx,
      double nmD,
      double hmD,
      double ha,
      double fp1,
      double fp2,
      double fp30,
      double fp3U,
      double chi) {
    builder.startTable(22);
    IonoObservationDensityProfileIRI_Full.addChi(builder, chi);
    IonoObservationDensityProfileIRI_Full.addFp3U(builder, fp3U);
    IonoObservationDensityProfileIRI_Full.addFp30(builder, fp30);
    IonoObservationDensityProfileIRI_Full.addFp2(builder, fp2);
    IonoObservationDensityProfileIRI_Full.addFp1(builder, fp1);
    IonoObservationDensityProfileIRI_Full.addHa(builder, ha);
    IonoObservationDensityProfileIRI_Full.addHmD(builder, hmD);
    IonoObservationDensityProfileIRI_Full.addNmD(builder, nmD);
    IonoObservationDensityProfileIRI_Full.addHdx(builder, hdx);
    IonoObservationDensityProfileIRI_Full.addHmE(builder, hmE);
    IonoObservationDensityProfileIRI_Full.addNmE(builder, nmE);
    IonoObservationDensityProfileIRI_Full.addNValB(builder, nValB);
    IonoObservationDensityProfileIRI_Full.addHValTop(builder, hValTop);
    IonoObservationDensityProfileIRI_Full.addHz(builder, hz);
    IonoObservationDensityProfileIRI_Full.addD1(builder, d1);
    IonoObservationDensityProfileIRI_Full.addHmF1(builder, hmF1);
    IonoObservationDensityProfileIRI_Full.addNmF1(builder, nmF1);
    IonoObservationDensityProfileIRI_Full.addB1(builder, b1);
    IonoObservationDensityProfileIRI_Full.addB0(builder, b0);
    IonoObservationDensityProfileIRI_Full.addHmF2(builder, hmF2);
    IonoObservationDensityProfileIRI_Full.addNmF2(builder, nmF2);
    IonoObservationDensityProfileIRI_Full.addDescription(builder, descriptionOffset);
    return IonoObservationDensityProfileIRI_Full.endIonoObservationDensityProfileIRI_Full(builder);
  }

  public static void startIonoObservationDensityProfileIRI_Full(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(0, descriptionOffset, 0); }
  public static void addNmF2(FlatBufferBuilder builder, double nmF2) { builder.addDouble(1, nmF2, 0.0); }
  public static void addHmF2(FlatBufferBuilder builder, double hmF2) { builder.addDouble(2, hmF2, 0.0); }
  public static void addB0(FlatBufferBuilder builder, double b0) { builder.addDouble(3, b0, 0.0); }
  public static void addB1(FlatBufferBuilder builder, double b1) { builder.addDouble(4, b1, 0.0); }
  public static void addNmF1(FlatBufferBuilder builder, double nmF1) { builder.addDouble(5, nmF1, 0.0); }
  public static void addHmF1(FlatBufferBuilder builder, double hmF1) { builder.addDouble(6, hmF1, 0.0); }
  public static void addD1(FlatBufferBuilder builder, double d1) { builder.addDouble(7, d1, 0.0); }
  public static void addHz(FlatBufferBuilder builder, double hz) { builder.addDouble(8, hz, 0.0); }
  public static void addHValTop(FlatBufferBuilder builder, double hValTop) { builder.addDouble(9, hValTop, 0.0); }
  public static void addNValB(FlatBufferBuilder builder, double nValB) { builder.addDouble(10, nValB, 0.0); }
  public static void addNmE(FlatBufferBuilder builder, double nmE) { builder.addDouble(11, nmE, 0.0); }
  public static void addHmE(FlatBufferBuilder builder, double hmE) { builder.addDouble(12, hmE, 0.0); }
  public static void addHdx(FlatBufferBuilder builder, double hdx) { builder.addDouble(13, hdx, 0.0); }
  public static void addNmD(FlatBufferBuilder builder, double nmD) { builder.addDouble(14, nmD, 0.0); }
  public static void addHmD(FlatBufferBuilder builder, double hmD) { builder.addDouble(15, hmD, 0.0); }
  public static void addHa(FlatBufferBuilder builder, double ha) { builder.addDouble(16, ha, 0.0); }
  public static void addFp1(FlatBufferBuilder builder, double fp1) { builder.addDouble(17, fp1, 0.0); }
  public static void addFp2(FlatBufferBuilder builder, double fp2) { builder.addDouble(18, fp2, 0.0); }
  public static void addFp30(FlatBufferBuilder builder, double fp30) { builder.addDouble(19, fp30, 0.0); }
  public static void addFp3U(FlatBufferBuilder builder, double fp3U) { builder.addDouble(20, fp3U, 0.0); }
  public static void addChi(FlatBufferBuilder builder, double chi) { builder.addDouble(21, chi, 0.0); }
  public static int endIonoObservationDensityProfileIRI_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationDensityProfileIRI_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationDensityProfileIRI_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationDensityProfileIRI_Full get(int j) { return get(new IonoObservationDensityProfileIRI_Full(), j); }
    public IonoObservationDensityProfileIRI_Full get(IonoObservationDensityProfileIRI_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

