// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A Plan is used to aggregate two or more of the same type of record to a parent entity, with the planId (UUID) being included in all of the subordinate records, enabling resolution back to the parent.
 */
@SuppressWarnings("unused")
public final class SensorPlan_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SensorPlan_Full getRootAsSensorPlan_Full(ByteBuffer _bb) { return getRootAsSensorPlan_Full(_bb, new SensorPlan_Full()); }
  public static SensorPlan_Full getRootAsSensorPlan_Full(ByteBuffer _bb, SensorPlan_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SensorPlan_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SENS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SensorPlan_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SENSORPLAN-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The type of this sensor plan/schedule (PLAN, REQUEST, SCHEDULE).
   * Example: /// Example: PLAN
   * Constraints: Minimum length = 1, Maximum length = 12
   */
  public String type() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The type of records that comprise this parent set (COLLECT, CONTACT).
   * Example: /// Example: COLLECT
   * Constraints: Minimum length = 1, Maximum length = 12
   */
  public String recType() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recTypeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer recTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The start time of the plan or schedule, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The end time of the plan or schedule, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Name associated with this plan or schedule.
   * Example: /// Example: EXAMPLE NAME
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String name() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Unique identifier of the requested/schedule/planned sensor associated with this request.
   * Example: /// Example: REF-SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional identifier provided by the source to indicate the sensor identifier requested/scheduled/planned for this request. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The purpose/description of this plan or schedule.
   * Example: /// Example: Example purpose
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String purpose() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer purposeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer purposeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The sensor or ground network associated with this plan or schedule.
   * Example: /// Example: NETWORK
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String senNetwork() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer senNetworkAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer senNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The total number of requests contained in this plan or schedule. Value of this field must match the size of collectRequest list if the list is provided and can be null or any value otherwise.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int reqTotal() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The customer for this plan or schedule.
   * Example: /// Example: CUSTOMER
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String customer() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer customerAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer customerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The status of this plan or schedule (ACCEPTED, APPROVED, COMPLETED, PROPOSED, REJECTED, REQUESTED, SCHEDULED).
   * Example: /// Example: ACCEPTED
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String status() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(44); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The list of collect requests belonging to the SensorPlan. Each collect request is associated with a parent SensorPlan via the IdPlan. If provided, the list must have the same size as reqTotal.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String collectRequests(int j) { int o = __offset(48); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int collectRequestsLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public StringVector collectRequestsVector() { return collectRequestsVector(new StringVector()); }
  public StringVector collectRequestsVector(StringVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSensorPlan_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int typeOffset,
      int recTypeOffset,
      int startTimeOffset,
      int endTimeOffset,
      int nameOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int purposeOffset,
      int senNetworkOffset,
      int reqTotal,
      int customerOffset,
      int statusOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset,
      int collectRequestsOffset,
      int tagsOffset) {
    builder.startTable(24);
    SensorPlan_Full.addTags(builder, tagsOffset);
    SensorPlan_Full.addCollectRequests(builder, collectRequestsOffset);
    SensorPlan_Full.addOrigNetwork(builder, origNetworkOffset);
    SensorPlan_Full.addOrigin(builder, originOffset);
    SensorPlan_Full.addSource(builder, sourceOffset);
    SensorPlan_Full.addUpdatedBy(builder, updatedByOffset);
    SensorPlan_Full.addUpdatedAt(builder, updatedAtOffset);
    SensorPlan_Full.addCreatedBy(builder, createdByOffset);
    SensorPlan_Full.addCreatedAt(builder, createdAtOffset);
    SensorPlan_Full.addStatus(builder, statusOffset);
    SensorPlan_Full.addCustomer(builder, customerOffset);
    SensorPlan_Full.addReqTotal(builder, reqTotal);
    SensorPlan_Full.addSenNetwork(builder, senNetworkOffset);
    SensorPlan_Full.addPurpose(builder, purposeOffset);
    SensorPlan_Full.addOrigSensorId(builder, origSensorIdOffset);
    SensorPlan_Full.addIdSensor(builder, idSensorOffset);
    SensorPlan_Full.addName(builder, nameOffset);
    SensorPlan_Full.addEndTime(builder, endTimeOffset);
    SensorPlan_Full.addStartTime(builder, startTimeOffset);
    SensorPlan_Full.addRecType(builder, recTypeOffset);
    SensorPlan_Full.addType(builder, typeOffset);
    SensorPlan_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SensorPlan_Full.addId(builder, idOffset);
    SensorPlan_Full.addDataMode(builder, dataMode);
    return SensorPlan_Full.endSensorPlan_Full(builder);
  }

  public static void startSensorPlan_Full(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(2, typeOffset, 0); }
  public static void addRecType(FlatBufferBuilder builder, int recTypeOffset) { builder.addOffset(3, recTypeOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(4, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(5, endTimeOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(6, nameOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(7, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(8, origSensorIdOffset, 0); }
  public static void addPurpose(FlatBufferBuilder builder, int purposeOffset) { builder.addOffset(9, purposeOffset, 0); }
  public static void addSenNetwork(FlatBufferBuilder builder, int senNetworkOffset) { builder.addOffset(10, senNetworkOffset, 0); }
  public static void addReqTotal(FlatBufferBuilder builder, int reqTotal) { builder.addInt(11, reqTotal, 0); }
  public static void addCustomer(FlatBufferBuilder builder, int customerOffset) { builder.addOffset(12, customerOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(13, statusOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(14, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(15, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(16, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(17, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(18, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(19, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(20, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(21, origNetworkOffset, 0); }
  public static void addCollectRequests(FlatBufferBuilder builder, int collectRequestsOffset) { builder.addOffset(22, collectRequestsOffset, 0); }
  public static int createCollectRequestsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCollectRequestsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(23, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSensorPlan_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSensorPlan_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SENS"); }
  public static void finishSizePrefixedSensorPlan_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SENS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SensorPlan_Full get(int j) { return get(new SensorPlan_Full(), j); }
    public SensorPlan_Full get(SensorPlan_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

