// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information pertaining to the details of executing the recovery.
 */
@SuppressWarnings("unused")
public final class PersonnelRecoveryExecutionInfo_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static PersonnelRecoveryExecutionInfo_Ingest getRootAsPersonnelRecoveryExecutionInfo_Ingest(ByteBuffer _bb) { return getRootAsPersonnelRecoveryExecutionInfo_Ingest(_bb, new PersonnelRecoveryExecutionInfo_Ingest()); }
  public static PersonnelRecoveryExecutionInfo_Ingest getRootAsPersonnelRecoveryExecutionInfo_Ingest(ByteBuffer _bb, PersonnelRecoveryExecutionInfo_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean PersonnelRecoveryExecutionInfo_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "PERS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PersonnelRecoveryExecutionInfo_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
   * Example: /// Example: [103.23, 30.445]
   * Constraints: No constraints specified.
   */
  public String initialPoint(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int initialPointLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector initialPointVector() { return initialPointVector(new StringVector()); }
  public StringVector initialPointVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The heading, in degrees clockwise from North, of entering the recovery zone.
   * Example: /// Example: 35.66
   * Constraints: No constraints specified.
   */
  public double ingress() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Description of the objective strategy plan.
   * Example: /// Example: Description of strategy plan.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String objStrategy() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer objStrategyAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer objStrategyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
   * Example: /// Example: [107.23, 30.455]
   * Constraints: No constraints specified.
   */
  public String egressPoint(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int egressPointLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector egressPointVector() { return egressPointVector(new StringVector()); }
  public StringVector egressPointVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The heading, in degrees, of leaving the recovery zone.
   * Example: /// Example: 66.53
   * Constraints: No constraints specified.
   */
  public double egress() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String recoveryVehicle() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recoveryVehicleAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer recoveryVehicleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String escortVehicle() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer escortVehicleAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer escortVehicleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }

  public static int createPersonnelRecoveryExecutionInfo_Ingest(FlatBufferBuilder builder,
      int initialPointOffset,
      double ingress,
      int objStrategyOffset,
      int egressPointOffset,
      double egress,
      int recoveryVehicleOffset,
      int escortVehicleOffset) {
    builder.startTable(7);
    PersonnelRecoveryExecutionInfo_Ingest.addEgress(builder, egress);
    PersonnelRecoveryExecutionInfo_Ingest.addIngress(builder, ingress);
    PersonnelRecoveryExecutionInfo_Ingest.addEscortVehicle(builder, escortVehicleOffset);
    PersonnelRecoveryExecutionInfo_Ingest.addRecoveryVehicle(builder, recoveryVehicleOffset);
    PersonnelRecoveryExecutionInfo_Ingest.addEgressPoint(builder, egressPointOffset);
    PersonnelRecoveryExecutionInfo_Ingest.addObjStrategy(builder, objStrategyOffset);
    PersonnelRecoveryExecutionInfo_Ingest.addInitialPoint(builder, initialPointOffset);
    return PersonnelRecoveryExecutionInfo_Ingest.endPersonnelRecoveryExecutionInfo_Ingest(builder);
  }

  public static void startPersonnelRecoveryExecutionInfo_Ingest(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addInitialPoint(FlatBufferBuilder builder, int initialPointOffset) { builder.addOffset(0, initialPointOffset, 0); }
  public static int createInitialPointVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInitialPointVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIngress(FlatBufferBuilder builder, double ingress) { builder.addDouble(1, ingress, 0.0); }
  public static void addObjStrategy(FlatBufferBuilder builder, int objStrategyOffset) { builder.addOffset(2, objStrategyOffset, 0); }
  public static void addEgressPoint(FlatBufferBuilder builder, int egressPointOffset) { builder.addOffset(3, egressPointOffset, 0); }
  public static int createEgressPointVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEgressPointVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addEgress(FlatBufferBuilder builder, double egress) { builder.addDouble(4, egress, 0.0); }
  public static void addRecoveryVehicle(FlatBufferBuilder builder, int recoveryVehicleOffset) { builder.addOffset(5, recoveryVehicleOffset, 0); }
  public static void addEscortVehicle(FlatBufferBuilder builder, int escortVehicleOffset) { builder.addOffset(6, escortVehicleOffset, 0); }
  public static int endPersonnelRecoveryExecutionInfo_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPersonnelRecoveryExecutionInfo_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "PERS"); }
  public static void finishSizePrefixedPersonnelRecoveryExecutionInfo_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "PERS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PersonnelRecoveryExecutionInfo_Ingest get(int j) { return get(new PersonnelRecoveryExecutionInfo_Ingest(), j); }
    public PersonnelRecoveryExecutionInfo_Ingest get(PersonnelRecoveryExecutionInfo_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

