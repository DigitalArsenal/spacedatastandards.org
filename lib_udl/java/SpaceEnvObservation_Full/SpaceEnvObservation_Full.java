// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// SpaceEnvObservation data.
 */
@SuppressWarnings("unused")
public final class SpaceEnvObservation_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SpaceEnvObservation_Full getRootAsSpaceEnvObservation_Full(ByteBuffer _bb) { return getRootAsSpaceEnvObservation_Full(_bb, new SpaceEnvObservation_Full()); }
  public static SpaceEnvObservation_Full getRootAsSpaceEnvObservation_Full(ByteBuffer _bb, SpaceEnvObservation_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SpaceEnvObservation_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SPAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SpaceEnvObservation_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The type of message associated with this record.
   * Example: /// Example: SODM
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String msgType() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer msgTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The external system which generated the message, if applicable.
   * Example: /// Example: System Name
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String genSystem() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer genSystemAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer genSystemInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
   * Example: /// Example: ECP
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String dataType() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dataTypeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer dataTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-02-10T19:48:09.934Z
   * Constraints: No constraints specified.
   */
  public String genTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer genTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer genTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Flag indicating that this record contains forecast data.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean forecast() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this record contains derived data.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean derived() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
   * Example: /// Example: 41866
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
   * Example: /// Example: 41866
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: 41866
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: ECP-1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ECP-1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origSensorId() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
   * Example: /// Example: ONORBIT
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String observatoryType() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer observatoryTypeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer observatoryTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The name of the observatory from which this data was collected.
   * Example: /// Example: GOES-16
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String observatoryName() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer observatoryNameAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer observatoryNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Additional notes concerning the observatory.
   * Example: /// Example: Notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String observatoryNotes() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer observatoryNotesAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer observatoryNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
   * Example: /// Example: MAGNETOMETER
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String instrumentType() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer instrumentTypeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer instrumentTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 38.8339
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -104.8214
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
   * Example: /// Example: 35785.3732
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte senReferenceFrame() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
   * Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
   * Constraints: No constraints specified.
   */
  public String senPos(int j) { int o = __offset(48); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int senPosLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public StringVector senPosVector() { return senPosVector(new StringVector()); }
  public StringVector senPosVector(StringVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
   * Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
   * Constraints: No constraints specified.
   */
  public String senVel(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int senVelLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector senVelVector() { return senVelVector(new StringVector()); }
  public StringVector senVelVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The sensor measurement type of the observation data contained in this record.
   * Example: /// Example: ENERGETIC PARTICLES
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String measType() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer measTypeAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer measTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * The energy level bin of the sensor associated with this measurement.
   * Example: /// Example: 0500-700 keV
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String senEnergyLevel() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer senEnergyLevelAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer senEnergyLevelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
   * Example: /// Example: ECPOBSET-478125
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String obSetId() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obSetIdAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer obSetIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
   * Example: /// Example: PROTON
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String particleType() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer particleTypeAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer particleTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Time of the observation, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-06-07T14:17:39.653Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * A collection of individual space environment observations.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String seoList(int j) { int o = __offset(62); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int seoListLength() { int o = __offset(62); return o != 0 ? __vector_len(o) : 0; }
  public StringVector seoListVector() { return seoListVector(new StringVector()); }
  public StringVector seoListVector(StringVector obj) { int o = __offset(62); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
   * Example: /// Example: GOOD
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String quality() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer qualityAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer qualityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Descriptive or additional information associated with this observation record.
   * Example: /// Example: Observation Data Description Text
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String description() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: energetic charged particle
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['SPACEENVOB', 'SGI']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
   * Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(72); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(72); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(72); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2023-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(82); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }

  public static int createSpaceEnvObservation_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int msgTypeOffset,
      int genSystemOffset,
      int externalIdOffset,
      int dataTypeOffset,
      int genTimeOffset,
      boolean forecast,
      boolean derived,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int observatoryTypeOffset,
      int observatoryNameOffset,
      int observatoryNotesOffset,
      int instrumentTypeOffset,
      double lat,
      double lon,
      double alt,
      byte senReferenceFrame,
      int senPosOffset,
      int senVelOffset,
      int measTypeOffset,
      int senEnergyLevelOffset,
      int obSetIdOffset,
      int particleTypeOffset,
      int obTimeOffset,
      int seoListOffset,
      int qualityOffset,
      int descriptionOffset,
      int descriptorOffset,
      int srcTypsOffset,
      int srcIdsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(41);
    SpaceEnvObservation_Full.addAlt(builder, alt);
    SpaceEnvObservation_Full.addLon(builder, lon);
    SpaceEnvObservation_Full.addLat(builder, lat);
    SpaceEnvObservation_Full.addOrigNetwork(builder, origNetworkOffset);
    SpaceEnvObservation_Full.addOrigin(builder, originOffset);
    SpaceEnvObservation_Full.addSource(builder, sourceOffset);
    SpaceEnvObservation_Full.addCreatedBy(builder, createdByOffset);
    SpaceEnvObservation_Full.addCreatedAt(builder, createdAtOffset);
    SpaceEnvObservation_Full.addSrcIds(builder, srcIdsOffset);
    SpaceEnvObservation_Full.addSrcTyps(builder, srcTypsOffset);
    SpaceEnvObservation_Full.addDescriptor(builder, descriptorOffset);
    SpaceEnvObservation_Full.addDescription(builder, descriptionOffset);
    SpaceEnvObservation_Full.addQuality(builder, qualityOffset);
    SpaceEnvObservation_Full.addSeoList(builder, seoListOffset);
    SpaceEnvObservation_Full.addObTime(builder, obTimeOffset);
    SpaceEnvObservation_Full.addParticleType(builder, particleTypeOffset);
    SpaceEnvObservation_Full.addObSetId(builder, obSetIdOffset);
    SpaceEnvObservation_Full.addSenEnergyLevel(builder, senEnergyLevelOffset);
    SpaceEnvObservation_Full.addMeasType(builder, measTypeOffset);
    SpaceEnvObservation_Full.addSenVel(builder, senVelOffset);
    SpaceEnvObservation_Full.addSenPos(builder, senPosOffset);
    SpaceEnvObservation_Full.addInstrumentType(builder, instrumentTypeOffset);
    SpaceEnvObservation_Full.addObservatoryNotes(builder, observatoryNotesOffset);
    SpaceEnvObservation_Full.addObservatoryName(builder, observatoryNameOffset);
    SpaceEnvObservation_Full.addObservatoryType(builder, observatoryTypeOffset);
    SpaceEnvObservation_Full.addOrigSensorId(builder, origSensorIdOffset);
    SpaceEnvObservation_Full.addIdSensor(builder, idSensorOffset);
    SpaceEnvObservation_Full.addOrigObjectId(builder, origObjectIdOffset);
    SpaceEnvObservation_Full.addSatNo(builder, satNo);
    SpaceEnvObservation_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    SpaceEnvObservation_Full.addGenTime(builder, genTimeOffset);
    SpaceEnvObservation_Full.addDataType(builder, dataTypeOffset);
    SpaceEnvObservation_Full.addExternalId(builder, externalIdOffset);
    SpaceEnvObservation_Full.addGenSystem(builder, genSystemOffset);
    SpaceEnvObservation_Full.addMsgType(builder, msgTypeOffset);
    SpaceEnvObservation_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SpaceEnvObservation_Full.addId(builder, idOffset);
    SpaceEnvObservation_Full.addDataMode(builder, dataMode);
    SpaceEnvObservation_Full.addSenReferenceFrame(builder, senReferenceFrame);
    SpaceEnvObservation_Full.addDerived(builder, derived);
    SpaceEnvObservation_Full.addForecast(builder, forecast);
    return SpaceEnvObservation_Full.endSpaceEnvObservation_Full(builder);
  }

  public static void startSpaceEnvObservation_Full(FlatBufferBuilder builder) { builder.startTable(41); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addMsgType(FlatBufferBuilder builder, int msgTypeOffset) { builder.addOffset(2, msgTypeOffset, 0); }
  public static void addGenSystem(FlatBufferBuilder builder, int genSystemOffset) { builder.addOffset(3, genSystemOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(4, externalIdOffset, 0); }
  public static void addDataType(FlatBufferBuilder builder, int dataTypeOffset) { builder.addOffset(5, dataTypeOffset, 0); }
  public static void addGenTime(FlatBufferBuilder builder, int genTimeOffset) { builder.addOffset(6, genTimeOffset, 0); }
  public static void addForecast(FlatBufferBuilder builder, boolean forecast) { builder.addBoolean(7, forecast, false); }
  public static void addDerived(FlatBufferBuilder builder, boolean derived) { builder.addBoolean(8, derived, false); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(9, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(10, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(11, origObjectIdOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(12, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(13, origSensorIdOffset, 0); }
  public static void addObservatoryType(FlatBufferBuilder builder, int observatoryTypeOffset) { builder.addOffset(14, observatoryTypeOffset, 0); }
  public static void addObservatoryName(FlatBufferBuilder builder, int observatoryNameOffset) { builder.addOffset(15, observatoryNameOffset, 0); }
  public static void addObservatoryNotes(FlatBufferBuilder builder, int observatoryNotesOffset) { builder.addOffset(16, observatoryNotesOffset, 0); }
  public static void addInstrumentType(FlatBufferBuilder builder, int instrumentTypeOffset) { builder.addOffset(17, instrumentTypeOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(18, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(19, lon, 0.0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(20, alt, 0.0); }
  public static void addSenReferenceFrame(FlatBufferBuilder builder, byte senReferenceFrame) { builder.addByte(21, senReferenceFrame, 0); }
  public static void addSenPos(FlatBufferBuilder builder, int senPosOffset) { builder.addOffset(22, senPosOffset, 0); }
  public static int createSenPosVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSenPosVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSenVel(FlatBufferBuilder builder, int senVelOffset) { builder.addOffset(23, senVelOffset, 0); }
  public static int createSenVelVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSenVelVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMeasType(FlatBufferBuilder builder, int measTypeOffset) { builder.addOffset(24, measTypeOffset, 0); }
  public static void addSenEnergyLevel(FlatBufferBuilder builder, int senEnergyLevelOffset) { builder.addOffset(25, senEnergyLevelOffset, 0); }
  public static void addObSetId(FlatBufferBuilder builder, int obSetIdOffset) { builder.addOffset(26, obSetIdOffset, 0); }
  public static void addParticleType(FlatBufferBuilder builder, int particleTypeOffset) { builder.addOffset(27, particleTypeOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(28, obTimeOffset, 0); }
  public static void addSeoList(FlatBufferBuilder builder, int seoListOffset) { builder.addOffset(29, seoListOffset, 0); }
  public static int createSeoListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSeoListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addQuality(FlatBufferBuilder builder, int qualityOffset) { builder.addOffset(30, qualityOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(31, descriptionOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(32, descriptorOffset, 0); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(33, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(34, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(35, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(36, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(37, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(38, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(39, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(40, origNetworkOffset, 0); }
  public static int endSpaceEnvObservation_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSpaceEnvObservation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SPAC"); }
  public static void finishSizePrefixedSpaceEnvObservation_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SPAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SpaceEnvObservation_Full get(int j) { return get(new SpaceEnvObservation_Full(), j); }
    public SpaceEnvObservation_Full get(SpaceEnvObservation_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

