// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
 */
@SuppressWarnings("unused")
public final class OpticalSOIObservation_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static OpticalSOIObservation_Ingest getRootAsOpticalSOIObservation_Ingest(ByteBuffer _bb) { return getRootAsOpticalSOIObservation_Ingest(_bb, new OpticalSOIObservation_Ingest()); }
  public static OpticalSOIObservation_Ingest getRootAsOpticalSOIObservation_Ingest(ByteBuffer _bb, OpticalSOIObservation_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean OpticalSOIObservation_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "OPTI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public OpticalSOIObservation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Observation detection start time in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.888456Z
   * Constraints: No constraints specified.
   */
  public String obStartTime() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obStartTimeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer obStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
   * Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
   * Constraints: No constraints specified.
   */
  public String intensityTimes(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int intensityTimesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector intensityTimesVector() { return intensityTimesVector(new StringVector()); }
  public StringVector intensityTimesVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int currentSpectralFilterNum() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Image exposure duration in seconds.
   * Example: /// Example: 0.455
   * Constraints: No constraints specified.
   */
  public double expDuration() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
   * Example: /// Example: [1.1, 1.1, 1.1]
   * Constraints: No constraints specified.
   */
  public String intensities(int j) { int o = __offset(12); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int intensitiesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public StringVector intensitiesVector() { return intensitiesVector(new StringVector()); }
  public StringVector intensitiesVector(StringVector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
   * Example: /// Example: [0.32, 0.32, 0.32]
   * Constraints: No constraints specified.
   */
  public String extinctionCoeffs(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int extinctionCoeffsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector extinctionCoeffsVector() { return extinctionCoeffsVector(new StringVector()); }
  public StringVector extinctionCoeffsVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
   * Example: /// Example: [0.06, 0.06, 0.06]
   * Constraints: No constraints specified.
   */
  public String extinctionCoeffsUnc(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int extinctionCoeffsUncLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector extinctionCoeffsUncVector() { return extinctionCoeffsUncVector(new StringVector()); }
  public StringVector extinctionCoeffsUncVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
   * Example: /// Example: [100625.375, 100625.375, 100625.375]
   * Constraints: No constraints specified.
   */
  public String skyBgs(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int skyBgsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector skyBgsVector() { return skyBgsVector(new StringVector()); }
  public StringVector skyBgsVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
   * Example: /// Example: [100625.375, 100625.375, 100625.375]
   * Constraints: No constraints specified.
   */
  public String localSkyBgs(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int localSkyBgsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector localSkyBgsVector() { return localSkyBgsVector(new StringVector()); }
  public StringVector localSkyBgsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
   * Example: /// Example: [0.065, 0.065, 0.065]
   * Constraints: No constraints specified.
   */
  public String localSkyBgsUnc(int j) { int o = __offset(22); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int localSkyBgsUncLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public StringVector localSkyBgsUncVector() { return localSkyBgsUncVector(new StringVector()); }
  public StringVector localSkyBgsUncVector(StringVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the number of detected stars in the FOV with a value for each element in the intensities field.
   * Example: /// Example: [6, 6, 6]
   * Constraints: No constraints specified.
   */
  public String numDetectedStars(int j) { int o = __offset(24); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int numDetectedStarsLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public StringVector numDetectedStarsVector() { return numDetectedStarsVector(new StringVector()); }
  public StringVector numDetectedStarsVector(StringVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
   * Example: /// Example: [3, 3, 3]
   * Constraints: No constraints specified.
   */
  public String numCorrelatedStars(int j) { int o = __offset(26); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int numCorrelatedStarsLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public StringVector numCorrelatedStarsVector() { return numCorrelatedStarsVector(new StringVector()); }
  public StringVector numCorrelatedStarsVector(StringVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
   * Example: /// Example: [24.711, 24.711, 24.711]
   * Constraints: No constraints specified.
   */
  public String zeroPoints(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int zeroPointsLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector zeroPointsVector() { return zeroPointsVector(new StringVector()); }
  public StringVector zeroPointsVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
   * Example: /// Example: [107.4, 107.4, 107.4]
   * Constraints: No constraints specified.
   */
  public String ras(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int rasLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector rasVector() { return rasVector(new StringVector()); }
  public StringVector rasVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
   * Example: /// Example: [-0.45, -0.45, -0.45]
   * Constraints: No constraints specified.
   */
  public String declinations(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int declinationsLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector declinationsVector() { return declinationsVector(new StringVector()); }
  public StringVector declinationsVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
   * Example: /// Example: [0, 0, 0]
   * Constraints: No constraints specified.
   */
  public String raRates(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int raRatesLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector raRatesVector() { return raRatesVector(new StringVector()); }
  public StringVector raRatesVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
   * Example: /// Example: [0.1, 0.2, 1]
   * Constraints: No constraints specified.
   */
  public String percentSats(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int percentSatsLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector percentSatsVector() { return percentSatsVector(new StringVector()); }
  public StringVector percentSatsVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createOpticalSOIObservation_Ingest(FlatBufferBuilder builder,
      int obStartTimeOffset,
      int intensityTimesOffset,
      int currentSpectralFilterNum,
      double expDuration,
      int intensitiesOffset,
      int extinctionCoeffsOffset,
      int extinctionCoeffsUncOffset,
      int skyBgsOffset,
      int localSkyBgsOffset,
      int localSkyBgsUncOffset,
      int numDetectedStarsOffset,
      int numCorrelatedStarsOffset,
      int zeroPointsOffset,
      int rasOffset,
      int declinationsOffset,
      int raRatesOffset,
      int percentSatsOffset) {
    builder.startTable(17);
    OpticalSOIObservation_Ingest.addExpDuration(builder, expDuration);
    OpticalSOIObservation_Ingest.addPercentSats(builder, percentSatsOffset);
    OpticalSOIObservation_Ingest.addRaRates(builder, raRatesOffset);
    OpticalSOIObservation_Ingest.addDeclinations(builder, declinationsOffset);
    OpticalSOIObservation_Ingest.addRas(builder, rasOffset);
    OpticalSOIObservation_Ingest.addZeroPoints(builder, zeroPointsOffset);
    OpticalSOIObservation_Ingest.addNumCorrelatedStars(builder, numCorrelatedStarsOffset);
    OpticalSOIObservation_Ingest.addNumDetectedStars(builder, numDetectedStarsOffset);
    OpticalSOIObservation_Ingest.addLocalSkyBgsUnc(builder, localSkyBgsUncOffset);
    OpticalSOIObservation_Ingest.addLocalSkyBgs(builder, localSkyBgsOffset);
    OpticalSOIObservation_Ingest.addSkyBgs(builder, skyBgsOffset);
    OpticalSOIObservation_Ingest.addExtinctionCoeffsUnc(builder, extinctionCoeffsUncOffset);
    OpticalSOIObservation_Ingest.addExtinctionCoeffs(builder, extinctionCoeffsOffset);
    OpticalSOIObservation_Ingest.addIntensities(builder, intensitiesOffset);
    OpticalSOIObservation_Ingest.addCurrentSpectralFilterNum(builder, currentSpectralFilterNum);
    OpticalSOIObservation_Ingest.addIntensityTimes(builder, intensityTimesOffset);
    OpticalSOIObservation_Ingest.addObStartTime(builder, obStartTimeOffset);
    return OpticalSOIObservation_Ingest.endOpticalSOIObservation_Ingest(builder);
  }

  public static void startOpticalSOIObservation_Ingest(FlatBufferBuilder builder) { builder.startTable(17); }
  public static void addObStartTime(FlatBufferBuilder builder, int obStartTimeOffset) { builder.addOffset(0, obStartTimeOffset, 0); }
  public static void addIntensityTimes(FlatBufferBuilder builder, int intensityTimesOffset) { builder.addOffset(1, intensityTimesOffset, 0); }
  public static int createIntensityTimesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIntensityTimesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCurrentSpectralFilterNum(FlatBufferBuilder builder, int currentSpectralFilterNum) { builder.addInt(2, currentSpectralFilterNum, 0); }
  public static void addExpDuration(FlatBufferBuilder builder, double expDuration) { builder.addDouble(3, expDuration, 0.0); }
  public static void addIntensities(FlatBufferBuilder builder, int intensitiesOffset) { builder.addOffset(4, intensitiesOffset, 0); }
  public static int createIntensitiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIntensitiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addExtinctionCoeffs(FlatBufferBuilder builder, int extinctionCoeffsOffset) { builder.addOffset(5, extinctionCoeffsOffset, 0); }
  public static int createExtinctionCoeffsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startExtinctionCoeffsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addExtinctionCoeffsUnc(FlatBufferBuilder builder, int extinctionCoeffsUncOffset) { builder.addOffset(6, extinctionCoeffsUncOffset, 0); }
  public static int createExtinctionCoeffsUncVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startExtinctionCoeffsUncVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSkyBgs(FlatBufferBuilder builder, int skyBgsOffset) { builder.addOffset(7, skyBgsOffset, 0); }
  public static int createSkyBgsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSkyBgsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLocalSkyBgs(FlatBufferBuilder builder, int localSkyBgsOffset) { builder.addOffset(8, localSkyBgsOffset, 0); }
  public static int createLocalSkyBgsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLocalSkyBgsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLocalSkyBgsUnc(FlatBufferBuilder builder, int localSkyBgsUncOffset) { builder.addOffset(9, localSkyBgsUncOffset, 0); }
  public static int createLocalSkyBgsUncVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLocalSkyBgsUncVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNumDetectedStars(FlatBufferBuilder builder, int numDetectedStarsOffset) { builder.addOffset(10, numDetectedStarsOffset, 0); }
  public static int createNumDetectedStarsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNumDetectedStarsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNumCorrelatedStars(FlatBufferBuilder builder, int numCorrelatedStarsOffset) { builder.addOffset(11, numCorrelatedStarsOffset, 0); }
  public static int createNumCorrelatedStarsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNumCorrelatedStarsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addZeroPoints(FlatBufferBuilder builder, int zeroPointsOffset) { builder.addOffset(12, zeroPointsOffset, 0); }
  public static int createZeroPointsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startZeroPointsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRas(FlatBufferBuilder builder, int rasOffset) { builder.addOffset(13, rasOffset, 0); }
  public static int createRasVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRasVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDeclinations(FlatBufferBuilder builder, int declinationsOffset) { builder.addOffset(14, declinationsOffset, 0); }
  public static int createDeclinationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDeclinationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRaRates(FlatBufferBuilder builder, int raRatesOffset) { builder.addOffset(15, raRatesOffset, 0); }
  public static int createRaRatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRaRatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPercentSats(FlatBufferBuilder builder, int percentSatsOffset) { builder.addOffset(16, percentSatsOffset, 0); }
  public static int createPercentSatsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPercentSatsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endOpticalSOIObservation_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishOpticalSOIObservation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "OPTI"); }
  public static void finishSizePrefixedOpticalSOIObservation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "OPTI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public OpticalSOIObservation_Ingest get(int j) { return get(new OpticalSOIObservation_Ingest(), j); }
    public OpticalSOIObservation_Ingest get(OpticalSOIObservation_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

