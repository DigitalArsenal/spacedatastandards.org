// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of Hazardous Material information associated with this Air Transport Mission.
 */
@SuppressWarnings("unused")
public final class AirTransportMissionHazMat_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirTransportMissionHazMat_Full getRootAsAirTransportMissionHazMat_Full(ByteBuffer _bb) { return getRootAsAirTransportMissionHazMat_Full(_bb, new AirTransportMissionHazMat_Full()); }
  public static AirTransportMissionHazMat_Full getRootAsAirTransportMissionHazMat_Full(ByteBuffer _bb, AirTransportMissionHazMat_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirTransportMissionHazMat_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirTransportMissionHazMat_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The hazMat identifier provided by the originating source.
   * Example: /// Example: cb6289e0f38534e01291ab6421d42724
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String extHazMatId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer extHazMatIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer extHazMatIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * United Nations proper shipping name of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
   * Example: /// Example: LITHIUM METAL BATTERIES
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String itemName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer itemNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer itemNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * United Nations number or North America number that identifies hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
   * Example: /// Example: 0181
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String unNum() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer unNumAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer unNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Number of pieces of hazardous cargo.
   * Example: /// Example: 29
   * Constraints: No constraints specified.
   */
  public int pieces() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Total weight of hazardous cargo, including non-explosive parts, in kilograms.
   * Example: /// Example: 22.1
   * Constraints: No constraints specified.
   */
  public double weight() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Net explosive weight of the hazardous material, in kilograms.
   * Example: /// Example: 12.1
   * Constraints: No constraints specified.
   */
  public double netExpWt() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Class and division of the hazardous material according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double classDiv() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Compatibility group code used to specify the controls for the transportation and storage of hazardous materials according to the Hazardous Materials Regulations issued by the U.S. Department of Transportation.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String cgc() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cgcAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer cgcInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Comma delimited list of Note IDs for compatibility groups, specific to GDSS systems.
   * Example: /// Example: 4,5,7,8
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String cgn() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cgnAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer cgnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Comma delimited list of Note IDs for Item Class Segregation groups, specific to GDSS systems.
   * Example: /// Example: 11,12
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String applicableNotes() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer applicableNotesAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer applicableNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Itinerary number that identifies where the hazardous material is loaded.
   * Example: /// Example: 50
   * Constraints: No constraints specified.
   */
  public int onItin() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is loaded.
   * Example: /// Example: LIRQ
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String onIcao() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onIcaoAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer onIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Itinerary number that identifies where the hazardous material is unloaded.
   * Example: /// Example: 300
   * Constraints: No constraints specified.
   */
  public int offItin() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The International Civil Aviation Organization (ICAO) code of the site where the hazardous material is unloaded.
   * Example: /// Example: MBPV
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String offIcao() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer offIcaoAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer offIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Flag indicating if hazardous material is associated with this air transport mission. Possible values are P (planned to be associated with the mission) or A (actually associated with the mission). Enum: [P, A].
   * Example: /// Example: P
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String planned() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer plannedAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer plannedInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }

  public static int createAirTransportMissionHazMat_Full(FlatBufferBuilder builder,
      int extHazMatIdOffset,
      int itemNameOffset,
      int unNumOffset,
      int pieces,
      double weight,
      double netExpWt,
      double classDiv,
      int cgcOffset,
      int cgnOffset,
      int applicableNotesOffset,
      int onItin,
      int onIcaoOffset,
      int offItin,
      int offIcaoOffset,
      int plannedOffset) {
    builder.startTable(15);
    AirTransportMissionHazMat_Full.addClassDiv(builder, classDiv);
    AirTransportMissionHazMat_Full.addNetExpWt(builder, netExpWt);
    AirTransportMissionHazMat_Full.addWeight(builder, weight);
    AirTransportMissionHazMat_Full.addPlanned(builder, plannedOffset);
    AirTransportMissionHazMat_Full.addOffIcao(builder, offIcaoOffset);
    AirTransportMissionHazMat_Full.addOffItin(builder, offItin);
    AirTransportMissionHazMat_Full.addOnIcao(builder, onIcaoOffset);
    AirTransportMissionHazMat_Full.addOnItin(builder, onItin);
    AirTransportMissionHazMat_Full.addApplicableNotes(builder, applicableNotesOffset);
    AirTransportMissionHazMat_Full.addCgn(builder, cgnOffset);
    AirTransportMissionHazMat_Full.addCgc(builder, cgcOffset);
    AirTransportMissionHazMat_Full.addPieces(builder, pieces);
    AirTransportMissionHazMat_Full.addUnNum(builder, unNumOffset);
    AirTransportMissionHazMat_Full.addItemName(builder, itemNameOffset);
    AirTransportMissionHazMat_Full.addExtHazMatId(builder, extHazMatIdOffset);
    return AirTransportMissionHazMat_Full.endAirTransportMissionHazMat_Full(builder);
  }

  public static void startAirTransportMissionHazMat_Full(FlatBufferBuilder builder) { builder.startTable(15); }
  public static void addExtHazMatId(FlatBufferBuilder builder, int extHazMatIdOffset) { builder.addOffset(0, extHazMatIdOffset, 0); }
  public static void addItemName(FlatBufferBuilder builder, int itemNameOffset) { builder.addOffset(1, itemNameOffset, 0); }
  public static void addUnNum(FlatBufferBuilder builder, int unNumOffset) { builder.addOffset(2, unNumOffset, 0); }
  public static void addPieces(FlatBufferBuilder builder, int pieces) { builder.addInt(3, pieces, 0); }
  public static void addWeight(FlatBufferBuilder builder, double weight) { builder.addDouble(4, weight, 0.0); }
  public static void addNetExpWt(FlatBufferBuilder builder, double netExpWt) { builder.addDouble(5, netExpWt, 0.0); }
  public static void addClassDiv(FlatBufferBuilder builder, double classDiv) { builder.addDouble(6, classDiv, 0.0); }
  public static void addCgc(FlatBufferBuilder builder, int cgcOffset) { builder.addOffset(7, cgcOffset, 0); }
  public static void addCgn(FlatBufferBuilder builder, int cgnOffset) { builder.addOffset(8, cgnOffset, 0); }
  public static void addApplicableNotes(FlatBufferBuilder builder, int applicableNotesOffset) { builder.addOffset(9, applicableNotesOffset, 0); }
  public static void addOnItin(FlatBufferBuilder builder, int onItin) { builder.addInt(10, onItin, 0); }
  public static void addOnIcao(FlatBufferBuilder builder, int onIcaoOffset) { builder.addOffset(11, onIcaoOffset, 0); }
  public static void addOffItin(FlatBufferBuilder builder, int offItin) { builder.addInt(12, offItin, 0); }
  public static void addOffIcao(FlatBufferBuilder builder, int offIcaoOffset) { builder.addOffset(13, offIcaoOffset, 0); }
  public static void addPlanned(FlatBufferBuilder builder, int plannedOffset) { builder.addOffset(14, plannedOffset, 0); }
  public static int endAirTransportMissionHazMat_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirTransportMissionHazMat_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRT"); }
  public static void finishSizePrefixedAirTransportMissionHazMat_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirTransportMissionHazMat_Full get(int j) { return get(new AirTransportMissionHazMat_Full(), j); }
    public AirTransportMissionHazMat_Full get(AirTransportMissionHazMat_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

