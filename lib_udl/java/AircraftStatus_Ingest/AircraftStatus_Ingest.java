// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Aircraft readiness and status data. Contains the dynamic data associated with the specific aircraft status, either in-flight or on-ground, including remaining fuel, mission readiness, and inventory, etc.
 */
@SuppressWarnings("unused")
public final class AircraftStatus_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AircraftStatus_Ingest getRootAsAircraftStatus_Ingest(ByteBuffer _bb) { return getRootAsAircraftStatus_Ingest(_bb, new AircraftStatus_Ingest()); }
  public static AircraftStatus_Ingest getRootAsAircraftStatus_Ingest(ByteBuffer _bb, AircraftStatus_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AircraftStatus_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AircraftStatus_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the aircraft.
   * Example: /// Example: 29232269-e4c2-45c9-aa21-039a33209340
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idAircraft() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAircraftAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idAircraftInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Alternate Aircraft Identifier provided by source.
   * Example: /// Example: ORIG-AIRCRAFT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String altAircraftId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altAircraftIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer altAircraftIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The current readiness state of the aircraft (e.g. AIRBORNE, ALERTCOCKED, AVAILABLE, BATTLESTATION, RUNWAY ALERT, SUITUP).
   * Example: /// Example: AVAILABLE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String currentState() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer currentStateAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer currentStateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * If not airborne, the unique identifier of the installation currently hosting the aircraft.
   * Example: /// Example: b89430e3-97d9-408c-9c89-fd3840c4b84d
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAirfield() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAirfieldAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * US Air Force geographic location code of the airfield where the aircraft is located.
   * Example: /// Example: AJJY
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String geoLoc() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geoLocAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer geoLocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) code at which this aircraft was previously located.
   * Example: /// Example: EGLL
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String previousIcao() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer previousIcaoAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer previousIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) code at which this aircraft is currently located or has most recently departed, if airborne.
   * Example: /// Example: KCHS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String currentIcao() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer currentIcaoAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer currentIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) code of the next destination of this aircraft.
   * Example: /// Example: PHNL
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String nextIcao() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nextIcaoAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer nextIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Current flight phase (e.g. AIR REFUELING, GROUND, LANDING, etc.) of the aircraft.
   * Example: /// Example: Landing
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String flightPhase() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer flightPhaseAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer flightPhaseInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The turnaround start time, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String taStartTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer taStartTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer taStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The earliest time that turnaround of the aircraft may complete, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String earliestTaendTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer earliestTaendTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer earliestTaendTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The Operational Capability of the reported aircraft (ABLE, LOFUEL, UNABLE).
   * Example: /// Example: ABLE
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String missionReadiness() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionReadinessAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer missionReadinessInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The mass of fuel remaining on the aircraft, in kilograms.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int fuel() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Used in conjunction with the fuel field to indicate either burnable or offload fuel.
   * Example: /// Example: Burn
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String fuelFunction() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fuelFunctionAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer fuelFunctionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Flag indicating that the aircraft is capable of making at least one gun pass.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean gunCapable() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The type of gun rounds available (e.g. 7.62 MM, 20 MM, 25 MM, etc.).
   * Example: /// Example: 7.62 MM
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String gunRdsType() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gunRdsTypeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer gunRdsTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The lower bound of the estimated number of gun rounds available.
   * Example: /// Example: 150
   * Constraints: No constraints specified.
   */
  public int gunRdsMin() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The upper bound of the estimated number of gun rounds available.
   * Example: /// Example: 550
   * Constraints: No constraints specified.
   */
  public int gunRdsMax() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The status of the air-to-air weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
   * Example: /// Example: OPERATIONAL
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public byte airToAirStatus() { int o = __offset(44); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The status of the air-to-ground weapon release system (OPERATIONAL, NON-OPERATIONAL, OFF).
   * Example: /// Example: OPERATIONAL
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public byte airToGroundStatus() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Array of inventory item(s) for which estimate(s) are available (e.g. AIM-9 SIDEWINDER, AIM-120 AMRAAM, AIM-92 STINGER, CHAFF DECOY, FLARE TP 400, etc.).  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific/store type designations.  This array must be the same length as inventoryMin and inventoryMax.
   * Example: /// Example: ['AIM-9 SIDEWINDER', 'AIM-120 AMRAAM']
   * Constraints: No constraints specified.
   */
  public String inventory(int j) { int o = __offset(48); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int inventoryLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public StringVector inventoryVector() { return inventoryVector(new StringVector()); }
  public StringVector inventoryVector(StringVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the lower bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMax.
   * Example: /// Example: [1, 2]
   * Constraints: No constraints specified.
   */
  public String inventoryMin(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int inventoryMinLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector inventoryMinVector() { return inventoryMinVector(new StringVector()); }
  public StringVector inventoryMinVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the upper bound quantity for each of the inventory items. The values in this array must correspond to position index in the inventory array. This array must be the same length as inventory and inventoryMin.
   * Example: /// Example: [2, 2]
   * Constraints: No constraints specified.
   */
  public String inventoryMax(int j) { int o = __offset(52); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int inventoryMaxLength() { int o = __offset(52); return o != 0 ? __vector_len(o) : 0; }
  public StringVector inventoryMaxVector() { return inventoryMaxVector(new StringVector()); }
  public StringVector inventoryMaxVector(StringVector obj) { int o = __offset(52); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * List of unavailable systems that would normally be on this aircraft.
   * Example: /// Example: ['CMDS', 'AOC']
   * Constraints: No constraints specified.
   */
  public String unavailableSys(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int unavailableSysLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector unavailableSysVector() { return unavailableSysVector(new StringVector()); }
  public StringVector unavailableSysVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * List of additional operational systems on this aircraft beyond what is normally available.
   * Example: /// Example: ['ATOMS', 'TUDL', 'BLOS1']
   * Constraints: No constraints specified.
   */
  public String additionalSys(int j) { int o = __offset(56); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int additionalSysLength() { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; }
  public StringVector additionalSysVector() { return additionalSysVector(new StringVector()); }
  public StringVector additionalSysVector(StringVector obj) { int o = __offset(56); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional notes/comments concerning this aircraft status.
   * Example: /// Example: Some notes for aircraft A
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String notes() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Maintenance pacing remarks assocociated with this aircraft.
   * Example: /// Example: COM2 INOP
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String mxRemark() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mxRemarkAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer mxRemarkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * The maintenance status of the aircraft.
   * Example: /// Example: maintenance status
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String maintStatus() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer maintStatusAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer maintStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Indicates the maintenance discrepancy that drives the current maintenance status.
   * Example: /// Example: SCREW STUCK IN LEFT NLG TIRE
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String maintStatusDriver() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer maintStatusDriverAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer maintStatusDriverInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Indicates the priority of the maintenance effort.
   * Example: /// Example: 1
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String maintPriority() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer maintPriorityAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer maintPriorityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Aircraft alpha status code that indicates the aircraft maintenance status estimated by the pilot.
   * Example: /// Example: A2
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String alphaStatusCode() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer alphaStatusCodeAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer alphaStatusCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * The time of the last maintenance status update, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String maintStatusUpdate() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer maintStatusUpdateAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer maintStatusUpdateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Date when the military aircraft inspection was last performed, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-09-09T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String lastInspectionDate() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastInspectionDateAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer lastInspectionDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Military aircraft maintenance point of contact for this aircraft.
   * Example: /// Example: PSUP NIGHT SHIFT 800-555-4412
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String maintPoc() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer maintPocAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer maintPocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * The ground status of the aircraft (e.g. ALERT, CREW READY, ENGINE START, HANGAR, etc.).
   * Example: /// Example: ALERT
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String groundStatus() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer groundStatusAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer groundStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * The contamination status of the aircraft (e.g. CLEAR, CONTAMINATED, DECONTAMINATED, UNKNOWN, etc.).
   * Example: /// Example: CLEAR
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String contaminationStatus() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer contaminationStatusAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer contaminationStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * The state of the aircraft fuel status (e.g. DELIVERED, DUMPED, EMPTY, FULL, OTHER, REQUESTED, etc.).
   * Example: /// Example: DELIVERED
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String fuelStatus() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fuelStatusAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer fuelStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * The name or ID of the external user that updated this status.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String lastUpdatedBy() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastUpdatedByAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer lastUpdatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Estimated Time for Completion (ETIC) of an aircraft issue, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the course of action to resolve the issue will be determined.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String troubleshootEtic() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer troubleshootEticAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer troubleshootEticInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * The Expected Time in Commission (ETIC) for this aircraft, in ISO 8601 UTC format with millisecond precision. This is the estimated time when the issue will be resolved.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String etic() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eticAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer eticInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * The parking location of this aircraft.
   * Example: /// Example: B1
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String parkLocation() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer parkLocationAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer parkLocationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * The system that designated the parking location (e.g. EMOC, GDSS, PEX, etc.).
   * Example: /// Example: GDSS
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String parkLocationSystem() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer parkLocationSystemAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer parkLocationSystemInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * Unique identifier of the Point of Interest (POI) record related to this aircraft status. This will generally represent the location of an aircraft on the ground.
   * Example: /// Example: 0e52f081-a2e3-4b73-b822-88b882232691
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idPoi() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idPoiAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer idPoiInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(104); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }

  public static int createAircraftStatus_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idAircraftOffset,
      int altAircraftIdOffset,
      int currentStateOffset,
      int idAirfieldOffset,
      int geoLocOffset,
      int previousIcaoOffset,
      int currentIcaoOffset,
      int nextIcaoOffset,
      int flightPhaseOffset,
      int taStartTimeOffset,
      int earliestTaendTimeOffset,
      int missionReadinessOffset,
      int fuel,
      int fuelFunctionOffset,
      boolean gunCapable,
      int gunRdsTypeOffset,
      int gunRdsMin,
      int gunRdsMax,
      byte airToAirStatus,
      byte airToGroundStatus,
      int inventoryOffset,
      int inventoryMinOffset,
      int inventoryMaxOffset,
      int unavailableSysOffset,
      int additionalSysOffset,
      int notesOffset,
      int mxRemarkOffset,
      int maintStatusOffset,
      int maintStatusDriverOffset,
      int maintPriorityOffset,
      int alphaStatusCodeOffset,
      int maintStatusUpdateOffset,
      int lastInspectionDateOffset,
      int maintPocOffset,
      int groundStatusOffset,
      int contaminationStatusOffset,
      int fuelStatusOffset,
      int lastUpdatedByOffset,
      int troubleshootEticOffset,
      int eticOffset,
      int parkLocationOffset,
      int parkLocationSystemOffset,
      int idPoiOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(52);
    AircraftStatus_Ingest.addOrigNetwork(builder, origNetworkOffset);
    AircraftStatus_Ingest.addOrigin(builder, originOffset);
    AircraftStatus_Ingest.addSource(builder, sourceOffset);
    AircraftStatus_Ingest.addSourceDl(builder, sourceDlOffset);
    AircraftStatus_Ingest.addCreatedBy(builder, createdByOffset);
    AircraftStatus_Ingest.addCreatedAt(builder, createdAtOffset);
    AircraftStatus_Ingest.addIdPoi(builder, idPoiOffset);
    AircraftStatus_Ingest.addParkLocationSystem(builder, parkLocationSystemOffset);
    AircraftStatus_Ingest.addParkLocation(builder, parkLocationOffset);
    AircraftStatus_Ingest.addEtic(builder, eticOffset);
    AircraftStatus_Ingest.addTroubleshootEtic(builder, troubleshootEticOffset);
    AircraftStatus_Ingest.addLastUpdatedBy(builder, lastUpdatedByOffset);
    AircraftStatus_Ingest.addFuelStatus(builder, fuelStatusOffset);
    AircraftStatus_Ingest.addContaminationStatus(builder, contaminationStatusOffset);
    AircraftStatus_Ingest.addGroundStatus(builder, groundStatusOffset);
    AircraftStatus_Ingest.addMaintPoc(builder, maintPocOffset);
    AircraftStatus_Ingest.addLastInspectionDate(builder, lastInspectionDateOffset);
    AircraftStatus_Ingest.addMaintStatusUpdate(builder, maintStatusUpdateOffset);
    AircraftStatus_Ingest.addAlphaStatusCode(builder, alphaStatusCodeOffset);
    AircraftStatus_Ingest.addMaintPriority(builder, maintPriorityOffset);
    AircraftStatus_Ingest.addMaintStatusDriver(builder, maintStatusDriverOffset);
    AircraftStatus_Ingest.addMaintStatus(builder, maintStatusOffset);
    AircraftStatus_Ingest.addMxRemark(builder, mxRemarkOffset);
    AircraftStatus_Ingest.addNotes(builder, notesOffset);
    AircraftStatus_Ingest.addAdditionalSys(builder, additionalSysOffset);
    AircraftStatus_Ingest.addUnavailableSys(builder, unavailableSysOffset);
    AircraftStatus_Ingest.addInventoryMax(builder, inventoryMaxOffset);
    AircraftStatus_Ingest.addInventoryMin(builder, inventoryMinOffset);
    AircraftStatus_Ingest.addInventory(builder, inventoryOffset);
    AircraftStatus_Ingest.addGunRdsMax(builder, gunRdsMax);
    AircraftStatus_Ingest.addGunRdsMin(builder, gunRdsMin);
    AircraftStatus_Ingest.addGunRdsType(builder, gunRdsTypeOffset);
    AircraftStatus_Ingest.addFuelFunction(builder, fuelFunctionOffset);
    AircraftStatus_Ingest.addFuel(builder, fuel);
    AircraftStatus_Ingest.addMissionReadiness(builder, missionReadinessOffset);
    AircraftStatus_Ingest.addEarliestTaendTime(builder, earliestTaendTimeOffset);
    AircraftStatus_Ingest.addTaStartTime(builder, taStartTimeOffset);
    AircraftStatus_Ingest.addFlightPhase(builder, flightPhaseOffset);
    AircraftStatus_Ingest.addNextIcao(builder, nextIcaoOffset);
    AircraftStatus_Ingest.addCurrentIcao(builder, currentIcaoOffset);
    AircraftStatus_Ingest.addPreviousIcao(builder, previousIcaoOffset);
    AircraftStatus_Ingest.addGeoLoc(builder, geoLocOffset);
    AircraftStatus_Ingest.addIdAirfield(builder, idAirfieldOffset);
    AircraftStatus_Ingest.addCurrentState(builder, currentStateOffset);
    AircraftStatus_Ingest.addAltAircraftId(builder, altAircraftIdOffset);
    AircraftStatus_Ingest.addIdAircraft(builder, idAircraftOffset);
    AircraftStatus_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    AircraftStatus_Ingest.addId(builder, idOffset);
    AircraftStatus_Ingest.addDataMode(builder, dataMode);
    AircraftStatus_Ingest.addAirToGroundStatus(builder, airToGroundStatus);
    AircraftStatus_Ingest.addAirToAirStatus(builder, airToAirStatus);
    AircraftStatus_Ingest.addGunCapable(builder, gunCapable);
    return AircraftStatus_Ingest.endAircraftStatus_Ingest(builder);
  }

  public static void startAircraftStatus_Ingest(FlatBufferBuilder builder) { builder.startTable(52); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdAircraft(FlatBufferBuilder builder, int idAircraftOffset) { builder.addOffset(2, idAircraftOffset, 0); }
  public static void addAltAircraftId(FlatBufferBuilder builder, int altAircraftIdOffset) { builder.addOffset(3, altAircraftIdOffset, 0); }
  public static void addCurrentState(FlatBufferBuilder builder, int currentStateOffset) { builder.addOffset(4, currentStateOffset, 0); }
  public static void addIdAirfield(FlatBufferBuilder builder, int idAirfieldOffset) { builder.addOffset(5, idAirfieldOffset, 0); }
  public static void addGeoLoc(FlatBufferBuilder builder, int geoLocOffset) { builder.addOffset(6, geoLocOffset, 0); }
  public static void addPreviousIcao(FlatBufferBuilder builder, int previousIcaoOffset) { builder.addOffset(7, previousIcaoOffset, 0); }
  public static void addCurrentIcao(FlatBufferBuilder builder, int currentIcaoOffset) { builder.addOffset(8, currentIcaoOffset, 0); }
  public static void addNextIcao(FlatBufferBuilder builder, int nextIcaoOffset) { builder.addOffset(9, nextIcaoOffset, 0); }
  public static void addFlightPhase(FlatBufferBuilder builder, int flightPhaseOffset) { builder.addOffset(10, flightPhaseOffset, 0); }
  public static void addTaStartTime(FlatBufferBuilder builder, int taStartTimeOffset) { builder.addOffset(11, taStartTimeOffset, 0); }
  public static void addEarliestTaendTime(FlatBufferBuilder builder, int earliestTaendTimeOffset) { builder.addOffset(12, earliestTaendTimeOffset, 0); }
  public static void addMissionReadiness(FlatBufferBuilder builder, int missionReadinessOffset) { builder.addOffset(13, missionReadinessOffset, 0); }
  public static void addFuel(FlatBufferBuilder builder, int fuel) { builder.addInt(14, fuel, 0); }
  public static void addFuelFunction(FlatBufferBuilder builder, int fuelFunctionOffset) { builder.addOffset(15, fuelFunctionOffset, 0); }
  public static void addGunCapable(FlatBufferBuilder builder, boolean gunCapable) { builder.addBoolean(16, gunCapable, false); }
  public static void addGunRdsType(FlatBufferBuilder builder, int gunRdsTypeOffset) { builder.addOffset(17, gunRdsTypeOffset, 0); }
  public static void addGunRdsMin(FlatBufferBuilder builder, int gunRdsMin) { builder.addInt(18, gunRdsMin, 0); }
  public static void addGunRdsMax(FlatBufferBuilder builder, int gunRdsMax) { builder.addInt(19, gunRdsMax, 0); }
  public static void addAirToAirStatus(FlatBufferBuilder builder, byte airToAirStatus) { builder.addByte(20, airToAirStatus, 0); }
  public static void addAirToGroundStatus(FlatBufferBuilder builder, byte airToGroundStatus) { builder.addByte(21, airToGroundStatus, 0); }
  public static void addInventory(FlatBufferBuilder builder, int inventoryOffset) { builder.addOffset(22, inventoryOffset, 0); }
  public static int createInventoryVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInventoryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInventoryMin(FlatBufferBuilder builder, int inventoryMinOffset) { builder.addOffset(23, inventoryMinOffset, 0); }
  public static int createInventoryMinVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInventoryMinVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInventoryMax(FlatBufferBuilder builder, int inventoryMaxOffset) { builder.addOffset(24, inventoryMaxOffset, 0); }
  public static int createInventoryMaxVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInventoryMaxVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUnavailableSys(FlatBufferBuilder builder, int unavailableSysOffset) { builder.addOffset(25, unavailableSysOffset, 0); }
  public static int createUnavailableSysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUnavailableSysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAdditionalSys(FlatBufferBuilder builder, int additionalSysOffset) { builder.addOffset(26, additionalSysOffset, 0); }
  public static int createAdditionalSysVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAdditionalSysVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(27, notesOffset, 0); }
  public static void addMxRemark(FlatBufferBuilder builder, int mxRemarkOffset) { builder.addOffset(28, mxRemarkOffset, 0); }
  public static void addMaintStatus(FlatBufferBuilder builder, int maintStatusOffset) { builder.addOffset(29, maintStatusOffset, 0); }
  public static void addMaintStatusDriver(FlatBufferBuilder builder, int maintStatusDriverOffset) { builder.addOffset(30, maintStatusDriverOffset, 0); }
  public static void addMaintPriority(FlatBufferBuilder builder, int maintPriorityOffset) { builder.addOffset(31, maintPriorityOffset, 0); }
  public static void addAlphaStatusCode(FlatBufferBuilder builder, int alphaStatusCodeOffset) { builder.addOffset(32, alphaStatusCodeOffset, 0); }
  public static void addMaintStatusUpdate(FlatBufferBuilder builder, int maintStatusUpdateOffset) { builder.addOffset(33, maintStatusUpdateOffset, 0); }
  public static void addLastInspectionDate(FlatBufferBuilder builder, int lastInspectionDateOffset) { builder.addOffset(34, lastInspectionDateOffset, 0); }
  public static void addMaintPoc(FlatBufferBuilder builder, int maintPocOffset) { builder.addOffset(35, maintPocOffset, 0); }
  public static void addGroundStatus(FlatBufferBuilder builder, int groundStatusOffset) { builder.addOffset(36, groundStatusOffset, 0); }
  public static void addContaminationStatus(FlatBufferBuilder builder, int contaminationStatusOffset) { builder.addOffset(37, contaminationStatusOffset, 0); }
  public static void addFuelStatus(FlatBufferBuilder builder, int fuelStatusOffset) { builder.addOffset(38, fuelStatusOffset, 0); }
  public static void addLastUpdatedBy(FlatBufferBuilder builder, int lastUpdatedByOffset) { builder.addOffset(39, lastUpdatedByOffset, 0); }
  public static void addTroubleshootEtic(FlatBufferBuilder builder, int troubleshootEticOffset) { builder.addOffset(40, troubleshootEticOffset, 0); }
  public static void addEtic(FlatBufferBuilder builder, int eticOffset) { builder.addOffset(41, eticOffset, 0); }
  public static void addParkLocation(FlatBufferBuilder builder, int parkLocationOffset) { builder.addOffset(42, parkLocationOffset, 0); }
  public static void addParkLocationSystem(FlatBufferBuilder builder, int parkLocationSystemOffset) { builder.addOffset(43, parkLocationSystemOffset, 0); }
  public static void addIdPoi(FlatBufferBuilder builder, int idPoiOffset) { builder.addOffset(44, idPoiOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(45, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(46, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(47, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(48, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(49, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(50, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(51, origNetworkOffset, 0); }
  public static int endAircraftStatus_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraftStatus_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraftStatus_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AircraftStatus_Ingest get(int j) { return get(new AircraftStatus_Ingest(), j); }
    public AircraftStatus_Ingest get(AircraftStatus_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

