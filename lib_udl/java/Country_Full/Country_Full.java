// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A Country may represent countries, multi-national consortiums, and international organizations.
 */
@SuppressWarnings("unused")
public final class Country_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Country_Full getRootAsCountry_Full(ByteBuffer _bb) { return getRootAsCountry_Full(_bb, new Country_Full()); }
  public static Country_Full getRootAsCountry_Full(ByteBuffer _bb, Country_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Country_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "COUN"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Country_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The country code. Optimally, this value is the ISO 3166 Alpha-2-two-character country code, however it can represent various consortiums that do not appear in the ISO document.
   * Example: /// Example: US
   * Constraints: Minimum length = 1, Maximum length = 4
   */
  public String code() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer codeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer codeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Country name.
   * Example: /// Example: UNITED STATES
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Federal Information Processing Standard (FIPS) two-character country code. This field is used when the country code for FIPS differs from the country code for ISO-3166 value. For example, the ISO-3166 Alpha-2-country code for Vanuatu is VU, whereas Vanuatu's FIPS equivalent country code is NH.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String fipsCode() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fipsCodeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer fipsCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * ISO 3166 Alpha-3 country code. This is a three-character code that represents a country name, which may be more closely related to the country name than its corresponding Alpha-2 code.
   * Example: /// Example: USA
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String iso3Code() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iso3CodeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer iso3CodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * 3 Digit or other alternate country code.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String codeAlt() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer codeAltAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer codeAltInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createCountry_Full(FlatBufferBuilder builder,
      int codeOffset,
      int nameOffset,
      int fipsCodeOffset,
      int iso3CodeOffset,
      int codeAltOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(12);
    Country_Full.addOrigNetwork(builder, origNetworkOffset);
    Country_Full.addSource(builder, sourceOffset);
    Country_Full.addUpdatedBy(builder, updatedByOffset);
    Country_Full.addUpdatedAt(builder, updatedAtOffset);
    Country_Full.addCreatedBy(builder, createdByOffset);
    Country_Full.addCreatedAt(builder, createdAtOffset);
    Country_Full.addCodeAlt(builder, codeAltOffset);
    Country_Full.addIso3Code(builder, iso3CodeOffset);
    Country_Full.addFipsCode(builder, fipsCodeOffset);
    Country_Full.addName(builder, nameOffset);
    Country_Full.addCode(builder, codeOffset);
    Country_Full.addDataMode(builder, dataMode);
    return Country_Full.endCountry_Full(builder);
  }

  public static void startCountry_Full(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addCode(FlatBufferBuilder builder, int codeOffset) { builder.addOffset(0, codeOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addFipsCode(FlatBufferBuilder builder, int fipsCodeOffset) { builder.addOffset(2, fipsCodeOffset, 0); }
  public static void addIso3Code(FlatBufferBuilder builder, int iso3CodeOffset) { builder.addOffset(3, iso3CodeOffset, 0); }
  public static void addCodeAlt(FlatBufferBuilder builder, int codeAltOffset) { builder.addOffset(4, codeAltOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(5, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(6, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(7, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(8, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(9, sourceOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(10, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(11, dataMode, 0); }
  public static int endCountry_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishCountry_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "COUN"); }
  public static void finishSizePrefixedCountry_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "COUN"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Country_Full get(int j) { return get(new Country_Full(), j); }
    public Country_Full get(Country_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

