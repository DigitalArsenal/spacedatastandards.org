// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
 */
@SuppressWarnings("unused")
public final class SkyImagery_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SkyImagery_Full getRootAsSkyImagery_Full(ByteBuffer _bb) { return getRootAsSkyImagery_Full(_bb, new SkyImagery_Full()); }
  public static SkyImagery_Full getRootAsSkyImagery_Full(ByteBuffer _bb, SkyImagery_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SkyImagery_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SKYI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SkyImagery_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SKYIMAGERY-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Optional identifier of the target on-orbit object, if correlated.
   * Example: /// Example: 44920
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer onOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: X15-23452
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional identifier of the AttitudeSet data record describing the orientation of an object body.
   * Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAttitudeSet() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAttitudeSetAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idAttitudeSetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: 420
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Catalog number of the target on-orbit object.
   * Example: /// Example: 25544
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: origSensorId
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: -33.283048
   * Constraints: No constraints specified.
   */
  public double senlat() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 149.372549
   * Constraints: No constraints specified.
   */
  public double senlon() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
   * Example: /// Example: 14.483619321
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
   * Example: /// Example: 14.52
   * Constraints: No constraints specified.
   */
  public double senx() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
   * Example: /// Example: 32.41
   * Constraints: No constraints specified.
   */
  public double seny() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
   * Example: /// Example: 376.12
   * Constraints: No constraints specified.
   */
  public double senz() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
   * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
   * Constraints: No constraints specified.
   */
  public String senQuat(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int senQuatLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector senQuatVector() { return senQuatVector(new StringVector()); }
  public StringVector senQuatVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
   * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
   * Constraints: No constraints specified.
   */
  public String senQuatDot(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int senQuatDotLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector senQuatDotVector() { return senQuatDotVector(new StringVector()); }
  public StringVector senQuatDotVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
   * Example: /// Example: imageType
   * Constraints: Minimum length = 1, Maximum length = 24
   */
  public String imageType() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer imageTypeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer imageTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String expStartTime() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer expStartTimeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer expStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * End time of the exposure, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String expEndTime() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer expEndTimeAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer expEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * String that uniquely identifies the data source.
   * Example: /// Example: imageSourceInfo
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String imageSourceInfo() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer imageSourceInfoAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer imageSourceInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The telescope pointing azimuth, in degrees, at the exposure start epoch.
   * Example: /// Example: 146.321
   * Constraints: No constraints specified.
   */
  public double topLeftStartAz() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The telescope pointing elevation, in degrees, at the exposure start epoch.
   * Example: /// Example: 146.321
   * Constraints: No constraints specified.
   */
  public double topLeftStartEl() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The telescope pointing azimuth, in degrees, at the exposure stop epoch.
   * Example: /// Example: 3.7
   * Constraints: No constraints specified.
   */
  public double topLeftStopAz() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The telescope pointing elevation, in degrees, at the exposure stop epoch.
   * Example: /// Example: 34.233
   * Constraints: No constraints specified.
   */
  public double topLeftStopEl() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The user-defined set ID of a sequence of images.
   * Example: /// Example: imageSetId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String imageSetId() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer imageSetIdAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer imageSetIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * The number of images in an image set.
   * Example: /// Example: 9
   * Constraints: No constraints specified.
   */
  public int imageSetLength() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The sequence ID of an image within an image set.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int sequenceId() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Field Of View frame width, in degrees.
   * Example: /// Example: 21.23
   * Constraints: No constraints specified.
   */
  public double frameFovwidth() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Field Of View frame height, in degrees.
   * Example: /// Example: 21.23
   * Constraints: No constraints specified.
   */
  public double frameFovheight() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Field Of View pixel width, in degrees.
   * Example: /// Example: 321.123
   * Constraints: No constraints specified.
   */
  public double pixelFovwidth() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Field Of View pixel height, in degrees.
   * Example: /// Example: 321.123
   * Constraints: No constraints specified.
   */
  public double pixelFovheight() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Frame width of the image, in number of pixels.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int frameWidthPixels() { int o = __offset(68); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Frame height of the image, in number of pixels.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int frameHeightPixels() { int o = __offset(70); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Bit depth of the image, in number of pixels.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int pixelBitDepth() { int o = __offset(72); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Reference to an annotation document associated with this image.
   * Example: /// Example: annotationKey
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String annotationKey() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer annotationKeyAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer annotationKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Reference to a calibration document associated with this image.
   * Example: /// Example: calibrationKey
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String calibrationKey() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer calibrationKeyAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer calibrationKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Name of the uploaded image file.
   * Example: /// Example: filename.jpg
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String filename() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filenameAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer filenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Size of the image file, in bytes.
   * Example: /// Example: 371945
   * Constraints: No constraints specified.
   */
  public long filesize() { int o = __offset(80); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * MD5 value of the file. The ingest/create operation will automatically generate the value.
   * Example: /// Example: checksumValue
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String checksumValue() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer checksumValueAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer checksumValueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(86); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(86); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(86); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Optional name/description associated with this image.
   * Example: /// Example: description
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String description() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(98); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Collection of linked EOObservations.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String eoObservations(int j) { int o = __offset(104); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int eoObservationsLength() { int o = __offset(104); return o != 0 ? __vector_len(o) : 0; }
  public StringVector eoObservationsVector() { return eoObservationsVector(new StringVector()); }
  public StringVector eoObservationsVector(StringVector obj) { int o = __offset(104); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createSkyImagery_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int onOrbitOffset,
      int origObjectIdOffset,
      int idAttitudeSetOffset,
      int idSensorOffset,
      int satNo,
      int origSensorIdOffset,
      double senlat,
      double senlon,
      double senalt,
      double senx,
      double seny,
      double senz,
      int senQuatOffset,
      int senQuatDotOffset,
      int imageTypeOffset,
      int expStartTimeOffset,
      int expEndTimeOffset,
      int imageSourceInfoOffset,
      double topLeftStartAz,
      double topLeftStartEl,
      double topLeftStopAz,
      double topLeftStopEl,
      int imageSetIdOffset,
      int imageSetLength,
      int sequenceId,
      double frameFovwidth,
      double frameFovheight,
      double pixelFovwidth,
      double pixelFovheight,
      int frameWidthPixels,
      int frameHeightPixels,
      int pixelBitDepth,
      int annotationKeyOffset,
      int calibrationKeyOffset,
      int filenameOffset,
      long filesize,
      int checksumValueOffset,
      int transactionIdOffset,
      int tagsOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      int sourceDlOffset,
      int descriptionOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int eoObservationsOffset) {
    builder.startTable(51);
    SkyImagery_Full.addFilesize(builder, filesize);
    SkyImagery_Full.addPixelFovheight(builder, pixelFovheight);
    SkyImagery_Full.addPixelFovwidth(builder, pixelFovwidth);
    SkyImagery_Full.addFrameFovheight(builder, frameFovheight);
    SkyImagery_Full.addFrameFovwidth(builder, frameFovwidth);
    SkyImagery_Full.addTopLeftStopEl(builder, topLeftStopEl);
    SkyImagery_Full.addTopLeftStopAz(builder, topLeftStopAz);
    SkyImagery_Full.addTopLeftStartEl(builder, topLeftStartEl);
    SkyImagery_Full.addTopLeftStartAz(builder, topLeftStartAz);
    SkyImagery_Full.addSenz(builder, senz);
    SkyImagery_Full.addSeny(builder, seny);
    SkyImagery_Full.addSenx(builder, senx);
    SkyImagery_Full.addSenalt(builder, senalt);
    SkyImagery_Full.addSenlon(builder, senlon);
    SkyImagery_Full.addSenlat(builder, senlat);
    SkyImagery_Full.addEoObservations(builder, eoObservationsOffset);
    SkyImagery_Full.addCreatedBy(builder, createdByOffset);
    SkyImagery_Full.addCreatedAt(builder, createdAtOffset);
    SkyImagery_Full.addDescription(builder, descriptionOffset);
    SkyImagery_Full.addSourceDl(builder, sourceDlOffset);
    SkyImagery_Full.addOrigNetwork(builder, origNetworkOffset);
    SkyImagery_Full.addOrigin(builder, originOffset);
    SkyImagery_Full.addSource(builder, sourceOffset);
    SkyImagery_Full.addTags(builder, tagsOffset);
    SkyImagery_Full.addTransactionId(builder, transactionIdOffset);
    SkyImagery_Full.addChecksumValue(builder, checksumValueOffset);
    SkyImagery_Full.addFilename(builder, filenameOffset);
    SkyImagery_Full.addCalibrationKey(builder, calibrationKeyOffset);
    SkyImagery_Full.addAnnotationKey(builder, annotationKeyOffset);
    SkyImagery_Full.addPixelBitDepth(builder, pixelBitDepth);
    SkyImagery_Full.addFrameHeightPixels(builder, frameHeightPixels);
    SkyImagery_Full.addFrameWidthPixels(builder, frameWidthPixels);
    SkyImagery_Full.addSequenceId(builder, sequenceId);
    SkyImagery_Full.addImageSetLength(builder, imageSetLength);
    SkyImagery_Full.addImageSetId(builder, imageSetIdOffset);
    SkyImagery_Full.addImageSourceInfo(builder, imageSourceInfoOffset);
    SkyImagery_Full.addExpEndTime(builder, expEndTimeOffset);
    SkyImagery_Full.addExpStartTime(builder, expStartTimeOffset);
    SkyImagery_Full.addImageType(builder, imageTypeOffset);
    SkyImagery_Full.addSenQuatDot(builder, senQuatDotOffset);
    SkyImagery_Full.addSenQuat(builder, senQuatOffset);
    SkyImagery_Full.addOrigSensorId(builder, origSensorIdOffset);
    SkyImagery_Full.addSatNo(builder, satNo);
    SkyImagery_Full.addIdSensor(builder, idSensorOffset);
    SkyImagery_Full.addIdAttitudeSet(builder, idAttitudeSetOffset);
    SkyImagery_Full.addOrigObjectId(builder, origObjectIdOffset);
    SkyImagery_Full.addOnOrbit(builder, onOrbitOffset);
    SkyImagery_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    SkyImagery_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SkyImagery_Full.addId(builder, idOffset);
    SkyImagery_Full.addDataMode(builder, dataMode);
    return SkyImagery_Full.endSkyImagery_Full(builder);
  }

  public static void startSkyImagery_Full(FlatBufferBuilder builder) { builder.startTable(51); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addOnOrbit(FlatBufferBuilder builder, int onOrbitOffset) { builder.addOffset(3, onOrbitOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(4, origObjectIdOffset, 0); }
  public static void addIdAttitudeSet(FlatBufferBuilder builder, int idAttitudeSetOffset) { builder.addOffset(5, idAttitudeSetOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(6, idSensorOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(7, satNo, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(8, origSensorIdOffset, 0); }
  public static void addSenlat(FlatBufferBuilder builder, double senlat) { builder.addDouble(9, senlat, 0.0); }
  public static void addSenlon(FlatBufferBuilder builder, double senlon) { builder.addDouble(10, senlon, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(11, senalt, 0.0); }
  public static void addSenx(FlatBufferBuilder builder, double senx) { builder.addDouble(12, senx, 0.0); }
  public static void addSeny(FlatBufferBuilder builder, double seny) { builder.addDouble(13, seny, 0.0); }
  public static void addSenz(FlatBufferBuilder builder, double senz) { builder.addDouble(14, senz, 0.0); }
  public static void addSenQuat(FlatBufferBuilder builder, int senQuatOffset) { builder.addOffset(15, senQuatOffset, 0); }
  public static int createSenQuatVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSenQuatVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSenQuatDot(FlatBufferBuilder builder, int senQuatDotOffset) { builder.addOffset(16, senQuatDotOffset, 0); }
  public static int createSenQuatDotVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSenQuatDotVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addImageType(FlatBufferBuilder builder, int imageTypeOffset) { builder.addOffset(17, imageTypeOffset, 0); }
  public static void addExpStartTime(FlatBufferBuilder builder, int expStartTimeOffset) { builder.addOffset(18, expStartTimeOffset, 0); }
  public static void addExpEndTime(FlatBufferBuilder builder, int expEndTimeOffset) { builder.addOffset(19, expEndTimeOffset, 0); }
  public static void addImageSourceInfo(FlatBufferBuilder builder, int imageSourceInfoOffset) { builder.addOffset(20, imageSourceInfoOffset, 0); }
  public static void addTopLeftStartAz(FlatBufferBuilder builder, double topLeftStartAz) { builder.addDouble(21, topLeftStartAz, 0.0); }
  public static void addTopLeftStartEl(FlatBufferBuilder builder, double topLeftStartEl) { builder.addDouble(22, topLeftStartEl, 0.0); }
  public static void addTopLeftStopAz(FlatBufferBuilder builder, double topLeftStopAz) { builder.addDouble(23, topLeftStopAz, 0.0); }
  public static void addTopLeftStopEl(FlatBufferBuilder builder, double topLeftStopEl) { builder.addDouble(24, topLeftStopEl, 0.0); }
  public static void addImageSetId(FlatBufferBuilder builder, int imageSetIdOffset) { builder.addOffset(25, imageSetIdOffset, 0); }
  public static void addImageSetLength(FlatBufferBuilder builder, int imageSetLength) { builder.addInt(26, imageSetLength, 0); }
  public static void addSequenceId(FlatBufferBuilder builder, int sequenceId) { builder.addInt(27, sequenceId, 0); }
  public static void addFrameFovwidth(FlatBufferBuilder builder, double frameFovwidth) { builder.addDouble(28, frameFovwidth, 0.0); }
  public static void addFrameFovheight(FlatBufferBuilder builder, double frameFovheight) { builder.addDouble(29, frameFovheight, 0.0); }
  public static void addPixelFovwidth(FlatBufferBuilder builder, double pixelFovwidth) { builder.addDouble(30, pixelFovwidth, 0.0); }
  public static void addPixelFovheight(FlatBufferBuilder builder, double pixelFovheight) { builder.addDouble(31, pixelFovheight, 0.0); }
  public static void addFrameWidthPixels(FlatBufferBuilder builder, int frameWidthPixels) { builder.addInt(32, frameWidthPixels, 0); }
  public static void addFrameHeightPixels(FlatBufferBuilder builder, int frameHeightPixels) { builder.addInt(33, frameHeightPixels, 0); }
  public static void addPixelBitDepth(FlatBufferBuilder builder, int pixelBitDepth) { builder.addInt(34, pixelBitDepth, 0); }
  public static void addAnnotationKey(FlatBufferBuilder builder, int annotationKeyOffset) { builder.addOffset(35, annotationKeyOffset, 0); }
  public static void addCalibrationKey(FlatBufferBuilder builder, int calibrationKeyOffset) { builder.addOffset(36, calibrationKeyOffset, 0); }
  public static void addFilename(FlatBufferBuilder builder, int filenameOffset) { builder.addOffset(37, filenameOffset, 0); }
  public static void addFilesize(FlatBufferBuilder builder, long filesize) { builder.addLong(38, filesize, 0L); }
  public static void addChecksumValue(FlatBufferBuilder builder, int checksumValueOffset) { builder.addOffset(39, checksumValueOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(40, transactionIdOffset, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(41, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(42, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(43, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(44, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(45, sourceDlOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(46, descriptionOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(47, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(48, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(49, createdByOffset, 0); }
  public static void addEoObservations(FlatBufferBuilder builder, int eoObservationsOffset) { builder.addOffset(50, eoObservationsOffset, 0); }
  public static int createEoObservationsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEoObservationsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endSkyImagery_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSkyImagery_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SKYI"); }
  public static void finishSizePrefixedSkyImagery_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SKYI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SkyImagery_Full get(int j) { return get(new SkyImagery_Full(), j); }
    public SkyImagery_Full get(SkyImagery_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

