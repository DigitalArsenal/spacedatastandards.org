// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
 */
@SuppressWarnings("unused")
public final class AircraftSortie_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AircraftSortie_Full getRootAsAircraftSortie_Full(ByteBuffer _bb) { return getRootAsAircraftSortie_Full(_bb, new AircraftSortie_Full()); }
  public static AircraftSortie_Full getRootAsAircraftSortie_Full(ByteBuffer _bb, AircraftSortie_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AircraftSortie_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AircraftSortie_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: AIRCRAFTSORTIE-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The sortie identifier provided by the originating source.
   * Example: /// Example: A0640
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origSortieId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSortieIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer origSortieIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the aircraft.
   * Example: /// Example: REF-AIRCRAFT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAircraft() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAircraftAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idAircraftInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Alternate Aircraft Identifier provided by source.
   * Example: /// Example: ALT-AIRCRAFT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String aircraftAltId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftAltIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer aircraftAltIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The tail number of the aircraft assigned to this sortie.
   * Example: /// Example: Tail_1
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tailNumber() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tailNumberAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer tailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The aircraft Model Design Series designation assigned to this sortie.
   * Example: /// Example: C017A
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String aircraftMds() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer aircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
   * Example: /// Example: AE123C
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String aircraftAdsb() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftAdsbAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer aircraftAdsbInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
   * Example: /// Example: 2021-01-01
   * Constraints: No constraints specified.
   */
  public String sortieDate() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sortieDateAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer sortieDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The external system line number of this sortie.
   * Example: /// Example: 99
   * Constraints: No constraints specified.
   */
  public int lineNumber() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The unique identifier of the mission to which this sortie is assigned.
   * Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idMission() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idMissionAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer idMissionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The mission ID according to the source system.
   * Example: /// Example: ABLE
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String missionId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer missionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The Air Mobility Command (AMC) mission number of the sortie.
   * Example: /// Example: AJM512571333
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String amcMsnNum() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amcMsnNumAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer amcMsnNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The type of mission (e.g. SAAM, CHNL, etc.).
   * Example: /// Example: SAAM
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String amcMsnType() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amcMsnTypeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer amcMsnTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The call sign assigned to the aircraft on this sortie.
   * Example: /// Example: BAKER
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String callSign() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Joint Chiefs of Staff priority of this sortie.
   * Example: /// Example: 1A3
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String jcsPriority() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jcsPriorityAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer jcsPriorityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The planned primary Standard Conventional Load of the aircraft for this sortie.
   * Example: /// Example: ABC
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String primaryScl() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer primarySclAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer primarySclInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The planned secondary Standard Conventional Load of the aircraft for this sortie.
   * Example: /// Example: ABC
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String secondaryScl() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer secondarySclAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer secondarySclInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Aircraft configuration required for the mission.
   * Example: /// Example: C-1
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String reqConfig() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reqConfigAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer reqConfigInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
   * Example: /// Example: C-1
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String cargoConfig() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cargoConfigAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer cargoConfigInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Mass of fuel required for this leg of the sortie, in kilograms.
   * Example: /// Example: 20000.1
   * Constraints: No constraints specified.
   */
  public double fuelReq() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Liquid oxygen required on the aircraft for the crew compartment, in liters.
   * Example: /// Example: 12.3
   * Constraints: No constraints specified.
   */
  public double oxyReqCrew() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Liquid oxygen onboard the aircraft for the crew compartment, in liters.
   * Example: /// Example: 12.3
   * Constraints: No constraints specified.
   */
  public double oxyOnCrew() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Liquid oxygen required on the aircraft for the troop compartment, in liters.
   * Example: /// Example: 12.3
   * Constraints: No constraints specified.
   */
  public double oxyReqPax() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Liquid oxygen onboard the aircraft for the troop compartment, in liters.
   * Example: /// Example: 12.3
   * Constraints: No constraints specified.
   */
  public double oxyOnPax() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Alert Status code.
   * Example: /// Example: C1
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String alertStatusCode() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer alertStatusCodeAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer alertStatusCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * The amount of time allowed between launch order and takeoff, in seconds.
   * Example: /// Example: 22
   * Constraints: No constraints specified.
   */
  public int alertStatus() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The current state of this sortie.
   * Example: /// Example: Park
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String currentState() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer currentStateAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer currentStateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * The itinerary identifier of the departure location.
   * Example: /// Example: 100
   * Constraints: No constraints specified.
   */
  public int depItinerary() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The departure International Civil Aviation Organization (ICAO) of this sortie.
   * Example: /// Example: KCOS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String depIcao() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depIcaoAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer depIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * The departure International Aviation Transport Association (IATA) code of this sortie.
   * Example: /// Example: AAA
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String depIata() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depIataAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer depIataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * The departure Federal Aviation Administration (FAA) code of this sortie.
   * Example: /// Example: FAA1
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String depFaa() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depFaaAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer depFaaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String plannedDepTime() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer plannedDepTimeAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer plannedDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String estDepTime() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estDepTimeAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer estDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * The actual departure time, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String actualDepTime() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualDepTimeAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer actualDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T00:55:01.123Z
   * Constraints: No constraints specified.
   */
  public String estBlockOutTime() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estBlockOutTimeAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer estBlockOutTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T00:55:01.123Z
   * Constraints: No constraints specified.
   */
  public String actualBlockOutTime() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualBlockOutTimeAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer actualBlockOutTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Purpose code at the departure location of this sortie.
   * Example: /// Example: P
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String depPurposeCode() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depPurposeCodeAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer depPurposeCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * The itinerary identifier of the arrival location.
   * Example: /// Example: 101
   * Constraints: No constraints specified.
   */
  public int arrItinerary() { int o = __offset(80); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The arrival International Civil Aviation Organization (ICAO) of this sortie.
   * Example: /// Example: KCOS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String arrIcao() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrIcaoAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer arrIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * The arrival International Aviation Transport Association (IATA) code of this sortie.
   * Example: /// Example: AAA
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String arrIata() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrIataAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer arrIataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * The arrival Federal Aviation Administration (FAA) code of this sortie.
   * Example: /// Example: FAA1
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String arrFaa() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrFaaAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer arrFaaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String plannedArrTime() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer plannedArrTimeAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer plannedArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String estArrTime() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estArrTimeAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer estArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * The actual arrival time, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String actualArrTime() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualArrTimeAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer actualArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T01:06:01.123Z
   * Constraints: No constraints specified.
   */
  public String estBlockInTime() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estBlockInTimeAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer estBlockInTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-01T01:06:01.123Z
   * Constraints: No constraints specified.
   */
  public String actualBlockInTime() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualBlockInTimeAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer actualBlockInTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Purpose code at the arrival location of this sortie.
   * Example: /// Example: O
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String arrPurposeCode() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrPurposeCodeAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer arrPurposeCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-01-03T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String dhd() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dhdAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer dhdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Reason the aircraft must return to home station by its due home date.
   * Example: /// Example: Due for maintenance
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String dhdReason() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dhdReasonAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer dhdReasonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Aircraft event text.
   * Example: /// Example: Example event
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String aircraftEvent() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftEventAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer aircraftEventInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
   * Example: /// Example: OPS
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String soe() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer soeAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer soeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * The leg number of this sortie.
   * Example: /// Example: 14
   * Constraints: No constraints specified.
   */
  public int legNum() { int o = __offset(108); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The planned flight time for this sortie, in minutes.
   * Example: /// Example: 104.5
   * Constraints: No constraints specified.
   */
  public double flightTime() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Scheduled ground time, in minutes.
   * Example: /// Example: 387.8
   * Constraints: No constraints specified.
   */
  public double gndTime() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
   * Example: /// Example: Example URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(114); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(114, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 1); }
  /**
   * The version number of the crew paper.
   * Example: /// Example: 1.1
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String papersVersion() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer papersVersionAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer papersVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Name of the uploaded PDF.
   * Example: /// Example: ExampleFileName
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String filename() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filenameAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer filenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * Size of the supporting PDF, in bytes.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int filesize() { int o = __offset(120); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The status of the supporting document.
   * Example: /// Example: PUBLISHED
   * Constraints: Minimum length = 0, Maximum length = 9
   */
  public byte paperStatus() { int o = __offset(122); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The prior permission required (PPR) status.
   * Example: /// Example: PENDING
   * Constraints: Minimum length = 0, Maximum length = 22
   */
  public byte pprStatus() { int o = __offset(124); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
   * Example: /// Example: 2024-09-09T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String missionUpdate() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionUpdateAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer missionUpdateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * The primary delay code.
   * Example: /// Example: 500
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String delayCode() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer delayCodeAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer delayCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * The last name of the aircraft commander.
   * Example: /// Example: Smith
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String commanderName() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commanderNameAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer commanderNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
   * Example: /// Example: 7198675309
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String fmDeskNum() { int o = __offset(132); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fmDeskNumAsByteBuffer() { return __vector_as_bytebuffer(132, 1); }
  public ByteBuffer fmDeskNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 132, 1); }
  /**
   * Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
   * Example: /// Example: Smith
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String fmName() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fmNameAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer fmNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }
  /**
   * Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
   * Example: /// Example: R
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public byte rvnReq() { int o = __offset(136); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The number of passengers tasked for this sortie.
   * Example: /// Example: 17
   * Constraints: No constraints specified.
   */
  public int passengers() { int o = __offset(138); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The POI parking location.
   * Example: /// Example: KCOS
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String parkingLoc() { int o = __offset(140); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer parkingLocAsByteBuffer() { return __vector_as_bytebuffer(140, 1); }
  public ByteBuffer parkingLocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 140, 1); }
  /**
   * Remarks concerning the sortie objective.
   * Example: /// Example: Some objective remark about aircraft A
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String objectiveRemarks() { int o = __offset(142); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer objectiveRemarksAsByteBuffer() { return __vector_as_bytebuffer(142, 1); }
  public ByteBuffer objectiveRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 142, 1); }
  /**
   * Remarks concerning the aircraft.
   * Example: /// Example: Some remark about aircraft A
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String aircraftRemarks() { int o = __offset(144); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftRemarksAsByteBuffer() { return __vector_as_bytebuffer(144, 1); }
  public ByteBuffer aircraftRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 144, 1); }
  /**
   * Remarks concerning the schedule.
   * Example: /// Example: Some schedule remark about aircraft A
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String scheduleRemarks() { int o = __offset(146); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scheduleRemarksAsByteBuffer() { return __vector_as_bytebuffer(146, 1); }
  public ByteBuffer scheduleRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 146, 1); }
  /**
   * Remarks concerning the results of this sortie.
   * Example: /// Example: Some remark about aircraft A
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String resultRemarks() { int o = __offset(148); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer resultRemarksAsByteBuffer() { return __vector_as_bytebuffer(148, 1); }
  public ByteBuffer resultRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 148, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(150); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(150, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 150, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(152); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(152, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 152, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(154); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(154, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 154, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(156); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(156, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 156, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(158); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(158, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 158, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(160); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(160, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 160, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(162); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(162, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 162, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(164); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(166); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(166, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 166, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String crew() { int o = __offset(168); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer crewAsByteBuffer() { return __vector_as_bytebuffer(168, 1); }
  public ByteBuffer crewInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 168, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String sortiePpr(int j) { int o = __offset(170); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sortiePprLength() { int o = __offset(170); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sortiePprVector() { return sortiePprVector(new StringVector()); }
  public StringVector sortiePprVector(StringVector obj) { int o = __offset(170); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAircraftSortie_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int origSortieIdOffset,
      int idAircraftOffset,
      int aircraftAltIdOffset,
      int tailNumberOffset,
      int aircraftMdsOffset,
      int aircraftAdsbOffset,
      int sortieDateOffset,
      int lineNumber,
      int idMissionOffset,
      int missionIdOffset,
      int amcMsnNumOffset,
      int amcMsnTypeOffset,
      int callSignOffset,
      int jcsPriorityOffset,
      int primarySclOffset,
      int secondarySclOffset,
      int reqConfigOffset,
      int cargoConfigOffset,
      double fuelReq,
      double oxyReqCrew,
      double oxyOnCrew,
      double oxyReqPax,
      double oxyOnPax,
      int alertStatusCodeOffset,
      int alertStatus,
      int currentStateOffset,
      int depItinerary,
      int depIcaoOffset,
      int depIataOffset,
      int depFaaOffset,
      int plannedDepTimeOffset,
      int estDepTimeOffset,
      int actualDepTimeOffset,
      int estBlockOutTimeOffset,
      int actualBlockOutTimeOffset,
      int depPurposeCodeOffset,
      int arrItinerary,
      int arrIcaoOffset,
      int arrIataOffset,
      int arrFaaOffset,
      int plannedArrTimeOffset,
      int estArrTimeOffset,
      int actualArrTimeOffset,
      int estBlockInTimeOffset,
      int actualBlockInTimeOffset,
      int arrPurposeCodeOffset,
      int dhdOffset,
      int dhdReasonOffset,
      int aircraftEventOffset,
      int soeOffset,
      int legNum,
      double flightTime,
      double gndTime,
      int rawFileUriOffset,
      int papersVersionOffset,
      int filenameOffset,
      int filesize,
      byte paperStatus,
      byte pprStatus,
      int missionUpdateOffset,
      int delayCodeOffset,
      int commanderNameOffset,
      int fmDeskNumOffset,
      int fmNameOffset,
      byte rvnReq,
      int passengers,
      int parkingLocOffset,
      int objectiveRemarksOffset,
      int aircraftRemarksOffset,
      int scheduleRemarksOffset,
      int resultRemarksOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset,
      int crewOffset,
      int sortiePprOffset) {
    builder.startTable(84);
    AircraftSortie_Full.addGndTime(builder, gndTime);
    AircraftSortie_Full.addFlightTime(builder, flightTime);
    AircraftSortie_Full.addOxyOnPax(builder, oxyOnPax);
    AircraftSortie_Full.addOxyReqPax(builder, oxyReqPax);
    AircraftSortie_Full.addOxyOnCrew(builder, oxyOnCrew);
    AircraftSortie_Full.addOxyReqCrew(builder, oxyReqCrew);
    AircraftSortie_Full.addFuelReq(builder, fuelReq);
    AircraftSortie_Full.addSortiePpr(builder, sortiePprOffset);
    AircraftSortie_Full.addCrew(builder, crewOffset);
    AircraftSortie_Full.addOrigNetwork(builder, origNetworkOffset);
    AircraftSortie_Full.addOrigin(builder, originOffset);
    AircraftSortie_Full.addSource(builder, sourceOffset);
    AircraftSortie_Full.addSourceDl(builder, sourceDlOffset);
    AircraftSortie_Full.addUpdatedBy(builder, updatedByOffset);
    AircraftSortie_Full.addUpdatedAt(builder, updatedAtOffset);
    AircraftSortie_Full.addCreatedBy(builder, createdByOffset);
    AircraftSortie_Full.addCreatedAt(builder, createdAtOffset);
    AircraftSortie_Full.addResultRemarks(builder, resultRemarksOffset);
    AircraftSortie_Full.addScheduleRemarks(builder, scheduleRemarksOffset);
    AircraftSortie_Full.addAircraftRemarks(builder, aircraftRemarksOffset);
    AircraftSortie_Full.addObjectiveRemarks(builder, objectiveRemarksOffset);
    AircraftSortie_Full.addParkingLoc(builder, parkingLocOffset);
    AircraftSortie_Full.addPassengers(builder, passengers);
    AircraftSortie_Full.addFmName(builder, fmNameOffset);
    AircraftSortie_Full.addFmDeskNum(builder, fmDeskNumOffset);
    AircraftSortie_Full.addCommanderName(builder, commanderNameOffset);
    AircraftSortie_Full.addDelayCode(builder, delayCodeOffset);
    AircraftSortie_Full.addMissionUpdate(builder, missionUpdateOffset);
    AircraftSortie_Full.addFilesize(builder, filesize);
    AircraftSortie_Full.addFilename(builder, filenameOffset);
    AircraftSortie_Full.addPapersVersion(builder, papersVersionOffset);
    AircraftSortie_Full.addRawFileUri(builder, rawFileUriOffset);
    AircraftSortie_Full.addLegNum(builder, legNum);
    AircraftSortie_Full.addSoe(builder, soeOffset);
    AircraftSortie_Full.addAircraftEvent(builder, aircraftEventOffset);
    AircraftSortie_Full.addDhdReason(builder, dhdReasonOffset);
    AircraftSortie_Full.addDhd(builder, dhdOffset);
    AircraftSortie_Full.addArrPurposeCode(builder, arrPurposeCodeOffset);
    AircraftSortie_Full.addActualBlockInTime(builder, actualBlockInTimeOffset);
    AircraftSortie_Full.addEstBlockInTime(builder, estBlockInTimeOffset);
    AircraftSortie_Full.addActualArrTime(builder, actualArrTimeOffset);
    AircraftSortie_Full.addEstArrTime(builder, estArrTimeOffset);
    AircraftSortie_Full.addPlannedArrTime(builder, plannedArrTimeOffset);
    AircraftSortie_Full.addArrFaa(builder, arrFaaOffset);
    AircraftSortie_Full.addArrIata(builder, arrIataOffset);
    AircraftSortie_Full.addArrIcao(builder, arrIcaoOffset);
    AircraftSortie_Full.addArrItinerary(builder, arrItinerary);
    AircraftSortie_Full.addDepPurposeCode(builder, depPurposeCodeOffset);
    AircraftSortie_Full.addActualBlockOutTime(builder, actualBlockOutTimeOffset);
    AircraftSortie_Full.addEstBlockOutTime(builder, estBlockOutTimeOffset);
    AircraftSortie_Full.addActualDepTime(builder, actualDepTimeOffset);
    AircraftSortie_Full.addEstDepTime(builder, estDepTimeOffset);
    AircraftSortie_Full.addPlannedDepTime(builder, plannedDepTimeOffset);
    AircraftSortie_Full.addDepFaa(builder, depFaaOffset);
    AircraftSortie_Full.addDepIata(builder, depIataOffset);
    AircraftSortie_Full.addDepIcao(builder, depIcaoOffset);
    AircraftSortie_Full.addDepItinerary(builder, depItinerary);
    AircraftSortie_Full.addCurrentState(builder, currentStateOffset);
    AircraftSortie_Full.addAlertStatus(builder, alertStatus);
    AircraftSortie_Full.addAlertStatusCode(builder, alertStatusCodeOffset);
    AircraftSortie_Full.addCargoConfig(builder, cargoConfigOffset);
    AircraftSortie_Full.addReqConfig(builder, reqConfigOffset);
    AircraftSortie_Full.addSecondaryScl(builder, secondarySclOffset);
    AircraftSortie_Full.addPrimaryScl(builder, primarySclOffset);
    AircraftSortie_Full.addJcsPriority(builder, jcsPriorityOffset);
    AircraftSortie_Full.addCallSign(builder, callSignOffset);
    AircraftSortie_Full.addAmcMsnType(builder, amcMsnTypeOffset);
    AircraftSortie_Full.addAmcMsnNum(builder, amcMsnNumOffset);
    AircraftSortie_Full.addMissionId(builder, missionIdOffset);
    AircraftSortie_Full.addIdMission(builder, idMissionOffset);
    AircraftSortie_Full.addLineNumber(builder, lineNumber);
    AircraftSortie_Full.addSortieDate(builder, sortieDateOffset);
    AircraftSortie_Full.addAircraftAdsb(builder, aircraftAdsbOffset);
    AircraftSortie_Full.addAircraftMds(builder, aircraftMdsOffset);
    AircraftSortie_Full.addTailNumber(builder, tailNumberOffset);
    AircraftSortie_Full.addAircraftAltId(builder, aircraftAltIdOffset);
    AircraftSortie_Full.addIdAircraft(builder, idAircraftOffset);
    AircraftSortie_Full.addOrigSortieId(builder, origSortieIdOffset);
    AircraftSortie_Full.addClassificationMarking(builder, classificationMarkingOffset);
    AircraftSortie_Full.addId(builder, idOffset);
    AircraftSortie_Full.addDataMode(builder, dataMode);
    AircraftSortie_Full.addRvnReq(builder, rvnReq);
    AircraftSortie_Full.addPprStatus(builder, pprStatus);
    AircraftSortie_Full.addPaperStatus(builder, paperStatus);
    return AircraftSortie_Full.endAircraftSortie_Full(builder);
  }

  public static void startAircraftSortie_Full(FlatBufferBuilder builder) { builder.startTable(84); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addOrigSortieId(FlatBufferBuilder builder, int origSortieIdOffset) { builder.addOffset(2, origSortieIdOffset, 0); }
  public static void addIdAircraft(FlatBufferBuilder builder, int idAircraftOffset) { builder.addOffset(3, idAircraftOffset, 0); }
  public static void addAircraftAltId(FlatBufferBuilder builder, int aircraftAltIdOffset) { builder.addOffset(4, aircraftAltIdOffset, 0); }
  public static void addTailNumber(FlatBufferBuilder builder, int tailNumberOffset) { builder.addOffset(5, tailNumberOffset, 0); }
  public static void addAircraftMds(FlatBufferBuilder builder, int aircraftMdsOffset) { builder.addOffset(6, aircraftMdsOffset, 0); }
  public static void addAircraftAdsb(FlatBufferBuilder builder, int aircraftAdsbOffset) { builder.addOffset(7, aircraftAdsbOffset, 0); }
  public static void addSortieDate(FlatBufferBuilder builder, int sortieDateOffset) { builder.addOffset(8, sortieDateOffset, 0); }
  public static void addLineNumber(FlatBufferBuilder builder, int lineNumber) { builder.addInt(9, lineNumber, 0); }
  public static void addIdMission(FlatBufferBuilder builder, int idMissionOffset) { builder.addOffset(10, idMissionOffset, 0); }
  public static void addMissionId(FlatBufferBuilder builder, int missionIdOffset) { builder.addOffset(11, missionIdOffset, 0); }
  public static void addAmcMsnNum(FlatBufferBuilder builder, int amcMsnNumOffset) { builder.addOffset(12, amcMsnNumOffset, 0); }
  public static void addAmcMsnType(FlatBufferBuilder builder, int amcMsnTypeOffset) { builder.addOffset(13, amcMsnTypeOffset, 0); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(14, callSignOffset, 0); }
  public static void addJcsPriority(FlatBufferBuilder builder, int jcsPriorityOffset) { builder.addOffset(15, jcsPriorityOffset, 0); }
  public static void addPrimaryScl(FlatBufferBuilder builder, int primarySclOffset) { builder.addOffset(16, primarySclOffset, 0); }
  public static void addSecondaryScl(FlatBufferBuilder builder, int secondarySclOffset) { builder.addOffset(17, secondarySclOffset, 0); }
  public static void addReqConfig(FlatBufferBuilder builder, int reqConfigOffset) { builder.addOffset(18, reqConfigOffset, 0); }
  public static void addCargoConfig(FlatBufferBuilder builder, int cargoConfigOffset) { builder.addOffset(19, cargoConfigOffset, 0); }
  public static void addFuelReq(FlatBufferBuilder builder, double fuelReq) { builder.addDouble(20, fuelReq, 0.0); }
  public static void addOxyReqCrew(FlatBufferBuilder builder, double oxyReqCrew) { builder.addDouble(21, oxyReqCrew, 0.0); }
  public static void addOxyOnCrew(FlatBufferBuilder builder, double oxyOnCrew) { builder.addDouble(22, oxyOnCrew, 0.0); }
  public static void addOxyReqPax(FlatBufferBuilder builder, double oxyReqPax) { builder.addDouble(23, oxyReqPax, 0.0); }
  public static void addOxyOnPax(FlatBufferBuilder builder, double oxyOnPax) { builder.addDouble(24, oxyOnPax, 0.0); }
  public static void addAlertStatusCode(FlatBufferBuilder builder, int alertStatusCodeOffset) { builder.addOffset(25, alertStatusCodeOffset, 0); }
  public static void addAlertStatus(FlatBufferBuilder builder, int alertStatus) { builder.addInt(26, alertStatus, 0); }
  public static void addCurrentState(FlatBufferBuilder builder, int currentStateOffset) { builder.addOffset(27, currentStateOffset, 0); }
  public static void addDepItinerary(FlatBufferBuilder builder, int depItinerary) { builder.addInt(28, depItinerary, 0); }
  public static void addDepIcao(FlatBufferBuilder builder, int depIcaoOffset) { builder.addOffset(29, depIcaoOffset, 0); }
  public static void addDepIata(FlatBufferBuilder builder, int depIataOffset) { builder.addOffset(30, depIataOffset, 0); }
  public static void addDepFaa(FlatBufferBuilder builder, int depFaaOffset) { builder.addOffset(31, depFaaOffset, 0); }
  public static void addPlannedDepTime(FlatBufferBuilder builder, int plannedDepTimeOffset) { builder.addOffset(32, plannedDepTimeOffset, 0); }
  public static void addEstDepTime(FlatBufferBuilder builder, int estDepTimeOffset) { builder.addOffset(33, estDepTimeOffset, 0); }
  public static void addActualDepTime(FlatBufferBuilder builder, int actualDepTimeOffset) { builder.addOffset(34, actualDepTimeOffset, 0); }
  public static void addEstBlockOutTime(FlatBufferBuilder builder, int estBlockOutTimeOffset) { builder.addOffset(35, estBlockOutTimeOffset, 0); }
  public static void addActualBlockOutTime(FlatBufferBuilder builder, int actualBlockOutTimeOffset) { builder.addOffset(36, actualBlockOutTimeOffset, 0); }
  public static void addDepPurposeCode(FlatBufferBuilder builder, int depPurposeCodeOffset) { builder.addOffset(37, depPurposeCodeOffset, 0); }
  public static void addArrItinerary(FlatBufferBuilder builder, int arrItinerary) { builder.addInt(38, arrItinerary, 0); }
  public static void addArrIcao(FlatBufferBuilder builder, int arrIcaoOffset) { builder.addOffset(39, arrIcaoOffset, 0); }
  public static void addArrIata(FlatBufferBuilder builder, int arrIataOffset) { builder.addOffset(40, arrIataOffset, 0); }
  public static void addArrFaa(FlatBufferBuilder builder, int arrFaaOffset) { builder.addOffset(41, arrFaaOffset, 0); }
  public static void addPlannedArrTime(FlatBufferBuilder builder, int plannedArrTimeOffset) { builder.addOffset(42, plannedArrTimeOffset, 0); }
  public static void addEstArrTime(FlatBufferBuilder builder, int estArrTimeOffset) { builder.addOffset(43, estArrTimeOffset, 0); }
  public static void addActualArrTime(FlatBufferBuilder builder, int actualArrTimeOffset) { builder.addOffset(44, actualArrTimeOffset, 0); }
  public static void addEstBlockInTime(FlatBufferBuilder builder, int estBlockInTimeOffset) { builder.addOffset(45, estBlockInTimeOffset, 0); }
  public static void addActualBlockInTime(FlatBufferBuilder builder, int actualBlockInTimeOffset) { builder.addOffset(46, actualBlockInTimeOffset, 0); }
  public static void addArrPurposeCode(FlatBufferBuilder builder, int arrPurposeCodeOffset) { builder.addOffset(47, arrPurposeCodeOffset, 0); }
  public static void addDhd(FlatBufferBuilder builder, int dhdOffset) { builder.addOffset(48, dhdOffset, 0); }
  public static void addDhdReason(FlatBufferBuilder builder, int dhdReasonOffset) { builder.addOffset(49, dhdReasonOffset, 0); }
  public static void addAircraftEvent(FlatBufferBuilder builder, int aircraftEventOffset) { builder.addOffset(50, aircraftEventOffset, 0); }
  public static void addSoe(FlatBufferBuilder builder, int soeOffset) { builder.addOffset(51, soeOffset, 0); }
  public static void addLegNum(FlatBufferBuilder builder, int legNum) { builder.addInt(52, legNum, 0); }
  public static void addFlightTime(FlatBufferBuilder builder, double flightTime) { builder.addDouble(53, flightTime, 0.0); }
  public static void addGndTime(FlatBufferBuilder builder, double gndTime) { builder.addDouble(54, gndTime, 0.0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(55, rawFileUriOffset, 0); }
  public static void addPapersVersion(FlatBufferBuilder builder, int papersVersionOffset) { builder.addOffset(56, papersVersionOffset, 0); }
  public static void addFilename(FlatBufferBuilder builder, int filenameOffset) { builder.addOffset(57, filenameOffset, 0); }
  public static void addFilesize(FlatBufferBuilder builder, int filesize) { builder.addInt(58, filesize, 0); }
  public static void addPaperStatus(FlatBufferBuilder builder, byte paperStatus) { builder.addByte(59, paperStatus, 0); }
  public static void addPprStatus(FlatBufferBuilder builder, byte pprStatus) { builder.addByte(60, pprStatus, 0); }
  public static void addMissionUpdate(FlatBufferBuilder builder, int missionUpdateOffset) { builder.addOffset(61, missionUpdateOffset, 0); }
  public static void addDelayCode(FlatBufferBuilder builder, int delayCodeOffset) { builder.addOffset(62, delayCodeOffset, 0); }
  public static void addCommanderName(FlatBufferBuilder builder, int commanderNameOffset) { builder.addOffset(63, commanderNameOffset, 0); }
  public static void addFmDeskNum(FlatBufferBuilder builder, int fmDeskNumOffset) { builder.addOffset(64, fmDeskNumOffset, 0); }
  public static void addFmName(FlatBufferBuilder builder, int fmNameOffset) { builder.addOffset(65, fmNameOffset, 0); }
  public static void addRvnReq(FlatBufferBuilder builder, byte rvnReq) { builder.addByte(66, rvnReq, 0); }
  public static void addPassengers(FlatBufferBuilder builder, int passengers) { builder.addInt(67, passengers, 0); }
  public static void addParkingLoc(FlatBufferBuilder builder, int parkingLocOffset) { builder.addOffset(68, parkingLocOffset, 0); }
  public static void addObjectiveRemarks(FlatBufferBuilder builder, int objectiveRemarksOffset) { builder.addOffset(69, objectiveRemarksOffset, 0); }
  public static void addAircraftRemarks(FlatBufferBuilder builder, int aircraftRemarksOffset) { builder.addOffset(70, aircraftRemarksOffset, 0); }
  public static void addScheduleRemarks(FlatBufferBuilder builder, int scheduleRemarksOffset) { builder.addOffset(71, scheduleRemarksOffset, 0); }
  public static void addResultRemarks(FlatBufferBuilder builder, int resultRemarksOffset) { builder.addOffset(72, resultRemarksOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(73, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(74, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(75, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(76, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(77, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(78, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(79, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(80, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(81, origNetworkOffset, 0); }
  public static void addCrew(FlatBufferBuilder builder, int crewOffset) { builder.addOffset(82, crewOffset, 0); }
  public static void addSortiePpr(FlatBufferBuilder builder, int sortiePprOffset) { builder.addOffset(83, sortiePprOffset, 0); }
  public static int createSortiePprVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSortiePprVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAircraftSortie_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraftSortie_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraftSortie_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AircraftSortie_Full get(int j) { return get(new AircraftSortie_Full(), j); }
    public AircraftSortie_Full get(AircraftSortie_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

