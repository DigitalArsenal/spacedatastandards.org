// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Data to analyze launch detections.
 */
@SuppressWarnings("unused")
public final class LaunchDetection_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LaunchDetection_Abridged getRootAsLaunchDetection_Abridged(ByteBuffer _bb) { return getRootAsLaunchDetection_Abridged(_bb, new LaunchDetection_Abridged()); }
  public static LaunchDetection_Abridged getRootAsLaunchDetection_Abridged(ByteBuffer _bb, LaunchDetection_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LaunchDetection_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LAUN"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LaunchDetection_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: LAUNCHDETECTION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Time of Launch.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String launchTime() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchTimeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer launchTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Type of message for the data.
   * Example: /// Example: Example-Msg-Type
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public String messageType() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageTypeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer messageTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double launchLatitude() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double launchLongitude() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Angle measured clockwise from North for the launch heading (in Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double launchAzimuth() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Orbit Right Ascension of Ascending Node (in Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double raan() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Orbit Inclination (in Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double inclination() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time of observation.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String observationTime() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer observationTimeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer observationTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double observationLatitude() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Longitude of launch vehicle at observation time (in Degrees).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double observationLongitude() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Altitude of launch vehicle at observation time (in KM).
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double observationAltitude() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Flag indicating multiple observers were used.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean stereoFlag() { int o = __offset(30); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean highZenithAzimuth() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Integer indicating how messages should be sequenced for a specific event.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int sequenceNumber() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Id to be able to correlate different messages to a specific event.
   * Example: /// Example: EVENT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String eventId() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventIdAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer eventIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: Example descriptor
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(46); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Read-only time the row was updated in the database, set automatically by the system on update.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }

  public static int createLaunchDetection_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int launchTimeOffset,
      int messageTypeOffset,
      double launchLatitude,
      double launchLongitude,
      double launchAzimuth,
      double raan,
      double inclination,
      int observationTimeOffset,
      double observationLatitude,
      double observationLongitude,
      double observationAltitude,
      boolean stereoFlag,
      boolean highZenithAzimuth,
      int sequenceNumber,
      int eventIdOffset,
      int sourceOffset,
      int originOffset,
      int descriptorOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset) {
    builder.startTable(26);
    LaunchDetection_Abridged.addObservationAltitude(builder, observationAltitude);
    LaunchDetection_Abridged.addObservationLongitude(builder, observationLongitude);
    LaunchDetection_Abridged.addObservationLatitude(builder, observationLatitude);
    LaunchDetection_Abridged.addInclination(builder, inclination);
    LaunchDetection_Abridged.addRaan(builder, raan);
    LaunchDetection_Abridged.addLaunchAzimuth(builder, launchAzimuth);
    LaunchDetection_Abridged.addLaunchLongitude(builder, launchLongitude);
    LaunchDetection_Abridged.addLaunchLatitude(builder, launchLatitude);
    LaunchDetection_Abridged.addUpdatedBy(builder, updatedByOffset);
    LaunchDetection_Abridged.addUpdatedAt(builder, updatedAtOffset);
    LaunchDetection_Abridged.addCreatedBy(builder, createdByOffset);
    LaunchDetection_Abridged.addCreatedAt(builder, createdAtOffset);
    LaunchDetection_Abridged.addOrigNetwork(builder, origNetworkOffset);
    LaunchDetection_Abridged.addDescriptor(builder, descriptorOffset);
    LaunchDetection_Abridged.addOrigin(builder, originOffset);
    LaunchDetection_Abridged.addSource(builder, sourceOffset);
    LaunchDetection_Abridged.addEventId(builder, eventIdOffset);
    LaunchDetection_Abridged.addSequenceNumber(builder, sequenceNumber);
    LaunchDetection_Abridged.addObservationTime(builder, observationTimeOffset);
    LaunchDetection_Abridged.addMessageType(builder, messageTypeOffset);
    LaunchDetection_Abridged.addLaunchTime(builder, launchTimeOffset);
    LaunchDetection_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    LaunchDetection_Abridged.addId(builder, idOffset);
    LaunchDetection_Abridged.addDataMode(builder, dataMode);
    LaunchDetection_Abridged.addHighZenithAzimuth(builder, highZenithAzimuth);
    LaunchDetection_Abridged.addStereoFlag(builder, stereoFlag);
    return LaunchDetection_Abridged.endLaunchDetection_Abridged(builder);
  }

  public static void startLaunchDetection_Abridged(FlatBufferBuilder builder) { builder.startTable(26); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addLaunchTime(FlatBufferBuilder builder, int launchTimeOffset) { builder.addOffset(2, launchTimeOffset, 0); }
  public static void addMessageType(FlatBufferBuilder builder, int messageTypeOffset) { builder.addOffset(3, messageTypeOffset, 0); }
  public static void addLaunchLatitude(FlatBufferBuilder builder, double launchLatitude) { builder.addDouble(4, launchLatitude, 0.0); }
  public static void addLaunchLongitude(FlatBufferBuilder builder, double launchLongitude) { builder.addDouble(5, launchLongitude, 0.0); }
  public static void addLaunchAzimuth(FlatBufferBuilder builder, double launchAzimuth) { builder.addDouble(6, launchAzimuth, 0.0); }
  public static void addRaan(FlatBufferBuilder builder, double raan) { builder.addDouble(7, raan, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double inclination) { builder.addDouble(8, inclination, 0.0); }
  public static void addObservationTime(FlatBufferBuilder builder, int observationTimeOffset) { builder.addOffset(9, observationTimeOffset, 0); }
  public static void addObservationLatitude(FlatBufferBuilder builder, double observationLatitude) { builder.addDouble(10, observationLatitude, 0.0); }
  public static void addObservationLongitude(FlatBufferBuilder builder, double observationLongitude) { builder.addDouble(11, observationLongitude, 0.0); }
  public static void addObservationAltitude(FlatBufferBuilder builder, double observationAltitude) { builder.addDouble(12, observationAltitude, 0.0); }
  public static void addStereoFlag(FlatBufferBuilder builder, boolean stereoFlag) { builder.addBoolean(13, stereoFlag, false); }
  public static void addHighZenithAzimuth(FlatBufferBuilder builder, boolean highZenithAzimuth) { builder.addBoolean(14, highZenithAzimuth, false); }
  public static void addSequenceNumber(FlatBufferBuilder builder, int sequenceNumber) { builder.addInt(15, sequenceNumber, 0); }
  public static void addEventId(FlatBufferBuilder builder, int eventIdOffset) { builder.addOffset(16, eventIdOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(17, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(18, originOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(19, descriptorOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(20, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(21, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(22, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(23, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(24, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(25, updatedByOffset, 0); }
  public static int endLaunchDetection_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLaunchDetection_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LAUN"); }
  public static void finishSizePrefixedLaunchDetection_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LAUN"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LaunchDetection_Abridged get(int j) { return get(new LaunchDetection_Abridged(), j); }
    public LaunchDetection_Abridged get(LaunchDetection_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

