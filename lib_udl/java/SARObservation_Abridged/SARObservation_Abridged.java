// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of observation data for SAR based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
 */
@SuppressWarnings("unused")
public final class SARObservation_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SARObservation_Abridged getRootAsSARObservation_Abridged(ByteBuffer _bb) { return getRootAsSARObservation_Abridged(_bb, new SARObservation_Abridged()); }
  public static SARObservation_Abridged getRootAsSARObservation_Abridged(ByteBuffer _bb, SARObservation_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SARObservation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SARO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SARObservation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SAROBSERVATION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the spacecraft hosting the sensor associated with this collection.
   * Example: /// Example: 36036
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Satellite/Catalog number of the spacecraft hosting the sensor associated with this collection.
   * Example: /// Example: 36036
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by the source to indicate the onorbit object hosting the sensor associated with this collection. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: 36036
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: 36036-1L
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Optional identifier provided by the source to indicate the sensor for this collection. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: SMOS-1L
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: EXTERNAL-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional identifier to indicate the specific collection tasking which produced this observation.
   * Example: /// Example: COLLECTION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String collectionId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer collectionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Identifier of the specific detection within a collection which produced this observation.
   * Example: /// Example: DETECTION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String detectionId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer detectionIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer detectionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Collection start time in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2023-04-22T17:35:00.123456Z
   * Constraints: No constraints specified.
   */
  public String collectionStart() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionStartAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer collectionStartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Collection end time in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2023-04-22T17:38:10.20177Z
   * Constraints: No constraints specified.
   */
  public String collectionEnd() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collectionEndAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer collectionEndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The datetime at the center point of the collection in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2023-04-22T17:36:35.100885Z
   * Constraints: No constraints specified.
   */
  public String centerTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer centerTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer centerTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The detection start time in ISO 8601 UTC format, with microsecond precision.
   * Example: /// Example: 2023-07-08T17:35:01.615396Z
   * Constraints: No constraints specified.
   */
  public String detectionStart() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer detectionStartAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer detectionStartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The detection end time in ISO 8601 UTC format, with microsecond precision.
   * Example: /// Example: 2023-07-08T17:35:20.77219Z
   * Constraints: No constraints specified.
   */
  public String detectionEnd() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer detectionEndAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer detectionEndInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The duration, in seconds, of this detection.
   * Example: /// Example: 79.156794
   * Constraints: No constraints specified.
   */
  public double dwellTime() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The orbital direction (ASCENDING, DESCENDING) of the platform during the collection.
   * Example: /// Example: ASCENDING
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String orbitState() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer orbitStateAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer orbitStateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Collection mode setting for this collection (e.g. AREA, SPOTLIGHT, STRIP, etc.).
   * Example: /// Example: SPOTLIGHT
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String sarMode() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sarModeAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer sarModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Name of the band containing operating frequency for the collection (e.g. C, E, EHF, HF, K, Ka, Ku, L, Q, S, SHF, UNK, UHF, V, VHF, VLF, W, X). See RFBandType for more details and descriptions of each band name.
   * Example: /// Example: L
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String operatingBand() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operatingBandAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer operatingBandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The operating frequency, in Mhz, for the collection.
   * Example: /// Example: 2345.6
   * Constraints: No constraints specified.
   */
  public double operatingFreq() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Signal to noise ratio, in dB.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double snr() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Transmit polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
   * Example: /// Example: H
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String txPolarization() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer txPolarizationAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer txPolarizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Receive polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the earth's surface.
   * Example: /// Example: H
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String rxPolarization() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rxPolarizationAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer rxPolarizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The graze angle (also referred to as look angle) for the collection in degrees.
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double grazeAngle() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The center incidence angle in degrees.
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double incidenceAngle() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The squint angle for the collection in degrees.
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double squintAngle() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The bandwidth frequency of the pulse in Mhz.
   * Example: /// Example: 500.1
   * Constraints: No constraints specified.
   */
  public double pulseBandwidth() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The duration of a pulse in seconds.
   * Example: /// Example: 1.1e-05
   * Constraints: No constraints specified.
   */
  public double pulseDuration() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Required sweep angle for the continuous spot scene in degrees.
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double continuousSpotAngle() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Slant distance from sensor to center point of imaging event in kilometers.
   * Example: /// Example: 60.1
   * Constraints: No constraints specified.
   */
  public double slantRange() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Specifies the closest range, in kilometers, from the flight path to target during the collection.
   * Example: /// Example: 12.1
   * Constraints: No constraints specified.
   */
  public double nearRange() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Specifies the farthest range, in kilometers, from the flight path to target during the collection.
   * Example: /// Example: 34.1
   * Constraints: No constraints specified.
   */
  public double farRange() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The length of the collection as projected on the ground in kilometers.
   * Example: /// Example: 12.1
   * Constraints: No constraints specified.
   */
  public double swathLength() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String atext() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atextAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer atextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: No constraints specified.
   */
  public String agjson() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agjsonAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer agjsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Type of region as projected on the ground (POLYGON, POINT, LINE).
   * Example: /// Example: POLYGON
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String atype() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atypeAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer atypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int andims() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int asrid() { int o = __offset(78); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The pixel spacing in the range direction measured in meters.
   * Example: /// Example: 0.123
   * Constraints: No constraints specified.
   */
  public double spacingRange() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The pixel spacing in the azimuth direction measured in meters.
   * Example: /// Example: 0.123
   * Constraints: No constraints specified.
   */
  public double spacingAzimuth() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The number of looks in the azimuth direction.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int looksAzimuth() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The number of looks in the range direction.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int looksRange() { int o = __offset(86); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The resolution in the range direction measured in meters.
   * Example: /// Example: 0.123
   * Constraints: No constraints specified.
   */
  public double resolutionRange() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The resolution in the azimuth direction measured in meters.
   * Example: /// Example: 0.123
   * Constraints: No constraints specified.
   */
  public double resolutionAzimuth() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The antenna pointing direction (LEFT, RIGHT).
   * Example: /// Example: RIGHT
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String obDirection() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obDirectionAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer obDirectionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * The coordinate system used for the sensor velocity and target position vectors for the collection.
   * Example: /// Example: ECEF
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String coordSys() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer coordSysAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer coordSysInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * The collection target X position in kilometers.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double targetposx() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The collection target Y position in kilometers.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double targetposy() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The collection target Z position in kilometers.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double targetposz() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor altitude during collection in kilometers.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senalt() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor platform X-velocity during collection in kilometers/second.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvelx() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor platform Y-velocity during collection in kilometers/second.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvely() { int o = __offset(106); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Sensor platform Z-velocity during collection in kilometers/second.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double senvelz() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 sensor latitude sub-point at collect start time (collectionStart), represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double senlatStart() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 sensor longitude sub-point at collect start time (collectionStart), represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double senlonStart() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 sensor latitude sub-point at collect end time (collectionEnd), represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.1
   * Constraints: No constraints specified.
   */
  public double senlatEnd() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 sensor longitude sub-point at collect end time (collectionEnd), represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double senlonEnd() { int o = __offset(116); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * Array of UDL record types (e.g. ANALYTICMAGERY, ESID, GROUNDIMAGE, NOTIFICATION, POI, SV, TRACK) that are related to the SAR Observation. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['ESID', 'GROUNDIMAGE']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(120); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(120); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(120); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUIDs of the UDL data records that are related to the SAR Observation. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/sarobservation/{uuid}).
   * Example: /// Example: ['f7e01cd4-626b-441f-a423-17b160eb78ba', '223833c4-be0d-4fdb-a2e4-325a48eccced']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(122); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(122); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(122); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2023-04-22T17:51:40.854Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(132); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(132, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 132, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(136); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createSARObservation_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int externalIdOffset,
      int collectionIdOffset,
      int detectionIdOffset,
      int collectionStartOffset,
      int collectionEndOffset,
      int centerTimeOffset,
      int detectionStartOffset,
      int detectionEndOffset,
      double dwellTime,
      int orbitStateOffset,
      int sarModeOffset,
      int operatingBandOffset,
      double operatingFreq,
      double snr,
      int txPolarizationOffset,
      int rxPolarizationOffset,
      double grazeAngle,
      double incidenceAngle,
      double squintAngle,
      double pulseBandwidth,
      double pulseDuration,
      double continuousSpotAngle,
      double slantRange,
      double nearRange,
      double farRange,
      double swathLength,
      int atextOffset,
      int agjsonOffset,
      int atypeOffset,
      int andims,
      int asrid,
      double spacingRange,
      double spacingAzimuth,
      int looksAzimuth,
      int looksRange,
      double resolutionRange,
      double resolutionAzimuth,
      int obDirectionOffset,
      int coordSysOffset,
      double targetposx,
      double targetposy,
      double targetposz,
      double senalt,
      double senvelx,
      double senvely,
      double senvelz,
      double senlatStart,
      double senlonStart,
      double senlatEnd,
      double senlonEnd,
      int transactionIdOffset,
      int srcTypsOffset,
      int srcIdsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      int sourceDlOffset,
      byte dataMode) {
    builder.startTable(67);
    SARObservation_Abridged.addSenlonEnd(builder, senlonEnd);
    SARObservation_Abridged.addSenlatEnd(builder, senlatEnd);
    SARObservation_Abridged.addSenlonStart(builder, senlonStart);
    SARObservation_Abridged.addSenlatStart(builder, senlatStart);
    SARObservation_Abridged.addSenvelz(builder, senvelz);
    SARObservation_Abridged.addSenvely(builder, senvely);
    SARObservation_Abridged.addSenvelx(builder, senvelx);
    SARObservation_Abridged.addSenalt(builder, senalt);
    SARObservation_Abridged.addTargetposz(builder, targetposz);
    SARObservation_Abridged.addTargetposy(builder, targetposy);
    SARObservation_Abridged.addTargetposx(builder, targetposx);
    SARObservation_Abridged.addResolutionAzimuth(builder, resolutionAzimuth);
    SARObservation_Abridged.addResolutionRange(builder, resolutionRange);
    SARObservation_Abridged.addSpacingAzimuth(builder, spacingAzimuth);
    SARObservation_Abridged.addSpacingRange(builder, spacingRange);
    SARObservation_Abridged.addSwathLength(builder, swathLength);
    SARObservation_Abridged.addFarRange(builder, farRange);
    SARObservation_Abridged.addNearRange(builder, nearRange);
    SARObservation_Abridged.addSlantRange(builder, slantRange);
    SARObservation_Abridged.addContinuousSpotAngle(builder, continuousSpotAngle);
    SARObservation_Abridged.addPulseDuration(builder, pulseDuration);
    SARObservation_Abridged.addPulseBandwidth(builder, pulseBandwidth);
    SARObservation_Abridged.addSquintAngle(builder, squintAngle);
    SARObservation_Abridged.addIncidenceAngle(builder, incidenceAngle);
    SARObservation_Abridged.addGrazeAngle(builder, grazeAngle);
    SARObservation_Abridged.addSnr(builder, snr);
    SARObservation_Abridged.addOperatingFreq(builder, operatingFreq);
    SARObservation_Abridged.addDwellTime(builder, dwellTime);
    SARObservation_Abridged.addSourceDl(builder, sourceDlOffset);
    SARObservation_Abridged.addOrigNetwork(builder, origNetworkOffset);
    SARObservation_Abridged.addOrigin(builder, originOffset);
    SARObservation_Abridged.addSource(builder, sourceOffset);
    SARObservation_Abridged.addCreatedBy(builder, createdByOffset);
    SARObservation_Abridged.addCreatedAt(builder, createdAtOffset);
    SARObservation_Abridged.addSrcIds(builder, srcIdsOffset);
    SARObservation_Abridged.addSrcTyps(builder, srcTypsOffset);
    SARObservation_Abridged.addTransactionId(builder, transactionIdOffset);
    SARObservation_Abridged.addCoordSys(builder, coordSysOffset);
    SARObservation_Abridged.addObDirection(builder, obDirectionOffset);
    SARObservation_Abridged.addLooksRange(builder, looksRange);
    SARObservation_Abridged.addLooksAzimuth(builder, looksAzimuth);
    SARObservation_Abridged.addAsrid(builder, asrid);
    SARObservation_Abridged.addAndims(builder, andims);
    SARObservation_Abridged.addAtype(builder, atypeOffset);
    SARObservation_Abridged.addAgjson(builder, agjsonOffset);
    SARObservation_Abridged.addAtext(builder, atextOffset);
    SARObservation_Abridged.addRxPolarization(builder, rxPolarizationOffset);
    SARObservation_Abridged.addTxPolarization(builder, txPolarizationOffset);
    SARObservation_Abridged.addOperatingBand(builder, operatingBandOffset);
    SARObservation_Abridged.addSarMode(builder, sarModeOffset);
    SARObservation_Abridged.addOrbitState(builder, orbitStateOffset);
    SARObservation_Abridged.addDetectionEnd(builder, detectionEndOffset);
    SARObservation_Abridged.addDetectionStart(builder, detectionStartOffset);
    SARObservation_Abridged.addCenterTime(builder, centerTimeOffset);
    SARObservation_Abridged.addCollectionEnd(builder, collectionEndOffset);
    SARObservation_Abridged.addCollectionStart(builder, collectionStartOffset);
    SARObservation_Abridged.addDetectionId(builder, detectionIdOffset);
    SARObservation_Abridged.addCollectionId(builder, collectionIdOffset);
    SARObservation_Abridged.addExternalId(builder, externalIdOffset);
    SARObservation_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    SARObservation_Abridged.addIdSensor(builder, idSensorOffset);
    SARObservation_Abridged.addOrigObjectId(builder, origObjectIdOffset);
    SARObservation_Abridged.addSatNo(builder, satNo);
    SARObservation_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    SARObservation_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    SARObservation_Abridged.addId(builder, idOffset);
    SARObservation_Abridged.addDataMode(builder, dataMode);
    return SARObservation_Abridged.endSARObservation_Abridged(builder);
  }

  public static void startSARObservation_Abridged(FlatBufferBuilder builder) { builder.startTable(67); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(3, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(4, origObjectIdOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(5, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(6, origSensorIdOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(7, externalIdOffset, 0); }
  public static void addCollectionId(FlatBufferBuilder builder, int collectionIdOffset) { builder.addOffset(8, collectionIdOffset, 0); }
  public static void addDetectionId(FlatBufferBuilder builder, int detectionIdOffset) { builder.addOffset(9, detectionIdOffset, 0); }
  public static void addCollectionStart(FlatBufferBuilder builder, int collectionStartOffset) { builder.addOffset(10, collectionStartOffset, 0); }
  public static void addCollectionEnd(FlatBufferBuilder builder, int collectionEndOffset) { builder.addOffset(11, collectionEndOffset, 0); }
  public static void addCenterTime(FlatBufferBuilder builder, int centerTimeOffset) { builder.addOffset(12, centerTimeOffset, 0); }
  public static void addDetectionStart(FlatBufferBuilder builder, int detectionStartOffset) { builder.addOffset(13, detectionStartOffset, 0); }
  public static void addDetectionEnd(FlatBufferBuilder builder, int detectionEndOffset) { builder.addOffset(14, detectionEndOffset, 0); }
  public static void addDwellTime(FlatBufferBuilder builder, double dwellTime) { builder.addDouble(15, dwellTime, 0.0); }
  public static void addOrbitState(FlatBufferBuilder builder, int orbitStateOffset) { builder.addOffset(16, orbitStateOffset, 0); }
  public static void addSarMode(FlatBufferBuilder builder, int sarModeOffset) { builder.addOffset(17, sarModeOffset, 0); }
  public static void addOperatingBand(FlatBufferBuilder builder, int operatingBandOffset) { builder.addOffset(18, operatingBandOffset, 0); }
  public static void addOperatingFreq(FlatBufferBuilder builder, double operatingFreq) { builder.addDouble(19, operatingFreq, 0.0); }
  public static void addSnr(FlatBufferBuilder builder, double snr) { builder.addDouble(20, snr, 0.0); }
  public static void addTxPolarization(FlatBufferBuilder builder, int txPolarizationOffset) { builder.addOffset(21, txPolarizationOffset, 0); }
  public static void addRxPolarization(FlatBufferBuilder builder, int rxPolarizationOffset) { builder.addOffset(22, rxPolarizationOffset, 0); }
  public static void addGrazeAngle(FlatBufferBuilder builder, double grazeAngle) { builder.addDouble(23, grazeAngle, 0.0); }
  public static void addIncidenceAngle(FlatBufferBuilder builder, double incidenceAngle) { builder.addDouble(24, incidenceAngle, 0.0); }
  public static void addSquintAngle(FlatBufferBuilder builder, double squintAngle) { builder.addDouble(25, squintAngle, 0.0); }
  public static void addPulseBandwidth(FlatBufferBuilder builder, double pulseBandwidth) { builder.addDouble(26, pulseBandwidth, 0.0); }
  public static void addPulseDuration(FlatBufferBuilder builder, double pulseDuration) { builder.addDouble(27, pulseDuration, 0.0); }
  public static void addContinuousSpotAngle(FlatBufferBuilder builder, double continuousSpotAngle) { builder.addDouble(28, continuousSpotAngle, 0.0); }
  public static void addSlantRange(FlatBufferBuilder builder, double slantRange) { builder.addDouble(29, slantRange, 0.0); }
  public static void addNearRange(FlatBufferBuilder builder, double nearRange) { builder.addDouble(30, nearRange, 0.0); }
  public static void addFarRange(FlatBufferBuilder builder, double farRange) { builder.addDouble(31, farRange, 0.0); }
  public static void addSwathLength(FlatBufferBuilder builder, double swathLength) { builder.addDouble(32, swathLength, 0.0); }
  public static void addAtext(FlatBufferBuilder builder, int atextOffset) { builder.addOffset(33, atextOffset, 0); }
  public static void addAgjson(FlatBufferBuilder builder, int agjsonOffset) { builder.addOffset(34, agjsonOffset, 0); }
  public static void addAtype(FlatBufferBuilder builder, int atypeOffset) { builder.addOffset(35, atypeOffset, 0); }
  public static void addAndims(FlatBufferBuilder builder, int andims) { builder.addInt(36, andims, 0); }
  public static void addAsrid(FlatBufferBuilder builder, int asrid) { builder.addInt(37, asrid, 0); }
  public static void addSpacingRange(FlatBufferBuilder builder, double spacingRange) { builder.addDouble(38, spacingRange, 0.0); }
  public static void addSpacingAzimuth(FlatBufferBuilder builder, double spacingAzimuth) { builder.addDouble(39, spacingAzimuth, 0.0); }
  public static void addLooksAzimuth(FlatBufferBuilder builder, int looksAzimuth) { builder.addInt(40, looksAzimuth, 0); }
  public static void addLooksRange(FlatBufferBuilder builder, int looksRange) { builder.addInt(41, looksRange, 0); }
  public static void addResolutionRange(FlatBufferBuilder builder, double resolutionRange) { builder.addDouble(42, resolutionRange, 0.0); }
  public static void addResolutionAzimuth(FlatBufferBuilder builder, double resolutionAzimuth) { builder.addDouble(43, resolutionAzimuth, 0.0); }
  public static void addObDirection(FlatBufferBuilder builder, int obDirectionOffset) { builder.addOffset(44, obDirectionOffset, 0); }
  public static void addCoordSys(FlatBufferBuilder builder, int coordSysOffset) { builder.addOffset(45, coordSysOffset, 0); }
  public static void addTargetposx(FlatBufferBuilder builder, double targetposx) { builder.addDouble(46, targetposx, 0.0); }
  public static void addTargetposy(FlatBufferBuilder builder, double targetposy) { builder.addDouble(47, targetposy, 0.0); }
  public static void addTargetposz(FlatBufferBuilder builder, double targetposz) { builder.addDouble(48, targetposz, 0.0); }
  public static void addSenalt(FlatBufferBuilder builder, double senalt) { builder.addDouble(49, senalt, 0.0); }
  public static void addSenvelx(FlatBufferBuilder builder, double senvelx) { builder.addDouble(50, senvelx, 0.0); }
  public static void addSenvely(FlatBufferBuilder builder, double senvely) { builder.addDouble(51, senvely, 0.0); }
  public static void addSenvelz(FlatBufferBuilder builder, double senvelz) { builder.addDouble(52, senvelz, 0.0); }
  public static void addSenlatStart(FlatBufferBuilder builder, double senlatStart) { builder.addDouble(53, senlatStart, 0.0); }
  public static void addSenlonStart(FlatBufferBuilder builder, double senlonStart) { builder.addDouble(54, senlonStart, 0.0); }
  public static void addSenlatEnd(FlatBufferBuilder builder, double senlatEnd) { builder.addDouble(55, senlatEnd, 0.0); }
  public static void addSenlonEnd(FlatBufferBuilder builder, double senlonEnd) { builder.addDouble(56, senlonEnd, 0.0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(57, transactionIdOffset, 0); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(58, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(59, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(60, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(61, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(62, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(63, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(64, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(65, sourceDlOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(66, dataMode, 0); }
  public static int endSARObservation_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSARObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SARO"); }
  public static void finishSizePrefixedSARObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SARO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SARObservation_Abridged get(int j) { return get(new SARObservation_Abridged(), j); }
    public SARObservation_Abridged get(SARObservation_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

