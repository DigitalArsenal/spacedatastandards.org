// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Data representing observed short wave infrared (SWIR) measurements.
 */
@SuppressWarnings("unused")
public final class SWIR_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SWIR_Full getRootAsSWIR_Full(ByteBuffer _bb) { return getRootAsSWIR_Full(_bb, new SWIR_Full()); }
  public static SWIR_Full getRootAsSWIR_Full(ByteBuffer _bb, SWIR_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SWIR_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SWIR"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SWIR_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SWIR-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the target on-orbit object.
   * Example: /// Example: 45234
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String onOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer onOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Data timestamp in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double solarPhaseAngle() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft WGS84 latitude, in degrees at obTime. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 70.55208
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft WGS84 longitude at ob time, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 81.18191
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Location/name of the observing sensor.
   * Example: /// Example: AeroTel
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String locationName() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locationNameAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer locationNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * User comments concerning sensor or data limitations.
   * Example: /// Example: Example Comments
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String badWave() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer badWaveAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer badWaveInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Array of wavelengths, in microns. This array should correspond with the same-sized array of absFluxes.
   * Example: /// Example: [1.23, 4.56]
   * Constraints: No constraints specified.
   */
  public String wavelengths(int j) { int o = __offset(24); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int wavelengthsLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public StringVector wavelengthsVector() { return wavelengthsVector(new StringVector()); }
  public StringVector wavelengthsVector(StringVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of absolute flux measurement data, in Watts per square centimeter per micron. This array should correspond with the same-sized array of wavelengths.
   * Example: /// Example: [1.23, 4.56]
   * Constraints: No constraints specified.
   */
  public String absFluxes(int j) { int o = __offset(26); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int absFluxesLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public StringVector absFluxesVector() { return absFluxesVector(new StringVector()); }
  public StringVector absFluxesVector(StringVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of ratio wavelength data. This array should correspond with the same-sized array of fluxRatios.
   * Example: /// Example: [1.23, 4.56]
   * Constraints: No constraints specified.
   */
  public String ratioWavelengths(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ratioWavelengthsLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ratioWavelengthsVector() { return ratioWavelengthsVector(new StringVector()); }
  public StringVector ratioWavelengthsVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of flux ratio data. This array should correspond with the same-sized array of ratioWavelengths.
   * Example: /// Example: [1.23, 4.56]
   * Constraints: No constraints specified.
   */
  public String fluxRatios(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int fluxRatiosLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector fluxRatiosVector() { return fluxRatiosVector(new StringVector()); }
  public StringVector fluxRatiosVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Original object ID or Catalog Number provided by source.
   * Example: /// Example: WildBlue-1
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 25544
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(40); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }

  public static int createSWIR_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int onOrbitOffset,
      int tsOffset,
      double solarPhaseAngle,
      double lat,
      double lon,
      int locationNameOffset,
      int badWaveOffset,
      int wavelengthsOffset,
      int absFluxesOffset,
      int ratioWavelengthsOffset,
      int fluxRatiosOffset,
      int origObjectIdOffset,
      int sourceOffset,
      int originOffset,
      int satNo,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int origNetworkOffset) {
    builder.startTable(22);
    SWIR_Full.addLon(builder, lon);
    SWIR_Full.addLat(builder, lat);
    SWIR_Full.addSolarPhaseAngle(builder, solarPhaseAngle);
    SWIR_Full.addOrigNetwork(builder, origNetworkOffset);
    SWIR_Full.addCreatedBy(builder, createdByOffset);
    SWIR_Full.addCreatedAt(builder, createdAtOffset);
    SWIR_Full.addSatNo(builder, satNo);
    SWIR_Full.addOrigin(builder, originOffset);
    SWIR_Full.addSource(builder, sourceOffset);
    SWIR_Full.addOrigObjectId(builder, origObjectIdOffset);
    SWIR_Full.addFluxRatios(builder, fluxRatiosOffset);
    SWIR_Full.addRatioWavelengths(builder, ratioWavelengthsOffset);
    SWIR_Full.addAbsFluxes(builder, absFluxesOffset);
    SWIR_Full.addWavelengths(builder, wavelengthsOffset);
    SWIR_Full.addBadWave(builder, badWaveOffset);
    SWIR_Full.addLocationName(builder, locationNameOffset);
    SWIR_Full.addTs(builder, tsOffset);
    SWIR_Full.addOnOrbit(builder, onOrbitOffset);
    SWIR_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    SWIR_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SWIR_Full.addId(builder, idOffset);
    SWIR_Full.addDataMode(builder, dataMode);
    return SWIR_Full.endSWIR_Full(builder);
  }

  public static void startSWIR_Full(FlatBufferBuilder builder) { builder.startTable(22); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addOnOrbit(FlatBufferBuilder builder, int onOrbitOffset) { builder.addOffset(3, onOrbitOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(4, tsOffset, 0); }
  public static void addSolarPhaseAngle(FlatBufferBuilder builder, double solarPhaseAngle) { builder.addDouble(5, solarPhaseAngle, 0.0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(6, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(7, lon, 0.0); }
  public static void addLocationName(FlatBufferBuilder builder, int locationNameOffset) { builder.addOffset(8, locationNameOffset, 0); }
  public static void addBadWave(FlatBufferBuilder builder, int badWaveOffset) { builder.addOffset(9, badWaveOffset, 0); }
  public static void addWavelengths(FlatBufferBuilder builder, int wavelengthsOffset) { builder.addOffset(10, wavelengthsOffset, 0); }
  public static int createWavelengthsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startWavelengthsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAbsFluxes(FlatBufferBuilder builder, int absFluxesOffset) { builder.addOffset(11, absFluxesOffset, 0); }
  public static int createAbsFluxesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAbsFluxesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRatioWavelengths(FlatBufferBuilder builder, int ratioWavelengthsOffset) { builder.addOffset(12, ratioWavelengthsOffset, 0); }
  public static int createRatioWavelengthsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRatioWavelengthsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFluxRatios(FlatBufferBuilder builder, int fluxRatiosOffset) { builder.addOffset(13, fluxRatiosOffset, 0); }
  public static int createFluxRatiosVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFluxRatiosVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(14, origObjectIdOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(15, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(16, originOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(17, satNo, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(18, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(19, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(20, createdByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(21, origNetworkOffset, 0); }
  public static int endSWIR_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSWIR_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SWIR"); }
  public static void finishSizePrefixedSWIR_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SWIR"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SWIR_Full get(int j) { return get(new SWIR_Full(), j); }
    public SWIR_Full get(SWIR_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

