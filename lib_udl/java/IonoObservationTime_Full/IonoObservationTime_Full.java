// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Array of times in number of seconds passed since January 1st, 1970  with the same dimensions as power.
 */
@SuppressWarnings("unused")
public final class IonoObservationTime_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationTime_Full getRootAsIonoObservationTime_Full(ByteBuffer _bb) { return getRootAsIonoObservationTime_Full(_bb, new IonoObservationTime_Full()); }
  public static IonoObservationTime_Full getRootAsIonoObservationTime_Full(ByteBuffer _bb, IonoObservationTime_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationTime_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationTime_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Array of integers of the time array dimensions.
   * Example: /// Example: [1, 2]
   * Constraints: No constraints specified.
   */
  public String dimensions(int j) { int o = __offset(4); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int dimensionsLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public StringVector dimensionsVector() { return dimensionsVector(new StringVector()); }
  public StringVector dimensionsVector(StringVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of names for dimensions.
   * Example: /// Example: ['NAME1', 'NAME2']
   * Constraints: No constraints specified.
   */
  public String dimensionName(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int dimensionNameLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector dimensionNameVector() { return dimensionNameVector(new StringVector()); }
  public StringVector dimensionNameVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The notes indicate the scheme and accuracy.
   * Example: /// Example: NOTES
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String notes() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Array of times in number of seconds passed since January 1st, 1970 with the same dimensions as power.
   * Example: /// Example: [[[[[[[0.02, 0.034]]]]]]]
   * Constraints: No constraints specified.
   */
  public String data(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int dataLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public StringVector dataVector() { return dataVector(new StringVector()); }
  public StringVector dataVector(StringVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createIonoObservationTime_Full(FlatBufferBuilder builder,
      int dimensionsOffset,
      int dimensionNameOffset,
      int notesOffset,
      int dataOffset) {
    builder.startTable(4);
    IonoObservationTime_Full.addData(builder, dataOffset);
    IonoObservationTime_Full.addNotes(builder, notesOffset);
    IonoObservationTime_Full.addDimensionName(builder, dimensionNameOffset);
    IonoObservationTime_Full.addDimensions(builder, dimensionsOffset);
    return IonoObservationTime_Full.endIonoObservationTime_Full(builder);
  }

  public static void startIonoObservationTime_Full(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addDimensions(FlatBufferBuilder builder, int dimensionsOffset) { builder.addOffset(0, dimensionsOffset, 0); }
  public static int createDimensionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDimensionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDimensionName(FlatBufferBuilder builder, int dimensionNameOffset) { builder.addOffset(1, dimensionNameOffset, 0); }
  public static int createDimensionNameVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDimensionNameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(2, notesOffset, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(3, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endIonoObservationTime_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationTime_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationTime_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationTime_Full get(int j) { return get(new IonoObservationTime_Full(), j); }
    public IonoObservationTime_Full get(IonoObservationTime_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

