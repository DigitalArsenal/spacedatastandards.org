// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of Requirements associated with this Air Transport Mission.
 */
@SuppressWarnings("unused")
public final class AircraftMissionRequirements_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionRequirements_Full getRootAsAircraftMissionRequirements_Full(ByteBuffer _bb) { return getRootAsAircraftMissionRequirements_Full(_bb, new AircraftMissionRequirements_Full()); }
  public static AircraftMissionRequirements_Full getRootAsAircraftMissionRequirements_Full(ByteBuffer _bb, AircraftMissionRequirements_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AircraftMissionRequirements_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AircraftMissionRequirements_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Global Decision Support System (GDSS) mission requirement identifier.
   * Example: /// Example: 23a1fb67-cc2d-5ebe-6b99-68130cb1aa6c
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String gdssReqId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gdssReqIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer gdssReqIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifier of the onload itinerary location.
   * Example: /// Example: 200
   * Constraints: No constraints specified.
   */
  public int onloadId() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Onload location code.
   * Example: /// Example: KCHS
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String onloadLocode() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer onloadLocodeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer onloadLocodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Identifier of the offload itinerary location.
   * Example: /// Example: 300
   * Constraints: No constraints specified.
   */
  public int offloadId() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Offload location code.
   * Example: /// Example: KHOP
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String offloadLocode() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer offloadLocodeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer offloadLocodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unit line number.
   * Example: /// Example: T01ME01
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String uln() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ulnAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer ulnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Transportation requirement number.
   * Example: /// Example: T01ME01
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String transReqNum() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transReqNumAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer transReqNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Project name.
   * Example: /// Example: CENTINTRA21
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String projName() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer projNameAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer projNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Identification number of the Operation Plan (OPLAN) associated with this mission.
   * Example: /// Example: 5027
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String oplan() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer oplanAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer oplanInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Number of passengers associated with the mission.
   * Example: /// Example: 44
   * Constraints: No constraints specified.
   */
  public int numPax() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of litter patients tasked for the mission.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int numLitter() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of ambulatory patients tasked for the mission.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int numAmbulatory() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of attendants tasked for the mission.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int numAttendant() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Total weight of the bulk cargo, in kilograms.
   * Example: /// Example: 1.3
   * Constraints: No constraints specified.
   */
  public double bulkWeight() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total weight of the oversized cargo, in kilograms.
   * Example: /// Example: 1.3
   * Constraints: No constraints specified.
   */
  public double oversizeWeight() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total weight of the outsize cargo, in kilograms.
   * Example: /// Example: 1.3
   * Constraints: No constraints specified.
   */
  public double outsizeWeight() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Earliest available date the cargo can be picked up.
   * Example: /// Example: 2024-01-01T16:00:00Z
   * Constraints: No constraints specified.
   */
  public String ead() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eadAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer eadInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Latest available date the cargo may be delivered.
   * Example: /// Example: 2024-01-01T16:00:00Z
   * Constraints: No constraints specified.
   */
  public String lad() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ladAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer ladInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }

  public static int createAircraftMissionRequirements_Full(FlatBufferBuilder builder,
      int gdssReqIdOffset,
      int onloadId,
      int onloadLocodeOffset,
      int offloadId,
      int offloadLocodeOffset,
      int ulnOffset,
      int transReqNumOffset,
      int projNameOffset,
      int oplanOffset,
      int numPax,
      int numLitter,
      int numAmbulatory,
      int numAttendant,
      double bulkWeight,
      double oversizeWeight,
      double outsizeWeight,
      int eadOffset,
      int ladOffset) {
    builder.startTable(18);
    AircraftMissionRequirements_Full.addOutsizeWeight(builder, outsizeWeight);
    AircraftMissionRequirements_Full.addOversizeWeight(builder, oversizeWeight);
    AircraftMissionRequirements_Full.addBulkWeight(builder, bulkWeight);
    AircraftMissionRequirements_Full.addLad(builder, ladOffset);
    AircraftMissionRequirements_Full.addEad(builder, eadOffset);
    AircraftMissionRequirements_Full.addNumAttendant(builder, numAttendant);
    AircraftMissionRequirements_Full.addNumAmbulatory(builder, numAmbulatory);
    AircraftMissionRequirements_Full.addNumLitter(builder, numLitter);
    AircraftMissionRequirements_Full.addNumPax(builder, numPax);
    AircraftMissionRequirements_Full.addOplan(builder, oplanOffset);
    AircraftMissionRequirements_Full.addProjName(builder, projNameOffset);
    AircraftMissionRequirements_Full.addTransReqNum(builder, transReqNumOffset);
    AircraftMissionRequirements_Full.addUln(builder, ulnOffset);
    AircraftMissionRequirements_Full.addOffloadLocode(builder, offloadLocodeOffset);
    AircraftMissionRequirements_Full.addOffloadId(builder, offloadId);
    AircraftMissionRequirements_Full.addOnloadLocode(builder, onloadLocodeOffset);
    AircraftMissionRequirements_Full.addOnloadId(builder, onloadId);
    AircraftMissionRequirements_Full.addGdssReqId(builder, gdssReqIdOffset);
    return AircraftMissionRequirements_Full.endAircraftMissionRequirements_Full(builder);
  }

  public static void startAircraftMissionRequirements_Full(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addGdssReqId(FlatBufferBuilder builder, int gdssReqIdOffset) { builder.addOffset(0, gdssReqIdOffset, 0); }
  public static void addOnloadId(FlatBufferBuilder builder, int onloadId) { builder.addInt(1, onloadId, 0); }
  public static void addOnloadLocode(FlatBufferBuilder builder, int onloadLocodeOffset) { builder.addOffset(2, onloadLocodeOffset, 0); }
  public static void addOffloadId(FlatBufferBuilder builder, int offloadId) { builder.addInt(3, offloadId, 0); }
  public static void addOffloadLocode(FlatBufferBuilder builder, int offloadLocodeOffset) { builder.addOffset(4, offloadLocodeOffset, 0); }
  public static void addUln(FlatBufferBuilder builder, int ulnOffset) { builder.addOffset(5, ulnOffset, 0); }
  public static void addTransReqNum(FlatBufferBuilder builder, int transReqNumOffset) { builder.addOffset(6, transReqNumOffset, 0); }
  public static void addProjName(FlatBufferBuilder builder, int projNameOffset) { builder.addOffset(7, projNameOffset, 0); }
  public static void addOplan(FlatBufferBuilder builder, int oplanOffset) { builder.addOffset(8, oplanOffset, 0); }
  public static void addNumPax(FlatBufferBuilder builder, int numPax) { builder.addInt(9, numPax, 0); }
  public static void addNumLitter(FlatBufferBuilder builder, int numLitter) { builder.addInt(10, numLitter, 0); }
  public static void addNumAmbulatory(FlatBufferBuilder builder, int numAmbulatory) { builder.addInt(11, numAmbulatory, 0); }
  public static void addNumAttendant(FlatBufferBuilder builder, int numAttendant) { builder.addInt(12, numAttendant, 0); }
  public static void addBulkWeight(FlatBufferBuilder builder, double bulkWeight) { builder.addDouble(13, bulkWeight, 0.0); }
  public static void addOversizeWeight(FlatBufferBuilder builder, double oversizeWeight) { builder.addDouble(14, oversizeWeight, 0.0); }
  public static void addOutsizeWeight(FlatBufferBuilder builder, double outsizeWeight) { builder.addDouble(15, outsizeWeight, 0.0); }
  public static void addEad(FlatBufferBuilder builder, int eadOffset) { builder.addOffset(16, eadOffset, 0); }
  public static void addLad(FlatBufferBuilder builder, int ladOffset) { builder.addOffset(17, ladOffset, 0); }
  public static int endAircraftMissionRequirements_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraftMissionRequirements_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraftMissionRequirements_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AircraftMissionRequirements_Full get(int j) { return get(new AircraftMissionRequirements_Full(), j); }
    public AircraftMissionRequirements_Full get(AircraftMissionRequirements_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

