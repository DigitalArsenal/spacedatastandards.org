// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A transponder receives and transmits radio signals at a prescribed frequency range. A communications satellite's transponder is the series of interconnected units that form a communications channel between the receiving and the transmitting antennas. It is mainly used in satellite communication to transfer the received signals.
 */
@SuppressWarnings("unused")
public final class Transponder_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Transponder_Abridged getRootAsTransponder_Abridged(ByteBuffer _bb) { return getRootAsTransponder_Abridged(_bb, new Transponder_Abridged()); }
  public static Transponder_Abridged getRootAsTransponder_Abridged(ByteBuffer _bb, Transponder_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Transponder_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "TRAN"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Transponder_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: TRANSPONDER-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * ID of the parent Comm object for this transponder.
   * Example: /// Example: REF-COMM-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idComm() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idCommAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idCommInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Optional name of the transponder.
   * Example: /// Example: AA10
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String name() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Optional external network id as provided data source.
   * Example: /// Example: N-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String nid() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nidAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer nidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional external transponder id as provided data source.
   * Example: /// Example: T-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String tid() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tidAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer tidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Transponder Translation Factor. This is the frequency difference between the uplink received by a satellite, and the downlink transmitted back. It varies satellite to satellite dependent on the mission.
   * Example: /// Example: 1.53261520047876
   * Constraints: No constraints specified.
   */
  public double ttf() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Symbol rate is the number of symbol changes, waveform changes, or signaling events, across the transmission medium per time unit using a digitally modulated signal or a line code. Also measured in Hz.
   * Example: /// Example: 4.0
   * Constraints: No constraints specified.
   */
  public double symbolRate() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Forward error correction, e.g. 0=Auto, 1 = 1/2, 2 = 2/3, 3 = 3/4, 4 = 5/6, 5 = 7/8, 6 = 8/9, 7 = 3/5, 8 = 4/5, 9 = 9/10, 15 = None.
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int fec() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Transponder modulation, e.g. Auto, QPSK, 8PSK.
   * Example: /// Example: Auto
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String modulation() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer modulationAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer modulationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Format.
   * Example: /// Example: format
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String format() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer formatAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer formatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Transponder system, e.g. DVB-S, DVB-S2.
   * Example: /// Example: DVB-S
   * Constraints: Minimum length = 0, Maximum length = 45
   */
  public String system() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer systemAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer systemInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(34); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }

  public static int createTransponder_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int idCommOffset,
      int nameOffset,
      int classificationMarkingOffset,
      int nidOffset,
      int tidOffset,
      double ttf,
      double symbolRate,
      int fec,
      int modulationOffset,
      int formatOffset,
      int systemOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset) {
    builder.startTable(18);
    Transponder_Abridged.addSymbolRate(builder, symbolRate);
    Transponder_Abridged.addTtf(builder, ttf);
    Transponder_Abridged.addCreatedBy(builder, createdByOffset);
    Transponder_Abridged.addCreatedAt(builder, createdAtOffset);
    Transponder_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Transponder_Abridged.addOrigin(builder, originOffset);
    Transponder_Abridged.addSource(builder, sourceOffset);
    Transponder_Abridged.addSystem(builder, systemOffset);
    Transponder_Abridged.addFormat(builder, formatOffset);
    Transponder_Abridged.addModulation(builder, modulationOffset);
    Transponder_Abridged.addFec(builder, fec);
    Transponder_Abridged.addTid(builder, tidOffset);
    Transponder_Abridged.addNid(builder, nidOffset);
    Transponder_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Transponder_Abridged.addName(builder, nameOffset);
    Transponder_Abridged.addIdComm(builder, idCommOffset);
    Transponder_Abridged.addId(builder, idOffset);
    Transponder_Abridged.addDataMode(builder, dataMode);
    return Transponder_Abridged.endTransponder_Abridged(builder);
  }

  public static void startTransponder_Abridged(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdComm(FlatBufferBuilder builder, int idCommOffset) { builder.addOffset(1, idCommOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(2, nameOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(3, classificationMarkingOffset, 0); }
  public static void addNid(FlatBufferBuilder builder, int nidOffset) { builder.addOffset(4, nidOffset, 0); }
  public static void addTid(FlatBufferBuilder builder, int tidOffset) { builder.addOffset(5, tidOffset, 0); }
  public static void addTtf(FlatBufferBuilder builder, double ttf) { builder.addDouble(6, ttf, 0.0); }
  public static void addSymbolRate(FlatBufferBuilder builder, double symbolRate) { builder.addDouble(7, symbolRate, 0.0); }
  public static void addFec(FlatBufferBuilder builder, int fec) { builder.addInt(8, fec, 0); }
  public static void addModulation(FlatBufferBuilder builder, int modulationOffset) { builder.addOffset(9, modulationOffset, 0); }
  public static void addFormat(FlatBufferBuilder builder, int formatOffset) { builder.addOffset(10, formatOffset, 0); }
  public static void addSystem(FlatBufferBuilder builder, int systemOffset) { builder.addOffset(11, systemOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(12, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(13, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(14, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(15, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(16, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(17, createdByOffset, 0); }
  public static int endTransponder_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTransponder_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "TRAN"); }
  public static void finishSizePrefixedTransponder_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "TRAN"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Transponder_Abridged get(int j) { return get(new Transponder_Abridged(), j); }
    public Transponder_Abridged get(Transponder_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

