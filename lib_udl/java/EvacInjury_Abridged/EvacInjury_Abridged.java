// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Injury specifics.
 */
@SuppressWarnings("unused")
public final class EvacInjury_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EvacInjury_Abridged getRootAsEvacInjury_Abridged(ByteBuffer _bb) { return getRootAsEvacInjury_Abridged(_bb, new EvacInjury_Abridged()); }
  public static EvacInjury_Abridged getRootAsEvacInjury_Abridged(ByteBuffer _bb, EvacInjury_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EvacInjury_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EVAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EvacInjury_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Classification of the injury type (ABRASION, AMPUTATION IT, AVULATION, BALLISTIC, BLAST WAVE, BURN 1ST DEGREE, BURN 2ND DEGREE, BURN 3RD DEGREE, BURN INHALATION, BURN LOWER AIRWAY, CHEST FLAIL, CHEST OPEN, DEGLOVING, ECCHYMOSIS, FRACTURE CLOSED, FRACTURE CREPITUS, FRACTURE IT, FRACTURE OPEN, HEMATOMA, IRREGULAR CONSISTENCY, IRREGULAR CONSISTENCY RIDGED, IRREGULAR CONSISTENCY SWOLLEN, IRREGULAR CONSISTENCY SWOLLEN DISTENDED, IRREGULAR CONSISTENCY TENDER, IRREGULAR POSITION, IRREGULAR SHAPE, IRREGULAR SHAPE MISSHAPED, IRREGULAR SHAPE NON SYMMETRICAL, LACERATION, NEUROVASCULAR COMPROMISE, NEUROVASCULAR INTACT, PUNCTURE, SEAT BELT SIGN, STAB, TIC TIM).
   * Example: /// Example: ABRASION
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String type() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Body part location of the injury.  Intended as, but not constrained to, K07.1 Body Location Enumeration (e.g. ANKLE LEFT BACK, ANKLE LEFT FRONT, ANKLE RIGHT BACK, ANKLE RIGHT FRONT, ARM LEFT BACK, ARM LEFT ELBOW BACK, ARM LEFT ELBOW FRONT, ARM LEFT FRONT, ARM LEFT LOWER BACK, etc.).
   * Example: /// Example: ARM LEFT FRONT
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String bodyPart() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bodyPartAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer bodyPartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The time of the injury, in ISO 8601 UTC format.
   * Example: /// Example: 2021-10-15T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String time() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer timeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Additional comments on the patient's injury information.
   * Example: /// Example: Comments on the patient's injury.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String comments() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commentsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer commentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createEvacInjury_Abridged(FlatBufferBuilder builder,
      int typeOffset,
      int bodyPartOffset,
      int timeOffset,
      int commentsOffset) {
    builder.startTable(4);
    EvacInjury_Abridged.addComments(builder, commentsOffset);
    EvacInjury_Abridged.addTime(builder, timeOffset);
    EvacInjury_Abridged.addBodyPart(builder, bodyPartOffset);
    EvacInjury_Abridged.addType(builder, typeOffset);
    return EvacInjury_Abridged.endEvacInjury_Abridged(builder);
  }

  public static void startEvacInjury_Abridged(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(0, typeOffset, 0); }
  public static void addBodyPart(FlatBufferBuilder builder, int bodyPartOffset) { builder.addOffset(1, bodyPartOffset, 0); }
  public static void addTime(FlatBufferBuilder builder, int timeOffset) { builder.addOffset(2, timeOffset, 0); }
  public static void addComments(FlatBufferBuilder builder, int commentsOffset) { builder.addOffset(3, commentsOffset, 0); }
  public static int endEvacInjury_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEvacInjury_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EVAC"); }
  public static void finishSizePrefixedEvacInjury_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EVAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EvacInjury_Abridged get(int j) { return get(new EvacInjury_Abridged(), j); }
    public EvacInjury_Abridged get(EvacInjury_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

