// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Multidimensional array of enums that identifies either classic/basic polarization discrimination “O” or “X” corresponding to ordinary or extraordinary polarizations, respectively. Exclude this enumeration if no classic/basic polarization discrimination is implemented. May accommodate other modes in addition to “O” and “X” with proper documentation in notes field.
 */
@SuppressWarnings("unused")
public final class IonoObservationPolarization_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationPolarization_Ingest getRootAsIonoObservationPolarization_Ingest(ByteBuffer _bb) { return getRootAsIonoObservationPolarization_Ingest(_bb, new IonoObservationPolarization_Ingest()); }
  public static IonoObservationPolarization_Ingest getRootAsIonoObservationPolarization_Ingest(ByteBuffer _bb, IonoObservationPolarization_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationPolarization_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationPolarization_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Notes for the polarization data.
   * Example: /// Example: NOTES
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String notes() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Array of integers for polarization dimensions.
   * Example: /// Example: [1, 2]
   * Constraints: No constraints specified.
   */
  public String dimensions(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int dimensionsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector dimensionsVector() { return dimensionsVector(new StringVector()); }
  public StringVector dimensionsVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of names for dimensions.
   * Example: /// Example: ['NAME1', 'NAME2']
   * Constraints: No constraints specified.
   */
  public String dimensionName(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int dimensionNameLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector dimensionNameVector() { return dimensionNameVector(new StringVector()); }
  public StringVector dimensionNameVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of polarization data.
   * Example: /// Example: [[[[[[['X', 'O']]]]]]]
   * Constraints: No constraints specified.
   */
  public byte data() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createIonoObservationPolarization_Ingest(FlatBufferBuilder builder,
      int notesOffset,
      int dimensionsOffset,
      int dimensionNameOffset,
      byte data) {
    builder.startTable(4);
    IonoObservationPolarization_Ingest.addDimensionName(builder, dimensionNameOffset);
    IonoObservationPolarization_Ingest.addDimensions(builder, dimensionsOffset);
    IonoObservationPolarization_Ingest.addNotes(builder, notesOffset);
    IonoObservationPolarization_Ingest.addData(builder, data);
    return IonoObservationPolarization_Ingest.endIonoObservationPolarization_Ingest(builder);
  }

  public static void startIonoObservationPolarization_Ingest(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(0, notesOffset, 0); }
  public static void addDimensions(FlatBufferBuilder builder, int dimensionsOffset) { builder.addOffset(1, dimensionsOffset, 0); }
  public static int createDimensionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDimensionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDimensionName(FlatBufferBuilder builder, int dimensionNameOffset) { builder.addOffset(2, dimensionNameOffset, 0); }
  public static int createDimensionNameVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDimensionNameVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addData(FlatBufferBuilder builder, byte data) { builder.addByte(3, data, 0); }
  public static int endIonoObservationPolarization_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationPolarization_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationPolarization_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationPolarization_Ingest get(int j) { return get(new IonoObservationPolarization_Ingest(), j); }
    public IonoObservationPolarization_Ingest get(IonoObservationPolarization_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

