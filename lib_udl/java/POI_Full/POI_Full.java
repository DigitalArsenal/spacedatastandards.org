// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
 */
@SuppressWarnings("unused")
public final class POI_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static POI_Full getRootAsPOI_Full(ByteBuffer _bb) { return getRootAsPOI_Full(_bb, new POI_Full()); }
  public static POI_Full getRootAsPOI_Full(ByteBuffer _bb, POI_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean POI_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "POIF"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public POI_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: POI-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
   * Example: /// Example: BDA
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String pps() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ppsAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ppsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional mission ID related to the POI.
   * Example: /// Example: MSN-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String msnid() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnidAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer msnidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Priority of the  POI target object.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int pri() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
   * Example: /// Example: TRK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trkid() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trkidAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer trkidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
   * Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
   * Constraints: No constraints specified.
   */
  public String idWeatherReport(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int idWeatherReportLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector idWeatherReportVector() { return idWeatherReportVector(new StringVector()); }
  public StringVector idWeatherReportVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
   * Example: /// Example: POI-ID
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String poiid() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer poiidAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer poiidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Name of the POI target object.
   * Example: /// Example: POI_NAME
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String name() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Description of the POI target object.
   * Example: /// Example: Description of the object
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String desc() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer descInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
   * Example: /// Example: LIGHT_TANK
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String spec() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer specAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer specInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
   * Example: /// Example: FRIEND
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String ident() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer identAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer identInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
   * Example: /// Example: SURFACE
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String env() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer envAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer envInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
   * Example: /// Example: COMBAT_VEHICLE
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String plat() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer platAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer platInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
   * Example: /// Example: TRAINING
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String activity() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer activityAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer activityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Activity/POI timestamp in ISO8601 UTC format.
   * Example: /// Example: 2020-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Start time of event validity (optional), in ISO8601 UTC format.
   * Example: /// Example: 2020-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String start() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer startInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Stale timestamp (optional), in ISO8601 UTC format.
   * Example: /// Example: 2020-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String stale() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer staleAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer staleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * How the event point was generated, in CoT object heirarchy notation (optional, CoT).
   * Example: /// Example: h-g-i-g-o
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String how() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer howAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer howInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Event type, in CoT object heirarchy notation (optional, CoT).
   * Example: /// Example: a-h-G
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String type() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Point height above ellipsoid (WGS-84), in meters.
   * Example: /// Example: 5.23
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double az() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double el() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Height above lat/lon point, in meters (1-sigma, if representing linear error).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double le() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double ce() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
   * Example: /// Example: [125.5, 85.1, 125.75]
   * Constraints: No constraints specified.
   */
  public String elle(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int elleLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector elleVector() { return elleVector(new StringVector()); }
  public StringVector elleVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
   * Example: /// Example: Contact Info
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String cntct() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cntctAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer cntctInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double conf() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * List of URLs to before/after images of this Point of Interest entity.
   * Example: /// Example: ['URL1', 'URL2']
   * Constraints: No constraints specified.
   */
  public String urls(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int urlsLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector urlsVector() { return urlsVector(new StringVector()); }
  public StringVector urlsVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String area() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer areaAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer areaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String atext() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atextAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer atextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: No constraints specified.
   */
  public String agjson() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agjsonAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer agjsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Type of region as projected on the ground.
   * Example: /// Example: Type1
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String atype() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atypeAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer atypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int andims() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int asrid() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(86); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
   * Example: /// Example: ['GROUP1', 'GROUP2']
   * Constraints: No constraints specified.
   */
  public String groups(int j) { int o = __offset(90); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int groupsLength() { int o = __offset(90); return o != 0 ? __vector_len(o) : 0; }
  public StringVector groupsVector() { return groupsVector(new StringVector()); }
  public StringVector groupsVector(StringVector obj) { int o = __offset(90); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * ID/name of the platform or entity providing the POI data.
   * Example: /// Example: PLATFORM_NAME
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String asset() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer assetAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer assetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(94); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(94); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(94); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['TYPE1', 'TYPE2']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(96); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(96); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(96); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
   * Example: /// Example: ['ID1', 'ID2']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(98); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(98); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(98); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The Basic Encyclopedia Number associated with the POI, if applicable.
   * Example: /// Example: 0427RT1030
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String beNumber() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer beNumberAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer beNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double orientation() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }

  public static int createPOI_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int ppsOffset,
      int msnidOffset,
      int pri,
      int trkidOffset,
      int idWeatherReportOffset,
      int poiidOffset,
      int nameOffset,
      int descOffset,
      int specOffset,
      int identOffset,
      int envOffset,
      int platOffset,
      int activityOffset,
      int tsOffset,
      int startOffset,
      int staleOffset,
      int howOffset,
      int typeOffset,
      double lat,
      double lon,
      double alt,
      double az,
      double el,
      double le,
      double ce,
      int elleOffset,
      int cntctOffset,
      double conf,
      int urlsOffset,
      int areaOffset,
      int atextOffset,
      int agjsonOffset,
      int atypeOffset,
      int andims,
      int asrid,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      byte dataMode,
      int originOffset,
      int groupsOffset,
      int assetOffset,
      int tagsOffset,
      int srcTypsOffset,
      int srcIdsOffset,
      int beNumberOffset,
      double orientation,
      int origNetworkOffset,
      int transactionIdOffset) {
    builder.startTable(52);
    POI_Full.addOrientation(builder, orientation);
    POI_Full.addConf(builder, conf);
    POI_Full.addCe(builder, ce);
    POI_Full.addLe(builder, le);
    POI_Full.addEl(builder, el);
    POI_Full.addAz(builder, az);
    POI_Full.addAlt(builder, alt);
    POI_Full.addLon(builder, lon);
    POI_Full.addLat(builder, lat);
    POI_Full.addTransactionId(builder, transactionIdOffset);
    POI_Full.addOrigNetwork(builder, origNetworkOffset);
    POI_Full.addBeNumber(builder, beNumberOffset);
    POI_Full.addSrcIds(builder, srcIdsOffset);
    POI_Full.addSrcTyps(builder, srcTypsOffset);
    POI_Full.addTags(builder, tagsOffset);
    POI_Full.addAsset(builder, assetOffset);
    POI_Full.addGroups(builder, groupsOffset);
    POI_Full.addOrigin(builder, originOffset);
    POI_Full.addSource(builder, sourceOffset);
    POI_Full.addSourceDl(builder, sourceDlOffset);
    POI_Full.addCreatedBy(builder, createdByOffset);
    POI_Full.addCreatedAt(builder, createdAtOffset);
    POI_Full.addAsrid(builder, asrid);
    POI_Full.addAndims(builder, andims);
    POI_Full.addAtype(builder, atypeOffset);
    POI_Full.addAgjson(builder, agjsonOffset);
    POI_Full.addAtext(builder, atextOffset);
    POI_Full.addArea(builder, areaOffset);
    POI_Full.addUrls(builder, urlsOffset);
    POI_Full.addCntct(builder, cntctOffset);
    POI_Full.addElle(builder, elleOffset);
    POI_Full.addType(builder, typeOffset);
    POI_Full.addHow(builder, howOffset);
    POI_Full.addStale(builder, staleOffset);
    POI_Full.addStart(builder, startOffset);
    POI_Full.addTs(builder, tsOffset);
    POI_Full.addActivity(builder, activityOffset);
    POI_Full.addPlat(builder, platOffset);
    POI_Full.addEnv(builder, envOffset);
    POI_Full.addIdent(builder, identOffset);
    POI_Full.addSpec(builder, specOffset);
    POI_Full.addDesc(builder, descOffset);
    POI_Full.addName(builder, nameOffset);
    POI_Full.addPoiid(builder, poiidOffset);
    POI_Full.addIdWeatherReport(builder, idWeatherReportOffset);
    POI_Full.addTrkid(builder, trkidOffset);
    POI_Full.addPri(builder, pri);
    POI_Full.addMsnid(builder, msnidOffset);
    POI_Full.addPps(builder, ppsOffset);
    POI_Full.addClassificationMarking(builder, classificationMarkingOffset);
    POI_Full.addId(builder, idOffset);
    POI_Full.addDataMode(builder, dataMode);
    return POI_Full.endPOI_Full(builder);
  }

  public static void startPOI_Full(FlatBufferBuilder builder) { builder.startTable(52); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addPps(FlatBufferBuilder builder, int ppsOffset) { builder.addOffset(2, ppsOffset, 0); }
  public static void addMsnid(FlatBufferBuilder builder, int msnidOffset) { builder.addOffset(3, msnidOffset, 0); }
  public static void addPri(FlatBufferBuilder builder, int pri) { builder.addInt(4, pri, 0); }
  public static void addTrkid(FlatBufferBuilder builder, int trkidOffset) { builder.addOffset(5, trkidOffset, 0); }
  public static void addIdWeatherReport(FlatBufferBuilder builder, int idWeatherReportOffset) { builder.addOffset(6, idWeatherReportOffset, 0); }
  public static int createIdWeatherReportVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIdWeatherReportVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPoiid(FlatBufferBuilder builder, int poiidOffset) { builder.addOffset(7, poiidOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(8, nameOffset, 0); }
  public static void addDesc(FlatBufferBuilder builder, int descOffset) { builder.addOffset(9, descOffset, 0); }
  public static void addSpec(FlatBufferBuilder builder, int specOffset) { builder.addOffset(10, specOffset, 0); }
  public static void addIdent(FlatBufferBuilder builder, int identOffset) { builder.addOffset(11, identOffset, 0); }
  public static void addEnv(FlatBufferBuilder builder, int envOffset) { builder.addOffset(12, envOffset, 0); }
  public static void addPlat(FlatBufferBuilder builder, int platOffset) { builder.addOffset(13, platOffset, 0); }
  public static void addActivity(FlatBufferBuilder builder, int activityOffset) { builder.addOffset(14, activityOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(15, tsOffset, 0); }
  public static void addStart(FlatBufferBuilder builder, int startOffset) { builder.addOffset(16, startOffset, 0); }
  public static void addStale(FlatBufferBuilder builder, int staleOffset) { builder.addOffset(17, staleOffset, 0); }
  public static void addHow(FlatBufferBuilder builder, int howOffset) { builder.addOffset(18, howOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(19, typeOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(20, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(21, lon, 0.0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(22, alt, 0.0); }
  public static void addAz(FlatBufferBuilder builder, double az) { builder.addDouble(23, az, 0.0); }
  public static void addEl(FlatBufferBuilder builder, double el) { builder.addDouble(24, el, 0.0); }
  public static void addLe(FlatBufferBuilder builder, double le) { builder.addDouble(25, le, 0.0); }
  public static void addCe(FlatBufferBuilder builder, double ce) { builder.addDouble(26, ce, 0.0); }
  public static void addElle(FlatBufferBuilder builder, int elleOffset) { builder.addOffset(27, elleOffset, 0); }
  public static int createElleVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startElleVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCntct(FlatBufferBuilder builder, int cntctOffset) { builder.addOffset(28, cntctOffset, 0); }
  public static void addConf(FlatBufferBuilder builder, double conf) { builder.addDouble(29, conf, 0.0); }
  public static void addUrls(FlatBufferBuilder builder, int urlsOffset) { builder.addOffset(30, urlsOffset, 0); }
  public static int createUrlsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUrlsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addArea(FlatBufferBuilder builder, int areaOffset) { builder.addOffset(31, areaOffset, 0); }
  public static void addAtext(FlatBufferBuilder builder, int atextOffset) { builder.addOffset(32, atextOffset, 0); }
  public static void addAgjson(FlatBufferBuilder builder, int agjsonOffset) { builder.addOffset(33, agjsonOffset, 0); }
  public static void addAtype(FlatBufferBuilder builder, int atypeOffset) { builder.addOffset(34, atypeOffset, 0); }
  public static void addAndims(FlatBufferBuilder builder, int andims) { builder.addInt(35, andims, 0); }
  public static void addAsrid(FlatBufferBuilder builder, int asrid) { builder.addInt(36, asrid, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(37, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(38, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(39, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(40, sourceOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(41, dataMode, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(42, originOffset, 0); }
  public static void addGroups(FlatBufferBuilder builder, int groupsOffset) { builder.addOffset(43, groupsOffset, 0); }
  public static int createGroupsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGroupsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAsset(FlatBufferBuilder builder, int assetOffset) { builder.addOffset(44, assetOffset, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(45, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(46, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(47, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBeNumber(FlatBufferBuilder builder, int beNumberOffset) { builder.addOffset(48, beNumberOffset, 0); }
  public static void addOrientation(FlatBufferBuilder builder, double orientation) { builder.addDouble(49, orientation, 0.0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(50, origNetworkOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(51, transactionIdOffset, 0); }
  public static int endPOI_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPOI_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "POIF"); }
  public static void finishSizePrefixedPOI_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "POIF"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public POI_Full get(int j) { return get(new POI_Full(), j); }
    public POI_Full get(POI_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

