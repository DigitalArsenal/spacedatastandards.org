// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
 */
@SuppressWarnings("unused")
public final class AirspaceControlMeansStatus_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirspaceControlMeansStatus_Full getRootAsAirspaceControlMeansStatus_Full(ByteBuffer _bb) { return getRootAsAirspaceControlMeansStatus_Full(_bb, new AirspaceControlMeansStatus_Full()); }
  public static AirspaceControlMeansStatus_Full getRootAsAirspaceControlMeansStatus_Full(ByteBuffer _bb, AirspaceControlMeansStatus_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirspaceControlMeansStatus_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirspaceControlMeansStatus_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
   * Example: /// Example: ADD
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String cmStat() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cmStatAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer cmStatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
   * Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
   * Constraints: No constraints specified.
   */
  public String cmStatId(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int cmStatIdLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector cmStatIdVector() { return cmStatIdVector(new StringVector()); }
  public StringVector cmStatIdVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String airspaceControlMeans(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int airspaceControlMeansLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector airspaceControlMeansVector() { return airspaceControlMeansVector(new StringVector()); }
  public StringVector airspaceControlMeansVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAirspaceControlMeansStatus_Full(FlatBufferBuilder builder,
      int cmStatOffset,
      int cmStatIdOffset,
      int airspaceControlMeansOffset) {
    builder.startTable(3);
    AirspaceControlMeansStatus_Full.addAirspaceControlMeans(builder, airspaceControlMeansOffset);
    AirspaceControlMeansStatus_Full.addCmStatId(builder, cmStatIdOffset);
    AirspaceControlMeansStatus_Full.addCmStat(builder, cmStatOffset);
    return AirspaceControlMeansStatus_Full.endAirspaceControlMeansStatus_Full(builder);
  }

  public static void startAirspaceControlMeansStatus_Full(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addCmStat(FlatBufferBuilder builder, int cmStatOffset) { builder.addOffset(0, cmStatOffset, 0); }
  public static void addCmStatId(FlatBufferBuilder builder, int cmStatIdOffset) { builder.addOffset(1, cmStatIdOffset, 0); }
  public static int createCmStatIdVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCmStatIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAirspaceControlMeans(FlatBufferBuilder builder, int airspaceControlMeansOffset) { builder.addOffset(2, airspaceControlMeansOffset, 0); }
  public static int createAirspaceControlMeansVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAirspaceControlMeansVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAirspaceControlMeansStatus_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirspaceControlMeansStatus_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRS"); }
  public static void finishSizePrefixedAirspaceControlMeansStatus_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirspaceControlMeansStatus_Full get(int j) { return get(new AirspaceControlMeansStatus_Full(), j); }
    public AirspaceControlMeansStatus_Full get(AirspaceControlMeansStatus_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

