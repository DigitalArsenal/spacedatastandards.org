// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of space weather/solar, geomagnetic, and radiation belt indices.
 */
@SuppressWarnings("unused")
public final class SGI_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SGI_Abridged getRootAsSGI_Abridged(ByteBuffer _bb) { return getRootAsSGI_Abridged(_bb, new SGI_Abridged()); }
  public static SGI_Abridged getRootAsSGI_Abridged(ByteBuffer _bb, SGI_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SGI_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SGIA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SGI_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SGI-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * ISO8601 UTC Time the data was received and processed from the source. Typically a source provides data for a date window with each transmission including past, present, and future predicted values.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String effectiveDate() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer effectiveDateAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer effectiveDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * ISO8601 UTC Time of the index value. This could be a past, current, or future predicted value. Note: sgiDate defines the start time of the time window for this  data record.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String sgiDate() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sgiDateAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer sgiDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The type of data contained in this record (e.g. HASDM, JBH09, K-Index, PSD-dB, RBI, RFI-SFU, etc).
   * Example: /// Example: JBH09
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String type() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * State indicating Issued (I), Nowcast (N), or Predicted (P) values for this record.
   * Example: /// Example: I
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public byte state() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The name/location of the station that collected the geomagnetic data for this record.
   * Example: /// Example: Boulder
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String stationName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stationNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer stationNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: 57c96c97-e076-48af-a068-73ee2cb37e65
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional identifier provided by the reporting source to indicate the sensor identifier which produced this data. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The transmitted DCA mode of the record (1-3).
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int mode() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The precedence of data in this record (O = Immediate, P = Priority, R = Routine, Y = Emergency, Z = Flash).
   * Example: /// Example: R
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public byte precedence() { int o = __offset(24); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Array containing the degree of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
   * Example: /// Example: [1, 2, 3]
   * Constraints: No constraints specified.
   */
  public String coeffDegree(int j) { int o = __offset(26); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int coeffDegreeLength() { int o = __offset(26); return o != 0 ? __vector_len(o) : 0; }
  public StringVector coeffDegreeVector() { return coeffDegreeVector(new StringVector()); }
  public StringVector coeffDegreeVector(StringVector obj) { int o = __offset(26); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array containing the order of the temperature coefficients. The coeffDegree and coeffOrder arrays must be the same length.
   * Example: /// Example: [1, 2, 3]
   * Constraints: No constraints specified.
   */
  public String coeffOrder(int j) { int o = __offset(28); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int coeffOrderLength() { int o = __offset(28); return o != 0 ? __vector_len(o) : 0; }
  public StringVector coeffOrderVector() { return coeffOrderVector(new StringVector()); }
  public StringVector coeffOrderVector(StringVector obj) { int o = __offset(28); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array containing the cosine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
   * Example: /// Example: [1.23, 342.3, 1.32]
   * Constraints: No constraints specified.
   */
  public String ctce(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ctceLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ctceVector() { return ctceVector(new StringVector()); }
  public StringVector ctceVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array containing the sine spherical-harmonic coefficients for Exospheric temperature (DTC) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
   * Example: /// Example: [1.23, 342.3, 1.32]
   * Constraints: No constraints specified.
   */
  public String stce(int j) { int o = __offset(32); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int stceLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public StringVector stceVector() { return stceVector(new StringVector()); }
  public StringVector stceVector(StringVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array containing the cosine spherical-harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
   * Example: /// Example: [1.23, 342.3, 1.32]
   * Constraints: No constraints specified.
   */
  public String ctci(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ctciLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ctciVector() { return ctciVector(new StringVector()); }
  public StringVector ctciVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array containing the sine spherical harmonic coefficients for Inflection temperature (DTX) difference.  Each array element corresponds to the positional index of the coeffDegree and coeffOrder arrays.
   * Example: /// Example: [1.23, 342.3, 1.32]
   * Constraints: No constraints specified.
   */
  public String stci(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int stciLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector stciVector() { return stciVector(new StringVector()); }
  public StringVector stciVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Extreme Ultraviolet (EUV) proxy, E10.7, in x10-22 Watts per meter squared per Hertz, is the integrated solar EUV energy flux at the top of atmosphere and normalized to solar flux units.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double e10() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * E54 (E10-Bar), in x10-22 Watts per meter squared per Hertz, uses the past 54-days E10 values to determine the E10 average.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double e54() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Daily S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double s10() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 54 day S10.7 index for >200 km heating of O by solar chromosphere. 28.4-30.4 nm emissions in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double s54() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Daily M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double m10() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 54 day M10.7 index for 100-110 km heating of O2 by solar photosphere. 160 nm SRC emissions in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double m54() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Daily Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double y10() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 54 day Y10.7 index for 85-90 km heating of N2, O2, H2O, NO by solar coronal. 0.1-0.8 nm and Lya 121 nm emissions in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double y54() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Daily solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double f10() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 54 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double f54() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 81 day solar 10.7 cm radio flux in x10-22 Watts per meter squared per Hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double f81() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Ap is the planetary geomagnetic 2 nT index (00-21 UT) for the timespan specified in apDuration. If apDuration is null, a 3 hour duration should be assumed.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double ap() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The time, in hours, for which the Ap index value is valid. If null, a span of 3 hours is assumed.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int apDuration() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum measured K-Index at the associated station during the kpDuration timespan. The K-Index is a unitless measure (0 - 9) of the deviation in the Earth's magnetic field from normal at the station geographic location, with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int kIndex() { int o = __offset(64); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The Planetary K-index (Kp) over the kpDuration timespan. The Kp-Index is the average K-Index for the entire Earth, utilizing a unitless scale (0-9, in incremenets of 1/3), with 0 indicating the absence of geomagnetic disturbance, and 9 indicating the most significant disturbance. If kpDuration is null, a 3 hour duration should be assumed.
   * Example: /// Example: 4.66
   * Constraints: No constraints specified.
   */
  public double kp() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The time, in hours, over which the K, Kp, and/or gamma index values are measured.  If null, a span of 3 hours is assumed.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int kpDuration() { int o = __offset(68); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The maximum measured gamma deflection during the kpDuration timespan. If kpDuration is null, a 3 hour duration should be assumed.
   * Example: /// Example: 25
   * Constraints: No constraints specified.
   */
  public int gamma() { int o = __offset(70); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Disturbance Storm Time geomagnetic index in nT.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double dst() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * delta exospheric temperature correction in units of K.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double dtc() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Region code for the associated radiation belt index. This is the code associated with the corresponding radiation belt location. See the provider card for reference to specific region code definitions.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int rbRegionCode() { int o = __offset(76); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The value of the radiation belt index. This is the ratio of current intensity of a radiation belt to long-term average value. It's long-term average should be close to 1. Depending on the type of belt sensor, this ratio may measure Flux (number of particles / (cm^2 sec energy solid-angle)), dose rate (rad per second), or relative counts of particles per time (counts per second). The index value may also be normalized, the normalization value typically represents an average of the sensor measurements taken within a region over a given time interval. See the normFactor field for the specific normalization factor, if provided.
   * Example: /// Example: 1.02947164506
   * Constraints: No constraints specified.
   */
  public double rbIndex() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The normalization factor that has already been applied to the index value prior to record ingest. Typically used to normalize the index value to a particular interval. Units of the normalization factor may vary depending on the provider of this data (REACH, POES, CEASE3, etc.).
   * Example: /// Example: 2.12679e-07
   * Constraints: No constraints specified.
   */
  public double normFactor() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The timespan over which the associated radiation belt index is factored. If rbDuration is null, a 24 hour duration should be assumed. Note: rbDuration defines the length of the time window for this data record. The time window start time is defined by sgiDate, and the time window end time is defined by sgiDate plus rbDuration.
   * Example: /// Example: 24
   * Constraints: No constraints specified.
   */
  public int rbDuration() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Signal analyzer's input attenuation level, in decibels. Attenuation is a setting on the hardware that measures the power of a signal.
   * Example: /// Example: 5.1
   * Constraints: No constraints specified.
   */
  public double analyzerAttenuation() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: rawFileURI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(96); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }

  public static int createSGI_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int effectiveDateOffset,
      int sgiDateOffset,
      int typeOffset,
      byte state,
      int stationNameOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int mode,
      byte precedence,
      int coeffDegreeOffset,
      int coeffOrderOffset,
      int ctceOffset,
      int stceOffset,
      int ctciOffset,
      int stciOffset,
      double e10,
      double e54,
      double s10,
      double s54,
      double m10,
      double m54,
      double y10,
      double y54,
      double f10,
      double f54,
      double f81,
      double ap,
      int apDuration,
      int kIndex,
      double kp,
      int kpDuration,
      int gamma,
      double dst,
      double dtc,
      int rbRegionCode,
      double rbIndex,
      double normFactor,
      int rbDuration,
      double analyzerAttenuation,
      int rawFileUriOffset,
      int transactionIdOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset) {
    builder.startTable(49);
    SGI_Abridged.addAnalyzerAttenuation(builder, analyzerAttenuation);
    SGI_Abridged.addNormFactor(builder, normFactor);
    SGI_Abridged.addRbIndex(builder, rbIndex);
    SGI_Abridged.addDtc(builder, dtc);
    SGI_Abridged.addDst(builder, dst);
    SGI_Abridged.addKp(builder, kp);
    SGI_Abridged.addAp(builder, ap);
    SGI_Abridged.addF81(builder, f81);
    SGI_Abridged.addF54(builder, f54);
    SGI_Abridged.addF10(builder, f10);
    SGI_Abridged.addY54(builder, y54);
    SGI_Abridged.addY10(builder, y10);
    SGI_Abridged.addM54(builder, m54);
    SGI_Abridged.addM10(builder, m10);
    SGI_Abridged.addS54(builder, s54);
    SGI_Abridged.addS10(builder, s10);
    SGI_Abridged.addE54(builder, e54);
    SGI_Abridged.addE10(builder, e10);
    SGI_Abridged.addCreatedBy(builder, createdByOffset);
    SGI_Abridged.addCreatedAt(builder, createdAtOffset);
    SGI_Abridged.addOrigNetwork(builder, origNetworkOffset);
    SGI_Abridged.addOrigin(builder, originOffset);
    SGI_Abridged.addSource(builder, sourceOffset);
    SGI_Abridged.addTransactionId(builder, transactionIdOffset);
    SGI_Abridged.addRawFileUri(builder, rawFileUriOffset);
    SGI_Abridged.addRbDuration(builder, rbDuration);
    SGI_Abridged.addRbRegionCode(builder, rbRegionCode);
    SGI_Abridged.addGamma(builder, gamma);
    SGI_Abridged.addKpDuration(builder, kpDuration);
    SGI_Abridged.addKIndex(builder, kIndex);
    SGI_Abridged.addApDuration(builder, apDuration);
    SGI_Abridged.addStci(builder, stciOffset);
    SGI_Abridged.addCtci(builder, ctciOffset);
    SGI_Abridged.addStce(builder, stceOffset);
    SGI_Abridged.addCtce(builder, ctceOffset);
    SGI_Abridged.addCoeffOrder(builder, coeffOrderOffset);
    SGI_Abridged.addCoeffDegree(builder, coeffDegreeOffset);
    SGI_Abridged.addMode(builder, mode);
    SGI_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    SGI_Abridged.addIdSensor(builder, idSensorOffset);
    SGI_Abridged.addStationName(builder, stationNameOffset);
    SGI_Abridged.addType(builder, typeOffset);
    SGI_Abridged.addSgiDate(builder, sgiDateOffset);
    SGI_Abridged.addEffectiveDate(builder, effectiveDateOffset);
    SGI_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    SGI_Abridged.addId(builder, idOffset);
    SGI_Abridged.addDataMode(builder, dataMode);
    SGI_Abridged.addPrecedence(builder, precedence);
    SGI_Abridged.addState(builder, state);
    return SGI_Abridged.endSGI_Abridged(builder);
  }

  public static void startSGI_Abridged(FlatBufferBuilder builder) { builder.startTable(49); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addEffectiveDate(FlatBufferBuilder builder, int effectiveDateOffset) { builder.addOffset(2, effectiveDateOffset, 0); }
  public static void addSgiDate(FlatBufferBuilder builder, int sgiDateOffset) { builder.addOffset(3, sgiDateOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(4, typeOffset, 0); }
  public static void addState(FlatBufferBuilder builder, byte state) { builder.addByte(5, state, 0); }
  public static void addStationName(FlatBufferBuilder builder, int stationNameOffset) { builder.addOffset(6, stationNameOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(7, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(8, origSensorIdOffset, 0); }
  public static void addMode(FlatBufferBuilder builder, int mode) { builder.addInt(9, mode, 0); }
  public static void addPrecedence(FlatBufferBuilder builder, byte precedence) { builder.addByte(10, precedence, 0); }
  public static void addCoeffDegree(FlatBufferBuilder builder, int coeffDegreeOffset) { builder.addOffset(11, coeffDegreeOffset, 0); }
  public static int createCoeffDegreeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCoeffDegreeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCoeffOrder(FlatBufferBuilder builder, int coeffOrderOffset) { builder.addOffset(12, coeffOrderOffset, 0); }
  public static int createCoeffOrderVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCoeffOrderVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCtce(FlatBufferBuilder builder, int ctceOffset) { builder.addOffset(13, ctceOffset, 0); }
  public static int createCtceVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCtceVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStce(FlatBufferBuilder builder, int stceOffset) { builder.addOffset(14, stceOffset, 0); }
  public static int createStceVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStceVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCtci(FlatBufferBuilder builder, int ctciOffset) { builder.addOffset(15, ctciOffset, 0); }
  public static int createCtciVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCtciVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStci(FlatBufferBuilder builder, int stciOffset) { builder.addOffset(16, stciOffset, 0); }
  public static int createStciVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStciVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addE10(FlatBufferBuilder builder, double e10) { builder.addDouble(17, e10, 0.0); }
  public static void addE54(FlatBufferBuilder builder, double e54) { builder.addDouble(18, e54, 0.0); }
  public static void addS10(FlatBufferBuilder builder, double s10) { builder.addDouble(19, s10, 0.0); }
  public static void addS54(FlatBufferBuilder builder, double s54) { builder.addDouble(20, s54, 0.0); }
  public static void addM10(FlatBufferBuilder builder, double m10) { builder.addDouble(21, m10, 0.0); }
  public static void addM54(FlatBufferBuilder builder, double m54) { builder.addDouble(22, m54, 0.0); }
  public static void addY10(FlatBufferBuilder builder, double y10) { builder.addDouble(23, y10, 0.0); }
  public static void addY54(FlatBufferBuilder builder, double y54) { builder.addDouble(24, y54, 0.0); }
  public static void addF10(FlatBufferBuilder builder, double f10) { builder.addDouble(25, f10, 0.0); }
  public static void addF54(FlatBufferBuilder builder, double f54) { builder.addDouble(26, f54, 0.0); }
  public static void addF81(FlatBufferBuilder builder, double f81) { builder.addDouble(27, f81, 0.0); }
  public static void addAp(FlatBufferBuilder builder, double ap) { builder.addDouble(28, ap, 0.0); }
  public static void addApDuration(FlatBufferBuilder builder, int apDuration) { builder.addInt(29, apDuration, 0); }
  public static void addKIndex(FlatBufferBuilder builder, int kIndex) { builder.addInt(30, kIndex, 0); }
  public static void addKp(FlatBufferBuilder builder, double kp) { builder.addDouble(31, kp, 0.0); }
  public static void addKpDuration(FlatBufferBuilder builder, int kpDuration) { builder.addInt(32, kpDuration, 0); }
  public static void addGamma(FlatBufferBuilder builder, int gamma) { builder.addInt(33, gamma, 0); }
  public static void addDst(FlatBufferBuilder builder, double dst) { builder.addDouble(34, dst, 0.0); }
  public static void addDtc(FlatBufferBuilder builder, double dtc) { builder.addDouble(35, dtc, 0.0); }
  public static void addRbRegionCode(FlatBufferBuilder builder, int rbRegionCode) { builder.addInt(36, rbRegionCode, 0); }
  public static void addRbIndex(FlatBufferBuilder builder, double rbIndex) { builder.addDouble(37, rbIndex, 0.0); }
  public static void addNormFactor(FlatBufferBuilder builder, double normFactor) { builder.addDouble(38, normFactor, 0.0); }
  public static void addRbDuration(FlatBufferBuilder builder, int rbDuration) { builder.addInt(39, rbDuration, 0); }
  public static void addAnalyzerAttenuation(FlatBufferBuilder builder, double analyzerAttenuation) { builder.addDouble(40, analyzerAttenuation, 0.0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(41, rawFileUriOffset, 0); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(42, transactionIdOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(43, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(44, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(45, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(46, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(47, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(48, createdByOffset, 0); }
  public static int endSGI_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSGI_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SGIA"); }
  public static void finishSizePrefixedSGI_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SGIA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SGI_Abridged get(int j) { return get(new SGI_Abridged(), j); }
    public SGI_Abridged get(SGI_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

