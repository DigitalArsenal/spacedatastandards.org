// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
 */
@SuppressWarnings("unused")
public final class RFBand_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static RFBand_Abridged getRootAsRFBand_Abridged(ByteBuffer _bb) { return getRootAsRFBand_Abridged(_bb, new RFBand_Abridged()); }
  public static RFBand_Abridged getRootAsRFBand_Abridged(ByteBuffer _bb, RFBand_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean RFBand_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "RFBA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RFBand_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: RFBAND-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Unique identifier of the parent Entity which uses this band.
   * Example: /// Example: ENTITY-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idEntity() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idEntityAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idEntityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * RF Band name.
   * Example: /// Example: BAND_NAME
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String name() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
   * Example: /// Example: Ku
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String band() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bandAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer bandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * RF Band mode (e.g. TX, RX).
   * Example: /// Example: TX
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public byte mode() { int o = __offset(14); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
   * Example: /// Example: TTC
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public byte purpose() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Start/minimum of transmit RF frequency range, if applicable, in Mhz.
   * Example: /// Example: 50.23
   * Constraints: No constraints specified.
   */
  public double freqMin() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * End/maximum of transmit RF frequency range, if applicable, in Mhz.
   * Example: /// Example: 2000.23
   * Constraints: No constraints specified.
   */
  public double freqMax() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Center frequency of RF frequency range, if applicable, in Mhz.
   * Example: /// Example: 1000.23
   * Constraints: No constraints specified.
   */
  public double centerFreq() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * RF Range maximum gain, in dBi.
   * Example: /// Example: 120.23
   * Constraints: No constraints specified.
   */
  public double peakGain() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * RF Range edge gain, in dBi.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double edgeGain() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * RF Band frequency range bandwidth in Mhz.
   * Example: /// Example: 100.23
   * Constraints: No constraints specified.
   */
  public double bandwidth() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double beamwidth() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
   * Example: /// Example: H
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public byte polarization() { int o = __offset(32); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
   * Example: /// Example: 2.23
   * Constraints: No constraints specified.
   */
  public double erp() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
   * Example: /// Example: 2.23
   * Constraints: No constraints specified.
   */
  public double eirp() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(42); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }

  public static int createRFBand_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int idEntityOffset,
      int classificationMarkingOffset,
      int nameOffset,
      int bandOffset,
      byte mode,
      byte purpose,
      double freqMin,
      double freqMax,
      double centerFreq,
      double peakGain,
      double edgeGain,
      double bandwidth,
      double beamwidth,
      byte polarization,
      double erp,
      double eirp,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int origNetworkOffset) {
    builder.startTable(23);
    RFBand_Abridged.addEirp(builder, eirp);
    RFBand_Abridged.addErp(builder, erp);
    RFBand_Abridged.addBeamwidth(builder, beamwidth);
    RFBand_Abridged.addBandwidth(builder, bandwidth);
    RFBand_Abridged.addEdgeGain(builder, edgeGain);
    RFBand_Abridged.addPeakGain(builder, peakGain);
    RFBand_Abridged.addCenterFreq(builder, centerFreq);
    RFBand_Abridged.addFreqMax(builder, freqMax);
    RFBand_Abridged.addFreqMin(builder, freqMin);
    RFBand_Abridged.addOrigNetwork(builder, origNetworkOffset);
    RFBand_Abridged.addCreatedBy(builder, createdByOffset);
    RFBand_Abridged.addCreatedAt(builder, createdAtOffset);
    RFBand_Abridged.addOrigin(builder, originOffset);
    RFBand_Abridged.addSource(builder, sourceOffset);
    RFBand_Abridged.addBand(builder, bandOffset);
    RFBand_Abridged.addName(builder, nameOffset);
    RFBand_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    RFBand_Abridged.addIdEntity(builder, idEntityOffset);
    RFBand_Abridged.addId(builder, idOffset);
    RFBand_Abridged.addDataMode(builder, dataMode);
    RFBand_Abridged.addPolarization(builder, polarization);
    RFBand_Abridged.addPurpose(builder, purpose);
    RFBand_Abridged.addMode(builder, mode);
    return RFBand_Abridged.endRFBand_Abridged(builder);
  }

  public static void startRFBand_Abridged(FlatBufferBuilder builder) { builder.startTable(23); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdEntity(FlatBufferBuilder builder, int idEntityOffset) { builder.addOffset(1, idEntityOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(3, nameOffset, 0); }
  public static void addBand(FlatBufferBuilder builder, int bandOffset) { builder.addOffset(4, bandOffset, 0); }
  public static void addMode(FlatBufferBuilder builder, byte mode) { builder.addByte(5, mode, 0); }
  public static void addPurpose(FlatBufferBuilder builder, byte purpose) { builder.addByte(6, purpose, 0); }
  public static void addFreqMin(FlatBufferBuilder builder, double freqMin) { builder.addDouble(7, freqMin, 0.0); }
  public static void addFreqMax(FlatBufferBuilder builder, double freqMax) { builder.addDouble(8, freqMax, 0.0); }
  public static void addCenterFreq(FlatBufferBuilder builder, double centerFreq) { builder.addDouble(9, centerFreq, 0.0); }
  public static void addPeakGain(FlatBufferBuilder builder, double peakGain) { builder.addDouble(10, peakGain, 0.0); }
  public static void addEdgeGain(FlatBufferBuilder builder, double edgeGain) { builder.addDouble(11, edgeGain, 0.0); }
  public static void addBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.addDouble(12, bandwidth, 0.0); }
  public static void addBeamwidth(FlatBufferBuilder builder, double beamwidth) { builder.addDouble(13, beamwidth, 0.0); }
  public static void addPolarization(FlatBufferBuilder builder, byte polarization) { builder.addByte(14, polarization, 0); }
  public static void addErp(FlatBufferBuilder builder, double erp) { builder.addDouble(15, erp, 0.0); }
  public static void addEirp(FlatBufferBuilder builder, double eirp) { builder.addDouble(16, eirp, 0.0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(17, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(18, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(19, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(20, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(21, createdByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(22, origNetworkOffset, 0); }
  public static int endRFBand_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishRFBand_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "RFBA"); }
  public static void finishSizePrefixedRFBand_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "RFBA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RFBand_Abridged get(int j) { return get(new RFBand_Abridged(), j); }
    public RFBand_Abridged get(RFBand_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

