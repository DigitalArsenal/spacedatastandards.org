// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
 */
@SuppressWarnings("unused")
public final class RFGeoLocation_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static RFGeoLocation_Ingest getRootAsRFGeoLocation_Ingest(ByteBuffer _bb) { return getRootAsRFGeoLocation_Ingest(_bb, new RFGeoLocation_Ingest()); }
  public static RFGeoLocation_Ingest getRootAsRFGeoLocation_Ingest(ByteBuffer _bb, RFGeoLocation_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean RFGeoLocation_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "RFGE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RFGeoLocation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The order identifier for this RF Geo Location data set.
   * Example: /// Example: 155240
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String orderId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer orderIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer orderIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2024-05-31T23:06:18.123456Z
   * Constraints: No constraints specified.
   */
  public String createdTs() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdTsAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer createdTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2024-05-31T21:16:58.123456Z
   * Constraints: No constraints specified.
   */
  public String receivedTs() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receivedTsAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer receivedTsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2024-05-31T21:12:12.123456Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
   * Example: /// Example: 2024-05-31T21:16:15.123456Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
   * Example: /// Example: HawkEye360-7
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 101
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origObjectId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The name of the satellite constellation.
   * Example: /// Example: HawkEye360
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String constellation() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer constellationAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer constellationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The name of the signal of interest.
   * Example: /// Example: GPS
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String signalOfInterest() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer signalOfInterestAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer signalOfInterestInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
   * Example: /// Example: RFEMITTER-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idRfemitter() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idRfemitterAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer idRfemitterInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
   * Example: /// Example: ORIGRFEMITTER-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origRfemitterId() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origRfemitterIdAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer origRfemitterIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The count of single-burst observations used for this geolocation observation.
   * Example: /// Example: 17
   * Constraints: No constraints specified.
   */
  public int numBursts() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The minimum detected frequency in megahertz.
   * Example: /// Example: 1575.42
   * Constraints: No constraints specified.
   */
  public double minFreq() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The maximum detected frequency in megahertz.
   * Example: /// Example: 1575.42
   * Constraints: No constraints specified.
   */
  public double maxFreq() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The detected signal frequency in megahertz.
   * Example: /// Example: 1575.42
   * Constraints: No constraints specified.
   */
  public double centerFreq() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 41.172
   * Constraints: No constraints specified.
   */
  public double detectLat() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 37.019
   * Constraints: No constraints specified.
   */
  public double detectLon() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The altitude relative to WGS-84 ellipsoid, in meters.
   * Example: /// Example: 123.456
   * Constraints: No constraints specified.
   */
  public double detectAlt() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
   * Example: /// Example: 9435.896
   * Constraints: No constraints specified.
   */
  public double confSemiMajor() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
   * Example: /// Example: 2751.929
   * Constraints: No constraints specified.
   */
  public double confSemiMinor() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
   * Example: /// Example: 89.852
   * Constraints: No constraints specified.
   */
  public double confOrientation() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
   * Example: /// Example: 81577480.056
   * Constraints: No constraints specified.
   */
  public double confArea() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Type of region as projected on the ground.
   * Example: /// Example: MultiPolygon
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String atype() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atypeAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer atypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
   * Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
   * Constraints: No constraints specified.
   */
  public String agjson() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer agjsonAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer agjsonInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String atext() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer atextAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer atextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
   * Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
   * Constraints: No constraints specified.
   */
  public String area() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer areaAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer areaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Number of dimensions of the geometry depicted by region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int andims() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geographical spatial_ref_sys for region.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int asrid() { int o = __offset(64); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional external identifier referencing the entity used in the calculation of the geolocation.
   * Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String passGroupId() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer passGroupIdAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer passGroupIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The RFGeo algorithm type and version used in geolocation calculations.
   * Example: /// Example: v1.0-3-gps_nb_3ball
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String algVersion() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer algVersionAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer algVersionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: 780180925
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(72); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(72); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(72); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(86); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createRFGeoLocation_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int orderIdOffset,
      int createdTsOffset,
      int receivedTsOffset,
      int startTimeOffset,
      int endTimeOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int constellationOffset,
      int signalOfInterestOffset,
      int idRfemitterOffset,
      int origRfemitterIdOffset,
      int numBursts,
      double minFreq,
      double maxFreq,
      double centerFreq,
      double detectLat,
      double detectLon,
      double detectAlt,
      double confSemiMajor,
      double confSemiMinor,
      double confOrientation,
      double confArea,
      int atypeOffset,
      int agjsonOffset,
      int atextOffset,
      int areaOffset,
      int andims,
      int asrid,
      int passGroupIdOffset,
      int algVersionOffset,
      int externalIdOffset,
      int tagsOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      int sourceDlOffset,
      byte dataMode) {
    builder.startTable(42);
    RFGeoLocation_Ingest.addConfArea(builder, confArea);
    RFGeoLocation_Ingest.addConfOrientation(builder, confOrientation);
    RFGeoLocation_Ingest.addConfSemiMinor(builder, confSemiMinor);
    RFGeoLocation_Ingest.addConfSemiMajor(builder, confSemiMajor);
    RFGeoLocation_Ingest.addDetectAlt(builder, detectAlt);
    RFGeoLocation_Ingest.addDetectLon(builder, detectLon);
    RFGeoLocation_Ingest.addDetectLat(builder, detectLat);
    RFGeoLocation_Ingest.addCenterFreq(builder, centerFreq);
    RFGeoLocation_Ingest.addMaxFreq(builder, maxFreq);
    RFGeoLocation_Ingest.addMinFreq(builder, minFreq);
    RFGeoLocation_Ingest.addSourceDl(builder, sourceDlOffset);
    RFGeoLocation_Ingest.addOrigNetwork(builder, origNetworkOffset);
    RFGeoLocation_Ingest.addOrigin(builder, originOffset);
    RFGeoLocation_Ingest.addSource(builder, sourceOffset);
    RFGeoLocation_Ingest.addCreatedBy(builder, createdByOffset);
    RFGeoLocation_Ingest.addCreatedAt(builder, createdAtOffset);
    RFGeoLocation_Ingest.addTags(builder, tagsOffset);
    RFGeoLocation_Ingest.addExternalId(builder, externalIdOffset);
    RFGeoLocation_Ingest.addAlgVersion(builder, algVersionOffset);
    RFGeoLocation_Ingest.addPassGroupId(builder, passGroupIdOffset);
    RFGeoLocation_Ingest.addAsrid(builder, asrid);
    RFGeoLocation_Ingest.addAndims(builder, andims);
    RFGeoLocation_Ingest.addArea(builder, areaOffset);
    RFGeoLocation_Ingest.addAtext(builder, atextOffset);
    RFGeoLocation_Ingest.addAgjson(builder, agjsonOffset);
    RFGeoLocation_Ingest.addAtype(builder, atypeOffset);
    RFGeoLocation_Ingest.addNumBursts(builder, numBursts);
    RFGeoLocation_Ingest.addOrigRfemitterId(builder, origRfemitterIdOffset);
    RFGeoLocation_Ingest.addIdRfemitter(builder, idRfemitterOffset);
    RFGeoLocation_Ingest.addSignalOfInterest(builder, signalOfInterestOffset);
    RFGeoLocation_Ingest.addConstellation(builder, constellationOffset);
    RFGeoLocation_Ingest.addOrigObjectId(builder, origObjectIdOffset);
    RFGeoLocation_Ingest.addSatNo(builder, satNo);
    RFGeoLocation_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    RFGeoLocation_Ingest.addEndTime(builder, endTimeOffset);
    RFGeoLocation_Ingest.addStartTime(builder, startTimeOffset);
    RFGeoLocation_Ingest.addReceivedTs(builder, receivedTsOffset);
    RFGeoLocation_Ingest.addCreatedTs(builder, createdTsOffset);
    RFGeoLocation_Ingest.addOrderId(builder, orderIdOffset);
    RFGeoLocation_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    RFGeoLocation_Ingest.addId(builder, idOffset);
    RFGeoLocation_Ingest.addDataMode(builder, dataMode);
    return RFGeoLocation_Ingest.endRFGeoLocation_Ingest(builder);
  }

  public static void startRFGeoLocation_Ingest(FlatBufferBuilder builder) { builder.startTable(42); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addOrderId(FlatBufferBuilder builder, int orderIdOffset) { builder.addOffset(2, orderIdOffset, 0); }
  public static void addCreatedTs(FlatBufferBuilder builder, int createdTsOffset) { builder.addOffset(3, createdTsOffset, 0); }
  public static void addReceivedTs(FlatBufferBuilder builder, int receivedTsOffset) { builder.addOffset(4, receivedTsOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(5, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(6, endTimeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(7, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(8, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(9, origObjectIdOffset, 0); }
  public static void addConstellation(FlatBufferBuilder builder, int constellationOffset) { builder.addOffset(10, constellationOffset, 0); }
  public static void addSignalOfInterest(FlatBufferBuilder builder, int signalOfInterestOffset) { builder.addOffset(11, signalOfInterestOffset, 0); }
  public static void addIdRfemitter(FlatBufferBuilder builder, int idRfemitterOffset) { builder.addOffset(12, idRfemitterOffset, 0); }
  public static void addOrigRfemitterId(FlatBufferBuilder builder, int origRfemitterIdOffset) { builder.addOffset(13, origRfemitterIdOffset, 0); }
  public static void addNumBursts(FlatBufferBuilder builder, int numBursts) { builder.addInt(14, numBursts, 0); }
  public static void addMinFreq(FlatBufferBuilder builder, double minFreq) { builder.addDouble(15, minFreq, 0.0); }
  public static void addMaxFreq(FlatBufferBuilder builder, double maxFreq) { builder.addDouble(16, maxFreq, 0.0); }
  public static void addCenterFreq(FlatBufferBuilder builder, double centerFreq) { builder.addDouble(17, centerFreq, 0.0); }
  public static void addDetectLat(FlatBufferBuilder builder, double detectLat) { builder.addDouble(18, detectLat, 0.0); }
  public static void addDetectLon(FlatBufferBuilder builder, double detectLon) { builder.addDouble(19, detectLon, 0.0); }
  public static void addDetectAlt(FlatBufferBuilder builder, double detectAlt) { builder.addDouble(20, detectAlt, 0.0); }
  public static void addConfSemiMajor(FlatBufferBuilder builder, double confSemiMajor) { builder.addDouble(21, confSemiMajor, 0.0); }
  public static void addConfSemiMinor(FlatBufferBuilder builder, double confSemiMinor) { builder.addDouble(22, confSemiMinor, 0.0); }
  public static void addConfOrientation(FlatBufferBuilder builder, double confOrientation) { builder.addDouble(23, confOrientation, 0.0); }
  public static void addConfArea(FlatBufferBuilder builder, double confArea) { builder.addDouble(24, confArea, 0.0); }
  public static void addAtype(FlatBufferBuilder builder, int atypeOffset) { builder.addOffset(25, atypeOffset, 0); }
  public static void addAgjson(FlatBufferBuilder builder, int agjsonOffset) { builder.addOffset(26, agjsonOffset, 0); }
  public static void addAtext(FlatBufferBuilder builder, int atextOffset) { builder.addOffset(27, atextOffset, 0); }
  public static void addArea(FlatBufferBuilder builder, int areaOffset) { builder.addOffset(28, areaOffset, 0); }
  public static void addAndims(FlatBufferBuilder builder, int andims) { builder.addInt(29, andims, 0); }
  public static void addAsrid(FlatBufferBuilder builder, int asrid) { builder.addInt(30, asrid, 0); }
  public static void addPassGroupId(FlatBufferBuilder builder, int passGroupIdOffset) { builder.addOffset(31, passGroupIdOffset, 0); }
  public static void addAlgVersion(FlatBufferBuilder builder, int algVersionOffset) { builder.addOffset(32, algVersionOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(33, externalIdOffset, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(34, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(35, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(36, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(37, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(38, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(39, origNetworkOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(40, sourceDlOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(41, dataMode, 0); }
  public static int endRFGeoLocation_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishRFGeoLocation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "RFGE"); }
  public static void finishSizePrefixedRFGeoLocation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "RFGE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RFGeoLocation_Ingest get(int j) { return get(new RFGeoLocation_Ingest(), j); }
    public RFGeoLocation_Ingest get(RFGeoLocation_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

