// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// No description available.
 */
@SuppressWarnings("unused")
public final class SiteStatus_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SiteStatus_Full getRootAsSiteStatus_Full(ByteBuffer _bb) { return getRootAsSiteStatus_Full(_bb, new SiteStatus_Full()); }
  public static SiteStatus_Full getRootAsSiteStatus_Full(ByteBuffer _bb, SiteStatus_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SiteStatus_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SITE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SiteStatus_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SITESTATUS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The ID of the site, if this status is associated with a fixed site or platform.
   * Example: /// Example: 41e3e554-9790-40b9-bd7b-f30d864dcad8
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idSite() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSiteAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idSiteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
   * Example: /// Example: ADOC
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String siteType() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer siteTypeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer siteTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Alternate Identifier for a mobile or transportable platform provided by source.
   * Example: /// Example: MOBILEALT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String mobileAltId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mobileAltIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer mobileAltIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The POI (point of interest) ID related to this platform, if available.
   * Example: /// Example: d4a91864-6140-4b8d-67cd-45421c75f696
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String poiid() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer poiidAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer poiidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The track ID related to this platform (if mobile or transportable), if available.
   * Example: /// Example: PCM4923-1656174732-4-1-257
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String trackId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer trackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Link-16 specific reference track number.
   * Example: /// Example: TrkNm
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String trackRefL16() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer trackRefL16AsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer trackRefL16InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The operational status of the platform (e.g. Fully Operational, Partially Operational, Not Operational, etc.).
   * Example: /// Example: Fully Operational
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String opsCapability() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opsCapabilityAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer opsCapabilityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The status of the installation.
   * FMC - Fully Mission Capable
   *  PMC - Partially Mission Capable
   * NMC - Non Mission Capable
   * UNK - Unknown.
   * Example: /// Example: PMC
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public byte instStatus() { int o = __offset(22); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Force Protection Condition (FPCON).
   * NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.
   * ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.
   * BRAVO - Applies when an increased or predictable threat of terrorist activity exists.
   * CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.
   * DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
   * Example: /// Example: BRAVO
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public byte fpcon() { int o = __offset(24); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Health Protection Condition (HPCON).
   * 0 - Routine, no community transmission.
   * ALPHA - Limited, community transmission beginning.
   * BRAVO - Moderate, increased community transmission.
   * CHARLIE - Substantial, sustained community transmission.
   * DELTA - Severe, widespread community transmission.
   * Example: /// Example: CHARLIE
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public byte hpcon() { int o = __offset(26); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Cyberspace Protection Condition (CPCON).
   * 1 - VERY HIGH - Critical functions.
   * 2 - HIGH - Critical and essential functions.
   * 3 - MEDIUM - Critical, essential, and support functions.
   * 4 - LOW - All functions.
   * 5 - VERY LOW - All functions.
   * Example: /// Example: 4
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public byte cpcon() { int o = __offset(28); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time of report, in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String reportTime() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reportTimeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer reportTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Description of the time function associated with the reportTime (e.g. Activation, Deactivation, Arrival, Departure, etc.), if applicable.
   * Example: /// Example: Activation
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String timeFunction() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeFunctionAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer timeFunctionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Description of the current weather conditions over a site.
   * Example: /// Example: Heavy rain
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String weatherMessage() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer weatherMessageAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer weatherMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Position Engagement Status flag, Indicating whether this platform is initiating multiple simultaneous engagements.  A value of 1/True indicates the platform is initiating multiple simultaneous engagements.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean pes() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Estimated number of hot missiles of all types remaining in weapons system inventory.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int hotInventory() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Estimated number of cold missiles of all types remaining in weapons system inventory.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int coldInventory() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The state of a SAM unit (e.g. Initialization, Standby, Reorientation, etc.).
   * Example: /// Example: Initialization
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String samMode() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer samModeAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer samModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * SAM sensor radar surveillance mode (Active, Passive, Off).
   * Example: /// Example: Active
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String radiateMode() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer radiateModeAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer radiateModeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The primary component degrading the operational capability of the platform or system.
   * Example: /// Example: opsImpairment
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String opsImpairment() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opsImpairmentAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer opsImpairmentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The communications component causing the platform or system to be less than fully operational.
   * Example: /// Example: commImpairment
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String commImpairment() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commImpairmentAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer commImpairmentInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Crisis Action Team (CAT).
   * COLD - Not in use.
   * WARM - Facility prepped/possible skeleton crew.
   * HOT - Fully active.
   * Example: /// Example: COLD
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public byte cat() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Emergency Operations Center (EOC) status.
   * COLD - Not in use.
   * WARM - Facility prepped/possible skeleton crew.
   * HOT - Fully active.
   * Example: /// Example: WARM
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public byte eoc() { int o = __offset(52); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Array of Link item(s) for which status is available and reported (ATDL, IJMS,  LINK-1, LINK-11, LINK-11B, LINK-16).  This array must be the same length as the linkStatus array.
   * Example: /// Example: ['ATDL', 'IJMS', 'LINK-1']
   * Constraints: No constraints specified.
   */
  public String link(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int linkLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector linkVector() { return linkVector(new StringVector()); }
  public StringVector linkVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the status (AVAILABLE, DEGRADED, NOT AVAILABLE, etc.) for each links in the link array. This array must be the same length as the link array, and the status must correspond to the appropriate position index in the link array.
   * Example: /// Example: ['AVAILABLE', 'DEGRADED', 'NOT AVAILABLE']
   * Constraints: No constraints specified.
   */
  public String linkStatus(int j) { int o = __offset(56); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int linkStatusLength() { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; }
  public StringVector linkStatusVector() { return linkStatusVector(new StringVector()); }
  public StringVector linkStatusVector(StringVector obj) { int o = __offset(56); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of radar system(s) for which status is available and reported (ACQUISITION, IFFSIF, ILLUMINATING, MODE-4, PRIMARY SURVEILLANCE, SECONDARY SURVEILLANCE, TERTIARY SURVEILLANCE). This array must be the same length as the radarStatus array.
   * Example: /// Example: ['ILLUMINATING', 'MODE-4', 'MODE-3']
   * Constraints: No constraints specified.
   */
  public String radarSystem(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int radarSystemLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector radarSystemVector() { return radarSystemVector(new StringVector()); }
  public StringVector radarSystemVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the status (NON-OPERATIONAL, OPERATIONAL, OFF) for each radar system in the radarSystem array. This array must be the same length as the radarSystem array, and the status must correspond to the appropriate position index in the radarSystem array.
   * Example: /// Example: ['OPERATIONAL', 'OFF', 'NON-OPERATIONAL']
   * Constraints: No constraints specified.
   */
  public String radarStatus(int j) { int o = __offset(60); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int radarStatusLength() { int o = __offset(60); return o != 0 ? __vector_len(o) : 0; }
  public StringVector radarStatusVector() { return radarStatusVector(new StringVector()); }
  public StringVector radarStatusVector(StringVector obj) { int o = __offset(60); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of specific missile types for which an estimated inventory count is available (e.g. GMD TYPE A, HARPOON, TOMAHAWK, etc.).  This array must be the same length as the missileInventory array.
   * Example: /// Example: ['GMD', 'HARPOON', 'JAVELIN']
   * Constraints: No constraints specified.
   */
  public String missile(int j) { int o = __offset(62); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int missileLength() { int o = __offset(62); return o != 0 ? __vector_len(o) : 0; }
  public StringVector missileVector() { return missileVector(new StringVector()); }
  public StringVector missileVector(StringVector obj) { int o = __offset(62); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the quantity of each of the missile items.  This array must be the same length as the missile array, and the values must correspond to appropriate position index in the missile array.
   * Example: /// Example: [5, 10, 100]
   * Constraints: No constraints specified.
   */
  public String missileInventory(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int missileInventoryLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector missileInventoryVector() { return missileInventoryVector(new StringVector()); }
  public StringVector missileInventoryVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(80); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createSiteStatus_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idSiteOffset,
      int siteTypeOffset,
      int mobileAltIdOffset,
      int poiidOffset,
      int trackIdOffset,
      int trackRefL16Offset,
      int opsCapabilityOffset,
      byte instStatus,
      byte fpcon,
      byte hpcon,
      byte cpcon,
      int reportTimeOffset,
      int timeFunctionOffset,
      int weatherMessageOffset,
      boolean pes,
      int hotInventory,
      int coldInventory,
      int samModeOffset,
      int radiateModeOffset,
      int opsImpairmentOffset,
      int commImpairmentOffset,
      byte cat,
      byte eoc,
      int linkOffset,
      int linkStatusOffset,
      int radarSystemOffset,
      int radarStatusOffset,
      int missileOffset,
      int missileInventoryOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(39);
    SiteStatus_Full.addOrigNetwork(builder, origNetworkOffset);
    SiteStatus_Full.addOrigin(builder, originOffset);
    SiteStatus_Full.addSource(builder, sourceOffset);
    SiteStatus_Full.addUpdatedBy(builder, updatedByOffset);
    SiteStatus_Full.addUpdatedAt(builder, updatedAtOffset);
    SiteStatus_Full.addCreatedBy(builder, createdByOffset);
    SiteStatus_Full.addCreatedAt(builder, createdAtOffset);
    SiteStatus_Full.addMissileInventory(builder, missileInventoryOffset);
    SiteStatus_Full.addMissile(builder, missileOffset);
    SiteStatus_Full.addRadarStatus(builder, radarStatusOffset);
    SiteStatus_Full.addRadarSystem(builder, radarSystemOffset);
    SiteStatus_Full.addLinkStatus(builder, linkStatusOffset);
    SiteStatus_Full.addLink(builder, linkOffset);
    SiteStatus_Full.addCommImpairment(builder, commImpairmentOffset);
    SiteStatus_Full.addOpsImpairment(builder, opsImpairmentOffset);
    SiteStatus_Full.addRadiateMode(builder, radiateModeOffset);
    SiteStatus_Full.addSamMode(builder, samModeOffset);
    SiteStatus_Full.addColdInventory(builder, coldInventory);
    SiteStatus_Full.addHotInventory(builder, hotInventory);
    SiteStatus_Full.addWeatherMessage(builder, weatherMessageOffset);
    SiteStatus_Full.addTimeFunction(builder, timeFunctionOffset);
    SiteStatus_Full.addReportTime(builder, reportTimeOffset);
    SiteStatus_Full.addOpsCapability(builder, opsCapabilityOffset);
    SiteStatus_Full.addTrackRefL16(builder, trackRefL16Offset);
    SiteStatus_Full.addTrackId(builder, trackIdOffset);
    SiteStatus_Full.addPoiid(builder, poiidOffset);
    SiteStatus_Full.addMobileAltId(builder, mobileAltIdOffset);
    SiteStatus_Full.addSiteType(builder, siteTypeOffset);
    SiteStatus_Full.addIdSite(builder, idSiteOffset);
    SiteStatus_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SiteStatus_Full.addId(builder, idOffset);
    SiteStatus_Full.addDataMode(builder, dataMode);
    SiteStatus_Full.addEoc(builder, eoc);
    SiteStatus_Full.addCat(builder, cat);
    SiteStatus_Full.addPes(builder, pes);
    SiteStatus_Full.addCpcon(builder, cpcon);
    SiteStatus_Full.addHpcon(builder, hpcon);
    SiteStatus_Full.addFpcon(builder, fpcon);
    SiteStatus_Full.addInstStatus(builder, instStatus);
    return SiteStatus_Full.endSiteStatus_Full(builder);
  }

  public static void startSiteStatus_Full(FlatBufferBuilder builder) { builder.startTable(39); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdSite(FlatBufferBuilder builder, int idSiteOffset) { builder.addOffset(2, idSiteOffset, 0); }
  public static void addSiteType(FlatBufferBuilder builder, int siteTypeOffset) { builder.addOffset(3, siteTypeOffset, 0); }
  public static void addMobileAltId(FlatBufferBuilder builder, int mobileAltIdOffset) { builder.addOffset(4, mobileAltIdOffset, 0); }
  public static void addPoiid(FlatBufferBuilder builder, int poiidOffset) { builder.addOffset(5, poiidOffset, 0); }
  public static void addTrackId(FlatBufferBuilder builder, int trackIdOffset) { builder.addOffset(6, trackIdOffset, 0); }
  public static void addTrackRefL16(FlatBufferBuilder builder, int trackRefL16Offset) { builder.addOffset(7, trackRefL16Offset, 0); }
  public static void addOpsCapability(FlatBufferBuilder builder, int opsCapabilityOffset) { builder.addOffset(8, opsCapabilityOffset, 0); }
  public static void addInstStatus(FlatBufferBuilder builder, byte instStatus) { builder.addByte(9, instStatus, 0); }
  public static void addFpcon(FlatBufferBuilder builder, byte fpcon) { builder.addByte(10, fpcon, 0); }
  public static void addHpcon(FlatBufferBuilder builder, byte hpcon) { builder.addByte(11, hpcon, 0); }
  public static void addCpcon(FlatBufferBuilder builder, byte cpcon) { builder.addByte(12, cpcon, 0); }
  public static void addReportTime(FlatBufferBuilder builder, int reportTimeOffset) { builder.addOffset(13, reportTimeOffset, 0); }
  public static void addTimeFunction(FlatBufferBuilder builder, int timeFunctionOffset) { builder.addOffset(14, timeFunctionOffset, 0); }
  public static void addWeatherMessage(FlatBufferBuilder builder, int weatherMessageOffset) { builder.addOffset(15, weatherMessageOffset, 0); }
  public static void addPes(FlatBufferBuilder builder, boolean pes) { builder.addBoolean(16, pes, false); }
  public static void addHotInventory(FlatBufferBuilder builder, int hotInventory) { builder.addInt(17, hotInventory, 0); }
  public static void addColdInventory(FlatBufferBuilder builder, int coldInventory) { builder.addInt(18, coldInventory, 0); }
  public static void addSamMode(FlatBufferBuilder builder, int samModeOffset) { builder.addOffset(19, samModeOffset, 0); }
  public static void addRadiateMode(FlatBufferBuilder builder, int radiateModeOffset) { builder.addOffset(20, radiateModeOffset, 0); }
  public static void addOpsImpairment(FlatBufferBuilder builder, int opsImpairmentOffset) { builder.addOffset(21, opsImpairmentOffset, 0); }
  public static void addCommImpairment(FlatBufferBuilder builder, int commImpairmentOffset) { builder.addOffset(22, commImpairmentOffset, 0); }
  public static void addCat(FlatBufferBuilder builder, byte cat) { builder.addByte(23, cat, 0); }
  public static void addEoc(FlatBufferBuilder builder, byte eoc) { builder.addByte(24, eoc, 0); }
  public static void addLink(FlatBufferBuilder builder, int linkOffset) { builder.addOffset(25, linkOffset, 0); }
  public static int createLinkVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLinkVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLinkStatus(FlatBufferBuilder builder, int linkStatusOffset) { builder.addOffset(26, linkStatusOffset, 0); }
  public static int createLinkStatusVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLinkStatusVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRadarSystem(FlatBufferBuilder builder, int radarSystemOffset) { builder.addOffset(27, radarSystemOffset, 0); }
  public static int createRadarSystemVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRadarSystemVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRadarStatus(FlatBufferBuilder builder, int radarStatusOffset) { builder.addOffset(28, radarStatusOffset, 0); }
  public static int createRadarStatusVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRadarStatusVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMissile(FlatBufferBuilder builder, int missileOffset) { builder.addOffset(29, missileOffset, 0); }
  public static int createMissileVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMissileVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMissileInventory(FlatBufferBuilder builder, int missileInventoryOffset) { builder.addOffset(30, missileInventoryOffset, 0); }
  public static int createMissileInventoryVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMissileInventoryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(31, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(32, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(33, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(34, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(35, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(36, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(37, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(38, dataMode, 0); }
  public static int endSiteStatus_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSiteStatus_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SITE"); }
  public static void finishSizePrefixedSiteStatus_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SITE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SiteStatus_Full get(int j) { return get(new SiteStatus_Full(), j); }
    public SiteStatus_Full get(SiteStatus_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

