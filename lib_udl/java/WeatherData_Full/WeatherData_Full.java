// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
 */
@SuppressWarnings("unused")
public final class WeatherData_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static WeatherData_Full getRootAsWeatherData_Full(ByteBuffer _bb) { return getRootAsWeatherData_Full(_bb, new WeatherData_Full()); }
  public static WeatherData_Full getRootAsWeatherData_Full(ByteBuffer _bb, WeatherData_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean WeatherData_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "WEAT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public WeatherData_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: WEATHER-DATA-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the sensor making the weather measurement.
   * Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String obTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer obTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer obTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
   * Example: /// Example: [116.5, 121.6]
   * Constraints: No constraints specified.
   */
  public String sigPwrs(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int sigPwrsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector sigPwrsVector() { return sigPwrsVector(new StringVector()); }
  public StringVector sigPwrsVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
   * Example: /// Example: [58.2, 58.3]
   * Constraints: No constraints specified.
   */
  public String noiseLvls(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int noiseLvlsLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector noiseLvlsVector() { return noiseLvlsVector(new StringVector()); }
  public StringVector noiseLvlsVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
   * Example: /// Example: [0.3, 0.6]
   * Constraints: No constraints specified.
   */
  public String specWidths(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int specWidthsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector specWidthsVector() { return specWidthsVector(new StringVector()); }
  public StringVector specWidthsVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
   * Example: /// Example: [16, 1]
   * Constraints: No constraints specified.
   */
  public String firstGuessAvgs(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int firstGuessAvgsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector firstGuessAvgsVector() { return firstGuessAvgsVector(new StringVector()); }
  public StringVector firstGuessAvgsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Quality control flag value, as defined by the data provider.
   * Example: /// Example: 4
   * Constraints: No constraints specified.
   */
  public int qcValue() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Datetime the system files were created.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String fileCreation() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fileCreationAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer fileCreationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Last altitude with recorded measurements in this record, in meters.
   * Example: /// Example: 19505.1
   * Constraints: No constraints specified.
   */
  public double termAlt() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average transmitted power of the radar, in kilowatts.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double avgTxPwr() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average power of the reflected signal received by the radar, in Watts.
   * Example: /// Example: 714.9
   * Constraints: No constraints specified.
   */
  public double avgRefPwr() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of sectors within the radar coverage area, each containing a number of antennas.
   * Example: /// Example: 20
   * Constraints: No constraints specified.
   */
  public int sectorNum() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of antennas across all sectors within the radar coverage area.
   * Example: /// Example: 640
   * Constraints: No constraints specified.
   */
  public int numElements() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
   * Example: /// Example: [32, 30]
   * Constraints: No constraints specified.
   */
  public String tdAvgSampleNums(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tdAvgSampleNumsLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tdAvgSampleNumsVector() { return tdAvgSampleNumsVector(new StringVector()); }
  public StringVector tdAvgSampleNumsVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Checksum value for the data.
   * Example: /// Example: 133
   * Constraints: No constraints specified.
   */
  public int checksum() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
   * Example: /// Example: [4, 3]
   * Constraints: No constraints specified.
   */
  public String coIntegs(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int coIntegsLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector coIntegsVector() { return coIntegsVector(new StringVector()); }
  public StringVector coIntegsVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
   * Example: /// Example: [4, 3]
   * Constraints: No constraints specified.
   */
  public String specAvgs(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int specAvgsLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector specAvgsVector() { return specAvgsVector(new StringVector()); }
  public StringVector specAvgsVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
   * Example: /// Example: [1000.3, 1000.2]
   * Constraints: No constraints specified.
   */
  public String interpulsePeriods(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int interpulsePeriodsLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector interpulsePeriodsVector() { return interpulsePeriodsVector(new StringVector()); }
  public StringVector interpulsePeriodsVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
   * Example: /// Example: [44.4, 467.3]
   * Constraints: No constraints specified.
   */
  public String doppVels(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int doppVelsLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector doppVelsVector() { return doppVelsVector(new StringVector()); }
  public StringVector doppVelsVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
   * Example: /// Example: [5, 2]
   * Constraints: No constraints specified.
   */
  public String consRecs(int j) { int o = __offset(48); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int consRecsLength() { int o = __offset(48); return o != 0 ? __vector_len(o) : 0; }
  public StringVector consRecsVector() { return consRecsVector(new StringVector()); }
  public StringVector consRecsVector(StringVector obj) { int o = __offset(48); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
   * Example: /// Example: [14.5, -16.2]
   * Constraints: No constraints specified.
   */
  public String snrs(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int snrsLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector snrsVector() { return snrsVector(new StringVector()); }
  public StringVector snrsVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
   * Example: /// Example: 163.7
   * Constraints: No constraints specified.
   */
  public double sigStrength() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Semi-major axis of the 50% positional confidence ellipse, in kilometers.
   * Example: /// Example: 3.4
   * Constraints: No constraints specified.
   */
  public double semiMajorAxis() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
   * Example: /// Example: 0.3
   * Constraints: No constraints specified.
   */
  public double semiMinorAxis() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
   * Example: /// Example: 75.7
   * Constraints: No constraints specified.
   */
  public double angleOrientation() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number of sensors used in the lightning event location solution.
   * Example: /// Example: 9
   * Constraints: No constraints specified.
   */
  public int lightEventNum() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of sensor(s) that participated in the lightning event location determination.
   * Example: /// Example: [11, 28, 190]
   * Constraints: No constraints specified.
   */
  public String lightDetSensors(int j) { int o = __offset(62); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int lightDetSensorsLength() { int o = __offset(62); return o != 0 ? __vector_len(o) : 0; }
  public StringVector lightDetSensorsVector() { return lightDetSensorsVector(new StringVector()); }
  public StringVector lightDetSensorsVector(StringVector obj) { int o = __offset(62); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The positional confidence of the calculated lightning event location using the chi-square statistical method.
   * Example: /// Example: 0.1
   * Constraints: No constraints specified.
   */
  public double posConfidence() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['SENSOR', 'WEATHERREPORT']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(66); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(66); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(66); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
   * Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(68); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(68); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(68); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(80); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createWeatherData_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int obTimeOffset,
      int sigPwrsOffset,
      int noiseLvlsOffset,
      int specWidthsOffset,
      int firstGuessAvgsOffset,
      int qcValue,
      int fileCreationOffset,
      double termAlt,
      double avgTxPwr,
      double avgRefPwr,
      int sectorNum,
      int numElements,
      int tdAvgSampleNumsOffset,
      int checksum,
      int coIntegsOffset,
      int specAvgsOffset,
      int interpulsePeriodsOffset,
      int doppVelsOffset,
      int consRecsOffset,
      int snrsOffset,
      double sigStrength,
      double semiMajorAxis,
      double semiMinorAxis,
      double angleOrientation,
      int lightEventNum,
      int lightDetSensorsOffset,
      double posConfidence,
      int srcTypsOffset,
      int srcIdsOffset,
      int origNetworkOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode) {
    builder.startTable(39);
    WeatherData_Full.addPosConfidence(builder, posConfidence);
    WeatherData_Full.addAngleOrientation(builder, angleOrientation);
    WeatherData_Full.addSemiMinorAxis(builder, semiMinorAxis);
    WeatherData_Full.addSemiMajorAxis(builder, semiMajorAxis);
    WeatherData_Full.addSigStrength(builder, sigStrength);
    WeatherData_Full.addAvgRefPwr(builder, avgRefPwr);
    WeatherData_Full.addAvgTxPwr(builder, avgTxPwr);
    WeatherData_Full.addTermAlt(builder, termAlt);
    WeatherData_Full.addOrigin(builder, originOffset);
    WeatherData_Full.addSource(builder, sourceOffset);
    WeatherData_Full.addCreatedBy(builder, createdByOffset);
    WeatherData_Full.addCreatedAt(builder, createdAtOffset);
    WeatherData_Full.addOrigNetwork(builder, origNetworkOffset);
    WeatherData_Full.addSrcIds(builder, srcIdsOffset);
    WeatherData_Full.addSrcTyps(builder, srcTypsOffset);
    WeatherData_Full.addLightDetSensors(builder, lightDetSensorsOffset);
    WeatherData_Full.addLightEventNum(builder, lightEventNum);
    WeatherData_Full.addSnrs(builder, snrsOffset);
    WeatherData_Full.addConsRecs(builder, consRecsOffset);
    WeatherData_Full.addDoppVels(builder, doppVelsOffset);
    WeatherData_Full.addInterpulsePeriods(builder, interpulsePeriodsOffset);
    WeatherData_Full.addSpecAvgs(builder, specAvgsOffset);
    WeatherData_Full.addCoIntegs(builder, coIntegsOffset);
    WeatherData_Full.addChecksum(builder, checksum);
    WeatherData_Full.addTdAvgSampleNums(builder, tdAvgSampleNumsOffset);
    WeatherData_Full.addNumElements(builder, numElements);
    WeatherData_Full.addSectorNum(builder, sectorNum);
    WeatherData_Full.addFileCreation(builder, fileCreationOffset);
    WeatherData_Full.addQcValue(builder, qcValue);
    WeatherData_Full.addFirstGuessAvgs(builder, firstGuessAvgsOffset);
    WeatherData_Full.addSpecWidths(builder, specWidthsOffset);
    WeatherData_Full.addNoiseLvls(builder, noiseLvlsOffset);
    WeatherData_Full.addSigPwrs(builder, sigPwrsOffset);
    WeatherData_Full.addObTime(builder, obTimeOffset);
    WeatherData_Full.addOrigSensorId(builder, origSensorIdOffset);
    WeatherData_Full.addIdSensor(builder, idSensorOffset);
    WeatherData_Full.addClassificationMarking(builder, classificationMarkingOffset);
    WeatherData_Full.addId(builder, idOffset);
    WeatherData_Full.addDataMode(builder, dataMode);
    return WeatherData_Full.endWeatherData_Full(builder);
  }

  public static void startWeatherData_Full(FlatBufferBuilder builder) { builder.startTable(39); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(2, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(3, origSensorIdOffset, 0); }
  public static void addObTime(FlatBufferBuilder builder, int obTimeOffset) { builder.addOffset(4, obTimeOffset, 0); }
  public static void addSigPwrs(FlatBufferBuilder builder, int sigPwrsOffset) { builder.addOffset(5, sigPwrsOffset, 0); }
  public static int createSigPwrsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSigPwrsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addNoiseLvls(FlatBufferBuilder builder, int noiseLvlsOffset) { builder.addOffset(6, noiseLvlsOffset, 0); }
  public static int createNoiseLvlsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNoiseLvlsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSpecWidths(FlatBufferBuilder builder, int specWidthsOffset) { builder.addOffset(7, specWidthsOffset, 0); }
  public static int createSpecWidthsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSpecWidthsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFirstGuessAvgs(FlatBufferBuilder builder, int firstGuessAvgsOffset) { builder.addOffset(8, firstGuessAvgsOffset, 0); }
  public static int createFirstGuessAvgsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFirstGuessAvgsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addQcValue(FlatBufferBuilder builder, int qcValue) { builder.addInt(9, qcValue, 0); }
  public static void addFileCreation(FlatBufferBuilder builder, int fileCreationOffset) { builder.addOffset(10, fileCreationOffset, 0); }
  public static void addTermAlt(FlatBufferBuilder builder, double termAlt) { builder.addDouble(11, termAlt, 0.0); }
  public static void addAvgTxPwr(FlatBufferBuilder builder, double avgTxPwr) { builder.addDouble(12, avgTxPwr, 0.0); }
  public static void addAvgRefPwr(FlatBufferBuilder builder, double avgRefPwr) { builder.addDouble(13, avgRefPwr, 0.0); }
  public static void addSectorNum(FlatBufferBuilder builder, int sectorNum) { builder.addInt(14, sectorNum, 0); }
  public static void addNumElements(FlatBufferBuilder builder, int numElements) { builder.addInt(15, numElements, 0); }
  public static void addTdAvgSampleNums(FlatBufferBuilder builder, int tdAvgSampleNumsOffset) { builder.addOffset(16, tdAvgSampleNumsOffset, 0); }
  public static int createTdAvgSampleNumsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTdAvgSampleNumsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addChecksum(FlatBufferBuilder builder, int checksum) { builder.addInt(17, checksum, 0); }
  public static void addCoIntegs(FlatBufferBuilder builder, int coIntegsOffset) { builder.addOffset(18, coIntegsOffset, 0); }
  public static int createCoIntegsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCoIntegsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSpecAvgs(FlatBufferBuilder builder, int specAvgsOffset) { builder.addOffset(19, specAvgsOffset, 0); }
  public static int createSpecAvgsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSpecAvgsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInterpulsePeriods(FlatBufferBuilder builder, int interpulsePeriodsOffset) { builder.addOffset(20, interpulsePeriodsOffset, 0); }
  public static int createInterpulsePeriodsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInterpulsePeriodsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDoppVels(FlatBufferBuilder builder, int doppVelsOffset) { builder.addOffset(21, doppVelsOffset, 0); }
  public static int createDoppVelsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDoppVelsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addConsRecs(FlatBufferBuilder builder, int consRecsOffset) { builder.addOffset(22, consRecsOffset, 0); }
  public static int createConsRecsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startConsRecsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSnrs(FlatBufferBuilder builder, int snrsOffset) { builder.addOffset(23, snrsOffset, 0); }
  public static int createSnrsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSnrsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSigStrength(FlatBufferBuilder builder, double sigStrength) { builder.addDouble(24, sigStrength, 0.0); }
  public static void addSemiMajorAxis(FlatBufferBuilder builder, double semiMajorAxis) { builder.addDouble(25, semiMajorAxis, 0.0); }
  public static void addSemiMinorAxis(FlatBufferBuilder builder, double semiMinorAxis) { builder.addDouble(26, semiMinorAxis, 0.0); }
  public static void addAngleOrientation(FlatBufferBuilder builder, double angleOrientation) { builder.addDouble(27, angleOrientation, 0.0); }
  public static void addLightEventNum(FlatBufferBuilder builder, int lightEventNum) { builder.addInt(28, lightEventNum, 0); }
  public static void addLightDetSensors(FlatBufferBuilder builder, int lightDetSensorsOffset) { builder.addOffset(29, lightDetSensorsOffset, 0); }
  public static int createLightDetSensorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLightDetSensorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPosConfidence(FlatBufferBuilder builder, double posConfidence) { builder.addDouble(30, posConfidence, 0.0); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(31, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(32, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(33, origNetworkOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(34, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(35, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(36, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(37, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(38, dataMode, 0); }
  public static int endWeatherData_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishWeatherData_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "WEAT"); }
  public static void finishSizePrefixedWeatherData_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "WEAT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public WeatherData_Full get(int j) { return get(new WeatherData_Full(), j); }
    public WeatherData_Full get(WeatherData_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

