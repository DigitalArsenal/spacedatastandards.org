// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of aircraft mission location information for this aircraft mission tasking.
 */
@SuppressWarnings("unused")
public final class AircraftMissionLocationTasking_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AircraftMissionLocationTasking_Abridged getRootAsAircraftMissionLocationTasking_Abridged(ByteBuffer _bb) { return getRootAsAircraftMissionLocationTasking_Abridged(_bb, new AircraftMissionLocationTasking_Abridged()); }
  public static AircraftMissionLocationTasking_Abridged getRootAsAircraftMissionLocationTasking_Abridged(ByteBuffer _bb, AircraftMissionLocationTasking_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AircraftMissionLocationTasking_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AircraftMissionLocationTasking_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The start time of this mission in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-10-25T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The end time of this mission in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2021-10-25T12:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String endTime() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The name that identifies the location at which this mission is to be performed. This can be the name of a general target area, orbit, cap point, station, etc.
   * Example: /// Example: KLSV
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String msnLocName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnLocNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer msnLocNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The altitude for this mission represented as hundreds of feet above MSL.
   * Example: /// Example: 210
   * Constraints: No constraints specified.
   */
  public int alt() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The code for the priority assigned to this mission.
   * Example: /// Example: 1A
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String airMsnPri() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer airMsnPriAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer airMsnPriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The radius of the circle around the location being reported in feet.
   * Example: /// Example: 1000
   * Constraints: No constraints specified.
   */
  public int areaGeoRad() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The location name for this mission.
   * Example: /// Example: PT ALFA
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String msnLocPtName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnLocPtNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer msnLocPtNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * WGS-84 latitude of the mission location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
   * Example: /// Example: 35.123
   * Constraints: No constraints specified.
   */
  public double msnLocPtLat() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 longitude of the mission location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
   * Example: /// Example: 79.01
   * Constraints: No constraints specified.
   */
  public double msnLocPtLon() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The alpha-numeric specified location for this mission specified as a bearing angle in degrees relative to true north and a range in nautical miles (NM).
   * Example: /// Example: 330T-PT ALFA-50NM
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String msnLocPtBarT() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msnLocPtBarTAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer msnLocPtBarTInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }

  public static int createAircraftMissionLocationTasking_Abridged(FlatBufferBuilder builder,
      int startTimeOffset,
      int endTimeOffset,
      int msnLocNameOffset,
      int alt,
      int airMsnPriOffset,
      int areaGeoRad,
      int msnLocPtNameOffset,
      double msnLocPtLat,
      double msnLocPtLon,
      int msnLocPtBarTOffset) {
    builder.startTable(10);
    AircraftMissionLocationTasking_Abridged.addMsnLocPtLon(builder, msnLocPtLon);
    AircraftMissionLocationTasking_Abridged.addMsnLocPtLat(builder, msnLocPtLat);
    AircraftMissionLocationTasking_Abridged.addMsnLocPtBarT(builder, msnLocPtBarTOffset);
    AircraftMissionLocationTasking_Abridged.addMsnLocPtName(builder, msnLocPtNameOffset);
    AircraftMissionLocationTasking_Abridged.addAreaGeoRad(builder, areaGeoRad);
    AircraftMissionLocationTasking_Abridged.addAirMsnPri(builder, airMsnPriOffset);
    AircraftMissionLocationTasking_Abridged.addAlt(builder, alt);
    AircraftMissionLocationTasking_Abridged.addMsnLocName(builder, msnLocNameOffset);
    AircraftMissionLocationTasking_Abridged.addEndTime(builder, endTimeOffset);
    AircraftMissionLocationTasking_Abridged.addStartTime(builder, startTimeOffset);
    return AircraftMissionLocationTasking_Abridged.endAircraftMissionLocationTasking_Abridged(builder);
  }

  public static void startAircraftMissionLocationTasking_Abridged(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(0, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(1, endTimeOffset, 0); }
  public static void addMsnLocName(FlatBufferBuilder builder, int msnLocNameOffset) { builder.addOffset(2, msnLocNameOffset, 0); }
  public static void addAlt(FlatBufferBuilder builder, int alt) { builder.addInt(3, alt, 0); }
  public static void addAirMsnPri(FlatBufferBuilder builder, int airMsnPriOffset) { builder.addOffset(4, airMsnPriOffset, 0); }
  public static void addAreaGeoRad(FlatBufferBuilder builder, int areaGeoRad) { builder.addInt(5, areaGeoRad, 0); }
  public static void addMsnLocPtName(FlatBufferBuilder builder, int msnLocPtNameOffset) { builder.addOffset(6, msnLocPtNameOffset, 0); }
  public static void addMsnLocPtLat(FlatBufferBuilder builder, double msnLocPtLat) { builder.addDouble(7, msnLocPtLat, 0.0); }
  public static void addMsnLocPtLon(FlatBufferBuilder builder, double msnLocPtLon) { builder.addDouble(8, msnLocPtLon, 0.0); }
  public static void addMsnLocPtBarT(FlatBufferBuilder builder, int msnLocPtBarTOffset) { builder.addOffset(9, msnLocPtBarTOffset, 0); }
  public static int endAircraftMissionLocationTasking_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAircraftMissionLocationTasking_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRC"); }
  public static void finishSizePrefixedAircraftMissionLocationTasking_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AircraftMissionLocationTasking_Abridged get(int j) { return get(new AircraftMissionLocationTasking_Abridged(), j); }
    public AircraftMissionLocationTasking_Abridged get(AircraftMissionLocationTasking_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

