// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
@SuppressWarnings("unused")
public final class MtiDwell_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiDwell_Abridged getRootAsMtiDwell_Abridged(ByteBuffer _bb) { return getRootAsMtiDwell_Abridged(_bb, new MtiDwell_Abridged()); }
  public static MtiDwell_Abridged getRootAsMtiDwell_Abridged(ByteBuffer _bb, MtiDwell_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiDwell_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTID"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiDwell_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d2() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d3() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Flag indicating the last dwell of the revisit.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean d4() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d5() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
   * Example: /// Example: 1234567890
   * Constraints: No constraints specified.
   */
  public long d6() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * North-South position of the sensor at the temporal center of the dwell, in degrees.
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double d7() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public double d8() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d9() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double d10() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double d11() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d12() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d13() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of the sensor altitude estimate (field D9), in centimeters.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d14() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double d15() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Ground speed of the sensor at the time of the dwell, in millimeters per second.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d16() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Velocity of the sensor in the vertical direction, in decimeters per second.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d17() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of the estimate of the sensor track, in degrees.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d18() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of estimate of the sensor speed, in millimeters per second.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d19() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int d20() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double d21() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Pitch angle of the platform at the time of the dwell, in degrees.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d22() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Roll angle of the platform at the time of the dwell, in degrees.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d23() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d24() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d25() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d26() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d27() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d28() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d29() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double d30() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int d31() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String d32(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int d32Length() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector d32Vector() { return d32Vector(new StringVector()); }
  public StringVector d32Vector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Dwell timestamp in ISO8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String dwellts() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dwelltsAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer dwelltsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }

  public static int createMtiDwell_Abridged(FlatBufferBuilder builder,
      int d2,
      int d3,
      boolean d4,
      int d5,
      long d6,
      double d7,
      double d8,
      int d9,
      double d10,
      double d11,
      int d12,
      int d13,
      int d14,
      double d15,
      int d16,
      int d17,
      int d18,
      int d19,
      int d20,
      double d21,
      double d22,
      double d23,
      double d24,
      double d25,
      double d26,
      double d27,
      double d28,
      double d29,
      double d30,
      int d31,
      int d32Offset,
      int dwelltsOffset) {
    builder.startTable(32);
    MtiDwell_Abridged.addD30(builder, d30);
    MtiDwell_Abridged.addD29(builder, d29);
    MtiDwell_Abridged.addD28(builder, d28);
    MtiDwell_Abridged.addD27(builder, d27);
    MtiDwell_Abridged.addD26(builder, d26);
    MtiDwell_Abridged.addD25(builder, d25);
    MtiDwell_Abridged.addD24(builder, d24);
    MtiDwell_Abridged.addD23(builder, d23);
    MtiDwell_Abridged.addD22(builder, d22);
    MtiDwell_Abridged.addD21(builder, d21);
    MtiDwell_Abridged.addD15(builder, d15);
    MtiDwell_Abridged.addD11(builder, d11);
    MtiDwell_Abridged.addD10(builder, d10);
    MtiDwell_Abridged.addD8(builder, d8);
    MtiDwell_Abridged.addD7(builder, d7);
    MtiDwell_Abridged.addD6(builder, d6);
    MtiDwell_Abridged.addDwellts(builder, dwelltsOffset);
    MtiDwell_Abridged.addD32(builder, d32Offset);
    MtiDwell_Abridged.addD31(builder, d31);
    MtiDwell_Abridged.addD20(builder, d20);
    MtiDwell_Abridged.addD19(builder, d19);
    MtiDwell_Abridged.addD18(builder, d18);
    MtiDwell_Abridged.addD17(builder, d17);
    MtiDwell_Abridged.addD16(builder, d16);
    MtiDwell_Abridged.addD14(builder, d14);
    MtiDwell_Abridged.addD13(builder, d13);
    MtiDwell_Abridged.addD12(builder, d12);
    MtiDwell_Abridged.addD9(builder, d9);
    MtiDwell_Abridged.addD5(builder, d5);
    MtiDwell_Abridged.addD3(builder, d3);
    MtiDwell_Abridged.addD2(builder, d2);
    MtiDwell_Abridged.addD4(builder, d4);
    return MtiDwell_Abridged.endMtiDwell_Abridged(builder);
  }

  public static void startMtiDwell_Abridged(FlatBufferBuilder builder) { builder.startTable(32); }
  public static void addD2(FlatBufferBuilder builder, int d2) { builder.addInt(0, d2, 0); }
  public static void addD3(FlatBufferBuilder builder, int d3) { builder.addInt(1, d3, 0); }
  public static void addD4(FlatBufferBuilder builder, boolean d4) { builder.addBoolean(2, d4, false); }
  public static void addD5(FlatBufferBuilder builder, int d5) { builder.addInt(3, d5, 0); }
  public static void addD6(FlatBufferBuilder builder, long d6) { builder.addLong(4, d6, 0L); }
  public static void addD7(FlatBufferBuilder builder, double d7) { builder.addDouble(5, d7, 0.0); }
  public static void addD8(FlatBufferBuilder builder, double d8) { builder.addDouble(6, d8, 0.0); }
  public static void addD9(FlatBufferBuilder builder, int d9) { builder.addInt(7, d9, 0); }
  public static void addD10(FlatBufferBuilder builder, double d10) { builder.addDouble(8, d10, 0.0); }
  public static void addD11(FlatBufferBuilder builder, double d11) { builder.addDouble(9, d11, 0.0); }
  public static void addD12(FlatBufferBuilder builder, int d12) { builder.addInt(10, d12, 0); }
  public static void addD13(FlatBufferBuilder builder, int d13) { builder.addInt(11, d13, 0); }
  public static void addD14(FlatBufferBuilder builder, int d14) { builder.addInt(12, d14, 0); }
  public static void addD15(FlatBufferBuilder builder, double d15) { builder.addDouble(13, d15, 0.0); }
  public static void addD16(FlatBufferBuilder builder, int d16) { builder.addInt(14, d16, 0); }
  public static void addD17(FlatBufferBuilder builder, int d17) { builder.addInt(15, d17, 0); }
  public static void addD18(FlatBufferBuilder builder, int d18) { builder.addInt(16, d18, 0); }
  public static void addD19(FlatBufferBuilder builder, int d19) { builder.addInt(17, d19, 0); }
  public static void addD20(FlatBufferBuilder builder, int d20) { builder.addInt(18, d20, 0); }
  public static void addD21(FlatBufferBuilder builder, double d21) { builder.addDouble(19, d21, 0.0); }
  public static void addD22(FlatBufferBuilder builder, double d22) { builder.addDouble(20, d22, 0.0); }
  public static void addD23(FlatBufferBuilder builder, double d23) { builder.addDouble(21, d23, 0.0); }
  public static void addD24(FlatBufferBuilder builder, double d24) { builder.addDouble(22, d24, 0.0); }
  public static void addD25(FlatBufferBuilder builder, double d25) { builder.addDouble(23, d25, 0.0); }
  public static void addD26(FlatBufferBuilder builder, double d26) { builder.addDouble(24, d26, 0.0); }
  public static void addD27(FlatBufferBuilder builder, double d27) { builder.addDouble(25, d27, 0.0); }
  public static void addD28(FlatBufferBuilder builder, double d28) { builder.addDouble(26, d28, 0.0); }
  public static void addD29(FlatBufferBuilder builder, double d29) { builder.addDouble(27, d29, 0.0); }
  public static void addD30(FlatBufferBuilder builder, double d30) { builder.addDouble(28, d30, 0.0); }
  public static void addD31(FlatBufferBuilder builder, int d31) { builder.addInt(29, d31, 0); }
  public static void addD32(FlatBufferBuilder builder, int d32Offset) { builder.addOffset(30, d32Offset, 0); }
  public static int createD32Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startD32Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDwellts(FlatBufferBuilder builder, int dwelltsOffset) { builder.addOffset(31, dwelltsOffset, 0); }
  public static int endMtiDwell_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiDwell_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTID"); }
  public static void finishSizePrefixedMtiDwell_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTID"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiDwell_Abridged get(int j) { return get(new MtiDwell_Abridged(), j); }
    public MtiDwell_Abridged get(MtiDwell_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

