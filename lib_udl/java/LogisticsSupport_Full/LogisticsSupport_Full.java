// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Comprehensive logistical details concerning the planned support of maintenance operations required by an aircraft, including transportation information, supplies coordination, and service personnel.
 */
@SuppressWarnings("unused")
public final class LogisticsSupport_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LogisticsSupport_Full getRootAsLogisticsSupport_Full(ByteBuffer _bb) { return getRootAsLogisticsSupport_Full(_bb, new LogisticsSupport_Full()); }
  public static LogisticsSupport_Full getRootAsLogisticsSupport_Full(ByteBuffer _bb, LogisticsSupport_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LogisticsSupport_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LOGI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogisticsSupport_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: LOGISTICS-SUPPORT-DETAILS UUID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Optional system identifier from external systs. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: GDSSBL012307131347070165
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String extSystemId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer extSystemIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer extSystemIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The tail number of the aircraft that is the subject of this LogisticsSupportDetails record.
   * Example: /// Example: 99290
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public String tailNumber() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tailNumberAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer tailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
   * Example: /// Example: CO17A
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String aircraftMds() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer aircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The current ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
   * Example: /// Example: KCOS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String currIcao() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer currIcaoAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer currIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The supplying ICAO of the aircraft that is the subject of this LogisticsSupportDetails record.
   * Example: /// Example: KCOS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String suppIcao() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer suppIcaoAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer suppIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The time this report was created, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-13T13:47:00.123Z
   * Constraints: No constraints specified.
   */
  public String rptCreatedTime() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rptCreatedTimeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer rptCreatedTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The time this report was closed, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-13T13:47:00.123Z
   * Constraints: No constraints specified.
   */
  public String rptClosedTime() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rptClosedTimeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer rptClosedTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The time indicating when a given aircraft breaks for a mission essential reason. This datetime should be in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-13T13:47:00.123Z
   * Constraints: No constraints specified.
   */
  public String meTime() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer meTimeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer meTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The time indicating when all mission essential problems with a given aircraft have been fixed and is mission capable. This datetime should be in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2023-07-13T13:47:00.123Z
   * Constraints: No constraints specified.
   */
  public String mcTime() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer mcTimeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer mcTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * This field identifies the pacing event for bringing the aircraft to Mission Capable status.  It is used in calculating the Estimated Time Mission Capable (ETMC) value.  Acceptable values are WA (Will Advise), INW (In Work), P+hhh.h (where P=parts and hhh.h is the number of hours up to 999 plus tenths of hours), EQ+hhh.h (EQ=equipment), MRT+hhh.h (MRT=maintenance recovery team).
   * Example: /// Example: WA
   * Constraints: Minimum length = 0, Maximum length = 9
   */
  public String logisticAction() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer logisticActionAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer logisticActionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The identifier that represents a Logistics Master Record.
   * Example: /// Example: L62017
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String logisticsRecordId() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer logisticsRecordIdAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer logisticsRecordIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The estimated time mission capable for the aircraft, in ISO 8601 UCT format with millisecond precision. This is the estimated time when the aircraft is mission ready.
   * Example: /// Example: 2023-07-13T13:47:00.123Z
   * Constraints: No constraints specified.
   */
  public String etic() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eticAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer eticInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Logistics estimated time mission capable.
   * Example: /// Example: 2023-07-13T13:47:00.123Z
   * Constraints: No constraints specified.
   */
  public String etmc() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer etmcAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer etmcInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The maintenance status code of the aircraft which may be based on pilot descriptions or evaluation codes. Contact the source provider for details.
   * Example: /// Example: NMCMU
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String maintStatusCode() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer maintStatusCodeAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer maintStatusCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * This is used to indicate whether a closed master record has been reopened.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean reopenFlag() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The organization that owns this logistics record.
   * Example: /// Example: EXAMPLE_OWNER
   * Constraints: Minimum length = 0, Maximum length = 250
   */
  public String owner() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer ownerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Remarks associated with this LogisticsSupport record.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String logisticsRemarks(int j) { int o = __offset(40); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int logisticsRemarksLength() { int o = __offset(40); return o != 0 ? __vector_len(o) : 0; }
  public StringVector logisticsRemarksVector() { return logisticsRemarksVector(new StringVector()); }
  public StringVector logisticsRemarksVector(StringVector obj) { int o = __offset(40); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Discrepancy information associated with this LogisticsSupport record.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String logisticsDiscrepancyInfos(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int logisticsDiscrepancyInfosLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector logisticsDiscrepancyInfosVector() { return logisticsDiscrepancyInfosVector(new StringVector()); }
  public StringVector logisticsDiscrepancyInfosVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Transportation plans associated with this LogisticsSupport record, used to coordinate maintenance efforts.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String logisticsTransportationPlans(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int logisticsTransportationPlansLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector logisticsTransportationPlansVector() { return logisticsTransportationPlansVector(new StringVector()); }
  public StringVector logisticsTransportationPlansVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Support items associated with this LogisticsSupport record.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String logisticsSupportItems(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int logisticsSupportItemsLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector logisticsSupportItemsVector() { return logisticsSupportItemsVector(new StringVector()); }
  public StringVector logisticsSupportItemsVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(62); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createLogisticsSupport_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int extSystemIdOffset,
      int tailNumberOffset,
      int aircraftMdsOffset,
      int currIcaoOffset,
      int suppIcaoOffset,
      int rptCreatedTimeOffset,
      int rptClosedTimeOffset,
      int meTimeOffset,
      int mcTimeOffset,
      int logisticActionOffset,
      int logisticsRecordIdOffset,
      int eticOffset,
      int etmcOffset,
      int maintStatusCodeOffset,
      boolean reopenFlag,
      int ownerOffset,
      int logisticsRemarksOffset,
      int logisticsDiscrepancyInfosOffset,
      int logisticsTransportationPlansOffset,
      int logisticsSupportItemsOffset,
      int origNetworkOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode) {
    builder.startTable(30);
    LogisticsSupport_Full.addOrigin(builder, originOffset);
    LogisticsSupport_Full.addSource(builder, sourceOffset);
    LogisticsSupport_Full.addUpdatedBy(builder, updatedByOffset);
    LogisticsSupport_Full.addUpdatedAt(builder, updatedAtOffset);
    LogisticsSupport_Full.addCreatedBy(builder, createdByOffset);
    LogisticsSupport_Full.addCreatedAt(builder, createdAtOffset);
    LogisticsSupport_Full.addOrigNetwork(builder, origNetworkOffset);
    LogisticsSupport_Full.addLogisticsSupportItems(builder, logisticsSupportItemsOffset);
    LogisticsSupport_Full.addLogisticsTransportationPlans(builder, logisticsTransportationPlansOffset);
    LogisticsSupport_Full.addLogisticsDiscrepancyInfos(builder, logisticsDiscrepancyInfosOffset);
    LogisticsSupport_Full.addLogisticsRemarks(builder, logisticsRemarksOffset);
    LogisticsSupport_Full.addOwner(builder, ownerOffset);
    LogisticsSupport_Full.addMaintStatusCode(builder, maintStatusCodeOffset);
    LogisticsSupport_Full.addEtmc(builder, etmcOffset);
    LogisticsSupport_Full.addEtic(builder, eticOffset);
    LogisticsSupport_Full.addLogisticsRecordId(builder, logisticsRecordIdOffset);
    LogisticsSupport_Full.addLogisticAction(builder, logisticActionOffset);
    LogisticsSupport_Full.addMcTime(builder, mcTimeOffset);
    LogisticsSupport_Full.addMeTime(builder, meTimeOffset);
    LogisticsSupport_Full.addRptClosedTime(builder, rptClosedTimeOffset);
    LogisticsSupport_Full.addRptCreatedTime(builder, rptCreatedTimeOffset);
    LogisticsSupport_Full.addSuppIcao(builder, suppIcaoOffset);
    LogisticsSupport_Full.addCurrIcao(builder, currIcaoOffset);
    LogisticsSupport_Full.addAircraftMds(builder, aircraftMdsOffset);
    LogisticsSupport_Full.addTailNumber(builder, tailNumberOffset);
    LogisticsSupport_Full.addExtSystemId(builder, extSystemIdOffset);
    LogisticsSupport_Full.addClassificationMarking(builder, classificationMarkingOffset);
    LogisticsSupport_Full.addId(builder, idOffset);
    LogisticsSupport_Full.addDataMode(builder, dataMode);
    LogisticsSupport_Full.addReopenFlag(builder, reopenFlag);
    return LogisticsSupport_Full.endLogisticsSupport_Full(builder);
  }

  public static void startLogisticsSupport_Full(FlatBufferBuilder builder) { builder.startTable(30); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addExtSystemId(FlatBufferBuilder builder, int extSystemIdOffset) { builder.addOffset(2, extSystemIdOffset, 0); }
  public static void addTailNumber(FlatBufferBuilder builder, int tailNumberOffset) { builder.addOffset(3, tailNumberOffset, 0); }
  public static void addAircraftMds(FlatBufferBuilder builder, int aircraftMdsOffset) { builder.addOffset(4, aircraftMdsOffset, 0); }
  public static void addCurrIcao(FlatBufferBuilder builder, int currIcaoOffset) { builder.addOffset(5, currIcaoOffset, 0); }
  public static void addSuppIcao(FlatBufferBuilder builder, int suppIcaoOffset) { builder.addOffset(6, suppIcaoOffset, 0); }
  public static void addRptCreatedTime(FlatBufferBuilder builder, int rptCreatedTimeOffset) { builder.addOffset(7, rptCreatedTimeOffset, 0); }
  public static void addRptClosedTime(FlatBufferBuilder builder, int rptClosedTimeOffset) { builder.addOffset(8, rptClosedTimeOffset, 0); }
  public static void addMeTime(FlatBufferBuilder builder, int meTimeOffset) { builder.addOffset(9, meTimeOffset, 0); }
  public static void addMcTime(FlatBufferBuilder builder, int mcTimeOffset) { builder.addOffset(10, mcTimeOffset, 0); }
  public static void addLogisticAction(FlatBufferBuilder builder, int logisticActionOffset) { builder.addOffset(11, logisticActionOffset, 0); }
  public static void addLogisticsRecordId(FlatBufferBuilder builder, int logisticsRecordIdOffset) { builder.addOffset(12, logisticsRecordIdOffset, 0); }
  public static void addEtic(FlatBufferBuilder builder, int eticOffset) { builder.addOffset(13, eticOffset, 0); }
  public static void addEtmc(FlatBufferBuilder builder, int etmcOffset) { builder.addOffset(14, etmcOffset, 0); }
  public static void addMaintStatusCode(FlatBufferBuilder builder, int maintStatusCodeOffset) { builder.addOffset(15, maintStatusCodeOffset, 0); }
  public static void addReopenFlag(FlatBufferBuilder builder, boolean reopenFlag) { builder.addBoolean(16, reopenFlag, false); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(17, ownerOffset, 0); }
  public static void addLogisticsRemarks(FlatBufferBuilder builder, int logisticsRemarksOffset) { builder.addOffset(18, logisticsRemarksOffset, 0); }
  public static int createLogisticsRemarksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLogisticsRemarksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLogisticsDiscrepancyInfos(FlatBufferBuilder builder, int logisticsDiscrepancyInfosOffset) { builder.addOffset(19, logisticsDiscrepancyInfosOffset, 0); }
  public static int createLogisticsDiscrepancyInfosVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLogisticsDiscrepancyInfosVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLogisticsTransportationPlans(FlatBufferBuilder builder, int logisticsTransportationPlansOffset) { builder.addOffset(20, logisticsTransportationPlansOffset, 0); }
  public static int createLogisticsTransportationPlansVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLogisticsTransportationPlansVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLogisticsSupportItems(FlatBufferBuilder builder, int logisticsSupportItemsOffset) { builder.addOffset(21, logisticsSupportItemsOffset, 0); }
  public static int createLogisticsSupportItemsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLogisticsSupportItemsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(22, origNetworkOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(23, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(24, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(25, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(26, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(27, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(28, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(29, dataMode, 0); }
  public static int endLogisticsSupport_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLogisticsSupport_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LOGI"); }
  public static void finishSizePrefixedLogisticsSupport_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LOGI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogisticsSupport_Full get(int j) { return get(new LogisticsSupport_Full(), j); }
    public LogisticsSupport_Full get(LogisticsSupport_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

