// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Characteristic attributes of a IonoObservation.
 */
@SuppressWarnings("unused")
public final class IonoObservationCharAtts_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationCharAtts_Full getRootAsIonoObservationCharAtts_Full(ByteBuffer _bb) { return getRootAsIonoObservationCharAtts_Full(_bb, new IonoObservationCharAtts_Full()); }
  public static IonoObservationCharAtts_Full getRootAsIonoObservationCharAtts_Full(ByteBuffer _bb, IonoObservationCharAtts_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationCharAtts_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationCharAtts_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Characteristic's URSI ID. See the characteristic's description for its corresponding URSI ID.
   * Example: /// Example: 04
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String ursiId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ursiIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer ursiIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Characteristic name. This value should reflect the UDL field name for the corresponding characteristic.
   * Example: /// Example: hprimeF2
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String charName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer charNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer charNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Specified characteristic's lower bound. Should be less than or equal to the characteristic's current value as set in this record.
   * Example: /// Example: 1.26
   * Constraints: No constraints specified.
   */
  public double lowerBound() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Specified characteristic's upper bound. Should be greater than or equal to the characteristic's current value as set in this record.
   * Example: /// Example: 2.57
   * Constraints: No constraints specified.
   */
  public double upperBound() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Qualifying letter (Q) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
   * Example: /// Example: T
   * Constraints: No constraints specified.
   */
  public String q() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer qAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer qInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Descriptive letter (D) for the characteristic specified by URSI ID. Describes specific ionospheric conditions, beyond numerical values.
   * Example: /// Example: K
   * Constraints: No constraints specified.
   */
  public String d() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer dInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Name of the climate model.
   * Example: /// Example: IRI
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String climateModelName() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer climateModelNameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer climateModelNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * List of options for the climate model.
   * Example: /// Example: ['URSI-88', 'No storm']
   * Constraints: No constraints specified.
   */
  public String climateModelOptions(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int climateModelOptionsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector climateModelOptionsVector() { return climateModelOptionsVector(new StringVector()); }
  public StringVector climateModelOptionsVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Input parameters for the climate model.
   * Example: /// Example: ['ISSN1 88.1', 'Option 2']
   * Constraints: No constraints specified.
   */
  public String climateModelInputParams(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int climateModelInputParamsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector climateModelInputParamsVector() { return climateModelInputParamsVector(new StringVector()); }
  public StringVector climateModelInputParamsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Uncertainty Bounds (lower and upper) define an interval around reported value that contains true value at the specified probability level. Probability levels are specified in terms of percentile (from 1 to 100) or the standard deviation, sigma (e.g. 1sigma, 2sigma, 3sigma, 5percentile, 10percentile, 25percentile).
   * Example: /// Example: 1sigma
   * Constraints: No constraints specified.
   */
  public String uncertaintyBoundType() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer uncertaintyBoundTypeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer uncertaintyBoundTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }

  public static int createIonoObservationCharAtts_Full(FlatBufferBuilder builder,
      int ursiIdOffset,
      int charNameOffset,
      double lowerBound,
      double upperBound,
      int qOffset,
      int dOffset,
      int climateModelNameOffset,
      int climateModelOptionsOffset,
      int climateModelInputParamsOffset,
      int uncertaintyBoundTypeOffset) {
    builder.startTable(10);
    IonoObservationCharAtts_Full.addUpperBound(builder, upperBound);
    IonoObservationCharAtts_Full.addLowerBound(builder, lowerBound);
    IonoObservationCharAtts_Full.addUncertaintyBoundType(builder, uncertaintyBoundTypeOffset);
    IonoObservationCharAtts_Full.addClimateModelInputParams(builder, climateModelInputParamsOffset);
    IonoObservationCharAtts_Full.addClimateModelOptions(builder, climateModelOptionsOffset);
    IonoObservationCharAtts_Full.addClimateModelName(builder, climateModelNameOffset);
    IonoObservationCharAtts_Full.addD(builder, dOffset);
    IonoObservationCharAtts_Full.addQ(builder, qOffset);
    IonoObservationCharAtts_Full.addCharName(builder, charNameOffset);
    IonoObservationCharAtts_Full.addUrsiId(builder, ursiIdOffset);
    return IonoObservationCharAtts_Full.endIonoObservationCharAtts_Full(builder);
  }

  public static void startIonoObservationCharAtts_Full(FlatBufferBuilder builder) { builder.startTable(10); }
  public static void addUrsiId(FlatBufferBuilder builder, int ursiIdOffset) { builder.addOffset(0, ursiIdOffset, 0); }
  public static void addCharName(FlatBufferBuilder builder, int charNameOffset) { builder.addOffset(1, charNameOffset, 0); }
  public static void addLowerBound(FlatBufferBuilder builder, double lowerBound) { builder.addDouble(2, lowerBound, 0.0); }
  public static void addUpperBound(FlatBufferBuilder builder, double upperBound) { builder.addDouble(3, upperBound, 0.0); }
  public static void addQ(FlatBufferBuilder builder, int qOffset) { builder.addOffset(4, qOffset, 0); }
  public static void addD(FlatBufferBuilder builder, int dOffset) { builder.addOffset(5, dOffset, 0); }
  public static void addClimateModelName(FlatBufferBuilder builder, int climateModelNameOffset) { builder.addOffset(6, climateModelNameOffset, 0); }
  public static void addClimateModelOptions(FlatBufferBuilder builder, int climateModelOptionsOffset) { builder.addOffset(7, climateModelOptionsOffset, 0); }
  public static int createClimateModelOptionsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startClimateModelOptionsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addClimateModelInputParams(FlatBufferBuilder builder, int climateModelInputParamsOffset) { builder.addOffset(8, climateModelInputParamsOffset, 0); }
  public static int createClimateModelInputParamsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startClimateModelInputParamsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUncertaintyBoundType(FlatBufferBuilder builder, int uncertaintyBoundTypeOffset) { builder.addOffset(9, uncertaintyBoundTypeOffset, 0); }
  public static int endIonoObservationCharAtts_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationCharAtts_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationCharAtts_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationCharAtts_Full get(int j) { return get(new IonoObservationCharAtts_Full(), j); }
    public IonoObservationCharAtts_Full get(IonoObservationCharAtts_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

