// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Captures link status.
 */
@SuppressWarnings("unused")
public final class LinkStatus_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LinkStatus_Abridged getRootAsLinkStatus_Abridged(ByteBuffer _bb) { return getRootAsLinkStatus_Abridged(_bb, new LinkStatus_Abridged()); }
  public static LinkStatus_Abridged getRootAsLinkStatus_Abridged(ByteBuffer _bb, LinkStatus_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LinkStatus_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LINK"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LinkStatus_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: LINKSTATUS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique ID of the on-orbit satellite (Sat-1) forming the link.  A null value for idOnOrbit1 indicates that the link is formed over a LEO/MEO constellation.
   * Example: /// Example: REF-ONORBIT1-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit1() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbit1AsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbit1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique ID of the on-orbit satellite (Sat-2) forming the link.  A null value for idOnOrbit2 indicates either a link employing only Sat-1 or a link formed over a LEO/MEO constellation.
   * Example: /// Example: REF-ONORBIT2-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit2() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbit2AsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbit2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The link establishment time, or the time that the link becomes available for use, in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String linkStartTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkStartTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer linkStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The link termination time, or the time that the link becomes unavailable for use, in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String linkStopTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkStopTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer linkStopTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The constellation name if the link is established over a LEO/MEO constellation.  In this case, idOnOrbit1 and idOnOrbit2 will be null.
   * Example: /// Example: Fornax
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String constellation() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer constellationAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer constellationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The name or description of the link.
   * Example: /// Example: Example description
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String linkName() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkNameAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer linkNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The type of the link.
   * Example: /// Example: Example link
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String linkType() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkTypeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer linkTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The RF band employed by the link (e.g. MIL-KA, COM-KA, X-BAND, C-BAND, etc.).
   * Example: /// Example: MIL-KA
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String band() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bandAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer bandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The ID of beam-1 forming the link.  In the case of two sat link, beam-1 corresponds to Sat-1.
   * Example: /// Example: REF-BEAM1-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idBeam1() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idBeam1AsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer idBeam1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The name or description of link endpoint-1, corresponding to beam-1.
   * Example: /// Example: Example endpoint
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String endPoint1Name() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endPoint1NameAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer endPoint1NameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Latitude of link endpoint-1, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double endPoint1Lat() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Longitude of link endpoint-1, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 80.23
   * Constraints: No constraints specified.
   */
  public double endPoint1Lon() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The ID of beam-2 forming the link.  In the case of two sat link, beam-2 corresponds to Sat-2.
   * Example: /// Example: REF-BEAM2-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idBeam2() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idBeam2AsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer idBeam2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The name or description of link endpoint-2, corresponding to beam-2.
   * Example: /// Example: Example description
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String endPoint2Name() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endPoint2NameAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer endPoint2NameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Latitude of link endpoint-2, WGS-84 in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double endPoint2Lat() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Longitude of link endpoint-2, WGS-84 longitude in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 80.23
   * Constraints: No constraints specified.
   */
  public double endPoint2Lon() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The endpoint-1 to endpoint-2 data rate, in kbps.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double dataRate1To2() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The endpoint-2 to endpoint-1 data rate, in kbps.
   * Example: /// Example: 10.23
   * Constraints: No constraints specified.
   */
  public double dataRate2To1() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The state of the link (e.g. OK, DEGRADED-WEATHER, DEGRADED-EMI, etc.).
   * Example: /// Example: DEGRADED-WEATHER
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String linkState() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer linkStateAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer linkStateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The SYSCAP mission status of the system(s) forming the link.
   * Example: /// Example: Example status
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String sysCap() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sysCapAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer sysCapInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The OPSCAP mission status of the system(s) forming the link.
   * Example: /// Example: Example status
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String opsCap() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opsCapAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer opsCapInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(60); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Satellite/catalog number of the target on-orbit primary object.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int satNo1() { int o = __offset(62); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Satellite/catalog number of the target on-orbit secondary object.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int satNo2() { int o = __offset(64); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createLinkStatus_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbit1Offset,
      int idOnOrbit2Offset,
      int linkStartTimeOffset,
      int linkStopTimeOffset,
      int constellationOffset,
      int linkNameOffset,
      int linkTypeOffset,
      int bandOffset,
      int idBeam1Offset,
      int endPoint1NameOffset,
      double endPoint1Lat,
      double endPoint1Lon,
      int idBeam2Offset,
      int endPoint2NameOffset,
      double endPoint2Lat,
      double endPoint2Lon,
      double dataRate1To2,
      double dataRate2To1,
      int linkStateOffset,
      int sysCapOffset,
      int opsCapOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int satNo1,
      int satNo2) {
    builder.startTable(31);
    LinkStatus_Abridged.addDataRate2To1(builder, dataRate2To1);
    LinkStatus_Abridged.addDataRate1To2(builder, dataRate1To2);
    LinkStatus_Abridged.addEndPoint2Lon(builder, endPoint2Lon);
    LinkStatus_Abridged.addEndPoint2Lat(builder, endPoint2Lat);
    LinkStatus_Abridged.addEndPoint1Lon(builder, endPoint1Lon);
    LinkStatus_Abridged.addEndPoint1Lat(builder, endPoint1Lat);
    LinkStatus_Abridged.addSatNo2(builder, satNo2);
    LinkStatus_Abridged.addSatNo1(builder, satNo1);
    LinkStatus_Abridged.addOrigNetwork(builder, origNetworkOffset);
    LinkStatus_Abridged.addOrigin(builder, originOffset);
    LinkStatus_Abridged.addSource(builder, sourceOffset);
    LinkStatus_Abridged.addCreatedBy(builder, createdByOffset);
    LinkStatus_Abridged.addCreatedAt(builder, createdAtOffset);
    LinkStatus_Abridged.addOpsCap(builder, opsCapOffset);
    LinkStatus_Abridged.addSysCap(builder, sysCapOffset);
    LinkStatus_Abridged.addLinkState(builder, linkStateOffset);
    LinkStatus_Abridged.addEndPoint2Name(builder, endPoint2NameOffset);
    LinkStatus_Abridged.addIdBeam2(builder, idBeam2Offset);
    LinkStatus_Abridged.addEndPoint1Name(builder, endPoint1NameOffset);
    LinkStatus_Abridged.addIdBeam1(builder, idBeam1Offset);
    LinkStatus_Abridged.addBand(builder, bandOffset);
    LinkStatus_Abridged.addLinkType(builder, linkTypeOffset);
    LinkStatus_Abridged.addLinkName(builder, linkNameOffset);
    LinkStatus_Abridged.addConstellation(builder, constellationOffset);
    LinkStatus_Abridged.addLinkStopTime(builder, linkStopTimeOffset);
    LinkStatus_Abridged.addLinkStartTime(builder, linkStartTimeOffset);
    LinkStatus_Abridged.addIdOnOrbit2(builder, idOnOrbit2Offset);
    LinkStatus_Abridged.addIdOnOrbit1(builder, idOnOrbit1Offset);
    LinkStatus_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    LinkStatus_Abridged.addId(builder, idOffset);
    LinkStatus_Abridged.addDataMode(builder, dataMode);
    return LinkStatus_Abridged.endLinkStatus_Abridged(builder);
  }

  public static void startLinkStatus_Abridged(FlatBufferBuilder builder) { builder.startTable(31); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit1(FlatBufferBuilder builder, int idOnOrbit1Offset) { builder.addOffset(2, idOnOrbit1Offset, 0); }
  public static void addIdOnOrbit2(FlatBufferBuilder builder, int idOnOrbit2Offset) { builder.addOffset(3, idOnOrbit2Offset, 0); }
  public static void addLinkStartTime(FlatBufferBuilder builder, int linkStartTimeOffset) { builder.addOffset(4, linkStartTimeOffset, 0); }
  public static void addLinkStopTime(FlatBufferBuilder builder, int linkStopTimeOffset) { builder.addOffset(5, linkStopTimeOffset, 0); }
  public static void addConstellation(FlatBufferBuilder builder, int constellationOffset) { builder.addOffset(6, constellationOffset, 0); }
  public static void addLinkName(FlatBufferBuilder builder, int linkNameOffset) { builder.addOffset(7, linkNameOffset, 0); }
  public static void addLinkType(FlatBufferBuilder builder, int linkTypeOffset) { builder.addOffset(8, linkTypeOffset, 0); }
  public static void addBand(FlatBufferBuilder builder, int bandOffset) { builder.addOffset(9, bandOffset, 0); }
  public static void addIdBeam1(FlatBufferBuilder builder, int idBeam1Offset) { builder.addOffset(10, idBeam1Offset, 0); }
  public static void addEndPoint1Name(FlatBufferBuilder builder, int endPoint1NameOffset) { builder.addOffset(11, endPoint1NameOffset, 0); }
  public static void addEndPoint1Lat(FlatBufferBuilder builder, double endPoint1Lat) { builder.addDouble(12, endPoint1Lat, 0.0); }
  public static void addEndPoint1Lon(FlatBufferBuilder builder, double endPoint1Lon) { builder.addDouble(13, endPoint1Lon, 0.0); }
  public static void addIdBeam2(FlatBufferBuilder builder, int idBeam2Offset) { builder.addOffset(14, idBeam2Offset, 0); }
  public static void addEndPoint2Name(FlatBufferBuilder builder, int endPoint2NameOffset) { builder.addOffset(15, endPoint2NameOffset, 0); }
  public static void addEndPoint2Lat(FlatBufferBuilder builder, double endPoint2Lat) { builder.addDouble(16, endPoint2Lat, 0.0); }
  public static void addEndPoint2Lon(FlatBufferBuilder builder, double endPoint2Lon) { builder.addDouble(17, endPoint2Lon, 0.0); }
  public static void addDataRate1To2(FlatBufferBuilder builder, double dataRate1To2) { builder.addDouble(18, dataRate1To2, 0.0); }
  public static void addDataRate2To1(FlatBufferBuilder builder, double dataRate2To1) { builder.addDouble(19, dataRate2To1, 0.0); }
  public static void addLinkState(FlatBufferBuilder builder, int linkStateOffset) { builder.addOffset(20, linkStateOffset, 0); }
  public static void addSysCap(FlatBufferBuilder builder, int sysCapOffset) { builder.addOffset(21, sysCapOffset, 0); }
  public static void addOpsCap(FlatBufferBuilder builder, int opsCapOffset) { builder.addOffset(22, opsCapOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(23, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(24, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(25, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(26, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(27, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(28, dataMode, 0); }
  public static void addSatNo1(FlatBufferBuilder builder, int satNo1) { builder.addInt(29, satNo1, 0); }
  public static void addSatNo2(FlatBufferBuilder builder, int satNo2) { builder.addInt(30, satNo2, 0); }
  public static int endLinkStatus_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLinkStatus_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LINK"); }
  public static void finishSizePrefixedLinkStatus_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LINK"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LinkStatus_Abridged get(int j) { return get(new LinkStatus_Abridged(), j); }
    public LinkStatus_Abridged get(LinkStatus_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

