// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
 */
@SuppressWarnings("unused")
public final class AirfieldSlot_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirfieldSlot_Full getRootAsAirfieldSlot_Full(ByteBuffer _bb) { return getRootAsAirfieldSlot_Full(_bb, new AirfieldSlot_Full()); }
  public static AirfieldSlot_Full getRootAsAirfieldSlot_Full(ByteBuffer _bb, AirfieldSlot_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirfieldSlot_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRF"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirfieldSlot_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The name of the airfield where this slot is located.
   * Example: /// Example: USAF Academy AFLD
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String airfieldName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer airfieldNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer airfieldNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   * Example: /// Example: KCOS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String icao() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer icaoAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer icaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Unique identifier of the Airfield for which this slot information applies.
   * Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idAirfield() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAirfieldAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Alternate airfield identifier provided by the source.
   * Example: /// Example: ALT-AIRFIELD-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String altAirfieldId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altAirfieldIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer altAirfieldIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Name of this slot.
   * Example: /// Example: Apron 5
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String name() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
   * Example: /// Example: WORKING
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public byte type() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
   * Example: /// Example: WIDE
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public byte acSlotCat() { int o = __offset(20); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Number of aircraft that can fit in this slot at the same time.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int capacity() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
   * Example: /// Example: 0000Z
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String startTime() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
   * Example: /// Example: 2359Z
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String endTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer endTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer endTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
   * Example: /// Example: 7
   * Constraints: No constraints specified.
   */
  public int minSeparation() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional notes/comments for this airfield slot.
   * Example: /// Example: Notes for an airfield slot.
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String notes() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(48); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirfieldSlot_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int airfieldNameOffset,
      int icaoOffset,
      int idAirfieldOffset,
      int altAirfieldIdOffset,
      int nameOffset,
      byte type,
      byte acSlotCat,
      int capacity,
      int startTimeOffset,
      int endTimeOffset,
      int minSeparation,
      int notesOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(23);
    AirfieldSlot_Full.addOrigNetwork(builder, origNetworkOffset);
    AirfieldSlot_Full.addOrigin(builder, originOffset);
    AirfieldSlot_Full.addSource(builder, sourceOffset);
    AirfieldSlot_Full.addSourceDl(builder, sourceDlOffset);
    AirfieldSlot_Full.addUpdatedBy(builder, updatedByOffset);
    AirfieldSlot_Full.addUpdatedAt(builder, updatedAtOffset);
    AirfieldSlot_Full.addCreatedBy(builder, createdByOffset);
    AirfieldSlot_Full.addCreatedAt(builder, createdAtOffset);
    AirfieldSlot_Full.addNotes(builder, notesOffset);
    AirfieldSlot_Full.addMinSeparation(builder, minSeparation);
    AirfieldSlot_Full.addEndTime(builder, endTimeOffset);
    AirfieldSlot_Full.addStartTime(builder, startTimeOffset);
    AirfieldSlot_Full.addCapacity(builder, capacity);
    AirfieldSlot_Full.addName(builder, nameOffset);
    AirfieldSlot_Full.addAltAirfieldId(builder, altAirfieldIdOffset);
    AirfieldSlot_Full.addIdAirfield(builder, idAirfieldOffset);
    AirfieldSlot_Full.addIcao(builder, icaoOffset);
    AirfieldSlot_Full.addAirfieldName(builder, airfieldNameOffset);
    AirfieldSlot_Full.addClassificationMarking(builder, classificationMarkingOffset);
    AirfieldSlot_Full.addId(builder, idOffset);
    AirfieldSlot_Full.addDataMode(builder, dataMode);
    AirfieldSlot_Full.addAcSlotCat(builder, acSlotCat);
    AirfieldSlot_Full.addType(builder, type);
    return AirfieldSlot_Full.endAirfieldSlot_Full(builder);
  }

  public static void startAirfieldSlot_Full(FlatBufferBuilder builder) { builder.startTable(23); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addAirfieldName(FlatBufferBuilder builder, int airfieldNameOffset) { builder.addOffset(2, airfieldNameOffset, 0); }
  public static void addIcao(FlatBufferBuilder builder, int icaoOffset) { builder.addOffset(3, icaoOffset, 0); }
  public static void addIdAirfield(FlatBufferBuilder builder, int idAirfieldOffset) { builder.addOffset(4, idAirfieldOffset, 0); }
  public static void addAltAirfieldId(FlatBufferBuilder builder, int altAirfieldIdOffset) { builder.addOffset(5, altAirfieldIdOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(6, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(7, type, 0); }
  public static void addAcSlotCat(FlatBufferBuilder builder, byte acSlotCat) { builder.addByte(8, acSlotCat, 0); }
  public static void addCapacity(FlatBufferBuilder builder, int capacity) { builder.addInt(9, capacity, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(10, startTimeOffset, 0); }
  public static void addEndTime(FlatBufferBuilder builder, int endTimeOffset) { builder.addOffset(11, endTimeOffset, 0); }
  public static void addMinSeparation(FlatBufferBuilder builder, int minSeparation) { builder.addInt(12, minSeparation, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(13, notesOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(14, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(15, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(16, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(17, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(18, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(19, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(20, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(21, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(22, dataMode, 0); }
  public static int endAirfieldSlot_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirfieldSlot_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRF"); }
  public static void finishSizePrefixedAirfieldSlot_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRF"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirfieldSlot_Full get(int j) { return get(new AirfieldSlot_Full(), j); }
    public AirfieldSlot_Full get(AirfieldSlot_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

