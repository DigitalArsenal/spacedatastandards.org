// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information pertaining to UDL data owners.
 */
@SuppressWarnings("unused")
public final class DataOwner_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DataOwner_Abridged getRootAsDataOwner_Abridged(ByteBuffer _bb) { return getRootAsDataOwner_Abridged(_bb, new DataOwner_Abridged()); }
  public static DataOwner_Abridged getRootAsDataOwner_Abridged(ByteBuffer _bb, DataOwner_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DataOwner_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DATA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataOwner_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The name of the data owner.
   * Example: /// Example: Data owner name
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String doName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer doNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer doNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
   * Example: /// Example: Commercial
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String ownerType() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer ownerTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
   * Example: /// Example: ELSET
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String dataType() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dataTypeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer dataTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Organization name for the data provider.
   * Example: /// Example: ACME
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String provider() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer providerAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer providerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
   * Example: /// Example: US
   * Constraints: Minimum length = 1, Maximum length = 4
   */
  public String countryCode() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Unique identifier of the contact for this data owner.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String idContact() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idContactAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer idContactInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Description of this data owner.
   * Example: /// Example: Description of this data owner.
   * Constraints: No constraints specified.
   */
  public String description() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional control required to access this data type from this owner.
   * Example: /// Example: PR-ACME-ELSETS
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String control() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer controlAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer controlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean enabled() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating if the data owner is coming soon or not yet available.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean comingSoon() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Source of the data.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }

  public static int createDataOwner_Abridged(FlatBufferBuilder builder,
      int doNameOffset,
      int classificationMarkingOffset,
      int ownerTypeOffset,
      int dataTypeOffset,
      int providerOffset,
      int countryCodeOffset,
      int idContactOffset,
      int descriptionOffset,
      int controlOffset,
      boolean enabled,
      boolean comingSoon,
      int sourceOffset) {
    builder.startTable(12);
    DataOwner_Abridged.addSource(builder, sourceOffset);
    DataOwner_Abridged.addControl(builder, controlOffset);
    DataOwner_Abridged.addDescription(builder, descriptionOffset);
    DataOwner_Abridged.addIdContact(builder, idContactOffset);
    DataOwner_Abridged.addCountryCode(builder, countryCodeOffset);
    DataOwner_Abridged.addProvider(builder, providerOffset);
    DataOwner_Abridged.addDataType(builder, dataTypeOffset);
    DataOwner_Abridged.addOwnerType(builder, ownerTypeOffset);
    DataOwner_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    DataOwner_Abridged.addDoName(builder, doNameOffset);
    DataOwner_Abridged.addComingSoon(builder, comingSoon);
    DataOwner_Abridged.addEnabled(builder, enabled);
    return DataOwner_Abridged.endDataOwner_Abridged(builder);
  }

  public static void startDataOwner_Abridged(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addDoName(FlatBufferBuilder builder, int doNameOffset) { builder.addOffset(0, doNameOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addOwnerType(FlatBufferBuilder builder, int ownerTypeOffset) { builder.addOffset(2, ownerTypeOffset, 0); }
  public static void addDataType(FlatBufferBuilder builder, int dataTypeOffset) { builder.addOffset(3, dataTypeOffset, 0); }
  public static void addProvider(FlatBufferBuilder builder, int providerOffset) { builder.addOffset(4, providerOffset, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(5, countryCodeOffset, 0); }
  public static void addIdContact(FlatBufferBuilder builder, int idContactOffset) { builder.addOffset(6, idContactOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(7, descriptionOffset, 0); }
  public static void addControl(FlatBufferBuilder builder, int controlOffset) { builder.addOffset(8, controlOffset, 0); }
  public static void addEnabled(FlatBufferBuilder builder, boolean enabled) { builder.addBoolean(9, enabled, false); }
  public static void addComingSoon(FlatBufferBuilder builder, boolean comingSoon) { builder.addBoolean(10, comingSoon, false); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(11, sourceOffset, 0); }
  public static int endDataOwner_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDataOwner_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DATA"); }
  public static void finishSizePrefixedDataOwner_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DATA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataOwner_Abridged get(int j) { return get(new DataOwner_Abridged(), j); }
    public DataOwner_Abridged get(DataOwner_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

