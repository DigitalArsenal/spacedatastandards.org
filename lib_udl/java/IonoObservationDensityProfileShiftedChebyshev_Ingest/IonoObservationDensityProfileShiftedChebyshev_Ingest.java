// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Coefficients to describe either the E, F1, and bottomside F2 profile shapes or the height uncertainty boundaries.
 */
@SuppressWarnings("unused")
public final class IonoObservationDensityProfileShiftedChebyshev_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationDensityProfileShiftedChebyshev_Ingest getRootAsIonoObservationDensityProfileShiftedChebyshev_Ingest(ByteBuffer _bb) { return getRootAsIonoObservationDensityProfileShiftedChebyshev_Ingest(_bb, new IonoObservationDensityProfileShiftedChebyshev_Ingest()); }
  public static IonoObservationDensityProfileShiftedChebyshev_Ingest getRootAsIonoObservationDensityProfileShiftedChebyshev_Ingest(ByteBuffer _bb, IonoObservationDensityProfileShiftedChebyshev_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationDensityProfileShiftedChebyshev_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationDensityProfileShiftedChebyshev_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Description of the computation technique.
   * Example: /// Example: Best-fit Huang-Reinisch formalism based on shifted Chebyshev expansion.
   * Constraints: No constraints specified.
   */
  public String description() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Up to 3 groups of coefficients, using “shiftedChebyshev” sub-field, to describe E, F1, and bottomside F2 profile shapes, or up to 6 groups of coefficients to describe height uncertainty boundaries (upper and lower).
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String shiftedChebyshevs(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int shiftedChebyshevsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector shiftedChebyshevsVector() { return shiftedChebyshevsVector(new StringVector()); }
  public StringVector shiftedChebyshevsVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createIonoObservationDensityProfileShiftedChebyshev_Ingest(FlatBufferBuilder builder,
      int descriptionOffset,
      int shiftedChebyshevsOffset) {
    builder.startTable(2);
    IonoObservationDensityProfileShiftedChebyshev_Ingest.addShiftedChebyshevs(builder, shiftedChebyshevsOffset);
    IonoObservationDensityProfileShiftedChebyshev_Ingest.addDescription(builder, descriptionOffset);
    return IonoObservationDensityProfileShiftedChebyshev_Ingest.endIonoObservationDensityProfileShiftedChebyshev_Ingest(builder);
  }

  public static void startIonoObservationDensityProfileShiftedChebyshev_Ingest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(0, descriptionOffset, 0); }
  public static void addShiftedChebyshevs(FlatBufferBuilder builder, int shiftedChebyshevsOffset) { builder.addOffset(1, shiftedChebyshevsOffset, 0); }
  public static int createShiftedChebyshevsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startShiftedChebyshevsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endIonoObservationDensityProfileShiftedChebyshev_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationDensityProfileShiftedChebyshev_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationDensityProfileShiftedChebyshev_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationDensityProfileShiftedChebyshev_Ingest get(int j) { return get(new IonoObservationDensityProfileShiftedChebyshev_Ingest(), j); }
    public IonoObservationDensityProfileShiftedChebyshev_Ingest get(IonoObservationDensityProfileShiftedChebyshev_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

