// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Coefficients to describe profile shape as quasi-parabolic segments.
 */
@SuppressWarnings("unused")
public final class IonoObservationDensityProfileQuasiParabolic_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationDensityProfileQuasiParabolic_Full getRootAsIonoObservationDensityProfileQuasiParabolic_Full(ByteBuffer _bb) { return getRootAsIonoObservationDensityProfileQuasiParabolic_Full(_bb, new IonoObservationDensityProfileQuasiParabolic_Full()); }
  public static IonoObservationDensityProfileQuasiParabolic_Full getRootAsIonoObservationDensityProfileQuasiParabolic_Full(ByteBuffer _bb, IonoObservationDensityProfileQuasiParabolic_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationDensityProfileQuasiParabolic_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationDensityProfileQuasiParabolic_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * General description of the quasi-parabolic computation algorithm.
   * Example: /// Example: Array of the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C
   * Constraints: No constraints specified.
   */
  public String description() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Value of the Earth's radius, in kilometers, used for computations.
   * Example: /// Example: 6370.1
   * Constraints: No constraints specified.
   */
  public double earthRadius() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Array of quasi-parabolic segments. Each segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C”. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String quasiParabolicSegments(int j) { int o = __offset(8); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int quasiParabolicSegmentsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public StringVector quasiParabolicSegmentsVector() { return quasiParabolicSegmentsVector(new StringVector()); }
  public StringVector quasiParabolicSegmentsVector(StringVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createIonoObservationDensityProfileQuasiParabolic_Full(FlatBufferBuilder builder,
      int descriptionOffset,
      double earthRadius,
      int quasiParabolicSegmentsOffset) {
    builder.startTable(3);
    IonoObservationDensityProfileQuasiParabolic_Full.addEarthRadius(builder, earthRadius);
    IonoObservationDensityProfileQuasiParabolic_Full.addQuasiParabolicSegments(builder, quasiParabolicSegmentsOffset);
    IonoObservationDensityProfileQuasiParabolic_Full.addDescription(builder, descriptionOffset);
    return IonoObservationDensityProfileQuasiParabolic_Full.endIonoObservationDensityProfileQuasiParabolic_Full(builder);
  }

  public static void startIonoObservationDensityProfileQuasiParabolic_Full(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(0, descriptionOffset, 0); }
  public static void addEarthRadius(FlatBufferBuilder builder, double earthRadius) { builder.addDouble(1, earthRadius, 0.0); }
  public static void addQuasiParabolicSegments(FlatBufferBuilder builder, int quasiParabolicSegmentsOffset) { builder.addOffset(2, quasiParabolicSegmentsOffset, 0); }
  public static int createQuasiParabolicSegmentsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startQuasiParabolicSegmentsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endIonoObservationDensityProfileQuasiParabolic_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationDensityProfileQuasiParabolic_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationDensityProfileQuasiParabolic_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationDensityProfileQuasiParabolic_Full get(int j) { return get(new IonoObservationDensityProfileQuasiParabolic_Full(), j); }
    public IonoObservationDensityProfileQuasiParabolic_Full get(IonoObservationDensityProfileQuasiParabolic_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

