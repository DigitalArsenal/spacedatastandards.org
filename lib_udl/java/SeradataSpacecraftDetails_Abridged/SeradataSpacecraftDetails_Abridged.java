// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
 */
@SuppressWarnings("unused")
public final class SeradataSpacecraftDetails_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SeradataSpacecraftDetails_Abridged getRootAsSeradataSpacecraftDetails_Abridged(ByteBuffer _bb) { return getRootAsSeradataSpacecraftDetails_Abridged(_bb, new SeradataSpacecraftDetails_Abridged()); }
  public static SeradataSpacecraftDetails_Abridged getRootAsSeradataSpacecraftDetails_Abridged(ByteBuffer _bb, SeradataSpacecraftDetails_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SeradataSpacecraftDetails_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SERA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SeradataSpacecraftDetails_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SERADATASPACECRAFTDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * UUID of the parent Onorbit record, if available.
   * Example: /// Example: 503
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Spacecraft name.
   * Example: /// Example: name
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String name() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Description associated with the spacecraft.
   * Example: /// Example: description
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String description() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Seradata international number.
   * Example: /// Example: number
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String intlNumber() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer intlNumberAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer intlNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Seradata sector (e.g. Commercial, Military, Civil/Other).
   * Example: /// Example: Commercial
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String sector() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sectorAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer sectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Apogee in km.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double apogee() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Perigee in km.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double perigee() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft period in minutes.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double period() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Seradata provided inclination in degrees.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double inclination() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * UUID of the prime manufacturer organization, if available.
   * Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String primeManufacturerOrgId() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer primeManufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer primeManufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
   * Example: /// Example: 3-Axis
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String stabilizer() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stabilizerAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer stabilizerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Spacecraft design life in days.
   * Example: /// Example: 231
   * Constraints: No constraints specified.
   */
  public int designLife() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Spacecraft expected life in days.
   * Example: /// Example: 231
   * Constraints: No constraints specified.
   */
  public int expectedLife() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Boolean indicating if the spacecraft was insured at launch.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean insuredAtLaunch() { int o = __offset(34); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Mass at launch in kg.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double launchMass() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Mass dry in kg.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double dryMass() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * NORAD satellite number if available.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int catalogNumber() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Mass dry in kg.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double totalPayloadPower() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft constellation.
   * Example: /// Example: GPS
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String constellation() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer constellationAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer constellationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Spacecraft orbit category (e.g GEO, LEO, etc).
   * Example: /// Example: GEO
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String orbitCategory() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer orbitCategoryAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer orbitCategoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
   * Example: /// Example: Geostationary
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String orbitSubCategory() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer orbitSubCategoryAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer orbitSubCategoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Cost of launch in M USD.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double launchCost() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating if the spacecraft launch cost is estimated.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean launchCostEstimated() { int o = __offset(52); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating if the spacecraft cost is estimated.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean costEstimated() { int o = __offset(54); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Cost of spacecraft at new in M USD.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double newCost() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Combined cost of spacecraft at new in M USD.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double combinedNewCost() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating if the spacecraft combined new cost is estimated.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean combinedCostEstimated() { int o = __offset(60); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Insured value of spacecraft at launch in M USD.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double insuredValueAtLaunch() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating if the spacecraft insured value at launch is estimated.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean insuredValueLaunchEstimated() { int o = __offset(64); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Annual insured depreciaion factor as a percent fraction.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double annualInsuredDepreciationFactor() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean annualInsuredDepreciationFactorEstimated() { int o = __offset(68); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Insurance premium at launch in M USD.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double insurancePremiumAtLaunch() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean insurancePremiumAtLaunchEstimated() { int o = __offset(72); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Number of humans carried on spacecraft.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numHumans() { int o = __offset(74); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Cubesat dispenser type.
   * Example: /// Example: cubesatDispenserType
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String cubesatDispenserType() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cubesatDispenserTypeAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer cubesatDispenserTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
   * Example: /// Example: 2500 - 3500kg  - Large Satellite
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String massCategory() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer massCategoryAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer massCategoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Seradata launch ID.
   * Example: /// Example: 11573
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String launchId() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchIdAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer launchIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Seradata launch ID.
   * Example: /// Example: 123
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String launchVehicleId() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchVehicleIdAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer launchVehicleIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Seradata launch vehicle family.
   * Example: /// Example: launchProviderFlightNumber
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String launchProviderFlightNumber() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchProviderFlightNumberAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer launchProviderFlightNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Launch Site Name.
   * Example: /// Example: launchSiteName
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String launchSiteName() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchSiteNameAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer launchSiteNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Seradata Launch Site ID.
   * Example: /// Example: 28
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String launchSiteId() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchSiteIdAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer launchSiteIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Seradata launch country.
   * Example: /// Example: USA
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String launchCountry() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchCountryAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer launchCountryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * Seradata launch provider.
   * Example: /// Example: launchProvider
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String launchProvider() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchProviderAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer launchProviderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Seradata launch provider country.
   * Example: /// Example: USA
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String launchProviderCountry() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchProviderCountryAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer launchProviderCountryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * Boolean indicating if the launch was commercial.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean commercialLaunch() { int o = __offset(96); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Seradata launch type (e.g. Launched, Future, etc).
   * Example: /// Example: Future
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String launchType() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchTypeAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer launchTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
   * Example: /// Example: Expendable
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String launchCharacteristic() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchCharacteristicAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer launchCharacteristicInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Seradata launch number.
   * Example: /// Example: FN040
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String launchNumber() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchNumberAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer launchNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Launch date.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String launchDate() { int o = __offset(104); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchDateAsByteBuffer() { return __vector_as_bytebuffer(104, 1); }
  public ByteBuffer launchDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 104, 1); }
  /**
   * Seradata remarks on launch date.
   * Example: /// Example: launchDateRemarks
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String launchDateRemarks() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchDateRemarksAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer launchDateRemarksInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * Youtube link of launch.
   * Example: /// Example: youtubeLaunchLink
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String youtubeLaunchLink() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer youtubeLaunchLinkAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer youtubeLaunchLinkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
   * Example: /// Example: Inactive - Retired
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String status() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Spacecraft owner name.
   * Example: /// Example: owner
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String owner() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer ownerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * Spacecraft owner country.
   * Example: /// Example: USA
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String ownerCountry() { int o = __offset(114); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ownerCountryAsByteBuffer() { return __vector_as_bytebuffer(114, 1); }
  public ByteBuffer ownerCountryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 1); }
  /**
   * Spacecraft operator name.
   * Example: /// Example: operator
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String operator() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operatorAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer operatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Spacecraft operator country.
   * Example: /// Example: USA
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String operatorCountry() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operatorCountryAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer operatorCountryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * Boolean indicating if the spacecraft was leased.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean leased() { int o = __offset(120); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Spacecraft order date.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String orderDate() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer orderDateAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer orderDateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Total capability lost as a percent fraction.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double capabilityLost() { int o = __offset(124); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total capacity lost as a percent fraction.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double capacityLost() { int o = __offset(126); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft primary mission and group.
   * Example: /// Example: primaryMissionGroup
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String primaryMissionGroup() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer primaryMissionGroupAsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer primaryMissionGroupInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Spacecraft additional missions and groups.
   * Example: /// Example: additionalMissionsGroups
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String additionalMissionsGroups() { int o = __offset(130); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer additionalMissionsGroupsAsByteBuffer() { return __vector_as_bytebuffer(130, 1); }
  public ByteBuffer additionalMissionsGroupsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 130, 1); }
  /**
   * Number of insurance claims for this spacecraft.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int totalClaims() { int o = __offset(132); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of injuries related to this spacecraft.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int totalInjuries() { int o = __offset(134); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of fatalities related to this spacecraft.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int totalFatalities() { int o = __offset(136); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Spacecraft name at launch.
   * Example: /// Example: nameAtLaunch
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String nameAtLaunch() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAtLaunchAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer nameAtLaunchInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }
  /**
   * Spacecraft Bus ID.
   * Example: /// Example: BUS-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String busId() { int o = __offset(140); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer busIdAsByteBuffer() { return __vector_as_bytebuffer(140, 1); }
  public ByteBuffer busIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 140, 1); }
  /**
   * Current age in years.
   * Example: /// Example: 5.898630136986301
   * Constraints: No constraints specified.
   */
  public double currentAge() { int o = __offset(142); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft life lost as a percent fraction.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double lifeLost() { int o = __offset(144); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: -8.23
   * Constraints: No constraints specified.
   */
  public double geoPosition() { int o = __offset(146); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft total insurance losses as a fraction.
   * Example: /// Example: 0.393
   * Constraints: No constraints specified.
   */
  public double insuranceLossesTotal() { int o = __offset(148); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft launch arranger.
   * Example: /// Example: launchArranger
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String launchArranger() { int o = __offset(150); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchArrangerAsByteBuffer() { return __vector_as_bytebuffer(150, 1); }
  public ByteBuffer launchArrangerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 150, 1); }
  /**
   * Spacecraft launch arranger country.
   * Example: /// Example: USA
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String launchArrangerCountry() { int o = __offset(152); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchArrangerCountryAsByteBuffer() { return __vector_as_bytebuffer(152, 1); }
  public ByteBuffer launchArrangerCountryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 152, 1); }
  /**
   * Spacecraft serial number.
   * Example: /// Example: serialNumber
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String serialNumber() { int o = __offset(154); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serialNumberAsByteBuffer() { return __vector_as_bytebuffer(154, 1); }
  public ByteBuffer serialNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 154, 1); }
  /**
   * Spacecraft program name.
   * Example: /// Example: programName
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String programName() { int o = __offset(156); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer programNameAsByteBuffer() { return __vector_as_bytebuffer(156, 1); }
  public ByteBuffer programNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 156, 1); }
  /**
   * Spacecraft reused hull name.
   * Example: /// Example: reusedHullName
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String reusedHullName() { int o = __offset(158); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reusedHullNameAsByteBuffer() { return __vector_as_bytebuffer(158, 1); }
  public ByteBuffer reusedHullNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 158, 1); }
  /**
   * Spacecraft date of observation.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String dateOfObservation() { int o = __offset(160); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dateOfObservationAsByteBuffer() { return __vector_as_bytebuffer(160, 1); }
  public ByteBuffer dateOfObservationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 160, 1); }
  /**
   * Spacecraft latest latitude in degrees.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(162); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft latest longitude in degrees.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(164); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft latest altitude in km.
   * Example: /// Example: 36036.6330576414
   * Constraints: No constraints specified.
   */
  public double altitude() { int o = __offset(166); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft collision risk 1mm sqm latest.
   * Example: /// Example: 1.33
   * Constraints: No constraints specified.
   */
  public double collisionRiskMm() { int o = __offset(168); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft collision risk 1cm sqm latest.
   * Example: /// Example: 1.43
   * Constraints: No constraints specified.
   */
  public double collisionRiskCm() { int o = __offset(170); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft quantity.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int quantity() { int o = __offset(172); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Spacecraft reusable flights.
   * Example: /// Example: reusableFlights
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String reusableFlights() { int o = __offset(174); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reusableFlightsAsByteBuffer() { return __vector_as_bytebuffer(174, 1); }
  public ByteBuffer reusableFlightsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 174, 1); }
  /**
   * Notes on the spacecraft.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String notes() { int o = __offset(176); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(176, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 176, 1); }
  /**
   * Insurance notes for the spacecraft.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String insuranceNotes() { int o = __offset(178); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer insuranceNotesAsByteBuffer() { return __vector_as_bytebuffer(178, 1); }
  public ByteBuffer insuranceNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 178, 1); }
  /**
   * Insurance notes for the spacecraft.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String launchNotes() { int o = __offset(180); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer launchNotesAsByteBuffer() { return __vector_as_bytebuffer(180, 1); }
  public ByteBuffer launchNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 180, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(182); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(182, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 182, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(184); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(184, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 184, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(186); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(186, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 186, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(188); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(190); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(190, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 190, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(192); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(192, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 192, 1); }

  public static int createSeradataSpacecraftDetails_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int idOnOrbitOffset,
      int classificationMarkingOffset,
      int nameOffset,
      int descriptionOffset,
      int intlNumberOffset,
      int sectorOffset,
      double apogee,
      double perigee,
      double period,
      double inclination,
      int primeManufacturerOrgIdOffset,
      int stabilizerOffset,
      int designLife,
      int expectedLife,
      boolean insuredAtLaunch,
      double launchMass,
      double dryMass,
      int catalogNumber,
      double totalPayloadPower,
      int constellationOffset,
      int orbitCategoryOffset,
      int orbitSubCategoryOffset,
      double launchCost,
      boolean launchCostEstimated,
      boolean costEstimated,
      double newCost,
      double combinedNewCost,
      boolean combinedCostEstimated,
      double insuredValueAtLaunch,
      boolean insuredValueLaunchEstimated,
      double annualInsuredDepreciationFactor,
      boolean annualInsuredDepreciationFactorEstimated,
      double insurancePremiumAtLaunch,
      boolean insurancePremiumAtLaunchEstimated,
      int numHumans,
      int cubesatDispenserTypeOffset,
      int massCategoryOffset,
      int launchIdOffset,
      int launchVehicleIdOffset,
      int launchProviderFlightNumberOffset,
      int launchSiteNameOffset,
      int launchSiteIdOffset,
      int launchCountryOffset,
      int launchProviderOffset,
      int launchProviderCountryOffset,
      boolean commercialLaunch,
      int launchTypeOffset,
      int launchCharacteristicOffset,
      int launchNumberOffset,
      int launchDateOffset,
      int launchDateRemarksOffset,
      int youtubeLaunchLinkOffset,
      int statusOffset,
      int ownerOffset,
      int ownerCountryOffset,
      int operatorOffset,
      int operatorCountryOffset,
      boolean leased,
      int orderDateOffset,
      double capabilityLost,
      double capacityLost,
      int primaryMissionGroupOffset,
      int additionalMissionsGroupsOffset,
      int totalClaims,
      int totalInjuries,
      int totalFatalities,
      int nameAtLaunchOffset,
      int busIdOffset,
      double currentAge,
      double lifeLost,
      double geoPosition,
      double insuranceLossesTotal,
      int launchArrangerOffset,
      int launchArrangerCountryOffset,
      int serialNumberOffset,
      int programNameOffset,
      int reusedHullNameOffset,
      int dateOfObservationOffset,
      double lat,
      double lon,
      double altitude,
      double collisionRiskMm,
      double collisionRiskCm,
      int quantity,
      int reusableFlightsOffset,
      int notesOffset,
      int insuranceNotesOffset,
      int launchNotesOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset) {
    builder.startTable(95);
    SeradataSpacecraftDetails_Abridged.addCollisionRiskCm(builder, collisionRiskCm);
    SeradataSpacecraftDetails_Abridged.addCollisionRiskMm(builder, collisionRiskMm);
    SeradataSpacecraftDetails_Abridged.addAltitude(builder, altitude);
    SeradataSpacecraftDetails_Abridged.addLon(builder, lon);
    SeradataSpacecraftDetails_Abridged.addLat(builder, lat);
    SeradataSpacecraftDetails_Abridged.addInsuranceLossesTotal(builder, insuranceLossesTotal);
    SeradataSpacecraftDetails_Abridged.addGeoPosition(builder, geoPosition);
    SeradataSpacecraftDetails_Abridged.addLifeLost(builder, lifeLost);
    SeradataSpacecraftDetails_Abridged.addCurrentAge(builder, currentAge);
    SeradataSpacecraftDetails_Abridged.addCapacityLost(builder, capacityLost);
    SeradataSpacecraftDetails_Abridged.addCapabilityLost(builder, capabilityLost);
    SeradataSpacecraftDetails_Abridged.addInsurancePremiumAtLaunch(builder, insurancePremiumAtLaunch);
    SeradataSpacecraftDetails_Abridged.addAnnualInsuredDepreciationFactor(builder, annualInsuredDepreciationFactor);
    SeradataSpacecraftDetails_Abridged.addInsuredValueAtLaunch(builder, insuredValueAtLaunch);
    SeradataSpacecraftDetails_Abridged.addCombinedNewCost(builder, combinedNewCost);
    SeradataSpacecraftDetails_Abridged.addNewCost(builder, newCost);
    SeradataSpacecraftDetails_Abridged.addLaunchCost(builder, launchCost);
    SeradataSpacecraftDetails_Abridged.addTotalPayloadPower(builder, totalPayloadPower);
    SeradataSpacecraftDetails_Abridged.addDryMass(builder, dryMass);
    SeradataSpacecraftDetails_Abridged.addLaunchMass(builder, launchMass);
    SeradataSpacecraftDetails_Abridged.addInclination(builder, inclination);
    SeradataSpacecraftDetails_Abridged.addPeriod(builder, period);
    SeradataSpacecraftDetails_Abridged.addPerigee(builder, perigee);
    SeradataSpacecraftDetails_Abridged.addApogee(builder, apogee);
    SeradataSpacecraftDetails_Abridged.addCreatedBy(builder, createdByOffset);
    SeradataSpacecraftDetails_Abridged.addCreatedAt(builder, createdAtOffset);
    SeradataSpacecraftDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
    SeradataSpacecraftDetails_Abridged.addOrigin(builder, originOffset);
    SeradataSpacecraftDetails_Abridged.addSource(builder, sourceOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchNotes(builder, launchNotesOffset);
    SeradataSpacecraftDetails_Abridged.addInsuranceNotes(builder, insuranceNotesOffset);
    SeradataSpacecraftDetails_Abridged.addNotes(builder, notesOffset);
    SeradataSpacecraftDetails_Abridged.addReusableFlights(builder, reusableFlightsOffset);
    SeradataSpacecraftDetails_Abridged.addQuantity(builder, quantity);
    SeradataSpacecraftDetails_Abridged.addDateOfObservation(builder, dateOfObservationOffset);
    SeradataSpacecraftDetails_Abridged.addReusedHullName(builder, reusedHullNameOffset);
    SeradataSpacecraftDetails_Abridged.addProgramName(builder, programNameOffset);
    SeradataSpacecraftDetails_Abridged.addSerialNumber(builder, serialNumberOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchArrangerCountry(builder, launchArrangerCountryOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchArranger(builder, launchArrangerOffset);
    SeradataSpacecraftDetails_Abridged.addBusId(builder, busIdOffset);
    SeradataSpacecraftDetails_Abridged.addNameAtLaunch(builder, nameAtLaunchOffset);
    SeradataSpacecraftDetails_Abridged.addTotalFatalities(builder, totalFatalities);
    SeradataSpacecraftDetails_Abridged.addTotalInjuries(builder, totalInjuries);
    SeradataSpacecraftDetails_Abridged.addTotalClaims(builder, totalClaims);
    SeradataSpacecraftDetails_Abridged.addAdditionalMissionsGroups(builder, additionalMissionsGroupsOffset);
    SeradataSpacecraftDetails_Abridged.addPrimaryMissionGroup(builder, primaryMissionGroupOffset);
    SeradataSpacecraftDetails_Abridged.addOrderDate(builder, orderDateOffset);
    SeradataSpacecraftDetails_Abridged.addOperatorCountry(builder, operatorCountryOffset);
    SeradataSpacecraftDetails_Abridged.addOperator(builder, operatorOffset);
    SeradataSpacecraftDetails_Abridged.addOwnerCountry(builder, ownerCountryOffset);
    SeradataSpacecraftDetails_Abridged.addOwner(builder, ownerOffset);
    SeradataSpacecraftDetails_Abridged.addStatus(builder, statusOffset);
    SeradataSpacecraftDetails_Abridged.addYoutubeLaunchLink(builder, youtubeLaunchLinkOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchDateRemarks(builder, launchDateRemarksOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchDate(builder, launchDateOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchNumber(builder, launchNumberOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchCharacteristic(builder, launchCharacteristicOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchType(builder, launchTypeOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchProviderCountry(builder, launchProviderCountryOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchProvider(builder, launchProviderOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchCountry(builder, launchCountryOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchSiteId(builder, launchSiteIdOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchSiteName(builder, launchSiteNameOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchProviderFlightNumber(builder, launchProviderFlightNumberOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchVehicleId(builder, launchVehicleIdOffset);
    SeradataSpacecraftDetails_Abridged.addLaunchId(builder, launchIdOffset);
    SeradataSpacecraftDetails_Abridged.addMassCategory(builder, massCategoryOffset);
    SeradataSpacecraftDetails_Abridged.addCubesatDispenserType(builder, cubesatDispenserTypeOffset);
    SeradataSpacecraftDetails_Abridged.addNumHumans(builder, numHumans);
    SeradataSpacecraftDetails_Abridged.addOrbitSubCategory(builder, orbitSubCategoryOffset);
    SeradataSpacecraftDetails_Abridged.addOrbitCategory(builder, orbitCategoryOffset);
    SeradataSpacecraftDetails_Abridged.addConstellation(builder, constellationOffset);
    SeradataSpacecraftDetails_Abridged.addCatalogNumber(builder, catalogNumber);
    SeradataSpacecraftDetails_Abridged.addExpectedLife(builder, expectedLife);
    SeradataSpacecraftDetails_Abridged.addDesignLife(builder, designLife);
    SeradataSpacecraftDetails_Abridged.addStabilizer(builder, stabilizerOffset);
    SeradataSpacecraftDetails_Abridged.addPrimeManufacturerOrgId(builder, primeManufacturerOrgIdOffset);
    SeradataSpacecraftDetails_Abridged.addSector(builder, sectorOffset);
    SeradataSpacecraftDetails_Abridged.addIntlNumber(builder, intlNumberOffset);
    SeradataSpacecraftDetails_Abridged.addDescription(builder, descriptionOffset);
    SeradataSpacecraftDetails_Abridged.addName(builder, nameOffset);
    SeradataSpacecraftDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    SeradataSpacecraftDetails_Abridged.addIdOnOrbit(builder, idOnOrbitOffset);
    SeradataSpacecraftDetails_Abridged.addId(builder, idOffset);
    SeradataSpacecraftDetails_Abridged.addDataMode(builder, dataMode);
    SeradataSpacecraftDetails_Abridged.addLeased(builder, leased);
    SeradataSpacecraftDetails_Abridged.addCommercialLaunch(builder, commercialLaunch);
    SeradataSpacecraftDetails_Abridged.addInsurancePremiumAtLaunchEstimated(builder, insurancePremiumAtLaunchEstimated);
    SeradataSpacecraftDetails_Abridged.addAnnualInsuredDepreciationFactorEstimated(builder, annualInsuredDepreciationFactorEstimated);
    SeradataSpacecraftDetails_Abridged.addInsuredValueLaunchEstimated(builder, insuredValueLaunchEstimated);
    SeradataSpacecraftDetails_Abridged.addCombinedCostEstimated(builder, combinedCostEstimated);
    SeradataSpacecraftDetails_Abridged.addCostEstimated(builder, costEstimated);
    SeradataSpacecraftDetails_Abridged.addLaunchCostEstimated(builder, launchCostEstimated);
    SeradataSpacecraftDetails_Abridged.addInsuredAtLaunch(builder, insuredAtLaunch);
    return SeradataSpacecraftDetails_Abridged.endSeradataSpacecraftDetails_Abridged(builder);
  }

  public static void startSeradataSpacecraftDetails_Abridged(FlatBufferBuilder builder) { builder.startTable(95); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(1, idOnOrbitOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(3, nameOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(4, descriptionOffset, 0); }
  public static void addIntlNumber(FlatBufferBuilder builder, int intlNumberOffset) { builder.addOffset(5, intlNumberOffset, 0); }
  public static void addSector(FlatBufferBuilder builder, int sectorOffset) { builder.addOffset(6, sectorOffset, 0); }
  public static void addApogee(FlatBufferBuilder builder, double apogee) { builder.addDouble(7, apogee, 0.0); }
  public static void addPerigee(FlatBufferBuilder builder, double perigee) { builder.addDouble(8, perigee, 0.0); }
  public static void addPeriod(FlatBufferBuilder builder, double period) { builder.addDouble(9, period, 0.0); }
  public static void addInclination(FlatBufferBuilder builder, double inclination) { builder.addDouble(10, inclination, 0.0); }
  public static void addPrimeManufacturerOrgId(FlatBufferBuilder builder, int primeManufacturerOrgIdOffset) { builder.addOffset(11, primeManufacturerOrgIdOffset, 0); }
  public static void addStabilizer(FlatBufferBuilder builder, int stabilizerOffset) { builder.addOffset(12, stabilizerOffset, 0); }
  public static void addDesignLife(FlatBufferBuilder builder, int designLife) { builder.addInt(13, designLife, 0); }
  public static void addExpectedLife(FlatBufferBuilder builder, int expectedLife) { builder.addInt(14, expectedLife, 0); }
  public static void addInsuredAtLaunch(FlatBufferBuilder builder, boolean insuredAtLaunch) { builder.addBoolean(15, insuredAtLaunch, false); }
  public static void addLaunchMass(FlatBufferBuilder builder, double launchMass) { builder.addDouble(16, launchMass, 0.0); }
  public static void addDryMass(FlatBufferBuilder builder, double dryMass) { builder.addDouble(17, dryMass, 0.0); }
  public static void addCatalogNumber(FlatBufferBuilder builder, int catalogNumber) { builder.addInt(18, catalogNumber, 0); }
  public static void addTotalPayloadPower(FlatBufferBuilder builder, double totalPayloadPower) { builder.addDouble(19, totalPayloadPower, 0.0); }
  public static void addConstellation(FlatBufferBuilder builder, int constellationOffset) { builder.addOffset(20, constellationOffset, 0); }
  public static void addOrbitCategory(FlatBufferBuilder builder, int orbitCategoryOffset) { builder.addOffset(21, orbitCategoryOffset, 0); }
  public static void addOrbitSubCategory(FlatBufferBuilder builder, int orbitSubCategoryOffset) { builder.addOffset(22, orbitSubCategoryOffset, 0); }
  public static void addLaunchCost(FlatBufferBuilder builder, double launchCost) { builder.addDouble(23, launchCost, 0.0); }
  public static void addLaunchCostEstimated(FlatBufferBuilder builder, boolean launchCostEstimated) { builder.addBoolean(24, launchCostEstimated, false); }
  public static void addCostEstimated(FlatBufferBuilder builder, boolean costEstimated) { builder.addBoolean(25, costEstimated, false); }
  public static void addNewCost(FlatBufferBuilder builder, double newCost) { builder.addDouble(26, newCost, 0.0); }
  public static void addCombinedNewCost(FlatBufferBuilder builder, double combinedNewCost) { builder.addDouble(27, combinedNewCost, 0.0); }
  public static void addCombinedCostEstimated(FlatBufferBuilder builder, boolean combinedCostEstimated) { builder.addBoolean(28, combinedCostEstimated, false); }
  public static void addInsuredValueAtLaunch(FlatBufferBuilder builder, double insuredValueAtLaunch) { builder.addDouble(29, insuredValueAtLaunch, 0.0); }
  public static void addInsuredValueLaunchEstimated(FlatBufferBuilder builder, boolean insuredValueLaunchEstimated) { builder.addBoolean(30, insuredValueLaunchEstimated, false); }
  public static void addAnnualInsuredDepreciationFactor(FlatBufferBuilder builder, double annualInsuredDepreciationFactor) { builder.addDouble(31, annualInsuredDepreciationFactor, 0.0); }
  public static void addAnnualInsuredDepreciationFactorEstimated(FlatBufferBuilder builder, boolean annualInsuredDepreciationFactorEstimated) { builder.addBoolean(32, annualInsuredDepreciationFactorEstimated, false); }
  public static void addInsurancePremiumAtLaunch(FlatBufferBuilder builder, double insurancePremiumAtLaunch) { builder.addDouble(33, insurancePremiumAtLaunch, 0.0); }
  public static void addInsurancePremiumAtLaunchEstimated(FlatBufferBuilder builder, boolean insurancePremiumAtLaunchEstimated) { builder.addBoolean(34, insurancePremiumAtLaunchEstimated, false); }
  public static void addNumHumans(FlatBufferBuilder builder, int numHumans) { builder.addInt(35, numHumans, 0); }
  public static void addCubesatDispenserType(FlatBufferBuilder builder, int cubesatDispenserTypeOffset) { builder.addOffset(36, cubesatDispenserTypeOffset, 0); }
  public static void addMassCategory(FlatBufferBuilder builder, int massCategoryOffset) { builder.addOffset(37, massCategoryOffset, 0); }
  public static void addLaunchId(FlatBufferBuilder builder, int launchIdOffset) { builder.addOffset(38, launchIdOffset, 0); }
  public static void addLaunchVehicleId(FlatBufferBuilder builder, int launchVehicleIdOffset) { builder.addOffset(39, launchVehicleIdOffset, 0); }
  public static void addLaunchProviderFlightNumber(FlatBufferBuilder builder, int launchProviderFlightNumberOffset) { builder.addOffset(40, launchProviderFlightNumberOffset, 0); }
  public static void addLaunchSiteName(FlatBufferBuilder builder, int launchSiteNameOffset) { builder.addOffset(41, launchSiteNameOffset, 0); }
  public static void addLaunchSiteId(FlatBufferBuilder builder, int launchSiteIdOffset) { builder.addOffset(42, launchSiteIdOffset, 0); }
  public static void addLaunchCountry(FlatBufferBuilder builder, int launchCountryOffset) { builder.addOffset(43, launchCountryOffset, 0); }
  public static void addLaunchProvider(FlatBufferBuilder builder, int launchProviderOffset) { builder.addOffset(44, launchProviderOffset, 0); }
  public static void addLaunchProviderCountry(FlatBufferBuilder builder, int launchProviderCountryOffset) { builder.addOffset(45, launchProviderCountryOffset, 0); }
  public static void addCommercialLaunch(FlatBufferBuilder builder, boolean commercialLaunch) { builder.addBoolean(46, commercialLaunch, false); }
  public static void addLaunchType(FlatBufferBuilder builder, int launchTypeOffset) { builder.addOffset(47, launchTypeOffset, 0); }
  public static void addLaunchCharacteristic(FlatBufferBuilder builder, int launchCharacteristicOffset) { builder.addOffset(48, launchCharacteristicOffset, 0); }
  public static void addLaunchNumber(FlatBufferBuilder builder, int launchNumberOffset) { builder.addOffset(49, launchNumberOffset, 0); }
  public static void addLaunchDate(FlatBufferBuilder builder, int launchDateOffset) { builder.addOffset(50, launchDateOffset, 0); }
  public static void addLaunchDateRemarks(FlatBufferBuilder builder, int launchDateRemarksOffset) { builder.addOffset(51, launchDateRemarksOffset, 0); }
  public static void addYoutubeLaunchLink(FlatBufferBuilder builder, int youtubeLaunchLinkOffset) { builder.addOffset(52, youtubeLaunchLinkOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(53, statusOffset, 0); }
  public static void addOwner(FlatBufferBuilder builder, int ownerOffset) { builder.addOffset(54, ownerOffset, 0); }
  public static void addOwnerCountry(FlatBufferBuilder builder, int ownerCountryOffset) { builder.addOffset(55, ownerCountryOffset, 0); }
  public static void addOperator(FlatBufferBuilder builder, int operatorOffset) { builder.addOffset(56, operatorOffset, 0); }
  public static void addOperatorCountry(FlatBufferBuilder builder, int operatorCountryOffset) { builder.addOffset(57, operatorCountryOffset, 0); }
  public static void addLeased(FlatBufferBuilder builder, boolean leased) { builder.addBoolean(58, leased, false); }
  public static void addOrderDate(FlatBufferBuilder builder, int orderDateOffset) { builder.addOffset(59, orderDateOffset, 0); }
  public static void addCapabilityLost(FlatBufferBuilder builder, double capabilityLost) { builder.addDouble(60, capabilityLost, 0.0); }
  public static void addCapacityLost(FlatBufferBuilder builder, double capacityLost) { builder.addDouble(61, capacityLost, 0.0); }
  public static void addPrimaryMissionGroup(FlatBufferBuilder builder, int primaryMissionGroupOffset) { builder.addOffset(62, primaryMissionGroupOffset, 0); }
  public static void addAdditionalMissionsGroups(FlatBufferBuilder builder, int additionalMissionsGroupsOffset) { builder.addOffset(63, additionalMissionsGroupsOffset, 0); }
  public static void addTotalClaims(FlatBufferBuilder builder, int totalClaims) { builder.addInt(64, totalClaims, 0); }
  public static void addTotalInjuries(FlatBufferBuilder builder, int totalInjuries) { builder.addInt(65, totalInjuries, 0); }
  public static void addTotalFatalities(FlatBufferBuilder builder, int totalFatalities) { builder.addInt(66, totalFatalities, 0); }
  public static void addNameAtLaunch(FlatBufferBuilder builder, int nameAtLaunchOffset) { builder.addOffset(67, nameAtLaunchOffset, 0); }
  public static void addBusId(FlatBufferBuilder builder, int busIdOffset) { builder.addOffset(68, busIdOffset, 0); }
  public static void addCurrentAge(FlatBufferBuilder builder, double currentAge) { builder.addDouble(69, currentAge, 0.0); }
  public static void addLifeLost(FlatBufferBuilder builder, double lifeLost) { builder.addDouble(70, lifeLost, 0.0); }
  public static void addGeoPosition(FlatBufferBuilder builder, double geoPosition) { builder.addDouble(71, geoPosition, 0.0); }
  public static void addInsuranceLossesTotal(FlatBufferBuilder builder, double insuranceLossesTotal) { builder.addDouble(72, insuranceLossesTotal, 0.0); }
  public static void addLaunchArranger(FlatBufferBuilder builder, int launchArrangerOffset) { builder.addOffset(73, launchArrangerOffset, 0); }
  public static void addLaunchArrangerCountry(FlatBufferBuilder builder, int launchArrangerCountryOffset) { builder.addOffset(74, launchArrangerCountryOffset, 0); }
  public static void addSerialNumber(FlatBufferBuilder builder, int serialNumberOffset) { builder.addOffset(75, serialNumberOffset, 0); }
  public static void addProgramName(FlatBufferBuilder builder, int programNameOffset) { builder.addOffset(76, programNameOffset, 0); }
  public static void addReusedHullName(FlatBufferBuilder builder, int reusedHullNameOffset) { builder.addOffset(77, reusedHullNameOffset, 0); }
  public static void addDateOfObservation(FlatBufferBuilder builder, int dateOfObservationOffset) { builder.addOffset(78, dateOfObservationOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(79, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(80, lon, 0.0); }
  public static void addAltitude(FlatBufferBuilder builder, double altitude) { builder.addDouble(81, altitude, 0.0); }
  public static void addCollisionRiskMm(FlatBufferBuilder builder, double collisionRiskMm) { builder.addDouble(82, collisionRiskMm, 0.0); }
  public static void addCollisionRiskCm(FlatBufferBuilder builder, double collisionRiskCm) { builder.addDouble(83, collisionRiskCm, 0.0); }
  public static void addQuantity(FlatBufferBuilder builder, int quantity) { builder.addInt(84, quantity, 0); }
  public static void addReusableFlights(FlatBufferBuilder builder, int reusableFlightsOffset) { builder.addOffset(85, reusableFlightsOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(86, notesOffset, 0); }
  public static void addInsuranceNotes(FlatBufferBuilder builder, int insuranceNotesOffset) { builder.addOffset(87, insuranceNotesOffset, 0); }
  public static void addLaunchNotes(FlatBufferBuilder builder, int launchNotesOffset) { builder.addOffset(88, launchNotesOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(89, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(90, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(91, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(92, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(93, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(94, createdByOffset, 0); }
  public static int endSeradataSpacecraftDetails_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSeradataSpacecraftDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SERA"); }
  public static void finishSizePrefixedSeradataSpacecraftDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SERA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SeradataSpacecraftDetails_Abridged get(int j) { return get(new SeradataSpacecraftDetails_Abridged(), j); }
    public SeradataSpacecraftDetails_Abridged get(SeradataSpacecraftDetails_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

