// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
 */
@SuppressWarnings("unused")
public final class Port_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Port_Full getRootAsPort_Full(ByteBuffer _bb) { return getRootAsPort_Full(_bb, new Port_Full()); }
  public static Port_Full getRootAsPort_Full(ByteBuffer _bb, Port_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Port_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "PORT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Port_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the Site Entity associated with the Port record.
   * Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSite() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSiteAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idSiteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
   * Example: /// Example: CAVAN
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String locode() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locodeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer locodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The name of this port.
   * Example: /// Example: Vancouver
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String portName() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer portNameAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer portNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The type of harbor for this port. The harbor type refers to how a port is physically positioned.
   * COASTAL BREAKWATER (CB)
   * COASTAL NATURAL (CN)
   * COASTAL TIDE GATE  (CT)
   * LAKE OR CANAL (LC)
   * OPEN ROADSTEAD (OR)
   * RIVER BASIN (RB)
   * RIVER NATURAL (RN)
   * RIVER TIDE GATE (RT)
   * TYPHOON HARBOR  (TH).
   * Example: /// Example: COASTAL NATURAL
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String harborType() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer harborTypeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer harborTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The size of the harbor for this port measured in square kilometers.
   * Example: /// Example: 160.1
   * Constraints: No constraints specified.
   */
  public double harborSize() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the shipâ€™s keel and the waterline of the vessel measured in meters.
   * Example: /// Example: 18.1
   * Constraints: No constraints specified.
   */
  public double maxDraught() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average time for a vessel at this port in hours.
   * Example: /// Example: 41.1
   * Constraints: No constraints specified.
   */
  public double avgDuration() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The tide range of this port in meters.
   * Example: /// Example: 4.1
   * Constraints: No constraints specified.
   */
  public double tideRange() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
   * Example: /// Example: EXCELLENT
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String shelter() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer shelterAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer shelterInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Flag indicating whether a pilot is required at this port.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean pilotReqd() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The country where this port is located.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public byte dataMode() { int o = __offset(50); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }

  public static int createPort_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idSiteOffset,
      int externalIdOffset,
      int locodeOffset,
      int portNameOffset,
      int harborTypeOffset,
      double harborSize,
      double maxDraught,
      double avgDuration,
      double tideRange,
      int shelterOffset,
      boolean pilotReqd,
      double lat,
      double lon,
      int countryCodeOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int sourceDlOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(25);
    Port_Full.addLon(builder, lon);
    Port_Full.addLat(builder, lat);
    Port_Full.addTideRange(builder, tideRange);
    Port_Full.addAvgDuration(builder, avgDuration);
    Port_Full.addMaxDraught(builder, maxDraught);
    Port_Full.addHarborSize(builder, harborSize);
    Port_Full.addOrigNetwork(builder, origNetworkOffset);
    Port_Full.addOrigin(builder, originOffset);
    Port_Full.addSourceDl(builder, sourceDlOffset);
    Port_Full.addSource(builder, sourceOffset);
    Port_Full.addUpdatedBy(builder, updatedByOffset);
    Port_Full.addUpdatedAt(builder, updatedAtOffset);
    Port_Full.addCreatedBy(builder, createdByOffset);
    Port_Full.addCreatedAt(builder, createdAtOffset);
    Port_Full.addCountryCode(builder, countryCodeOffset);
    Port_Full.addShelter(builder, shelterOffset);
    Port_Full.addHarborType(builder, harborTypeOffset);
    Port_Full.addPortName(builder, portNameOffset);
    Port_Full.addLocode(builder, locodeOffset);
    Port_Full.addExternalId(builder, externalIdOffset);
    Port_Full.addIdSite(builder, idSiteOffset);
    Port_Full.addClassificationMarking(builder, classificationMarkingOffset);
    Port_Full.addId(builder, idOffset);
    Port_Full.addDataMode(builder, dataMode);
    Port_Full.addPilotReqd(builder, pilotReqd);
    return Port_Full.endPort_Full(builder);
  }

  public static void startPort_Full(FlatBufferBuilder builder) { builder.startTable(25); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdSite(FlatBufferBuilder builder, int idSiteOffset) { builder.addOffset(2, idSiteOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(3, externalIdOffset, 0); }
  public static void addLocode(FlatBufferBuilder builder, int locodeOffset) { builder.addOffset(4, locodeOffset, 0); }
  public static void addPortName(FlatBufferBuilder builder, int portNameOffset) { builder.addOffset(5, portNameOffset, 0); }
  public static void addHarborType(FlatBufferBuilder builder, int harborTypeOffset) { builder.addOffset(6, harborTypeOffset, 0); }
  public static void addHarborSize(FlatBufferBuilder builder, double harborSize) { builder.addDouble(7, harborSize, 0.0); }
  public static void addMaxDraught(FlatBufferBuilder builder, double maxDraught) { builder.addDouble(8, maxDraught, 0.0); }
  public static void addAvgDuration(FlatBufferBuilder builder, double avgDuration) { builder.addDouble(9, avgDuration, 0.0); }
  public static void addTideRange(FlatBufferBuilder builder, double tideRange) { builder.addDouble(10, tideRange, 0.0); }
  public static void addShelter(FlatBufferBuilder builder, int shelterOffset) { builder.addOffset(11, shelterOffset, 0); }
  public static void addPilotReqd(FlatBufferBuilder builder, boolean pilotReqd) { builder.addBoolean(12, pilotReqd, false); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(13, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(14, lon, 0.0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(15, countryCodeOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(16, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(17, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(18, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(19, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(20, sourceOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(21, sourceDlOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(22, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(23, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(24, origNetworkOffset, 0); }
  public static int endPort_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishPort_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "PORT"); }
  public static void finishSizePrefixedPort_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "PORT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Port_Full get(int j) { return get(new Port_Full(), j); }
    public Port_Full get(Port_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

