// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection that specifies the naval flight operations for this ATO.
 */
@SuppressWarnings("unused")
public final class IndividualAircraftTasking_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IndividualAircraftTasking_Full getRootAsIndividualAircraftTasking_Full(ByteBuffer _bb) { return getRootAsIndividualAircraftTasking_Full(_bb, new IndividualAircraftTasking_Full()); }
  public static IndividualAircraftTasking_Full getRootAsIndividualAircraftTasking_Full(ByteBuffer _bb, IndividualAircraftTasking_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IndividualAircraftTasking_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "INDI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IndividualAircraftTasking_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The number of aircraft participating in this mission.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int numAcft() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
   * Example: /// Example: F35A
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String acftType() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer acftTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer acftTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The call sign assigned to this mission aircraft.
   * Example: /// Example: EAGLE47
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String callSign() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The code that indicates the ordinance mix carried on this mission aircraft.
   * Example: /// Example: 6A2W3
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String priConfigCode() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer priConfigCodeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer priConfigCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The code for the secondary ordinance mix carried on this mission aircraft.
   * Example: /// Example: 2S2WG
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String secConfigCode() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer secConfigCodeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer secConfigCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
   * Example: /// Example: EE47
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String link16CallSign() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer link16CallSignAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer link16CallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The TACAN channel assigned to this mission aircraft.
   * Example: /// Example: 123
   * Constraints: No constraints specified.
   */
  public int tacanChan() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
   * Example: /// Example: 12345
   * Constraints: No constraints specified.
   */
  public String juAddress(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int juAddressLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector juAddressVector() { return juAddressVector(new StringVector()); }
  public StringVector juAddressVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
   * Example: /// Example: 111
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String iffSifMode1Code() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iffSifMode1CodeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer iffSifMode1CodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
   * Example: /// Example: 20147
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String iffSifMode2Code() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iffSifMode2CodeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer iffSifMode2CodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
   * Example: /// Example: 30147
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String iffSifMode3Code() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iffSifMode3CodeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer iffSifMode3CodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }

  public static int createIndividualAircraftTasking_Full(FlatBufferBuilder builder,
      int numAcft,
      int acftTypeOffset,
      int callSignOffset,
      int priConfigCodeOffset,
      int secConfigCodeOffset,
      int link16CallSignOffset,
      int tacanChan,
      int juAddressOffset,
      int iffSifMode1CodeOffset,
      int iffSifMode2CodeOffset,
      int iffSifMode3CodeOffset) {
    builder.startTable(11);
    IndividualAircraftTasking_Full.addIffSifMode3Code(builder, iffSifMode3CodeOffset);
    IndividualAircraftTasking_Full.addIffSifMode2Code(builder, iffSifMode2CodeOffset);
    IndividualAircraftTasking_Full.addIffSifMode1Code(builder, iffSifMode1CodeOffset);
    IndividualAircraftTasking_Full.addJuAddress(builder, juAddressOffset);
    IndividualAircraftTasking_Full.addTacanChan(builder, tacanChan);
    IndividualAircraftTasking_Full.addLink16CallSign(builder, link16CallSignOffset);
    IndividualAircraftTasking_Full.addSecConfigCode(builder, secConfigCodeOffset);
    IndividualAircraftTasking_Full.addPriConfigCode(builder, priConfigCodeOffset);
    IndividualAircraftTasking_Full.addCallSign(builder, callSignOffset);
    IndividualAircraftTasking_Full.addAcftType(builder, acftTypeOffset);
    IndividualAircraftTasking_Full.addNumAcft(builder, numAcft);
    return IndividualAircraftTasking_Full.endIndividualAircraftTasking_Full(builder);
  }

  public static void startIndividualAircraftTasking_Full(FlatBufferBuilder builder) { builder.startTable(11); }
  public static void addNumAcft(FlatBufferBuilder builder, int numAcft) { builder.addInt(0, numAcft, 0); }
  public static void addAcftType(FlatBufferBuilder builder, int acftTypeOffset) { builder.addOffset(1, acftTypeOffset, 0); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(2, callSignOffset, 0); }
  public static void addPriConfigCode(FlatBufferBuilder builder, int priConfigCodeOffset) { builder.addOffset(3, priConfigCodeOffset, 0); }
  public static void addSecConfigCode(FlatBufferBuilder builder, int secConfigCodeOffset) { builder.addOffset(4, secConfigCodeOffset, 0); }
  public static void addLink16CallSign(FlatBufferBuilder builder, int link16CallSignOffset) { builder.addOffset(5, link16CallSignOffset, 0); }
  public static void addTacanChan(FlatBufferBuilder builder, int tacanChan) { builder.addInt(6, tacanChan, 0); }
  public static void addJuAddress(FlatBufferBuilder builder, int juAddressOffset) { builder.addOffset(7, juAddressOffset, 0); }
  public static int createJuAddressVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startJuAddressVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addIffSifMode1Code(FlatBufferBuilder builder, int iffSifMode1CodeOffset) { builder.addOffset(8, iffSifMode1CodeOffset, 0); }
  public static void addIffSifMode2Code(FlatBufferBuilder builder, int iffSifMode2CodeOffset) { builder.addOffset(9, iffSifMode2CodeOffset, 0); }
  public static void addIffSifMode3Code(FlatBufferBuilder builder, int iffSifMode3CodeOffset) { builder.addOffset(10, iffSifMode3CodeOffset, 0); }
  public static int endIndividualAircraftTasking_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIndividualAircraftTasking_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "INDI"); }
  public static void finishSizePrefixedIndividualAircraftTasking_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "INDI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IndividualAircraftTasking_Full get(int j) { return get(new IndividualAircraftTasking_Full(), j); }
    public IndividualAircraftTasking_Full get(IndividualAircraftTasking_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

