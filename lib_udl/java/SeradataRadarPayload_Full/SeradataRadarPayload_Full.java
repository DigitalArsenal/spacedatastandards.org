// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Details for an radar payload from  Seradata.
 */
@SuppressWarnings("unused")
public final class SeradataRadarPayload_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SeradataRadarPayload_Full getRootAsSeradataRadarPayload_Full(ByteBuffer _bb) { return getRootAsSeradataRadarPayload_Full(_bb, new SeradataRadarPayload_Full()); }
  public static SeradataRadarPayload_Full getRootAsSeradataRadarPayload_Full(ByteBuffer _bb, SeradataRadarPayload_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SeradataRadarPayload_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SERA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SeradataRadarPayload_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SERADATARADARPAYLOAD-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
   * Example: /// Example: 12345
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String spacecraftId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer spacecraftIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer spacecraftIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * UUID of the Sensor record.
   * Example: /// Example: 3c1ee9a0-90ad-1d75-c47b-2414e0a77e53
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Hosted for company/Organization Id.
   * Example: /// Example: hostedForCompanyOrgId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String hostedForCompanyOrgId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hostedForCompanyOrgIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer hostedForCompanyOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Manufacturer Organization Id.
   * Example: /// Example: manufacturerOrgId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Radar category, e.g. SAR, Surface Search, etc.
   * Example: /// Example: SAR
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String category() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer categoryAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer categoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Sensor name from Seradata, e.g. ALT (Radar Altimeter), COSI (Corea SAR Instrument), etc.
   * Example: /// Example: ALT
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String name() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
   * Example: /// Example: X
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String frequencyBand() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer frequencyBandAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer frequencyBandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Frequency in giga hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double frequency() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Wave length in meters.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double waveLength() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Best resolution in meters.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double bestResolution() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Swath width in kilometers.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double swathWidth() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Recorder size, e.g. 256.
   * Example: /// Example: 256
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String recorderSize() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer recorderSizeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer recorderSizeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Field of view of this radar in kilometers.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double fieldOfView() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Field of regard of this radar in degrees.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double fieldOfRegard() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Point method for this radar, e.g. Spacecraft.
   * Example: /// Example: Spacecraft
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String pointingMethod() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pointingMethodAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer pointingMethodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Ground Station info for this payload.
   * Example: /// Example: groundStations
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String groundStations() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer groundStationsAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer groundStationsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Ground Station Locations for this payload.
   * Example: /// Example: 51,42N-44,35E
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String groundStationLocations() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer groundStationLocationsAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer groundStationLocationsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Transmit polarization, e.g. Lin Dual, Lin vert, etc.
   * Example: /// Example: Lin Dual
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String transmitPolarization() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transmitPolarizationAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer transmitPolarizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Receive polarization, e.g. Lin Dual, Lin vert, etc.
   * Example: /// Example: Lin Dual
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String receivePolarization() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receivePolarizationAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer receivePolarizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Duty cycle.
   * Example: /// Example: dutyCycle
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String dutyCycle() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dutyCycleAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer dutyCycleInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Partner seradata-spacecraft.
   * Example: /// Example: partnerSpacecraft
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String partnerSpacecraft() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer partnerSpacecraftAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer partnerSpacecraftInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Constellation interferometric capability.
   * Example: /// Example: constellationInterferometricCapability
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String constellationInterferometricCapability() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer constellationInterferometricCapabilityAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer constellationInterferometricCapabilityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Payload notes.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String notes() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer notesAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer notesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Radar bandwidth in mega hertz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double bandwidth() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createSeradataRadarPayload_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int spacecraftIdOffset,
      int idSensorOffset,
      int hostedForCompanyOrgIdOffset,
      int manufacturerOrgIdOffset,
      int categoryOffset,
      int nameOffset,
      int frequencyBandOffset,
      double frequency,
      double waveLength,
      double bestResolution,
      double swathWidth,
      int recorderSizeOffset,
      double fieldOfView,
      double fieldOfRegard,
      int pointingMethodOffset,
      int groundStationsOffset,
      int groundStationLocationsOffset,
      int transmitPolarizationOffset,
      int receivePolarizationOffset,
      int dutyCycleOffset,
      int partnerSpacecraftOffset,
      int constellationInterferometricCapabilityOffset,
      int notesOffset,
      double bandwidth,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(34);
    SeradataRadarPayload_Full.addBandwidth(builder, bandwidth);
    SeradataRadarPayload_Full.addFieldOfRegard(builder, fieldOfRegard);
    SeradataRadarPayload_Full.addFieldOfView(builder, fieldOfView);
    SeradataRadarPayload_Full.addSwathWidth(builder, swathWidth);
    SeradataRadarPayload_Full.addBestResolution(builder, bestResolution);
    SeradataRadarPayload_Full.addWaveLength(builder, waveLength);
    SeradataRadarPayload_Full.addFrequency(builder, frequency);
    SeradataRadarPayload_Full.addOrigNetwork(builder, origNetworkOffset);
    SeradataRadarPayload_Full.addOrigin(builder, originOffset);
    SeradataRadarPayload_Full.addSource(builder, sourceOffset);
    SeradataRadarPayload_Full.addUpdatedBy(builder, updatedByOffset);
    SeradataRadarPayload_Full.addUpdatedAt(builder, updatedAtOffset);
    SeradataRadarPayload_Full.addCreatedBy(builder, createdByOffset);
    SeradataRadarPayload_Full.addCreatedAt(builder, createdAtOffset);
    SeradataRadarPayload_Full.addNotes(builder, notesOffset);
    SeradataRadarPayload_Full.addConstellationInterferometricCapability(builder, constellationInterferometricCapabilityOffset);
    SeradataRadarPayload_Full.addPartnerSpacecraft(builder, partnerSpacecraftOffset);
    SeradataRadarPayload_Full.addDutyCycle(builder, dutyCycleOffset);
    SeradataRadarPayload_Full.addReceivePolarization(builder, receivePolarizationOffset);
    SeradataRadarPayload_Full.addTransmitPolarization(builder, transmitPolarizationOffset);
    SeradataRadarPayload_Full.addGroundStationLocations(builder, groundStationLocationsOffset);
    SeradataRadarPayload_Full.addGroundStations(builder, groundStationsOffset);
    SeradataRadarPayload_Full.addPointingMethod(builder, pointingMethodOffset);
    SeradataRadarPayload_Full.addRecorderSize(builder, recorderSizeOffset);
    SeradataRadarPayload_Full.addFrequencyBand(builder, frequencyBandOffset);
    SeradataRadarPayload_Full.addName(builder, nameOffset);
    SeradataRadarPayload_Full.addCategory(builder, categoryOffset);
    SeradataRadarPayload_Full.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    SeradataRadarPayload_Full.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
    SeradataRadarPayload_Full.addIdSensor(builder, idSensorOffset);
    SeradataRadarPayload_Full.addSpacecraftId(builder, spacecraftIdOffset);
    SeradataRadarPayload_Full.addClassificationMarking(builder, classificationMarkingOffset);
    SeradataRadarPayload_Full.addId(builder, idOffset);
    SeradataRadarPayload_Full.addDataMode(builder, dataMode);
    return SeradataRadarPayload_Full.endSeradataRadarPayload_Full(builder);
  }

  public static void startSeradataRadarPayload_Full(FlatBufferBuilder builder) { builder.startTable(34); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addSpacecraftId(FlatBufferBuilder builder, int spacecraftIdOffset) { builder.addOffset(2, spacecraftIdOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(3, idSensorOffset, 0); }
  public static void addHostedForCompanyOrgId(FlatBufferBuilder builder, int hostedForCompanyOrgIdOffset) { builder.addOffset(4, hostedForCompanyOrgIdOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(5, manufacturerOrgIdOffset, 0); }
  public static void addCategory(FlatBufferBuilder builder, int categoryOffset) { builder.addOffset(6, categoryOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(7, nameOffset, 0); }
  public static void addFrequencyBand(FlatBufferBuilder builder, int frequencyBandOffset) { builder.addOffset(8, frequencyBandOffset, 0); }
  public static void addFrequency(FlatBufferBuilder builder, double frequency) { builder.addDouble(9, frequency, 0.0); }
  public static void addWaveLength(FlatBufferBuilder builder, double waveLength) { builder.addDouble(10, waveLength, 0.0); }
  public static void addBestResolution(FlatBufferBuilder builder, double bestResolution) { builder.addDouble(11, bestResolution, 0.0); }
  public static void addSwathWidth(FlatBufferBuilder builder, double swathWidth) { builder.addDouble(12, swathWidth, 0.0); }
  public static void addRecorderSize(FlatBufferBuilder builder, int recorderSizeOffset) { builder.addOffset(13, recorderSizeOffset, 0); }
  public static void addFieldOfView(FlatBufferBuilder builder, double fieldOfView) { builder.addDouble(14, fieldOfView, 0.0); }
  public static void addFieldOfRegard(FlatBufferBuilder builder, double fieldOfRegard) { builder.addDouble(15, fieldOfRegard, 0.0); }
  public static void addPointingMethod(FlatBufferBuilder builder, int pointingMethodOffset) { builder.addOffset(16, pointingMethodOffset, 0); }
  public static void addGroundStations(FlatBufferBuilder builder, int groundStationsOffset) { builder.addOffset(17, groundStationsOffset, 0); }
  public static void addGroundStationLocations(FlatBufferBuilder builder, int groundStationLocationsOffset) { builder.addOffset(18, groundStationLocationsOffset, 0); }
  public static void addTransmitPolarization(FlatBufferBuilder builder, int transmitPolarizationOffset) { builder.addOffset(19, transmitPolarizationOffset, 0); }
  public static void addReceivePolarization(FlatBufferBuilder builder, int receivePolarizationOffset) { builder.addOffset(20, receivePolarizationOffset, 0); }
  public static void addDutyCycle(FlatBufferBuilder builder, int dutyCycleOffset) { builder.addOffset(21, dutyCycleOffset, 0); }
  public static void addPartnerSpacecraft(FlatBufferBuilder builder, int partnerSpacecraftOffset) { builder.addOffset(22, partnerSpacecraftOffset, 0); }
  public static void addConstellationInterferometricCapability(FlatBufferBuilder builder, int constellationInterferometricCapabilityOffset) { builder.addOffset(23, constellationInterferometricCapabilityOffset, 0); }
  public static void addNotes(FlatBufferBuilder builder, int notesOffset) { builder.addOffset(24, notesOffset, 0); }
  public static void addBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.addDouble(25, bandwidth, 0.0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(26, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(27, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(28, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(29, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(30, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(31, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(32, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(33, dataMode, 0); }
  public static int endSeradataRadarPayload_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSeradataRadarPayload_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SERA"); }
  public static void finishSizePrefixedSeradataRadarPayload_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SERA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SeradataRadarPayload_Full get(int j) { return get(new SeradataRadarPayload_Full(), j); }
    public SeradataRadarPayload_Full get(SeradataRadarPayload_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

