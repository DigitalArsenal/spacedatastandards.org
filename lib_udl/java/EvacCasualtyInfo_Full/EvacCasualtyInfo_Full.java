// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Identity and medical information on the patient to be evacuated.
 */
@SuppressWarnings("unused")
public final class EvacCasualtyInfo_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EvacCasualtyInfo_Full getRootAsEvacCasualtyInfo_Full(ByteBuffer _bb) { return getRootAsEvacCasualtyInfo_Full(_bb, new EvacCasualtyInfo_Full()); }
  public static EvacCasualtyInfo_Full getRootAsEvacCasualtyInfo_Full(ByteBuffer _bb, EvacCasualtyInfo_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EvacCasualtyInfo_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EVAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EvacCasualtyInfo_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
   * Example: /// Example: ROUTINE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String priority() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer priorityAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer priorityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
   * Example: /// Example: GROUND
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String evacType() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer evacTypeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer evacTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
   * Example: /// Example: DENTAL
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String casualtyType() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer casualtyTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer casualtyTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
   * Example: /// Example: FACE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String bodyPart() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bodyPartAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer bodyPartInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
   * Example: /// Example: NONE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String contamType() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer contamTypeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer contamTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
   * Example: /// Example: ['OXYGEN', 'HOIST']
   * Constraints: No constraints specified.
   */
  public String specMedEquip(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int specMedEquipLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector specMedEquipVector() { return specMedEquipVector(new StringVector()); }
  public StringVector specMedEquipVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional casualty key.
   * Example: /// Example: casualty-007
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String casualtyKey() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer casualtyKeyAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer casualtyKeyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
   * Example: /// Example: US CIVILIAN
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String patientStatus() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer patientStatusAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer patientStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
   * Example: /// Example: FRIEND CIVILIAN
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String patientIdentity() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer patientIdentityAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer patientIdentityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The country code indicating the citizenship of the patient.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String nationality() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nationalityAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer nationalityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
   * Example: /// Example: CIVILIAN
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String payGrade() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer payGradeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer payGradeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The patient common or legal name.
   * Example: /// Example: John Smith
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String name() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The patient age, in years.
   * Example: /// Example: 35
   * Constraints: No constraints specified.
   */
  public int age() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The patient sex (MALE, FEMALE).
   * Example: /// Example: MALE
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String gender() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer genderAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer genderInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Last 4 characters of the patient social security code, or equivalent.
   * Example: /// Example: 1234
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String last4Ssn() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer last4SsnAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer last4SsnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
   * Example: /// Example: O NEG
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String bloodType() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bloodTypeAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer bloodTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
   * Example: /// Example: CIV
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String service() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serviceAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer serviceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The call sign of this patient.
   * Example: /// Example: SHARK
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String callSign() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The career field of this patient.
   * Example: /// Example: Healthcare
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String occSpeciality() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer occSpecialityAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer occSpecialityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
   * Example: /// Example: [-33.123, 150.33, 0.24]
   * Constraints: No constraints specified.
   */
  public String burialLocation(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int burialLocationLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector burialLocationVector() { return burialLocationVector(new StringVector()); }
  public StringVector burialLocationVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
   * Example: /// Example: [12.44, 122.55, 0.98]
   * Constraints: No constraints specified.
   */
  public String collectionPoint(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int collectionPointLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector collectionPointVector() { return collectionPointVector(new StringVector()); }
  public StringVector collectionPointVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Unique identifier for the patient care provider.
   * Example: /// Example: CARE_PROVIDER-1
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String careProviderUrn() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer careProviderUrnAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer careProviderUrnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
   * Example: /// Example: EVACUATE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String dispositionType() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dispositionTypeAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer dispositionTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
   * Example: /// Example: EVACUATE WOUNDED
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String disposition() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dispositionAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer dispositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
   * Example: /// Example: DEVICE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String reportGen() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reportGenAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer reportGenInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
   * Example: /// Example: 2021-10-15T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String reportTime() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer reportTimeAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer reportTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Additional comments on the  patient's casualty information.
   * Example: /// Example: Comments relating to this casualty info.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String comments() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commentsAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer commentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Medical condition causation information.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String etiology(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int etiologyLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector etiologyVector() { return etiologyVector(new StringVector()); }
  public StringVector etiologyVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Treatment information.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String treatment(int j) { int o = __offset(60); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int treatmentLength() { int o = __offset(60); return o != 0 ? __vector_len(o) : 0; }
  public StringVector treatmentVector() { return treatmentVector(new StringVector()); }
  public StringVector treatmentVector(StringVector obj) { int o = __offset(60); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Information obtained for vital signs.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String vitalSignData(int j) { int o = __offset(62); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int vitalSignDataLength() { int o = __offset(62); return o != 0 ? __vector_len(o) : 0; }
  public StringVector vitalSignDataVector() { return vitalSignDataVector(new StringVector()); }
  public StringVector vitalSignDataVector(StringVector obj) { int o = __offset(62); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Health state information.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String healthState(int j) { int o = __offset(64); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int healthStateLength() { int o = __offset(64); return o != 0 ? __vector_len(o) : 0; }
  public StringVector healthStateVector() { return healthStateVector(new StringVector()); }
  public StringVector healthStateVector(StringVector obj) { int o = __offset(64); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Health condition information.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String condition(int j) { int o = __offset(66); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int conditionLength() { int o = __offset(66); return o != 0 ? __vector_len(o) : 0; }
  public StringVector conditionVector() { return conditionVector(new StringVector()); }
  public StringVector conditionVector(StringVector obj) { int o = __offset(66); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Medication specifics.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String medication(int j) { int o = __offset(68); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int medicationLength() { int o = __offset(68); return o != 0 ? __vector_len(o) : 0; }
  public StringVector medicationVector() { return medicationVector(new StringVector()); }
  public StringVector medicationVector(StringVector obj) { int o = __offset(68); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Injury specifics.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String injury(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int injuryLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector injuryVector() { return injuryVector(new StringVector()); }
  public StringVector injuryVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Allergy information.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String allergy(int j) { int o = __offset(72); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int allergyLength() { int o = __offset(72); return o != 0 ? __vector_len(o) : 0; }
  public StringVector allergyVector() { return allergyVector(new StringVector()); }
  public StringVector allergyVector(StringVector obj) { int o = __offset(72); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createEvacCasualtyInfo_Full(FlatBufferBuilder builder,
      int priorityOffset,
      int evacTypeOffset,
      int casualtyTypeOffset,
      int bodyPartOffset,
      int contamTypeOffset,
      int specMedEquipOffset,
      int casualtyKeyOffset,
      int patientStatusOffset,
      int patientIdentityOffset,
      int nationalityOffset,
      int payGradeOffset,
      int nameOffset,
      int age,
      int genderOffset,
      int last4SsnOffset,
      int bloodTypeOffset,
      int serviceOffset,
      int callSignOffset,
      int occSpecialityOffset,
      int burialLocationOffset,
      int collectionPointOffset,
      int careProviderUrnOffset,
      int dispositionTypeOffset,
      int dispositionOffset,
      int reportGenOffset,
      int reportTimeOffset,
      int commentsOffset,
      int etiologyOffset,
      int treatmentOffset,
      int vitalSignDataOffset,
      int healthStateOffset,
      int conditionOffset,
      int medicationOffset,
      int injuryOffset,
      int allergyOffset) {
    builder.startTable(35);
    EvacCasualtyInfo_Full.addAllergy(builder, allergyOffset);
    EvacCasualtyInfo_Full.addInjury(builder, injuryOffset);
    EvacCasualtyInfo_Full.addMedication(builder, medicationOffset);
    EvacCasualtyInfo_Full.addCondition(builder, conditionOffset);
    EvacCasualtyInfo_Full.addHealthState(builder, healthStateOffset);
    EvacCasualtyInfo_Full.addVitalSignData(builder, vitalSignDataOffset);
    EvacCasualtyInfo_Full.addTreatment(builder, treatmentOffset);
    EvacCasualtyInfo_Full.addEtiology(builder, etiologyOffset);
    EvacCasualtyInfo_Full.addComments(builder, commentsOffset);
    EvacCasualtyInfo_Full.addReportTime(builder, reportTimeOffset);
    EvacCasualtyInfo_Full.addReportGen(builder, reportGenOffset);
    EvacCasualtyInfo_Full.addDisposition(builder, dispositionOffset);
    EvacCasualtyInfo_Full.addDispositionType(builder, dispositionTypeOffset);
    EvacCasualtyInfo_Full.addCareProviderUrn(builder, careProviderUrnOffset);
    EvacCasualtyInfo_Full.addCollectionPoint(builder, collectionPointOffset);
    EvacCasualtyInfo_Full.addBurialLocation(builder, burialLocationOffset);
    EvacCasualtyInfo_Full.addOccSpeciality(builder, occSpecialityOffset);
    EvacCasualtyInfo_Full.addCallSign(builder, callSignOffset);
    EvacCasualtyInfo_Full.addService(builder, serviceOffset);
    EvacCasualtyInfo_Full.addBloodType(builder, bloodTypeOffset);
    EvacCasualtyInfo_Full.addLast4Ssn(builder, last4SsnOffset);
    EvacCasualtyInfo_Full.addGender(builder, genderOffset);
    EvacCasualtyInfo_Full.addAge(builder, age);
    EvacCasualtyInfo_Full.addName(builder, nameOffset);
    EvacCasualtyInfo_Full.addPayGrade(builder, payGradeOffset);
    EvacCasualtyInfo_Full.addNationality(builder, nationalityOffset);
    EvacCasualtyInfo_Full.addPatientIdentity(builder, patientIdentityOffset);
    EvacCasualtyInfo_Full.addPatientStatus(builder, patientStatusOffset);
    EvacCasualtyInfo_Full.addCasualtyKey(builder, casualtyKeyOffset);
    EvacCasualtyInfo_Full.addSpecMedEquip(builder, specMedEquipOffset);
    EvacCasualtyInfo_Full.addContamType(builder, contamTypeOffset);
    EvacCasualtyInfo_Full.addBodyPart(builder, bodyPartOffset);
    EvacCasualtyInfo_Full.addCasualtyType(builder, casualtyTypeOffset);
    EvacCasualtyInfo_Full.addEvacType(builder, evacTypeOffset);
    EvacCasualtyInfo_Full.addPriority(builder, priorityOffset);
    return EvacCasualtyInfo_Full.endEvacCasualtyInfo_Full(builder);
  }

  public static void startEvacCasualtyInfo_Full(FlatBufferBuilder builder) { builder.startTable(35); }
  public static void addPriority(FlatBufferBuilder builder, int priorityOffset) { builder.addOffset(0, priorityOffset, 0); }
  public static void addEvacType(FlatBufferBuilder builder, int evacTypeOffset) { builder.addOffset(1, evacTypeOffset, 0); }
  public static void addCasualtyType(FlatBufferBuilder builder, int casualtyTypeOffset) { builder.addOffset(2, casualtyTypeOffset, 0); }
  public static void addBodyPart(FlatBufferBuilder builder, int bodyPartOffset) { builder.addOffset(3, bodyPartOffset, 0); }
  public static void addContamType(FlatBufferBuilder builder, int contamTypeOffset) { builder.addOffset(4, contamTypeOffset, 0); }
  public static void addSpecMedEquip(FlatBufferBuilder builder, int specMedEquipOffset) { builder.addOffset(5, specMedEquipOffset, 0); }
  public static int createSpecMedEquipVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSpecMedEquipVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCasualtyKey(FlatBufferBuilder builder, int casualtyKeyOffset) { builder.addOffset(6, casualtyKeyOffset, 0); }
  public static void addPatientStatus(FlatBufferBuilder builder, int patientStatusOffset) { builder.addOffset(7, patientStatusOffset, 0); }
  public static void addPatientIdentity(FlatBufferBuilder builder, int patientIdentityOffset) { builder.addOffset(8, patientIdentityOffset, 0); }
  public static void addNationality(FlatBufferBuilder builder, int nationalityOffset) { builder.addOffset(9, nationalityOffset, 0); }
  public static void addPayGrade(FlatBufferBuilder builder, int payGradeOffset) { builder.addOffset(10, payGradeOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(11, nameOffset, 0); }
  public static void addAge(FlatBufferBuilder builder, int age) { builder.addInt(12, age, 0); }
  public static void addGender(FlatBufferBuilder builder, int genderOffset) { builder.addOffset(13, genderOffset, 0); }
  public static void addLast4Ssn(FlatBufferBuilder builder, int last4SsnOffset) { builder.addOffset(14, last4SsnOffset, 0); }
  public static void addBloodType(FlatBufferBuilder builder, int bloodTypeOffset) { builder.addOffset(15, bloodTypeOffset, 0); }
  public static void addService(FlatBufferBuilder builder, int serviceOffset) { builder.addOffset(16, serviceOffset, 0); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(17, callSignOffset, 0); }
  public static void addOccSpeciality(FlatBufferBuilder builder, int occSpecialityOffset) { builder.addOffset(18, occSpecialityOffset, 0); }
  public static void addBurialLocation(FlatBufferBuilder builder, int burialLocationOffset) { builder.addOffset(19, burialLocationOffset, 0); }
  public static int createBurialLocationVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBurialLocationVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCollectionPoint(FlatBufferBuilder builder, int collectionPointOffset) { builder.addOffset(20, collectionPointOffset, 0); }
  public static int createCollectionPointVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCollectionPointVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCareProviderUrn(FlatBufferBuilder builder, int careProviderUrnOffset) { builder.addOffset(21, careProviderUrnOffset, 0); }
  public static void addDispositionType(FlatBufferBuilder builder, int dispositionTypeOffset) { builder.addOffset(22, dispositionTypeOffset, 0); }
  public static void addDisposition(FlatBufferBuilder builder, int dispositionOffset) { builder.addOffset(23, dispositionOffset, 0); }
  public static void addReportGen(FlatBufferBuilder builder, int reportGenOffset) { builder.addOffset(24, reportGenOffset, 0); }
  public static void addReportTime(FlatBufferBuilder builder, int reportTimeOffset) { builder.addOffset(25, reportTimeOffset, 0); }
  public static void addComments(FlatBufferBuilder builder, int commentsOffset) { builder.addOffset(26, commentsOffset, 0); }
  public static void addEtiology(FlatBufferBuilder builder, int etiologyOffset) { builder.addOffset(27, etiologyOffset, 0); }
  public static int createEtiologyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEtiologyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTreatment(FlatBufferBuilder builder, int treatmentOffset) { builder.addOffset(28, treatmentOffset, 0); }
  public static int createTreatmentVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTreatmentVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addVitalSignData(FlatBufferBuilder builder, int vitalSignDataOffset) { builder.addOffset(29, vitalSignDataOffset, 0); }
  public static int createVitalSignDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startVitalSignDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHealthState(FlatBufferBuilder builder, int healthStateOffset) { builder.addOffset(30, healthStateOffset, 0); }
  public static int createHealthStateVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHealthStateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCondition(FlatBufferBuilder builder, int conditionOffset) { builder.addOffset(31, conditionOffset, 0); }
  public static int createConditionVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startConditionVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMedication(FlatBufferBuilder builder, int medicationOffset) { builder.addOffset(32, medicationOffset, 0); }
  public static int createMedicationVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startMedicationVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addInjury(FlatBufferBuilder builder, int injuryOffset) { builder.addOffset(33, injuryOffset, 0); }
  public static int createInjuryVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInjuryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAllergy(FlatBufferBuilder builder, int allergyOffset) { builder.addOffset(34, allergyOffset, 0); }
  public static int createAllergyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAllergyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEvacCasualtyInfo_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEvacCasualtyInfo_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EVAC"); }
  public static void finishSizePrefixedEvacCasualtyInfo_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EVAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EvacCasualtyInfo_Full get(int j) { return get(new EvacCasualtyInfo_Full(), j); }
    public EvacCasualtyInfo_Full get(EvacCasualtyInfo_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

