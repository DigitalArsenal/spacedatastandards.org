// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Health state information.
 */
@SuppressWarnings("unused")
public final class EvacHealthState_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EvacHealthState_Full getRootAsEvacHealthState_Full(ByteBuffer _bb) { return getRootAsEvacHealthState_Full(_bb, new EvacHealthState_Full()); }
  public static EvacHealthState_Full getRootAsEvacHealthState_Full(ByteBuffer _bb, EvacHealthState_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EvacHealthState_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EVAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EvacHealthState_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Generalized state of health type (BIOLOGICAL, CHEMICAL, COGNITIVE, HYDRATION, LIFE SIGN, RADIATION, SHOCK, THERMAL).
   * Example: /// Example: COGNITIVE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String type() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Medical color code used to quickly identify various medical state (e.g. AMBER, BLACK, BLUE, GRAY, NORMAL, RED).
   * Example: /// Example: BLUE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String healthStateCode() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer healthStateCodeAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer healthStateCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Medical confidence factor.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int medConfFactor() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Datetime of the health state diagnosis in ISO 8601 UTC datetime format.
   * Example: /// Example: 2021-10-15T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String time() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer timeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createEvacHealthState_Full(FlatBufferBuilder builder,
      int typeOffset,
      int healthStateCodeOffset,
      int medConfFactor,
      int timeOffset) {
    builder.startTable(4);
    EvacHealthState_Full.addTime(builder, timeOffset);
    EvacHealthState_Full.addMedConfFactor(builder, medConfFactor);
    EvacHealthState_Full.addHealthStateCode(builder, healthStateCodeOffset);
    EvacHealthState_Full.addType(builder, typeOffset);
    return EvacHealthState_Full.endEvacHealthState_Full(builder);
  }

  public static void startEvacHealthState_Full(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(0, typeOffset, 0); }
  public static void addHealthStateCode(FlatBufferBuilder builder, int healthStateCodeOffset) { builder.addOffset(1, healthStateCodeOffset, 0); }
  public static void addMedConfFactor(FlatBufferBuilder builder, int medConfFactor) { builder.addInt(2, medConfFactor, 0); }
  public static void addTime(FlatBufferBuilder builder, int timeOffset) { builder.addOffset(3, timeOffset, 0); }
  public static int endEvacHealthState_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEvacHealthState_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EVAC"); }
  public static void finishSizePrefixedEvacHealthState_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EVAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EvacHealthState_Full get(int j) { return get(new EvacHealthState_Full(), j); }
    public EvacHealthState_Full get(EvacHealthState_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

