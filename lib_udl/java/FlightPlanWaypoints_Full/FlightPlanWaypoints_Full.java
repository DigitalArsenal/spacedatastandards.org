// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of waypoints associated with this flight plan.
 */
@SuppressWarnings("unused")
public final class FlightPlanWaypoints_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static FlightPlanWaypoints_Full getRootAsFlightPlanWaypoints_Full(ByteBuffer _bb) { return getRootAsFlightPlanWaypoints_Full(_bb, new FlightPlanWaypoints_Full()); }
  public static FlightPlanWaypoints_Full getRootAsFlightPlanWaypoints_Full(ByteBuffer _bb, FlightPlanWaypoints_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean FlightPlanWaypoints_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "FLIG"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FlightPlanWaypoints_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
   * Example: /// Example: COMMENT
   * Constraints: Minimum length = 1, Maximum length = 16
   */
  public String type() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
   * Example: /// Example: KCHS
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String waypointName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer waypointNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer waypointNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The waypoint number on the route. Comment points do not get a waypoint number.
   * Example: /// Example: 20
   * Constraints: No constraints specified.
   */
  public int waypointNum() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The flight path flown for this leg.
   * Example: /// Example: W15
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String airway() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer airwayAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer airwayInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Point identifying an air refueling track/anchor or fixed track.
   * Example: /// Example: ARIP
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String arpt() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arptAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer arptInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The ID of the air refueling track/anchor or fixed track.
   * Example: /// Example: AR202
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String arId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer arIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Navigational Aid (NAVAID) identification code.
   * Example: /// Example: HTO
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String navaid() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer navaidAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer navaidInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
   * Example: /// Example: 83X
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tacanChannel() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tacanChannelAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer tacanChannelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
   * Example: /// Example: 113.6
   * Constraints: No constraints specified.
   */
  public double vorFreq() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
   * Example: /// Example: EXTREME
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String turbCat() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer turbCatAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer turbCatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The icing intensity classification for this flight (LIGHT, MODERATE, etc).
   * Example: /// Example: MODERATE
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String iceCat() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iceCatAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer iceCatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
   * Example: /// Example: MODERATE
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String thunderCat() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer thunderCatAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer thunderCatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Altitude of a level, point, or object measured in feet above mean sea level.
   * Example: /// Example: 27000.1
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average temperature deviation from standard day profile for this leg in degrees Celsius.
   * Example: /// Example: 12.1
   * Constraints: No constraints specified.
   */
  public double tempDev() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The fuel degrade percentage used for this leg.
   * Example: /// Example: 10.1
   * Constraints: No constraints specified.
   */
  public double legFuelDegrade() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The average Mach speed for this leg.
   * Example: /// Example: 0.74
   * Constraints: No constraints specified.
   */
  public double legMach() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
   * Example: /// Example: 65
   * Constraints: No constraints specified.
   */
  public double legMsnIndex() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The percent degrade due to drag for this aircraft for this leg.
   * Example: /// Example: 1.2
   * Constraints: No constraints specified.
   */
  public double legDragIndex() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The average calibrated airspeed (CAS) for this leg in knots.
   * Example: /// Example: 200.1
   * Constraints: No constraints specified.
   */
  public double avgCalAirspeed() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The average true airspeed (TAS) for this leg in knots.
   * Example: /// Example: 210.1
   * Constraints: No constraints specified.
   */
  public double avgTrueAirspeed() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The average ground speed for this leg in knots.
   * Example: /// Example: 300.1
   * Constraints: No constraints specified.
   */
  public double avgGroundSpeed() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
   * Example: /// Example: 357.5
   * Constraints: No constraints specified.
   */
  public double priFreq() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The wind direction at this specific point in degrees from true north.
   * Example: /// Example: 165.5
   * Constraints: No constraints specified.
   */
  public double pointWindDir() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The wind velocity at this specific point in knots.
   * Example: /// Example: 14.4
   * Constraints: No constraints specified.
   */
  public double pointWindSpeed() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The average wind direction for this leg in degrees from true north.
   * Example: /// Example: 165.5
   * Constraints: No constraints specified.
   */
  public double avgWindDir() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The average wind speed for this leg in knots.
   * Example: /// Example: 14.4
   * Constraints: No constraints specified.
   */
  public double avgWindSpeed() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
   * Example: /// Example: -32.1
   * Constraints: No constraints specified.
   */
  public double legWindFac() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The average drift angle for this leg in degrees from true north.
   * Example: /// Example: -3.2
   * Constraints: No constraints specified.
   */
  public double avgDriftAng() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
   * Example: /// Example: 357.5
   * Constraints: No constraints specified.
   */
  public double secFreq() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The magnetic course at leg midpoint in degrees from true north.
   * Example: /// Example: 338.1
   * Constraints: No constraints specified.
   */
  public double magCourse() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The true course at leg midpoint in degrees from true north.
   * Example: /// Example: 328.1
   * Constraints: No constraints specified.
   */
  public double trueCourse() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The magnetic heading at leg midpoint in degrees from true north.
   * Example: /// Example: 212.1
   * Constraints: No constraints specified.
   */
  public double magHeading() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
   * Example: /// Example: 31/94
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String aaTacanChannel() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aaTacanChannelAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer aaTacanChannelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * The zone/leg distance flown in nautical miles.
   * Example: /// Example: 212.1
   * Constraints: No constraints specified.
   */
  public double zoneDistance() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total distance flown to this waypoint calculated from point of departure in nautical miles.
   * Example: /// Example: 688.1
   * Constraints: No constraints specified.
   */
  public double totalFlownDistance() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total distance remaining from this waypoint to the point of arrival in nautical miles.
   * Example: /// Example: 1288.1
   * Constraints: No constraints specified.
   */
  public double totalRemDistance() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The time to fly this zone/leg in minutes.
   * Example: /// Example: 36.1
   * Constraints: No constraints specified.
   */
  public double zoneTime() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total time accumulated from takeoff to this waypoint expressed as HH:MM.
   * Example: /// Example: 08:45
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String totalTime() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer totalTimeAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer totalTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
   * Example: /// Example: 01:43
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String totalTimeRem() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer totalTimeRemAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer totalTimeRemInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * The amount of fuel used on this zone/leg in pounds.
   * Example: /// Example: 1120.1
   * Constraints: No constraints specified.
   */
  public double zoneFuel() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total fuel used to this waypoint from point of departure in pounds.
   * Example: /// Example: 70431.1
   * Constraints: No constraints specified.
   */
  public double totalUsedFuel() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total fuel remaining at this waypoint in pounds.
   * Example: /// Example: 30453.1
   * Constraints: No constraints specified.
   */
  public double totalRemFuel() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
   * Example: /// Example: -30400.1
   * Constraints: No constraints specified.
   */
  public double exchangedFuel() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The air distance of this leg in nautical miles.
   * Example: /// Example: 321.1
   * Constraints: No constraints specified.
   */
  public double airDistance() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total air distance to this waypoint in nautical miles.
   * Example: /// Example: 3251.1
   * Constraints: No constraints specified.
   */
  public double totalAirDistance() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total weight of the aircraft at this waypoint in pounds.
   * Example: /// Example: 207123.1
   * Constraints: No constraints specified.
   */
  public double totalWeight() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2023-09-09T01:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String eta() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer etaAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer etaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2023-09-09T01:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String ata() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ataAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer ataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * The leg fuel flow in pounds per hour.
   * Example: /// Example: 17654.1
   * Constraints: No constraints specified.
   */
  public double fuelFlow() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
   * Example: /// Example: KCHS
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String legAlternate() { int o = __offset(106); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer legAlternateAsByteBuffer() { return __vector_as_bytebuffer(106, 1); }
  public ByteBuffer legAlternateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 106, 1); }
  /**
   * The magnetic variation for this leg in degrees.
   * Example: /// Example: -13.2
   * Constraints: No constraints specified.
   */
  public double magVar() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The day low level altitude in feet above sea level for the leg ending at this waypoint.
   * Example: /// Example: 1500.1
   * Constraints: No constraints specified.
   */
  public double dayLowAlt() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The night low level altitude in feet above sea level for the leg ending at this waypoint.
   * Example: /// Example: 2300.1
   * Constraints: No constraints specified.
   */
  public double nightLowAlt() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
   * Example: /// Example: 2450.1
   * Constraints: No constraints specified.
   */
  public double nvgLowAlt() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createFlightPlanWaypoints_Full(FlatBufferBuilder builder,
      int typeOffset,
      int waypointNameOffset,
      int waypointNum,
      int airwayOffset,
      int arptOffset,
      double lat,
      double lon,
      int arIdOffset,
      int navaidOffset,
      int tacanChannelOffset,
      double vorFreq,
      int turbCatOffset,
      int iceCatOffset,
      int thunderCatOffset,
      double alt,
      double tempDev,
      double legFuelDegrade,
      double legMach,
      double legMsnIndex,
      double legDragIndex,
      double avgCalAirspeed,
      double avgTrueAirspeed,
      double avgGroundSpeed,
      double priFreq,
      double pointWindDir,
      double pointWindSpeed,
      double avgWindDir,
      double avgWindSpeed,
      double legWindFac,
      double avgDriftAng,
      double secFreq,
      double magCourse,
      double trueCourse,
      double magHeading,
      int aaTacanChannelOffset,
      double zoneDistance,
      double totalFlownDistance,
      double totalRemDistance,
      double zoneTime,
      int totalTimeOffset,
      int totalTimeRemOffset,
      double zoneFuel,
      double totalUsedFuel,
      double totalRemFuel,
      double exchangedFuel,
      double airDistance,
      double totalAirDistance,
      double totalWeight,
      int etaOffset,
      int ataOffset,
      double fuelFlow,
      int legAlternateOffset,
      double magVar,
      double dayLowAlt,
      double nightLowAlt,
      double nvgLowAlt) {
    builder.startTable(56);
    FlightPlanWaypoints_Full.addNvgLowAlt(builder, nvgLowAlt);
    FlightPlanWaypoints_Full.addNightLowAlt(builder, nightLowAlt);
    FlightPlanWaypoints_Full.addDayLowAlt(builder, dayLowAlt);
    FlightPlanWaypoints_Full.addMagVar(builder, magVar);
    FlightPlanWaypoints_Full.addFuelFlow(builder, fuelFlow);
    FlightPlanWaypoints_Full.addTotalWeight(builder, totalWeight);
    FlightPlanWaypoints_Full.addTotalAirDistance(builder, totalAirDistance);
    FlightPlanWaypoints_Full.addAirDistance(builder, airDistance);
    FlightPlanWaypoints_Full.addExchangedFuel(builder, exchangedFuel);
    FlightPlanWaypoints_Full.addTotalRemFuel(builder, totalRemFuel);
    FlightPlanWaypoints_Full.addTotalUsedFuel(builder, totalUsedFuel);
    FlightPlanWaypoints_Full.addZoneFuel(builder, zoneFuel);
    FlightPlanWaypoints_Full.addZoneTime(builder, zoneTime);
    FlightPlanWaypoints_Full.addTotalRemDistance(builder, totalRemDistance);
    FlightPlanWaypoints_Full.addTotalFlownDistance(builder, totalFlownDistance);
    FlightPlanWaypoints_Full.addZoneDistance(builder, zoneDistance);
    FlightPlanWaypoints_Full.addMagHeading(builder, magHeading);
    FlightPlanWaypoints_Full.addTrueCourse(builder, trueCourse);
    FlightPlanWaypoints_Full.addMagCourse(builder, magCourse);
    FlightPlanWaypoints_Full.addSecFreq(builder, secFreq);
    FlightPlanWaypoints_Full.addAvgDriftAng(builder, avgDriftAng);
    FlightPlanWaypoints_Full.addLegWindFac(builder, legWindFac);
    FlightPlanWaypoints_Full.addAvgWindSpeed(builder, avgWindSpeed);
    FlightPlanWaypoints_Full.addAvgWindDir(builder, avgWindDir);
    FlightPlanWaypoints_Full.addPointWindSpeed(builder, pointWindSpeed);
    FlightPlanWaypoints_Full.addPointWindDir(builder, pointWindDir);
    FlightPlanWaypoints_Full.addPriFreq(builder, priFreq);
    FlightPlanWaypoints_Full.addAvgGroundSpeed(builder, avgGroundSpeed);
    FlightPlanWaypoints_Full.addAvgTrueAirspeed(builder, avgTrueAirspeed);
    FlightPlanWaypoints_Full.addAvgCalAirspeed(builder, avgCalAirspeed);
    FlightPlanWaypoints_Full.addLegDragIndex(builder, legDragIndex);
    FlightPlanWaypoints_Full.addLegMsnIndex(builder, legMsnIndex);
    FlightPlanWaypoints_Full.addLegMach(builder, legMach);
    FlightPlanWaypoints_Full.addLegFuelDegrade(builder, legFuelDegrade);
    FlightPlanWaypoints_Full.addTempDev(builder, tempDev);
    FlightPlanWaypoints_Full.addAlt(builder, alt);
    FlightPlanWaypoints_Full.addVorFreq(builder, vorFreq);
    FlightPlanWaypoints_Full.addLon(builder, lon);
    FlightPlanWaypoints_Full.addLat(builder, lat);
    FlightPlanWaypoints_Full.addLegAlternate(builder, legAlternateOffset);
    FlightPlanWaypoints_Full.addAta(builder, ataOffset);
    FlightPlanWaypoints_Full.addEta(builder, etaOffset);
    FlightPlanWaypoints_Full.addTotalTimeRem(builder, totalTimeRemOffset);
    FlightPlanWaypoints_Full.addTotalTime(builder, totalTimeOffset);
    FlightPlanWaypoints_Full.addAaTacanChannel(builder, aaTacanChannelOffset);
    FlightPlanWaypoints_Full.addThunderCat(builder, thunderCatOffset);
    FlightPlanWaypoints_Full.addIceCat(builder, iceCatOffset);
    FlightPlanWaypoints_Full.addTurbCat(builder, turbCatOffset);
    FlightPlanWaypoints_Full.addTacanChannel(builder, tacanChannelOffset);
    FlightPlanWaypoints_Full.addNavaid(builder, navaidOffset);
    FlightPlanWaypoints_Full.addArId(builder, arIdOffset);
    FlightPlanWaypoints_Full.addArpt(builder, arptOffset);
    FlightPlanWaypoints_Full.addAirway(builder, airwayOffset);
    FlightPlanWaypoints_Full.addWaypointNum(builder, waypointNum);
    FlightPlanWaypoints_Full.addWaypointName(builder, waypointNameOffset);
    FlightPlanWaypoints_Full.addType(builder, typeOffset);
    return FlightPlanWaypoints_Full.endFlightPlanWaypoints_Full(builder);
  }

  public static void startFlightPlanWaypoints_Full(FlatBufferBuilder builder) { builder.startTable(56); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(0, typeOffset, 0); }
  public static void addWaypointName(FlatBufferBuilder builder, int waypointNameOffset) { builder.addOffset(1, waypointNameOffset, 0); }
  public static void addWaypointNum(FlatBufferBuilder builder, int waypointNum) { builder.addInt(2, waypointNum, 0); }
  public static void addAirway(FlatBufferBuilder builder, int airwayOffset) { builder.addOffset(3, airwayOffset, 0); }
  public static void addArpt(FlatBufferBuilder builder, int arptOffset) { builder.addOffset(4, arptOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(5, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(6, lon, 0.0); }
  public static void addArId(FlatBufferBuilder builder, int arIdOffset) { builder.addOffset(7, arIdOffset, 0); }
  public static void addNavaid(FlatBufferBuilder builder, int navaidOffset) { builder.addOffset(8, navaidOffset, 0); }
  public static void addTacanChannel(FlatBufferBuilder builder, int tacanChannelOffset) { builder.addOffset(9, tacanChannelOffset, 0); }
  public static void addVorFreq(FlatBufferBuilder builder, double vorFreq) { builder.addDouble(10, vorFreq, 0.0); }
  public static void addTurbCat(FlatBufferBuilder builder, int turbCatOffset) { builder.addOffset(11, turbCatOffset, 0); }
  public static void addIceCat(FlatBufferBuilder builder, int iceCatOffset) { builder.addOffset(12, iceCatOffset, 0); }
  public static void addThunderCat(FlatBufferBuilder builder, int thunderCatOffset) { builder.addOffset(13, thunderCatOffset, 0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(14, alt, 0.0); }
  public static void addTempDev(FlatBufferBuilder builder, double tempDev) { builder.addDouble(15, tempDev, 0.0); }
  public static void addLegFuelDegrade(FlatBufferBuilder builder, double legFuelDegrade) { builder.addDouble(16, legFuelDegrade, 0.0); }
  public static void addLegMach(FlatBufferBuilder builder, double legMach) { builder.addDouble(17, legMach, 0.0); }
  public static void addLegMsnIndex(FlatBufferBuilder builder, double legMsnIndex) { builder.addDouble(18, legMsnIndex, 0.0); }
  public static void addLegDragIndex(FlatBufferBuilder builder, double legDragIndex) { builder.addDouble(19, legDragIndex, 0.0); }
  public static void addAvgCalAirspeed(FlatBufferBuilder builder, double avgCalAirspeed) { builder.addDouble(20, avgCalAirspeed, 0.0); }
  public static void addAvgTrueAirspeed(FlatBufferBuilder builder, double avgTrueAirspeed) { builder.addDouble(21, avgTrueAirspeed, 0.0); }
  public static void addAvgGroundSpeed(FlatBufferBuilder builder, double avgGroundSpeed) { builder.addDouble(22, avgGroundSpeed, 0.0); }
  public static void addPriFreq(FlatBufferBuilder builder, double priFreq) { builder.addDouble(23, priFreq, 0.0); }
  public static void addPointWindDir(FlatBufferBuilder builder, double pointWindDir) { builder.addDouble(24, pointWindDir, 0.0); }
  public static void addPointWindSpeed(FlatBufferBuilder builder, double pointWindSpeed) { builder.addDouble(25, pointWindSpeed, 0.0); }
  public static void addAvgWindDir(FlatBufferBuilder builder, double avgWindDir) { builder.addDouble(26, avgWindDir, 0.0); }
  public static void addAvgWindSpeed(FlatBufferBuilder builder, double avgWindSpeed) { builder.addDouble(27, avgWindSpeed, 0.0); }
  public static void addLegWindFac(FlatBufferBuilder builder, double legWindFac) { builder.addDouble(28, legWindFac, 0.0); }
  public static void addAvgDriftAng(FlatBufferBuilder builder, double avgDriftAng) { builder.addDouble(29, avgDriftAng, 0.0); }
  public static void addSecFreq(FlatBufferBuilder builder, double secFreq) { builder.addDouble(30, secFreq, 0.0); }
  public static void addMagCourse(FlatBufferBuilder builder, double magCourse) { builder.addDouble(31, magCourse, 0.0); }
  public static void addTrueCourse(FlatBufferBuilder builder, double trueCourse) { builder.addDouble(32, trueCourse, 0.0); }
  public static void addMagHeading(FlatBufferBuilder builder, double magHeading) { builder.addDouble(33, magHeading, 0.0); }
  public static void addAaTacanChannel(FlatBufferBuilder builder, int aaTacanChannelOffset) { builder.addOffset(34, aaTacanChannelOffset, 0); }
  public static void addZoneDistance(FlatBufferBuilder builder, double zoneDistance) { builder.addDouble(35, zoneDistance, 0.0); }
  public static void addTotalFlownDistance(FlatBufferBuilder builder, double totalFlownDistance) { builder.addDouble(36, totalFlownDistance, 0.0); }
  public static void addTotalRemDistance(FlatBufferBuilder builder, double totalRemDistance) { builder.addDouble(37, totalRemDistance, 0.0); }
  public static void addZoneTime(FlatBufferBuilder builder, double zoneTime) { builder.addDouble(38, zoneTime, 0.0); }
  public static void addTotalTime(FlatBufferBuilder builder, int totalTimeOffset) { builder.addOffset(39, totalTimeOffset, 0); }
  public static void addTotalTimeRem(FlatBufferBuilder builder, int totalTimeRemOffset) { builder.addOffset(40, totalTimeRemOffset, 0); }
  public static void addZoneFuel(FlatBufferBuilder builder, double zoneFuel) { builder.addDouble(41, zoneFuel, 0.0); }
  public static void addTotalUsedFuel(FlatBufferBuilder builder, double totalUsedFuel) { builder.addDouble(42, totalUsedFuel, 0.0); }
  public static void addTotalRemFuel(FlatBufferBuilder builder, double totalRemFuel) { builder.addDouble(43, totalRemFuel, 0.0); }
  public static void addExchangedFuel(FlatBufferBuilder builder, double exchangedFuel) { builder.addDouble(44, exchangedFuel, 0.0); }
  public static void addAirDistance(FlatBufferBuilder builder, double airDistance) { builder.addDouble(45, airDistance, 0.0); }
  public static void addTotalAirDistance(FlatBufferBuilder builder, double totalAirDistance) { builder.addDouble(46, totalAirDistance, 0.0); }
  public static void addTotalWeight(FlatBufferBuilder builder, double totalWeight) { builder.addDouble(47, totalWeight, 0.0); }
  public static void addEta(FlatBufferBuilder builder, int etaOffset) { builder.addOffset(48, etaOffset, 0); }
  public static void addAta(FlatBufferBuilder builder, int ataOffset) { builder.addOffset(49, ataOffset, 0); }
  public static void addFuelFlow(FlatBufferBuilder builder, double fuelFlow) { builder.addDouble(50, fuelFlow, 0.0); }
  public static void addLegAlternate(FlatBufferBuilder builder, int legAlternateOffset) { builder.addOffset(51, legAlternateOffset, 0); }
  public static void addMagVar(FlatBufferBuilder builder, double magVar) { builder.addDouble(52, magVar, 0.0); }
  public static void addDayLowAlt(FlatBufferBuilder builder, double dayLowAlt) { builder.addDouble(53, dayLowAlt, 0.0); }
  public static void addNightLowAlt(FlatBufferBuilder builder, double nightLowAlt) { builder.addDouble(54, nightLowAlt, 0.0); }
  public static void addNvgLowAlt(FlatBufferBuilder builder, double nvgLowAlt) { builder.addDouble(55, nvgLowAlt, 0.0); }
  public static int endFlightPlanWaypoints_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishFlightPlanWaypoints_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "FLIG"); }
  public static void finishSizePrefixedFlightPlanWaypoints_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "FLIG"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FlightPlanWaypoints_Full get(int j) { return get(new FlightPlanWaypoints_Full(), j); }
    public FlightPlanWaypoints_Full get(FlightPlanWaypoints_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

