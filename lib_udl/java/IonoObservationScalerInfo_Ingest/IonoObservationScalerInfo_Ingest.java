// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
 */
@SuppressWarnings("unused")
public final class IonoObservationScalerInfo_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservationScalerInfo_Ingest getRootAsIonoObservationScalerInfo_Ingest(ByteBuffer _bb) { return getRootAsIonoObservationScalerInfo_Ingest(_bb, new IonoObservationScalerInfo_Ingest()); }
  public static IonoObservationScalerInfo_Ingest getRootAsIonoObservationScalerInfo_Ingest(ByteBuffer _bb, IonoObservationScalerInfo_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservationScalerInfo_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservationScalerInfo_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
   * Example: /// Example: MANUAL
   * Constraints: Minimum length = 0, Maximum length = 9
   */
  public String type() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Scaler name.
   * Example: /// Example: ARTIST-4
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String name() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Scaler organization.
   * Example: /// Example: UML
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String organization() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer organizationAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer organizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Scaler version.
   * Example: /// Example: 500200.1
   * Constraints: No constraints specified.
   */
  public double version() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Scaler confidence score.
   * Example: /// Example: 75
   * Constraints: No constraints specified.
   */
  public int confidenceScore() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Scaler confidence level.
   * Example: /// Example: 11
   * Constraints: No constraints specified.
   */
  public int confidenceLevel() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createIonoObservationScalerInfo_Ingest(FlatBufferBuilder builder,
      int typeOffset,
      int nameOffset,
      int organizationOffset,
      double version,
      int confidenceScore,
      int confidenceLevel) {
    builder.startTable(6);
    IonoObservationScalerInfo_Ingest.addVersion(builder, version);
    IonoObservationScalerInfo_Ingest.addConfidenceLevel(builder, confidenceLevel);
    IonoObservationScalerInfo_Ingest.addConfidenceScore(builder, confidenceScore);
    IonoObservationScalerInfo_Ingest.addOrganization(builder, organizationOffset);
    IonoObservationScalerInfo_Ingest.addName(builder, nameOffset);
    IonoObservationScalerInfo_Ingest.addType(builder, typeOffset);
    return IonoObservationScalerInfo_Ingest.endIonoObservationScalerInfo_Ingest(builder);
  }

  public static void startIonoObservationScalerInfo_Ingest(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(0, typeOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(1, nameOffset, 0); }
  public static void addOrganization(FlatBufferBuilder builder, int organizationOffset) { builder.addOffset(2, organizationOffset, 0); }
  public static void addVersion(FlatBufferBuilder builder, double version) { builder.addDouble(3, version, 0.0); }
  public static void addConfidenceScore(FlatBufferBuilder builder, int confidenceScore) { builder.addInt(4, confidenceScore, 0); }
  public static void addConfidenceLevel(FlatBufferBuilder builder, int confidenceLevel) { builder.addInt(5, confidenceLevel, 0); }
  public static int endIonoObservationScalerInfo_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservationScalerInfo_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservationScalerInfo_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservationScalerInfo_Ingest get(int j) { return get(new IonoObservationScalerInfo_Ingest(), j); }
    public IonoObservationScalerInfo_Ingest get(IonoObservationScalerInfo_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

