// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Provides information pertaining to the location of the sensor platform during periods when the sensor is not collecting data. It shall be sent as required during periods in which the sensor is not collecting data, such as enroute to an orbit location, during a turn, or any other time at which platform location is required.
 */
@SuppressWarnings("unused")
public final class MtiPlatformLocation_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiPlatformLocation_Ingest getRootAsMtiPlatformLocation_Ingest(ByteBuffer _bb) { return getRootAsMtiPlatformLocation_Ingest(_bb, new MtiPlatformLocation_Ingest()); }
  public static MtiPlatformLocation_Ingest getRootAsMtiPlatformLocation_Ingest(ByteBuffer _bb, MtiPlatformLocation_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiPlatformLocation_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTIP"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiPlatformLocation_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields of the Mission Segment to the time the report is prepared.
   * Example: /// Example: 1234567890
   * Constraints: No constraints specified.
   */
  public long l1() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * North-South position of the platform at the time the report is prepared, expressed as degrees North (positive) or South (negative) of the Equator.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double l2() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * East-West position of the platform at the time the report is prepared, expressed as degrees East (positive) from the Prime Meridian.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double l3() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Altitude of the platform at the time the report is prepared, referenced to its position above the WGS-84 ellipsoid, in centimeters.
   * Example: /// Example: 45
   * Constraints: No constraints specified.
   */
  public int l4() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Ground track of the platform at the time the report is prepared, expressed as the angle in degrees (clockwise) from True North.
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double l5() { int o = __offset(12); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Ground speed of the platform at the time the report is prepared, expressed as millimeters per second.
   * Example: /// Example: 50
   * Constraints: No constraints specified.
   */
  public int l6() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Velocity of the platform in the vertical direction, expressed as decimeters per second.
   * Example: /// Example: 82
   * Constraints: No constraints specified.
   */
  public int l7() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Platform location timestamp in ISO8601 UTC format.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String platlocts() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer platloctsAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer platloctsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static int createMtiPlatformLocation_Ingest(FlatBufferBuilder builder,
      long l1,
      double l2,
      double l3,
      int l4,
      double l5,
      int l6,
      int l7,
      int platloctsOffset) {
    builder.startTable(8);
    MtiPlatformLocation_Ingest.addL5(builder, l5);
    MtiPlatformLocation_Ingest.addL3(builder, l3);
    MtiPlatformLocation_Ingest.addL2(builder, l2);
    MtiPlatformLocation_Ingest.addL1(builder, l1);
    MtiPlatformLocation_Ingest.addPlatlocts(builder, platloctsOffset);
    MtiPlatformLocation_Ingest.addL7(builder, l7);
    MtiPlatformLocation_Ingest.addL6(builder, l6);
    MtiPlatformLocation_Ingest.addL4(builder, l4);
    return MtiPlatformLocation_Ingest.endMtiPlatformLocation_Ingest(builder);
  }

  public static void startMtiPlatformLocation_Ingest(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addL1(FlatBufferBuilder builder, long l1) { builder.addLong(0, l1, 0L); }
  public static void addL2(FlatBufferBuilder builder, double l2) { builder.addDouble(1, l2, 0.0); }
  public static void addL3(FlatBufferBuilder builder, double l3) { builder.addDouble(2, l3, 0.0); }
  public static void addL4(FlatBufferBuilder builder, int l4) { builder.addInt(3, l4, 0); }
  public static void addL5(FlatBufferBuilder builder, double l5) { builder.addDouble(4, l5, 0.0); }
  public static void addL6(FlatBufferBuilder builder, int l6) { builder.addInt(5, l6, 0); }
  public static void addL7(FlatBufferBuilder builder, int l7) { builder.addInt(6, l7, 0); }
  public static void addPlatlocts(FlatBufferBuilder builder, int platloctsOffset) { builder.addOffset(7, platloctsOffset, 0); }
  public static int endMtiPlatformLocation_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiPlatformLocation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTIP"); }
  public static void finishSizePrefixedMtiPlatformLocation_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTIP"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiPlatformLocation_Ingest get(int j) { return get(new MtiPlatformLocation_Ingest(), j); }
    public MtiPlatformLocation_Ingest get(MtiPlatformLocation_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

