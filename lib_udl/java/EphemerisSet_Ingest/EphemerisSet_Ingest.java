// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// EphemerisSet represents a wrapper or collection of Ephemeris 'points' and meta data indicating the specifics of the propagation of an on-orbit object. Ephemeris is typically distributed in a flat file containing details of the ephemeris generation as well as a large collection of individual points at varying time steps. EphemerisSet is analogous to this flat file.
 */
@SuppressWarnings("unused")
public final class EphemerisSet_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EphemerisSet_Ingest getRootAsEphemerisSet_Ingest(ByteBuffer _bb) { return getRootAsEphemerisSet_Ingest(_bb, new EphemerisSet_Ingest()); }
  public static EphemerisSet_Ingest getRootAsEphemerisSet_Ingest(ByteBuffer _bb, EphemerisSet_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean EphemerisSet_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "EPHE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EphemerisSet_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: EPHEMERISSET-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the primary satellite on-orbit object.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Start time/first time point of the ephemeris, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String pointStartTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pointStartTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer pointStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional start time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2018-01-01T16:10:00.123456Z
   * Constraints: No constraints specified.
   */
  public String usableStartTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer usableStartTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer usableStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * End time/last time point of the ephemeris, in ISO 8601 UTC format.
   * Example: /// Example: 2018-01-01T16:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String pointEndTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pointEndTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer pointEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Optional end time of the usable time span for the ephemeris data, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2018-01-01T20:50:00.123456Z
   * Constraints: No constraints specified.
   */
  public String usableEndTime() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer usableEndTimeAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer usableEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Ephemeris step size, in seconds.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int stepSize() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of points contained in the ephemeris.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numPoints() { int o = __offset(22); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The type/purpose of the ephemeris (e.g., CALIBRATION, LAUNCH, MNVR_PLAN, ROUTINE, SCREENING).
   * Example: /// Example: LAUNCH
   * Constraints: Minimum length = 1, Maximum length = 24
   */
  public String type() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The pedigree of the ephemeris or source data used for ephemeris generation (e.g.  GPS, SLR, RANGING, PROPAGATED, HYBRID).
   * Example: /// Example: PROPAGATED
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String pedigree() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer pedigreeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer pedigreeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The source category of the ephemeris (e.g. OWNER_OPERATOR, ANALYST, EXTERNAL).
   * Example: /// Example: ANALYST
   * Constraints: Minimum length = 1, Maximum length = 24
   */
  public String category() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer categoryAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer categoryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * ID of the State Vector used to generate the ephemeris.
   * Example: /// Example: STATEVECTOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idStateVector() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idStateVectorAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer idStateVectorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Boolean indicating whether maneuver(s) are incorporated into the ephemeris.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean hasMnvr() { int o = __offset(32); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Array of the maneuver IDs of all maneuvers incorporated in the ephemeris.
   * Example: /// Example: ['EXAMPLE_ID1', 'EXAMPLE_ID2']
   * Constraints: No constraints specified.
   */
  public String idManeuvers(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int idManeuversLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector idManeuversVector() { return idManeuversVector(new StringVector()); }
  public StringVector idManeuversVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Boolean indicating whether covariance data is provided with the ephemeris.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean hasCov() { int o = __offset(36); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating whether acceleration data is provided with the ephemeris.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean hasAccel() { int o = __offset(38); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The Central Body of the ephemeris.  Assumed to be Earth, unless otherwise indicated.
   * Example: /// Example: Earth
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String centBody() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer centBodyAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer centBodyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Integrator used in ephemeris generation (e.g. RK7(8), RK8(9), COWELL, TWO-BODY).
   * Example: /// Example: COWELL
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String integrator() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer integratorAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer integratorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Geopotential model used in ephemeris generation (e.g. EGM-96, WGS-84, WGS-72, JGM-2, GEM-T3), including mm degree zonals, nn degree/order tesserals (e.g. EGM-96 24Z,24T).
   * Example: /// Example: GEM-T3
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String geopotentialModel() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geopotentialModelAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer geopotentialModelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Drag model used in ephemeris generation (e.g. JAC70, MSIS90, NONE, etc.).
   * Example: /// Example: JAC70
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String dragModel() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dragModelAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer dragModelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Boolean indicating use of lunar/solar data in ephemeris generation.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean lunarSolar() { int o = __offset(48); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Boolean indicating use of solid earth tide data in ephemeris generation.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean solidEarthTides() { int o = __offset(50); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * First derivative of ballistic coefficient (m^2/kg-s).
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double bDot() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Model parameter value for energy dissipation rate (EDR), expressed in w/kg.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double edr() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The recommended interpolation method for the ephemeris data.
   * Example: /// Example: LINEAR
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String interpolation() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer interpolationAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer interpolationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The recommended interpolation degree for the ephemeris data.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int interpolationDegree() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Filename of the raw file used to provide the ephemeris data including filetype extension, if applicable. This file may be retrieved using the 'getFile' operation as specified in the 'EphemerisSet' OpenAPI docs.
   * Example: /// Example: Example file name
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String filename() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer filenameAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer filenameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Additional source provided comments associated with the ephemeris.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String comments() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commentsAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer commentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Notes/description of the provided ephemeris. A value of DSTOP signifies the ephemeris were generated using the last observation available.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String description() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptionAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer descriptionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: Example descriptor
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The reference frame of the cartesian orbital states. If the referenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte referenceFrame() { int o = __offset(68); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The reference frame of the covariance matrix elements. If the covReferenceFrame is null it is assumed to be J2000.
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte covReferenceFrame() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, in UTC.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(80); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The list of ephemeris states belonging to the EphemerisSet. Each ephemeris point is associated with a parent Ephemeris Set via the EphemerisSet ID (esId).
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String ephemerisList(int j) { int o = __offset(84); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int ephemerisListLength() { int o = __offset(84); return o != 0 ? __vector_len(o) : 0; }
  public StringVector ephemerisListVector() { return ephemerisListVector(new StringVector()); }
  public StringVector ephemerisListVector(StringVector obj) { int o = __offset(84); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(86); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(86); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(86); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }

  public static int createEphemerisSet_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbitOffset,
      int origObjectIdOffset,
      int pointStartTimeOffset,
      int usableStartTimeOffset,
      int pointEndTimeOffset,
      int usableEndTimeOffset,
      int stepSize,
      int numPoints,
      int typeOffset,
      int pedigreeOffset,
      int categoryOffset,
      int idStateVectorOffset,
      boolean hasMnvr,
      int idManeuversOffset,
      boolean hasCov,
      boolean hasAccel,
      int centBodyOffset,
      int integratorOffset,
      int geopotentialModelOffset,
      int dragModelOffset,
      boolean lunarSolar,
      boolean solidEarthTides,
      double bDot,
      double edr,
      int interpolationOffset,
      int interpolationDegree,
      int filenameOffset,
      int commentsOffset,
      int descriptionOffset,
      int descriptorOffset,
      byte referenceFrame,
      byte covReferenceFrame,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int satNo,
      int ephemerisListOffset,
      int tagsOffset,
      int transactionIdOffset,
      int origNetworkOffset) {
    builder.startTable(44);
    EphemerisSet_Ingest.addEdr(builder, edr);
    EphemerisSet_Ingest.addBDot(builder, bDot);
    EphemerisSet_Ingest.addOrigNetwork(builder, origNetworkOffset);
    EphemerisSet_Ingest.addTransactionId(builder, transactionIdOffset);
    EphemerisSet_Ingest.addTags(builder, tagsOffset);
    EphemerisSet_Ingest.addEphemerisList(builder, ephemerisListOffset);
    EphemerisSet_Ingest.addSatNo(builder, satNo);
    EphemerisSet_Ingest.addOrigin(builder, originOffset);
    EphemerisSet_Ingest.addSource(builder, sourceOffset);
    EphemerisSet_Ingest.addCreatedBy(builder, createdByOffset);
    EphemerisSet_Ingest.addCreatedAt(builder, createdAtOffset);
    EphemerisSet_Ingest.addDescriptor(builder, descriptorOffset);
    EphemerisSet_Ingest.addDescription(builder, descriptionOffset);
    EphemerisSet_Ingest.addComments(builder, commentsOffset);
    EphemerisSet_Ingest.addFilename(builder, filenameOffset);
    EphemerisSet_Ingest.addInterpolationDegree(builder, interpolationDegree);
    EphemerisSet_Ingest.addInterpolation(builder, interpolationOffset);
    EphemerisSet_Ingest.addDragModel(builder, dragModelOffset);
    EphemerisSet_Ingest.addGeopotentialModel(builder, geopotentialModelOffset);
    EphemerisSet_Ingest.addIntegrator(builder, integratorOffset);
    EphemerisSet_Ingest.addCentBody(builder, centBodyOffset);
    EphemerisSet_Ingest.addIdManeuvers(builder, idManeuversOffset);
    EphemerisSet_Ingest.addIdStateVector(builder, idStateVectorOffset);
    EphemerisSet_Ingest.addCategory(builder, categoryOffset);
    EphemerisSet_Ingest.addPedigree(builder, pedigreeOffset);
    EphemerisSet_Ingest.addType(builder, typeOffset);
    EphemerisSet_Ingest.addNumPoints(builder, numPoints);
    EphemerisSet_Ingest.addStepSize(builder, stepSize);
    EphemerisSet_Ingest.addUsableEndTime(builder, usableEndTimeOffset);
    EphemerisSet_Ingest.addPointEndTime(builder, pointEndTimeOffset);
    EphemerisSet_Ingest.addUsableStartTime(builder, usableStartTimeOffset);
    EphemerisSet_Ingest.addPointStartTime(builder, pointStartTimeOffset);
    EphemerisSet_Ingest.addOrigObjectId(builder, origObjectIdOffset);
    EphemerisSet_Ingest.addIdOnOrbit(builder, idOnOrbitOffset);
    EphemerisSet_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    EphemerisSet_Ingest.addId(builder, idOffset);
    EphemerisSet_Ingest.addDataMode(builder, dataMode);
    EphemerisSet_Ingest.addCovReferenceFrame(builder, covReferenceFrame);
    EphemerisSet_Ingest.addReferenceFrame(builder, referenceFrame);
    EphemerisSet_Ingest.addSolidEarthTides(builder, solidEarthTides);
    EphemerisSet_Ingest.addLunarSolar(builder, lunarSolar);
    EphemerisSet_Ingest.addHasAccel(builder, hasAccel);
    EphemerisSet_Ingest.addHasCov(builder, hasCov);
    EphemerisSet_Ingest.addHasMnvr(builder, hasMnvr);
    return EphemerisSet_Ingest.endEphemerisSet_Ingest(builder);
  }

  public static void startEphemerisSet_Ingest(FlatBufferBuilder builder) { builder.startTable(44); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(2, idOnOrbitOffset, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(3, origObjectIdOffset, 0); }
  public static void addPointStartTime(FlatBufferBuilder builder, int pointStartTimeOffset) { builder.addOffset(4, pointStartTimeOffset, 0); }
  public static void addUsableStartTime(FlatBufferBuilder builder, int usableStartTimeOffset) { builder.addOffset(5, usableStartTimeOffset, 0); }
  public static void addPointEndTime(FlatBufferBuilder builder, int pointEndTimeOffset) { builder.addOffset(6, pointEndTimeOffset, 0); }
  public static void addUsableEndTime(FlatBufferBuilder builder, int usableEndTimeOffset) { builder.addOffset(7, usableEndTimeOffset, 0); }
  public static void addStepSize(FlatBufferBuilder builder, int stepSize) { builder.addInt(8, stepSize, 0); }
  public static void addNumPoints(FlatBufferBuilder builder, int numPoints) { builder.addInt(9, numPoints, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(10, typeOffset, 0); }
  public static void addPedigree(FlatBufferBuilder builder, int pedigreeOffset) { builder.addOffset(11, pedigreeOffset, 0); }
  public static void addCategory(FlatBufferBuilder builder, int categoryOffset) { builder.addOffset(12, categoryOffset, 0); }
  public static void addIdStateVector(FlatBufferBuilder builder, int idStateVectorOffset) { builder.addOffset(13, idStateVectorOffset, 0); }
  public static void addHasMnvr(FlatBufferBuilder builder, boolean hasMnvr) { builder.addBoolean(14, hasMnvr, false); }
  public static void addIdManeuvers(FlatBufferBuilder builder, int idManeuversOffset) { builder.addOffset(15, idManeuversOffset, 0); }
  public static int createIdManeuversVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startIdManeuversVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHasCov(FlatBufferBuilder builder, boolean hasCov) { builder.addBoolean(16, hasCov, false); }
  public static void addHasAccel(FlatBufferBuilder builder, boolean hasAccel) { builder.addBoolean(17, hasAccel, false); }
  public static void addCentBody(FlatBufferBuilder builder, int centBodyOffset) { builder.addOffset(18, centBodyOffset, 0); }
  public static void addIntegrator(FlatBufferBuilder builder, int integratorOffset) { builder.addOffset(19, integratorOffset, 0); }
  public static void addGeopotentialModel(FlatBufferBuilder builder, int geopotentialModelOffset) { builder.addOffset(20, geopotentialModelOffset, 0); }
  public static void addDragModel(FlatBufferBuilder builder, int dragModelOffset) { builder.addOffset(21, dragModelOffset, 0); }
  public static void addLunarSolar(FlatBufferBuilder builder, boolean lunarSolar) { builder.addBoolean(22, lunarSolar, false); }
  public static void addSolidEarthTides(FlatBufferBuilder builder, boolean solidEarthTides) { builder.addBoolean(23, solidEarthTides, false); }
  public static void addBDot(FlatBufferBuilder builder, double bDot) { builder.addDouble(24, bDot, 0.0); }
  public static void addEdr(FlatBufferBuilder builder, double edr) { builder.addDouble(25, edr, 0.0); }
  public static void addInterpolation(FlatBufferBuilder builder, int interpolationOffset) { builder.addOffset(26, interpolationOffset, 0); }
  public static void addInterpolationDegree(FlatBufferBuilder builder, int interpolationDegree) { builder.addInt(27, interpolationDegree, 0); }
  public static void addFilename(FlatBufferBuilder builder, int filenameOffset) { builder.addOffset(28, filenameOffset, 0); }
  public static void addComments(FlatBufferBuilder builder, int commentsOffset) { builder.addOffset(29, commentsOffset, 0); }
  public static void addDescription(FlatBufferBuilder builder, int descriptionOffset) { builder.addOffset(30, descriptionOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(31, descriptorOffset, 0); }
  public static void addReferenceFrame(FlatBufferBuilder builder, byte referenceFrame) { builder.addByte(32, referenceFrame, 0); }
  public static void addCovReferenceFrame(FlatBufferBuilder builder, byte covReferenceFrame) { builder.addByte(33, covReferenceFrame, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(34, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(35, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(36, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(37, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(38, dataMode, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(39, satNo, 0); }
  public static void addEphemerisList(FlatBufferBuilder builder, int ephemerisListOffset) { builder.addOffset(40, ephemerisListOffset, 0); }
  public static int createEphemerisListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEphemerisListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(41, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(42, transactionIdOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(43, origNetworkOffset, 0); }
  public static int endEphemerisSet_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEphemerisSet_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "EPHE"); }
  public static void finishSizePrefixedEphemerisSet_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "EPHE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EphemerisSet_Ingest get(int j) { return get(new EphemerisSet_Ingest(), j); }
    public EphemerisSet_Ingest get(EphemerisSet_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

