// automatically generated by the FlatBuffers compiler, do not modify

package EvacVitalSignData_Abridged;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * Information obtained for vital signs.
 */
@SuppressWarnings("unused")
public final class EvacVitalSignData_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static EvacVitalSignData_Abridged getRootAsEvacVitalSignData_Abridged(ByteBuffer _bb) { return getRootAsEvacVitalSignData_Abridged(_bb, new EvacVitalSignData_Abridged()); }
  public static EvacVitalSignData_Abridged getRootAsEvacVitalSignData_Abridged(ByteBuffer _bb, EvacVitalSignData_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EvacVitalSignData_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
   * Example: HEART RATE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String vitalSign() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer vitalSignAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer vitalSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
   * Example: 120
   * Constraints: No constraints specified.
   */
  public double vitalSign1() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
   * Example: 80
   * Constraints: No constraints specified.
   */
  public double vitalSign2() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Medical confidence factor.
   * Example: 1
   * Constraints: No constraints specified.
   */
  public int medConfFactor() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
   * Example: 2021-10-15T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String time() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer timeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }

  public static int createEvacVitalSignData_Abridged(FlatBufferBuilder builder,
      int vitalSignOffset,
      double vitalSign1,
      double vitalSign2,
      int medConfFactor,
      int timeOffset) {
    builder.startTable(5);
    EvacVitalSignData_Abridged.addVitalSign2(builder, vitalSign2);
    EvacVitalSignData_Abridged.addVitalSign1(builder, vitalSign1);
    EvacVitalSignData_Abridged.addTime(builder, timeOffset);
    EvacVitalSignData_Abridged.addMedConfFactor(builder, medConfFactor);
    EvacVitalSignData_Abridged.addVitalSign(builder, vitalSignOffset);
    return EvacVitalSignData_Abridged.endEvacVitalSignData_Abridged(builder);
  }

  public static void startEvacVitalSignData_Abridged(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addVitalSign(FlatBufferBuilder builder, int vitalSignOffset) { builder.addOffset(0, vitalSignOffset, 0); }
  public static void addVitalSign1(FlatBufferBuilder builder, double vitalSign1) { builder.addDouble(1, vitalSign1, 0.0); }
  public static void addVitalSign2(FlatBufferBuilder builder, double vitalSign2) { builder.addDouble(2, vitalSign2, 0.0); }
  public static void addMedConfFactor(FlatBufferBuilder builder, int medConfFactor) { builder.addInt(3, medConfFactor, 0); }
  public static void addTime(FlatBufferBuilder builder, int timeOffset) { builder.addOffset(4, timeOffset, 0); }
  public static int endEvacVitalSignData_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EvacVitalSignData_Abridged get(int j) { return get(new EvacVitalSignData_Abridged(), j); }
    public EvacVitalSignData_Abridged get(EvacVitalSignData_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

