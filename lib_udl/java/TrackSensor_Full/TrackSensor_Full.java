// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Schema for Track Sensor data.
 */
@SuppressWarnings("unused")
public final class TrackSensor_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static TrackSensor_Full getRootAsTrackSensor_Full(ByteBuffer _bb) { return getRootAsTrackSensor_Full(_bb, new TrackSensor_Full()); }
  public static TrackSensor_Full getRootAsTrackSensor_Full(ByteBuffer _bb, TrackSensor_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean TrackSensor_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "TRAC"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrackSensor_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * The track object range from the observing sensor, in kilometers.
   * Example: /// Example: 4023.95
   * Constraints: No constraints specified.
   */
  public double range() { int o = __offset(4); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The observing sensor azimuth angle, in degrees and topocentric frame.
   * Example: /// Example: 90
   * Constraints: No constraints specified.
   */
  public double az() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
   * Example: /// Example: 1234
   * Constraints: No constraints specified.
   */
  public int sensorNumber() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Unique name of this sensor.
   * Example: /// Example: SENSOR_NAME
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String sensorName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sensorNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer sensorNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The mission number which produced this track observation.
   * Example: /// Example: Example Mission
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String missionNumber() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionNumberAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer missionNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Minimum range measurement capability of the sensor, in kilometers.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double minRangeLimit() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The field of view (FOV) type (Butterfly, Cone Angular, Cone Distance, Horizon to Horizon, Unknown) employed by the sensor observing this object.
   * Example: /// Example: UNKNOWN
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public byte sensorFovtype() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createTrackSensor_Full(FlatBufferBuilder builder,
      double range,
      double az,
      int sensorNumber,
      int sensorNameOffset,
      int missionNumberOffset,
      double minRangeLimit,
      byte sensorFovtype) {
    builder.startTable(7);
    TrackSensor_Full.addMinRangeLimit(builder, minRangeLimit);
    TrackSensor_Full.addAz(builder, az);
    TrackSensor_Full.addRange(builder, range);
    TrackSensor_Full.addMissionNumber(builder, missionNumberOffset);
    TrackSensor_Full.addSensorName(builder, sensorNameOffset);
    TrackSensor_Full.addSensorNumber(builder, sensorNumber);
    TrackSensor_Full.addSensorFovtype(builder, sensorFovtype);
    return TrackSensor_Full.endTrackSensor_Full(builder);
  }

  public static void startTrackSensor_Full(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addRange(FlatBufferBuilder builder, double range) { builder.addDouble(0, range, 0.0); }
  public static void addAz(FlatBufferBuilder builder, double az) { builder.addDouble(1, az, 0.0); }
  public static void addSensorNumber(FlatBufferBuilder builder, int sensorNumber) { builder.addInt(2, sensorNumber, 0); }
  public static void addSensorName(FlatBufferBuilder builder, int sensorNameOffset) { builder.addOffset(3, sensorNameOffset, 0); }
  public static void addMissionNumber(FlatBufferBuilder builder, int missionNumberOffset) { builder.addOffset(4, missionNumberOffset, 0); }
  public static void addMinRangeLimit(FlatBufferBuilder builder, double minRangeLimit) { builder.addDouble(5, minRangeLimit, 0.0); }
  public static void addSensorFovtype(FlatBufferBuilder builder, byte sensorFovtype) { builder.addByte(6, sensorFovtype, 0); }
  public static int endTrackSensor_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishTrackSensor_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "TRAC"); }
  public static void finishSizePrefixedTrackSensor_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "TRAC"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrackSensor_Full get(int j) { return get(new TrackSensor_Full(), j); }
    public TrackSensor_Full get(TrackSensor_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

