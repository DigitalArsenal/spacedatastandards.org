// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Beta Version Airspace Control Order: Contains airspace coordination information and instructions that have been issued by an airspace control authority.
 */
@SuppressWarnings("unused")
public final class AirspaceControlOrder_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirspaceControlOrder_Abridged getRootAsAirspaceControlOrder_Abridged(ByteBuffer _bb) { return getRootAsAirspaceControlOrder_Abridged(_bb, new AirspaceControlOrder_Abridged()); }
  public static AirspaceControlOrder_Abridged getRootAsAirspaceControlOrder_Abridged(ByteBuffer _bb, AirspaceControlOrder_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirspaceControlOrder_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirspaceControlOrder_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
   * Example: /// Example: EXAMPLE URI
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String rawFileUri() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Specifies the code name or nickname assigned to a joint exercise or plan to designate message traffic.
   * Example: /// Example: DESERT WIND
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String opExName() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opExNameAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer opExNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The originator of this reference.
   * Example: /// Example: USCENTCOM
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String originator() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originatorAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer originatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The start of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String startTime() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer startTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The end of the effective time period of this airspace control order, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-08T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String stopTime() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stopTimeAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer stopTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * A qualifier for the end of the effective time period of this airspace control order, such as AFTER, ASOF, NLT, etc. Used with field stopTime to indicate a relative time.
   * Example: /// Example: AFTER
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String stopQualifier() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stopQualifierAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer stopQualifierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Supplementary name that can be used to further identify exercise nicknames, or to provide the primary nickname of the option or the alternative of an operational plan.
   * Example: /// Example: CONTROL
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String opExInfo() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opExInfoAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer opExInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The secondary supplementary nickname of the option or the alternative of the operational plan or order.
   * Example: /// Example: ORANGE
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String opExInfoAlt() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer opExInfoAltAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer opExInfoAltInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The official identifier of the military establishment responsible for the operation plan and the identification number assigned to this plan.
   * Example: /// Example: SACEUR 106
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String planOrigNum() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer planOrigNumAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer planOrigNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The unique message identifier sequentially assigned by the originator.
   * Example: /// Example: 1201003
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String serialNum() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer serialNumAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer serialNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The month in which the message originated.
   * Example: /// Example: OCT
   * Constraints: Minimum length = 0, Maximum length = 12
   */
  public String month() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer monthAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer monthInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The qualifier which caveats the message status.
   * Example: /// Example: CHG
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String qualifier() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer qualifierAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer qualifierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The serial number associated with the message qualifier.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int qualSn() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Name of the area of the command for which the ACO is valid.
   * Example: /// Example: FORT BRAGG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String areaOfValidity() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer areaOfValidityAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer areaOfValidityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The serial number of this airspace control order.
   * Example: /// Example: 27B
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String acoSerialNum() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer acoSerialNumAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer acoSerialNumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Specifies the geodetic datum by which the spatial coordinates of the controlled airspace are calculated.
   * Example: /// Example: EUR-T
   * Constraints: Minimum length = 0, Maximum length = 8
   */
  public String geoDatum() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geoDatumAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer geoDatumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Free text information expressed in natural language.
   * Example: /// Example: CHOKE POINTS
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String acoComments() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer acoCommentsAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer acoCommentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The airspaceControlReferences set provides both USMTF and non-USMTF references for this airspace control order.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String airspaceControlOrderReferences(int j) { int o = __offset(42); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int airspaceControlOrderReferencesLength() { int o = __offset(42); return o != 0 ? __vector_len(o) : 0; }
  public StringVector airspaceControlOrderReferencesVector() { return airspaceControlOrderReferencesVector(new StringVector()); }
  public StringVector airspaceControlOrderReferencesVector(StringVector obj) { int o = __offset(42); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String airspaceControlMeansStatus(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int airspaceControlMeansStatusLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector airspaceControlMeansStatusVector() { return airspaceControlMeansStatusVector(new StringVector()); }
  public StringVector airspaceControlMeansStatusVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of unique link 16 identifier that will be assigned to a future airspace control means.
   * Example: /// Example: ['A2467', 'A3466', 'AA232']
   * Constraints: No constraints specified.
   */
  public String undLnkTrk(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int undLnkTrkLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector undLnkTrkVector() { return undLnkTrkVector(new StringVector()); }
  public StringVector undLnkTrkVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Markings defining the source material or the original classification authority for the ACO message.
   * Example: /// Example: ORIG:USJFCOM
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String classSource() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classSourceAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer classSourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Mandatory if classSource uses the "IORIG" designator. Must be a REASON FOR CLASSIFICATION code.
   * Example: /// Example: ['15C', '10C']
   * Constraints: No constraints specified.
   */
  public String classReason(int j) { int o = __offset(50); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int classReasonLength() { int o = __offset(50); return o != 0 ? __vector_len(o) : 0; }
  public StringVector classReasonVector() { return classReasonVector(new StringVector()); }
  public StringVector classReasonVector(StringVector obj) { int o = __offset(50); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Markings providing the literal guidance or date for downgrading or declassifying the airspace control order. Manditory if declassExemptionCode is nul.
   * Example: /// Example: ['NST:AT EXERCISE ENDEX', 'DATE:25NOV1997']
   * Constraints: No constraints specified.
   */
  public String downgradeInsDate(int j) { int o = __offset(52); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int downgradeInsDateLength() { int o = __offset(52); return o != 0 ? __vector_len(o) : 0; }
  public StringVector downgradeInsDateVector() { return downgradeInsDateVector(new StringVector()); }
  public StringVector downgradeInsDateVector(StringVector obj) { int o = __offset(52); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Coded entries that provide justification for exemption from automatic downgrading or declassification of the airspace control order.
   * Example: /// Example: ['X1', 'X2']
   * Constraints: No constraints specified.
   */
  public String declassExemptionCode(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int declassExemptionCodeLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector declassExemptionCodeVector() { return declassExemptionCodeVector(new StringVector()); }
  public StringVector declassExemptionCodeVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(68); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirspaceControlOrder_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int rawFileUriOffset,
      int opExNameOffset,
      int originatorOffset,
      int startTimeOffset,
      int stopTimeOffset,
      int stopQualifierOffset,
      int opExInfoOffset,
      int opExInfoAltOffset,
      int planOrigNumOffset,
      int serialNumOffset,
      int monthOffset,
      int qualifierOffset,
      int qualSn,
      int areaOfValidityOffset,
      int acoSerialNumOffset,
      int geoDatumOffset,
      int acoCommentsOffset,
      int airspaceControlOrderReferencesOffset,
      int airspaceControlMeansStatusOffset,
      int undLnkTrkOffset,
      int classSourceOffset,
      int classReasonOffset,
      int downgradeInsDateOffset,
      int declassExemptionCodeOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(33);
    AirspaceControlOrder_Abridged.addOrigNetwork(builder, origNetworkOffset);
    AirspaceControlOrder_Abridged.addOrigin(builder, originOffset);
    AirspaceControlOrder_Abridged.addSource(builder, sourceOffset);
    AirspaceControlOrder_Abridged.addSourceDl(builder, sourceDlOffset);
    AirspaceControlOrder_Abridged.addCreatedBy(builder, createdByOffset);
    AirspaceControlOrder_Abridged.addCreatedAt(builder, createdAtOffset);
    AirspaceControlOrder_Abridged.addDeclassExemptionCode(builder, declassExemptionCodeOffset);
    AirspaceControlOrder_Abridged.addDowngradeInsDate(builder, downgradeInsDateOffset);
    AirspaceControlOrder_Abridged.addClassReason(builder, classReasonOffset);
    AirspaceControlOrder_Abridged.addClassSource(builder, classSourceOffset);
    AirspaceControlOrder_Abridged.addUndLnkTrk(builder, undLnkTrkOffset);
    AirspaceControlOrder_Abridged.addAirspaceControlMeansStatus(builder, airspaceControlMeansStatusOffset);
    AirspaceControlOrder_Abridged.addAirspaceControlOrderReferences(builder, airspaceControlOrderReferencesOffset);
    AirspaceControlOrder_Abridged.addAcoComments(builder, acoCommentsOffset);
    AirspaceControlOrder_Abridged.addGeoDatum(builder, geoDatumOffset);
    AirspaceControlOrder_Abridged.addAcoSerialNum(builder, acoSerialNumOffset);
    AirspaceControlOrder_Abridged.addAreaOfValidity(builder, areaOfValidityOffset);
    AirspaceControlOrder_Abridged.addQualSn(builder, qualSn);
    AirspaceControlOrder_Abridged.addQualifier(builder, qualifierOffset);
    AirspaceControlOrder_Abridged.addMonth(builder, monthOffset);
    AirspaceControlOrder_Abridged.addSerialNum(builder, serialNumOffset);
    AirspaceControlOrder_Abridged.addPlanOrigNum(builder, planOrigNumOffset);
    AirspaceControlOrder_Abridged.addOpExInfoAlt(builder, opExInfoAltOffset);
    AirspaceControlOrder_Abridged.addOpExInfo(builder, opExInfoOffset);
    AirspaceControlOrder_Abridged.addStopQualifier(builder, stopQualifierOffset);
    AirspaceControlOrder_Abridged.addStopTime(builder, stopTimeOffset);
    AirspaceControlOrder_Abridged.addStartTime(builder, startTimeOffset);
    AirspaceControlOrder_Abridged.addOriginator(builder, originatorOffset);
    AirspaceControlOrder_Abridged.addOpExName(builder, opExNameOffset);
    AirspaceControlOrder_Abridged.addRawFileUri(builder, rawFileUriOffset);
    AirspaceControlOrder_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    AirspaceControlOrder_Abridged.addId(builder, idOffset);
    AirspaceControlOrder_Abridged.addDataMode(builder, dataMode);
    return AirspaceControlOrder_Abridged.endAirspaceControlOrder_Abridged(builder);
  }

  public static void startAirspaceControlOrder_Abridged(FlatBufferBuilder builder) { builder.startTable(33); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(2, rawFileUriOffset, 0); }
  public static void addOpExName(FlatBufferBuilder builder, int opExNameOffset) { builder.addOffset(3, opExNameOffset, 0); }
  public static void addOriginator(FlatBufferBuilder builder, int originatorOffset) { builder.addOffset(4, originatorOffset, 0); }
  public static void addStartTime(FlatBufferBuilder builder, int startTimeOffset) { builder.addOffset(5, startTimeOffset, 0); }
  public static void addStopTime(FlatBufferBuilder builder, int stopTimeOffset) { builder.addOffset(6, stopTimeOffset, 0); }
  public static void addStopQualifier(FlatBufferBuilder builder, int stopQualifierOffset) { builder.addOffset(7, stopQualifierOffset, 0); }
  public static void addOpExInfo(FlatBufferBuilder builder, int opExInfoOffset) { builder.addOffset(8, opExInfoOffset, 0); }
  public static void addOpExInfoAlt(FlatBufferBuilder builder, int opExInfoAltOffset) { builder.addOffset(9, opExInfoAltOffset, 0); }
  public static void addPlanOrigNum(FlatBufferBuilder builder, int planOrigNumOffset) { builder.addOffset(10, planOrigNumOffset, 0); }
  public static void addSerialNum(FlatBufferBuilder builder, int serialNumOffset) { builder.addOffset(11, serialNumOffset, 0); }
  public static void addMonth(FlatBufferBuilder builder, int monthOffset) { builder.addOffset(12, monthOffset, 0); }
  public static void addQualifier(FlatBufferBuilder builder, int qualifierOffset) { builder.addOffset(13, qualifierOffset, 0); }
  public static void addQualSn(FlatBufferBuilder builder, int qualSn) { builder.addInt(14, qualSn, 0); }
  public static void addAreaOfValidity(FlatBufferBuilder builder, int areaOfValidityOffset) { builder.addOffset(15, areaOfValidityOffset, 0); }
  public static void addAcoSerialNum(FlatBufferBuilder builder, int acoSerialNumOffset) { builder.addOffset(16, acoSerialNumOffset, 0); }
  public static void addGeoDatum(FlatBufferBuilder builder, int geoDatumOffset) { builder.addOffset(17, geoDatumOffset, 0); }
  public static void addAcoComments(FlatBufferBuilder builder, int acoCommentsOffset) { builder.addOffset(18, acoCommentsOffset, 0); }
  public static void addAirspaceControlOrderReferences(FlatBufferBuilder builder, int airspaceControlOrderReferencesOffset) { builder.addOffset(19, airspaceControlOrderReferencesOffset, 0); }
  public static int createAirspaceControlOrderReferencesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAirspaceControlOrderReferencesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAirspaceControlMeansStatus(FlatBufferBuilder builder, int airspaceControlMeansStatusOffset) { builder.addOffset(20, airspaceControlMeansStatusOffset, 0); }
  public static int createAirspaceControlMeansStatusVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAirspaceControlMeansStatusVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUndLnkTrk(FlatBufferBuilder builder, int undLnkTrkOffset) { builder.addOffset(21, undLnkTrkOffset, 0); }
  public static int createUndLnkTrkVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startUndLnkTrkVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addClassSource(FlatBufferBuilder builder, int classSourceOffset) { builder.addOffset(22, classSourceOffset, 0); }
  public static void addClassReason(FlatBufferBuilder builder, int classReasonOffset) { builder.addOffset(23, classReasonOffset, 0); }
  public static int createClassReasonVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startClassReasonVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDowngradeInsDate(FlatBufferBuilder builder, int downgradeInsDateOffset) { builder.addOffset(24, downgradeInsDateOffset, 0); }
  public static int createDowngradeInsDateVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDowngradeInsDateVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDeclassExemptionCode(FlatBufferBuilder builder, int declassExemptionCodeOffset) { builder.addOffset(25, declassExemptionCodeOffset, 0); }
  public static int createDeclassExemptionCodeVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDeclassExemptionCodeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(26, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(27, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(28, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(29, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(30, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(31, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(32, dataMode, 0); }
  public static int endAirspaceControlOrder_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirspaceControlOrder_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRS"); }
  public static void finishSizePrefixedAirspaceControlOrder_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirspaceControlOrder_Abridged get(int j) { return get(new AirspaceControlOrder_Abridged(), j); }
    public AirspaceControlOrder_Abridged get(AirspaceControlOrder_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

