// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Hazard contains information concerning the exposure of a geographic area to a Chemical, Biological, Radiological, or Nuclear (CBRN) contaminant. The Hazard schema includes the detection time and type of contamination as well as optional information regarding specific material properties, the extent of contamination, and identification of affected regions.
 */
@SuppressWarnings("unused")
public final class Hazard_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Hazard_Abridged getRootAsHazard_Abridged(ByteBuffer _bb) { return getRootAsHazard_Abridged(_bb, new Hazard_Abridged()); }
  public static Hazard_Abridged getRootAsHazard_Abridged(ByteBuffer _bb, Hazard_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Hazard_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "HAZA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Hazard_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: HAZARD-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The type of hazard (Chemical, Biological, Radiological, Nuclear) detect associated with this record.
   * Example: /// Example: Chemical
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String detectType() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer detectTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer detectTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The detect time, in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2022-03-07T14:51:39.653Z
   * Constraints: No constraints specified.
   */
  public String detectTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer detectTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer detectTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Flag indicating whether this detection is harmful to humans.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean harmful() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Array of the specific alarms associated with this detection. The alarms and alarmValues arrays must contain the same number of elements.
   * Example: /// Example: ['Alarm1', 'Alarm2']
   * Constraints: No constraints specified.
   */
  public String alarms(int j) { int o = __offset(14); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int alarmsLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public StringVector alarmsVector() { return alarmsVector(new StringVector()); }
  public StringVector alarmsVector(StringVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the values that correspond to each of the alarms contained in alarms. The alarms and alarmValues arrays must contain the same number of elements.
   * Example: /// Example: [2.7, 2.9]
   * Constraints: No constraints specified.
   */
  public String alarmValues(int j) { int o = __offset(16); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int alarmValuesLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public StringVector alarmValuesVector() { return alarmValuesVector(new StringVector()); }
  public StringVector alarmValuesVector(StringVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the specific readings associated with this detection. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
   * Example: /// Example: ['Rad1', 'Rad2']
   * Constraints: No constraints specified.
   */
  public String readings(int j) { int o = __offset(18); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int readingsLength() { int o = __offset(18); return o != 0 ? __vector_len(o) : 0; }
  public StringVector readingsVector() { return readingsVector(new StringVector()); }
  public StringVector readingsVector(StringVector obj) { int o = __offset(18); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the units that correspond to each of the readingValues. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
   * Example: /// Example: ['Gray', 'Gray']
   * Constraints: No constraints specified.
   */
  public String readingUnits(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int readingUnitsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector readingUnitsVector() { return readingUnitsVector(new StringVector()); }
  public StringVector readingUnitsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the values that correspond to each of the readings contained in readings. The readings, readingUnits, and readingValues arrays must contain the same number of elements.
   * Example: /// Example: [107.2, 124.1]
   * Constraints: No constraints specified.
   */
  public String readingValues(int j) { int o = __offset(22); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int readingValuesLength() { int o = __offset(22); return o != 0 ? __vector_len(o) : 0; }
  public StringVector readingValuesVector() { return readingValuesVector(new StringVector()); }
  public StringVector readingValuesVector(StringVector obj) { int o = __offset(22); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The specific material type (MT) or MT Code involved in this detection, when applicable. The material type is generally associated with radiological and/or nuclear detections. For further information, reference Nuclear Materials Management and Safeguards System (NMMSS) Users Guide Rev. 2.1.
   * Example: /// Example: 21
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String matType() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer matTypeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer matTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The specific Material Class for the material associated with this detect. The material class is generally associated with chemical and biological detections.
   * Example: /// Example: Nerve Agent
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String matClass() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer matClassAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer matClassInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The material common name associated with this detection.
   * Example: /// Example: VX
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String matName() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer matNameAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer matNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The Radiological Category (1 - 5) which applies to the material associated with this detection, according to the following definitions: 
   * Category 1: If not safely or securely managed, would be likely to cause permanent injury to a person who handled them or was otherwise in contact with them for more than a few minutes. It would probably be fatal to be close to this amount of unshielded material for a period of a few minutes to an hour. 
   * Category 2: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for a short time (minutes to hours). It could possibly be fatal to be close to this amount of unshielded radioactive material for a period of hours to days. 
   * Category 3: If not safely or securely managed, could cause permanent injury to a person who handled them or was otherwise in contact with them for hours. It could possibly - although it is unlikely to be - fatal to be close to this amount of unshielded radioactive material for a period of days to weeks. 
   * Category 4: If not safely managed or securely protected, could possibly cause temporary injury to someone who handled them or was otherwise in contact with or close to them for a period of many weeks, though this is unlikely. It is very unlikely anyone would be permanently injured by this amount of radioactive material. 
   * Category 5: Cannot cause permanent injury. This category applies to x-ray fluorescence devices and electron capture devices.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int matCat() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The CAS Registry Number, also referred to as CAS Number or CAS RN, associated with the this detection. The CAS Number is a unique numerical identifier assigned by the Chemical Abstracts Service (CAS), to every chemical substance described in the open scientific literature. It includes organic and inorganic compounds, minerals, isotopes, alloys, mixtures, and nonstructurable materials (UVCBs, substances of unknown or variable composition, complex reaction products, or biological origin). For further information, reference https://www.cas.org/cas-data/cas-registry.
   * Example: /// Example: 64-17-5
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String casRn() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer casRnAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer casRnInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Measure of the concentration of the material associated with this detection, in parts per million (units of contaminant mass per million parts of total mass).
   * Example: /// Example: 27129
   * Constraints: No constraints specified.
   */
  public int ppm() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Measure of density of the material associated with this detection, in kg/m^3.
   * Example: /// Example: 18900.2
   * Constraints: No constraints specified.
   */
  public double density() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Measure of radioactive concentration of the material associated with this detection, in becquerels/m^3. One becquerel (Bq) is equal to one nuclear decay per second.
   * Example: /// Example: 1.31
   * Constraints: No constraints specified.
   */
  public double radCtrn() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Chemical Agent Monitor (CAM) G-type agent measurement, in number of display bars. In G-mode, CAMs monitor for G-series nerve agents.
   * Example: /// Example: 2.5
   * Constraints: No constraints specified.
   */
  public double gBar() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Chemical Agent Monitor (CAM) H-type agent measurement, in number of display bars. In H-mode, CAMs monitor for blister agents.
   * Example: /// Example: 3.1
   * Constraints: No constraints specified.
   */
  public double hBar() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Atomic Number of the material associated with this detection.
   * Example: /// Example: 92
   * Constraints: No constraints specified.
   */
  public int z() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The (rounded) Mass Number of the material associated with this detection. The rounded value is the mass number of the most abundant isotope of the element.
   * Example: /// Example: 238
   * Constraints: No constraints specified.
   */
  public int a() { int o = __offset(46); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The specific bottle ID associated with this detection.
   * Example: /// Example: 6264
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String bottleId() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bottleIdAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer bottleIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The applicable channel involved in this biological material detection (e.g. Digestive, Eyes, Respiratory, Skin, etc.) .
   * Example: /// Example: Skin
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String channel() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer channelAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer channelInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * The known or projected hazard duration, in seconds, associated with this material detection.
   * Example: /// Example: 14400
   * Constraints: No constraints specified.
   */
  public int duration() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The radioactivity measurement of the material associated with this detection, in becquerels (Bq). One becquerel (Bq) is equal to one nuclear decay per second.
   * Example: /// Example: 120.1
   * Constraints: No constraints specified.
   */
  public double activity() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The deposition measurement of the contaminant to surface area, in kg/m^2.
   * Example: /// Example: 1.084
   * Constraints: No constraints specified.
   */
  public double dep() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The deposition concentration of the contaminant to surface area, in becquerels/m^2.
   * Example: /// Example: 86.1
   * Constraints: No constraints specified.
   */
  public double depCtrn() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Ratio of the chemical substance mass to the total mass of the mixture.
   * Example: /// Example: 0.029
   * Constraints: No constraints specified.
   */
  public double massFrac() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The dose associated with this detection, in gray. Dose is the measure of the energy deposited in matter by ionizing radiation per unit mass. One gray is defined as one Joule of energy absorbed per kilogram of matter.
   * Example: /// Example: 1.12
   * Constraints: No constraints specified.
   */
  public double dose() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The concentration time, in (kg/sec)/m^3, associated with this material detection.
   * Example: /// Example: 1.077
   * Constraints: No constraints specified.
   */
  public double ctrnTime() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The dose rate associated with this detection, in gray/sec. One gray is defined as one Joule of energy absorbed per kilogram of matter.
   * Example: /// Example: 1.0000001865
   * Constraints: No constraints specified.
   */
  public double doseRate() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * ID of the Point of Interest (POI) record related to this hazard record.
   * Example: /// Example: POI-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idPoi() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idPoiAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer idPoiInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * ID of the Track record related to this hazard record.
   * Example: /// Example: TRACK-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idTrack() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idTrackAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer idTrackInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(82); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createHazard_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int detectTypeOffset,
      int detectTimeOffset,
      boolean harmful,
      int alarmsOffset,
      int alarmValuesOffset,
      int readingsOffset,
      int readingUnitsOffset,
      int readingValuesOffset,
      int matTypeOffset,
      int matClassOffset,
      int matNameOffset,
      int matCat,
      int casRnOffset,
      int ppm,
      double density,
      double radCtrn,
      double gBar,
      double hBar,
      int z,
      int a,
      int bottleIdOffset,
      int channelOffset,
      int duration,
      double activity,
      double dep,
      double depCtrn,
      double massFrac,
      double dose,
      double ctrnTime,
      double doseRate,
      int idPoiOffset,
      int idTrackOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(40);
    Hazard_Abridged.addDoseRate(builder, doseRate);
    Hazard_Abridged.addCtrnTime(builder, ctrnTime);
    Hazard_Abridged.addDose(builder, dose);
    Hazard_Abridged.addMassFrac(builder, massFrac);
    Hazard_Abridged.addDepCtrn(builder, depCtrn);
    Hazard_Abridged.addDep(builder, dep);
    Hazard_Abridged.addActivity(builder, activity);
    Hazard_Abridged.addHBar(builder, hBar);
    Hazard_Abridged.addGBar(builder, gBar);
    Hazard_Abridged.addRadCtrn(builder, radCtrn);
    Hazard_Abridged.addDensity(builder, density);
    Hazard_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Hazard_Abridged.addOrigin(builder, originOffset);
    Hazard_Abridged.addSource(builder, sourceOffset);
    Hazard_Abridged.addCreatedBy(builder, createdByOffset);
    Hazard_Abridged.addCreatedAt(builder, createdAtOffset);
    Hazard_Abridged.addIdTrack(builder, idTrackOffset);
    Hazard_Abridged.addIdPoi(builder, idPoiOffset);
    Hazard_Abridged.addDuration(builder, duration);
    Hazard_Abridged.addChannel(builder, channelOffset);
    Hazard_Abridged.addBottleId(builder, bottleIdOffset);
    Hazard_Abridged.addA(builder, a);
    Hazard_Abridged.addZ(builder, z);
    Hazard_Abridged.addPpm(builder, ppm);
    Hazard_Abridged.addCasRn(builder, casRnOffset);
    Hazard_Abridged.addMatCat(builder, matCat);
    Hazard_Abridged.addMatName(builder, matNameOffset);
    Hazard_Abridged.addMatClass(builder, matClassOffset);
    Hazard_Abridged.addMatType(builder, matTypeOffset);
    Hazard_Abridged.addReadingValues(builder, readingValuesOffset);
    Hazard_Abridged.addReadingUnits(builder, readingUnitsOffset);
    Hazard_Abridged.addReadings(builder, readingsOffset);
    Hazard_Abridged.addAlarmValues(builder, alarmValuesOffset);
    Hazard_Abridged.addAlarms(builder, alarmsOffset);
    Hazard_Abridged.addDetectTime(builder, detectTimeOffset);
    Hazard_Abridged.addDetectType(builder, detectTypeOffset);
    Hazard_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Hazard_Abridged.addId(builder, idOffset);
    Hazard_Abridged.addDataMode(builder, dataMode);
    Hazard_Abridged.addHarmful(builder, harmful);
    return Hazard_Abridged.endHazard_Abridged(builder);
  }

  public static void startHazard_Abridged(FlatBufferBuilder builder) { builder.startTable(40); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addDetectType(FlatBufferBuilder builder, int detectTypeOffset) { builder.addOffset(2, detectTypeOffset, 0); }
  public static void addDetectTime(FlatBufferBuilder builder, int detectTimeOffset) { builder.addOffset(3, detectTimeOffset, 0); }
  public static void addHarmful(FlatBufferBuilder builder, boolean harmful) { builder.addBoolean(4, harmful, false); }
  public static void addAlarms(FlatBufferBuilder builder, int alarmsOffset) { builder.addOffset(5, alarmsOffset, 0); }
  public static int createAlarmsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAlarmsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAlarmValues(FlatBufferBuilder builder, int alarmValuesOffset) { builder.addOffset(6, alarmValuesOffset, 0); }
  public static int createAlarmValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startAlarmValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReadings(FlatBufferBuilder builder, int readingsOffset) { builder.addOffset(7, readingsOffset, 0); }
  public static int createReadingsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReadingsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReadingUnits(FlatBufferBuilder builder, int readingUnitsOffset) { builder.addOffset(8, readingUnitsOffset, 0); }
  public static int createReadingUnitsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReadingUnitsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReadingValues(FlatBufferBuilder builder, int readingValuesOffset) { builder.addOffset(9, readingValuesOffset, 0); }
  public static int createReadingValuesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReadingValuesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addMatType(FlatBufferBuilder builder, int matTypeOffset) { builder.addOffset(10, matTypeOffset, 0); }
  public static void addMatClass(FlatBufferBuilder builder, int matClassOffset) { builder.addOffset(11, matClassOffset, 0); }
  public static void addMatName(FlatBufferBuilder builder, int matNameOffset) { builder.addOffset(12, matNameOffset, 0); }
  public static void addMatCat(FlatBufferBuilder builder, int matCat) { builder.addInt(13, matCat, 0); }
  public static void addCasRn(FlatBufferBuilder builder, int casRnOffset) { builder.addOffset(14, casRnOffset, 0); }
  public static void addPpm(FlatBufferBuilder builder, int ppm) { builder.addInt(15, ppm, 0); }
  public static void addDensity(FlatBufferBuilder builder, double density) { builder.addDouble(16, density, 0.0); }
  public static void addRadCtrn(FlatBufferBuilder builder, double radCtrn) { builder.addDouble(17, radCtrn, 0.0); }
  public static void addGBar(FlatBufferBuilder builder, double gBar) { builder.addDouble(18, gBar, 0.0); }
  public static void addHBar(FlatBufferBuilder builder, double hBar) { builder.addDouble(19, hBar, 0.0); }
  public static void addZ(FlatBufferBuilder builder, int z) { builder.addInt(20, z, 0); }
  public static void addA(FlatBufferBuilder builder, int a) { builder.addInt(21, a, 0); }
  public static void addBottleId(FlatBufferBuilder builder, int bottleIdOffset) { builder.addOffset(22, bottleIdOffset, 0); }
  public static void addChannel(FlatBufferBuilder builder, int channelOffset) { builder.addOffset(23, channelOffset, 0); }
  public static void addDuration(FlatBufferBuilder builder, int duration) { builder.addInt(24, duration, 0); }
  public static void addActivity(FlatBufferBuilder builder, double activity) { builder.addDouble(25, activity, 0.0); }
  public static void addDep(FlatBufferBuilder builder, double dep) { builder.addDouble(26, dep, 0.0); }
  public static void addDepCtrn(FlatBufferBuilder builder, double depCtrn) { builder.addDouble(27, depCtrn, 0.0); }
  public static void addMassFrac(FlatBufferBuilder builder, double massFrac) { builder.addDouble(28, massFrac, 0.0); }
  public static void addDose(FlatBufferBuilder builder, double dose) { builder.addDouble(29, dose, 0.0); }
  public static void addCtrnTime(FlatBufferBuilder builder, double ctrnTime) { builder.addDouble(30, ctrnTime, 0.0); }
  public static void addDoseRate(FlatBufferBuilder builder, double doseRate) { builder.addDouble(31, doseRate, 0.0); }
  public static void addIdPoi(FlatBufferBuilder builder, int idPoiOffset) { builder.addOffset(32, idPoiOffset, 0); }
  public static void addIdTrack(FlatBufferBuilder builder, int idTrackOffset) { builder.addOffset(33, idTrackOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(34, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(35, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(36, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(37, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(38, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(39, dataMode, 0); }
  public static int endHazard_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishHazard_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "HAZA"); }
  public static void finishSizePrefixedHazard_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "HAZA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Hazard_Abridged get(int j) { return get(new Hazard_Abridged(), j); }
    public Hazard_Abridged get(Hazard_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

