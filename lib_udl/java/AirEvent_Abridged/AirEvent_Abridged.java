// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
 */
@SuppressWarnings("unused")
public final class AirEvent_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirEvent_Abridged getRootAsAirEvent_Abridged(ByteBuffer _bb) { return getRootAsAirEvent_Abridged(_bb, new AirEvent_Abridged()); }
  public static AirEvent_Abridged getRootAsAirEvent_Abridged(ByteBuffer _bb, AirEvent_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirEvent_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRE"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirEvent_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system if not provided on create operations.
   * Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
   * Example: /// Example: FUEL TRANSFER
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String type() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The UDL unique identifier of the sortie associated with this air event.
   * Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSortie() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSortieAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The UDL unique identifier of the mission associated with this air event.
   * Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idMission() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idMissionAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer idMissionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: MB014313032022407540
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalAirEventId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalAirEventIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer externalAirEventIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Identifies the Itinerary point of a sortie where an air event occurs.
   * Example: /// Example: 825
   * Constraints: No constraints specified.
   */
  public int legNum() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
   * Example: /// Example: 901EW
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String location() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locationAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer locationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
   * Example: /// Example: A
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String arrPurpose() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrPurposeAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer arrPurposeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String plannedArrTime() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer plannedArrTimeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer plannedArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T13:59:48.123Z
   * Constraints: No constraints specified.
   */
  public String estArrTime() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estArrTimeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer estArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T14:00:03.123Z
   * Constraints: No constraints specified.
   */
  public String actualArrTime() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualArrTimeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer actualArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
   * Example: /// Example: Q
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String depPurpose() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depPurposeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer depPurposeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T14:15:43.123Z
   * Constraints: No constraints specified.
   */
  public String plannedDepTime() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer plannedDepTimeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer plannedDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T14:19:48.123Z
   * Constraints: No constraints specified.
   */
  public String estDepTime() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estDepTimeAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer estDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-07T14:17:03.123Z
   * Constraints: No constraints specified.
   */
  public String actualDepTime() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actualDepTimeAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer actualDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalArtrackId() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalArtrackIdAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer externalArtrackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Identifier of the air refueling track, if applicable.
   * Example: /// Example: CH61
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String arTrackId() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arTrackIdAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer arTrackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Name of the air refueling track, if applicable.
   * Example: /// Example: CH61 POST
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String arTrackName() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arTrackNameAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer arTrackNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2024-01-07T13:55:43.123Z
   * Constraints: No constraints specified.
   */
  public String rzct() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rzctAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer rzctInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
   * Example: /// Example: 2024-01-07T15:11:27.123Z
   * Constraints: No constraints specified.
   */
  public String arct() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arctAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer arctInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Altitude of this air event, in feet.
   * Example: /// Example: 28000.1
   * Constraints: No constraints specified.
   */
  public double baseAlt() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Priority of this air event.
   * Example: /// Example: 1A2
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String priority() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer priorityAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer priorityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Length of time the receiver unit has requested for an air event, in hours.
   * Example: /// Example: 1.5
   * Constraints: No constraints specified.
   */
  public double trackTime() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
   * Example: /// Example: R
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String statusCode() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusCodeAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer statusCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
   * Example: /// Example: AN
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String rzPoint() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rzPointAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer rzPointInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
   * Example: /// Example: PP
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String rzType() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rzTypeAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer rzTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
   * Example: /// Example: V
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String arEventType() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arEventTypeAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer arEventTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * The number of tankers requested for an air refueling event.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numTankers() { int o = __offset(60); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean revTrack() { int o = __offset(62); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean shortTrack() { int o = __offset(64); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating that this air refueling event has been cancelled.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean cancelled() { int o = __offset(66); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Collection of tanker aircraft associated with this Air Event.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String tankers(int j) { int o = __offset(68); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tankersLength() { int o = __offset(68); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tankersVector() { return tankersVector(new StringVector()); }
  public StringVector tankersVector(StringVector obj) { int o = __offset(68); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of receiver aircraft associated with this Air Event.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String receivers(int j) { int o = __offset(70); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int receiversLength() { int o = __offset(70); return o != 0 ? __vector_len(o) : 0; }
  public StringVector receiversVector() { return receiversVector(new StringVector()); }
  public StringVector receiversVector(StringVector obj) { int o = __offset(70); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of remarks associated with this Air Event.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String remarks(int j) { int o = __offset(72); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int remarksLength() { int o = __offset(72); return o != 0 ? __vector_len(o) : 0; }
  public StringVector remarksVector() { return remarksVector(new StringVector()); }
  public StringVector remarksVector(StringVector obj) { int o = __offset(72); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(78); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(78, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 78, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(80); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(80, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 80, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(90); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirEvent_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int typeOffset,
      int idSortieOffset,
      int idMissionOffset,
      int externalAirEventIdOffset,
      int legNum,
      int locationOffset,
      int arrPurposeOffset,
      int plannedArrTimeOffset,
      int estArrTimeOffset,
      int actualArrTimeOffset,
      int depPurposeOffset,
      int plannedDepTimeOffset,
      int estDepTimeOffset,
      int actualDepTimeOffset,
      int externalArtrackIdOffset,
      int arTrackIdOffset,
      int arTrackNameOffset,
      int rzctOffset,
      int arctOffset,
      double baseAlt,
      int priorityOffset,
      double trackTime,
      int statusCodeOffset,
      int rzPointOffset,
      int rzTypeOffset,
      int arEventTypeOffset,
      int numTankers,
      boolean revTrack,
      boolean shortTrack,
      boolean cancelled,
      int tankersOffset,
      int receiversOffset,
      int remarksOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(44);
    AirEvent_Abridged.addTrackTime(builder, trackTime);
    AirEvent_Abridged.addBaseAlt(builder, baseAlt);
    AirEvent_Abridged.addOrigNetwork(builder, origNetworkOffset);
    AirEvent_Abridged.addOrigin(builder, originOffset);
    AirEvent_Abridged.addSource(builder, sourceOffset);
    AirEvent_Abridged.addSourceDl(builder, sourceDlOffset);
    AirEvent_Abridged.addUpdatedBy(builder, updatedByOffset);
    AirEvent_Abridged.addUpdatedAt(builder, updatedAtOffset);
    AirEvent_Abridged.addCreatedBy(builder, createdByOffset);
    AirEvent_Abridged.addCreatedAt(builder, createdAtOffset);
    AirEvent_Abridged.addRemarks(builder, remarksOffset);
    AirEvent_Abridged.addReceivers(builder, receiversOffset);
    AirEvent_Abridged.addTankers(builder, tankersOffset);
    AirEvent_Abridged.addNumTankers(builder, numTankers);
    AirEvent_Abridged.addArEventType(builder, arEventTypeOffset);
    AirEvent_Abridged.addRzType(builder, rzTypeOffset);
    AirEvent_Abridged.addRzPoint(builder, rzPointOffset);
    AirEvent_Abridged.addStatusCode(builder, statusCodeOffset);
    AirEvent_Abridged.addPriority(builder, priorityOffset);
    AirEvent_Abridged.addArct(builder, arctOffset);
    AirEvent_Abridged.addRzct(builder, rzctOffset);
    AirEvent_Abridged.addArTrackName(builder, arTrackNameOffset);
    AirEvent_Abridged.addArTrackId(builder, arTrackIdOffset);
    AirEvent_Abridged.addExternalArtrackId(builder, externalArtrackIdOffset);
    AirEvent_Abridged.addActualDepTime(builder, actualDepTimeOffset);
    AirEvent_Abridged.addEstDepTime(builder, estDepTimeOffset);
    AirEvent_Abridged.addPlannedDepTime(builder, plannedDepTimeOffset);
    AirEvent_Abridged.addDepPurpose(builder, depPurposeOffset);
    AirEvent_Abridged.addActualArrTime(builder, actualArrTimeOffset);
    AirEvent_Abridged.addEstArrTime(builder, estArrTimeOffset);
    AirEvent_Abridged.addPlannedArrTime(builder, plannedArrTimeOffset);
    AirEvent_Abridged.addArrPurpose(builder, arrPurposeOffset);
    AirEvent_Abridged.addLocation(builder, locationOffset);
    AirEvent_Abridged.addLegNum(builder, legNum);
    AirEvent_Abridged.addExternalAirEventId(builder, externalAirEventIdOffset);
    AirEvent_Abridged.addIdMission(builder, idMissionOffset);
    AirEvent_Abridged.addIdSortie(builder, idSortieOffset);
    AirEvent_Abridged.addType(builder, typeOffset);
    AirEvent_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    AirEvent_Abridged.addId(builder, idOffset);
    AirEvent_Abridged.addDataMode(builder, dataMode);
    AirEvent_Abridged.addCancelled(builder, cancelled);
    AirEvent_Abridged.addShortTrack(builder, shortTrack);
    AirEvent_Abridged.addRevTrack(builder, revTrack);
    return AirEvent_Abridged.endAirEvent_Abridged(builder);
  }

  public static void startAirEvent_Abridged(FlatBufferBuilder builder) { builder.startTable(44); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(2, typeOffset, 0); }
  public static void addIdSortie(FlatBufferBuilder builder, int idSortieOffset) { builder.addOffset(3, idSortieOffset, 0); }
  public static void addIdMission(FlatBufferBuilder builder, int idMissionOffset) { builder.addOffset(4, idMissionOffset, 0); }
  public static void addExternalAirEventId(FlatBufferBuilder builder, int externalAirEventIdOffset) { builder.addOffset(5, externalAirEventIdOffset, 0); }
  public static void addLegNum(FlatBufferBuilder builder, int legNum) { builder.addInt(6, legNum, 0); }
  public static void addLocation(FlatBufferBuilder builder, int locationOffset) { builder.addOffset(7, locationOffset, 0); }
  public static void addArrPurpose(FlatBufferBuilder builder, int arrPurposeOffset) { builder.addOffset(8, arrPurposeOffset, 0); }
  public static void addPlannedArrTime(FlatBufferBuilder builder, int plannedArrTimeOffset) { builder.addOffset(9, plannedArrTimeOffset, 0); }
  public static void addEstArrTime(FlatBufferBuilder builder, int estArrTimeOffset) { builder.addOffset(10, estArrTimeOffset, 0); }
  public static void addActualArrTime(FlatBufferBuilder builder, int actualArrTimeOffset) { builder.addOffset(11, actualArrTimeOffset, 0); }
  public static void addDepPurpose(FlatBufferBuilder builder, int depPurposeOffset) { builder.addOffset(12, depPurposeOffset, 0); }
  public static void addPlannedDepTime(FlatBufferBuilder builder, int plannedDepTimeOffset) { builder.addOffset(13, plannedDepTimeOffset, 0); }
  public static void addEstDepTime(FlatBufferBuilder builder, int estDepTimeOffset) { builder.addOffset(14, estDepTimeOffset, 0); }
  public static void addActualDepTime(FlatBufferBuilder builder, int actualDepTimeOffset) { builder.addOffset(15, actualDepTimeOffset, 0); }
  public static void addExternalArtrackId(FlatBufferBuilder builder, int externalArtrackIdOffset) { builder.addOffset(16, externalArtrackIdOffset, 0); }
  public static void addArTrackId(FlatBufferBuilder builder, int arTrackIdOffset) { builder.addOffset(17, arTrackIdOffset, 0); }
  public static void addArTrackName(FlatBufferBuilder builder, int arTrackNameOffset) { builder.addOffset(18, arTrackNameOffset, 0); }
  public static void addRzct(FlatBufferBuilder builder, int rzctOffset) { builder.addOffset(19, rzctOffset, 0); }
  public static void addArct(FlatBufferBuilder builder, int arctOffset) { builder.addOffset(20, arctOffset, 0); }
  public static void addBaseAlt(FlatBufferBuilder builder, double baseAlt) { builder.addDouble(21, baseAlt, 0.0); }
  public static void addPriority(FlatBufferBuilder builder, int priorityOffset) { builder.addOffset(22, priorityOffset, 0); }
  public static void addTrackTime(FlatBufferBuilder builder, double trackTime) { builder.addDouble(23, trackTime, 0.0); }
  public static void addStatusCode(FlatBufferBuilder builder, int statusCodeOffset) { builder.addOffset(24, statusCodeOffset, 0); }
  public static void addRzPoint(FlatBufferBuilder builder, int rzPointOffset) { builder.addOffset(25, rzPointOffset, 0); }
  public static void addRzType(FlatBufferBuilder builder, int rzTypeOffset) { builder.addOffset(26, rzTypeOffset, 0); }
  public static void addArEventType(FlatBufferBuilder builder, int arEventTypeOffset) { builder.addOffset(27, arEventTypeOffset, 0); }
  public static void addNumTankers(FlatBufferBuilder builder, int numTankers) { builder.addInt(28, numTankers, 0); }
  public static void addRevTrack(FlatBufferBuilder builder, boolean revTrack) { builder.addBoolean(29, revTrack, false); }
  public static void addShortTrack(FlatBufferBuilder builder, boolean shortTrack) { builder.addBoolean(30, shortTrack, false); }
  public static void addCancelled(FlatBufferBuilder builder, boolean cancelled) { builder.addBoolean(31, cancelled, false); }
  public static void addTankers(FlatBufferBuilder builder, int tankersOffset) { builder.addOffset(32, tankersOffset, 0); }
  public static int createTankersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTankersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReceivers(FlatBufferBuilder builder, int receiversOffset) { builder.addOffset(33, receiversOffset, 0); }
  public static int createReceiversVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReceiversVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRemarks(FlatBufferBuilder builder, int remarksOffset) { builder.addOffset(34, remarksOffset, 0); }
  public static int createRemarksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRemarksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(35, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(36, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(37, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(38, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(39, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(40, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(41, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(42, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(43, dataMode, 0); }
  public static int endAirEvent_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirEvent_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRE"); }
  public static void finishSizePrefixedAirEvent_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRE"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirEvent_Abridged get(int j) { return get(new AirEvent_Abridged(), j); }
    public AirEvent_Abridged get(AirEvent_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

