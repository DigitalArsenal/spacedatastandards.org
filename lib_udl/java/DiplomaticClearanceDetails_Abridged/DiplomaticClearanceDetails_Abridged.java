// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Collection of diplomatic clearance details.
 */
@SuppressWarnings("unused")
public final class DiplomaticClearanceDetails_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static DiplomaticClearanceDetails_Abridged getRootAsDiplomaticClearanceDetails_Abridged(ByteBuffer _bb) { return getRootAsDiplomaticClearanceDetails_Abridged(_bb, new DiplomaticClearanceDetails_Abridged()); }
  public static DiplomaticClearanceDetails_Abridged getRootAsDiplomaticClearanceDetails_Abridged(ByteBuffer _bb, DiplomaticClearanceDetails_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean DiplomaticClearanceDetails_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "DIPL"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DiplomaticClearanceDetails_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
   * Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSortie() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSortieAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Identifies the Itinerary point of a sortie where an air event occurs.
   * Example: /// Example: 825
   * Constraints: No constraints specified.
   */
  public int legNum() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
   * Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
   * Constraints: Minimum length = 0, Maximum length = 4000
   */
  public String routeString() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer routeStringAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer routeStringInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String validStartTime() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer validStartTimeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer validStartTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String validEndTime() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer validEndTimeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer validEndTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Identifier of this diplomatic clearance issued by the host country.
   * Example: /// Example: MFMW225662GHQ
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String clearanceId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clearanceIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer clearanceIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String externalClearanceId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalClearanceIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer externalClearanceIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The call sign of the sortie cleared with this diplomatic clearance.
   * Example: /// Example: FALCN09
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String clearedCallSign() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clearedCallSignAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer clearedCallSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
   * Example: /// Example: 3
   * Constraints: No constraints specified.
   */
  public int sequenceNum() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
   * Example: /// Example: NL
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
   * Example: /// Example: IZ
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String altCountryCode() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altCountryCodeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer altCountryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Name of the country issuing this diplomatic clearance.
   * Example: /// Example: NETHERLANDS
   * Constraints: Minimum length = 0, Maximum length = 50
   */
  public String countryName() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryNameAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer countryNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Description of when this diplomatic clearance is valid.
   * Example: /// Example: CY2023
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String validDesc() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer validDescAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer validDescInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Remarks concerning the valid diplomatic clearance window.
   * Example: /// Example: Period remarks
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String windowRemark() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer windowRemarkAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer windowRemarkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The navigation point name where the aircraft must enter the country.
   * Example: /// Example: LOMOS
   * Constraints: Minimum length = 0, Maximum length = 38
   */
  public String entryPoint() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer entryPointAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer entryPointInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String entryNet() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer entryNetAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer entryNetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The navigation point name where the aircraft must exit the country.
   * Example: /// Example: BUDOP
   * Constraints: Minimum length = 0, Maximum length = 38
   */
  public String exitPoint() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer exitPointAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer exitPointInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
   * Example: /// Example: 2024-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String exitNlt() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer exitNltAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer exitNltInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Flag indicating whether the clearance request requires ICAO specific information.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean reqIcao() { int o = __offset(40); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
   * Example: /// Example: O
   * Constraints: Minimum length = 0, Maximum length = 1
   */
  public String action() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer actionAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer actionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * Indicates the current status of the diplomatic clearance request.
   * Example: /// Example: IN WORK
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String status() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer statusAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer statusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The diplomatic clearance profile name used within clearance management systems.
   * Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String profile() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer profileAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer profileInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Flag indicating whether entry/exit points are required for clearances.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean reqPoint() { int o = __offset(48); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Remarks concerning this diplomatic clearance.
   * Example: /// Example: Clearance remarks
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String clearanceRemark() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer clearanceRemarkAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer clearanceRemarkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }

  public static int createDiplomaticClearanceDetails_Abridged(FlatBufferBuilder builder,
      int idSortieOffset,
      int legNum,
      int routeStringOffset,
      int validStartTimeOffset,
      int validEndTimeOffset,
      int clearanceIdOffset,
      int externalClearanceIdOffset,
      int clearedCallSignOffset,
      int sequenceNum,
      int countryCodeOffset,
      int altCountryCodeOffset,
      int countryNameOffset,
      int validDescOffset,
      int windowRemarkOffset,
      int entryPointOffset,
      int entryNetOffset,
      int exitPointOffset,
      int exitNltOffset,
      boolean reqIcao,
      int actionOffset,
      int statusOffset,
      int profileOffset,
      boolean reqPoint,
      int clearanceRemarkOffset) {
    builder.startTable(24);
    DiplomaticClearanceDetails_Abridged.addClearanceRemark(builder, clearanceRemarkOffset);
    DiplomaticClearanceDetails_Abridged.addProfile(builder, profileOffset);
    DiplomaticClearanceDetails_Abridged.addStatus(builder, statusOffset);
    DiplomaticClearanceDetails_Abridged.addAction(builder, actionOffset);
    DiplomaticClearanceDetails_Abridged.addExitNlt(builder, exitNltOffset);
    DiplomaticClearanceDetails_Abridged.addExitPoint(builder, exitPointOffset);
    DiplomaticClearanceDetails_Abridged.addEntryNet(builder, entryNetOffset);
    DiplomaticClearanceDetails_Abridged.addEntryPoint(builder, entryPointOffset);
    DiplomaticClearanceDetails_Abridged.addWindowRemark(builder, windowRemarkOffset);
    DiplomaticClearanceDetails_Abridged.addValidDesc(builder, validDescOffset);
    DiplomaticClearanceDetails_Abridged.addCountryName(builder, countryNameOffset);
    DiplomaticClearanceDetails_Abridged.addAltCountryCode(builder, altCountryCodeOffset);
    DiplomaticClearanceDetails_Abridged.addCountryCode(builder, countryCodeOffset);
    DiplomaticClearanceDetails_Abridged.addSequenceNum(builder, sequenceNum);
    DiplomaticClearanceDetails_Abridged.addClearedCallSign(builder, clearedCallSignOffset);
    DiplomaticClearanceDetails_Abridged.addExternalClearanceId(builder, externalClearanceIdOffset);
    DiplomaticClearanceDetails_Abridged.addClearanceId(builder, clearanceIdOffset);
    DiplomaticClearanceDetails_Abridged.addValidEndTime(builder, validEndTimeOffset);
    DiplomaticClearanceDetails_Abridged.addValidStartTime(builder, validStartTimeOffset);
    DiplomaticClearanceDetails_Abridged.addRouteString(builder, routeStringOffset);
    DiplomaticClearanceDetails_Abridged.addLegNum(builder, legNum);
    DiplomaticClearanceDetails_Abridged.addIdSortie(builder, idSortieOffset);
    DiplomaticClearanceDetails_Abridged.addReqPoint(builder, reqPoint);
    DiplomaticClearanceDetails_Abridged.addReqIcao(builder, reqIcao);
    return DiplomaticClearanceDetails_Abridged.endDiplomaticClearanceDetails_Abridged(builder);
  }

  public static void startDiplomaticClearanceDetails_Abridged(FlatBufferBuilder builder) { builder.startTable(24); }
  public static void addIdSortie(FlatBufferBuilder builder, int idSortieOffset) { builder.addOffset(0, idSortieOffset, 0); }
  public static void addLegNum(FlatBufferBuilder builder, int legNum) { builder.addInt(1, legNum, 0); }
  public static void addRouteString(FlatBufferBuilder builder, int routeStringOffset) { builder.addOffset(2, routeStringOffset, 0); }
  public static void addValidStartTime(FlatBufferBuilder builder, int validStartTimeOffset) { builder.addOffset(3, validStartTimeOffset, 0); }
  public static void addValidEndTime(FlatBufferBuilder builder, int validEndTimeOffset) { builder.addOffset(4, validEndTimeOffset, 0); }
  public static void addClearanceId(FlatBufferBuilder builder, int clearanceIdOffset) { builder.addOffset(5, clearanceIdOffset, 0); }
  public static void addExternalClearanceId(FlatBufferBuilder builder, int externalClearanceIdOffset) { builder.addOffset(6, externalClearanceIdOffset, 0); }
  public static void addClearedCallSign(FlatBufferBuilder builder, int clearedCallSignOffset) { builder.addOffset(7, clearedCallSignOffset, 0); }
  public static void addSequenceNum(FlatBufferBuilder builder, int sequenceNum) { builder.addInt(8, sequenceNum, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(9, countryCodeOffset, 0); }
  public static void addAltCountryCode(FlatBufferBuilder builder, int altCountryCodeOffset) { builder.addOffset(10, altCountryCodeOffset, 0); }
  public static void addCountryName(FlatBufferBuilder builder, int countryNameOffset) { builder.addOffset(11, countryNameOffset, 0); }
  public static void addValidDesc(FlatBufferBuilder builder, int validDescOffset) { builder.addOffset(12, validDescOffset, 0); }
  public static void addWindowRemark(FlatBufferBuilder builder, int windowRemarkOffset) { builder.addOffset(13, windowRemarkOffset, 0); }
  public static void addEntryPoint(FlatBufferBuilder builder, int entryPointOffset) { builder.addOffset(14, entryPointOffset, 0); }
  public static void addEntryNet(FlatBufferBuilder builder, int entryNetOffset) { builder.addOffset(15, entryNetOffset, 0); }
  public static void addExitPoint(FlatBufferBuilder builder, int exitPointOffset) { builder.addOffset(16, exitPointOffset, 0); }
  public static void addExitNlt(FlatBufferBuilder builder, int exitNltOffset) { builder.addOffset(17, exitNltOffset, 0); }
  public static void addReqIcao(FlatBufferBuilder builder, boolean reqIcao) { builder.addBoolean(18, reqIcao, false); }
  public static void addAction(FlatBufferBuilder builder, int actionOffset) { builder.addOffset(19, actionOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(20, statusOffset, 0); }
  public static void addProfile(FlatBufferBuilder builder, int profileOffset) { builder.addOffset(21, profileOffset, 0); }
  public static void addReqPoint(FlatBufferBuilder builder, boolean reqPoint) { builder.addBoolean(22, reqPoint, false); }
  public static void addClearanceRemark(FlatBufferBuilder builder, int clearanceRemarkOffset) { builder.addOffset(23, clearanceRemarkOffset, 0); }
  public static int endDiplomaticClearanceDetails_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishDiplomaticClearanceDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "DIPL"); }
  public static void finishSizePrefixedDiplomaticClearanceDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "DIPL"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DiplomaticClearanceDetails_Abridged get(int j) { return get(new DiplomaticClearanceDetails_Abridged(), j); }
    public DiplomaticClearanceDetails_Abridged get(DiplomaticClearanceDetails_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

