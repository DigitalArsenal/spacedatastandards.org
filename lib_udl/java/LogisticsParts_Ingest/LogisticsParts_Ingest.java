// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The parts associated with this support item.
 */
@SuppressWarnings("unused")
public final class LogisticsParts_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static LogisticsParts_Ingest getRootAsLogisticsParts_Ingest(ByteBuffer _bb) { return getRootAsLogisticsParts_Ingest(_bb, new LogisticsParts_Ingest()); }
  public static LogisticsParts_Ingest getRootAsLogisticsParts_Ingest(ByteBuffer _bb, LogisticsParts_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean LogisticsParts_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "LOGI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public LogisticsParts_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Requested or supplied part number.
   * Example: /// Example: MS35338-42
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String partNumber() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer partNumberAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer partNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * The National Stock Number of the part being requested or supplied.
   * Example: /// Example: 5310-00-045-3299
   * Constraints: Minimum length = 0, Maximum length = 20
   */
  public String nationalStockNumber() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nationalStockNumberAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer nationalStockNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Code for a unit of measurement.
   * Example: /// Example: EA
   * Constraints: Minimum length = 0, Maximum length = 2
   */
  public String measurementUnitCode() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer measurementUnitCodeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer measurementUnitCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
   * Example: /// Example: 5611UU001
   * Constraints: Minimum length = 0, Maximum length = 10
   */
  public String workUnitCode() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer workUnitCodeAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer workUnitCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
   * Example: /// Example: 1C-17A-4
   * Constraints: Minimum length = 0, Maximum length = 15
   */
  public String technicalOrderText() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer technicalOrderTextAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer technicalOrderTextInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Technical order manual figure number for the requested / supplied part.
   * Example: /// Example: 3
   * Constraints: Minimum length = 0, Maximum length = 7
   */
  public String figureNumber() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer figureNumberAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer figureNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Technical order manual index number for the requested part.
   * Example: /// Example: 4
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String indexNumber() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer indexNumberAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer indexNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The person who validated the request for parts.
   * Example: /// Example: JOHN SMITH
   * Constraints: Minimum length = 0, Maximum length = 25
   */
  public String requestVerifier() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer requestVerifierAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer requestVerifierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The person who validated that the sourced location has, and can supply, the requested parts.
   * Example: /// Example: JANE DOE
   * Constraints: Minimum length = 0, Maximum length = 25
   */
  public String locationVerifier() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer locationVerifierAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer locationVerifierInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The supply document number.
   * Example: /// Example: J223FU31908300
   * Constraints: Minimum length = 0, Maximum length = 17
   */
  public String supplyDocumentNumber() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer supplyDocumentNumberAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer supplyDocumentNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The supply stocks for this support item.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String logisticsStocks(int j) { int o = __offset(24); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int logisticsStocksLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public StringVector logisticsStocksVector() { return logisticsStocksVector(new StringVector()); }
  public StringVector logisticsStocksVector(StringVector obj) { int o = __offset(24); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createLogisticsParts_Ingest(FlatBufferBuilder builder,
      int partNumberOffset,
      int nationalStockNumberOffset,
      int measurementUnitCodeOffset,
      int workUnitCodeOffset,
      int technicalOrderTextOffset,
      int figureNumberOffset,
      int indexNumberOffset,
      int requestVerifierOffset,
      int locationVerifierOffset,
      int supplyDocumentNumberOffset,
      int logisticsStocksOffset) {
    builder.startTable(11);
    LogisticsParts_Ingest.addLogisticsStocks(builder, logisticsStocksOffset);
    LogisticsParts_Ingest.addSupplyDocumentNumber(builder, supplyDocumentNumberOffset);
    LogisticsParts_Ingest.addLocationVerifier(builder, locationVerifierOffset);
    LogisticsParts_Ingest.addRequestVerifier(builder, requestVerifierOffset);
    LogisticsParts_Ingest.addIndexNumber(builder, indexNumberOffset);
    LogisticsParts_Ingest.addFigureNumber(builder, figureNumberOffset);
    LogisticsParts_Ingest.addTechnicalOrderText(builder, technicalOrderTextOffset);
    LogisticsParts_Ingest.addWorkUnitCode(builder, workUnitCodeOffset);
    LogisticsParts_Ingest.addMeasurementUnitCode(builder, measurementUnitCodeOffset);
    LogisticsParts_Ingest.addNationalStockNumber(builder, nationalStockNumberOffset);
    LogisticsParts_Ingest.addPartNumber(builder, partNumberOffset);
    return LogisticsParts_Ingest.endLogisticsParts_Ingest(builder);
  }

  public static void startLogisticsParts_Ingest(FlatBufferBuilder builder) { builder.startTable(11); }
  public static void addPartNumber(FlatBufferBuilder builder, int partNumberOffset) { builder.addOffset(0, partNumberOffset, 0); }
  public static void addNationalStockNumber(FlatBufferBuilder builder, int nationalStockNumberOffset) { builder.addOffset(1, nationalStockNumberOffset, 0); }
  public static void addMeasurementUnitCode(FlatBufferBuilder builder, int measurementUnitCodeOffset) { builder.addOffset(2, measurementUnitCodeOffset, 0); }
  public static void addWorkUnitCode(FlatBufferBuilder builder, int workUnitCodeOffset) { builder.addOffset(3, workUnitCodeOffset, 0); }
  public static void addTechnicalOrderText(FlatBufferBuilder builder, int technicalOrderTextOffset) { builder.addOffset(4, technicalOrderTextOffset, 0); }
  public static void addFigureNumber(FlatBufferBuilder builder, int figureNumberOffset) { builder.addOffset(5, figureNumberOffset, 0); }
  public static void addIndexNumber(FlatBufferBuilder builder, int indexNumberOffset) { builder.addOffset(6, indexNumberOffset, 0); }
  public static void addRequestVerifier(FlatBufferBuilder builder, int requestVerifierOffset) { builder.addOffset(7, requestVerifierOffset, 0); }
  public static void addLocationVerifier(FlatBufferBuilder builder, int locationVerifierOffset) { builder.addOffset(8, locationVerifierOffset, 0); }
  public static void addSupplyDocumentNumber(FlatBufferBuilder builder, int supplyDocumentNumberOffset) { builder.addOffset(9, supplyDocumentNumberOffset, 0); }
  public static void addLogisticsStocks(FlatBufferBuilder builder, int logisticsStocksOffset) { builder.addOffset(10, logisticsStocksOffset, 0); }
  public static int createLogisticsStocksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startLogisticsStocksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endLogisticsParts_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishLogisticsParts_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "LOGI"); }
  public static void finishSizePrefixedLogisticsParts_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "LOGI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public LogisticsParts_Ingest get(int j) { return get(new LogisticsParts_Ingest(), j); }
    public LogisticsParts_Ingest get(LogisticsParts_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

