// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Set of GNSSObservation data.
 */
@SuppressWarnings("unused")
public final class GNSSObservationSet_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static GNSSObservationSet_Full getRootAsGNSSObservationSet_Full(ByteBuffer _bb) { return getRootAsGNSSObservationSet_Full(_bb, new GNSSObservationSet_Full()); }
  public static GNSSObservationSet_Full getRootAsGNSSObservationSet_Full(ByteBuffer _bb, GNSSObservationSet_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean GNSSObservationSet_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "GNSS"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public GNSSObservationSet_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: GNSSObSet-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The marker type of the observing receiver (AIRBORNE, ANIMAL, BALLISTIC, FIXED BUOY, FLOATING BUOY, FLOATING ICE, GEODETIC, GLACIER, GROUNDCRAFT, HUMAN, NON GEODETIC, NON PHYSICAL, SPACEBORNE, WATERCRAFT).  Reference RINEX 3+ for further information concerning marker types.
   * Example: /// Example: SPACEBORNE
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String markerType() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer markerTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer markerTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the primary satellite on-orbit object.
   * Example: /// Example: ONORBIT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbitAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Satellite/catalog number of the target on-orbit object.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int satNo() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional identifier provided by ephemeris source to indicate the target object of this ephemeris. This may be an internal identifier and not necessarily map to a valid satellite number.
   * Example: /// Example: ORIGOBJECT-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origObjectId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origObjectIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer origObjectIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Observation Time, in ISO8601 UTC format with microsecond precision.  This timestamp applies to all observations within the set.
   * Example: /// Example: 2022-01-01T00:00:00.123456Z
   * Constraints: No constraints specified.
   */
  public String ts() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tsAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer tsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Time, in seconds, that the receiver has been unable to compute a GNSS fix.
   * Example: /// Example: 200
   * Constraints: No constraints specified.
   */
  public int outage() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Geometric Dilution of Precision.
   * Example: /// Example: 0.33
   * Constraints: No constraints specified.
   */
  public double gDop() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Horizontal Dilution of Precision.
   * Example: /// Example: 0.03
   * Constraints: No constraints specified.
   */
  public double hDop() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Position Dilution of Precision.
   * Example: /// Example: 0.002
   * Constraints: No constraints specified.
   */
  public double pDop() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time Dilution of Precision.
   * Example: /// Example: 0.05
   * Constraints: No constraints specified.
   */
  public double tDop() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Vertical Dilution of Precision.
   * Example: /// Example: 0.03
   * Constraints: No constraints specified.
   */
  public double vDop() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris.  If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Observation records if each receiver is synced to the ephemeris points.
   * Example: /// Example: ES-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String esId() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer esIdAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer esIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The number or ID of the GNSS receiver associated with this data.  Each GNSS Observation Set is associated with only one receiver.  If reporting for multiple receivers a separate set should be generated for each.  A null value is assumed to indicate that only one receiver is present, or reported.
   * Example: /// Example: RECEIVER-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String receiver() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer receiverAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer receiverInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
   * Example: /// Example: [1.23, 3.23]
   * Constraints: No constraints specified.
   */
  public String boresight(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int boresightLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector boresightVector() { return boresightVector(new StringVector()); }
  public StringVector boresightVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at observation time (ts). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
   * Example: /// Example: [0.03, 0.02, 0.01, 0.012]
   * Constraints: No constraints specified.
   */
  public String quat(int j) { int o = __offset(36); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int quatLength() { int o = __offset(36); return o != 0 ? __vector_len(o) : 0; }
  public StringVector quatVector() { return quatVector(new StringVector()); }
  public StringVector quatVector(StringVector obj) { int o = __offset(36); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * WGS-84 spacecraft latitude sub-point at observation time (ts), represented as -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 32.021
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS-84 spacecraft longitude sub-point at observation time (ts), represented as -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 125.123
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Spacecraft altitude at observation time (ts), expressed in kilometers above WGS-84 ellipsoid.
   * Example: /// Example: 200
   * Constraints: No constraints specified.
   */
  public double alt() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Three element array, expressing the ECI J2K spacecraft velocity components, in km/second, at observation time (ts).  The array element order is [xvel, yvel, zvel].
   * Example: /// Example: [2.03, 0.003, 0.12]
   * Constraints: No constraints specified.
   */
  public String satVelocity(int j) { int o = __offset(44); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int satVelocityLength() { int o = __offset(44); return o != 0 ? __vector_len(o) : 0; }
  public StringVector satVelocityVector() { return satVelocityVector(new StringVector()); }
  public StringVector satVelocityVector(StringVector obj) { int o = __offset(44); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of the strings containing the individual observation code sets that are contained within this GNSS Observation set.  Each string is a three-character representation of the measurement type, the channel, and the coding, in compliance with the RINEX 3+ standard (Pseudorange (C), Carrier Phase (L), Doppler (D), Signal Strength C/No (S), or Channel Number (X)).  See the GNSS Observation ob field for the units of measure associated with each observation type.
   * Example: /// Example: ['ACL']
   * Constraints: No constraints specified.
   */
  public String obsCodes(int j) { int o = __offset(46); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int obsCodesLength() { int o = __offset(46); return o != 0 ? __vector_len(o) : 0; }
  public StringVector obsCodesVector() { return obsCodesVector(new StringVector()); }
  public StringVector obsCodesVector(StringVector obj) { int o = __offset(46); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Status of the GNSS receiver signal. Status options are 0, 1 or 2 (0 being the best).
   * Example: /// Example: 0
   * Constraints: No constraints specified.
   */
  public int trackingStatus() { int o = __offset(48); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The current navigation status as defined by the data source. In general the navigation status specifies whether the signal is normal, degraded, or unavailable. For status value definitions please reach out to data source provider.
   * Example: /// Example: degraded
   * Constraints: No constraints specified.
   */
  public String navigationStatus() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer navigationStatusAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer navigationStatusInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * GNSS Automatic Gain Control State.
   * Example: /// Example: 20
   * Constraints: No constraints specified.
   */
  public int agcState() { int o = __offset(52); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this GNSS Observation Set. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
   * Example: /// Example: ['SV', 'SV']
   * Constraints: No constraints specified.
   */
  public String srcTyps(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcTypsLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcTypsVector() { return srcTypsVector(new StringVector()); }
  public StringVector srcTypsVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of UUIDs of the UDL data records that are related to this GNSS Observation Set. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/statevector/{uuid}).
   * Example: /// Example: ['SV_ID', 'SV_ID']
   * Constraints: No constraints specified.
   */
  public String srcIds(int j) { int o = __offset(56); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int srcIdsLength() { int o = __offset(56); return o != 0 ? __vector_len(o) : 0; }
  public StringVector srcIdsVector() { return srcIdsVector(new StringVector()); }
  public StringVector srcIdsVector(StringVector obj) { int o = __offset(56); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(58); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(58); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(58); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * GNSSObservations associated with this GNSSObservationSet.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String gnssObservationList(int j) { int o = __offset(74); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int gnssObservationListLength() { int o = __offset(74); return o != 0 ? __vector_len(o) : 0; }
  public StringVector gnssObservationListVector() { return gnssObservationListVector(new StringVector()); }
  public StringVector gnssObservationListVector(StringVector obj) { int o = __offset(74); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createGNSSObservationSet_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int markerTypeOffset,
      int idOnOrbitOffset,
      int satNo,
      int origObjectIdOffset,
      int tsOffset,
      int outage,
      double gDop,
      double hDop,
      double pDop,
      double tDop,
      double vDop,
      int esIdOffset,
      int receiverOffset,
      int boresightOffset,
      int quatOffset,
      double lat,
      double lon,
      double alt,
      int satVelocityOffset,
      int obsCodesOffset,
      int trackingStatus,
      int navigationStatusOffset,
      int agcState,
      int srcTypsOffset,
      int srcIdsOffset,
      int tagsOffset,
      int transactionIdOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset,
      int gnssObservationListOffset) {
    builder.startTable(36);
    GNSSObservationSet_Full.addAlt(builder, alt);
    GNSSObservationSet_Full.addLon(builder, lon);
    GNSSObservationSet_Full.addLat(builder, lat);
    GNSSObservationSet_Full.addVDop(builder, vDop);
    GNSSObservationSet_Full.addTDop(builder, tDop);
    GNSSObservationSet_Full.addPDop(builder, pDop);
    GNSSObservationSet_Full.addHDop(builder, hDop);
    GNSSObservationSet_Full.addGDop(builder, gDop);
    GNSSObservationSet_Full.addGnssObservationList(builder, gnssObservationListOffset);
    GNSSObservationSet_Full.addOrigNetwork(builder, origNetworkOffset);
    GNSSObservationSet_Full.addOrigin(builder, originOffset);
    GNSSObservationSet_Full.addSource(builder, sourceOffset);
    GNSSObservationSet_Full.addCreatedBy(builder, createdByOffset);
    GNSSObservationSet_Full.addCreatedAt(builder, createdAtOffset);
    GNSSObservationSet_Full.addTransactionId(builder, transactionIdOffset);
    GNSSObservationSet_Full.addTags(builder, tagsOffset);
    GNSSObservationSet_Full.addSrcIds(builder, srcIdsOffset);
    GNSSObservationSet_Full.addSrcTyps(builder, srcTypsOffset);
    GNSSObservationSet_Full.addAgcState(builder, agcState);
    GNSSObservationSet_Full.addNavigationStatus(builder, navigationStatusOffset);
    GNSSObservationSet_Full.addTrackingStatus(builder, trackingStatus);
    GNSSObservationSet_Full.addObsCodes(builder, obsCodesOffset);
    GNSSObservationSet_Full.addSatVelocity(builder, satVelocityOffset);
    GNSSObservationSet_Full.addQuat(builder, quatOffset);
    GNSSObservationSet_Full.addBoresight(builder, boresightOffset);
    GNSSObservationSet_Full.addReceiver(builder, receiverOffset);
    GNSSObservationSet_Full.addEsId(builder, esIdOffset);
    GNSSObservationSet_Full.addOutage(builder, outage);
    GNSSObservationSet_Full.addTs(builder, tsOffset);
    GNSSObservationSet_Full.addOrigObjectId(builder, origObjectIdOffset);
    GNSSObservationSet_Full.addSatNo(builder, satNo);
    GNSSObservationSet_Full.addIdOnOrbit(builder, idOnOrbitOffset);
    GNSSObservationSet_Full.addMarkerType(builder, markerTypeOffset);
    GNSSObservationSet_Full.addClassificationMarking(builder, classificationMarkingOffset);
    GNSSObservationSet_Full.addId(builder, idOffset);
    GNSSObservationSet_Full.addDataMode(builder, dataMode);
    return GNSSObservationSet_Full.endGNSSObservationSet_Full(builder);
  }

  public static void startGNSSObservationSet_Full(FlatBufferBuilder builder) { builder.startTable(36); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addMarkerType(FlatBufferBuilder builder, int markerTypeOffset) { builder.addOffset(2, markerTypeOffset, 0); }
  public static void addIdOnOrbit(FlatBufferBuilder builder, int idOnOrbitOffset) { builder.addOffset(3, idOnOrbitOffset, 0); }
  public static void addSatNo(FlatBufferBuilder builder, int satNo) { builder.addInt(4, satNo, 0); }
  public static void addOrigObjectId(FlatBufferBuilder builder, int origObjectIdOffset) { builder.addOffset(5, origObjectIdOffset, 0); }
  public static void addTs(FlatBufferBuilder builder, int tsOffset) { builder.addOffset(6, tsOffset, 0); }
  public static void addOutage(FlatBufferBuilder builder, int outage) { builder.addInt(7, outage, 0); }
  public static void addGDop(FlatBufferBuilder builder, double gDop) { builder.addDouble(8, gDop, 0.0); }
  public static void addHDop(FlatBufferBuilder builder, double hDop) { builder.addDouble(9, hDop, 0.0); }
  public static void addPDop(FlatBufferBuilder builder, double pDop) { builder.addDouble(10, pDop, 0.0); }
  public static void addTDop(FlatBufferBuilder builder, double tDop) { builder.addDouble(11, tDop, 0.0); }
  public static void addVDop(FlatBufferBuilder builder, double vDop) { builder.addDouble(12, vDop, 0.0); }
  public static void addEsId(FlatBufferBuilder builder, int esIdOffset) { builder.addOffset(13, esIdOffset, 0); }
  public static void addReceiver(FlatBufferBuilder builder, int receiverOffset) { builder.addOffset(14, receiverOffset, 0); }
  public static void addBoresight(FlatBufferBuilder builder, int boresightOffset) { builder.addOffset(15, boresightOffset, 0); }
  public static int createBoresightVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBoresightVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addQuat(FlatBufferBuilder builder, int quatOffset) { builder.addOffset(16, quatOffset, 0); }
  public static int createQuatVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startQuatVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(17, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(18, lon, 0.0); }
  public static void addAlt(FlatBufferBuilder builder, double alt) { builder.addDouble(19, alt, 0.0); }
  public static void addSatVelocity(FlatBufferBuilder builder, int satVelocityOffset) { builder.addOffset(20, satVelocityOffset, 0); }
  public static int createSatVelocityVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSatVelocityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addObsCodes(FlatBufferBuilder builder, int obsCodesOffset) { builder.addOffset(21, obsCodesOffset, 0); }
  public static int createObsCodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObsCodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTrackingStatus(FlatBufferBuilder builder, int trackingStatus) { builder.addInt(22, trackingStatus, 0); }
  public static void addNavigationStatus(FlatBufferBuilder builder, int navigationStatusOffset) { builder.addOffset(23, navigationStatusOffset, 0); }
  public static void addAgcState(FlatBufferBuilder builder, int agcState) { builder.addInt(24, agcState, 0); }
  public static void addSrcTyps(FlatBufferBuilder builder, int srcTypsOffset) { builder.addOffset(25, srcTypsOffset, 0); }
  public static int createSrcTypsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcTypsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSrcIds(FlatBufferBuilder builder, int srcIdsOffset) { builder.addOffset(26, srcIdsOffset, 0); }
  public static int createSrcIdsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSrcIdsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(27, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(28, transactionIdOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(29, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(30, createdByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(31, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(32, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(33, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(34, origNetworkOffset, 0); }
  public static void addGnssObservationList(FlatBufferBuilder builder, int gnssObservationListOffset) { builder.addOffset(35, gnssObservationListOffset, 0); }
  public static int createGnssObservationListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startGnssObservationListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endGNSSObservationSet_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishGNSSObservationSet_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "GNSS"); }
  public static void finishSizePrefixedGNSSObservationSet_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "GNSS"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public GNSSObservationSet_Full get(int j) { return get(new GNSSObservationSet_Full(), j); }
    public GNSSObservationSet_Full get(GNSSObservationSet_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

