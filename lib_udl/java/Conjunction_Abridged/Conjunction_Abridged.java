// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Stores the results of a particular Conjunction Assessment (CA) run.
 */
@SuppressWarnings("unused")
public final class Conjunction_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Conjunction_Abridged getRootAsConjunction_Abridged(ByteBuffer _bb) { return getRootAsConjunction_Abridged(_bb, new Conjunction_Abridged()); }
  public static Conjunction_Abridged getRootAsConjunction_Abridged(ByteBuffer _bb, Conjunction_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Conjunction_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "CONJ"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Conjunction_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: CONJUNCTION-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the primary satellite on-orbit object, if correlated.
   * Example: /// Example: ONORBIT1-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit1() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbit1AsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idOnOrbit1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Unique identifier of the secondary satellite on-orbit object, if correlated.
   * Example: /// Example: ONORBIT2-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idOnOrbit2() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idOnOrbit2AsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idOnOrbit2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The type of data represented in this conjunction record (e.g. CONJUNCTION, CARA-WORKLIST, etc.).  If type is null the record is assumed to be a Conjunction.
   * Example: /// Example: CONJUNCTION
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String type() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Time of closest approach (TCA) in UTC.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String tca() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tcaAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer tcaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Distance between objects at Time of Closest Approach (TCA) in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double missDistance() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Probability of Collision is the probability (denoted p, where 0.0<=p<=1.0), that Object1 and Object2 will collide.
   * Example: /// Example: 0.5
   * Constraints: No constraints specified.
   */
  public double collisionProb() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The method that was used to calculate the collision probability, ex. FOSTER-1992.
   * Example: /// Example: FOSTER-1992
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String collisionProbMethod() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer collisionProbMethodAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer collisionProbMethodInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The filename of the primary (object1) ephemeris used in the screening, if applicable.
   * Example: /// Example: MEME_SPCFT_ABC_2180000_ops_nomnvr_unclassified.oem
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String ephemName1() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ephemName1AsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer ephemName1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Unique identifier of the parent Ephemeris Set of the primary (object1) ephemeris used in the screening, if applicable.
   * Example: /// Example: a2ae2356-6d83-4e4b-896d-ddd1958800fa
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String esId1() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer esId1AsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer esId1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The filename of the secondary (object2) ephemeris used in the screening, if applicable.
   * Example: /// Example: MEME_SPCFT_DEF_2170000_ops_nomnvr_unclassified.txt
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String ephemName2() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ephemName2AsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer ephemName2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Unique identifier of the parent Ephemeris Set of the secondary (object2) ephemeris used in the screening, if applicable.
   * Example: /// Example: 6fa31433-8beb-4b9b-8bf9-326dbd041c3f
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String esId2() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer esId2AsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer esId2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * Distance between objects along Radial Vector at Time of Closest Approach in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relPosR() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Distance between objects along Tangential Vector in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relPosT() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Distance between objects along Normal vector in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relPosN() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Closing velocity magnitude (relative speed) at Time of Closest Approach in meters/sec.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relVelMag() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Closing velocity between objects along Radial Vector at Time of Closest Approach in meters/sec.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relVelR() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Closing velocity between objects along Tangential Vector in meters/sec.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relVelT() { int o = __offset(40); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Closing velocity between objects along Normal Vector in meters/sec.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double relVelN() { int o = __offset(42); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The start time in UTC of the screening period for the conjunction assessment.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String screenEntryTime() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer screenEntryTimeAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer screenEntryTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * The stop time in UTC of the screening period for the conjunction assessment.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String screenExitTime() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer screenExitTimeAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer screenExitTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Component size of screen in X component of  RTN (Radial, Transverse and Normal) frame in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double screenVolumeX() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Component size of screen in Y component of  RTN (Radial, Transverse and Normal) frame in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double screenVolumeY() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Component size of screen in Z component of  RTN (Radial, Transverse and Normal) frame in meters.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double screenVolumeZ() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The shape (BOX, ELLIPSOID) of the screening volume.
   * Example: /// Example: ELLIPSOID
   * Constraints: Minimum length = 0, Maximum length = 12
   */
  public String volShape() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer volShapeAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer volShapeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * The time at which the secondary (object2) enters the screening volume, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2021-01-01T01:02:01.123456Z
   * Constraints: No constraints specified.
   */
  public String volEntryTime() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer volEntryTimeAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer volEntryTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * The time at which the secondary (object2) exits the screening volume, in ISO 8601 UTC format with microsecond precision.
   * Example: /// Example: 2021-01-01T01:02:28.123456Z
   * Constraints: No constraints specified.
   */
  public String volExitTime() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer volExitTimeAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer volExitTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Penetration Level Sigma.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double penetrationLevelSigma() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional ID of the UDL State Vector at TCA of the primary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector1.
   * Example: /// Example: REF-STATEVECTOR1-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idStateVector1() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idStateVector1AsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer idStateVector1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * Time of last positive metric observation of the primary satellite.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String lastObTime1() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastObTime1AsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer lastObTime1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * The value of the primary (object1) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
   * Example: /// Example: 0.016386
   * Constraints: No constraints specified.
   */
  public double cdAoM1() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The value of the primary (object1) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
   * Example: /// Example: 0.013814
   * Constraints: No constraints specified.
   */
  public double crAoM1() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The primary (object1) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
   * Example: /// Example: 0.033814
   * Constraints: No constraints specified.
   */
  public double thrustAccel1() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Optional ID of the UDL State Vector at TCA of the secondary object. When performing a create, this id will be ignored in favor of the UDL generated id of the stateVector2.
   * Example: /// Example: REF-STATEVECTOR2-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idStateVector2() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idStateVector2AsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer idStateVector2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Time of last positive metric observation of the secondary satellite.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String lastObTime2() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastObTime2AsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer lastObTime2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * The value of the secondary (object2) Area times the drag coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.
   * Example: /// Example: 0.016386
   * Constraints: No constraints specified.
   */
  public double cdAoM2() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The value of the secondary (object2) Area times the solar radiation pressure coefficient over the object Mass, expressed in m^2/kg, used for propagation of the primary state vector and covariance to TCA.  This parameter is sometimes referred to as AGOM.
   * Example: /// Example: 0.013814
   * Constraints: No constraints specified.
   */
  public double crAoM2() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The secondary (object2) acceleration, expressed in m/s^2, due to in-track thrust used to propagate the primary state vector and covariance to TCA.
   * Example: /// Example: 0.033814
   * Constraints: No constraints specified.
   */
  public double thrustAccel2() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Additional notes from data providers.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String comments() { int o = __offset(82); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer commentsAsByteBuffer() { return __vector_as_bytebuffer(82, 1); }
  public ByteBuffer commentsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 82, 1); }
  /**
   * Commander's critical information requirements notes.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String ccir() { int o = __offset(84); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ccirAsByteBuffer() { return __vector_as_bytebuffer(84, 1); }
  public ByteBuffer ccirInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 84, 1); }
  /**
   * Emergency comments.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String concernNotes() { int o = __offset(86); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer concernNotesAsByteBuffer() { return __vector_as_bytebuffer(86, 1); }
  public ByteBuffer concernNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 86, 1); }
  /**
   * Flag indicating if State department was notified.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean stateDeptNotified() { int o = __offset(88); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Flag indicating if owner was contacted.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean ownerContacted() { int o = __offset(90); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Link to filename associated with JMS record.
   * Example: /// Example: Example link
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String rawFileUri() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rawFileUriAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer rawFileUriInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Spacecraft name(s) for which the Collision message is provided.
   * Example: /// Example: Message for space craft A
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String messageFor() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageForAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer messageForInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * JMS provided message ID link.
   * Example: /// Example: MESSAGE-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String messageId() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer messageIdAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer messageIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean uvwWarn() { int o = __offset(98); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean smallRelVelWarning() { int o = __offset(100); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean largeRelPosWarning() { int o = __offset(102); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean smallCovWarning() { int o = __offset(104); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Used for probability of collision calculation, not Warning/Alert Threshold notifications.
   * Example: /// Example: False
   * Constraints: No constraints specified.
   */
  public boolean largeCovWarning() { int o = __offset(106); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Optional identifier to track a commercial or marketplace transaction executed to produce this data.
   * Example: /// Example: TRANSACTION-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String transactionId() { int o = __offset(108); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer transactionIdAsByteBuffer() { return __vector_as_bytebuffer(108, 1); }
  public ByteBuffer transactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 108, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(110); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(110, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 110, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(112); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(112, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 112, 1); }
  /**
   * Creating agency or owner/operator (may be different than provider who submitted the conjunction message).
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String originator() { int o = __offset(114); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originatorAsByteBuffer() { return __vector_as_bytebuffer(114, 1); }
  public ByteBuffer originatorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 114, 1); }
  /**
   * Optional source-provided identifier for this conjunction event. In the case where multiple conjunction records are submitted for the same event, this field can be used to tie them together to the same event.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String eventId() { int o = __offset(116); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer eventIdAsByteBuffer() { return __vector_as_bytebuffer(116, 1); }
  public ByteBuffer eventIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 116, 1); }
  /**
   * Optional source-provided and searchable metadata or descriptor of the data.
   * Example: /// Example: sample_descriptor here
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String descriptor() { int o = __offset(118); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer descriptorAsByteBuffer() { return __vector_as_bytebuffer(118, 1); }
  public ByteBuffer descriptorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 118, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(120); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(122); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(122, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 122, 1); }
  /**
   * Application user who created the row in the database.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(124); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(124, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 124, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String stateVector1() { int o = __offset(126); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateVector1AsByteBuffer() { return __vector_as_bytebuffer(126, 1); }
  public ByteBuffer stateVector1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 126, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String stateVector2() { int o = __offset(128); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateVector2AsByteBuffer() { return __vector_as_bytebuffer(128, 1); }
  public ByteBuffer stateVector2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 128, 1); }
  /**
   * Satellite/catalog number of the target on-orbit primary object.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int satNo1() { int o = __offset(130); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Satellite/catalog number of the target on-orbit secondary object.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int satNo2() { int o = __offset(132); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Optional place holder for an OnOrbit ID that does not exist in UDL.
   * Example: /// Example: ORIGONORBIT1-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origIdOnOrbit1() { int o = __offset(134); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origIdOnOrbit1AsByteBuffer() { return __vector_as_bytebuffer(134, 1); }
  public ByteBuffer origIdOnOrbit1InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 134, 1); }
  /**
   * Optional place holder for an OnOrbit ID that does not exist in UDL.
   * Example: /// Example: ORIGONORBIT2-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origIdOnOrbit2() { int o = __offset(136); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origIdOnOrbit2AsByteBuffer() { return __vector_as_bytebuffer(136, 1); }
  public ByteBuffer origIdOnOrbit2InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 136, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(138); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(138, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 138, 1); }

  public static int createConjunction_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idOnOrbit1Offset,
      int idOnOrbit2Offset,
      int typeOffset,
      int tcaOffset,
      double missDistance,
      double collisionProb,
      int collisionProbMethodOffset,
      int ephemName1Offset,
      int esId1Offset,
      int ephemName2Offset,
      int esId2Offset,
      double relPosR,
      double relPosT,
      double relPosN,
      double relVelMag,
      double relVelR,
      double relVelT,
      double relVelN,
      int screenEntryTimeOffset,
      int screenExitTimeOffset,
      double screenVolumeX,
      double screenVolumeY,
      double screenVolumeZ,
      int volShapeOffset,
      int volEntryTimeOffset,
      int volExitTimeOffset,
      double penetrationLevelSigma,
      int idStateVector1Offset,
      int lastObTime1Offset,
      double cdAoM1,
      double crAoM1,
      double thrustAccel1,
      int idStateVector2Offset,
      int lastObTime2Offset,
      double cdAoM2,
      double crAoM2,
      double thrustAccel2,
      int commentsOffset,
      int ccirOffset,
      int concernNotesOffset,
      boolean stateDeptNotified,
      boolean ownerContacted,
      int rawFileUriOffset,
      int messageForOffset,
      int messageIdOffset,
      boolean uvwWarn,
      boolean smallRelVelWarning,
      boolean largeRelPosWarning,
      boolean smallCovWarning,
      boolean largeCovWarning,
      int transactionIdOffset,
      int sourceOffset,
      int originOffset,
      int originatorOffset,
      int eventIdOffset,
      int descriptorOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset,
      int stateVector1Offset,
      int stateVector2Offset,
      int satNo1,
      int satNo2,
      int origIdOnOrbit1Offset,
      int origIdOnOrbit2Offset,
      int origNetworkOffset) {
    builder.startTable(68);
    Conjunction_Abridged.addThrustAccel2(builder, thrustAccel2);
    Conjunction_Abridged.addCrAoM2(builder, crAoM2);
    Conjunction_Abridged.addCdAoM2(builder, cdAoM2);
    Conjunction_Abridged.addThrustAccel1(builder, thrustAccel1);
    Conjunction_Abridged.addCrAoM1(builder, crAoM1);
    Conjunction_Abridged.addCdAoM1(builder, cdAoM1);
    Conjunction_Abridged.addPenetrationLevelSigma(builder, penetrationLevelSigma);
    Conjunction_Abridged.addScreenVolumeZ(builder, screenVolumeZ);
    Conjunction_Abridged.addScreenVolumeY(builder, screenVolumeY);
    Conjunction_Abridged.addScreenVolumeX(builder, screenVolumeX);
    Conjunction_Abridged.addRelVelN(builder, relVelN);
    Conjunction_Abridged.addRelVelT(builder, relVelT);
    Conjunction_Abridged.addRelVelR(builder, relVelR);
    Conjunction_Abridged.addRelVelMag(builder, relVelMag);
    Conjunction_Abridged.addRelPosN(builder, relPosN);
    Conjunction_Abridged.addRelPosT(builder, relPosT);
    Conjunction_Abridged.addRelPosR(builder, relPosR);
    Conjunction_Abridged.addCollisionProb(builder, collisionProb);
    Conjunction_Abridged.addMissDistance(builder, missDistance);
    Conjunction_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Conjunction_Abridged.addOrigIdOnOrbit2(builder, origIdOnOrbit2Offset);
    Conjunction_Abridged.addOrigIdOnOrbit1(builder, origIdOnOrbit1Offset);
    Conjunction_Abridged.addSatNo2(builder, satNo2);
    Conjunction_Abridged.addSatNo1(builder, satNo1);
    Conjunction_Abridged.addStateVector2(builder, stateVector2Offset);
    Conjunction_Abridged.addStateVector1(builder, stateVector1Offset);
    Conjunction_Abridged.addCreatedBy(builder, createdByOffset);
    Conjunction_Abridged.addCreatedAt(builder, createdAtOffset);
    Conjunction_Abridged.addDescriptor(builder, descriptorOffset);
    Conjunction_Abridged.addEventId(builder, eventIdOffset);
    Conjunction_Abridged.addOriginator(builder, originatorOffset);
    Conjunction_Abridged.addOrigin(builder, originOffset);
    Conjunction_Abridged.addSource(builder, sourceOffset);
    Conjunction_Abridged.addTransactionId(builder, transactionIdOffset);
    Conjunction_Abridged.addMessageId(builder, messageIdOffset);
    Conjunction_Abridged.addMessageFor(builder, messageForOffset);
    Conjunction_Abridged.addRawFileUri(builder, rawFileUriOffset);
    Conjunction_Abridged.addConcernNotes(builder, concernNotesOffset);
    Conjunction_Abridged.addCcir(builder, ccirOffset);
    Conjunction_Abridged.addComments(builder, commentsOffset);
    Conjunction_Abridged.addLastObTime2(builder, lastObTime2Offset);
    Conjunction_Abridged.addIdStateVector2(builder, idStateVector2Offset);
    Conjunction_Abridged.addLastObTime1(builder, lastObTime1Offset);
    Conjunction_Abridged.addIdStateVector1(builder, idStateVector1Offset);
    Conjunction_Abridged.addVolExitTime(builder, volExitTimeOffset);
    Conjunction_Abridged.addVolEntryTime(builder, volEntryTimeOffset);
    Conjunction_Abridged.addVolShape(builder, volShapeOffset);
    Conjunction_Abridged.addScreenExitTime(builder, screenExitTimeOffset);
    Conjunction_Abridged.addScreenEntryTime(builder, screenEntryTimeOffset);
    Conjunction_Abridged.addEsId2(builder, esId2Offset);
    Conjunction_Abridged.addEphemName2(builder, ephemName2Offset);
    Conjunction_Abridged.addEsId1(builder, esId1Offset);
    Conjunction_Abridged.addEphemName1(builder, ephemName1Offset);
    Conjunction_Abridged.addCollisionProbMethod(builder, collisionProbMethodOffset);
    Conjunction_Abridged.addTca(builder, tcaOffset);
    Conjunction_Abridged.addType(builder, typeOffset);
    Conjunction_Abridged.addIdOnOrbit2(builder, idOnOrbit2Offset);
    Conjunction_Abridged.addIdOnOrbit1(builder, idOnOrbit1Offset);
    Conjunction_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Conjunction_Abridged.addId(builder, idOffset);
    Conjunction_Abridged.addDataMode(builder, dataMode);
    Conjunction_Abridged.addLargeCovWarning(builder, largeCovWarning);
    Conjunction_Abridged.addSmallCovWarning(builder, smallCovWarning);
    Conjunction_Abridged.addLargeRelPosWarning(builder, largeRelPosWarning);
    Conjunction_Abridged.addSmallRelVelWarning(builder, smallRelVelWarning);
    Conjunction_Abridged.addUvwWarn(builder, uvwWarn);
    Conjunction_Abridged.addOwnerContacted(builder, ownerContacted);
    Conjunction_Abridged.addStateDeptNotified(builder, stateDeptNotified);
    return Conjunction_Abridged.endConjunction_Abridged(builder);
  }

  public static void startConjunction_Abridged(FlatBufferBuilder builder) { builder.startTable(68); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdOnOrbit1(FlatBufferBuilder builder, int idOnOrbit1Offset) { builder.addOffset(2, idOnOrbit1Offset, 0); }
  public static void addIdOnOrbit2(FlatBufferBuilder builder, int idOnOrbit2Offset) { builder.addOffset(3, idOnOrbit2Offset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(4, typeOffset, 0); }
  public static void addTca(FlatBufferBuilder builder, int tcaOffset) { builder.addOffset(5, tcaOffset, 0); }
  public static void addMissDistance(FlatBufferBuilder builder, double missDistance) { builder.addDouble(6, missDistance, 0.0); }
  public static void addCollisionProb(FlatBufferBuilder builder, double collisionProb) { builder.addDouble(7, collisionProb, 0.0); }
  public static void addCollisionProbMethod(FlatBufferBuilder builder, int collisionProbMethodOffset) { builder.addOffset(8, collisionProbMethodOffset, 0); }
  public static void addEphemName1(FlatBufferBuilder builder, int ephemName1Offset) { builder.addOffset(9, ephemName1Offset, 0); }
  public static void addEsId1(FlatBufferBuilder builder, int esId1Offset) { builder.addOffset(10, esId1Offset, 0); }
  public static void addEphemName2(FlatBufferBuilder builder, int ephemName2Offset) { builder.addOffset(11, ephemName2Offset, 0); }
  public static void addEsId2(FlatBufferBuilder builder, int esId2Offset) { builder.addOffset(12, esId2Offset, 0); }
  public static void addRelPosR(FlatBufferBuilder builder, double relPosR) { builder.addDouble(13, relPosR, 0.0); }
  public static void addRelPosT(FlatBufferBuilder builder, double relPosT) { builder.addDouble(14, relPosT, 0.0); }
  public static void addRelPosN(FlatBufferBuilder builder, double relPosN) { builder.addDouble(15, relPosN, 0.0); }
  public static void addRelVelMag(FlatBufferBuilder builder, double relVelMag) { builder.addDouble(16, relVelMag, 0.0); }
  public static void addRelVelR(FlatBufferBuilder builder, double relVelR) { builder.addDouble(17, relVelR, 0.0); }
  public static void addRelVelT(FlatBufferBuilder builder, double relVelT) { builder.addDouble(18, relVelT, 0.0); }
  public static void addRelVelN(FlatBufferBuilder builder, double relVelN) { builder.addDouble(19, relVelN, 0.0); }
  public static void addScreenEntryTime(FlatBufferBuilder builder, int screenEntryTimeOffset) { builder.addOffset(20, screenEntryTimeOffset, 0); }
  public static void addScreenExitTime(FlatBufferBuilder builder, int screenExitTimeOffset) { builder.addOffset(21, screenExitTimeOffset, 0); }
  public static void addScreenVolumeX(FlatBufferBuilder builder, double screenVolumeX) { builder.addDouble(22, screenVolumeX, 0.0); }
  public static void addScreenVolumeY(FlatBufferBuilder builder, double screenVolumeY) { builder.addDouble(23, screenVolumeY, 0.0); }
  public static void addScreenVolumeZ(FlatBufferBuilder builder, double screenVolumeZ) { builder.addDouble(24, screenVolumeZ, 0.0); }
  public static void addVolShape(FlatBufferBuilder builder, int volShapeOffset) { builder.addOffset(25, volShapeOffset, 0); }
  public static void addVolEntryTime(FlatBufferBuilder builder, int volEntryTimeOffset) { builder.addOffset(26, volEntryTimeOffset, 0); }
  public static void addVolExitTime(FlatBufferBuilder builder, int volExitTimeOffset) { builder.addOffset(27, volExitTimeOffset, 0); }
  public static void addPenetrationLevelSigma(FlatBufferBuilder builder, double penetrationLevelSigma) { builder.addDouble(28, penetrationLevelSigma, 0.0); }
  public static void addIdStateVector1(FlatBufferBuilder builder, int idStateVector1Offset) { builder.addOffset(29, idStateVector1Offset, 0); }
  public static void addLastObTime1(FlatBufferBuilder builder, int lastObTime1Offset) { builder.addOffset(30, lastObTime1Offset, 0); }
  public static void addCdAoM1(FlatBufferBuilder builder, double cdAoM1) { builder.addDouble(31, cdAoM1, 0.0); }
  public static void addCrAoM1(FlatBufferBuilder builder, double crAoM1) { builder.addDouble(32, crAoM1, 0.0); }
  public static void addThrustAccel1(FlatBufferBuilder builder, double thrustAccel1) { builder.addDouble(33, thrustAccel1, 0.0); }
  public static void addIdStateVector2(FlatBufferBuilder builder, int idStateVector2Offset) { builder.addOffset(34, idStateVector2Offset, 0); }
  public static void addLastObTime2(FlatBufferBuilder builder, int lastObTime2Offset) { builder.addOffset(35, lastObTime2Offset, 0); }
  public static void addCdAoM2(FlatBufferBuilder builder, double cdAoM2) { builder.addDouble(36, cdAoM2, 0.0); }
  public static void addCrAoM2(FlatBufferBuilder builder, double crAoM2) { builder.addDouble(37, crAoM2, 0.0); }
  public static void addThrustAccel2(FlatBufferBuilder builder, double thrustAccel2) { builder.addDouble(38, thrustAccel2, 0.0); }
  public static void addComments(FlatBufferBuilder builder, int commentsOffset) { builder.addOffset(39, commentsOffset, 0); }
  public static void addCcir(FlatBufferBuilder builder, int ccirOffset) { builder.addOffset(40, ccirOffset, 0); }
  public static void addConcernNotes(FlatBufferBuilder builder, int concernNotesOffset) { builder.addOffset(41, concernNotesOffset, 0); }
  public static void addStateDeptNotified(FlatBufferBuilder builder, boolean stateDeptNotified) { builder.addBoolean(42, stateDeptNotified, false); }
  public static void addOwnerContacted(FlatBufferBuilder builder, boolean ownerContacted) { builder.addBoolean(43, ownerContacted, false); }
  public static void addRawFileUri(FlatBufferBuilder builder, int rawFileUriOffset) { builder.addOffset(44, rawFileUriOffset, 0); }
  public static void addMessageFor(FlatBufferBuilder builder, int messageForOffset) { builder.addOffset(45, messageForOffset, 0); }
  public static void addMessageId(FlatBufferBuilder builder, int messageIdOffset) { builder.addOffset(46, messageIdOffset, 0); }
  public static void addUvwWarn(FlatBufferBuilder builder, boolean uvwWarn) { builder.addBoolean(47, uvwWarn, false); }
  public static void addSmallRelVelWarning(FlatBufferBuilder builder, boolean smallRelVelWarning) { builder.addBoolean(48, smallRelVelWarning, false); }
  public static void addLargeRelPosWarning(FlatBufferBuilder builder, boolean largeRelPosWarning) { builder.addBoolean(49, largeRelPosWarning, false); }
  public static void addSmallCovWarning(FlatBufferBuilder builder, boolean smallCovWarning) { builder.addBoolean(50, smallCovWarning, false); }
  public static void addLargeCovWarning(FlatBufferBuilder builder, boolean largeCovWarning) { builder.addBoolean(51, largeCovWarning, false); }
  public static void addTransactionId(FlatBufferBuilder builder, int transactionIdOffset) { builder.addOffset(52, transactionIdOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(53, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(54, originOffset, 0); }
  public static void addOriginator(FlatBufferBuilder builder, int originatorOffset) { builder.addOffset(55, originatorOffset, 0); }
  public static void addEventId(FlatBufferBuilder builder, int eventIdOffset) { builder.addOffset(56, eventIdOffset, 0); }
  public static void addDescriptor(FlatBufferBuilder builder, int descriptorOffset) { builder.addOffset(57, descriptorOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(58, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(59, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(60, createdByOffset, 0); }
  public static void addStateVector1(FlatBufferBuilder builder, int stateVector1Offset) { builder.addOffset(61, stateVector1Offset, 0); }
  public static void addStateVector2(FlatBufferBuilder builder, int stateVector2Offset) { builder.addOffset(62, stateVector2Offset, 0); }
  public static void addSatNo1(FlatBufferBuilder builder, int satNo1) { builder.addInt(63, satNo1, 0); }
  public static void addSatNo2(FlatBufferBuilder builder, int satNo2) { builder.addInt(64, satNo2, 0); }
  public static void addOrigIdOnOrbit1(FlatBufferBuilder builder, int origIdOnOrbit1Offset) { builder.addOffset(65, origIdOnOrbit1Offset, 0); }
  public static void addOrigIdOnOrbit2(FlatBufferBuilder builder, int origIdOnOrbit2Offset) { builder.addOffset(66, origIdOnOrbit2Offset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(67, origNetworkOffset, 0); }
  public static int endConjunction_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishConjunction_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "CONJ"); }
  public static void finishSizePrefixedConjunction_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "CONJ"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Conjunction_Abridged get(int j) { return get(new Conjunction_Abridged(), j); }
    public Conjunction_Abridged get(Conjunction_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

