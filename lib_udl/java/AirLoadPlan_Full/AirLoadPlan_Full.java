// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
 */
@SuppressWarnings("unused")
public final class AirLoadPlan_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirLoadPlan_Full getRootAsAirLoadPlan_Full(ByteBuffer _bb) { return getRootAsAirLoadPlan_Full(_bb, new AirLoadPlan_Full()); }
  public static AirLoadPlan_Full getRootAsAirLoadPlan_Full(ByteBuffer _bb, AirLoadPlan_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirLoadPlan_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRL"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirLoadPlan_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
   * Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String externalId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer externalIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer externalIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The UDL ID of the mission this record is associated with.
   * Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idMission() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idMissionAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer idMissionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The mission number of the mission supporting this load plan.
   * Example: /// Example: AJM123456123
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String missionNumber() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer missionNumberAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer missionNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * The UDL ID of the aircraft sortie this record is associated with.
   * Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSortie() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSortieAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer idSortieInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The leg number of the mission supporting this load plan.
   * Example: /// Example: 200
   * Constraints: No constraints specified.
   */
  public int legNum() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The call sign of the mission supporting this load plan.
   * Example: /// Example: RCH1234
   * Constraints: Minimum length = 0, Maximum length = 24
   */
  public String callSign() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The tail number of the aircraft supporting this load plan.
   * Example: /// Example: 77187
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String tailNumber() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tailNumberAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer tailNumberInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The Model Design Series designation of the aircraft supporting this load plan.
   * Example: /// Example: C17A
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String aircraftMds() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aircraftMdsAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer aircraftMdsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The departure International Civil Organization (ICAO) code of the departure airfield.
   * Example: /// Example: KCHS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String depIcao() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depIcaoAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer depIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
   * Example: /// Example: W99
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String depAirfield() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer depAirfieldAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer depAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
   * Example: /// Example: 2023-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String estDepTime() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estDepTimeAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer estDepTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * The arrival International Civil Organization (ICAO) code of the landing airfield.
   * Example: /// Example: ETAR
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String arrIcao() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrIcaoAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer arrIcaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
   * Example: /// Example: W99
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String arrAirfield() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer arrAirfieldAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer arrAirfieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123Z
   * Constraints: No constraints specified.
   */
  public String estArrTime() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer estArrTimeAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer estArrTimeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * The number of crew members on the aircraft.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int crewSize() { int o = __offset(36); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
   * Example: /// Example: C-1
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String cargoConfig() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cargoConfigAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer cargoConfigInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
   * Example: /// Example: Standard
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String equipConfig() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer equipConfigAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer equipConfigInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
   * Example: /// Example: ER
   * Constraints: Minimum length = 0, Maximum length = 128
   */
  public String tankConfig() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tankConfigAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer tankConfigInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double basicWeight() { int o = __offset(44); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double basicMoment() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The weight of usable fuel on board the aircraft, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double fuelWeight() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double fuelMoment() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated weight of usable fuel upon landing, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double estLandingFuelWeight() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double estLandingFuelMoment() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The basic weight of the aircraft including passengers and equipment, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double operatingWeight() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double operatingMoment() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The weight of the cargo on board the aircraft, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double cargoWeight() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double cargoMoment() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double zeroFuelWeight() { int o = __offset(64); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double zeroFuelMoment() { int o = __offset(66); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
   * Example: /// Example: 39.5
   * Constraints: No constraints specified.
   */
  public double zeroFuelCg() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double grossWeight() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double grossMoment() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
   * Example: /// Example: 38.8
   * Constraints: No constraints specified.
   */
  public double grossCg() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The gross weight of the aircraft upon landing, in kilograms.
   * Example: /// Example: 100.1
   * Constraints: No constraints specified.
   */
  public double landingWeight() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
   * Example: /// Example: 2500.1
   * Constraints: No constraints specified.
   */
  public double landingMoment() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
   * Example: /// Example: 38.2
   * Constraints: No constraints specified.
   */
  public double landingCg() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
   * Example: /// Example: 10
   * Constraints: No constraints specified.
   */
  public int cargoBayFsmin() { int o = __offset(82); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
   * Example: /// Example: 20
   * Constraints: No constraints specified.
   */
  public int cargoBayFsmax() { int o = __offset(84); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Width of the cargo bay, in meters.
   * Example: /// Example: 3.1
   * Constraints: No constraints specified.
   */
  public double cargoBayWidth() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2023-03-21T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(88); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(88, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 88, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(90); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(90, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 90, 1); }
  /**
   * Time the row was last updated in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(92); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(92, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 92, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(94); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(94, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 94, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(96); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(96, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 96, 1); }
  /**
   * Source of the data.
   * Example: /// Example: source
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(98); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(98, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 98, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(100); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(100, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 100, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(102); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(102, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 102, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(104); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirLoadPlan_Full(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int externalIdOffset,
      int idMissionOffset,
      int missionNumberOffset,
      int idSortieOffset,
      int legNum,
      int callSignOffset,
      int tailNumberOffset,
      int aircraftMdsOffset,
      int depIcaoOffset,
      int depAirfieldOffset,
      int estDepTimeOffset,
      int arrIcaoOffset,
      int arrAirfieldOffset,
      int estArrTimeOffset,
      int crewSize,
      int cargoConfigOffset,
      int equipConfigOffset,
      int tankConfigOffset,
      double basicWeight,
      double basicMoment,
      double fuelWeight,
      double fuelMoment,
      double estLandingFuelWeight,
      double estLandingFuelMoment,
      double operatingWeight,
      double operatingMoment,
      double cargoWeight,
      double cargoMoment,
      double zeroFuelWeight,
      double zeroFuelMoment,
      double zeroFuelCg,
      double grossWeight,
      double grossMoment,
      double grossCg,
      double landingWeight,
      double landingMoment,
      double landingCg,
      int cargoBayFsmin,
      int cargoBayFsmax,
      double cargoBayWidth,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(51);
    AirLoadPlan_Full.addCargoBayWidth(builder, cargoBayWidth);
    AirLoadPlan_Full.addLandingCg(builder, landingCg);
    AirLoadPlan_Full.addLandingMoment(builder, landingMoment);
    AirLoadPlan_Full.addLandingWeight(builder, landingWeight);
    AirLoadPlan_Full.addGrossCg(builder, grossCg);
    AirLoadPlan_Full.addGrossMoment(builder, grossMoment);
    AirLoadPlan_Full.addGrossWeight(builder, grossWeight);
    AirLoadPlan_Full.addZeroFuelCg(builder, zeroFuelCg);
    AirLoadPlan_Full.addZeroFuelMoment(builder, zeroFuelMoment);
    AirLoadPlan_Full.addZeroFuelWeight(builder, zeroFuelWeight);
    AirLoadPlan_Full.addCargoMoment(builder, cargoMoment);
    AirLoadPlan_Full.addCargoWeight(builder, cargoWeight);
    AirLoadPlan_Full.addOperatingMoment(builder, operatingMoment);
    AirLoadPlan_Full.addOperatingWeight(builder, operatingWeight);
    AirLoadPlan_Full.addEstLandingFuelMoment(builder, estLandingFuelMoment);
    AirLoadPlan_Full.addEstLandingFuelWeight(builder, estLandingFuelWeight);
    AirLoadPlan_Full.addFuelMoment(builder, fuelMoment);
    AirLoadPlan_Full.addFuelWeight(builder, fuelWeight);
    AirLoadPlan_Full.addBasicMoment(builder, basicMoment);
    AirLoadPlan_Full.addBasicWeight(builder, basicWeight);
    AirLoadPlan_Full.addOrigNetwork(builder, origNetworkOffset);
    AirLoadPlan_Full.addOrigin(builder, originOffset);
    AirLoadPlan_Full.addSource(builder, sourceOffset);
    AirLoadPlan_Full.addSourceDl(builder, sourceDlOffset);
    AirLoadPlan_Full.addUpdatedBy(builder, updatedByOffset);
    AirLoadPlan_Full.addUpdatedAt(builder, updatedAtOffset);
    AirLoadPlan_Full.addCreatedBy(builder, createdByOffset);
    AirLoadPlan_Full.addCreatedAt(builder, createdAtOffset);
    AirLoadPlan_Full.addCargoBayFsmax(builder, cargoBayFsmax);
    AirLoadPlan_Full.addCargoBayFsmin(builder, cargoBayFsmin);
    AirLoadPlan_Full.addTankConfig(builder, tankConfigOffset);
    AirLoadPlan_Full.addEquipConfig(builder, equipConfigOffset);
    AirLoadPlan_Full.addCargoConfig(builder, cargoConfigOffset);
    AirLoadPlan_Full.addCrewSize(builder, crewSize);
    AirLoadPlan_Full.addEstArrTime(builder, estArrTimeOffset);
    AirLoadPlan_Full.addArrAirfield(builder, arrAirfieldOffset);
    AirLoadPlan_Full.addArrIcao(builder, arrIcaoOffset);
    AirLoadPlan_Full.addEstDepTime(builder, estDepTimeOffset);
    AirLoadPlan_Full.addDepAirfield(builder, depAirfieldOffset);
    AirLoadPlan_Full.addDepIcao(builder, depIcaoOffset);
    AirLoadPlan_Full.addAircraftMds(builder, aircraftMdsOffset);
    AirLoadPlan_Full.addTailNumber(builder, tailNumberOffset);
    AirLoadPlan_Full.addCallSign(builder, callSignOffset);
    AirLoadPlan_Full.addLegNum(builder, legNum);
    AirLoadPlan_Full.addIdSortie(builder, idSortieOffset);
    AirLoadPlan_Full.addMissionNumber(builder, missionNumberOffset);
    AirLoadPlan_Full.addIdMission(builder, idMissionOffset);
    AirLoadPlan_Full.addExternalId(builder, externalIdOffset);
    AirLoadPlan_Full.addClassificationMarking(builder, classificationMarkingOffset);
    AirLoadPlan_Full.addId(builder, idOffset);
    AirLoadPlan_Full.addDataMode(builder, dataMode);
    return AirLoadPlan_Full.endAirLoadPlan_Full(builder);
  }

  public static void startAirLoadPlan_Full(FlatBufferBuilder builder) { builder.startTable(51); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addExternalId(FlatBufferBuilder builder, int externalIdOffset) { builder.addOffset(2, externalIdOffset, 0); }
  public static void addIdMission(FlatBufferBuilder builder, int idMissionOffset) { builder.addOffset(3, idMissionOffset, 0); }
  public static void addMissionNumber(FlatBufferBuilder builder, int missionNumberOffset) { builder.addOffset(4, missionNumberOffset, 0); }
  public static void addIdSortie(FlatBufferBuilder builder, int idSortieOffset) { builder.addOffset(5, idSortieOffset, 0); }
  public static void addLegNum(FlatBufferBuilder builder, int legNum) { builder.addInt(6, legNum, 0); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(7, callSignOffset, 0); }
  public static void addTailNumber(FlatBufferBuilder builder, int tailNumberOffset) { builder.addOffset(8, tailNumberOffset, 0); }
  public static void addAircraftMds(FlatBufferBuilder builder, int aircraftMdsOffset) { builder.addOffset(9, aircraftMdsOffset, 0); }
  public static void addDepIcao(FlatBufferBuilder builder, int depIcaoOffset) { builder.addOffset(10, depIcaoOffset, 0); }
  public static void addDepAirfield(FlatBufferBuilder builder, int depAirfieldOffset) { builder.addOffset(11, depAirfieldOffset, 0); }
  public static void addEstDepTime(FlatBufferBuilder builder, int estDepTimeOffset) { builder.addOffset(12, estDepTimeOffset, 0); }
  public static void addArrIcao(FlatBufferBuilder builder, int arrIcaoOffset) { builder.addOffset(13, arrIcaoOffset, 0); }
  public static void addArrAirfield(FlatBufferBuilder builder, int arrAirfieldOffset) { builder.addOffset(14, arrAirfieldOffset, 0); }
  public static void addEstArrTime(FlatBufferBuilder builder, int estArrTimeOffset) { builder.addOffset(15, estArrTimeOffset, 0); }
  public static void addCrewSize(FlatBufferBuilder builder, int crewSize) { builder.addInt(16, crewSize, 0); }
  public static void addCargoConfig(FlatBufferBuilder builder, int cargoConfigOffset) { builder.addOffset(17, cargoConfigOffset, 0); }
  public static void addEquipConfig(FlatBufferBuilder builder, int equipConfigOffset) { builder.addOffset(18, equipConfigOffset, 0); }
  public static void addTankConfig(FlatBufferBuilder builder, int tankConfigOffset) { builder.addOffset(19, tankConfigOffset, 0); }
  public static void addBasicWeight(FlatBufferBuilder builder, double basicWeight) { builder.addDouble(20, basicWeight, 0.0); }
  public static void addBasicMoment(FlatBufferBuilder builder, double basicMoment) { builder.addDouble(21, basicMoment, 0.0); }
  public static void addFuelWeight(FlatBufferBuilder builder, double fuelWeight) { builder.addDouble(22, fuelWeight, 0.0); }
  public static void addFuelMoment(FlatBufferBuilder builder, double fuelMoment) { builder.addDouble(23, fuelMoment, 0.0); }
  public static void addEstLandingFuelWeight(FlatBufferBuilder builder, double estLandingFuelWeight) { builder.addDouble(24, estLandingFuelWeight, 0.0); }
  public static void addEstLandingFuelMoment(FlatBufferBuilder builder, double estLandingFuelMoment) { builder.addDouble(25, estLandingFuelMoment, 0.0); }
  public static void addOperatingWeight(FlatBufferBuilder builder, double operatingWeight) { builder.addDouble(26, operatingWeight, 0.0); }
  public static void addOperatingMoment(FlatBufferBuilder builder, double operatingMoment) { builder.addDouble(27, operatingMoment, 0.0); }
  public static void addCargoWeight(FlatBufferBuilder builder, double cargoWeight) { builder.addDouble(28, cargoWeight, 0.0); }
  public static void addCargoMoment(FlatBufferBuilder builder, double cargoMoment) { builder.addDouble(29, cargoMoment, 0.0); }
  public static void addZeroFuelWeight(FlatBufferBuilder builder, double zeroFuelWeight) { builder.addDouble(30, zeroFuelWeight, 0.0); }
  public static void addZeroFuelMoment(FlatBufferBuilder builder, double zeroFuelMoment) { builder.addDouble(31, zeroFuelMoment, 0.0); }
  public static void addZeroFuelCg(FlatBufferBuilder builder, double zeroFuelCg) { builder.addDouble(32, zeroFuelCg, 0.0); }
  public static void addGrossWeight(FlatBufferBuilder builder, double grossWeight) { builder.addDouble(33, grossWeight, 0.0); }
  public static void addGrossMoment(FlatBufferBuilder builder, double grossMoment) { builder.addDouble(34, grossMoment, 0.0); }
  public static void addGrossCg(FlatBufferBuilder builder, double grossCg) { builder.addDouble(35, grossCg, 0.0); }
  public static void addLandingWeight(FlatBufferBuilder builder, double landingWeight) { builder.addDouble(36, landingWeight, 0.0); }
  public static void addLandingMoment(FlatBufferBuilder builder, double landingMoment) { builder.addDouble(37, landingMoment, 0.0); }
  public static void addLandingCg(FlatBufferBuilder builder, double landingCg) { builder.addDouble(38, landingCg, 0.0); }
  public static void addCargoBayFsmin(FlatBufferBuilder builder, int cargoBayFsmin) { builder.addInt(39, cargoBayFsmin, 0); }
  public static void addCargoBayFsmax(FlatBufferBuilder builder, int cargoBayFsmax) { builder.addInt(40, cargoBayFsmax, 0); }
  public static void addCargoBayWidth(FlatBufferBuilder builder, double cargoBayWidth) { builder.addDouble(41, cargoBayWidth, 0.0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(42, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(43, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(44, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(45, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(46, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(47, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(48, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(49, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(50, dataMode, 0); }
  public static int endAirLoadPlan_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirLoadPlan_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRL"); }
  public static void finishSizePrefixedAirLoadPlan_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRL"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirLoadPlan_Full get(int j) { return get(new AirLoadPlan_Full(), j); }
    public AirLoadPlan_Full get(AirLoadPlan_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

