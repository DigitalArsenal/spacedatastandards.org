// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Model representation of client generated notification data.  Contains a message type and message body field to store notification information.
 */
@SuppressWarnings("unused")
public final class Notification_Ingest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Notification_Ingest getRootAsNotification_Ingest(ByteBuffer _bb) { return getRootAsNotification_Ingest(_bb, new Notification_Ingest()); }
  public static Notification_Ingest getRootAsNotification_Ingest(ByteBuffer _bb, Notification_Ingest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Notification_IngestBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "NOTI"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Notification_Ingest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: NOTIFICATION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Source provided message type.
   * Example: /// Example: msgType
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String msgType() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgTypeAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer msgTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * The message body content as a text string, XML, JSON, etc. If JSON is used for the msgBody, it should be 'inline' with the notification message JSON (without quotation marks or escape characters). Size of the msg body cannot be over 1MB.
   * Example: /// Example: msgBody
   * Constraints: Minimum length = 1, Maximum length = 1000000
   */
  public String msgBody() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer msgBodyAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer msgBodyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Optional array of provider/source specific tags for this data, used for implementing data owner conditional access controls to restrict access to the data.
   * Example: /// Example: ['TAG1', 'TAG2']
   * Constraints: No constraints specified.
   */
  public String tags(int j) { int o = __offset(20); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tagsLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tagsVector() { return tagsVector(new StringVector()); }
  public StringVector tagsVector(StringVector obj) { int o = __offset(20); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * The date and time the notification was created, auto-generated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The user that created the notification.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }

  public static int createNotification_Ingest(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int msgTypeOffset,
      int msgBodyOffset,
      byte dataMode,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int tagsOffset,
      int createdAtOffset,
      int createdByOffset,
      int origNetworkOffset) {
    builder.startTable(12);
    Notification_Ingest.addOrigNetwork(builder, origNetworkOffset);
    Notification_Ingest.addCreatedBy(builder, createdByOffset);
    Notification_Ingest.addCreatedAt(builder, createdAtOffset);
    Notification_Ingest.addTags(builder, tagsOffset);
    Notification_Ingest.addOrigin(builder, originOffset);
    Notification_Ingest.addSource(builder, sourceOffset);
    Notification_Ingest.addSourceDl(builder, sourceDlOffset);
    Notification_Ingest.addMsgBody(builder, msgBodyOffset);
    Notification_Ingest.addMsgType(builder, msgTypeOffset);
    Notification_Ingest.addClassificationMarking(builder, classificationMarkingOffset);
    Notification_Ingest.addId(builder, idOffset);
    Notification_Ingest.addDataMode(builder, dataMode);
    return Notification_Ingest.endNotification_Ingest(builder);
  }

  public static void startNotification_Ingest(FlatBufferBuilder builder) { builder.startTable(12); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addMsgType(FlatBufferBuilder builder, int msgTypeOffset) { builder.addOffset(2, msgTypeOffset, 0); }
  public static void addMsgBody(FlatBufferBuilder builder, int msgBodyOffset) { builder.addOffset(3, msgBodyOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(4, dataMode, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(5, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(6, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(7, originOffset, 0); }
  public static void addTags(FlatBufferBuilder builder, int tagsOffset) { builder.addOffset(8, tagsOffset, 0); }
  public static int createTagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(9, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(10, createdByOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(11, origNetworkOffset, 0); }
  public static int endNotification_Ingest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishNotification_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "NOTI"); }
  public static void finishSizePrefixedNotification_IngestBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "NOTI"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Notification_Ingest get(int j) { return get(new Notification_Ingest(), j); }
    public Notification_Ingest get(Notification_Ingest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

