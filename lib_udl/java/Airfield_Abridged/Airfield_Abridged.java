// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Properties and characteristics of an airfield, which includes location, airfield codes, suitability codes, and remarks.
 */
@SuppressWarnings("unused")
public final class Airfield_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static Airfield_Abridged getRootAsAirfield_Abridged(ByteBuffer _bb) { return getRootAsAirfield_Abridged(_bb, new Airfield_Abridged()); }
  public static Airfield_Abridged getRootAsAirfield_Abridged(ByteBuffer _bb, Airfield_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean Airfield_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRF"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Airfield_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: 3f28f60b-3a50-2aef-ac88-8e9d0e39912b
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The ID of the parent site.
   * Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSite() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSiteAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idSiteInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Alternate Airfield identifier provided by source.
   * Example: /// Example: 45301
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String altAirfieldId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer altAirfieldIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer altAirfieldIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * The airfield's World Area Code installation number (WAC-INNR).
   * Example: /// Example: 0409-00039
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String wacInnr() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer wacInnrAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer wacInnrInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Air Mobility Command (AMC) Zone availability Report identifier.
   * Example: /// Example: 231
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String zarId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer zarIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer zarIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) code of the airfield.
   * Example: /// Example: KCOS
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String icao() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer icaoAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer icaoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * The International Aviation Transport Association (IATA) code of the airfield.
   * Example: /// Example: AAA
   * Constraints: Minimum length = 0, Maximum length = 3
   */
  public String iata() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer iataAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer iataInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * The Federal Aviation Administration (FAA) location identifier of this airfield.
   * Example: /// Example: FAA1
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String faa() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer faaAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer faaInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * The host nation code of this airfield, used for non-DoD/FAA locations.
   * Example: /// Example: ZPU
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String hostNatCode() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hostNatCodeAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer hostNatCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * The name of the airfield.
   * Example: /// Example: USAF Academy AFLD
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String name() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * The airfield activity use type (e.g. Commercial, Airport, Heliport, Gliderport, etc.).
   * Example: /// Example: Commercial
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String type() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
   * Example: /// Example: 45.23
   * Constraints: No constraints specified.
   */
  public double lat() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
   * Example: /// Example: 179.1
   * Constraints: No constraints specified.
   */
  public double lon() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Elevation of the airfield above mean sea level, in feet.
   * Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
   * Example: /// Example: 33.562
   * Constraints: No constraints specified.
   */
  public double elevFt() { int o = __offset(32); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Elevation of the airfield above mean sea level, in meters.
   * Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
   * Example: /// Example: 10.29
   * Constraints: No constraints specified.
   */
  public double elevM() { int o = __offset(34); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The magnetic declination/variation of the airfield's location from true north, in degrees.  Positive values east of true north and negative values west of true north.
   * Example: /// Example: 7.35
   * Constraints: No constraints specified.
   */
  public double magDec() { int o = __offset(36); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Region where the airfield resides.
   * Example: /// Example: North America
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String regionName() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer regionNameAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer regionNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
   * Example: /// Example: US
   * Constraints: Minimum length = 0, Maximum length = 4
   */
  public String countryCode() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer countryCodeAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer countryCodeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Closest city to the airfield's location.
   * Example: /// Example: Colorado Springs
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String city() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer cityAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer cityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * State or province of the airfield's location.
   * Example: /// Example: Colorado
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String state() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer stateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Air Force geographic location code of the airfield.
   * Example: /// Example: XLSX
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public String geoloc() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer geolocAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer geolocInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Time difference between the location of the airfield and the Greenwich Mean Time (GMT), expressed as +/-HH:MM. Time zones east of Greenwich have positive offsets and time zones west of Greenwich are negative.
   * Example: /// Example: -4:30
   * Constraints: Minimum length = 0, Maximum length = 6
   */
  public String gmtOffset() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gmtOffsetAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer gmtOffsetInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Associated suitability codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
   * Example: /// Example: ABCDEF
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String suitabilityCodes() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer suitabilityCodesAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer suitabilityCodesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * Applicable miscellaneous codes according to the Airfield Suitability and Restrictions Report (ASRR) for this airfield.
   * Example: /// Example: AMZ
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String miscCodes() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer miscCodesAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer miscCodesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * The number of runways at the site.
   * Example: /// Example: 5
   * Constraints: No constraints specified.
   */
  public int runways() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The length of the longest runway at this airfield in feet.
   * Example: /// Example: 1000
   * Constraints: No constraints specified.
   */
  public int maxRunwayLength() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The URL link to information about airfield.
   * Example: /// Example: URL Link to the Airfield
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String infoUrl() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer infoUrlAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer infoUrlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(72); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createAirfield_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idSiteOffset,
      int altAirfieldIdOffset,
      int wacInnrOffset,
      int zarIdOffset,
      int icaoOffset,
      int iataOffset,
      int faaOffset,
      int hostNatCodeOffset,
      int nameOffset,
      int typeOffset,
      double lat,
      double lon,
      double elevFt,
      double elevM,
      double magDec,
      int regionNameOffset,
      int countryCodeOffset,
      int cityOffset,
      int stateOffset,
      int geolocOffset,
      int gmtOffsetOffset,
      int suitabilityCodesOffset,
      int miscCodesOffset,
      int runways,
      int maxRunwayLength,
      int infoUrlOffset,
      int createdAtOffset,
      int createdByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode) {
    builder.startTable(35);
    Airfield_Abridged.addMagDec(builder, magDec);
    Airfield_Abridged.addElevM(builder, elevM);
    Airfield_Abridged.addElevFt(builder, elevFt);
    Airfield_Abridged.addLon(builder, lon);
    Airfield_Abridged.addLat(builder, lat);
    Airfield_Abridged.addOrigNetwork(builder, origNetworkOffset);
    Airfield_Abridged.addOrigin(builder, originOffset);
    Airfield_Abridged.addSource(builder, sourceOffset);
    Airfield_Abridged.addSourceDl(builder, sourceDlOffset);
    Airfield_Abridged.addCreatedBy(builder, createdByOffset);
    Airfield_Abridged.addCreatedAt(builder, createdAtOffset);
    Airfield_Abridged.addInfoUrl(builder, infoUrlOffset);
    Airfield_Abridged.addMaxRunwayLength(builder, maxRunwayLength);
    Airfield_Abridged.addRunways(builder, runways);
    Airfield_Abridged.addMiscCodes(builder, miscCodesOffset);
    Airfield_Abridged.addSuitabilityCodes(builder, suitabilityCodesOffset);
    Airfield_Abridged.addGmtOffset(builder, gmtOffsetOffset);
    Airfield_Abridged.addGeoloc(builder, geolocOffset);
    Airfield_Abridged.addState(builder, stateOffset);
    Airfield_Abridged.addCity(builder, cityOffset);
    Airfield_Abridged.addCountryCode(builder, countryCodeOffset);
    Airfield_Abridged.addRegionName(builder, regionNameOffset);
    Airfield_Abridged.addType(builder, typeOffset);
    Airfield_Abridged.addName(builder, nameOffset);
    Airfield_Abridged.addHostNatCode(builder, hostNatCodeOffset);
    Airfield_Abridged.addFaa(builder, faaOffset);
    Airfield_Abridged.addIata(builder, iataOffset);
    Airfield_Abridged.addIcao(builder, icaoOffset);
    Airfield_Abridged.addZarId(builder, zarIdOffset);
    Airfield_Abridged.addWacInnr(builder, wacInnrOffset);
    Airfield_Abridged.addAltAirfieldId(builder, altAirfieldIdOffset);
    Airfield_Abridged.addIdSite(builder, idSiteOffset);
    Airfield_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    Airfield_Abridged.addId(builder, idOffset);
    Airfield_Abridged.addDataMode(builder, dataMode);
    return Airfield_Abridged.endAirfield_Abridged(builder);
  }

  public static void startAirfield_Abridged(FlatBufferBuilder builder) { builder.startTable(35); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdSite(FlatBufferBuilder builder, int idSiteOffset) { builder.addOffset(2, idSiteOffset, 0); }
  public static void addAltAirfieldId(FlatBufferBuilder builder, int altAirfieldIdOffset) { builder.addOffset(3, altAirfieldIdOffset, 0); }
  public static void addWacInnr(FlatBufferBuilder builder, int wacInnrOffset) { builder.addOffset(4, wacInnrOffset, 0); }
  public static void addZarId(FlatBufferBuilder builder, int zarIdOffset) { builder.addOffset(5, zarIdOffset, 0); }
  public static void addIcao(FlatBufferBuilder builder, int icaoOffset) { builder.addOffset(6, icaoOffset, 0); }
  public static void addIata(FlatBufferBuilder builder, int iataOffset) { builder.addOffset(7, iataOffset, 0); }
  public static void addFaa(FlatBufferBuilder builder, int faaOffset) { builder.addOffset(8, faaOffset, 0); }
  public static void addHostNatCode(FlatBufferBuilder builder, int hostNatCodeOffset) { builder.addOffset(9, hostNatCodeOffset, 0); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(10, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(11, typeOffset, 0); }
  public static void addLat(FlatBufferBuilder builder, double lat) { builder.addDouble(12, lat, 0.0); }
  public static void addLon(FlatBufferBuilder builder, double lon) { builder.addDouble(13, lon, 0.0); }
  public static void addElevFt(FlatBufferBuilder builder, double elevFt) { builder.addDouble(14, elevFt, 0.0); }
  public static void addElevM(FlatBufferBuilder builder, double elevM) { builder.addDouble(15, elevM, 0.0); }
  public static void addMagDec(FlatBufferBuilder builder, double magDec) { builder.addDouble(16, magDec, 0.0); }
  public static void addRegionName(FlatBufferBuilder builder, int regionNameOffset) { builder.addOffset(17, regionNameOffset, 0); }
  public static void addCountryCode(FlatBufferBuilder builder, int countryCodeOffset) { builder.addOffset(18, countryCodeOffset, 0); }
  public static void addCity(FlatBufferBuilder builder, int cityOffset) { builder.addOffset(19, cityOffset, 0); }
  public static void addState(FlatBufferBuilder builder, int stateOffset) { builder.addOffset(20, stateOffset, 0); }
  public static void addGeoloc(FlatBufferBuilder builder, int geolocOffset) { builder.addOffset(21, geolocOffset, 0); }
  public static void addGmtOffset(FlatBufferBuilder builder, int gmtOffsetOffset) { builder.addOffset(22, gmtOffsetOffset, 0); }
  public static void addSuitabilityCodes(FlatBufferBuilder builder, int suitabilityCodesOffset) { builder.addOffset(23, suitabilityCodesOffset, 0); }
  public static void addMiscCodes(FlatBufferBuilder builder, int miscCodesOffset) { builder.addOffset(24, miscCodesOffset, 0); }
  public static void addRunways(FlatBufferBuilder builder, int runways) { builder.addInt(25, runways, 0); }
  public static void addMaxRunwayLength(FlatBufferBuilder builder, int maxRunwayLength) { builder.addInt(26, maxRunwayLength, 0); }
  public static void addInfoUrl(FlatBufferBuilder builder, int infoUrlOffset) { builder.addOffset(27, infoUrlOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(28, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(29, createdByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(30, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(31, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(32, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(33, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(34, dataMode, 0); }
  public static int endAirfield_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirfield_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRF"); }
  public static void finishSizePrefixedAirfield_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRF"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Airfield_Abridged get(int j) { return get(new Airfield_Abridged(), j); }
    public Airfield_Abridged get(Airfield_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

