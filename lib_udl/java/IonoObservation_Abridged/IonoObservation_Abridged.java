// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// These services provide operations for posting and querying ionospheric observation data. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
 */
@SuppressWarnings("unused")
public final class IonoObservation_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static IonoObservation_Abridged getRootAsIonoObservation_Abridged(ByteBuffer _bb) { return getRootAsIonoObservation_Abridged(_bb, new IonoObservation_Abridged()); }
  public static IonoObservation_Abridged getRootAsIonoObservation_Abridged(ByteBuffer _bb, IonoObservation_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean IonoObservation_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "IONO"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IonoObservation_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: IONOOBSERVATION-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Unique identifier of the reporting sensor.
   * Example: /// Example: SENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idSensor() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idSensorAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer idSensorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
   * Example: /// Example: ORIGSENSOR-ID
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origSensorId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origSensorIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer origSensorIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Ionosonde hardware type or data collection type together with possible additional descriptors.
   * Example: /// Example: Example hardware type
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String system() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer systemAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer systemInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Name of the algorithm used for the electron density profile.
   * Example: /// Example: NH
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String neProfileName() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer neProfileNameAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer neProfileNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Version of the algorithm used for the electron density profile.
   * Example: /// Example: 4.32
   * Constraints: No constraints specified.
   */
  public double neProfileVersion() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String scalerInfo() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer scalerInfoAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer scalerInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String densityProfile() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer densityProfileAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer densityProfileInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * URSI code for station or stations producing the ionosonde.
   * Example: /// Example: STATION-ID
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String stationId() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stationIdAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer stationIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Sounding Start time in ISO8601 UTC format.
   * Example: /// Example: 2021-01-01T01:01:01.123456Z
   * Constraints: No constraints specified.
   */
  public String startTimeUtc() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer startTimeUtcAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer startTimeUtcInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Names of settings.
   * Example: /// Example: Example settings
   * Constraints: Minimum length = 1, Maximum length = 1024
   */
  public String systemInfo() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer systemInfoAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer systemInfoInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Details concerning the composition/intention/interpretation/audience/etc. of any data recorded here. This field may contain all of the intended information e.g. info on signal waveforms used, antenna setup, etc. OR may describe the data/settings to be provided in the “data” field.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String systemNotes() { int o = __offset(28); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer systemNotesAsByteBuffer() { return __vector_as_bytebuffer(28, 1); }
  public ByteBuffer systemNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 28, 1); }
  /**
   * List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
   * Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
   * Constraints: No constraints specified.
   */
  public String transmitCoordinates(int j) { int o = __offset(30); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int transmitCoordinatesLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public StringVector transmitCoordinatesVector() { return transmitCoordinatesVector(new StringVector()); }
  public StringVector transmitCoordinatesVector(StringVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Enums: Mobile, Static.
   * Example: /// Example: Mobile
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public byte transmitSensorType() { int o = __offset(32); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * List of Geodetic Latitude, Longitude, and Altitude coordinates in km of the receiver. Coordinates List must always have 3 elements. Valid ranges are -90.0 to 90.0 for Latitude and -180.0 to 180.0 for Longitude. Altitude is in km and its value must be 0 or greater.
   * Example: /// Example: [[45.5, 179.3, 35.6], [-80.2, -20.5, 43.2]]
   * Constraints: No constraints specified.
   */
  public String receiveCoordinates(int j) { int o = __offset(34); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int receiveCoordinatesLength() { int o = __offset(34); return o != 0 ? __vector_len(o) : 0; }
  public StringVector receiveCoordinatesVector() { return receiveCoordinatesVector(new StringVector()); }
  public StringVector receiveCoordinatesVector(StringVector obj) { int o = __offset(34); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Enums: Mobile, Static.
   * Example: /// Example: Mobile
   * Constraints: Minimum length = 0, Maximum length = 16
   */
  public byte receiveSensorType() { int o = __offset(36); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String antennaElementPosition() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer antennaElementPositionAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer antennaElementPositionInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Enums: J2000, ECR/ECEF, TEME, GCRF, WGS84 (GEODetic lat, long, alt), GEOCentric (lat, long, radii).
   * Example: /// Example: J2000
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public byte antennaElementPositionCoordinateSystem() { int o = __offset(40); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String power() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer powerAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer powerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String range() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer rangeAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer rangeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String frequency() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer frequencyAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer frequencyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String polarization() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer polarizationAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer polarizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String azimuth() { int o = __offset(50); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer azimuthAsByteBuffer() { return __vector_as_bytebuffer(50, 1); }
  public ByteBuffer azimuthInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 50, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String elevation() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer elevationAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer elevationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Array of restricted frequencies.
   * Example: /// Example: [12.5, 34.5, 45.3]
   * Constraints: No constraints specified.
   */
  public String restrictedFrequency(int j) { int o = __offset(54); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int restrictedFrequencyLength() { int o = __offset(54); return o != 0 ? __vector_len(o) : 0; }
  public StringVector restrictedFrequencyVector() { return restrictedFrequencyVector(new StringVector()); }
  public StringVector restrictedFrequencyVector(StringVector obj) { int o = __offset(54); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Notes for the restrictedFrequency data.
   * Example: /// Example: Example notes
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String restrictedFrequencyNotes() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer restrictedFrequencyNotesAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer restrictedFrequencyNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String doppler() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dopplerAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer dopplerInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String time() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer timeAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer timeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String stokes() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stokesAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer stokesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String amplitude() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amplitudeAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer amplitudeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String phase() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer phaseAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer phaseInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * The ordinary wave critical frequency of the highest stratification in the F region, specified in MHz. URSI ID: 00.
   * Example: /// Example: 6.75
   * Constraints: No constraints specified.
   */
  public double foF2() { int o = __offset(68); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The ordinary wave F1 critical frequency, in MHz. URSI ID: 10.
   * Example: /// Example: 8.2
   * Constraints: No constraints specified.
   */
  public double foF1() { int o = __offset(70); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The extraordinary wave F2 critical frequency, in MHz. URSI ID: 01.
   * Example: /// Example: 4.5
   * Constraints: No constraints specified.
   */
  public double fxF2() { int o = __offset(72); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The extraordinary wave F1 critical frequency, in MHz. URSI ID: 11.
   * Example: /// Example: 4.2
   * Constraints: No constraints specified.
   */
  public double fxF1() { int o = __offset(74); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * MUF(D)/foF2.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double md() { int o = __offset(76); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Lowest usable frequency.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double luf() { int o = __offset(78); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Maximum Usable Frequency for ground distance D in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double mufd() { int o = __offset(80); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Lowest frequency at which echo traces are observed on the ionogram, in MHz. URSI ID: 42.
   * Example: /// Example: 2.025
   * Constraints: No constraints specified.
   */
  public double fmin() { int o = __offset(82); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Highest ordinary wave frequency at which a mainly continuous Es trace is observed, in MHz. URSI ID: 30.
   * Example: /// Example: 2.35
   * Constraints: No constraints specified.
   */
  public double foEs() { int o = __offset(84); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum frequency of F layer echoes in MHz. URSI ID: 80.
   * Example: /// Example: 2.7
   * Constraints: No constraints specified.
   */
  public double fminF() { int o = __offset(86); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum frequency of E layer echoes in MHz. URSI ID: 81.
   * Example: /// Example: 2.025
   * Constraints: No constraints specified.
   */
  public double fminE() { int o = __offset(88); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The ordinary wave critical frequency of the lowest thick layer which causes a discontinuity, in MHz. URSI ID: 20.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double foE() { int o = __offset(90); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The extraordinary wave E critical frequency, in MHz. URSI ID: 21.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double fxE() { int o = __offset(92); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The highest frequency of F-trace in MHz. Note: fxI is with capital i. URSI ID: 51.
   * Example: /// Example: 7.525
   * Constraints: No constraints specified.
   */
  public double fxI() { int o = __offset(94); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum virtual height of the ordinary wave trace taken as a whole, in km. URSI ID: 16.
   * Example: /// Example: 238.5
   * Constraints: No constraints specified.
   */
  public double hprimeF() { int o = __offset(96); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum virtual height of ordinary wave trace for the highest stable stratification in the F region in km. URSI ID: 4.
   * Example: /// Example: 238.5
   * Constraints: No constraints specified.
   */
  public double hprimeF2() { int o = __offset(98); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum virtual height of reflection at a point where the trace is horizontal in the F region in km. URSI ID: 14.
   * Example: /// Example: 230.1
   * Constraints: No constraints specified.
   */
  public double hprimeF1() { int o = __offset(100); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum virtual height of the normal E layer trace in km. URSI ID: 24.
   * Example: /// Example: 98.47
   * Constraints: No constraints specified.
   */
  public double hprimeE() { int o = __offset(102); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The minimum height of the trace used to give foEs in km. URSI ID: 34.
   * Example: /// Example: 95
   * Constraints: No constraints specified.
   */
  public double hprimeEs() { int o = __offset(104); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Peak height of E-layer in km. URSI ID: 90.
   * Example: /// Example: 91.744
   * Constraints: No constraints specified.
   */
  public double zmE() { int o = __offset(106); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Parabolic E layer semi-thickness in km. URSI ID: 83.
   * Example: /// Example: 1.722
   * Constraints: No constraints specified.
   */
  public double yE() { int o = __offset(108); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average range spread of F layer in km. URSI ID: 84.
   * Example: /// Example: 1.83
   * Constraints: No constraints specified.
   */
  public double qf() { int o = __offset(110); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Average range spread of E layer in km. URSI ID: 85.
   * Example: /// Example: 0.95
   * Constraints: No constraints specified.
   */
  public double qe() { int o = __offset(112); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Lowering of F trace to the leading edge in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double downF() { int o = __offset(114); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Lowering of E trace to the leading edge in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double downE() { int o = __offset(116); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Lowering of Es trace to the leading edge in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double downEs() { int o = __offset(118); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Frequency spread between fxF2 and FxI in MHz. URSI ID: 86.
   * Example: /// Example: 0.075
   * Constraints: No constraints specified.
   */
  public double ff() { int o = __offset(120); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Frequency spread beyond foE in MHz. URSI ID: 87.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double fe() { int o = __offset(122); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Distance for MUF calculation in km.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double d() { int o = __offset(124); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * MUF/OblFactor in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double fmuf() { int o = __offset(126); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Virtual height at MUF/OblFactor frequency in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double hprimefMuf() { int o = __offset(128); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Adjustment to the scaled foF2 during profile inversion in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double deltafoF2() { int o = __offset(130); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Predicted value of foE in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double foEp() { int o = __offset(132); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The frequency at which hprimeF is measured in MHz. URSI ID: 61.
   * Example: /// Example: 2.5
   * Constraints: No constraints specified.
   */
  public double fhprimeF() { int o = __offset(134); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The frequency at which hprimeF2 is measured in MHz. URSI ID: 60.
   * Example: /// Example: 2.5
   * Constraints: No constraints specified.
   */
  public double fhprimeF2() { int o = __offset(136); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Predicted value of foF1 in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double foF1p() { int o = __offset(138); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Predicted value of foF2 in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double foF2p() { int o = __offset(140); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * True height of the F2 peak in km. URSI ID: AE.
   * Example: /// Example: 240.498
   * Constraints: No constraints specified.
   */
  public double hmF2() { int o = __offset(142); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * True height of the F1 peak in km. URSI ID: BE.
   * Example: /// Example: 230.128
   * Constraints: No constraints specified.
   */
  public double hmF1() { int o = __offset(144); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * True height of the E peak in km. URSI ID: CE.
   * Example: /// Example: 215.643
   * Constraints: No constraints specified.
   */
  public double hmE() { int o = __offset(146); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * True height at half peak electron density in the F2 layer in km. URSI ID: 93.
   * Example: /// Example: 240.498
   * Constraints: No constraints specified.
   */
  public double zhalfNm() { int o = __offset(148); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum frequency of Es layer in MHz.
   * Example: /// Example: 1.1
   * Constraints: No constraints specified.
   */
  public double fminEs() { int o = __offset(150); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Parabolic F2 layer semi-thickness in km. URSI ID: 94.
   * Example: /// Example: 62.178
   * Constraints: No constraints specified.
   */
  public double yF2() { int o = __offset(152); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Parabolic F1 layer semi-thickness in km. URSI ID: 95.
   * Example: /// Example: 55.645
   * Constraints: No constraints specified.
   */
  public double yF1() { int o = __offset(154); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Total Ionospheric Electron Content *10^16e/m^2. 1 TEC Unit (TECU) = 10^16 electrons/m^2. URSI ID: 72.
   * Example: /// Example: 24.673
   * Constraints: No constraints specified.
   */
  public double tec() { int o = __offset(156); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Effective scale height at hmF2 Titheridge method in km. URSI ID: 69.
   * Example: /// Example: 35.613
   * Constraints: No constraints specified.
   */
  public double scaleHeightF2Peak() { int o = __offset(158); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * IRI thickness parameter in km. URSI ID: D0.
   * Example: /// Example: 68.07
   * Constraints: No constraints specified.
   */
  public double b0() { int o = __offset(160); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * IRI profile shape parameter. URSI ID: D1.
   * Example: /// Example: 1.87
   * Constraints: No constraints specified.
   */
  public double b1() { int o = __offset(162); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * IRI profile shape parameter, F1 layer. URSI ID: D2.
   * Example: /// Example: 1.94
   * Constraints: No constraints specified.
   */
  public double d1() { int o = __offset(164); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Critical frequency of night time auroral E layer in MHz. URSI ID: 23.
   * Example: /// Example: 45.764
   * Constraints: No constraints specified.
   */
  public double foEa() { int o = __offset(166); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum virtual height of night time auroral E layer trace in km. URSI ID: 27.
   * Example: /// Example: 102.6
   * Constraints: No constraints specified.
   */
  public double hprimeEa() { int o = __offset(168); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Highest ordinary wave critical frequency of F region patch trace in MHz. URSI ID: 55.
   * Example: /// Example: 87.21
   * Constraints: No constraints specified.
   */
  public double foP() { int o = __offset(170); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Minimum virtual height of the trace used to determine foP in km. URSI ID: 56.
   * Example: /// Example: 89.45
   * Constraints: No constraints specified.
   */
  public double hprimeP() { int o = __offset(172); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The blanketing frequency of layer used to derive foEs in MHz. URSI ID: 32.
   * Example: /// Example: 34.867
   * Constraints: No constraints specified.
   */
  public double fbEs() { int o = __offset(174); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Characterization of the shape of Es trace. URSI ID: 36.
   * Example: /// Example: Auroral
   * Constraints: Minimum length = 0, Maximum length = 25
   */
  public String typeEs() { int o = __offset(176); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeEsAsByteBuffer() { return __vector_as_bytebuffer(176, 1); }
  public ByteBuffer typeEsInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 176, 1); }
  /**
   * List of attributes that are associated with the specified characteristics. Characteristics are defined by the CHARS: URSI IIWG format for archiving monthly ionospheric characteristics, INAG Bulletin No. 62 specification. 
   * Qualifying and Descriptive letters are defined by the URSI Handbook for Ionogram Interpretation and reduction, Report UAG, No. 23A specification.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String charAtts(int j) { int o = __offset(178); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int charAttsLength() { int o = __offset(178); return o != 0 ? __vector_len(o) : 0; }
  public StringVector charAttsVector() { return charAttsVector(new StringVector()); }
  public StringVector charAttsVector(StringVector obj) { int o = __offset(178); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of altitudes above station level for plasma frequency/density arrays in km (must match the size of the plasmaFrequency and electronDensity Arrays).
   * Example: /// Example: [1.1, 2.1, 3.1]
   * Constraints: No constraints specified.
   */
  public String height(int j) { int o = __offset(180); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int heightLength() { int o = __offset(180); return o != 0 ? __vector_len(o) : 0; }
  public StringVector heightVector() { return heightVector(new StringVector()); }
  public StringVector heightVector(StringVector obj) { int o = __offset(180); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of plasma frequencies in MHz (must match the size of the height and electronDensity arrays).
   * Example: /// Example: [1.1, 2.1, 3.1]
   * Constraints: No constraints specified.
   */
  public String plasmaFrequency(int j) { int o = __offset(182); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int plasmaFrequencyLength() { int o = __offset(182); return o != 0 ? __vector_len(o) : 0; }
  public StringVector plasmaFrequencyVector() { return plasmaFrequencyVector(new StringVector()); }
  public StringVector plasmaFrequencyVector(StringVector obj) { int o = __offset(182); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Uncertainty in specifying the electron plasma frequency at each height point of the profile (must match the size of the plasmaFrequency array).
   * Example: /// Example: [0.8, 0.2, 0.5]
   * Constraints: No constraints specified.
   */
  public String plasmaFrequencyUncertainty(int j) { int o = __offset(184); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int plasmaFrequencyUncertaintyLength() { int o = __offset(184); return o != 0 ? __vector_len(o) : 0; }
  public StringVector plasmaFrequencyUncertaintyVector() { return plasmaFrequencyUncertaintyVector(new StringVector()); }
  public StringVector plasmaFrequencyUncertaintyVector(StringVector obj) { int o = __offset(184); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of electron densities in cm^-3 (must match the size of the height and plasmaFrequency arrays).
   * Example: /// Example: [1.1, 2.1, 3.1]
   * Constraints: No constraints specified.
   */
  public String electronDensity(int j) { int o = __offset(186); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int electronDensityLength() { int o = __offset(186); return o != 0 ? __vector_len(o) : 0; }
  public StringVector electronDensityVector() { return electronDensityVector(new StringVector()); }
  public StringVector electronDensityVector(StringVector obj) { int o = __offset(186); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Uncertainty in specifying the electron density at each height point of the profile (must match the size of the electronDensity array).
   * Example: /// Example: [0.8, 0.2, 0.5]
   * Constraints: No constraints specified.
   */
  public String electronDensityUncertainty(int j) { int o = __offset(188); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int electronDensityUncertaintyLength() { int o = __offset(188); return o != 0 ? __vector_len(o) : 0; }
  public StringVector electronDensityUncertaintyVector() { return electronDensityUncertaintyVector(new StringVector()); }
  public StringVector electronDensityUncertaintyVector(StringVector obj) { int o = __offset(188); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of Legacy Artist Flags.
   * Example: /// Example: [1, 2, 3]
   * Constraints: No constraints specified.
   */
  public String artistFlags(int j) { int o = __offset(190); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int artistFlagsLength() { int o = __offset(190); return o != 0 ? __vector_len(o) : 0; }
  public StringVector artistFlagsVector() { return artistFlagsVector(new StringVector()); }
  public StringVector artistFlagsVector(StringVector obj) { int o = __offset(190); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String traceGeneric() { int o = __offset(192); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer traceGenericAsByteBuffer() { return __vector_as_bytebuffer(192, 1); }
  public ByteBuffer traceGenericInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 192, 1); }
  /**
   * Array of speed in m/s at which the disturbance travels through the ionosphere.
   * Example: /// Example: [1.1, 2.1, 3.1]
   * Constraints: No constraints specified.
   */
  public String tidPhaseSpeeds(int j) { int o = __offset(194); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tidPhaseSpeedsLength() { int o = __offset(194); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tidPhaseSpeedsVector() { return tidPhaseSpeedsVector(new StringVector()); }
  public StringVector tidPhaseSpeedsVector(StringVector obj) { int o = __offset(194); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of degrees clockwise from true North of the TID.
   * Example: /// Example: [1.1, 2.1, 3.1]
   * Constraints: No constraints specified.
   */
  public String tidAzimuth(int j) { int o = __offset(196); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tidAzimuthLength() { int o = __offset(196); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tidAzimuthVector() { return tidAzimuthVector(new StringVector()); }
  public StringVector tidAzimuthVector(StringVector obj) { int o = __offset(196); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Array of 1/frequency of the TID wave.
   * Example: /// Example: [1.1, 2.1, 3.1]
   * Constraints: No constraints specified.
   */
  public String tidPeriods(int j) { int o = __offset(198); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int tidPeriodsLength() { int o = __offset(198); return o != 0 ? __vector_len(o) : 0; }
  public StringVector tidPeriodsVector() { return tidPeriodsVector(new StringVector()); }
  public StringVector tidPeriodsVector(StringVector obj) { int o = __offset(198); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * No description provided.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String datum() { int o = __offset(200); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer datumAsByteBuffer() { return __vector_as_bytebuffer(200, 1); }
  public ByteBuffer datumInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 200, 1); }
  /**
   * Equipment location.
   * Example: /// Example: Millstone Hill
   * Constraints: Minimum length = 0, Maximum length = 512
   */
  public String platformName() { int o = __offset(202); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer platformNameAsByteBuffer() { return __vector_as_bytebuffer(202, 1); }
  public ByteBuffer platformNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 202, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(204); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(204, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 204, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String createdBy() { int o = __offset(206); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(206, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 206, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(208); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(208, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 208, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(210); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(210, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 210, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(212); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(212, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 212, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(214); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(214, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 214, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(216); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(218); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(218, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 218, 1); }

  public static int createIonoObservation_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int idSensorOffset,
      int origSensorIdOffset,
      int systemOffset,
      int neProfileNameOffset,
      double neProfileVersion,
      int scalerInfoOffset,
      int densityProfileOffset,
      int stationIdOffset,
      int startTimeUtcOffset,
      int systemInfoOffset,
      int systemNotesOffset,
      int transmitCoordinatesOffset,
      byte transmitSensorType,
      int receiveCoordinatesOffset,
      byte receiveSensorType,
      int antennaElementPositionOffset,
      byte antennaElementPositionCoordinateSystem,
      int powerOffset,
      int rangeOffset,
      int frequencyOffset,
      int polarizationOffset,
      int azimuthOffset,
      int elevationOffset,
      int restrictedFrequencyOffset,
      int restrictedFrequencyNotesOffset,
      int dopplerOffset,
      int timeOffset,
      int stokesOffset,
      int amplitudeOffset,
      int phaseOffset,
      double foF2,
      double foF1,
      double fxF2,
      double fxF1,
      double md,
      double luf,
      double mufd,
      double fmin,
      double foEs,
      double fminF,
      double fminE,
      double foE,
      double fxE,
      double fxI,
      double hprimeF,
      double hprimeF2,
      double hprimeF1,
      double hprimeE,
      double hprimeEs,
      double zmE,
      double yE,
      double qf,
      double qe,
      double downF,
      double downE,
      double downEs,
      double ff,
      double fe,
      double d,
      double fmuf,
      double hprimefMuf,
      double deltafoF2,
      double foEp,
      double fhprimeF,
      double fhprimeF2,
      double foF1p,
      double foF2p,
      double hmF2,
      double hmF1,
      double hmE,
      double zhalfNm,
      double fminEs,
      double yF2,
      double yF1,
      double tec,
      double scaleHeightF2Peak,
      double b0,
      double b1,
      double d1,
      double foEa,
      double hprimeEa,
      double foP,
      double hprimeP,
      double fbEs,
      int typeEsOffset,
      int charAttsOffset,
      int heightOffset,
      int plasmaFrequencyOffset,
      int plasmaFrequencyUncertaintyOffset,
      int electronDensityOffset,
      int electronDensityUncertaintyOffset,
      int artistFlagsOffset,
      int traceGenericOffset,
      int tidPhaseSpeedsOffset,
      int tidAzimuthOffset,
      int tidPeriodsOffset,
      int datumOffset,
      int platformNameOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset) {
    builder.startTable(108);
    IonoObservation_Abridged.addFbEs(builder, fbEs);
    IonoObservation_Abridged.addHprimeP(builder, hprimeP);
    IonoObservation_Abridged.addFoP(builder, foP);
    IonoObservation_Abridged.addHprimeEa(builder, hprimeEa);
    IonoObservation_Abridged.addFoEa(builder, foEa);
    IonoObservation_Abridged.addD1(builder, d1);
    IonoObservation_Abridged.addB1(builder, b1);
    IonoObservation_Abridged.addB0(builder, b0);
    IonoObservation_Abridged.addScaleHeightF2Peak(builder, scaleHeightF2Peak);
    IonoObservation_Abridged.addTec(builder, tec);
    IonoObservation_Abridged.addYF1(builder, yF1);
    IonoObservation_Abridged.addYF2(builder, yF2);
    IonoObservation_Abridged.addFminEs(builder, fminEs);
    IonoObservation_Abridged.addZhalfNm(builder, zhalfNm);
    IonoObservation_Abridged.addHmE(builder, hmE);
    IonoObservation_Abridged.addHmF1(builder, hmF1);
    IonoObservation_Abridged.addHmF2(builder, hmF2);
    IonoObservation_Abridged.addFoF2p(builder, foF2p);
    IonoObservation_Abridged.addFoF1p(builder, foF1p);
    IonoObservation_Abridged.addFhprimeF2(builder, fhprimeF2);
    IonoObservation_Abridged.addFhprimeF(builder, fhprimeF);
    IonoObservation_Abridged.addFoEp(builder, foEp);
    IonoObservation_Abridged.addDeltafoF2(builder, deltafoF2);
    IonoObservation_Abridged.addHprimefMuf(builder, hprimefMuf);
    IonoObservation_Abridged.addFmuf(builder, fmuf);
    IonoObservation_Abridged.addD(builder, d);
    IonoObservation_Abridged.addFe(builder, fe);
    IonoObservation_Abridged.addFf(builder, ff);
    IonoObservation_Abridged.addDownEs(builder, downEs);
    IonoObservation_Abridged.addDownE(builder, downE);
    IonoObservation_Abridged.addDownF(builder, downF);
    IonoObservation_Abridged.addQe(builder, qe);
    IonoObservation_Abridged.addQf(builder, qf);
    IonoObservation_Abridged.addYE(builder, yE);
    IonoObservation_Abridged.addZmE(builder, zmE);
    IonoObservation_Abridged.addHprimeEs(builder, hprimeEs);
    IonoObservation_Abridged.addHprimeE(builder, hprimeE);
    IonoObservation_Abridged.addHprimeF1(builder, hprimeF1);
    IonoObservation_Abridged.addHprimeF2(builder, hprimeF2);
    IonoObservation_Abridged.addHprimeF(builder, hprimeF);
    IonoObservation_Abridged.addFxI(builder, fxI);
    IonoObservation_Abridged.addFxE(builder, fxE);
    IonoObservation_Abridged.addFoE(builder, foE);
    IonoObservation_Abridged.addFminE(builder, fminE);
    IonoObservation_Abridged.addFminF(builder, fminF);
    IonoObservation_Abridged.addFoEs(builder, foEs);
    IonoObservation_Abridged.addFmin(builder, fmin);
    IonoObservation_Abridged.addMufd(builder, mufd);
    IonoObservation_Abridged.addLuf(builder, luf);
    IonoObservation_Abridged.addMd(builder, md);
    IonoObservation_Abridged.addFxF1(builder, fxF1);
    IonoObservation_Abridged.addFxF2(builder, fxF2);
    IonoObservation_Abridged.addFoF1(builder, foF1);
    IonoObservation_Abridged.addFoF2(builder, foF2);
    IonoObservation_Abridged.addNeProfileVersion(builder, neProfileVersion);
    IonoObservation_Abridged.addOrigNetwork(builder, origNetworkOffset);
    IonoObservation_Abridged.addOrigin(builder, originOffset);
    IonoObservation_Abridged.addSource(builder, sourceOffset);
    IonoObservation_Abridged.addUpdatedBy(builder, updatedByOffset);
    IonoObservation_Abridged.addUpdatedAt(builder, updatedAtOffset);
    IonoObservation_Abridged.addCreatedBy(builder, createdByOffset);
    IonoObservation_Abridged.addCreatedAt(builder, createdAtOffset);
    IonoObservation_Abridged.addPlatformName(builder, platformNameOffset);
    IonoObservation_Abridged.addDatum(builder, datumOffset);
    IonoObservation_Abridged.addTidPeriods(builder, tidPeriodsOffset);
    IonoObservation_Abridged.addTidAzimuth(builder, tidAzimuthOffset);
    IonoObservation_Abridged.addTidPhaseSpeeds(builder, tidPhaseSpeedsOffset);
    IonoObservation_Abridged.addTraceGeneric(builder, traceGenericOffset);
    IonoObservation_Abridged.addArtistFlags(builder, artistFlagsOffset);
    IonoObservation_Abridged.addElectronDensityUncertainty(builder, electronDensityUncertaintyOffset);
    IonoObservation_Abridged.addElectronDensity(builder, electronDensityOffset);
    IonoObservation_Abridged.addPlasmaFrequencyUncertainty(builder, plasmaFrequencyUncertaintyOffset);
    IonoObservation_Abridged.addPlasmaFrequency(builder, plasmaFrequencyOffset);
    IonoObservation_Abridged.addHeight(builder, heightOffset);
    IonoObservation_Abridged.addCharAtts(builder, charAttsOffset);
    IonoObservation_Abridged.addTypeEs(builder, typeEsOffset);
    IonoObservation_Abridged.addPhase(builder, phaseOffset);
    IonoObservation_Abridged.addAmplitude(builder, amplitudeOffset);
    IonoObservation_Abridged.addStokes(builder, stokesOffset);
    IonoObservation_Abridged.addTime(builder, timeOffset);
    IonoObservation_Abridged.addDoppler(builder, dopplerOffset);
    IonoObservation_Abridged.addRestrictedFrequencyNotes(builder, restrictedFrequencyNotesOffset);
    IonoObservation_Abridged.addRestrictedFrequency(builder, restrictedFrequencyOffset);
    IonoObservation_Abridged.addElevation(builder, elevationOffset);
    IonoObservation_Abridged.addAzimuth(builder, azimuthOffset);
    IonoObservation_Abridged.addPolarization(builder, polarizationOffset);
    IonoObservation_Abridged.addFrequency(builder, frequencyOffset);
    IonoObservation_Abridged.addRange(builder, rangeOffset);
    IonoObservation_Abridged.addPower(builder, powerOffset);
    IonoObservation_Abridged.addAntennaElementPosition(builder, antennaElementPositionOffset);
    IonoObservation_Abridged.addReceiveCoordinates(builder, receiveCoordinatesOffset);
    IonoObservation_Abridged.addTransmitCoordinates(builder, transmitCoordinatesOffset);
    IonoObservation_Abridged.addSystemNotes(builder, systemNotesOffset);
    IonoObservation_Abridged.addSystemInfo(builder, systemInfoOffset);
    IonoObservation_Abridged.addStartTimeUtc(builder, startTimeUtcOffset);
    IonoObservation_Abridged.addStationId(builder, stationIdOffset);
    IonoObservation_Abridged.addDensityProfile(builder, densityProfileOffset);
    IonoObservation_Abridged.addScalerInfo(builder, scalerInfoOffset);
    IonoObservation_Abridged.addNeProfileName(builder, neProfileNameOffset);
    IonoObservation_Abridged.addSystem(builder, systemOffset);
    IonoObservation_Abridged.addOrigSensorId(builder, origSensorIdOffset);
    IonoObservation_Abridged.addIdSensor(builder, idSensorOffset);
    IonoObservation_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    IonoObservation_Abridged.addId(builder, idOffset);
    IonoObservation_Abridged.addDataMode(builder, dataMode);
    IonoObservation_Abridged.addAntennaElementPositionCoordinateSystem(builder, antennaElementPositionCoordinateSystem);
    IonoObservation_Abridged.addReceiveSensorType(builder, receiveSensorType);
    IonoObservation_Abridged.addTransmitSensorType(builder, transmitSensorType);
    return IonoObservation_Abridged.endIonoObservation_Abridged(builder);
  }

  public static void startIonoObservation_Abridged(FlatBufferBuilder builder) { builder.startTable(108); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addIdSensor(FlatBufferBuilder builder, int idSensorOffset) { builder.addOffset(2, idSensorOffset, 0); }
  public static void addOrigSensorId(FlatBufferBuilder builder, int origSensorIdOffset) { builder.addOffset(3, origSensorIdOffset, 0); }
  public static void addSystem(FlatBufferBuilder builder, int systemOffset) { builder.addOffset(4, systemOffset, 0); }
  public static void addNeProfileName(FlatBufferBuilder builder, int neProfileNameOffset) { builder.addOffset(5, neProfileNameOffset, 0); }
  public static void addNeProfileVersion(FlatBufferBuilder builder, double neProfileVersion) { builder.addDouble(6, neProfileVersion, 0.0); }
  public static void addScalerInfo(FlatBufferBuilder builder, int scalerInfoOffset) { builder.addOffset(7, scalerInfoOffset, 0); }
  public static void addDensityProfile(FlatBufferBuilder builder, int densityProfileOffset) { builder.addOffset(8, densityProfileOffset, 0); }
  public static void addStationId(FlatBufferBuilder builder, int stationIdOffset) { builder.addOffset(9, stationIdOffset, 0); }
  public static void addStartTimeUtc(FlatBufferBuilder builder, int startTimeUtcOffset) { builder.addOffset(10, startTimeUtcOffset, 0); }
  public static void addSystemInfo(FlatBufferBuilder builder, int systemInfoOffset) { builder.addOffset(11, systemInfoOffset, 0); }
  public static void addSystemNotes(FlatBufferBuilder builder, int systemNotesOffset) { builder.addOffset(12, systemNotesOffset, 0); }
  public static void addTransmitCoordinates(FlatBufferBuilder builder, int transmitCoordinatesOffset) { builder.addOffset(13, transmitCoordinatesOffset, 0); }
  public static int createTransmitCoordinatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTransmitCoordinatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTransmitSensorType(FlatBufferBuilder builder, byte transmitSensorType) { builder.addByte(14, transmitSensorType, 0); }
  public static void addReceiveCoordinates(FlatBufferBuilder builder, int receiveCoordinatesOffset) { builder.addOffset(15, receiveCoordinatesOffset, 0); }
  public static int createReceiveCoordinatesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReceiveCoordinatesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReceiveSensorType(FlatBufferBuilder builder, byte receiveSensorType) { builder.addByte(16, receiveSensorType, 0); }
  public static void addAntennaElementPosition(FlatBufferBuilder builder, int antennaElementPositionOffset) { builder.addOffset(17, antennaElementPositionOffset, 0); }
  public static void addAntennaElementPositionCoordinateSystem(FlatBufferBuilder builder, byte antennaElementPositionCoordinateSystem) { builder.addByte(18, antennaElementPositionCoordinateSystem, 0); }
  public static void addPower(FlatBufferBuilder builder, int powerOffset) { builder.addOffset(19, powerOffset, 0); }
  public static void addRange(FlatBufferBuilder builder, int rangeOffset) { builder.addOffset(20, rangeOffset, 0); }
  public static void addFrequency(FlatBufferBuilder builder, int frequencyOffset) { builder.addOffset(21, frequencyOffset, 0); }
  public static void addPolarization(FlatBufferBuilder builder, int polarizationOffset) { builder.addOffset(22, polarizationOffset, 0); }
  public static void addAzimuth(FlatBufferBuilder builder, int azimuthOffset) { builder.addOffset(23, azimuthOffset, 0); }
  public static void addElevation(FlatBufferBuilder builder, int elevationOffset) { builder.addOffset(24, elevationOffset, 0); }
  public static void addRestrictedFrequency(FlatBufferBuilder builder, int restrictedFrequencyOffset) { builder.addOffset(25, restrictedFrequencyOffset, 0); }
  public static int createRestrictedFrequencyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRestrictedFrequencyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRestrictedFrequencyNotes(FlatBufferBuilder builder, int restrictedFrequencyNotesOffset) { builder.addOffset(26, restrictedFrequencyNotesOffset, 0); }
  public static void addDoppler(FlatBufferBuilder builder, int dopplerOffset) { builder.addOffset(27, dopplerOffset, 0); }
  public static void addTime(FlatBufferBuilder builder, int timeOffset) { builder.addOffset(28, timeOffset, 0); }
  public static void addStokes(FlatBufferBuilder builder, int stokesOffset) { builder.addOffset(29, stokesOffset, 0); }
  public static void addAmplitude(FlatBufferBuilder builder, int amplitudeOffset) { builder.addOffset(30, amplitudeOffset, 0); }
  public static void addPhase(FlatBufferBuilder builder, int phaseOffset) { builder.addOffset(31, phaseOffset, 0); }
  public static void addFoF2(FlatBufferBuilder builder, double foF2) { builder.addDouble(32, foF2, 0.0); }
  public static void addFoF1(FlatBufferBuilder builder, double foF1) { builder.addDouble(33, foF1, 0.0); }
  public static void addFxF2(FlatBufferBuilder builder, double fxF2) { builder.addDouble(34, fxF2, 0.0); }
  public static void addFxF1(FlatBufferBuilder builder, double fxF1) { builder.addDouble(35, fxF1, 0.0); }
  public static void addMd(FlatBufferBuilder builder, double md) { builder.addDouble(36, md, 0.0); }
  public static void addLuf(FlatBufferBuilder builder, double luf) { builder.addDouble(37, luf, 0.0); }
  public static void addMufd(FlatBufferBuilder builder, double mufd) { builder.addDouble(38, mufd, 0.0); }
  public static void addFmin(FlatBufferBuilder builder, double fmin) { builder.addDouble(39, fmin, 0.0); }
  public static void addFoEs(FlatBufferBuilder builder, double foEs) { builder.addDouble(40, foEs, 0.0); }
  public static void addFminF(FlatBufferBuilder builder, double fminF) { builder.addDouble(41, fminF, 0.0); }
  public static void addFminE(FlatBufferBuilder builder, double fminE) { builder.addDouble(42, fminE, 0.0); }
  public static void addFoE(FlatBufferBuilder builder, double foE) { builder.addDouble(43, foE, 0.0); }
  public static void addFxE(FlatBufferBuilder builder, double fxE) { builder.addDouble(44, fxE, 0.0); }
  public static void addFxI(FlatBufferBuilder builder, double fxI) { builder.addDouble(45, fxI, 0.0); }
  public static void addHprimeF(FlatBufferBuilder builder, double hprimeF) { builder.addDouble(46, hprimeF, 0.0); }
  public static void addHprimeF2(FlatBufferBuilder builder, double hprimeF2) { builder.addDouble(47, hprimeF2, 0.0); }
  public static void addHprimeF1(FlatBufferBuilder builder, double hprimeF1) { builder.addDouble(48, hprimeF1, 0.0); }
  public static void addHprimeE(FlatBufferBuilder builder, double hprimeE) { builder.addDouble(49, hprimeE, 0.0); }
  public static void addHprimeEs(FlatBufferBuilder builder, double hprimeEs) { builder.addDouble(50, hprimeEs, 0.0); }
  public static void addZmE(FlatBufferBuilder builder, double zmE) { builder.addDouble(51, zmE, 0.0); }
  public static void addYE(FlatBufferBuilder builder, double yE) { builder.addDouble(52, yE, 0.0); }
  public static void addQf(FlatBufferBuilder builder, double qf) { builder.addDouble(53, qf, 0.0); }
  public static void addQe(FlatBufferBuilder builder, double qe) { builder.addDouble(54, qe, 0.0); }
  public static void addDownF(FlatBufferBuilder builder, double downF) { builder.addDouble(55, downF, 0.0); }
  public static void addDownE(FlatBufferBuilder builder, double downE) { builder.addDouble(56, downE, 0.0); }
  public static void addDownEs(FlatBufferBuilder builder, double downEs) { builder.addDouble(57, downEs, 0.0); }
  public static void addFf(FlatBufferBuilder builder, double ff) { builder.addDouble(58, ff, 0.0); }
  public static void addFe(FlatBufferBuilder builder, double fe) { builder.addDouble(59, fe, 0.0); }
  public static void addD(FlatBufferBuilder builder, double d) { builder.addDouble(60, d, 0.0); }
  public static void addFmuf(FlatBufferBuilder builder, double fmuf) { builder.addDouble(61, fmuf, 0.0); }
  public static void addHprimefMuf(FlatBufferBuilder builder, double hprimefMuf) { builder.addDouble(62, hprimefMuf, 0.0); }
  public static void addDeltafoF2(FlatBufferBuilder builder, double deltafoF2) { builder.addDouble(63, deltafoF2, 0.0); }
  public static void addFoEp(FlatBufferBuilder builder, double foEp) { builder.addDouble(64, foEp, 0.0); }
  public static void addFhprimeF(FlatBufferBuilder builder, double fhprimeF) { builder.addDouble(65, fhprimeF, 0.0); }
  public static void addFhprimeF2(FlatBufferBuilder builder, double fhprimeF2) { builder.addDouble(66, fhprimeF2, 0.0); }
  public static void addFoF1p(FlatBufferBuilder builder, double foF1p) { builder.addDouble(67, foF1p, 0.0); }
  public static void addFoF2p(FlatBufferBuilder builder, double foF2p) { builder.addDouble(68, foF2p, 0.0); }
  public static void addHmF2(FlatBufferBuilder builder, double hmF2) { builder.addDouble(69, hmF2, 0.0); }
  public static void addHmF1(FlatBufferBuilder builder, double hmF1) { builder.addDouble(70, hmF1, 0.0); }
  public static void addHmE(FlatBufferBuilder builder, double hmE) { builder.addDouble(71, hmE, 0.0); }
  public static void addZhalfNm(FlatBufferBuilder builder, double zhalfNm) { builder.addDouble(72, zhalfNm, 0.0); }
  public static void addFminEs(FlatBufferBuilder builder, double fminEs) { builder.addDouble(73, fminEs, 0.0); }
  public static void addYF2(FlatBufferBuilder builder, double yF2) { builder.addDouble(74, yF2, 0.0); }
  public static void addYF1(FlatBufferBuilder builder, double yF1) { builder.addDouble(75, yF1, 0.0); }
  public static void addTec(FlatBufferBuilder builder, double tec) { builder.addDouble(76, tec, 0.0); }
  public static void addScaleHeightF2Peak(FlatBufferBuilder builder, double scaleHeightF2Peak) { builder.addDouble(77, scaleHeightF2Peak, 0.0); }
  public static void addB0(FlatBufferBuilder builder, double b0) { builder.addDouble(78, b0, 0.0); }
  public static void addB1(FlatBufferBuilder builder, double b1) { builder.addDouble(79, b1, 0.0); }
  public static void addD1(FlatBufferBuilder builder, double d1) { builder.addDouble(80, d1, 0.0); }
  public static void addFoEa(FlatBufferBuilder builder, double foEa) { builder.addDouble(81, foEa, 0.0); }
  public static void addHprimeEa(FlatBufferBuilder builder, double hprimeEa) { builder.addDouble(82, hprimeEa, 0.0); }
  public static void addFoP(FlatBufferBuilder builder, double foP) { builder.addDouble(83, foP, 0.0); }
  public static void addHprimeP(FlatBufferBuilder builder, double hprimeP) { builder.addDouble(84, hprimeP, 0.0); }
  public static void addFbEs(FlatBufferBuilder builder, double fbEs) { builder.addDouble(85, fbEs, 0.0); }
  public static void addTypeEs(FlatBufferBuilder builder, int typeEsOffset) { builder.addOffset(86, typeEsOffset, 0); }
  public static void addCharAtts(FlatBufferBuilder builder, int charAttsOffset) { builder.addOffset(87, charAttsOffset, 0); }
  public static int createCharAttsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startCharAttsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHeight(FlatBufferBuilder builder, int heightOffset) { builder.addOffset(88, heightOffset, 0); }
  public static int createHeightVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHeightVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPlasmaFrequency(FlatBufferBuilder builder, int plasmaFrequencyOffset) { builder.addOffset(89, plasmaFrequencyOffset, 0); }
  public static int createPlasmaFrequencyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlasmaFrequencyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPlasmaFrequencyUncertainty(FlatBufferBuilder builder, int plasmaFrequencyUncertaintyOffset) { builder.addOffset(90, plasmaFrequencyUncertaintyOffset, 0); }
  public static int createPlasmaFrequencyUncertaintyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPlasmaFrequencyUncertaintyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addElectronDensity(FlatBufferBuilder builder, int electronDensityOffset) { builder.addOffset(91, electronDensityOffset, 0); }
  public static int createElectronDensityVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startElectronDensityVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addElectronDensityUncertainty(FlatBufferBuilder builder, int electronDensityUncertaintyOffset) { builder.addOffset(92, electronDensityUncertaintyOffset, 0); }
  public static int createElectronDensityUncertaintyVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startElectronDensityUncertaintyVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addArtistFlags(FlatBufferBuilder builder, int artistFlagsOffset) { builder.addOffset(93, artistFlagsOffset, 0); }
  public static int createArtistFlagsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startArtistFlagsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTraceGeneric(FlatBufferBuilder builder, int traceGenericOffset) { builder.addOffset(94, traceGenericOffset, 0); }
  public static void addTidPhaseSpeeds(FlatBufferBuilder builder, int tidPhaseSpeedsOffset) { builder.addOffset(95, tidPhaseSpeedsOffset, 0); }
  public static int createTidPhaseSpeedsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTidPhaseSpeedsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTidAzimuth(FlatBufferBuilder builder, int tidAzimuthOffset) { builder.addOffset(96, tidAzimuthOffset, 0); }
  public static int createTidAzimuthVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTidAzimuthVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addTidPeriods(FlatBufferBuilder builder, int tidPeriodsOffset) { builder.addOffset(97, tidPeriodsOffset, 0); }
  public static int createTidPeriodsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTidPeriodsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDatum(FlatBufferBuilder builder, int datumOffset) { builder.addOffset(98, datumOffset, 0); }
  public static void addPlatformName(FlatBufferBuilder builder, int platformNameOffset) { builder.addOffset(99, platformNameOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(100, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(101, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(102, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(103, updatedByOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(104, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(105, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(106, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(107, origNetworkOffset, 0); }
  public static int endIonoObservation_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIonoObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "IONO"); }
  public static void finishSizePrefixedIonoObservation_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "IONO"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IonoObservation_Abridged get(int j) { return get(new IonoObservation_Abridged(), j); }
    public IonoObservation_Abridged get(IonoObservation_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

