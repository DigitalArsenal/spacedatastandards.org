// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
 */
@SuppressWarnings("unused")
public final class MtiTargetReport_Full extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiTargetReport_Full getRootAsMtiTargetReport_Full(ByteBuffer _bb) { return getRootAsMtiTargetReport_Full(_bb, new MtiTargetReport_Full()); }
  public static MtiTargetReport_Full getRootAsMtiTargetReport_Full(ByteBuffer _bb, MtiTargetReport_Full obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiTargetReport_FullBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTIT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiTargetReport_Full __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Sequential count of this MTI report within the dwell.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d321() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) of the Equator.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double d322() { int o = __offset(6); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The East-West position of the reported detection, expressed as degrees East (positive) from the Prime Meridian.
   * Example: /// Example: 20.23
   * Constraints: No constraints specified.
   */
  public double d323() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The North-South position of the reported detection, expressed as degrees North (positive) or South (negative) from the Dwell Area Center Latitude.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d324() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The East-West position of the reported detection, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian from the Dwell Area Center Longitude.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d325() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Height of the reported detection, referenced to its position above the WGS 84 ellipsoid, in meters.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d326() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The component of velocity for the reported detection, expressed in centimeters per second, corrected for platform motion, along the line of sight between the sensor and the reported detection, where the positive direction is away from the sensor.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d327() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The target wrap velocity permits trackers to un-wrap velocities for targets with line-of-sight components large enough to exceed the first velocity period.  Expressed in centimeters/sec.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d328() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Estimated signal-to-noise ratio (SNR) of the target return, in decibels.
   * Example: /// Example: 17
   * Constraints: No constraints specified.
   */
  public int d329() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The classification of the target (i.e. vehicle, aircraft, â€¦).
   * Example: /// Example: vehicle
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String d3210() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer d3210AsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer d3210InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * Estimated probability that the target classification field is correctly classified.
   * Example: /// Example: 90
   * Constraints: No constraints specified.
   */
  public int d3211() { int o = __offset(24); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of the estimated slant range of the reported detection, in centimeters.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d3212() { int o = __offset(26); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of the position estimate, in the cross-range direction, of the reported detection, in decimeters.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d3213() { int o = __offset(28); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of the estimated geodetic height, in meters.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d3214() { int o = __offset(30); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of the measured line-of-sight velocity component, in centimeters per second.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d3215() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The Truth Tag- Application is the Application Field truncated to 8 bits, from the Entity State Protocol Data Unit (PDU) used to generate the MTI Target.
   * Example: /// Example: 2
   * Constraints: No constraints specified.
   */
  public int d3216() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The Truth Tag - Entity is the Entity Field from the Entity State PDU used to generate the MTI Target.
   * Example: /// Example: 1234567890
   * Constraints: No constraints specified.
   */
  public long d3217() { int o = __offset(36); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * Estimated radar cross section of the target return, in half-decibels.
   * Example: /// Example: 98
   * Constraints: No constraints specified.
   */
  public int d3218() { int o = __offset(38); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createMtiTargetReport_Full(FlatBufferBuilder builder,
      int d321,
      double d322,
      double d323,
      int d324,
      int d325,
      int d326,
      int d327,
      int d328,
      int d329,
      int d3210Offset,
      int d3211,
      int d3212,
      int d3213,
      int d3214,
      int d3215,
      int d3216,
      long d3217,
      int d3218) {
    builder.startTable(18);
    MtiTargetReport_Full.addD3217(builder, d3217);
    MtiTargetReport_Full.addD323(builder, d323);
    MtiTargetReport_Full.addD322(builder, d322);
    MtiTargetReport_Full.addD3218(builder, d3218);
    MtiTargetReport_Full.addD3216(builder, d3216);
    MtiTargetReport_Full.addD3215(builder, d3215);
    MtiTargetReport_Full.addD3214(builder, d3214);
    MtiTargetReport_Full.addD3213(builder, d3213);
    MtiTargetReport_Full.addD3212(builder, d3212);
    MtiTargetReport_Full.addD3211(builder, d3211);
    MtiTargetReport_Full.addD3210(builder, d3210Offset);
    MtiTargetReport_Full.addD329(builder, d329);
    MtiTargetReport_Full.addD328(builder, d328);
    MtiTargetReport_Full.addD327(builder, d327);
    MtiTargetReport_Full.addD326(builder, d326);
    MtiTargetReport_Full.addD325(builder, d325);
    MtiTargetReport_Full.addD324(builder, d324);
    MtiTargetReport_Full.addD321(builder, d321);
    return MtiTargetReport_Full.endMtiTargetReport_Full(builder);
  }

  public static void startMtiTargetReport_Full(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addD321(FlatBufferBuilder builder, int d321) { builder.addInt(0, d321, 0); }
  public static void addD322(FlatBufferBuilder builder, double d322) { builder.addDouble(1, d322, 0.0); }
  public static void addD323(FlatBufferBuilder builder, double d323) { builder.addDouble(2, d323, 0.0); }
  public static void addD324(FlatBufferBuilder builder, int d324) { builder.addInt(3, d324, 0); }
  public static void addD325(FlatBufferBuilder builder, int d325) { builder.addInt(4, d325, 0); }
  public static void addD326(FlatBufferBuilder builder, int d326) { builder.addInt(5, d326, 0); }
  public static void addD327(FlatBufferBuilder builder, int d327) { builder.addInt(6, d327, 0); }
  public static void addD328(FlatBufferBuilder builder, int d328) { builder.addInt(7, d328, 0); }
  public static void addD329(FlatBufferBuilder builder, int d329) { builder.addInt(8, d329, 0); }
  public static void addD3210(FlatBufferBuilder builder, int d3210Offset) { builder.addOffset(9, d3210Offset, 0); }
  public static void addD3211(FlatBufferBuilder builder, int d3211) { builder.addInt(10, d3211, 0); }
  public static void addD3212(FlatBufferBuilder builder, int d3212) { builder.addInt(11, d3212, 0); }
  public static void addD3213(FlatBufferBuilder builder, int d3213) { builder.addInt(12, d3213, 0); }
  public static void addD3214(FlatBufferBuilder builder, int d3214) { builder.addInt(13, d3214, 0); }
  public static void addD3215(FlatBufferBuilder builder, int d3215) { builder.addInt(14, d3215, 0); }
  public static void addD3216(FlatBufferBuilder builder, int d3216) { builder.addInt(15, d3216, 0); }
  public static void addD3217(FlatBufferBuilder builder, long d3217) { builder.addLong(16, d3217, 0L); }
  public static void addD3218(FlatBufferBuilder builder, int d3218) { builder.addInt(17, d3218, 0); }
  public static int endMtiTargetReport_Full(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiTargetReport_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTIT"); }
  public static void finishSizePrefixedMtiTargetReport_FullBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTIT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiTargetReport_Full get(int j) { return get(new MtiTargetReport_Full(), j); }
    public MtiTargetReport_Full get(MtiTargetReport_Full obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

