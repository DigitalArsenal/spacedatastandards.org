// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Seradata-compiled information on communications payloads.
 */
@SuppressWarnings("unused")
public final class SeradataCommDetails_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static SeradataCommDetails_Abridged getRootAsSeradataCommDetails_Abridged(ByteBuffer _bb) { return getRootAsSeradataCommDetails_Abridged(_bb, new SeradataCommDetails_Abridged()); }
  public static SeradataCommDetails_Abridged getRootAsSeradataCommDetails_Abridged(ByteBuffer _bb, SeradataCommDetails_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean SeradataCommDetails_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "SERA"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SeradataCommDetails_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: SERADATACOMMDETAILS-ID
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * UUID of the parent Comm record.
   * Example: /// Example: idComm
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String idComm() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idCommAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer idCommInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
   * Example: /// Example: spacecraftId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String spacecraftId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer spacecraftIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer spacecraftIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
   * Example: /// Example: X
   * Constraints: Minimum length = 0, Maximum length = 5
   */
  public String band() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer bandAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer bandInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Solid state power amplifier, in Watts.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double solidStatePowerAmp() { int o = __offset(14); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm travelingWaveTubeAmplifier in Watts.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double travelingWaveTubeAmplifier() { int o = __offset(16); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm gatewayUplinkFrom in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double gatewayUplinkFrom() { int o = __offset(18); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm gatewayUplinkTo in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double gatewayUplinkTo() { int o = __offset(20); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm gatewayDownlinkFrom in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double gatewayDownlinkFrom() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm gatewayDownlinkTo in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double gatewayDownlinkTo() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm polarization.
   * Example: /// Example: polarization
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String polarization() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer polarizationAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer polarizationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Effective isotropic radiated power in dB.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double eirp() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm bandwidth in Mhz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double bandwidth() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm numOperationalTransponders.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numOperationalTransponders() { int o = __offset(32); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Comm numSpareTransponders.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int numSpareTransponders() { int o = __offset(34); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Comm hostedForCompanyOrgId.
   * Example: /// Example: hostedForCompanyOrgId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String hostedForCompanyOrgId() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hostedForCompanyOrgIdAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer hostedForCompanyOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Comm manufacturerOrgId.
   * Example: /// Example: manufacturerOrgId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String manufacturerOrgId() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer manufacturerOrgIdAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer manufacturerOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * Comm tradeLeaseOrgId.
   * Example: /// Example: tradeLeaseOrgId
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String tradeLeaseOrgId() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer tradeLeaseOrgIdAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer tradeLeaseOrgIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Comm num36MhzEquivalentTransponders.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int num36MhzEquivalentTransponders() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Comm htsNumUserSpotBeams.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int htsNumUserSpotBeams() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Comm htsUserDownlinkBandwidthPerBeam in Mhz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double htsUserDownlinkBandwidthPerBeam() { int o = __offset(46); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm htsUserUplinkBandwidthPerBeam in Mhz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double htsUserUplinkBandwidthPerBeam() { int o = __offset(48); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm estimated HtsTotalUserDownlinkBandwidthPerBeam in Mhz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double estHtsTotalUserDownlinkBandwidthPerBeam() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm estimated HtsTotalUserUplinkBandwidthPerBeam in Mhz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double estHtsTotalUserUplinkBandwidthPerBeam() { int o = __offset(52); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm estimated HtsTotalCapacity in Gbps.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double estHtsTotalCapacity() { int o = __offset(54); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm userDownlinkFrom in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double userDownlinkFrom() { int o = __offset(56); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm userDownlinkTo in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double userDownlinkTo() { int o = __offset(58); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm userUplinkFrom in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double userUplinkFrom() { int o = __offset(60); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Comm userUplinkTo in Ghz.
   * Example: /// Example: 1.23
   * Constraints: No constraints specified.
   */
  public double userUplinkTo() { int o = __offset(62); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Payload notes.
   * Example: /// Example: Sample Notes
   * Constraints: Minimum length = 0, Maximum length = 2147483647
   */
  public String payloadNotes() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer payloadNotesAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer payloadNotesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String source() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: ORIG
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(70); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(70, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 70, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(72); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2018-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(74); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(74, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 74, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(76); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(76, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 76, 1); }

  public static int createSeradataCommDetails_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int idCommOffset,
      int classificationMarkingOffset,
      int spacecraftIdOffset,
      int bandOffset,
      double solidStatePowerAmp,
      double travelingWaveTubeAmplifier,
      double gatewayUplinkFrom,
      double gatewayUplinkTo,
      double gatewayDownlinkFrom,
      double gatewayDownlinkTo,
      int polarizationOffset,
      double eirp,
      double bandwidth,
      int numOperationalTransponders,
      int numSpareTransponders,
      int hostedForCompanyOrgIdOffset,
      int manufacturerOrgIdOffset,
      int tradeLeaseOrgIdOffset,
      int num36MhzEquivalentTransponders,
      int htsNumUserSpotBeams,
      double htsUserDownlinkBandwidthPerBeam,
      double htsUserUplinkBandwidthPerBeam,
      double estHtsTotalUserDownlinkBandwidthPerBeam,
      double estHtsTotalUserUplinkBandwidthPerBeam,
      double estHtsTotalCapacity,
      double userDownlinkFrom,
      double userDownlinkTo,
      double userUplinkFrom,
      double userUplinkTo,
      int payloadNotesOffset,
      int sourceOffset,
      int originOffset,
      int origNetworkOffset,
      byte dataMode,
      int createdAtOffset,
      int createdByOffset) {
    builder.startTable(37);
    SeradataCommDetails_Abridged.addUserUplinkTo(builder, userUplinkTo);
    SeradataCommDetails_Abridged.addUserUplinkFrom(builder, userUplinkFrom);
    SeradataCommDetails_Abridged.addUserDownlinkTo(builder, userDownlinkTo);
    SeradataCommDetails_Abridged.addUserDownlinkFrom(builder, userDownlinkFrom);
    SeradataCommDetails_Abridged.addEstHtsTotalCapacity(builder, estHtsTotalCapacity);
    SeradataCommDetails_Abridged.addEstHtsTotalUserUplinkBandwidthPerBeam(builder, estHtsTotalUserUplinkBandwidthPerBeam);
    SeradataCommDetails_Abridged.addEstHtsTotalUserDownlinkBandwidthPerBeam(builder, estHtsTotalUserDownlinkBandwidthPerBeam);
    SeradataCommDetails_Abridged.addHtsUserUplinkBandwidthPerBeam(builder, htsUserUplinkBandwidthPerBeam);
    SeradataCommDetails_Abridged.addHtsUserDownlinkBandwidthPerBeam(builder, htsUserDownlinkBandwidthPerBeam);
    SeradataCommDetails_Abridged.addBandwidth(builder, bandwidth);
    SeradataCommDetails_Abridged.addEirp(builder, eirp);
    SeradataCommDetails_Abridged.addGatewayDownlinkTo(builder, gatewayDownlinkTo);
    SeradataCommDetails_Abridged.addGatewayDownlinkFrom(builder, gatewayDownlinkFrom);
    SeradataCommDetails_Abridged.addGatewayUplinkTo(builder, gatewayUplinkTo);
    SeradataCommDetails_Abridged.addGatewayUplinkFrom(builder, gatewayUplinkFrom);
    SeradataCommDetails_Abridged.addTravelingWaveTubeAmplifier(builder, travelingWaveTubeAmplifier);
    SeradataCommDetails_Abridged.addSolidStatePowerAmp(builder, solidStatePowerAmp);
    SeradataCommDetails_Abridged.addCreatedBy(builder, createdByOffset);
    SeradataCommDetails_Abridged.addCreatedAt(builder, createdAtOffset);
    SeradataCommDetails_Abridged.addOrigNetwork(builder, origNetworkOffset);
    SeradataCommDetails_Abridged.addOrigin(builder, originOffset);
    SeradataCommDetails_Abridged.addSource(builder, sourceOffset);
    SeradataCommDetails_Abridged.addPayloadNotes(builder, payloadNotesOffset);
    SeradataCommDetails_Abridged.addHtsNumUserSpotBeams(builder, htsNumUserSpotBeams);
    SeradataCommDetails_Abridged.addNum36MhzEquivalentTransponders(builder, num36MhzEquivalentTransponders);
    SeradataCommDetails_Abridged.addTradeLeaseOrgId(builder, tradeLeaseOrgIdOffset);
    SeradataCommDetails_Abridged.addManufacturerOrgId(builder, manufacturerOrgIdOffset);
    SeradataCommDetails_Abridged.addHostedForCompanyOrgId(builder, hostedForCompanyOrgIdOffset);
    SeradataCommDetails_Abridged.addNumSpareTransponders(builder, numSpareTransponders);
    SeradataCommDetails_Abridged.addNumOperationalTransponders(builder, numOperationalTransponders);
    SeradataCommDetails_Abridged.addPolarization(builder, polarizationOffset);
    SeradataCommDetails_Abridged.addBand(builder, bandOffset);
    SeradataCommDetails_Abridged.addSpacecraftId(builder, spacecraftIdOffset);
    SeradataCommDetails_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    SeradataCommDetails_Abridged.addIdComm(builder, idCommOffset);
    SeradataCommDetails_Abridged.addId(builder, idOffset);
    SeradataCommDetails_Abridged.addDataMode(builder, dataMode);
    return SeradataCommDetails_Abridged.endSeradataCommDetails_Abridged(builder);
  }

  public static void startSeradataCommDetails_Abridged(FlatBufferBuilder builder) { builder.startTable(37); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addIdComm(FlatBufferBuilder builder, int idCommOffset) { builder.addOffset(1, idCommOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(2, classificationMarkingOffset, 0); }
  public static void addSpacecraftId(FlatBufferBuilder builder, int spacecraftIdOffset) { builder.addOffset(3, spacecraftIdOffset, 0); }
  public static void addBand(FlatBufferBuilder builder, int bandOffset) { builder.addOffset(4, bandOffset, 0); }
  public static void addSolidStatePowerAmp(FlatBufferBuilder builder, double solidStatePowerAmp) { builder.addDouble(5, solidStatePowerAmp, 0.0); }
  public static void addTravelingWaveTubeAmplifier(FlatBufferBuilder builder, double travelingWaveTubeAmplifier) { builder.addDouble(6, travelingWaveTubeAmplifier, 0.0); }
  public static void addGatewayUplinkFrom(FlatBufferBuilder builder, double gatewayUplinkFrom) { builder.addDouble(7, gatewayUplinkFrom, 0.0); }
  public static void addGatewayUplinkTo(FlatBufferBuilder builder, double gatewayUplinkTo) { builder.addDouble(8, gatewayUplinkTo, 0.0); }
  public static void addGatewayDownlinkFrom(FlatBufferBuilder builder, double gatewayDownlinkFrom) { builder.addDouble(9, gatewayDownlinkFrom, 0.0); }
  public static void addGatewayDownlinkTo(FlatBufferBuilder builder, double gatewayDownlinkTo) { builder.addDouble(10, gatewayDownlinkTo, 0.0); }
  public static void addPolarization(FlatBufferBuilder builder, int polarizationOffset) { builder.addOffset(11, polarizationOffset, 0); }
  public static void addEirp(FlatBufferBuilder builder, double eirp) { builder.addDouble(12, eirp, 0.0); }
  public static void addBandwidth(FlatBufferBuilder builder, double bandwidth) { builder.addDouble(13, bandwidth, 0.0); }
  public static void addNumOperationalTransponders(FlatBufferBuilder builder, int numOperationalTransponders) { builder.addInt(14, numOperationalTransponders, 0); }
  public static void addNumSpareTransponders(FlatBufferBuilder builder, int numSpareTransponders) { builder.addInt(15, numSpareTransponders, 0); }
  public static void addHostedForCompanyOrgId(FlatBufferBuilder builder, int hostedForCompanyOrgIdOffset) { builder.addOffset(16, hostedForCompanyOrgIdOffset, 0); }
  public static void addManufacturerOrgId(FlatBufferBuilder builder, int manufacturerOrgIdOffset) { builder.addOffset(17, manufacturerOrgIdOffset, 0); }
  public static void addTradeLeaseOrgId(FlatBufferBuilder builder, int tradeLeaseOrgIdOffset) { builder.addOffset(18, tradeLeaseOrgIdOffset, 0); }
  public static void addNum36MhzEquivalentTransponders(FlatBufferBuilder builder, int num36MhzEquivalentTransponders) { builder.addInt(19, num36MhzEquivalentTransponders, 0); }
  public static void addHtsNumUserSpotBeams(FlatBufferBuilder builder, int htsNumUserSpotBeams) { builder.addInt(20, htsNumUserSpotBeams, 0); }
  public static void addHtsUserDownlinkBandwidthPerBeam(FlatBufferBuilder builder, double htsUserDownlinkBandwidthPerBeam) { builder.addDouble(21, htsUserDownlinkBandwidthPerBeam, 0.0); }
  public static void addHtsUserUplinkBandwidthPerBeam(FlatBufferBuilder builder, double htsUserUplinkBandwidthPerBeam) { builder.addDouble(22, htsUserUplinkBandwidthPerBeam, 0.0); }
  public static void addEstHtsTotalUserDownlinkBandwidthPerBeam(FlatBufferBuilder builder, double estHtsTotalUserDownlinkBandwidthPerBeam) { builder.addDouble(23, estHtsTotalUserDownlinkBandwidthPerBeam, 0.0); }
  public static void addEstHtsTotalUserUplinkBandwidthPerBeam(FlatBufferBuilder builder, double estHtsTotalUserUplinkBandwidthPerBeam) { builder.addDouble(24, estHtsTotalUserUplinkBandwidthPerBeam, 0.0); }
  public static void addEstHtsTotalCapacity(FlatBufferBuilder builder, double estHtsTotalCapacity) { builder.addDouble(25, estHtsTotalCapacity, 0.0); }
  public static void addUserDownlinkFrom(FlatBufferBuilder builder, double userDownlinkFrom) { builder.addDouble(26, userDownlinkFrom, 0.0); }
  public static void addUserDownlinkTo(FlatBufferBuilder builder, double userDownlinkTo) { builder.addDouble(27, userDownlinkTo, 0.0); }
  public static void addUserUplinkFrom(FlatBufferBuilder builder, double userUplinkFrom) { builder.addDouble(28, userUplinkFrom, 0.0); }
  public static void addUserUplinkTo(FlatBufferBuilder builder, double userUplinkTo) { builder.addDouble(29, userUplinkTo, 0.0); }
  public static void addPayloadNotes(FlatBufferBuilder builder, int payloadNotesOffset) { builder.addOffset(30, payloadNotesOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(31, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(32, originOffset, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(33, origNetworkOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(34, dataMode, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(35, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(36, createdByOffset, 0); }
  public static int endSeradataCommDetails_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishSeradataCommDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "SERA"); }
  public static void finishSizePrefixedSeradataCommDetails_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "SERA"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SeradataCommDetails_Abridged get(int j) { return get(new SeradataCommDetails_Abridged(), j); }
    public SeradataCommDetails_Abridged get(SeradataCommDetails_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

