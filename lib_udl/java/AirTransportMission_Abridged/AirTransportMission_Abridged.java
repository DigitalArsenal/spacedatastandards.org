// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
 */
@SuppressWarnings("unused")
public final class AirTransportMission_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static AirTransportMission_Abridged getRootAsAirTransportMission_Abridged(ByteBuffer _bb) { return getRootAsAirTransportMission_Abridged(_bb, new AirTransportMission_Abridged()); }
  public static AirTransportMission_Abridged getRootAsAirTransportMission_Abridged(ByteBuffer _bb, AirTransportMission_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean AirTransportMission_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "AIRT"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AirTransportMission_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Unique identifier of the record, auto-generated by the system.
   * Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String id() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer idAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer idInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  /**
   * Classification marking of the data in IC/CAPCO Portion-marked format.
   * Example: /// Example: U
   * Constraints: Minimum length = 1, Maximum length = 128
   */
  public String classificationMarking() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer classificationMarkingAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer classificationMarkingInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  /**
   * The mission identifier provided by the originating source.
   * Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String origMissionId() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origMissionIdAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer origMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  /**
   * Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
   * Example: /// Example: AJM7939B1123
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String amcMissionId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer amcMissionIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer amcMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  /**
   * Global Decision Support System (GDSS) mission unique identifier.
   * Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String gdssMissionId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer gdssMissionIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer gdssMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  /**
   * Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
   * Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String prevMissionId() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer prevMissionIdAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer prevMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  /**
   * Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
   * Example: /// Example: AJM7939B1122
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String prevAmcmissionId() { int o = __offset(16); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer prevAmcmissionIdAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer prevAmcmissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }
  /**
   * Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
   * Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String nextMissionId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nextMissionIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer nextMissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }
  /**
   * Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
   * Example: /// Example: AJM7939B1124
   * Constraints: Minimum length = 0, Maximum length = 36
   */
  public String nextAmcmissionId() { int o = __offset(20); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nextAmcmissionIdAsByteBuffer() { return __vector_as_bytebuffer(20, 1); }
  public ByteBuffer nextAmcmissionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 1); }
  /**
   * A description of this mission's objective.
   * Example: /// Example: Deliver water to island X.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String objective() { int o = __offset(22); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer objectiveAsByteBuffer() { return __vector_as_bytebuffer(22, 1); }
  public ByteBuffer objectiveInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 22, 1); }
  /**
   * A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
   * Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
   * Constraints: Minimum length = 0, Maximum length = 1024
   */
  public String purpose() { int o = __offset(24); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer purposeAsByteBuffer() { return __vector_as_bytebuffer(24, 1); }
  public ByteBuffer purposeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 1); }
  /**
   * Highest Joint Chiefs of Staff priority of this mission.
   * Example: /// Example: 1A3
   * Constraints: Minimum length = 3, Maximum length = 3
   */
  public String jcsPriority() { int o = __offset(26); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer jcsPriorityAsByteBuffer() { return __vector_as_bytebuffer(26, 1); }
  public ByteBuffer jcsPriorityInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 26, 1); }
  /**
   * Flag indicating this is a close watch mission.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean cw() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * The type of mission (e.g. SAAM, CHNL, etc.).
   * Example: /// Example: SAAM
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String type() { int o = __offset(30); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer typeAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer typeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
   * Example: /// Example: KFAY
   * Constraints: Minimum length = 4, Maximum length = 4
   */
  public String firstPickUp() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer firstPickUpAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer firstPickUpInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
   * Example: /// Example: PGUA
   * Constraints: Minimum length = 4, Maximum length = 4
   */
  public String lastDropOff() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer lastDropOffAsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer lastDropOffInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Mission alias.
   * Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
   * Constraints: Minimum length = 0, Maximum length = 48
   */
  public String alias() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer aliasAsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer aliasInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * The call sign for this mission.
   * Example: /// Example: RCH123
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String callSign() { int o = __offset(38); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callSignAsByteBuffer() { return __vector_as_bytebuffer(38, 1); }
  public ByteBuffer callSignInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 38, 1); }
  /**
   * The name of the operation that this mission supports.
   * Example: /// Example: Golden Eye
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String operation() { int o = __offset(40); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer operationAsByteBuffer() { return __vector_as_bytebuffer(40, 1); }
  public ByteBuffer operationInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 40, 1); }
  /**
   * Numbered Air Force (NAF) organization that owns the mission.
   * Example: /// Example: 18AF
   * Constraints: Minimum length = 0, Maximum length = 100
   */
  public String naf() { int o = __offset(42); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nafAsByteBuffer() { return __vector_as_bytebuffer(42, 1); }
  public ByteBuffer nafInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 42, 1); }
  /**
   * The unit the mission is allocated to.
   * Example: /// Example: 437 AEW
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String allocatedUnit() { int o = __offset(44); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer allocatedUnitAsByteBuffer() { return __vector_as_bytebuffer(44, 1); }
  public ByteBuffer allocatedUnitInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 44, 1); }
  /**
   * Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
   * Example: /// Example: MIXED
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String loadCategoryType() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer loadCategoryTypeAsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer loadCategoryTypeInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Current state of the mission.
   * Example: /// Example: EXECUTION
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String state() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stateAsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer stateInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
   * Example: /// Example: -90.12
   * Constraints: No constraints specified.
   */
  public double sourceSysDeviation() { int o = __offset(50); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
   * Example: /// Example: 1083034
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String apacsId() { int o = __offset(52); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer apacsIdAsByteBuffer() { return __vector_as_bytebuffer(52, 1); }
  public ByteBuffer apacsIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 52, 1); }
  /**
   * Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
   * Example: /// Example: G2-182402-AB
   * Constraints: Minimum length = 0, Maximum length = 256
   */
  public String dipWorksheetName() { int o = __offset(54); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer dipWorksheetNameAsByteBuffer() { return __vector_as_bytebuffer(54, 1); }
  public ByteBuffer dipWorksheetNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 54, 1); }
  /**
   * Time the row was created in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String createdAt() { int o = __offset(56); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdAtAsByteBuffer() { return __vector_as_bytebuffer(56, 1); }
  public ByteBuffer createdAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 56, 1); }
  /**
   * Application user who created the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String createdBy() { int o = __offset(58); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer createdByAsByteBuffer() { return __vector_as_bytebuffer(58, 1); }
  public ByteBuffer createdByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 58, 1); }
  /**
   * Time the row was updated in the database, auto-populated by the system.
   * Example: /// Example: 2022-01-01T16:00:00.123Z
   * Constraints: No constraints specified.
   */
  public String updatedAt() { int o = __offset(60); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedAtAsByteBuffer() { return __vector_as_bytebuffer(60, 1); }
  public ByteBuffer updatedAtInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 60, 1); }
  /**
   * Application user who updated the row in the database, auto-populated by the system.
   * Example: /// Example: some.user
   * Constraints: Minimum length = 1, Maximum length = 64
   */
  public String updatedBy() { int o = __offset(62); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer updatedByAsByteBuffer() { return __vector_as_bytebuffer(62, 1); }
  public ByteBuffer updatedByInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 62, 1); }
  /**
   * The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
   * Example: /// Example: AXE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String sourceDl() { int o = __offset(64); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceDlAsByteBuffer() { return __vector_as_bytebuffer(64, 1); }
  public ByteBuffer sourceDlInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 64, 1); }
  /**
   * Source of the data.
   * Example: /// Example: Bluestaq
   * Constraints: Minimum length = 1, Maximum length = 36
   */
  public String source() { int o = __offset(66); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer sourceAsByteBuffer() { return __vector_as_bytebuffer(66, 1); }
  public ByteBuffer sourceInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 66, 1); }
  /**
   * Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
   * Example: /// Example: THIRD_PARTY_DATASOURCE
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String origin() { int o = __offset(68); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer originAsByteBuffer() { return __vector_as_bytebuffer(68, 1); }
  public ByteBuffer originInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 68, 1); }
  /**
   * Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
   * EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
   * REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
   * SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
   * TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
   * Example: /// Example: TEST
   * Constraints: Minimum length = 1, Maximum length = 32
   */
  public byte dataMode() { int o = __offset(70); return o != 0 ? bb.get(o + bb_pos) : 0; }
  /**
   * The originating source network on which this record was created, auto-populated by the system.
   * Example: /// Example: OPS1
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String origNetwork() { int o = __offset(72); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer origNetworkAsByteBuffer() { return __vector_as_bytebuffer(72, 1); }
  public ByteBuffer origNetworkInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 72, 1); }
  /**
   * Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String requirements(int j) { int o = __offset(74); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int requirementsLength() { int o = __offset(74); return o != 0 ? __vector_len(o) : 0; }
  public StringVector requirementsVector() { return requirementsVector(new StringVector()); }
  public StringVector requirementsVector(StringVector obj) { int o = __offset(74); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String remarks(int j) { int o = __offset(76); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int remarksLength() { int o = __offset(76); return o != 0 ? __vector_len(o) : 0; }
  public StringVector remarksVector() { return remarksVector(new StringVector()); }
  public StringVector remarksVector(StringVector obj) { int o = __offset(76); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  /**
   * Collection of Hazardous Material information associated with this Air Transport Mission.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String hazMat(int j) { int o = __offset(78); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int hazMatLength() { int o = __offset(78); return o != 0 ? __vector_len(o) : 0; }
  public StringVector hazMatVector() { return hazMatVector(new StringVector()); }
  public StringVector hazMatVector(StringVector obj) { int o = __offset(78); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createAirTransportMission_Abridged(FlatBufferBuilder builder,
      int idOffset,
      int classificationMarkingOffset,
      int origMissionIdOffset,
      int amcMissionIdOffset,
      int gdssMissionIdOffset,
      int prevMissionIdOffset,
      int prevAmcmissionIdOffset,
      int nextMissionIdOffset,
      int nextAmcmissionIdOffset,
      int objectiveOffset,
      int purposeOffset,
      int jcsPriorityOffset,
      boolean cw,
      int typeOffset,
      int firstPickUpOffset,
      int lastDropOffOffset,
      int aliasOffset,
      int callSignOffset,
      int operationOffset,
      int nafOffset,
      int allocatedUnitOffset,
      int loadCategoryTypeOffset,
      int stateOffset,
      double sourceSysDeviation,
      int apacsIdOffset,
      int dipWorksheetNameOffset,
      int createdAtOffset,
      int createdByOffset,
      int updatedAtOffset,
      int updatedByOffset,
      int sourceDlOffset,
      int sourceOffset,
      int originOffset,
      byte dataMode,
      int origNetworkOffset,
      int requirementsOffset,
      int remarksOffset,
      int hazMatOffset) {
    builder.startTable(38);
    AirTransportMission_Abridged.addSourceSysDeviation(builder, sourceSysDeviation);
    AirTransportMission_Abridged.addHazMat(builder, hazMatOffset);
    AirTransportMission_Abridged.addRemarks(builder, remarksOffset);
    AirTransportMission_Abridged.addRequirements(builder, requirementsOffset);
    AirTransportMission_Abridged.addOrigNetwork(builder, origNetworkOffset);
    AirTransportMission_Abridged.addOrigin(builder, originOffset);
    AirTransportMission_Abridged.addSource(builder, sourceOffset);
    AirTransportMission_Abridged.addSourceDl(builder, sourceDlOffset);
    AirTransportMission_Abridged.addUpdatedBy(builder, updatedByOffset);
    AirTransportMission_Abridged.addUpdatedAt(builder, updatedAtOffset);
    AirTransportMission_Abridged.addCreatedBy(builder, createdByOffset);
    AirTransportMission_Abridged.addCreatedAt(builder, createdAtOffset);
    AirTransportMission_Abridged.addDipWorksheetName(builder, dipWorksheetNameOffset);
    AirTransportMission_Abridged.addApacsId(builder, apacsIdOffset);
    AirTransportMission_Abridged.addState(builder, stateOffset);
    AirTransportMission_Abridged.addLoadCategoryType(builder, loadCategoryTypeOffset);
    AirTransportMission_Abridged.addAllocatedUnit(builder, allocatedUnitOffset);
    AirTransportMission_Abridged.addNaf(builder, nafOffset);
    AirTransportMission_Abridged.addOperation(builder, operationOffset);
    AirTransportMission_Abridged.addCallSign(builder, callSignOffset);
    AirTransportMission_Abridged.addAlias(builder, aliasOffset);
    AirTransportMission_Abridged.addLastDropOff(builder, lastDropOffOffset);
    AirTransportMission_Abridged.addFirstPickUp(builder, firstPickUpOffset);
    AirTransportMission_Abridged.addType(builder, typeOffset);
    AirTransportMission_Abridged.addJcsPriority(builder, jcsPriorityOffset);
    AirTransportMission_Abridged.addPurpose(builder, purposeOffset);
    AirTransportMission_Abridged.addObjective(builder, objectiveOffset);
    AirTransportMission_Abridged.addNextAmcmissionId(builder, nextAmcmissionIdOffset);
    AirTransportMission_Abridged.addNextMissionId(builder, nextMissionIdOffset);
    AirTransportMission_Abridged.addPrevAmcmissionId(builder, prevAmcmissionIdOffset);
    AirTransportMission_Abridged.addPrevMissionId(builder, prevMissionIdOffset);
    AirTransportMission_Abridged.addGdssMissionId(builder, gdssMissionIdOffset);
    AirTransportMission_Abridged.addAmcMissionId(builder, amcMissionIdOffset);
    AirTransportMission_Abridged.addOrigMissionId(builder, origMissionIdOffset);
    AirTransportMission_Abridged.addClassificationMarking(builder, classificationMarkingOffset);
    AirTransportMission_Abridged.addId(builder, idOffset);
    AirTransportMission_Abridged.addDataMode(builder, dataMode);
    AirTransportMission_Abridged.addCw(builder, cw);
    return AirTransportMission_Abridged.endAirTransportMission_Abridged(builder);
  }

  public static void startAirTransportMission_Abridged(FlatBufferBuilder builder) { builder.startTable(38); }
  public static void addId(FlatBufferBuilder builder, int idOffset) { builder.addOffset(0, idOffset, 0); }
  public static void addClassificationMarking(FlatBufferBuilder builder, int classificationMarkingOffset) { builder.addOffset(1, classificationMarkingOffset, 0); }
  public static void addOrigMissionId(FlatBufferBuilder builder, int origMissionIdOffset) { builder.addOffset(2, origMissionIdOffset, 0); }
  public static void addAmcMissionId(FlatBufferBuilder builder, int amcMissionIdOffset) { builder.addOffset(3, amcMissionIdOffset, 0); }
  public static void addGdssMissionId(FlatBufferBuilder builder, int gdssMissionIdOffset) { builder.addOffset(4, gdssMissionIdOffset, 0); }
  public static void addPrevMissionId(FlatBufferBuilder builder, int prevMissionIdOffset) { builder.addOffset(5, prevMissionIdOffset, 0); }
  public static void addPrevAmcmissionId(FlatBufferBuilder builder, int prevAmcmissionIdOffset) { builder.addOffset(6, prevAmcmissionIdOffset, 0); }
  public static void addNextMissionId(FlatBufferBuilder builder, int nextMissionIdOffset) { builder.addOffset(7, nextMissionIdOffset, 0); }
  public static void addNextAmcmissionId(FlatBufferBuilder builder, int nextAmcmissionIdOffset) { builder.addOffset(8, nextAmcmissionIdOffset, 0); }
  public static void addObjective(FlatBufferBuilder builder, int objectiveOffset) { builder.addOffset(9, objectiveOffset, 0); }
  public static void addPurpose(FlatBufferBuilder builder, int purposeOffset) { builder.addOffset(10, purposeOffset, 0); }
  public static void addJcsPriority(FlatBufferBuilder builder, int jcsPriorityOffset) { builder.addOffset(11, jcsPriorityOffset, 0); }
  public static void addCw(FlatBufferBuilder builder, boolean cw) { builder.addBoolean(12, cw, false); }
  public static void addType(FlatBufferBuilder builder, int typeOffset) { builder.addOffset(13, typeOffset, 0); }
  public static void addFirstPickUp(FlatBufferBuilder builder, int firstPickUpOffset) { builder.addOffset(14, firstPickUpOffset, 0); }
  public static void addLastDropOff(FlatBufferBuilder builder, int lastDropOffOffset) { builder.addOffset(15, lastDropOffOffset, 0); }
  public static void addAlias(FlatBufferBuilder builder, int aliasOffset) { builder.addOffset(16, aliasOffset, 0); }
  public static void addCallSign(FlatBufferBuilder builder, int callSignOffset) { builder.addOffset(17, callSignOffset, 0); }
  public static void addOperation(FlatBufferBuilder builder, int operationOffset) { builder.addOffset(18, operationOffset, 0); }
  public static void addNaf(FlatBufferBuilder builder, int nafOffset) { builder.addOffset(19, nafOffset, 0); }
  public static void addAllocatedUnit(FlatBufferBuilder builder, int allocatedUnitOffset) { builder.addOffset(20, allocatedUnitOffset, 0); }
  public static void addLoadCategoryType(FlatBufferBuilder builder, int loadCategoryTypeOffset) { builder.addOffset(21, loadCategoryTypeOffset, 0); }
  public static void addState(FlatBufferBuilder builder, int stateOffset) { builder.addOffset(22, stateOffset, 0); }
  public static void addSourceSysDeviation(FlatBufferBuilder builder, double sourceSysDeviation) { builder.addDouble(23, sourceSysDeviation, 0.0); }
  public static void addApacsId(FlatBufferBuilder builder, int apacsIdOffset) { builder.addOffset(24, apacsIdOffset, 0); }
  public static void addDipWorksheetName(FlatBufferBuilder builder, int dipWorksheetNameOffset) { builder.addOffset(25, dipWorksheetNameOffset, 0); }
  public static void addCreatedAt(FlatBufferBuilder builder, int createdAtOffset) { builder.addOffset(26, createdAtOffset, 0); }
  public static void addCreatedBy(FlatBufferBuilder builder, int createdByOffset) { builder.addOffset(27, createdByOffset, 0); }
  public static void addUpdatedAt(FlatBufferBuilder builder, int updatedAtOffset) { builder.addOffset(28, updatedAtOffset, 0); }
  public static void addUpdatedBy(FlatBufferBuilder builder, int updatedByOffset) { builder.addOffset(29, updatedByOffset, 0); }
  public static void addSourceDl(FlatBufferBuilder builder, int sourceDlOffset) { builder.addOffset(30, sourceDlOffset, 0); }
  public static void addSource(FlatBufferBuilder builder, int sourceOffset) { builder.addOffset(31, sourceOffset, 0); }
  public static void addOrigin(FlatBufferBuilder builder, int originOffset) { builder.addOffset(32, originOffset, 0); }
  public static void addDataMode(FlatBufferBuilder builder, byte dataMode) { builder.addByte(33, dataMode, 0); }
  public static void addOrigNetwork(FlatBufferBuilder builder, int origNetworkOffset) { builder.addOffset(34, origNetworkOffset, 0); }
  public static void addRequirements(FlatBufferBuilder builder, int requirementsOffset) { builder.addOffset(35, requirementsOffset, 0); }
  public static int createRequirementsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRequirementsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addRemarks(FlatBufferBuilder builder, int remarksOffset) { builder.addOffset(36, remarksOffset, 0); }
  public static int createRemarksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRemarksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHazMat(FlatBufferBuilder builder, int hazMatOffset) { builder.addOffset(37, hazMatOffset, 0); }
  public static int createHazMatVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHazMatVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endAirTransportMission_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishAirTransportMission_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "AIRT"); }
  public static void finishSizePrefixedAirTransportMission_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "AIRT"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AirTransportMission_Abridged get(int j) { return get(new AirTransportMission_Abridged(), j); }
    public AirTransportMission_Abridged get(AirTransportMission_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

