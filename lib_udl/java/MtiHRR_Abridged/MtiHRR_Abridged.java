// automatically generated by the FlatBuffers compiler, do not modify

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

/**
 * /// Data on High-Range Resolution (HRR) targets or High Range Resolution Range Doppler Maps (RDM) for a specified area.
 */
@SuppressWarnings("unused")
public final class MtiHRR_Abridged extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_24_3_25(); }
  public static MtiHRR_Abridged getRootAsMtiHRR_Abridged(ByteBuffer _bb) { return getRootAsMtiHRR_Abridged(_bb, new MtiHRR_Abridged()); }
  public static MtiHRR_Abridged getRootAsMtiHRR_Abridged(ByteBuffer _bb, MtiHRR_Abridged obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public static boolean MtiHRR_AbridgedBufferHasIdentifier(ByteBuffer _bb) { return __has_identifier(_bb, "MTIH"); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public MtiHRR_Abridged __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /**
   * Sequential count of a revisit of the bounding area for a given job ID.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int h2() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int h3() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Flag to indicate the last dwell of the revisit.
   * Example: /// Example: True
   * Constraints: No constraints specified.
   */
  public boolean h4() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  /**
   * Sequential index of the associated MTI Report.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int h5() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of Range Doppler pixels that exceed target scatterer threshold and are reported in this segment.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int h6() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of Range Bins/Samples in a Range Doppler Chip.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int h7() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Number of Doppler bins in a Range-Doppler chip.
   * Example: /// Example: 12
   * Constraints: No constraints specified.
   */
  public int h8() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * The Peak Scatter returns the maximum power level (e.g. in milliwatts, or dBm) registered by the sensor.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h9() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Detection threshold used to isolate significant target scatterer pixels, expressed as power relative to clutter mean in negative quarter-decibels.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h10() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * 3dB range impulse response of the radar, expressed in centimeters.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double h11() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Slant Range pixel spacing after over sampling, expressed in centimeters.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double h12() { int o = __offset(24); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * 3dB Doppler resolution of the radar, expressed in Hertz.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double h13() { int o = __offset(26); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Doppler pixel spacing after over sampling, expressed in Hertz.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double h14() { int o = __offset(28); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Center Frequency of the radar in GHz.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double h15() { int o = __offset(30); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * Enumeration table denoting the compression technique used.
   * Example: /// Example: TABLE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String h16() { int o = __offset(32); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer h16AsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer h16InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }
  /**
   * Enumeration table indicating the spectral weighting used in the range compression process.
   * Example: /// Example: TABLE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String h17() { int o = __offset(34); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer h17AsByteBuffer() { return __vector_as_bytebuffer(34, 1); }
  public ByteBuffer h17InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 34, 1); }
  /**
   * Enumeration table indicating the spectral weighting used in the cross-range or Doppler compression process.
   * Example: /// Example: TABLE
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String h18() { int o = __offset(36); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer h18AsByteBuffer() { return __vector_as_bytebuffer(36, 1); }
  public ByteBuffer h18InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 36, 1); }
  /**
   * Initial power of the peak scatterer, expressed in dB.
   * Example: /// Example: 12.23
   * Constraints: No constraints specified.
   */
  public double h19() { int o = __offset(38); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  /**
   * RCS of the peak scatterer, expressed in half-decibels (dB/2).
   * Example: /// Example: 117
   * Constraints: No constraints specified.
   */
  public int h20() { int o = __offset(40); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * When the RDM does not correlate to a single MTI report index or when the center range bin does not correlate to the center of the dwell; provide the range sample offset in meters from Dwell Center (positive is away from the sensor) of the first scatterer record.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h21() { int o = __offset(42); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * When the RDM does not correlate to a single MTI report index or the center doppler bin does not correlate to the doppler centroid of the dwell; Doppler sample value in Hz of the first scatterer record.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h22() { int o = __offset(44); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Enumeration field which designates the type of data being delivered.
   * Example: /// Example: FIELD
   * Constraints: Minimum length = 0, Maximum length = 32
   */
  public String h23() { int o = __offset(46); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer h23AsByteBuffer() { return __vector_as_bytebuffer(46, 1); }
  public ByteBuffer h23InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 46, 1); }
  /**
   * Flag field to indicate the additional signal processing techniques applied to the data.
   * Example: /// Example: FLAG
   * Constraints: Minimum length = 0, Maximum length = 64
   */
  public String h24() { int o = __offset(48); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer h24AsByteBuffer() { return __vector_as_bytebuffer(48, 1); }
  public ByteBuffer h24InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 48, 1); }
  /**
   * Number of pixels in the range dimension of the chip.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h27() { int o = __offset(50); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Distance from Range Bin to closest edge in the entire chip, expressed in centimeters.
   * Example: /// Example: 1234567890
   * Constraints: No constraints specified.
   */
  public long h28() { int o = __offset(52); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  /**
   * Relative velocity to skin line.
   * Example: /// Example: 1
   * Constraints: No constraints specified.
   */
  public int h29() { int o = __offset(54); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Computed object length based upon HRR profile, in meters.
   * Example: /// Example: 22
   * Constraints: No constraints specified.
   */
  public int h30() { int o = __offset(56); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of estimate of the object length, expressed in meters.
   * Example: /// Example: 55
   * Constraints: No constraints specified.
   */
  public int h31() { int o = __offset(58); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  /**
   * Standard deviation of estimate of the object length, expressed in meters.
   * Example: /// Example: No example provided.
   * Constraints: No constraints specified.
   */
  public String h32(int j) { int o = __offset(60); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int h32Length() { int o = __offset(60); return o != 0 ? __vector_len(o) : 0; }
  public StringVector h32Vector() { return h32Vector(new StringVector()); }
  public StringVector h32Vector(StringVector obj) { int o = __offset(60); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createMtiHRR_Abridged(FlatBufferBuilder builder,
      int h2,
      int h3,
      boolean h4,
      int h5,
      int h6,
      int h7,
      int h8,
      int h9,
      int h10,
      double h11,
      double h12,
      double h13,
      double h14,
      double h15,
      int h16Offset,
      int h17Offset,
      int h18Offset,
      double h19,
      int h20,
      int h21,
      int h22,
      int h23Offset,
      int h24Offset,
      int h27,
      long h28,
      int h29,
      int h30,
      int h31,
      int h32Offset) {
    builder.startTable(29);
    MtiHRR_Abridged.addH28(builder, h28);
    MtiHRR_Abridged.addH19(builder, h19);
    MtiHRR_Abridged.addH15(builder, h15);
    MtiHRR_Abridged.addH14(builder, h14);
    MtiHRR_Abridged.addH13(builder, h13);
    MtiHRR_Abridged.addH12(builder, h12);
    MtiHRR_Abridged.addH11(builder, h11);
    MtiHRR_Abridged.addH32(builder, h32Offset);
    MtiHRR_Abridged.addH31(builder, h31);
    MtiHRR_Abridged.addH30(builder, h30);
    MtiHRR_Abridged.addH29(builder, h29);
    MtiHRR_Abridged.addH27(builder, h27);
    MtiHRR_Abridged.addH24(builder, h24Offset);
    MtiHRR_Abridged.addH23(builder, h23Offset);
    MtiHRR_Abridged.addH22(builder, h22);
    MtiHRR_Abridged.addH21(builder, h21);
    MtiHRR_Abridged.addH20(builder, h20);
    MtiHRR_Abridged.addH18(builder, h18Offset);
    MtiHRR_Abridged.addH17(builder, h17Offset);
    MtiHRR_Abridged.addH16(builder, h16Offset);
    MtiHRR_Abridged.addH10(builder, h10);
    MtiHRR_Abridged.addH9(builder, h9);
    MtiHRR_Abridged.addH8(builder, h8);
    MtiHRR_Abridged.addH7(builder, h7);
    MtiHRR_Abridged.addH6(builder, h6);
    MtiHRR_Abridged.addH5(builder, h5);
    MtiHRR_Abridged.addH3(builder, h3);
    MtiHRR_Abridged.addH2(builder, h2);
    MtiHRR_Abridged.addH4(builder, h4);
    return MtiHRR_Abridged.endMtiHRR_Abridged(builder);
  }

  public static void startMtiHRR_Abridged(FlatBufferBuilder builder) { builder.startTable(29); }
  public static void addH2(FlatBufferBuilder builder, int h2) { builder.addInt(0, h2, 0); }
  public static void addH3(FlatBufferBuilder builder, int h3) { builder.addInt(1, h3, 0); }
  public static void addH4(FlatBufferBuilder builder, boolean h4) { builder.addBoolean(2, h4, false); }
  public static void addH5(FlatBufferBuilder builder, int h5) { builder.addInt(3, h5, 0); }
  public static void addH6(FlatBufferBuilder builder, int h6) { builder.addInt(4, h6, 0); }
  public static void addH7(FlatBufferBuilder builder, int h7) { builder.addInt(5, h7, 0); }
  public static void addH8(FlatBufferBuilder builder, int h8) { builder.addInt(6, h8, 0); }
  public static void addH9(FlatBufferBuilder builder, int h9) { builder.addInt(7, h9, 0); }
  public static void addH10(FlatBufferBuilder builder, int h10) { builder.addInt(8, h10, 0); }
  public static void addH11(FlatBufferBuilder builder, double h11) { builder.addDouble(9, h11, 0.0); }
  public static void addH12(FlatBufferBuilder builder, double h12) { builder.addDouble(10, h12, 0.0); }
  public static void addH13(FlatBufferBuilder builder, double h13) { builder.addDouble(11, h13, 0.0); }
  public static void addH14(FlatBufferBuilder builder, double h14) { builder.addDouble(12, h14, 0.0); }
  public static void addH15(FlatBufferBuilder builder, double h15) { builder.addDouble(13, h15, 0.0); }
  public static void addH16(FlatBufferBuilder builder, int h16Offset) { builder.addOffset(14, h16Offset, 0); }
  public static void addH17(FlatBufferBuilder builder, int h17Offset) { builder.addOffset(15, h17Offset, 0); }
  public static void addH18(FlatBufferBuilder builder, int h18Offset) { builder.addOffset(16, h18Offset, 0); }
  public static void addH19(FlatBufferBuilder builder, double h19) { builder.addDouble(17, h19, 0.0); }
  public static void addH20(FlatBufferBuilder builder, int h20) { builder.addInt(18, h20, 0); }
  public static void addH21(FlatBufferBuilder builder, int h21) { builder.addInt(19, h21, 0); }
  public static void addH22(FlatBufferBuilder builder, int h22) { builder.addInt(20, h22, 0); }
  public static void addH23(FlatBufferBuilder builder, int h23Offset) { builder.addOffset(21, h23Offset, 0); }
  public static void addH24(FlatBufferBuilder builder, int h24Offset) { builder.addOffset(22, h24Offset, 0); }
  public static void addH27(FlatBufferBuilder builder, int h27) { builder.addInt(23, h27, 0); }
  public static void addH28(FlatBufferBuilder builder, long h28) { builder.addLong(24, h28, 0L); }
  public static void addH29(FlatBufferBuilder builder, int h29) { builder.addInt(25, h29, 0); }
  public static void addH30(FlatBufferBuilder builder, int h30) { builder.addInt(26, h30, 0); }
  public static void addH31(FlatBufferBuilder builder, int h31) { builder.addInt(27, h31, 0); }
  public static void addH32(FlatBufferBuilder builder, int h32Offset) { builder.addOffset(28, h32Offset, 0); }
  public static int createH32Vector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startH32Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMtiHRR_Abridged(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMtiHRR_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset, "MTIH"); }
  public static void finishSizePrefixedMtiHRR_AbridgedBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset, "MTIH"); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public MtiHRR_Abridged get(int j) { return get(new MtiHRR_Abridged(), j); }
    public MtiHRR_Abridged get(MtiHRR_Abridged obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

