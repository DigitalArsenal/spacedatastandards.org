// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SOLAR_ARRAY_DETAILS_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SOLAR_ARRAY_DETAILS_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SOLAR_ARRAY_DETAILS_DATA_MODE_ENUM: [SolarArrayDetails_dataMode_Enum; 4] = [
  SolarArrayDetails_dataMode_Enum::REAL,
  SolarArrayDetails_dataMode_Enum::TEST,
  SolarArrayDetails_dataMode_Enum::SIMULATED,
  SolarArrayDetails_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SolarArrayDetails_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SolarArrayDetails_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SolarArrayDetails_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SolarArrayDetails_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SolarArrayDetails_dataMode_Enum {
    type Output = SolarArrayDetails_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SolarArrayDetails_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SolarArrayDetails_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SolarArrayDetails_dataMode_Enum {}
pub enum SolarArrayDetailsOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of Information on spacecraft SolarArrayDetails. A SolarArray may have multiple details records compiled by various sources.
pub struct SolarArrayDetails<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SolarArrayDetails<'a> {
  type Inner = SolarArrayDetails<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SolarArrayDetails<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDSOLARARRAY: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 10;
  pub const VT_TECHNOLOGY: flatbuffers::VOffsetT = 12;
  pub const VT_JUNCTIONTECHNOLOGY: flatbuffers::VOffsetT = 14;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 16;
  pub const VT_SPAN: flatbuffers::VOffsetT = 18;
  pub const VT_AREA: flatbuffers::VOffsetT = 20;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 22;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 24;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 26;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 28;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 30;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 32;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 34;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 36;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 38;
  pub const VT_TAGS: flatbuffers::VOffsetT = 40;
  pub const VT_MANUFACTURERORG: flatbuffers::VOffsetT = 42;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SolarArrayDetails { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SolarArrayDetailsArgs<'args>
  ) -> flatbuffers::WIPOffset<SolarArrayDetails<'bldr>> {
    let mut builder = SolarArrayDetailsBuilder::new(_fbb);
    builder.add_area(args.area);
    builder.add_span(args.span);
    if let Some(x) = args.manufacturerOrg { builder.add_manufacturerOrg(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.junctionTechnology { builder.add_junctionTechnology(x); }
    if let Some(x) = args.technology { builder.add_technology(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idSolarArray { builder.add_idSolarArray(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> SolarArrayDetailsT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idSolarArray = self.idSolarArray().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let technology = self.technology().map(|x| {
      x.to_string()
    });
    let junctionTechnology = self.junctionTechnology().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let span = self.span();
    let area = self.area();
    let description = self.description().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let manufacturerOrg = self.manufacturerOrg().map(|x| {
      x.to_string()
    });
    SolarArrayDetailsT {
      id,
      idSolarArray,
      classificationMarking,
      type_,
      technology,
      junctionTechnology,
      manufacturerOrgId,
      span,
      area,
      description,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
      manufacturerOrg,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SOLARARRAYDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_ID, None)}
  }
  /// Unique identifier of the parent SolarArray.
  /// Example: /// Example: SOLARARRAY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idSolarArray(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_IDSOLARARRAY, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Type of solar array (e.g. U Shaped).
  /// Example: /// Example: U Shaped
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_TYPE_, None)}
  }
  /// Solar array technology (e.g. Ga-As).
  /// Example: /// Example: Ga-As
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn technology(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_TECHNOLOGY, None)}
  }
  /// Solar array junction technology (e.g. Triple).
  /// Example: /// Example: Triple
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn junctionTechnology(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_JUNCTIONTECHNOLOGY, None)}
  }
  /// Unique identifier of the organization that manufactures the solar array.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_MANUFACTURERORGID, None)}
  }
  /// Solar Array span in meters.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn span(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SolarArrayDetails::VT_SPAN, Some(0.0)).unwrap()}
  }
  /// Solar Array area in square meters.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn area(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SolarArrayDetails::VT_AREA, Some(0.0)).unwrap()}
  }
  /// Solar array description/notes.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_DESCRIPTION, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SolarArrayDetails_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SolarArrayDetails_dataMode_Enum>(SolarArrayDetails::VT_DATAMODE, Some(SolarArrayDetails_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SolarArrayDetails::VT_TAGS, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn manufacturerOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SolarArrayDetails::VT_MANUFACTURERORG, None)}
  }
}

impl flatbuffers::Verifiable for SolarArrayDetails<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSolarArray", Self::VT_IDSOLARARRAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("technology", Self::VT_TECHNOLOGY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("junctionTechnology", Self::VT_JUNCTIONTECHNOLOGY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<f64>("span", Self::VT_SPAN, false)?
     .visit_field::<f64>("area", Self::VT_AREA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<SolarArrayDetails_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrg", Self::VT_MANUFACTURERORG, false)?
     .finish();
    Ok(())
  }
}
pub struct SolarArrayDetailsArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSolarArray: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub technology: Option<flatbuffers::WIPOffset<&'a str>>,
    pub junctionTechnology: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub span: f64,
    pub area: f64,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SolarArrayDetails_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub manufacturerOrg: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SolarArrayDetailsArgs<'a> {
  #[inline]
  fn default() -> Self {
    SolarArrayDetailsArgs {
      id: None,
      idSolarArray: None,
      classificationMarking: None,
      type_: None,
      technology: None,
      junctionTechnology: None,
      manufacturerOrgId: None,
      span: 0.0,
      area: 0.0,
      description: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SolarArrayDetails_dataMode_Enum::REAL,
      tags: None,
      manufacturerOrg: None,
    }
  }
}

pub struct SolarArrayDetailsBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SolarArrayDetailsBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_ID, id);
  }
  #[inline]
  pub fn add_idSolarArray(&mut self, idSolarArray: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_IDSOLARARRAY, idSolarArray);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_technology(&mut self, technology: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_TECHNOLOGY, technology);
  }
  #[inline]
  pub fn add_junctionTechnology(&mut self, junctionTechnology: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_JUNCTIONTECHNOLOGY, junctionTechnology);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_span(&mut self, span: f64) {
    self.fbb_.push_slot::<f64>(SolarArrayDetails::VT_SPAN, span, 0.0);
  }
  #[inline]
  pub fn add_area(&mut self, area: f64) {
    self.fbb_.push_slot::<f64>(SolarArrayDetails::VT_AREA, area, 0.0);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SolarArrayDetails_dataMode_Enum) {
    self.fbb_.push_slot::<SolarArrayDetails_dataMode_Enum>(SolarArrayDetails::VT_DATAMODE, dataMode, SolarArrayDetails_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_manufacturerOrg(&mut self, manufacturerOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SolarArrayDetails::VT_MANUFACTURERORG, manufacturerOrg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SolarArrayDetailsBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SolarArrayDetailsBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SolarArrayDetails<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SolarArrayDetails<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SolarArrayDetails");
      ds.field("id", &self.id());
      ds.field("idSolarArray", &self.idSolarArray());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("type_", &self.type_());
      ds.field("technology", &self.technology());
      ds.field("junctionTechnology", &self.junctionTechnology());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("span", &self.span());
      ds.field("area", &self.area());
      ds.field("description", &self.description());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.field("manufacturerOrg", &self.manufacturerOrg());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SolarArrayDetailsT {
  pub id: Option<String>,
  pub idSolarArray: Option<String>,
  pub classificationMarking: Option<String>,
  pub type_: Option<String>,
  pub technology: Option<String>,
  pub junctionTechnology: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub span: f64,
  pub area: f64,
  pub description: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: SolarArrayDetails_dataMode_Enum,
  pub tags: Option<Vec<String>>,
  pub manufacturerOrg: Option<String>,
}
impl Default for SolarArrayDetailsT {
  fn default() -> Self {
    Self {
      id: None,
      idSolarArray: None,
      classificationMarking: None,
      type_: None,
      technology: None,
      junctionTechnology: None,
      manufacturerOrgId: None,
      span: 0.0,
      area: 0.0,
      description: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SolarArrayDetails_dataMode_Enum::REAL,
      tags: None,
      manufacturerOrg: None,
    }
  }
}
impl SolarArrayDetailsT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SolarArrayDetails<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSolarArray = self.idSolarArray.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let technology = self.technology.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let junctionTechnology = self.junctionTechnology.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let span = self.span;
    let area = self.area;
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let manufacturerOrg = self.manufacturerOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SolarArrayDetails::create(_fbb, &SolarArrayDetailsArgs{
      id,
      idSolarArray,
      classificationMarking,
      type_,
      technology,
      junctionTechnology,
      manufacturerOrgId,
      span,
      area,
      description,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
      manufacturerOrg,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SolarArrayDetails`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_solar_array_details_unchecked`.
pub fn root_as_solar_array_details(buf: &[u8]) -> Result<SolarArrayDetails, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SolarArrayDetails>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SolarArrayDetails` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_solar_array_details_unchecked`.
pub fn size_prefixed_root_as_solar_array_details(buf: &[u8]) -> Result<SolarArrayDetails, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SolarArrayDetails>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SolarArrayDetails` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_solar_array_details_unchecked`.
pub fn root_as_solar_array_details_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SolarArrayDetails<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SolarArrayDetails<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SolarArrayDetails` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_solar_array_details_unchecked`.
pub fn size_prefixed_root_as_solar_array_details_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SolarArrayDetails<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SolarArrayDetails<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SolarArrayDetails and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SolarArrayDetails`.
pub unsafe fn root_as_solar_array_details_unchecked(buf: &[u8]) -> SolarArrayDetails {
  flatbuffers::root_unchecked::<SolarArrayDetails>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SolarArrayDetails and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SolarArrayDetails`.
pub unsafe fn size_prefixed_root_as_solar_array_details_unchecked(buf: &[u8]) -> SolarArrayDetails {
  flatbuffers::size_prefixed_root_unchecked::<SolarArrayDetails>(buf)
}
pub const SOLAR_ARRAY_DETAILS_IDENTIFIER: &str = "SOLA";

#[inline]
pub fn solar_array_details_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SOLAR_ARRAY_DETAILS_IDENTIFIER, false)
}

#[inline]
pub fn solar_array_details_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SOLAR_ARRAY_DETAILS_IDENTIFIER, true)
}

#[inline]
pub fn finish_solar_array_details_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SolarArrayDetails<'a>>) {
  fbb.finish(root, Some(SOLAR_ARRAY_DETAILS_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_solar_array_details_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SolarArrayDetails<'a>>) {
  fbb.finish_size_prefixed(root, Some(SOLAR_ARRAY_DETAILS_IDENTIFIER));
}
