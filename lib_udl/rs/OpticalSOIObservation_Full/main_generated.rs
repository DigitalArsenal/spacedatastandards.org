// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum OpticalSOIObservation_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// An Optical SOI record contains observation information taken from a sensor about a Space Object.
pub struct OpticalSOIObservation_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OpticalSOIObservation_Full<'a> {
  type Inner = OpticalSOIObservation_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OpticalSOIObservation_Full<'a> {
  pub const VT_OBSTARTTIME: flatbuffers::VOffsetT = 4;
  pub const VT_INTENSITYTIMES: flatbuffers::VOffsetT = 6;
  pub const VT_CURRENTSPECTRALFILTERNUM: flatbuffers::VOffsetT = 8;
  pub const VT_EXPDURATION: flatbuffers::VOffsetT = 10;
  pub const VT_INTENSITIES: flatbuffers::VOffsetT = 12;
  pub const VT_EXTINCTIONCOEFFS: flatbuffers::VOffsetT = 14;
  pub const VT_EXTINCTIONCOEFFSUNC: flatbuffers::VOffsetT = 16;
  pub const VT_SKYBGS: flatbuffers::VOffsetT = 18;
  pub const VT_LOCALSKYBGS: flatbuffers::VOffsetT = 20;
  pub const VT_LOCALSKYBGSUNC: flatbuffers::VOffsetT = 22;
  pub const VT_NUMDETECTEDSTARS: flatbuffers::VOffsetT = 24;
  pub const VT_NUMCORRELATEDSTARS: flatbuffers::VOffsetT = 26;
  pub const VT_ZEROPOINTS: flatbuffers::VOffsetT = 28;
  pub const VT_RAS: flatbuffers::VOffsetT = 30;
  pub const VT_DECLINATIONS: flatbuffers::VOffsetT = 32;
  pub const VT_RARATES: flatbuffers::VOffsetT = 34;
  pub const VT_PERCENTSATS: flatbuffers::VOffsetT = 36;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OpticalSOIObservation_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OpticalSOIObservation_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<OpticalSOIObservation_Full<'bldr>> {
    let mut builder = OpticalSOIObservation_FullBuilder::new(_fbb);
    builder.add_expDuration(args.expDuration);
    if let Some(x) = args.percentSats { builder.add_percentSats(x); }
    if let Some(x) = args.raRates { builder.add_raRates(x); }
    if let Some(x) = args.declinations { builder.add_declinations(x); }
    if let Some(x) = args.ras { builder.add_ras(x); }
    if let Some(x) = args.zeroPoints { builder.add_zeroPoints(x); }
    if let Some(x) = args.numCorrelatedStars { builder.add_numCorrelatedStars(x); }
    if let Some(x) = args.numDetectedStars { builder.add_numDetectedStars(x); }
    if let Some(x) = args.localSkyBgsUnc { builder.add_localSkyBgsUnc(x); }
    if let Some(x) = args.localSkyBgs { builder.add_localSkyBgs(x); }
    if let Some(x) = args.skyBgs { builder.add_skyBgs(x); }
    if let Some(x) = args.extinctionCoeffsUnc { builder.add_extinctionCoeffsUnc(x); }
    if let Some(x) = args.extinctionCoeffs { builder.add_extinctionCoeffs(x); }
    if let Some(x) = args.intensities { builder.add_intensities(x); }
    builder.add_currentSpectralFilterNum(args.currentSpectralFilterNum);
    if let Some(x) = args.intensityTimes { builder.add_intensityTimes(x); }
    if let Some(x) = args.obStartTime { builder.add_obStartTime(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> OpticalSOIObservation_FullT {
    let obStartTime = self.obStartTime().map(|x| {
      x.to_string()
    });
    let intensityTimes = self.intensityTimes().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let currentSpectralFilterNum = self.currentSpectralFilterNum();
    let expDuration = self.expDuration();
    let intensities = self.intensities().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let extinctionCoeffs = self.extinctionCoeffs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let extinctionCoeffsUnc = self.extinctionCoeffsUnc().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let skyBgs = self.skyBgs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let localSkyBgs = self.localSkyBgs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let localSkyBgsUnc = self.localSkyBgsUnc().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let numDetectedStars = self.numDetectedStars().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let numCorrelatedStars = self.numCorrelatedStars().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let zeroPoints = self.zeroPoints().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let ras = self.ras().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let declinations = self.declinations().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let raRates = self.raRates().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let percentSats = self.percentSats().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    OpticalSOIObservation_FullT {
      obStartTime,
      intensityTimes,
      currentSpectralFilterNum,
      expDuration,
      intensities,
      extinctionCoeffs,
      extinctionCoeffsUnc,
      skyBgs,
      localSkyBgs,
      localSkyBgsUnc,
      numDetectedStars,
      numCorrelatedStars,
      zeroPoints,
      ras,
      declinations,
      raRates,
      percentSats,
    }
  }

  /// Observation detection start time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.888456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OpticalSOIObservation_Full::VT_OBSTARTTIME, None)}
  }
  /// Array of start times for each intensity measurement. The 1st value in the array will match obStartTime.
  /// Example: /// Example: ['2018-01-01T16:00:00.888456Z', '2018-01-01T16:00:00.898456Z', '2018-01-01T16:00:00.998456Z']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn intensityTimes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_INTENSITYTIMES, None)}
  }
  /// The reference number, x, where x ranges from 1 to n, where n is the number specified in spectralFilters that corresponds to the spectral filter used.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn currentSpectralFilterNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OpticalSOIObservation_Full::VT_CURRENTSPECTRALFILTERNUM, Some(0)).unwrap()}
  }
  /// Image exposure duration in seconds.
  /// Example: /// Example: 0.455
  /// Constraints: No constraints specified.
  #[inline]
  pub fn expDuration(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OpticalSOIObservation_Full::VT_EXPDURATION, Some(0.0)).unwrap()}
  }
  /// Array of intensities of the Space Object for observations, in kilowatts per steradian per micrometer.
  /// Example: /// Example: [1.1, 1.1, 1.1]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn intensities(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_INTENSITIES, None)}
  }
  /// Array of coefficients for how much signal would be lost to atmospheric attenuation for a star at zenith for each element in intensities, in magnitudes per air mass.
  /// Example: /// Example: [0.32, 0.32, 0.32]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn extinctionCoeffs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_EXTINCTIONCOEFFS, None)}
  }
  /// Array of extinction coefficient uncertainties for each element in intensities. Each value represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  /// Example: /// Example: [0.06, 0.06, 0.06]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn extinctionCoeffsUnc(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_EXTINCTIONCOEFFSUNC, None)}
  }
  /// Array of average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: [100625.375, 100625.375, 100625.375]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn skyBgs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_SKYBGS, None)}
  }
  /// Array of local average Sky Background signals, in magnitudes, with a value corresponding to the time of each intensity measurement. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: [100625.375, 100625.375, 100625.375]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn localSkyBgs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_LOCALSKYBGS, None)}
  }
  /// Array of uncertainty of the local average Sky Background signal, in magnitudes, with a value corresponding to the time of each intensity measurement.
  /// Example: /// Example: [0.065, 0.065, 0.065]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn localSkyBgsUnc(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_LOCALSKYBGSUNC, None)}
  }
  /// Array of the number of detected stars in the FOV with a value for each element in the intensities field.
  /// Example: /// Example: [6, 6, 6]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numDetectedStars(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_NUMDETECTEDSTARS, None)}
  }
  /// Array of the number of correlated stars in the FOV with a value for each element in the intensities field.
  /// Example: /// Example: [3, 3, 3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numCorrelatedStars(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_NUMCORRELATEDSTARS, None)}
  }
  /// Array of values for the zero-point in magnitudes, calculated at the time of each intensity measurement. It is the difference between the catalog mag and instrumental mag for a set of standard stars (e.g. -5.0 to 30.0).
  /// Example: /// Example: [24.711, 24.711, 24.711]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zeroPoints(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_ZEROPOINTS, None)}
  }
  /// Array of right ascension values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field.
  /// Example: /// Example: [107.4, 107.4, 107.4]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ras(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_RAS, None)}
  }
  /// Array of declination values, in degrees, of the Target object from the frame of reference of the sensor. A value is provided for each element in the intensities field, at the middle of the frame’s exposure time.
  /// Example: /// Example: [-0.45, -0.45, -0.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declinations(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_DECLINATIONS, None)}
  }
  /// Array of right ascension rate values, in degrees per second, measuring the rate the telescope is moving to track the Target object from the frame of reference of the sensor, for each element in the intensities field, at the middle of the frame’s exposure time.
  /// Example: /// Example: [0, 0, 0]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raRates(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_RARATES, None)}
  }
  /// Array of values giving the percent of pixels that make up the object signal that are beyond the saturation point for the sensor, with a value for each element in the intensities field.
  /// Example: /// Example: [0.1, 0.2, 1]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn percentSats(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OpticalSOIObservation_Full::VT_PERCENTSATS, None)}
  }
}

impl flatbuffers::Verifiable for OpticalSOIObservation_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obStartTime", Self::VT_OBSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("intensityTimes", Self::VT_INTENSITYTIMES, false)?
     .visit_field::<i32>("currentSpectralFilterNum", Self::VT_CURRENTSPECTRALFILTERNUM, false)?
     .visit_field::<f64>("expDuration", Self::VT_EXPDURATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("intensities", Self::VT_INTENSITIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("extinctionCoeffs", Self::VT_EXTINCTIONCOEFFS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("extinctionCoeffsUnc", Self::VT_EXTINCTIONCOEFFSUNC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("skyBgs", Self::VT_SKYBGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("localSkyBgs", Self::VT_LOCALSKYBGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("localSkyBgsUnc", Self::VT_LOCALSKYBGSUNC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("numDetectedStars", Self::VT_NUMDETECTEDSTARS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("numCorrelatedStars", Self::VT_NUMCORRELATEDSTARS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("zeroPoints", Self::VT_ZEROPOINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ras", Self::VT_RAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("declinations", Self::VT_DECLINATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("raRates", Self::VT_RARATES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("percentSats", Self::VT_PERCENTSATS, false)?
     .finish();
    Ok(())
  }
}
pub struct OpticalSOIObservation_FullArgs<'a> {
    pub obStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub intensityTimes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub currentSpectralFilterNum: i32,
    pub expDuration: f64,
    pub intensities: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub extinctionCoeffs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub extinctionCoeffsUnc: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub skyBgs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub localSkyBgs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub localSkyBgsUnc: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub numDetectedStars: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub numCorrelatedStars: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub zeroPoints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ras: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub declinations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub raRates: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub percentSats: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for OpticalSOIObservation_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    OpticalSOIObservation_FullArgs {
      obStartTime: None,
      intensityTimes: None,
      currentSpectralFilterNum: 0,
      expDuration: 0.0,
      intensities: None,
      extinctionCoeffs: None,
      extinctionCoeffsUnc: None,
      skyBgs: None,
      localSkyBgs: None,
      localSkyBgsUnc: None,
      numDetectedStars: None,
      numCorrelatedStars: None,
      zeroPoints: None,
      ras: None,
      declinations: None,
      raRates: None,
      percentSats: None,
    }
  }
}

pub struct OpticalSOIObservation_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OpticalSOIObservation_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_obStartTime(&mut self, obStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_OBSTARTTIME, obStartTime);
  }
  #[inline]
  pub fn add_intensityTimes(&mut self, intensityTimes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_INTENSITYTIMES, intensityTimes);
  }
  #[inline]
  pub fn add_currentSpectralFilterNum(&mut self, currentSpectralFilterNum: i32) {
    self.fbb_.push_slot::<i32>(OpticalSOIObservation_Full::VT_CURRENTSPECTRALFILTERNUM, currentSpectralFilterNum, 0);
  }
  #[inline]
  pub fn add_expDuration(&mut self, expDuration: f64) {
    self.fbb_.push_slot::<f64>(OpticalSOIObservation_Full::VT_EXPDURATION, expDuration, 0.0);
  }
  #[inline]
  pub fn add_intensities(&mut self, intensities: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_INTENSITIES, intensities);
  }
  #[inline]
  pub fn add_extinctionCoeffs(&mut self, extinctionCoeffs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_EXTINCTIONCOEFFS, extinctionCoeffs);
  }
  #[inline]
  pub fn add_extinctionCoeffsUnc(&mut self, extinctionCoeffsUnc: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_EXTINCTIONCOEFFSUNC, extinctionCoeffsUnc);
  }
  #[inline]
  pub fn add_skyBgs(&mut self, skyBgs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_SKYBGS, skyBgs);
  }
  #[inline]
  pub fn add_localSkyBgs(&mut self, localSkyBgs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_LOCALSKYBGS, localSkyBgs);
  }
  #[inline]
  pub fn add_localSkyBgsUnc(&mut self, localSkyBgsUnc: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_LOCALSKYBGSUNC, localSkyBgsUnc);
  }
  #[inline]
  pub fn add_numDetectedStars(&mut self, numDetectedStars: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_NUMDETECTEDSTARS, numDetectedStars);
  }
  #[inline]
  pub fn add_numCorrelatedStars(&mut self, numCorrelatedStars: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_NUMCORRELATEDSTARS, numCorrelatedStars);
  }
  #[inline]
  pub fn add_zeroPoints(&mut self, zeroPoints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_ZEROPOINTS, zeroPoints);
  }
  #[inline]
  pub fn add_ras(&mut self, ras: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_RAS, ras);
  }
  #[inline]
  pub fn add_declinations(&mut self, declinations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_DECLINATIONS, declinations);
  }
  #[inline]
  pub fn add_raRates(&mut self, raRates: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_RARATES, raRates);
  }
  #[inline]
  pub fn add_percentSats(&mut self, percentSats: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OpticalSOIObservation_Full::VT_PERCENTSATS, percentSats);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OpticalSOIObservation_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OpticalSOIObservation_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OpticalSOIObservation_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OpticalSOIObservation_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OpticalSOIObservation_Full");
      ds.field("obStartTime", &self.obStartTime());
      ds.field("intensityTimes", &self.intensityTimes());
      ds.field("currentSpectralFilterNum", &self.currentSpectralFilterNum());
      ds.field("expDuration", &self.expDuration());
      ds.field("intensities", &self.intensities());
      ds.field("extinctionCoeffs", &self.extinctionCoeffs());
      ds.field("extinctionCoeffsUnc", &self.extinctionCoeffsUnc());
      ds.field("skyBgs", &self.skyBgs());
      ds.field("localSkyBgs", &self.localSkyBgs());
      ds.field("localSkyBgsUnc", &self.localSkyBgsUnc());
      ds.field("numDetectedStars", &self.numDetectedStars());
      ds.field("numCorrelatedStars", &self.numCorrelatedStars());
      ds.field("zeroPoints", &self.zeroPoints());
      ds.field("ras", &self.ras());
      ds.field("declinations", &self.declinations());
      ds.field("raRates", &self.raRates());
      ds.field("percentSats", &self.percentSats());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OpticalSOIObservation_FullT {
  pub obStartTime: Option<String>,
  pub intensityTimes: Option<Vec<String>>,
  pub currentSpectralFilterNum: i32,
  pub expDuration: f64,
  pub intensities: Option<Vec<String>>,
  pub extinctionCoeffs: Option<Vec<String>>,
  pub extinctionCoeffsUnc: Option<Vec<String>>,
  pub skyBgs: Option<Vec<String>>,
  pub localSkyBgs: Option<Vec<String>>,
  pub localSkyBgsUnc: Option<Vec<String>>,
  pub numDetectedStars: Option<Vec<String>>,
  pub numCorrelatedStars: Option<Vec<String>>,
  pub zeroPoints: Option<Vec<String>>,
  pub ras: Option<Vec<String>>,
  pub declinations: Option<Vec<String>>,
  pub raRates: Option<Vec<String>>,
  pub percentSats: Option<Vec<String>>,
}
impl Default for OpticalSOIObservation_FullT {
  fn default() -> Self {
    Self {
      obStartTime: None,
      intensityTimes: None,
      currentSpectralFilterNum: 0,
      expDuration: 0.0,
      intensities: None,
      extinctionCoeffs: None,
      extinctionCoeffsUnc: None,
      skyBgs: None,
      localSkyBgs: None,
      localSkyBgsUnc: None,
      numDetectedStars: None,
      numCorrelatedStars: None,
      zeroPoints: None,
      ras: None,
      declinations: None,
      raRates: None,
      percentSats: None,
    }
  }
}
impl OpticalSOIObservation_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OpticalSOIObservation_Full<'b>> {
    let obStartTime = self.obStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let intensityTimes = self.intensityTimes.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let currentSpectralFilterNum = self.currentSpectralFilterNum;
    let expDuration = self.expDuration;
    let intensities = self.intensities.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let extinctionCoeffs = self.extinctionCoeffs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let extinctionCoeffsUnc = self.extinctionCoeffsUnc.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let skyBgs = self.skyBgs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let localSkyBgs = self.localSkyBgs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let localSkyBgsUnc = self.localSkyBgsUnc.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let numDetectedStars = self.numDetectedStars.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let numCorrelatedStars = self.numCorrelatedStars.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let zeroPoints = self.zeroPoints.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ras = self.ras.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let declinations = self.declinations.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let raRates = self.raRates.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let percentSats = self.percentSats.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    OpticalSOIObservation_Full::create(_fbb, &OpticalSOIObservation_FullArgs{
      obStartTime,
      intensityTimes,
      currentSpectralFilterNum,
      expDuration,
      intensities,
      extinctionCoeffs,
      extinctionCoeffsUnc,
      skyBgs,
      localSkyBgs,
      localSkyBgsUnc,
      numDetectedStars,
      numCorrelatedStars,
      zeroPoints,
      ras,
      declinations,
      raRates,
      percentSats,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OpticalSOIObservation_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_optical_soiobservation_full_unchecked`.
pub fn root_as_optical_soiobservation_full(buf: &[u8]) -> Result<OpticalSOIObservation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OpticalSOIObservation_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OpticalSOIObservation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_optical_soiobservation_full_unchecked`.
pub fn size_prefixed_root_as_optical_soiobservation_full(buf: &[u8]) -> Result<OpticalSOIObservation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OpticalSOIObservation_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OpticalSOIObservation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_optical_soiobservation_full_unchecked`.
pub fn root_as_optical_soiobservation_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OpticalSOIObservation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OpticalSOIObservation_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OpticalSOIObservation_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_optical_soiobservation_full_unchecked`.
pub fn size_prefixed_root_as_optical_soiobservation_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OpticalSOIObservation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OpticalSOIObservation_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OpticalSOIObservation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OpticalSOIObservation_Full`.
pub unsafe fn root_as_optical_soiobservation_full_unchecked(buf: &[u8]) -> OpticalSOIObservation_Full {
  flatbuffers::root_unchecked::<OpticalSOIObservation_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OpticalSOIObservation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OpticalSOIObservation_Full`.
pub unsafe fn size_prefixed_root_as_optical_soiobservation_full_unchecked(buf: &[u8]) -> OpticalSOIObservation_Full {
  flatbuffers::size_prefixed_root_unchecked::<OpticalSOIObservation_Full>(buf)
}
pub const OPTICAL_SOIOBSERVATION_FULL_IDENTIFIER: &str = "OPTI";

#[inline]
pub fn optical_soiobservation_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, OPTICAL_SOIOBSERVATION_FULL_IDENTIFIER, false)
}

#[inline]
pub fn optical_soiobservation_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, OPTICAL_SOIOBSERVATION_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_optical_soiobservation_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OpticalSOIObservation_Full<'a>>) {
  fbb.finish(root, Some(OPTICAL_SOIOBSERVATION_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_optical_soiobservation_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OpticalSOIObservation_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(OPTICAL_SOIOBSERVATION_FULL_IDENTIFIER));
}
