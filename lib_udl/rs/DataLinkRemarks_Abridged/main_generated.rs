// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkRemarks_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of remarks associated with this data link message.
pub struct DataLinkRemarks_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkRemarks_Abridged<'a> {
  type Inner = DataLinkRemarks_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkRemarks_Abridged<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_TEXT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkRemarks_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkRemarks_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkRemarks_Abridged<'bldr>> {
    let mut builder = DataLinkRemarks_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.text { builder.add_text(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkRemarks_AbridgedT {
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let text = self.text().map(|x| {
      x.to_string()
    });
    DataLinkRemarks_AbridgedT {
      type_,
      text,
    }
  }

  /// Indicates the subject matter of the remark.
  /// Example: /// Example: CONTINGENCY PROCEDURES
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkRemarks_Abridged::VT_TYPE_, None)}
  }
  /// Text of the remark.
  /// Example: /// Example: Example data link remarks
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn text(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkRemarks_Abridged::VT_TEXT, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkRemarks_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("text", Self::VT_TEXT, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkRemarks_AbridgedArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub text: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for DataLinkRemarks_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkRemarks_AbridgedArgs {
      type_: None,
      text: None,
    }
  }
}

pub struct DataLinkRemarks_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkRemarks_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkRemarks_Abridged::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_text(&mut self, text: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkRemarks_Abridged::VT_TEXT, text);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkRemarks_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkRemarks_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkRemarks_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkRemarks_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkRemarks_Abridged");
      ds.field("type_", &self.type_());
      ds.field("text", &self.text());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkRemarks_AbridgedT {
  pub type_: Option<String>,
  pub text: Option<String>,
}
impl Default for DataLinkRemarks_AbridgedT {
  fn default() -> Self {
    Self {
      type_: None,
      text: None,
    }
  }
}
impl DataLinkRemarks_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkRemarks_Abridged<'b>> {
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let text = self.text.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    DataLinkRemarks_Abridged::create(_fbb, &DataLinkRemarks_AbridgedArgs{
      type_,
      text,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkRemarks_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_remarks_abridged_unchecked`.
pub fn root_as_data_link_remarks_abridged(buf: &[u8]) -> Result<DataLinkRemarks_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkRemarks_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkRemarks_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_remarks_abridged_unchecked`.
pub fn size_prefixed_root_as_data_link_remarks_abridged(buf: &[u8]) -> Result<DataLinkRemarks_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkRemarks_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkRemarks_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_remarks_abridged_unchecked`.
pub fn root_as_data_link_remarks_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkRemarks_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkRemarks_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkRemarks_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_remarks_abridged_unchecked`.
pub fn size_prefixed_root_as_data_link_remarks_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkRemarks_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkRemarks_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkRemarks_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkRemarks_Abridged`.
pub unsafe fn root_as_data_link_remarks_abridged_unchecked(buf: &[u8]) -> DataLinkRemarks_Abridged {
  flatbuffers::root_unchecked::<DataLinkRemarks_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkRemarks_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkRemarks_Abridged`.
pub unsafe fn size_prefixed_root_as_data_link_remarks_abridged_unchecked(buf: &[u8]) -> DataLinkRemarks_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkRemarks_Abridged>(buf)
}
pub const DATA_LINK_REMARKS_ABRIDGED_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_remarks_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_REMARKS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn data_link_remarks_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_REMARKS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_remarks_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkRemarks_Abridged<'a>>) {
  fbb.finish(root, Some(DATA_LINK_REMARKS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_remarks_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkRemarks_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_REMARKS_ABRIDGED_IDENTIFIER));
}
