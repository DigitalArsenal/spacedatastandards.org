// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ISRCOLLECTION_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ISRCOLLECTION_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ISRCOLLECTION_ABRIDGED_DATA_MODE_ENUM: [ISRCollection_Abridged_dataMode_Enum; 4] = [
  ISRCollection_Abridged_dataMode_Enum::REAL,
  ISRCollection_Abridged_dataMode_Enum::TEST,
  ISRCollection_Abridged_dataMode_Enum::SIMULATED,
  ISRCollection_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ISRCollection_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl ISRCollection_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ISRCollection_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ISRCollection_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ISRCollection_Abridged_dataMode_Enum {
    type Output = ISRCollection_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ISRCollection_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ISRCollection_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ISRCollection_Abridged_dataMode_Enum {}
pub enum ISRCollection_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// ISR Collection data.
pub struct ISRCollection_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ISRCollection_Abridged<'a> {
  type Inner = ISRCollection_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ISRCollection_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDEXVERSION: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_MISSIONID: flatbuffers::VOffsetT = 12;
  pub const VT_MISSIONAOR: flatbuffers::VOffsetT = 14;
  pub const VT_MISSIONPRIMARYINTELDISCIPLINE: flatbuffers::VOffsetT = 16;
  pub const VT_MISSIONPRIMARYSUBCATEGORY: flatbuffers::VOffsetT = 18;
  pub const VT_MISSIONSECONDARYINTELDISCIPLINE: flatbuffers::VOffsetT = 20;
  pub const VT_MISSIONSECONDARYSUBCATEGORY: flatbuffers::VOffsetT = 22;
  pub const VT_MISSIONROLE: flatbuffers::VOffsetT = 24;
  pub const VT_MISSIONOPERATION: flatbuffers::VOffsetT = 26;
  pub const VT_MISSIONPRIORITY: flatbuffers::VOffsetT = 28;
  pub const VT_MISSIONSUPPORTEDUNIT: flatbuffers::VOffsetT = 30;
  pub const VT_MISSIONEMPHASIS: flatbuffers::VOffsetT = 32;
  pub const VT_MISSIONSTARTPOINTLAT: flatbuffers::VOffsetT = 34;
  pub const VT_MISSIONSTARTPOINTLONG: flatbuffers::VOffsetT = 36;
  pub const VT_MISSIONCOLLECTIONAREA: flatbuffers::VOffsetT = 38;
  pub const VT_MISSIONJOA: flatbuffers::VOffsetT = 40;
  pub const VT_MISSIONSYNCMATRIXBIN: flatbuffers::VOffsetT = 42;
  pub const VT_MISSIONCOUNTRY: flatbuffers::VOffsetT = 44;
  pub const VT_MISSIONREGION: flatbuffers::VOffsetT = 46;
  pub const VT_MISSIONSUBREGION: flatbuffers::VOffsetT = 48;
  pub const VT_COLLECTIONREQUIREMENTS: flatbuffers::VOffsetT = 50;
  pub const VT_TRANSIT: flatbuffers::VOffsetT = 52;
  pub const VT_TASKINGS: flatbuffers::VOffsetT = 54;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 56;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 58;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 60;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 62;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 64;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 66;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 68;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 70;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ISRCollection_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ISRCollection_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<ISRCollection_Abridged<'bldr>> {
    let mut builder = ISRCollection_AbridgedBuilder::new(_fbb);
    builder.add_missionStartPointLong(args.missionStartPointLong);
    builder.add_missionStartPointLat(args.missionStartPointLat);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.taskings { builder.add_taskings(x); }
    if let Some(x) = args.transit { builder.add_transit(x); }
    if let Some(x) = args.collectionRequirements { builder.add_collectionRequirements(x); }
    if let Some(x) = args.missionSubRegion { builder.add_missionSubRegion(x); }
    if let Some(x) = args.missionRegion { builder.add_missionRegion(x); }
    if let Some(x) = args.missionCountry { builder.add_missionCountry(x); }
    if let Some(x) = args.missionSyncMatrixBin { builder.add_missionSyncMatrixBin(x); }
    if let Some(x) = args.missionJoa { builder.add_missionJoa(x); }
    if let Some(x) = args.missionCollectionArea { builder.add_missionCollectionArea(x); }
    if let Some(x) = args.missionEmphasis { builder.add_missionEmphasis(x); }
    if let Some(x) = args.missionSupportedUnit { builder.add_missionSupportedUnit(x); }
    builder.add_missionPriority(args.missionPriority);
    if let Some(x) = args.missionOperation { builder.add_missionOperation(x); }
    if let Some(x) = args.missionRole { builder.add_missionRole(x); }
    if let Some(x) = args.missionSecondarySubCategory { builder.add_missionSecondarySubCategory(x); }
    if let Some(x) = args.missionSecondaryIntelDiscipline { builder.add_missionSecondaryIntelDiscipline(x); }
    if let Some(x) = args.missionPrimarySubCategory { builder.add_missionPrimarySubCategory(x); }
    if let Some(x) = args.missionPrimaryIntelDiscipline { builder.add_missionPrimaryIntelDiscipline(x); }
    if let Some(x) = args.missionAOR { builder.add_missionAOR(x); }
    if let Some(x) = args.missionId { builder.add_missionId(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_idexVersion(args.idexVersion);
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> ISRCollection_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idexVersion = self.idexVersion();
    let name = self.name().map(|x| {
      x.to_string()
    });
    let missionId = self.missionId().map(|x| {
      x.to_string()
    });
    let missionAOR = self.missionAOR().map(|x| {
      x.to_string()
    });
    let missionPrimaryIntelDiscipline = self.missionPrimaryIntelDiscipline().map(|x| {
      x.to_string()
    });
    let missionPrimarySubCategory = self.missionPrimarySubCategory().map(|x| {
      x.to_string()
    });
    let missionSecondaryIntelDiscipline = self.missionSecondaryIntelDiscipline().map(|x| {
      x.to_string()
    });
    let missionSecondarySubCategory = self.missionSecondarySubCategory().map(|x| {
      x.to_string()
    });
    let missionRole = self.missionRole().map(|x| {
      x.to_string()
    });
    let missionOperation = self.missionOperation().map(|x| {
      x.to_string()
    });
    let missionPriority = self.missionPriority();
    let missionSupportedUnit = self.missionSupportedUnit().map(|x| {
      x.to_string()
    });
    let missionEmphasis = self.missionEmphasis().map(|x| {
      x.to_string()
    });
    let missionStartPointLat = self.missionStartPointLat();
    let missionStartPointLong = self.missionStartPointLong();
    let missionCollectionArea = self.missionCollectionArea().map(|x| {
      x.to_string()
    });
    let missionJoa = self.missionJoa().map(|x| {
      x.to_string()
    });
    let missionSyncMatrixBin = self.missionSyncMatrixBin().map(|x| {
      x.to_string()
    });
    let missionCountry = self.missionCountry().map(|x| {
      x.to_string()
    });
    let missionRegion = self.missionRegion().map(|x| {
      x.to_string()
    });
    let missionSubRegion = self.missionSubRegion().map(|x| {
      x.to_string()
    });
    let collectionRequirements = self.collectionRequirements().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let transit = self.transit().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let taskings = self.taskings().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    ISRCollection_AbridgedT {
      id,
      classificationMarking,
      idexVersion,
      name,
      missionId,
      missionAOR,
      missionPrimaryIntelDiscipline,
      missionPrimarySubCategory,
      missionSecondaryIntelDiscipline,
      missionSecondarySubCategory,
      missionRole,
      missionOperation,
      missionPriority,
      missionSupportedUnit,
      missionEmphasis,
      missionStartPointLat,
      missionStartPointLong,
      missionCollectionArea,
      missionJoa,
      missionSyncMatrixBin,
      missionCountry,
      missionRegion,
      missionSubRegion,
      collectionRequirements,
      transit,
      taskings,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ISRCOLLECTION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Version of the IDEX software the request came from for compatibility.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn idexVersion(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ISRCollection_Abridged::VT_IDEXVERSION, Some(0)).unwrap()}
  }
  /// Human readable Mission Name.
  /// Example: /// Example: Example mission name
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_NAME, None)}
  }
  /// Mission Identifier.
  /// Example: /// Example: myTask-2020-04-23T00:00:00.000Z
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONID, None)}
  }
  /// Designation of mission Area Of Responsibility.
  /// Example: /// Example: Kandahar
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionAOR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONAOR, None)}
  }
  /// Primary type of intelligence to be collected during the mission.
  /// Example: /// Example: Sig
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionPrimaryIntelDiscipline(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONPRIMARYINTELDISCIPLINE, None)}
  }
  /// Sub category of primary intelligence to be collected.
  /// Example: /// Example: FMV
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionPrimarySubCategory(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONPRIMARYSUBCATEGORY, None)}
  }
  /// Type of intelligence to be collected second.
  /// Example: /// Example: Intelligence_2
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionSecondaryIntelDiscipline(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONSECONDARYINTELDISCIPLINE, None)}
  }
  /// Mission sub category for secondary intelligence discipline to be collected.
  /// Example: /// Example: Convoy
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionSecondarySubCategory(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONSECONDARYSUBCATEGORY, None)}
  }
  /// What is the primary objective(Role) of this mission.
  /// Example: /// Example: Targeting of Lead Vehicle
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionRole(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONROLE, None)}
  }
  /// Mission operation name.
  /// Example: /// Example: OP-HONEY-BADGER
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionOperation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONOPERATION, None)}
  }
  /// Mission Priority (1-n).
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missionPriority(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ISRCollection_Abridged::VT_MISSIONPRIORITY, Some(0)).unwrap()}
  }
  /// Name of the Supporting unit/Location that is performing this mission.
  /// Example: /// Example: ENVOYS
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionSupportedUnit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONSUPPORTEDUNIT, None)}
  }
  /// Text version of what we are emphasizing in this mission.
  /// Example: /// Example: Mission emphasis
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionEmphasis(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONEMPHASIS, None)}
  }
  /// WGS-84 latitude of the start position, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missionStartPointLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ISRCollection_Abridged::VT_MISSIONSTARTPOINTLAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the start position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 80.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missionStartPointLong(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ISRCollection_Abridged::VT_MISSIONSTARTPOINTLONG, Some(0.0)).unwrap()}
  }
  /// Mission geographical collection area.
  /// Example: /// Example: Example collection area
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn missionCollectionArea(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONCOLLECTIONAREA, None)}
  }
  /// Joint Operations Area.
  /// Example: /// Example: Operation area
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionJoa(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONJOA, None)}
  }
  /// A synchronization matrix is used to organize the logistics synchronization process during a mission.
  /// Example: /// Example: MATRIX
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionSyncMatrixBin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONSYNCMATRIXBIN, None)}
  }
  /// Country code of the mission.  A Country may represent countries, multi-national consortiums, and international organizations.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn missionCountry(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONCOUNTRY, None)}
  }
  /// Region of the mission.
  /// Example: /// Example: Example Region
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionRegion(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONREGION, None)}
  }
  /// Subregion of the mission.
  /// Example: /// Example: Example Subregion
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn missionSubRegion(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_MISSIONSUBREGION, None)}
  }
  /// Mission desired collection requirements.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn collectionRequirements(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ISRCollection_Abridged::VT_COLLECTIONREQUIREMENTS, None)}
  }
  /// Object for data dissemination.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn transit(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ISRCollection_Abridged::VT_TRANSIT, None)}
  }
  /// Individual taskings to complete the mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn taskings(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ISRCollection_Abridged::VT_TASKINGS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> ISRCollection_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ISRCollection_Abridged_dataMode_Enum>(ISRCollection_Abridged::VT_DATAMODE, Some(ISRCollection_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollection_Abridged::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for ISRCollection_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<i32>("idexVersion", Self::VT_IDEXVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionId", Self::VT_MISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionAOR", Self::VT_MISSIONAOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionPrimaryIntelDiscipline", Self::VT_MISSIONPRIMARYINTELDISCIPLINE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionPrimarySubCategory", Self::VT_MISSIONPRIMARYSUBCATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionSecondaryIntelDiscipline", Self::VT_MISSIONSECONDARYINTELDISCIPLINE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionSecondarySubCategory", Self::VT_MISSIONSECONDARYSUBCATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionRole", Self::VT_MISSIONROLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionOperation", Self::VT_MISSIONOPERATION, false)?
     .visit_field::<i32>("missionPriority", Self::VT_MISSIONPRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionSupportedUnit", Self::VT_MISSIONSUPPORTEDUNIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionEmphasis", Self::VT_MISSIONEMPHASIS, false)?
     .visit_field::<f64>("missionStartPointLat", Self::VT_MISSIONSTARTPOINTLAT, false)?
     .visit_field::<f64>("missionStartPointLong", Self::VT_MISSIONSTARTPOINTLONG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionCollectionArea", Self::VT_MISSIONCOLLECTIONAREA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionJoa", Self::VT_MISSIONJOA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionSyncMatrixBin", Self::VT_MISSIONSYNCMATRIXBIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionCountry", Self::VT_MISSIONCOUNTRY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionRegion", Self::VT_MISSIONREGION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionSubRegion", Self::VT_MISSIONSUBREGION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("collectionRequirements", Self::VT_COLLECTIONREQUIREMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("transit", Self::VT_TRANSIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("taskings", Self::VT_TASKINGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<ISRCollection_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct ISRCollection_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idexVersion: i32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionAOR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionPrimaryIntelDiscipline: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionPrimarySubCategory: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionSecondaryIntelDiscipline: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionSecondarySubCategory: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionRole: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionOperation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionPriority: i32,
    pub missionSupportedUnit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionEmphasis: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionStartPointLat: f64,
    pub missionStartPointLong: f64,
    pub missionCollectionArea: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionJoa: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionSyncMatrixBin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionCountry: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionRegion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionSubRegion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub collectionRequirements: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub transit: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub taskings: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: ISRCollection_Abridged_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ISRCollection_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    ISRCollection_AbridgedArgs {
      id: None,
      classificationMarking: None,
      idexVersion: 0,
      name: None,
      missionId: None,
      missionAOR: None,
      missionPrimaryIntelDiscipline: None,
      missionPrimarySubCategory: None,
      missionSecondaryIntelDiscipline: None,
      missionSecondarySubCategory: None,
      missionRole: None,
      missionOperation: None,
      missionPriority: 0,
      missionSupportedUnit: None,
      missionEmphasis: None,
      missionStartPointLat: 0.0,
      missionStartPointLong: 0.0,
      missionCollectionArea: None,
      missionJoa: None,
      missionSyncMatrixBin: None,
      missionCountry: None,
      missionRegion: None,
      missionSubRegion: None,
      collectionRequirements: None,
      transit: None,
      taskings: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      dataMode: ISRCollection_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct ISRCollection_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ISRCollection_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idexVersion(&mut self, idexVersion: i32) {
    self.fbb_.push_slot::<i32>(ISRCollection_Abridged::VT_IDEXVERSION, idexVersion, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_NAME, name);
  }
  #[inline]
  pub fn add_missionId(&mut self, missionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONID, missionId);
  }
  #[inline]
  pub fn add_missionAOR(&mut self, missionAOR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONAOR, missionAOR);
  }
  #[inline]
  pub fn add_missionPrimaryIntelDiscipline(&mut self, missionPrimaryIntelDiscipline: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONPRIMARYINTELDISCIPLINE, missionPrimaryIntelDiscipline);
  }
  #[inline]
  pub fn add_missionPrimarySubCategory(&mut self, missionPrimarySubCategory: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONPRIMARYSUBCATEGORY, missionPrimarySubCategory);
  }
  #[inline]
  pub fn add_missionSecondaryIntelDiscipline(&mut self, missionSecondaryIntelDiscipline: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONSECONDARYINTELDISCIPLINE, missionSecondaryIntelDiscipline);
  }
  #[inline]
  pub fn add_missionSecondarySubCategory(&mut self, missionSecondarySubCategory: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONSECONDARYSUBCATEGORY, missionSecondarySubCategory);
  }
  #[inline]
  pub fn add_missionRole(&mut self, missionRole: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONROLE, missionRole);
  }
  #[inline]
  pub fn add_missionOperation(&mut self, missionOperation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONOPERATION, missionOperation);
  }
  #[inline]
  pub fn add_missionPriority(&mut self, missionPriority: i32) {
    self.fbb_.push_slot::<i32>(ISRCollection_Abridged::VT_MISSIONPRIORITY, missionPriority, 0);
  }
  #[inline]
  pub fn add_missionSupportedUnit(&mut self, missionSupportedUnit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONSUPPORTEDUNIT, missionSupportedUnit);
  }
  #[inline]
  pub fn add_missionEmphasis(&mut self, missionEmphasis: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONEMPHASIS, missionEmphasis);
  }
  #[inline]
  pub fn add_missionStartPointLat(&mut self, missionStartPointLat: f64) {
    self.fbb_.push_slot::<f64>(ISRCollection_Abridged::VT_MISSIONSTARTPOINTLAT, missionStartPointLat, 0.0);
  }
  #[inline]
  pub fn add_missionStartPointLong(&mut self, missionStartPointLong: f64) {
    self.fbb_.push_slot::<f64>(ISRCollection_Abridged::VT_MISSIONSTARTPOINTLONG, missionStartPointLong, 0.0);
  }
  #[inline]
  pub fn add_missionCollectionArea(&mut self, missionCollectionArea: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONCOLLECTIONAREA, missionCollectionArea);
  }
  #[inline]
  pub fn add_missionJoa(&mut self, missionJoa: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONJOA, missionJoa);
  }
  #[inline]
  pub fn add_missionSyncMatrixBin(&mut self, missionSyncMatrixBin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONSYNCMATRIXBIN, missionSyncMatrixBin);
  }
  #[inline]
  pub fn add_missionCountry(&mut self, missionCountry: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONCOUNTRY, missionCountry);
  }
  #[inline]
  pub fn add_missionRegion(&mut self, missionRegion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONREGION, missionRegion);
  }
  #[inline]
  pub fn add_missionSubRegion(&mut self, missionSubRegion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_MISSIONSUBREGION, missionSubRegion);
  }
  #[inline]
  pub fn add_collectionRequirements(&mut self, collectionRequirements: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_COLLECTIONREQUIREMENTS, collectionRequirements);
  }
  #[inline]
  pub fn add_transit(&mut self, transit: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_TRANSIT, transit);
  }
  #[inline]
  pub fn add_taskings(&mut self, taskings: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_TASKINGS, taskings);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: ISRCollection_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<ISRCollection_Abridged_dataMode_Enum>(ISRCollection_Abridged::VT_DATAMODE, dataMode, ISRCollection_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollection_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ISRCollection_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ISRCollection_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ISRCollection_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ISRCollection_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ISRCollection_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idexVersion", &self.idexVersion());
      ds.field("name", &self.name());
      ds.field("missionId", &self.missionId());
      ds.field("missionAOR", &self.missionAOR());
      ds.field("missionPrimaryIntelDiscipline", &self.missionPrimaryIntelDiscipline());
      ds.field("missionPrimarySubCategory", &self.missionPrimarySubCategory());
      ds.field("missionSecondaryIntelDiscipline", &self.missionSecondaryIntelDiscipline());
      ds.field("missionSecondarySubCategory", &self.missionSecondarySubCategory());
      ds.field("missionRole", &self.missionRole());
      ds.field("missionOperation", &self.missionOperation());
      ds.field("missionPriority", &self.missionPriority());
      ds.field("missionSupportedUnit", &self.missionSupportedUnit());
      ds.field("missionEmphasis", &self.missionEmphasis());
      ds.field("missionStartPointLat", &self.missionStartPointLat());
      ds.field("missionStartPointLong", &self.missionStartPointLong());
      ds.field("missionCollectionArea", &self.missionCollectionArea());
      ds.field("missionJoa", &self.missionJoa());
      ds.field("missionSyncMatrixBin", &self.missionSyncMatrixBin());
      ds.field("missionCountry", &self.missionCountry());
      ds.field("missionRegion", &self.missionRegion());
      ds.field("missionSubRegion", &self.missionSubRegion());
      ds.field("collectionRequirements", &self.collectionRequirements());
      ds.field("transit", &self.transit());
      ds.field("taskings", &self.taskings());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ISRCollection_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idexVersion: i32,
  pub name: Option<String>,
  pub missionId: Option<String>,
  pub missionAOR: Option<String>,
  pub missionPrimaryIntelDiscipline: Option<String>,
  pub missionPrimarySubCategory: Option<String>,
  pub missionSecondaryIntelDiscipline: Option<String>,
  pub missionSecondarySubCategory: Option<String>,
  pub missionRole: Option<String>,
  pub missionOperation: Option<String>,
  pub missionPriority: i32,
  pub missionSupportedUnit: Option<String>,
  pub missionEmphasis: Option<String>,
  pub missionStartPointLat: f64,
  pub missionStartPointLong: f64,
  pub missionCollectionArea: Option<String>,
  pub missionJoa: Option<String>,
  pub missionSyncMatrixBin: Option<String>,
  pub missionCountry: Option<String>,
  pub missionRegion: Option<String>,
  pub missionSubRegion: Option<String>,
  pub collectionRequirements: Option<Vec<String>>,
  pub transit: Option<Vec<String>>,
  pub taskings: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: ISRCollection_Abridged_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for ISRCollection_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idexVersion: 0,
      name: None,
      missionId: None,
      missionAOR: None,
      missionPrimaryIntelDiscipline: None,
      missionPrimarySubCategory: None,
      missionSecondaryIntelDiscipline: None,
      missionSecondarySubCategory: None,
      missionRole: None,
      missionOperation: None,
      missionPriority: 0,
      missionSupportedUnit: None,
      missionEmphasis: None,
      missionStartPointLat: 0.0,
      missionStartPointLong: 0.0,
      missionCollectionArea: None,
      missionJoa: None,
      missionSyncMatrixBin: None,
      missionCountry: None,
      missionRegion: None,
      missionSubRegion: None,
      collectionRequirements: None,
      transit: None,
      taskings: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      dataMode: ISRCollection_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl ISRCollection_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ISRCollection_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idexVersion = self.idexVersion;
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionId = self.missionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionAOR = self.missionAOR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionPrimaryIntelDiscipline = self.missionPrimaryIntelDiscipline.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionPrimarySubCategory = self.missionPrimarySubCategory.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionSecondaryIntelDiscipline = self.missionSecondaryIntelDiscipline.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionSecondarySubCategory = self.missionSecondarySubCategory.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionRole = self.missionRole.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionOperation = self.missionOperation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionPriority = self.missionPriority;
    let missionSupportedUnit = self.missionSupportedUnit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionEmphasis = self.missionEmphasis.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionStartPointLat = self.missionStartPointLat;
    let missionStartPointLong = self.missionStartPointLong;
    let missionCollectionArea = self.missionCollectionArea.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionJoa = self.missionJoa.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionSyncMatrixBin = self.missionSyncMatrixBin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionCountry = self.missionCountry.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionRegion = self.missionRegion.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionSubRegion = self.missionSubRegion.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let collectionRequirements = self.collectionRequirements.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let transit = self.transit.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let taskings = self.taskings.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ISRCollection_Abridged::create(_fbb, &ISRCollection_AbridgedArgs{
      id,
      classificationMarking,
      idexVersion,
      name,
      missionId,
      missionAOR,
      missionPrimaryIntelDiscipline,
      missionPrimarySubCategory,
      missionSecondaryIntelDiscipline,
      missionSecondarySubCategory,
      missionRole,
      missionOperation,
      missionPriority,
      missionSupportedUnit,
      missionEmphasis,
      missionStartPointLat,
      missionStartPointLong,
      missionCollectionArea,
      missionJoa,
      missionSyncMatrixBin,
      missionCountry,
      missionRegion,
      missionSubRegion,
      collectionRequirements,
      transit,
      taskings,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ISRCollection_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_abridged_unchecked`.
pub fn root_as_isrcollection_abridged(buf: &[u8]) -> Result<ISRCollection_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ISRCollection_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ISRCollection_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_isrcollection_abridged_unchecked`.
pub fn size_prefixed_root_as_isrcollection_abridged(buf: &[u8]) -> Result<ISRCollection_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ISRCollection_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ISRCollection_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_abridged_unchecked`.
pub fn root_as_isrcollection_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollection_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ISRCollection_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ISRCollection_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_abridged_unchecked`.
pub fn size_prefixed_root_as_isrcollection_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollection_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ISRCollection_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ISRCollection_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ISRCollection_Abridged`.
pub unsafe fn root_as_isrcollection_abridged_unchecked(buf: &[u8]) -> ISRCollection_Abridged {
  flatbuffers::root_unchecked::<ISRCollection_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ISRCollection_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ISRCollection_Abridged`.
pub unsafe fn size_prefixed_root_as_isrcollection_abridged_unchecked(buf: &[u8]) -> ISRCollection_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<ISRCollection_Abridged>(buf)
}
pub const ISRCOLLECTION_ABRIDGED_IDENTIFIER: &str = "ISRC";

#[inline]
pub fn isrcollection_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn isrcollection_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_isrcollection_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ISRCollection_Abridged<'a>>) {
  fbb.finish(root, Some(ISRCOLLECTION_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_isrcollection_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ISRCollection_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(ISRCOLLECTION_ABRIDGED_IDENTIFIER));
}
