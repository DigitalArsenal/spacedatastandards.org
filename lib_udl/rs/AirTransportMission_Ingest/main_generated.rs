// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIR_TRANSPORT_MISSION_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIR_TRANSPORT_MISSION_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIR_TRANSPORT_MISSION_INGEST_DATA_MODE_ENUM: [AirTransportMission_Ingest_dataMode_Enum; 4] = [
  AirTransportMission_Ingest_dataMode_Enum::REAL,
  AirTransportMission_Ingest_dataMode_Enum::TEST,
  AirTransportMission_Ingest_dataMode_Enum::SIMULATED,
  AirTransportMission_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AirTransportMission_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AirTransportMission_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AirTransportMission_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AirTransportMission_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AirTransportMission_Ingest_dataMode_Enum {
    type Output = AirTransportMission_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AirTransportMission_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AirTransportMission_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AirTransportMission_Ingest_dataMode_Enum {}
pub enum AirTransportMission_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The information in an Air Transport Mission contains unique identification, description of the mission objective, aircraft and crew assignments, mission alias, embarkation/debarkation cargo locations, priority, and other mission characteristics.
pub struct AirTransportMission_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirTransportMission_Ingest<'a> {
  type Inner = AirTransportMission_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirTransportMission_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_ORIGMISSIONID: flatbuffers::VOffsetT = 8;
  pub const VT_AMCMISSIONID: flatbuffers::VOffsetT = 10;
  pub const VT_GDSSMISSIONID: flatbuffers::VOffsetT = 12;
  pub const VT_PREVMISSIONID: flatbuffers::VOffsetT = 14;
  pub const VT_PREVAMCMISSIONID: flatbuffers::VOffsetT = 16;
  pub const VT_NEXTMISSIONID: flatbuffers::VOffsetT = 18;
  pub const VT_NEXTAMCMISSIONID: flatbuffers::VOffsetT = 20;
  pub const VT_OBJECTIVE: flatbuffers::VOffsetT = 22;
  pub const VT_PURPOSE: flatbuffers::VOffsetT = 24;
  pub const VT_JCSPRIORITY: flatbuffers::VOffsetT = 26;
  pub const VT_CW: flatbuffers::VOffsetT = 28;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 30;
  pub const VT_FIRSTPICKUP: flatbuffers::VOffsetT = 32;
  pub const VT_LASTDROPOFF: flatbuffers::VOffsetT = 34;
  pub const VT_ALIAS: flatbuffers::VOffsetT = 36;
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 38;
  pub const VT_OPERATION: flatbuffers::VOffsetT = 40;
  pub const VT_NAF: flatbuffers::VOffsetT = 42;
  pub const VT_ALLOCATEDUNIT: flatbuffers::VOffsetT = 44;
  pub const VT_LOADCATEGORYTYPE: flatbuffers::VOffsetT = 46;
  pub const VT_STATE: flatbuffers::VOffsetT = 48;
  pub const VT_SOURCESYSDEVIATION: flatbuffers::VOffsetT = 50;
  pub const VT_APACSID: flatbuffers::VOffsetT = 52;
  pub const VT_DIPWORKSHEETNAME: flatbuffers::VOffsetT = 54;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 56;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 58;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 60;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 62;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 64;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 66;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 68;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 70;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 72;
  pub const VT_REQUIREMENTS: flatbuffers::VOffsetT = 74;
  pub const VT_REMARKS: flatbuffers::VOffsetT = 76;
  pub const VT_HAZMAT: flatbuffers::VOffsetT = 78;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirTransportMission_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirTransportMission_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<AirTransportMission_Ingest<'bldr>> {
    let mut builder = AirTransportMission_IngestBuilder::new(_fbb);
    builder.add_sourceSysDeviation(args.sourceSysDeviation);
    if let Some(x) = args.hazMat { builder.add_hazMat(x); }
    if let Some(x) = args.remarks { builder.add_remarks(x); }
    if let Some(x) = args.requirements { builder.add_requirements(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.dipWorksheetName { builder.add_dipWorksheetName(x); }
    if let Some(x) = args.apacsId { builder.add_apacsId(x); }
    if let Some(x) = args.state { builder.add_state(x); }
    if let Some(x) = args.loadCategoryType { builder.add_loadCategoryType(x); }
    if let Some(x) = args.allocatedUnit { builder.add_allocatedUnit(x); }
    if let Some(x) = args.naf { builder.add_naf(x); }
    if let Some(x) = args.operation { builder.add_operation(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    if let Some(x) = args.alias { builder.add_alias(x); }
    if let Some(x) = args.lastDropOff { builder.add_lastDropOff(x); }
    if let Some(x) = args.firstPickUp { builder.add_firstPickUp(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.jcsPriority { builder.add_jcsPriority(x); }
    if let Some(x) = args.purpose { builder.add_purpose(x); }
    if let Some(x) = args.objective { builder.add_objective(x); }
    if let Some(x) = args.nextAMCMissionId { builder.add_nextAMCMissionId(x); }
    if let Some(x) = args.nextMissionId { builder.add_nextMissionId(x); }
    if let Some(x) = args.prevAMCMissionId { builder.add_prevAMCMissionId(x); }
    if let Some(x) = args.prevMissionId { builder.add_prevMissionId(x); }
    if let Some(x) = args.gdssMissionId { builder.add_gdssMissionId(x); }
    if let Some(x) = args.amcMissionId { builder.add_amcMissionId(x); }
    if let Some(x) = args.origMissionId { builder.add_origMissionId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_cw(args.cw);
    builder.finish()
  }

  pub fn unpack(&self) -> AirTransportMission_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let origMissionId = self.origMissionId().map(|x| {
      x.to_string()
    });
    let amcMissionId = self.amcMissionId().map(|x| {
      x.to_string()
    });
    let gdssMissionId = self.gdssMissionId().map(|x| {
      x.to_string()
    });
    let prevMissionId = self.prevMissionId().map(|x| {
      x.to_string()
    });
    let prevAMCMissionId = self.prevAMCMissionId().map(|x| {
      x.to_string()
    });
    let nextMissionId = self.nextMissionId().map(|x| {
      x.to_string()
    });
    let nextAMCMissionId = self.nextAMCMissionId().map(|x| {
      x.to_string()
    });
    let objective = self.objective().map(|x| {
      x.to_string()
    });
    let purpose = self.purpose().map(|x| {
      x.to_string()
    });
    let jcsPriority = self.jcsPriority().map(|x| {
      x.to_string()
    });
    let cw = self.cw();
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let firstPickUp = self.firstPickUp().map(|x| {
      x.to_string()
    });
    let lastDropOff = self.lastDropOff().map(|x| {
      x.to_string()
    });
    let alias = self.alias().map(|x| {
      x.to_string()
    });
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let operation = self.operation().map(|x| {
      x.to_string()
    });
    let naf = self.naf().map(|x| {
      x.to_string()
    });
    let allocatedUnit = self.allocatedUnit().map(|x| {
      x.to_string()
    });
    let loadCategoryType = self.loadCategoryType().map(|x| {
      x.to_string()
    });
    let state = self.state().map(|x| {
      x.to_string()
    });
    let sourceSysDeviation = self.sourceSysDeviation();
    let apacsId = self.apacsId().map(|x| {
      x.to_string()
    });
    let dipWorksheetName = self.dipWorksheetName().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let requirements = self.requirements().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let remarks = self.remarks().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let hazMat = self.hazMat().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    AirTransportMission_IngestT {
      id,
      classificationMarking,
      origMissionId,
      amcMissionId,
      gdssMissionId,
      prevMissionId,
      prevAMCMissionId,
      nextMissionId,
      nextAMCMissionId,
      objective,
      purpose,
      jcsPriority,
      cw,
      type_,
      firstPickUp,
      lastDropOff,
      alias,
      callSign,
      operation,
      naf,
      allocatedUnit,
      loadCategoryType,
      state,
      sourceSysDeviation,
      apacsId,
      dipWorksheetName,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
      requirements,
      remarks,
      hazMat,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The mission identifier provided by the originating source.
  /// Example: /// Example: 614bebb6-a62e-053c-ca51-e79f8a402b28
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_ORIGMISSIONID, None)}
  }
  /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) Encode/Decode procedures.
  /// Example: /// Example: AJM7939B1123
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn amcMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_AMCMISSIONID, None)}
  }
  /// Global Decision Support System (GDSS) mission unique identifier.
  /// Example: /// Example: 1e6edeec-72e9-aaec-d33c-51147cb5ffdd
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn gdssMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_GDSSMISSIONID, None)}
  }
  /// Unique identifier of the previous air transport mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: a77055df-edc3-4047-a5fa-604f80b9fe3c
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn prevMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_PREVMISSIONID, None)}
  }
  /// Air Mobility Command (AMC) mission identifier of the previous air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: AJM7939B1122
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn prevAMCMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_PREVAMCMISSIONID, None)}
  }
  /// Unique identifier of the next mission provided by the originating source. Provides a method for the data provider to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: 186e5658-1079-45c0-bccc-02d2fa31b663
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn nextMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_NEXTMISSIONID, None)}
  }
  /// Air Mobility Command (AMC) mission identifier of the next air transport mission. Provides a method for AMC to link air transport missions together chronologically for tasking and planning purposes.
  /// Example: /// Example: AJM7939B1124
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn nextAMCMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_NEXTAMCMISSIONID, None)}
  }
  /// A description of this mission's objective.
  /// Example: /// Example: Deliver water to island X.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn objective(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_OBJECTIVE, None)}
  }
  /// A description of this mission's purpose (e.g. why this mission needs to happen, what is the mission supporting, etc.).
  /// Example: /// Example: People at island X need water ASAP. Two previous attempts failed due to weather.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn purpose(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_PURPOSE, None)}
  }
  /// Highest Joint Chiefs of Staff priority of this mission.
  /// Example: /// Example: 1A3
  /// Constraints: Minimum length = 3, Maximum length = 3
  #[inline]
  pub fn jcsPriority(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_JCSPRIORITY, None)}
  }
  /// Flag indicating this is a close watch mission.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cw(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AirTransportMission_Ingest::VT_CW, Some(false)).unwrap()}
  }
  /// The type of mission (e.g. SAAM, CHNL, etc.).
  /// Example: /// Example: SAAM
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_TYPE_, None)}
  }
  /// The International Civil Aviation Organization (ICAO) site code of first cargo pick up.
  /// Example: /// Example: KFAY
  /// Constraints: Minimum length = 4, Maximum length = 4
  #[inline]
  pub fn firstPickUp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_FIRSTPICKUP, None)}
  }
  /// The International Civil Aviation Organization (ICAO) site code of last cargo drop off.
  /// Example: /// Example: PGUA
  /// Constraints: Minimum length = 4, Maximum length = 4
  #[inline]
  pub fn lastDropOff(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_LASTDROPOFF, None)}
  }
  /// Mission alias.
  /// Example: /// Example: PACIFIC DEPLOY / CHAP 3 MOVEMENT
  /// Constraints: Minimum length = 0, Maximum length = 48
  #[inline]
  pub fn alias(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_ALIAS, None)}
  }
  /// The call sign for this mission.
  /// Example: /// Example: RCH123
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_CALLSIGN, None)}
  }
  /// The name of the operation that this mission supports.
  /// Example: /// Example: Golden Eye
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn operation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_OPERATION, None)}
  }
  /// Numbered Air Force (NAF) organization that owns the mission.
  /// Example: /// Example: 18AF
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn naf(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_NAF, None)}
  }
  /// The unit the mission is allocated to.
  /// Example: /// Example: 437 AEW
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn allocatedUnit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_ALLOCATEDUNIT, None)}
  }
  /// Load type of this mission (e.g. CARGO, MIXED, PASSENGER).
  /// Example: /// Example: MIXED
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn loadCategoryType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_LOADCATEGORYTYPE, None)}
  }
  /// Current state of the mission.
  /// Example: /// Example: EXECUTION
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn state(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_STATE, None)}
  }
  /// The number of minutes a mission is off schedule based on the source system's business rules. Positive numbers are early, negative numbers are late.
  /// Example: /// Example: -90.12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sourceSysDeviation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirTransportMission_Ingest::VT_SOURCESYSDEVIATION, Some(0.0)).unwrap()}
  }
  /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve clearance requests.
  /// Example: /// Example: 1083034
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn apacsId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_APACSID, None)}
  }
  /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  /// Example: /// Example: G2-182402-AB
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn dipWorksheetName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_DIPWORKSHEETNAME, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_UPDATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AirTransportMission_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AirTransportMission_Ingest_dataMode_Enum>(AirTransportMission_Ingest::VT_DATAMODE, Some(AirTransportMission_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirTransportMission_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn requirements(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirTransportMission_Ingest::VT_REQUIREMENTS, None)}
  }
  /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn remarks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirTransportMission_Ingest::VT_REMARKS, None)}
  }
  /// Collection of Hazardous Material information associated with this Air Transport Mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hazMat(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirTransportMission_Ingest::VT_HAZMAT, None)}
  }
}

impl flatbuffers::Verifiable for AirTransportMission_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origMissionId", Self::VT_ORIGMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("amcMissionId", Self::VT_AMCMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("gdssMissionId", Self::VT_GDSSMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("prevMissionId", Self::VT_PREVMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("prevAMCMissionId", Self::VT_PREVAMCMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nextMissionId", Self::VT_NEXTMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nextAMCMissionId", Self::VT_NEXTAMCMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objective", Self::VT_OBJECTIVE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("purpose", Self::VT_PURPOSE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("jcsPriority", Self::VT_JCSPRIORITY, false)?
     .visit_field::<bool>("cw", Self::VT_CW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("firstPickUp", Self::VT_FIRSTPICKUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastDropOff", Self::VT_LASTDROPOFF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("alias", Self::VT_ALIAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operation", Self::VT_OPERATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("naf", Self::VT_NAF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("allocatedUnit", Self::VT_ALLOCATEDUNIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("loadCategoryType", Self::VT_LOADCATEGORYTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("state", Self::VT_STATE, false)?
     .visit_field::<f64>("sourceSysDeviation", Self::VT_SOURCESYSDEVIATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apacsId", Self::VT_APACSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dipWorksheetName", Self::VT_DIPWORKSHEETNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<AirTransportMission_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("requirements", Self::VT_REQUIREMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("remarks", Self::VT_REMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("hazMat", Self::VT_HAZMAT, false)?
     .finish();
    Ok(())
  }
}
pub struct AirTransportMission_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub amcMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub gdssMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub prevMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub prevAMCMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nextMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nextAMCMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objective: Option<flatbuffers::WIPOffset<&'a str>>,
    pub purpose: Option<flatbuffers::WIPOffset<&'a str>>,
    pub jcsPriority: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cw: bool,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub firstPickUp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastDropOff: Option<flatbuffers::WIPOffset<&'a str>>,
    pub alias: Option<flatbuffers::WIPOffset<&'a str>>,
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub naf: Option<flatbuffers::WIPOffset<&'a str>>,
    pub allocatedUnit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub loadCategoryType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub state: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceSysDeviation: f64,
    pub apacsId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dipWorksheetName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AirTransportMission_Ingest_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub requirements: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub remarks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub hazMat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for AirTransportMission_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirTransportMission_IngestArgs {
      id: None,
      classificationMarking: None,
      origMissionId: None,
      amcMissionId: None,
      gdssMissionId: None,
      prevMissionId: None,
      prevAMCMissionId: None,
      nextMissionId: None,
      nextAMCMissionId: None,
      objective: None,
      purpose: None,
      jcsPriority: None,
      cw: false,
      type_: None,
      firstPickUp: None,
      lastDropOff: None,
      alias: None,
      callSign: None,
      operation: None,
      naf: None,
      allocatedUnit: None,
      loadCategoryType: None,
      state: None,
      sourceSysDeviation: 0.0,
      apacsId: None,
      dipWorksheetName: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: AirTransportMission_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
      requirements: None,
      remarks: None,
      hazMat: None,
    }
  }
}

pub struct AirTransportMission_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirTransportMission_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_origMissionId(&mut self, origMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_ORIGMISSIONID, origMissionId);
  }
  #[inline]
  pub fn add_amcMissionId(&mut self, amcMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_AMCMISSIONID, amcMissionId);
  }
  #[inline]
  pub fn add_gdssMissionId(&mut self, gdssMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_GDSSMISSIONID, gdssMissionId);
  }
  #[inline]
  pub fn add_prevMissionId(&mut self, prevMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_PREVMISSIONID, prevMissionId);
  }
  #[inline]
  pub fn add_prevAMCMissionId(&mut self, prevAMCMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_PREVAMCMISSIONID, prevAMCMissionId);
  }
  #[inline]
  pub fn add_nextMissionId(&mut self, nextMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_NEXTMISSIONID, nextMissionId);
  }
  #[inline]
  pub fn add_nextAMCMissionId(&mut self, nextAMCMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_NEXTAMCMISSIONID, nextAMCMissionId);
  }
  #[inline]
  pub fn add_objective(&mut self, objective: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_OBJECTIVE, objective);
  }
  #[inline]
  pub fn add_purpose(&mut self, purpose: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_PURPOSE, purpose);
  }
  #[inline]
  pub fn add_jcsPriority(&mut self, jcsPriority: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_JCSPRIORITY, jcsPriority);
  }
  #[inline]
  pub fn add_cw(&mut self, cw: bool) {
    self.fbb_.push_slot::<bool>(AirTransportMission_Ingest::VT_CW, cw, false);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_firstPickUp(&mut self, firstPickUp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_FIRSTPICKUP, firstPickUp);
  }
  #[inline]
  pub fn add_lastDropOff(&mut self, lastDropOff: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_LASTDROPOFF, lastDropOff);
  }
  #[inline]
  pub fn add_alias(&mut self, alias: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_ALIAS, alias);
  }
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_operation(&mut self, operation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_OPERATION, operation);
  }
  #[inline]
  pub fn add_naf(&mut self, naf: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_NAF, naf);
  }
  #[inline]
  pub fn add_allocatedUnit(&mut self, allocatedUnit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_ALLOCATEDUNIT, allocatedUnit);
  }
  #[inline]
  pub fn add_loadCategoryType(&mut self, loadCategoryType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_LOADCATEGORYTYPE, loadCategoryType);
  }
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_STATE, state);
  }
  #[inline]
  pub fn add_sourceSysDeviation(&mut self, sourceSysDeviation: f64) {
    self.fbb_.push_slot::<f64>(AirTransportMission_Ingest::VT_SOURCESYSDEVIATION, sourceSysDeviation, 0.0);
  }
  #[inline]
  pub fn add_apacsId(&mut self, apacsId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_APACSID, apacsId);
  }
  #[inline]
  pub fn add_dipWorksheetName(&mut self, dipWorksheetName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_DIPWORKSHEETNAME, dipWorksheetName);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AirTransportMission_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<AirTransportMission_Ingest_dataMode_Enum>(AirTransportMission_Ingest::VT_DATAMODE, dataMode, AirTransportMission_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_requirements(&mut self, requirements: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_REQUIREMENTS, requirements);
  }
  #[inline]
  pub fn add_remarks(&mut self, remarks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_REMARKS, remarks);
  }
  #[inline]
  pub fn add_hazMat(&mut self, hazMat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirTransportMission_Ingest::VT_HAZMAT, hazMat);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirTransportMission_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirTransportMission_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirTransportMission_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirTransportMission_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirTransportMission_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("origMissionId", &self.origMissionId());
      ds.field("amcMissionId", &self.amcMissionId());
      ds.field("gdssMissionId", &self.gdssMissionId());
      ds.field("prevMissionId", &self.prevMissionId());
      ds.field("prevAMCMissionId", &self.prevAMCMissionId());
      ds.field("nextMissionId", &self.nextMissionId());
      ds.field("nextAMCMissionId", &self.nextAMCMissionId());
      ds.field("objective", &self.objective());
      ds.field("purpose", &self.purpose());
      ds.field("jcsPriority", &self.jcsPriority());
      ds.field("cw", &self.cw());
      ds.field("type_", &self.type_());
      ds.field("firstPickUp", &self.firstPickUp());
      ds.field("lastDropOff", &self.lastDropOff());
      ds.field("alias", &self.alias());
      ds.field("callSign", &self.callSign());
      ds.field("operation", &self.operation());
      ds.field("naf", &self.naf());
      ds.field("allocatedUnit", &self.allocatedUnit());
      ds.field("loadCategoryType", &self.loadCategoryType());
      ds.field("state", &self.state());
      ds.field("sourceSysDeviation", &self.sourceSysDeviation());
      ds.field("apacsId", &self.apacsId());
      ds.field("dipWorksheetName", &self.dipWorksheetName());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("requirements", &self.requirements());
      ds.field("remarks", &self.remarks());
      ds.field("hazMat", &self.hazMat());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirTransportMission_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub origMissionId: Option<String>,
  pub amcMissionId: Option<String>,
  pub gdssMissionId: Option<String>,
  pub prevMissionId: Option<String>,
  pub prevAMCMissionId: Option<String>,
  pub nextMissionId: Option<String>,
  pub nextAMCMissionId: Option<String>,
  pub objective: Option<String>,
  pub purpose: Option<String>,
  pub jcsPriority: Option<String>,
  pub cw: bool,
  pub type_: Option<String>,
  pub firstPickUp: Option<String>,
  pub lastDropOff: Option<String>,
  pub alias: Option<String>,
  pub callSign: Option<String>,
  pub operation: Option<String>,
  pub naf: Option<String>,
  pub allocatedUnit: Option<String>,
  pub loadCategoryType: Option<String>,
  pub state: Option<String>,
  pub sourceSysDeviation: f64,
  pub apacsId: Option<String>,
  pub dipWorksheetName: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: AirTransportMission_Ingest_dataMode_Enum,
  pub origNetwork: Option<String>,
  pub requirements: Option<Vec<String>>,
  pub remarks: Option<Vec<String>>,
  pub hazMat: Option<Vec<String>>,
}
impl Default for AirTransportMission_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      origMissionId: None,
      amcMissionId: None,
      gdssMissionId: None,
      prevMissionId: None,
      prevAMCMissionId: None,
      nextMissionId: None,
      nextAMCMissionId: None,
      objective: None,
      purpose: None,
      jcsPriority: None,
      cw: false,
      type_: None,
      firstPickUp: None,
      lastDropOff: None,
      alias: None,
      callSign: None,
      operation: None,
      naf: None,
      allocatedUnit: None,
      loadCategoryType: None,
      state: None,
      sourceSysDeviation: 0.0,
      apacsId: None,
      dipWorksheetName: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: AirTransportMission_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
      requirements: None,
      remarks: None,
      hazMat: None,
    }
  }
}
impl AirTransportMission_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirTransportMission_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origMissionId = self.origMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let amcMissionId = self.amcMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let gdssMissionId = self.gdssMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let prevMissionId = self.prevMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let prevAMCMissionId = self.prevAMCMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nextMissionId = self.nextMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nextAMCMissionId = self.nextAMCMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objective = self.objective.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let purpose = self.purpose.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let jcsPriority = self.jcsPriority.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cw = self.cw;
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let firstPickUp = self.firstPickUp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastDropOff = self.lastDropOff.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let alias = self.alias.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let operation = self.operation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let naf = self.naf.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let allocatedUnit = self.allocatedUnit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let loadCategoryType = self.loadCategoryType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let state = self.state.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceSysDeviation = self.sourceSysDeviation;
    let apacsId = self.apacsId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dipWorksheetName = self.dipWorksheetName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let requirements = self.requirements.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let remarks = self.remarks.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let hazMat = self.hazMat.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    AirTransportMission_Ingest::create(_fbb, &AirTransportMission_IngestArgs{
      id,
      classificationMarking,
      origMissionId,
      amcMissionId,
      gdssMissionId,
      prevMissionId,
      prevAMCMissionId,
      nextMissionId,
      nextAMCMissionId,
      objective,
      purpose,
      jcsPriority,
      cw,
      type_,
      firstPickUp,
      lastDropOff,
      alias,
      callSign,
      operation,
      naf,
      allocatedUnit,
      loadCategoryType,
      state,
      sourceSysDeviation,
      apacsId,
      dipWorksheetName,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
      requirements,
      remarks,
      hazMat,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirTransportMission_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_transport_mission_ingest_unchecked`.
pub fn root_as_air_transport_mission_ingest(buf: &[u8]) -> Result<AirTransportMission_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirTransportMission_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirTransportMission_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_air_transport_mission_ingest_unchecked`.
pub fn size_prefixed_root_as_air_transport_mission_ingest(buf: &[u8]) -> Result<AirTransportMission_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirTransportMission_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirTransportMission_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_transport_mission_ingest_unchecked`.
pub fn root_as_air_transport_mission_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirTransportMission_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirTransportMission_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirTransportMission_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_transport_mission_ingest_unchecked`.
pub fn size_prefixed_root_as_air_transport_mission_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirTransportMission_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirTransportMission_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirTransportMission_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirTransportMission_Ingest`.
pub unsafe fn root_as_air_transport_mission_ingest_unchecked(buf: &[u8]) -> AirTransportMission_Ingest {
  flatbuffers::root_unchecked::<AirTransportMission_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirTransportMission_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirTransportMission_Ingest`.
pub unsafe fn size_prefixed_root_as_air_transport_mission_ingest_unchecked(buf: &[u8]) -> AirTransportMission_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<AirTransportMission_Ingest>(buf)
}
pub const AIR_TRANSPORT_MISSION_INGEST_IDENTIFIER: &str = "AIRT";

#[inline]
pub fn air_transport_mission_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_TRANSPORT_MISSION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn air_transport_mission_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_TRANSPORT_MISSION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_air_transport_mission_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirTransportMission_Ingest<'a>>) {
  fbb.finish(root, Some(AIR_TRANSPORT_MISSION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_air_transport_mission_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirTransportMission_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIR_TRANSPORT_MISSION_INGEST_IDENTIFIER));
}
