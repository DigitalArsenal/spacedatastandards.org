// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PORT_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PORT_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PORT_INGEST_DATA_MODE_ENUM: [Port_Ingest_dataMode_Enum; 4] = [
  Port_Ingest_dataMode_Enum::REAL,
  Port_Ingest_dataMode_Enum::TEST,
  Port_Ingest_dataMode_Enum::SIMULATED,
  Port_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Port_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Port_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Port_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Port_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Port_Ingest_dataMode_Enum {
    type Output = Port_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Port_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Port_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Port_Ingest_dataMode_Enum {}
pub enum Port_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Properties and characteristics of a maritime port, which includes location, port identifiers, and remarks.
pub struct Port_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Port_Ingest<'a> {
  type Inner = Port_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Port_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDSITE: flatbuffers::VOffsetT = 8;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 10;
  pub const VT_LOCODE: flatbuffers::VOffsetT = 12;
  pub const VT_PORTNAME: flatbuffers::VOffsetT = 14;
  pub const VT_HARBORTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_HARBORSIZE: flatbuffers::VOffsetT = 18;
  pub const VT_MAXDRAUGHT: flatbuffers::VOffsetT = 20;
  pub const VT_AVGDURATION: flatbuffers::VOffsetT = 22;
  pub const VT_TIDERANGE: flatbuffers::VOffsetT = 24;
  pub const VT_SHELTER: flatbuffers::VOffsetT = 26;
  pub const VT_PILOTREQD: flatbuffers::VOffsetT = 28;
  pub const VT_LAT: flatbuffers::VOffsetT = 30;
  pub const VT_LON: flatbuffers::VOffsetT = 32;
  pub const VT_COUNTRYCODE: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 36;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 38;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 40;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 42;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 44;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 46;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Port_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Port_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<Port_Ingest<'bldr>> {
    let mut builder = Port_IngestBuilder::new(_fbb);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    builder.add_tideRange(args.tideRange);
    builder.add_avgDuration(args.avgDuration);
    builder.add_maxDraught(args.maxDraught);
    builder.add_harborSize(args.harborSize);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.countryCode { builder.add_countryCode(x); }
    if let Some(x) = args.shelter { builder.add_shelter(x); }
    if let Some(x) = args.harborType { builder.add_harborType(x); }
    if let Some(x) = args.portName { builder.add_portName(x); }
    if let Some(x) = args.locode { builder.add_locode(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.idSite { builder.add_idSite(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_pilotReqd(args.pilotReqd);
    builder.finish()
  }

  pub fn unpack(&self) -> Port_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idSite = self.idSite().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let locode = self.locode().map(|x| {
      x.to_string()
    });
    let portName = self.portName().map(|x| {
      x.to_string()
    });
    let harborType = self.harborType().map(|x| {
      x.to_string()
    });
    let harborSize = self.harborSize();
    let maxDraught = self.maxDraught();
    let avgDuration = self.avgDuration();
    let tideRange = self.tideRange();
    let shelter = self.shelter().map(|x| {
      x.to_string()
    });
    let pilotReqd = self.pilotReqd();
    let lat = self.lat();
    let lon = self.lon();
    let countryCode = self.countryCode().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    Port_IngestT {
      id,
      classificationMarking,
      idSite,
      externalId,
      locode,
      portName,
      harborType,
      harborSize,
      maxDraught,
      avgDuration,
      tideRange,
      shelter,
      pilotReqd,
      lat,
      lon,
      countryCode,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the Site Entity associated with the Port record.
  /// Example: /// Example: a150b3ee-884b-b9ac-60a0-6408b4b16088
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSite(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_IDSITE, None)}
  }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_EXTERNALID, None)}
  }
  /// The five-character United Nations Code for Trade and Transport Locations (UN/LOCODE) of this port.  The first two letters of the code contains the ISO 3166-1 alpha-2 country designation of the port country. The three remaining characters identify a location within that country.  Letters are preferred, but if necessary digits 2 through 9 may be used, excluding "0" and "1" to avoid confusion with the letters "O" and "I" respectively.
  /// Example: /// Example: CAVAN
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn locode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_LOCODE, None)}
  }
  /// The name of this port.
  /// Example: /// Example: Vancouver
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn portName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_PORTNAME, None)}
  }
  /// The type of harbor for this port. The harbor type refers to how a port is physically positioned.
  /// COASTAL BREAKWATER (CB)
  /// COASTAL NATURAL (CN)
  /// COASTAL TIDE GATE  (CT)
  /// LAKE OR CANAL (LC)
  /// OPEN ROADSTEAD (OR)
  /// RIVER BASIN (RB)
  /// RIVER NATURAL (RN)
  /// RIVER TIDE GATE (RT)
  /// TYPHOON HARBOR  (TH).
  /// Example: /// Example: COASTAL NATURAL
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn harborType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_HARBORTYPE, None)}
  }
  /// The size of the harbor for this port measured in square kilometers.
  /// Example: /// Example: 160.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn harborSize(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Port_Ingest::VT_HARBORSIZE, Some(0.0)).unwrap()}
  }
  /// Maximum allowed vessel draught. Draught is the principal dimensions of any waterborne vessel defined as the distance between the ship’s keel and the waterline of the vessel measured in meters.
  /// Example: /// Example: 18.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxDraught(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Port_Ingest::VT_MAXDRAUGHT, Some(0.0)).unwrap()}
  }
  /// Average time for a vessel at this port in hours.
  /// Example: /// Example: 41.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgDuration(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Port_Ingest::VT_AVGDURATION, Some(0.0)).unwrap()}
  }
  /// The tide range of this port in meters.
  /// Example: /// Example: 4.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tideRange(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Port_Ingest::VT_TIDERANGE, Some(0.0)).unwrap()}
  }
  /// The shelter afforded from wind, sea, and swell refers to the area where normal port operations are conducted, usually the wharf area. Shelter afforded by the anchorage area may be given for ports where cargo is handled by lighters. Values given are EXCELLENT, FAIR, GOOD, POOR, or NONE.
  /// Example: /// Example: EXCELLENT
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn shelter(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_SHELTER, None)}
  }
  /// Flag indicating whether a pilot is required at this port.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pilotReqd(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Port_Ingest::VT_PILOTREQD, Some(false)).unwrap()}
  }
  /// WGS84 latitude of the location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Port_Ingest::VT_LAT, Some(0.0)).unwrap()}
  }
  /// WGS84 longitude of the location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Port_Ingest::VT_LON, Some(0.0)).unwrap()}
  }
  /// The country where this port is located.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn countryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_COUNTRYCODE, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn dataMode(&self) -> Port_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Port_Ingest_dataMode_Enum>(Port_Ingest::VT_DATAMODE, Some(Port_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Port_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for Port_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSite", Self::VT_IDSITE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("locode", Self::VT_LOCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("portName", Self::VT_PORTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("harborType", Self::VT_HARBORTYPE, false)?
     .visit_field::<f64>("harborSize", Self::VT_HARBORSIZE, false)?
     .visit_field::<f64>("maxDraught", Self::VT_MAXDRAUGHT, false)?
     .visit_field::<f64>("avgDuration", Self::VT_AVGDURATION, false)?
     .visit_field::<f64>("tideRange", Self::VT_TIDERANGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shelter", Self::VT_SHELTER, false)?
     .visit_field::<bool>("pilotReqd", Self::VT_PILOTREQD, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryCode", Self::VT_COUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<Port_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct Port_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSite: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub locode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub portName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub harborType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub harborSize: f64,
    pub maxDraught: f64,
    pub avgDuration: f64,
    pub tideRange: f64,
    pub shelter: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pilotReqd: bool,
    pub lat: f64,
    pub lon: f64,
    pub countryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Port_Ingest_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Port_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    Port_IngestArgs {
      id: None,
      classificationMarking: None,
      idSite: None,
      externalId: None,
      locode: None,
      portName: None,
      harborType: None,
      harborSize: 0.0,
      maxDraught: 0.0,
      avgDuration: 0.0,
      tideRange: 0.0,
      shelter: None,
      pilotReqd: false,
      lat: 0.0,
      lon: 0.0,
      countryCode: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: Port_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct Port_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Port_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idSite(&mut self, idSite: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_IDSITE, idSite);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_locode(&mut self, locode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_LOCODE, locode);
  }
  #[inline]
  pub fn add_portName(&mut self, portName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_PORTNAME, portName);
  }
  #[inline]
  pub fn add_harborType(&mut self, harborType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_HARBORTYPE, harborType);
  }
  #[inline]
  pub fn add_harborSize(&mut self, harborSize: f64) {
    self.fbb_.push_slot::<f64>(Port_Ingest::VT_HARBORSIZE, harborSize, 0.0);
  }
  #[inline]
  pub fn add_maxDraught(&mut self, maxDraught: f64) {
    self.fbb_.push_slot::<f64>(Port_Ingest::VT_MAXDRAUGHT, maxDraught, 0.0);
  }
  #[inline]
  pub fn add_avgDuration(&mut self, avgDuration: f64) {
    self.fbb_.push_slot::<f64>(Port_Ingest::VT_AVGDURATION, avgDuration, 0.0);
  }
  #[inline]
  pub fn add_tideRange(&mut self, tideRange: f64) {
    self.fbb_.push_slot::<f64>(Port_Ingest::VT_TIDERANGE, tideRange, 0.0);
  }
  #[inline]
  pub fn add_shelter(&mut self, shelter: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_SHELTER, shelter);
  }
  #[inline]
  pub fn add_pilotReqd(&mut self, pilotReqd: bool) {
    self.fbb_.push_slot::<bool>(Port_Ingest::VT_PILOTREQD, pilotReqd, false);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(Port_Ingest::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(Port_Ingest::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_countryCode(&mut self, countryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_COUNTRYCODE, countryCode);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Port_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<Port_Ingest_dataMode_Enum>(Port_Ingest::VT_DATAMODE, dataMode, Port_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Port_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Port_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Port_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Port_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Port_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Port_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idSite", &self.idSite());
      ds.field("externalId", &self.externalId());
      ds.field("locode", &self.locode());
      ds.field("portName", &self.portName());
      ds.field("harborType", &self.harborType());
      ds.field("harborSize", &self.harborSize());
      ds.field("maxDraught", &self.maxDraught());
      ds.field("avgDuration", &self.avgDuration());
      ds.field("tideRange", &self.tideRange());
      ds.field("shelter", &self.shelter());
      ds.field("pilotReqd", &self.pilotReqd());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("countryCode", &self.countryCode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Port_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idSite: Option<String>,
  pub externalId: Option<String>,
  pub locode: Option<String>,
  pub portName: Option<String>,
  pub harborType: Option<String>,
  pub harborSize: f64,
  pub maxDraught: f64,
  pub avgDuration: f64,
  pub tideRange: f64,
  pub shelter: Option<String>,
  pub pilotReqd: bool,
  pub lat: f64,
  pub lon: f64,
  pub countryCode: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: Port_Ingest_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for Port_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idSite: None,
      externalId: None,
      locode: None,
      portName: None,
      harborType: None,
      harborSize: 0.0,
      maxDraught: 0.0,
      avgDuration: 0.0,
      tideRange: 0.0,
      shelter: None,
      pilotReqd: false,
      lat: 0.0,
      lon: 0.0,
      countryCode: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: Port_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl Port_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Port_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSite = self.idSite.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let locode = self.locode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let portName = self.portName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let harborType = self.harborType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let harborSize = self.harborSize;
    let maxDraught = self.maxDraught;
    let avgDuration = self.avgDuration;
    let tideRange = self.tideRange;
    let shelter = self.shelter.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pilotReqd = self.pilotReqd;
    let lat = self.lat;
    let lon = self.lon;
    let countryCode = self.countryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Port_Ingest::create(_fbb, &Port_IngestArgs{
      id,
      classificationMarking,
      idSite,
      externalId,
      locode,
      portName,
      harborType,
      harborSize,
      maxDraught,
      avgDuration,
      tideRange,
      shelter,
      pilotReqd,
      lat,
      lon,
      countryCode,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Port_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_port_ingest_unchecked`.
pub fn root_as_port_ingest(buf: &[u8]) -> Result<Port_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Port_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Port_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_port_ingest_unchecked`.
pub fn size_prefixed_root_as_port_ingest(buf: &[u8]) -> Result<Port_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Port_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Port_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_port_ingest_unchecked`.
pub fn root_as_port_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Port_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Port_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Port_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_port_ingest_unchecked`.
pub fn size_prefixed_root_as_port_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Port_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Port_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Port_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Port_Ingest`.
pub unsafe fn root_as_port_ingest_unchecked(buf: &[u8]) -> Port_Ingest {
  flatbuffers::root_unchecked::<Port_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Port_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Port_Ingest`.
pub unsafe fn size_prefixed_root_as_port_ingest_unchecked(buf: &[u8]) -> Port_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<Port_Ingest>(buf)
}
pub const PORT_INGEST_IDENTIFIER: &str = "PORT";

#[inline]
pub fn port_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PORT_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn port_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PORT_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_port_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Port_Ingest<'a>>) {
  fbb.finish(root, Some(PORT_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_port_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Port_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(PORT_INGEST_IDENTIFIER));
}
