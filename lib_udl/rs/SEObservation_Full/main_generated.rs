// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum SEObservation_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A single space environment observation.
pub struct SEObservation_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SEObservation_Full<'a> {
  type Inner = SEObservation_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SEObservation_Full<'a> {
  pub const VT_OBTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_OBUOM: flatbuffers::VOffsetT = 6;
  pub const VT_OBVALUE: flatbuffers::VOffsetT = 8;
  pub const VT_OBSTRING: flatbuffers::VOffsetT = 10;
  pub const VT_OBARRAY: flatbuffers::VOffsetT = 12;
  pub const VT_OBBOOL: flatbuffers::VOffsetT = 14;
  pub const VT_OBQUALITY: flatbuffers::VOffsetT = 16;
  pub const VT_OBDESCRIPTION: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SEObservation_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SEObservation_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<SEObservation_Full<'bldr>> {
    let mut builder = SEObservation_FullBuilder::new(_fbb);
    builder.add_obValue(args.obValue);
    if let Some(x) = args.obDescription { builder.add_obDescription(x); }
    if let Some(x) = args.obQuality { builder.add_obQuality(x); }
    if let Some(x) = args.obArray { builder.add_obArray(x); }
    if let Some(x) = args.obString { builder.add_obString(x); }
    if let Some(x) = args.obUoM { builder.add_obUoM(x); }
    if let Some(x) = args.obType { builder.add_obType(x); }
    builder.add_obBool(args.obBool);
    builder.finish()
  }

  pub fn unpack(&self) -> SEObservation_FullT {
    let obType = self.obType().map(|x| {
      x.to_string()
    });
    let obUoM = self.obUoM().map(|x| {
      x.to_string()
    });
    let obValue = self.obValue();
    let obString = self.obString().map(|x| {
      x.to_string()
    });
    let obArray = self.obArray().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let obBool = self.obBool();
    let obQuality = self.obQuality().map(|x| {
      x.to_string()
    });
    let obDescription = self.obDescription().map(|x| {
      x.to_string()
    });
    SEObservation_FullT {
      obType,
      obUoM,
      obValue,
      obString,
      obArray,
      obBool,
      obQuality,
      obDescription,
    }
  }

  /// The type of observation associated with this record.
  /// Example: /// Example: INTEGRAL FLUX
  /// Constraints: Minimum length = 1, Maximum length = 24
  #[inline]
  pub fn obType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SEObservation_Full::VT_OBTYPE, None)}
  }
  /// The Unit of Measure associated with this observation. If there are no physical units associated with the measurement, a value of NONE should be specified.
  /// Example: /// Example: particles/cm^2/s/sr
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn obUoM(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SEObservation_Full::VT_OBUOM, None)}
  }
  /// A single observation value expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: 0.487687826
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obValue(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SEObservation_Full::VT_OBVALUE, Some(0.0)).unwrap()}
  }
  /// A single observation string expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: C1.3
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn obString(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SEObservation_Full::VT_OBSTRING, None)}
  }
  /// An array of observation values expressed in the specified unit of measure (obUoM). Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: [1.7, 35.6, 21.2, 19.01]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obArray(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SEObservation_Full::VT_OBARRAY, None)}
  }
  /// A Boolean observation. Because of the variability of the Space Environment data types, each record may employ a numeric observation value (obValue), a string observation value (obString), a Boolean observation value (obBool), an array of numeric observation values (obArray), or any combination of these.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obBool(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SEObservation_Full::VT_OBBOOL, Some(false)).unwrap()}
  }
  /// The quality of this individual observation. The observation quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the observation.
  /// Example: /// Example: GOOD
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn obQuality(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SEObservation_Full::VT_OBQUALITY, None)}
  }
  /// Descriptive or additional information associated with this individual observation.
  /// Example: /// Example: Observation Description Text
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn obDescription(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SEObservation_Full::VT_OBDESCRIPTION, None)}
  }
}

impl flatbuffers::Verifiable for SEObservation_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obType", Self::VT_OBTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obUoM", Self::VT_OBUOM, false)?
     .visit_field::<f64>("obValue", Self::VT_OBVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obString", Self::VT_OBSTRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("obArray", Self::VT_OBARRAY, false)?
     .visit_field::<bool>("obBool", Self::VT_OBBOOL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obQuality", Self::VT_OBQUALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obDescription", Self::VT_OBDESCRIPTION, false)?
     .finish();
    Ok(())
  }
}
pub struct SEObservation_FullArgs<'a> {
    pub obType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obUoM: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obValue: f64,
    pub obString: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obArray: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub obBool: bool,
    pub obQuality: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obDescription: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SEObservation_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    SEObservation_FullArgs {
      obType: None,
      obUoM: None,
      obValue: 0.0,
      obString: None,
      obArray: None,
      obBool: false,
      obQuality: None,
      obDescription: None,
    }
  }
}

pub struct SEObservation_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SEObservation_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_obType(&mut self, obType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SEObservation_Full::VT_OBTYPE, obType);
  }
  #[inline]
  pub fn add_obUoM(&mut self, obUoM: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SEObservation_Full::VT_OBUOM, obUoM);
  }
  #[inline]
  pub fn add_obValue(&mut self, obValue: f64) {
    self.fbb_.push_slot::<f64>(SEObservation_Full::VT_OBVALUE, obValue, 0.0);
  }
  #[inline]
  pub fn add_obString(&mut self, obString: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SEObservation_Full::VT_OBSTRING, obString);
  }
  #[inline]
  pub fn add_obArray(&mut self, obArray: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SEObservation_Full::VT_OBARRAY, obArray);
  }
  #[inline]
  pub fn add_obBool(&mut self, obBool: bool) {
    self.fbb_.push_slot::<bool>(SEObservation_Full::VT_OBBOOL, obBool, false);
  }
  #[inline]
  pub fn add_obQuality(&mut self, obQuality: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SEObservation_Full::VT_OBQUALITY, obQuality);
  }
  #[inline]
  pub fn add_obDescription(&mut self, obDescription: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SEObservation_Full::VT_OBDESCRIPTION, obDescription);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SEObservation_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SEObservation_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SEObservation_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SEObservation_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SEObservation_Full");
      ds.field("obType", &self.obType());
      ds.field("obUoM", &self.obUoM());
      ds.field("obValue", &self.obValue());
      ds.field("obString", &self.obString());
      ds.field("obArray", &self.obArray());
      ds.field("obBool", &self.obBool());
      ds.field("obQuality", &self.obQuality());
      ds.field("obDescription", &self.obDescription());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SEObservation_FullT {
  pub obType: Option<String>,
  pub obUoM: Option<String>,
  pub obValue: f64,
  pub obString: Option<String>,
  pub obArray: Option<Vec<String>>,
  pub obBool: bool,
  pub obQuality: Option<String>,
  pub obDescription: Option<String>,
}
impl Default for SEObservation_FullT {
  fn default() -> Self {
    Self {
      obType: None,
      obUoM: None,
      obValue: 0.0,
      obString: None,
      obArray: None,
      obBool: false,
      obQuality: None,
      obDescription: None,
    }
  }
}
impl SEObservation_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SEObservation_Full<'b>> {
    let obType = self.obType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obUoM = self.obUoM.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obValue = self.obValue;
    let obString = self.obString.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obArray = self.obArray.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let obBool = self.obBool;
    let obQuality = self.obQuality.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obDescription = self.obDescription.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SEObservation_Full::create(_fbb, &SEObservation_FullArgs{
      obType,
      obUoM,
      obValue,
      obString,
      obArray,
      obBool,
      obQuality,
      obDescription,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SEObservation_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seobservation_full_unchecked`.
pub fn root_as_seobservation_full(buf: &[u8]) -> Result<SEObservation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SEObservation_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SEObservation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_seobservation_full_unchecked`.
pub fn size_prefixed_root_as_seobservation_full(buf: &[u8]) -> Result<SEObservation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SEObservation_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SEObservation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seobservation_full_unchecked`.
pub fn root_as_seobservation_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SEObservation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SEObservation_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SEObservation_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seobservation_full_unchecked`.
pub fn size_prefixed_root_as_seobservation_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SEObservation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SEObservation_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SEObservation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SEObservation_Full`.
pub unsafe fn root_as_seobservation_full_unchecked(buf: &[u8]) -> SEObservation_Full {
  flatbuffers::root_unchecked::<SEObservation_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SEObservation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SEObservation_Full`.
pub unsafe fn size_prefixed_root_as_seobservation_full_unchecked(buf: &[u8]) -> SEObservation_Full {
  flatbuffers::size_prefixed_root_unchecked::<SEObservation_Full>(buf)
}
pub const SEOBSERVATION_FULL_IDENTIFIER: &str = "SEOB";

#[inline]
pub fn seobservation_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SEOBSERVATION_FULL_IDENTIFIER, false)
}

#[inline]
pub fn seobservation_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SEOBSERVATION_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_seobservation_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SEObservation_Full<'a>>) {
  fbb.finish(root, Some(SEOBSERVATION_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_seobservation_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SEObservation_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(SEOBSERVATION_FULL_IDENTIFIER));
}
