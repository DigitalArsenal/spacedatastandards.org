// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkReferences_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of reference information. There can be 0 to many DataLinkReferences collections within the datalink service.
pub struct DataLinkReferences_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkReferences_Ingest<'a> {
  type Inner = DataLinkReferences_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkReferences_Ingest<'a> {
  pub const VT_REFSERIALID: flatbuffers::VOffsetT = 4;
  pub const VT_REFTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_REFORIGINATOR: flatbuffers::VOffsetT = 8;
  pub const VT_REFTS: flatbuffers::VOffsetT = 10;
  pub const VT_REFSERIALNUM: flatbuffers::VOffsetT = 12;
  pub const VT_REFSPECIALNOTATION: flatbuffers::VOffsetT = 14;
  pub const VT_REFSICS: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkReferences_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkReferences_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkReferences_Ingest<'bldr>> {
    let mut builder = DataLinkReferences_IngestBuilder::new(_fbb);
    if let Some(x) = args.refSICs { builder.add_refSICs(x); }
    if let Some(x) = args.refSpecialNotation { builder.add_refSpecialNotation(x); }
    if let Some(x) = args.refSerialNum { builder.add_refSerialNum(x); }
    if let Some(x) = args.refTs { builder.add_refTs(x); }
    if let Some(x) = args.refOriginator { builder.add_refOriginator(x); }
    if let Some(x) = args.refType { builder.add_refType(x); }
    if let Some(x) = args.refSerialId { builder.add_refSerialId(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkReferences_IngestT {
    let refSerialId = self.refSerialId().map(|x| {
      x.to_string()
    });
    let refType = self.refType().map(|x| {
      x.to_string()
    });
    let refOriginator = self.refOriginator().map(|x| {
      x.to_string()
    });
    let refTs = self.refTs().map(|x| {
      x.to_string()
    });
    let refSerialNum = self.refSerialNum().map(|x| {
      x.to_string()
    });
    let refSpecialNotation = self.refSpecialNotation().map(|x| {
      x.to_string()
    });
    let refSICs = self.refSICs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    DataLinkReferences_IngestT {
      refSerialId,
      refType,
      refOriginator,
      refTs,
      refSerialNum,
      refSpecialNotation,
      refSICs,
    }
  }

  /// Specifies an alphabetic serial identifier a reference pertaining to the data link message.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn refSerialId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkReferences_Ingest::VT_REFSERIALID, None)}
  }
  /// Specifies the type of document referenced.
  /// Example: /// Example: ABSTAT
  /// Constraints: Minimum length = 0, Maximum length = 56
  #[inline]
  pub fn refType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkReferences_Ingest::VT_REFTYPE, None)}
  }
  /// The originator of this reference.
  /// Example: /// Example: CENTCOM
  /// Constraints: Minimum length = 0, Maximum length = 30
  #[inline]
  pub fn refOriginator(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkReferences_Ingest::VT_REFORIGINATOR, None)}
  }
  /// Timestamp of the referenced message, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn refTs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkReferences_Ingest::VT_REFTS, None)}
  }
  /// Serial number assigned to this reference.
  /// Example: /// Example: 1402001
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn refSerialNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkReferences_Ingest::VT_REFSERIALNUM, None)}
  }
  /// Indicates any special actions, restrictions, guidance, or information relating to this reference.
  /// Example: /// Example: NOTAL
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn refSpecialNotation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkReferences_Ingest::VT_REFSPECIALNOTATION, None)}
  }
  /// Array of NATO Subject Indicator Codes (SIC) or filing numbers of the document being referenced.
  /// Example: /// Example: ['RDU', 'C-123-92']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn refSICs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DataLinkReferences_Ingest::VT_REFSICS, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkReferences_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refSerialId", Self::VT_REFSERIALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refType", Self::VT_REFTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refOriginator", Self::VT_REFORIGINATOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refTs", Self::VT_REFTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refSerialNum", Self::VT_REFSERIALNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refSpecialNotation", Self::VT_REFSPECIALNOTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("refSICs", Self::VT_REFSICS, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkReferences_IngestArgs<'a> {
    pub refSerialId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refOriginator: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refTs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refSerialNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refSpecialNotation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refSICs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for DataLinkReferences_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkReferences_IngestArgs {
      refSerialId: None,
      refType: None,
      refOriginator: None,
      refTs: None,
      refSerialNum: None,
      refSpecialNotation: None,
      refSICs: None,
    }
  }
}

pub struct DataLinkReferences_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkReferences_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_refSerialId(&mut self, refSerialId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkReferences_Ingest::VT_REFSERIALID, refSerialId);
  }
  #[inline]
  pub fn add_refType(&mut self, refType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkReferences_Ingest::VT_REFTYPE, refType);
  }
  #[inline]
  pub fn add_refOriginator(&mut self, refOriginator: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkReferences_Ingest::VT_REFORIGINATOR, refOriginator);
  }
  #[inline]
  pub fn add_refTs(&mut self, refTs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkReferences_Ingest::VT_REFTS, refTs);
  }
  #[inline]
  pub fn add_refSerialNum(&mut self, refSerialNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkReferences_Ingest::VT_REFSERIALNUM, refSerialNum);
  }
  #[inline]
  pub fn add_refSpecialNotation(&mut self, refSpecialNotation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkReferences_Ingest::VT_REFSPECIALNOTATION, refSpecialNotation);
  }
  #[inline]
  pub fn add_refSICs(&mut self, refSICs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkReferences_Ingest::VT_REFSICS, refSICs);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkReferences_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkReferences_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkReferences_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkReferences_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkReferences_Ingest");
      ds.field("refSerialId", &self.refSerialId());
      ds.field("refType", &self.refType());
      ds.field("refOriginator", &self.refOriginator());
      ds.field("refTs", &self.refTs());
      ds.field("refSerialNum", &self.refSerialNum());
      ds.field("refSpecialNotation", &self.refSpecialNotation());
      ds.field("refSICs", &self.refSICs());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkReferences_IngestT {
  pub refSerialId: Option<String>,
  pub refType: Option<String>,
  pub refOriginator: Option<String>,
  pub refTs: Option<String>,
  pub refSerialNum: Option<String>,
  pub refSpecialNotation: Option<String>,
  pub refSICs: Option<Vec<String>>,
}
impl Default for DataLinkReferences_IngestT {
  fn default() -> Self {
    Self {
      refSerialId: None,
      refType: None,
      refOriginator: None,
      refTs: None,
      refSerialNum: None,
      refSpecialNotation: None,
      refSICs: None,
    }
  }
}
impl DataLinkReferences_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkReferences_Ingest<'b>> {
    let refSerialId = self.refSerialId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refType = self.refType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refOriginator = self.refOriginator.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refTs = self.refTs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refSerialNum = self.refSerialNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refSpecialNotation = self.refSpecialNotation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refSICs = self.refSICs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    DataLinkReferences_Ingest::create(_fbb, &DataLinkReferences_IngestArgs{
      refSerialId,
      refType,
      refOriginator,
      refTs,
      refSerialNum,
      refSpecialNotation,
      refSICs,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkReferences_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_references_ingest_unchecked`.
pub fn root_as_data_link_references_ingest(buf: &[u8]) -> Result<DataLinkReferences_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkReferences_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkReferences_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_references_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_references_ingest(buf: &[u8]) -> Result<DataLinkReferences_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkReferences_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkReferences_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_references_ingest_unchecked`.
pub fn root_as_data_link_references_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkReferences_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkReferences_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkReferences_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_references_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_references_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkReferences_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkReferences_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkReferences_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkReferences_Ingest`.
pub unsafe fn root_as_data_link_references_ingest_unchecked(buf: &[u8]) -> DataLinkReferences_Ingest {
  flatbuffers::root_unchecked::<DataLinkReferences_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkReferences_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkReferences_Ingest`.
pub unsafe fn size_prefixed_root_as_data_link_references_ingest_unchecked(buf: &[u8]) -> DataLinkReferences_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkReferences_Ingest>(buf)
}
pub const DATA_LINK_REFERENCES_INGEST_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_references_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_REFERENCES_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn data_link_references_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_REFERENCES_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_references_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkReferences_Ingest<'a>>) {
  fbb.finish(root, Some(DATA_LINK_REFERENCES_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_references_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkReferences_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_REFERENCES_INGEST_IDENTIFIER));
}
