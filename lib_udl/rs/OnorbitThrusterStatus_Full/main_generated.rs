// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ONORBIT_THRUSTER_STATUS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ONORBIT_THRUSTER_STATUS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ONORBIT_THRUSTER_STATUS_FULL_DATA_MODE_ENUM: [OnorbitThrusterStatus_Full_dataMode_Enum; 4] = [
  OnorbitThrusterStatus_Full_dataMode_Enum::REAL,
  OnorbitThrusterStatus_Full_dataMode_Enum::TEST,
  OnorbitThrusterStatus_Full_dataMode_Enum::SIMULATED,
  OnorbitThrusterStatus_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OnorbitThrusterStatus_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl OnorbitThrusterStatus_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OnorbitThrusterStatus_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OnorbitThrusterStatus_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OnorbitThrusterStatus_Full_dataMode_Enum {
    type Output = OnorbitThrusterStatus_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OnorbitThrusterStatus_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OnorbitThrusterStatus_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OnorbitThrusterStatus_Full_dataMode_Enum {}
pub enum OnorbitThrusterStatus_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Status information for OnorbitThruster objects.
pub struct OnorbitThrusterStatus_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OnorbitThrusterStatus_Full<'a> {
  type Inner = OnorbitThrusterStatus_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OnorbitThrusterStatus_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDONORBITTHRUSTER: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_STATUSTIME: flatbuffers::VOffsetT = 12;
  pub const VT_PROPMASSMIN: flatbuffers::VOffsetT = 14;
  pub const VT_PROPMASSAVG: flatbuffers::VOffsetT = 16;
  pub const VT_PROPMASSMEDIAN: flatbuffers::VOffsetT = 18;
  pub const VT_PROPMASSMAX: flatbuffers::VOffsetT = 20;
  pub const VT_FUELMASS: flatbuffers::VOffsetT = 22;
  pub const VT_FUELMASSUNC: flatbuffers::VOffsetT = 24;
  pub const VT_TOTALDELTAV: flatbuffers::VOffsetT = 26;
  pub const VT_MINDELTAV: flatbuffers::VOffsetT = 28;
  pub const VT_ESTDELTAV: flatbuffers::VOffsetT = 30;
  pub const VT_MAXDELTAV: flatbuffers::VOffsetT = 32;
  pub const VT_THRUSTMAX: flatbuffers::VOffsetT = 34;
  pub const VT_ISP: flatbuffers::VOffsetT = 36;
  pub const VT_OPERATIONAL: flatbuffers::VOffsetT = 38;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 40;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 42;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 44;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 46;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 48;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 50;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OnorbitThrusterStatus_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OnorbitThrusterStatus_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<OnorbitThrusterStatus_Full<'bldr>> {
    let mut builder = OnorbitThrusterStatus_FullBuilder::new(_fbb);
    builder.add_isp(args.isp);
    builder.add_thrustMax(args.thrustMax);
    builder.add_maxDeltaV(args.maxDeltaV);
    builder.add_estDeltaV(args.estDeltaV);
    builder.add_minDeltaV(args.minDeltaV);
    builder.add_totalDeltaV(args.totalDeltaV);
    builder.add_fuelMassUnc(args.fuelMassUnc);
    builder.add_fuelMass(args.fuelMass);
    builder.add_propMassMax(args.propMassMax);
    builder.add_propMassMedian(args.propMassMedian);
    builder.add_propMassAvg(args.propMassAvg);
    builder.add_propMassMin(args.propMassMin);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.statusTime { builder.add_statusTime(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.idOnorbitThruster { builder.add_idOnorbitThruster(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_operational(args.operational);
    builder.finish()
  }

  pub fn unpack(&self) -> OnorbitThrusterStatus_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idOnorbitThruster = self.idOnorbitThruster().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let statusTime = self.statusTime().map(|x| {
      x.to_string()
    });
    let propMassMin = self.propMassMin();
    let propMassAvg = self.propMassAvg();
    let propMassMedian = self.propMassMedian();
    let propMassMax = self.propMassMax();
    let fuelMass = self.fuelMass();
    let fuelMassUnc = self.fuelMassUnc();
    let totalDeltaV = self.totalDeltaV();
    let minDeltaV = self.minDeltaV();
    let estDeltaV = self.estDeltaV();
    let maxDeltaV = self.maxDeltaV();
    let thrustMax = self.thrustMax();
    let isp = self.isp();
    let operational = self.operational();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    OnorbitThrusterStatus_FullT {
      id,
      classificationMarking,
      idOnorbitThruster,
      name,
      statusTime,
      propMassMin,
      propMassAvg,
      propMassMedian,
      propMassMax,
      fuelMass,
      fuelMassUnc,
      totalDeltaV,
      minDeltaV,
      estDeltaV,
      maxDeltaV,
      thrustMax,
      isp,
      operational,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: af103c-1f917dc-002c1bd
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// ID of the associated OnorbitThruster record. This ID can be used to obtain additional information on an onorbit thruster object using the 'get  by ID' operation (e.g. /udl/onorbitthruster/{id}). For example, the OnorbitThruster object with idOnorbitThruster = abc would be queried as /udl/onorbitthruster/abc.
  /// Example: /// Example: ff7dc909-e8b4-4a54-8529-1963d4e9b353
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idOnorbitThruster(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_IDONORBITTHRUSTER, None)}
  }
  /// Identifier of this thruster.
  /// Example: /// Example: REA1
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_NAME, None)}
  }
  /// Datetime of the thruster status observation in ISO 8601 UTC datetime format with millisecond precision.
  /// Example: /// Example: 2024-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn statusTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_STATUSTIME, None)}
  }
  /// Minimum available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn propMassMin(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSMIN, Some(0.0)).unwrap()}
  }
  /// Average available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 907.6
  /// Constraints: No constraints specified.
  #[inline]
  pub fn propMassAvg(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSAVG, Some(0.0)).unwrap()}
  }
  /// Median available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 200.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn propMassMedian(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSMEDIAN, Some(0.0)).unwrap()}
  }
  /// Maximum available propellant mass for this thruster's type, in kilograms.
  /// Example: /// Example: 2333.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn propMassMax(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSMAX, Some(0.0)).unwrap()}
  }
  /// Total fuel mass available for this thruster's type, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_FUELMASS, Some(0.0)).unwrap()}
  }
  /// 1-sigma uncertainty of the total fuel mass available for this thruster type, in kilograms.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelMassUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_FUELMASSUNC, Some(0.0)).unwrap()}
  }
  /// Total delta-velocity available for this thruster's type, in meters per second.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalDeltaV(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_TOTALDELTAV, Some(0.0)).unwrap()}
  }
  /// Minimum available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn minDeltaV(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_MINDELTAV, Some(0.0)).unwrap()}
  }
  /// Estimated available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estDeltaV(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_ESTDELTAV, Some(0.0)).unwrap()}
  }
  /// Maximum available delta-velocity for this thruster, in meters per second.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxDeltaV(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_MAXDELTAV, Some(0.0)).unwrap()}
  }
  /// Maximum available thrust for this thruster, in newtons.
  /// Example: /// Example: 22.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn thrustMax(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_THRUSTMAX, Some(0.0)).unwrap()}
  }
  /// Specific impulse for this thruster, in seconds.
  /// Example: /// Example: 300.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn isp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitThrusterStatus_Full::VT_ISP, Some(0.0)).unwrap()}
  }
  /// Flag indicating if this thruster is operational.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn operational(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(OnorbitThrusterStatus_Full::VT_OPERATIONAL, Some(false)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitThrusterStatus_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> OnorbitThrusterStatus_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OnorbitThrusterStatus_Full_dataMode_Enum>(OnorbitThrusterStatus_Full::VT_DATAMODE, Some(OnorbitThrusterStatus_Full_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for OnorbitThrusterStatus_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnorbitThruster", Self::VT_IDONORBITTHRUSTER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("statusTime", Self::VT_STATUSTIME, false)?
     .visit_field::<f64>("propMassMin", Self::VT_PROPMASSMIN, false)?
     .visit_field::<f64>("propMassAvg", Self::VT_PROPMASSAVG, false)?
     .visit_field::<f64>("propMassMedian", Self::VT_PROPMASSMEDIAN, false)?
     .visit_field::<f64>("propMassMax", Self::VT_PROPMASSMAX, false)?
     .visit_field::<f64>("fuelMass", Self::VT_FUELMASS, false)?
     .visit_field::<f64>("fuelMassUnc", Self::VT_FUELMASSUNC, false)?
     .visit_field::<f64>("totalDeltaV", Self::VT_TOTALDELTAV, false)?
     .visit_field::<f64>("minDeltaV", Self::VT_MINDELTAV, false)?
     .visit_field::<f64>("estDeltaV", Self::VT_ESTDELTAV, false)?
     .visit_field::<f64>("maxDeltaV", Self::VT_MAXDELTAV, false)?
     .visit_field::<f64>("thrustMax", Self::VT_THRUSTMAX, false)?
     .visit_field::<f64>("isp", Self::VT_ISP, false)?
     .visit_field::<bool>("operational", Self::VT_OPERATIONAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<OnorbitThrusterStatus_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct OnorbitThrusterStatus_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnorbitThruster: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub statusTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub propMassMin: f64,
    pub propMassAvg: f64,
    pub propMassMedian: f64,
    pub propMassMax: f64,
    pub fuelMass: f64,
    pub fuelMassUnc: f64,
    pub totalDeltaV: f64,
    pub minDeltaV: f64,
    pub estDeltaV: f64,
    pub maxDeltaV: f64,
    pub thrustMax: f64,
    pub isp: f64,
    pub operational: bool,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: OnorbitThrusterStatus_Full_dataMode_Enum,
}
impl<'a> Default for OnorbitThrusterStatus_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    OnorbitThrusterStatus_FullArgs {
      id: None,
      classificationMarking: None,
      idOnorbitThruster: None,
      name: None,
      statusTime: None,
      propMassMin: 0.0,
      propMassAvg: 0.0,
      propMassMedian: 0.0,
      propMassMax: 0.0,
      fuelMass: 0.0,
      fuelMassUnc: 0.0,
      totalDeltaV: 0.0,
      minDeltaV: 0.0,
      estDeltaV: 0.0,
      maxDeltaV: 0.0,
      thrustMax: 0.0,
      isp: 0.0,
      operational: false,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: OnorbitThrusterStatus_Full_dataMode_Enum::REAL,
    }
  }
}

pub struct OnorbitThrusterStatus_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OnorbitThrusterStatus_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idOnorbitThruster(&mut self, idOnorbitThruster: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_IDONORBITTHRUSTER, idOnorbitThruster);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_statusTime(&mut self, statusTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_STATUSTIME, statusTime);
  }
  #[inline]
  pub fn add_propMassMin(&mut self, propMassMin: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSMIN, propMassMin, 0.0);
  }
  #[inline]
  pub fn add_propMassAvg(&mut self, propMassAvg: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSAVG, propMassAvg, 0.0);
  }
  #[inline]
  pub fn add_propMassMedian(&mut self, propMassMedian: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSMEDIAN, propMassMedian, 0.0);
  }
  #[inline]
  pub fn add_propMassMax(&mut self, propMassMax: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_PROPMASSMAX, propMassMax, 0.0);
  }
  #[inline]
  pub fn add_fuelMass(&mut self, fuelMass: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_FUELMASS, fuelMass, 0.0);
  }
  #[inline]
  pub fn add_fuelMassUnc(&mut self, fuelMassUnc: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_FUELMASSUNC, fuelMassUnc, 0.0);
  }
  #[inline]
  pub fn add_totalDeltaV(&mut self, totalDeltaV: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_TOTALDELTAV, totalDeltaV, 0.0);
  }
  #[inline]
  pub fn add_minDeltaV(&mut self, minDeltaV: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_MINDELTAV, minDeltaV, 0.0);
  }
  #[inline]
  pub fn add_estDeltaV(&mut self, estDeltaV: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_ESTDELTAV, estDeltaV, 0.0);
  }
  #[inline]
  pub fn add_maxDeltaV(&mut self, maxDeltaV: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_MAXDELTAV, maxDeltaV, 0.0);
  }
  #[inline]
  pub fn add_thrustMax(&mut self, thrustMax: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_THRUSTMAX, thrustMax, 0.0);
  }
  #[inline]
  pub fn add_isp(&mut self, isp: f64) {
    self.fbb_.push_slot::<f64>(OnorbitThrusterStatus_Full::VT_ISP, isp, 0.0);
  }
  #[inline]
  pub fn add_operational(&mut self, operational: bool) {
    self.fbb_.push_slot::<bool>(OnorbitThrusterStatus_Full::VT_OPERATIONAL, operational, false);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitThrusterStatus_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: OnorbitThrusterStatus_Full_dataMode_Enum) {
    self.fbb_.push_slot::<OnorbitThrusterStatus_Full_dataMode_Enum>(OnorbitThrusterStatus_Full::VT_DATAMODE, dataMode, OnorbitThrusterStatus_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OnorbitThrusterStatus_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OnorbitThrusterStatus_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OnorbitThrusterStatus_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OnorbitThrusterStatus_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OnorbitThrusterStatus_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idOnorbitThruster", &self.idOnorbitThruster());
      ds.field("name", &self.name());
      ds.field("statusTime", &self.statusTime());
      ds.field("propMassMin", &self.propMassMin());
      ds.field("propMassAvg", &self.propMassAvg());
      ds.field("propMassMedian", &self.propMassMedian());
      ds.field("propMassMax", &self.propMassMax());
      ds.field("fuelMass", &self.fuelMass());
      ds.field("fuelMassUnc", &self.fuelMassUnc());
      ds.field("totalDeltaV", &self.totalDeltaV());
      ds.field("minDeltaV", &self.minDeltaV());
      ds.field("estDeltaV", &self.estDeltaV());
      ds.field("maxDeltaV", &self.maxDeltaV());
      ds.field("thrustMax", &self.thrustMax());
      ds.field("isp", &self.isp());
      ds.field("operational", &self.operational());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OnorbitThrusterStatus_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idOnorbitThruster: Option<String>,
  pub name: Option<String>,
  pub statusTime: Option<String>,
  pub propMassMin: f64,
  pub propMassAvg: f64,
  pub propMassMedian: f64,
  pub propMassMax: f64,
  pub fuelMass: f64,
  pub fuelMassUnc: f64,
  pub totalDeltaV: f64,
  pub minDeltaV: f64,
  pub estDeltaV: f64,
  pub maxDeltaV: f64,
  pub thrustMax: f64,
  pub isp: f64,
  pub operational: bool,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: OnorbitThrusterStatus_Full_dataMode_Enum,
}
impl Default for OnorbitThrusterStatus_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idOnorbitThruster: None,
      name: None,
      statusTime: None,
      propMassMin: 0.0,
      propMassAvg: 0.0,
      propMassMedian: 0.0,
      propMassMax: 0.0,
      fuelMass: 0.0,
      fuelMassUnc: 0.0,
      totalDeltaV: 0.0,
      minDeltaV: 0.0,
      estDeltaV: 0.0,
      maxDeltaV: 0.0,
      thrustMax: 0.0,
      isp: 0.0,
      operational: false,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: OnorbitThrusterStatus_Full_dataMode_Enum::REAL,
    }
  }
}
impl OnorbitThrusterStatus_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OnorbitThrusterStatus_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnorbitThruster = self.idOnorbitThruster.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let statusTime = self.statusTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let propMassMin = self.propMassMin;
    let propMassAvg = self.propMassAvg;
    let propMassMedian = self.propMassMedian;
    let propMassMax = self.propMassMax;
    let fuelMass = self.fuelMass;
    let fuelMassUnc = self.fuelMassUnc;
    let totalDeltaV = self.totalDeltaV;
    let minDeltaV = self.minDeltaV;
    let estDeltaV = self.estDeltaV;
    let maxDeltaV = self.maxDeltaV;
    let thrustMax = self.thrustMax;
    let isp = self.isp;
    let operational = self.operational;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    OnorbitThrusterStatus_Full::create(_fbb, &OnorbitThrusterStatus_FullArgs{
      id,
      classificationMarking,
      idOnorbitThruster,
      name,
      statusTime,
      propMassMin,
      propMassAvg,
      propMassMedian,
      propMassMax,
      fuelMass,
      fuelMassUnc,
      totalDeltaV,
      minDeltaV,
      estDeltaV,
      maxDeltaV,
      thrustMax,
      isp,
      operational,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OnorbitThrusterStatus_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_thruster_status_full_unchecked`.
pub fn root_as_onorbit_thruster_status_full(buf: &[u8]) -> Result<OnorbitThrusterStatus_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OnorbitThrusterStatus_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OnorbitThrusterStatus_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_onorbit_thruster_status_full_unchecked`.
pub fn size_prefixed_root_as_onorbit_thruster_status_full(buf: &[u8]) -> Result<OnorbitThrusterStatus_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OnorbitThrusterStatus_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OnorbitThrusterStatus_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_thruster_status_full_unchecked`.
pub fn root_as_onorbit_thruster_status_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnorbitThrusterStatus_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OnorbitThrusterStatus_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OnorbitThrusterStatus_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_thruster_status_full_unchecked`.
pub fn size_prefixed_root_as_onorbit_thruster_status_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnorbitThrusterStatus_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OnorbitThrusterStatus_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OnorbitThrusterStatus_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OnorbitThrusterStatus_Full`.
pub unsafe fn root_as_onorbit_thruster_status_full_unchecked(buf: &[u8]) -> OnorbitThrusterStatus_Full {
  flatbuffers::root_unchecked::<OnorbitThrusterStatus_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OnorbitThrusterStatus_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OnorbitThrusterStatus_Full`.
pub unsafe fn size_prefixed_root_as_onorbit_thruster_status_full_unchecked(buf: &[u8]) -> OnorbitThrusterStatus_Full {
  flatbuffers::size_prefixed_root_unchecked::<OnorbitThrusterStatus_Full>(buf)
}
pub const ONORBIT_THRUSTER_STATUS_FULL_IDENTIFIER: &str = "ONOR";

#[inline]
pub fn onorbit_thruster_status_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_THRUSTER_STATUS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn onorbit_thruster_status_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_THRUSTER_STATUS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_onorbit_thruster_status_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OnorbitThrusterStatus_Full<'a>>) {
  fbb.finish(root, Some(ONORBIT_THRUSTER_STATUS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_onorbit_thruster_status_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OnorbitThrusterStatus_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(ONORBIT_THRUSTER_STATUS_FULL_IDENTIFIER));
}
