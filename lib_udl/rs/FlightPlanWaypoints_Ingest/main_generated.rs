// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum FlightPlanWaypoints_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of waypoints associated with this flight plan.
pub struct FlightPlanWaypoints_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlightPlanWaypoints_Ingest<'a> {
  type Inner = FlightPlanWaypoints_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FlightPlanWaypoints_Ingest<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_WAYPOINTNAME: flatbuffers::VOffsetT = 6;
  pub const VT_WAYPOINTNUM: flatbuffers::VOffsetT = 8;
  pub const VT_AIRWAY: flatbuffers::VOffsetT = 10;
  pub const VT_ARPT: flatbuffers::VOffsetT = 12;
  pub const VT_LAT: flatbuffers::VOffsetT = 14;
  pub const VT_LON: flatbuffers::VOffsetT = 16;
  pub const VT_ARID: flatbuffers::VOffsetT = 18;
  pub const VT_NAVAID: flatbuffers::VOffsetT = 20;
  pub const VT_TACANCHANNEL: flatbuffers::VOffsetT = 22;
  pub const VT_VORFREQ: flatbuffers::VOffsetT = 24;
  pub const VT_TURBCAT: flatbuffers::VOffsetT = 26;
  pub const VT_ICECAT: flatbuffers::VOffsetT = 28;
  pub const VT_THUNDERCAT: flatbuffers::VOffsetT = 30;
  pub const VT_ALT: flatbuffers::VOffsetT = 32;
  pub const VT_TEMPDEV: flatbuffers::VOffsetT = 34;
  pub const VT_LEGFUELDEGRADE: flatbuffers::VOffsetT = 36;
  pub const VT_LEGMACH: flatbuffers::VOffsetT = 38;
  pub const VT_LEGMSNINDEX: flatbuffers::VOffsetT = 40;
  pub const VT_LEGDRAGINDEX: flatbuffers::VOffsetT = 42;
  pub const VT_AVGCALAIRSPEED: flatbuffers::VOffsetT = 44;
  pub const VT_AVGTRUEAIRSPEED: flatbuffers::VOffsetT = 46;
  pub const VT_AVGGROUNDSPEED: flatbuffers::VOffsetT = 48;
  pub const VT_PRIFREQ: flatbuffers::VOffsetT = 50;
  pub const VT_POINTWINDDIR: flatbuffers::VOffsetT = 52;
  pub const VT_POINTWINDSPEED: flatbuffers::VOffsetT = 54;
  pub const VT_AVGWINDDIR: flatbuffers::VOffsetT = 56;
  pub const VT_AVGWINDSPEED: flatbuffers::VOffsetT = 58;
  pub const VT_LEGWINDFAC: flatbuffers::VOffsetT = 60;
  pub const VT_AVGDRIFTANG: flatbuffers::VOffsetT = 62;
  pub const VT_SECFREQ: flatbuffers::VOffsetT = 64;
  pub const VT_MAGCOURSE: flatbuffers::VOffsetT = 66;
  pub const VT_TRUECOURSE: flatbuffers::VOffsetT = 68;
  pub const VT_MAGHEADING: flatbuffers::VOffsetT = 70;
  pub const VT_AATACANCHANNEL: flatbuffers::VOffsetT = 72;
  pub const VT_ZONEDISTANCE: flatbuffers::VOffsetT = 74;
  pub const VT_TOTALFLOWNDISTANCE: flatbuffers::VOffsetT = 76;
  pub const VT_TOTALREMDISTANCE: flatbuffers::VOffsetT = 78;
  pub const VT_ZONETIME: flatbuffers::VOffsetT = 80;
  pub const VT_TOTALTIME: flatbuffers::VOffsetT = 82;
  pub const VT_TOTALTIMEREM: flatbuffers::VOffsetT = 84;
  pub const VT_ZONEFUEL: flatbuffers::VOffsetT = 86;
  pub const VT_TOTALUSEDFUEL: flatbuffers::VOffsetT = 88;
  pub const VT_TOTALREMFUEL: flatbuffers::VOffsetT = 90;
  pub const VT_EXCHANGEDFUEL: flatbuffers::VOffsetT = 92;
  pub const VT_AIRDISTANCE: flatbuffers::VOffsetT = 94;
  pub const VT_TOTALAIRDISTANCE: flatbuffers::VOffsetT = 96;
  pub const VT_TOTALWEIGHT: flatbuffers::VOffsetT = 98;
  pub const VT_ETA: flatbuffers::VOffsetT = 100;
  pub const VT_ATA: flatbuffers::VOffsetT = 102;
  pub const VT_FUELFLOW: flatbuffers::VOffsetT = 104;
  pub const VT_LEGALTERNATE: flatbuffers::VOffsetT = 106;
  pub const VT_MAGVAR: flatbuffers::VOffsetT = 108;
  pub const VT_DAYLOWALT: flatbuffers::VOffsetT = 110;
  pub const VT_NIGHTLOWALT: flatbuffers::VOffsetT = 112;
  pub const VT_NVGLOWALT: flatbuffers::VOffsetT = 114;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FlightPlanWaypoints_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FlightPlanWaypoints_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<FlightPlanWaypoints_Ingest<'bldr>> {
    let mut builder = FlightPlanWaypoints_IngestBuilder::new(_fbb);
    builder.add_nvgLowAlt(args.nvgLowAlt);
    builder.add_nightLowAlt(args.nightLowAlt);
    builder.add_dayLowAlt(args.dayLowAlt);
    builder.add_magVar(args.magVar);
    builder.add_fuelFlow(args.fuelFlow);
    builder.add_totalWeight(args.totalWeight);
    builder.add_totalAirDistance(args.totalAirDistance);
    builder.add_airDistance(args.airDistance);
    builder.add_exchangedFuel(args.exchangedFuel);
    builder.add_totalRemFuel(args.totalRemFuel);
    builder.add_totalUsedFuel(args.totalUsedFuel);
    builder.add_zoneFuel(args.zoneFuel);
    builder.add_zoneTime(args.zoneTime);
    builder.add_totalRemDistance(args.totalRemDistance);
    builder.add_totalFlownDistance(args.totalFlownDistance);
    builder.add_zoneDistance(args.zoneDistance);
    builder.add_magHeading(args.magHeading);
    builder.add_trueCourse(args.trueCourse);
    builder.add_magCourse(args.magCourse);
    builder.add_secFreq(args.secFreq);
    builder.add_avgDriftAng(args.avgDriftAng);
    builder.add_legWindFac(args.legWindFac);
    builder.add_avgWindSpeed(args.avgWindSpeed);
    builder.add_avgWindDir(args.avgWindDir);
    builder.add_pointWindSpeed(args.pointWindSpeed);
    builder.add_pointWindDir(args.pointWindDir);
    builder.add_priFreq(args.priFreq);
    builder.add_avgGroundSpeed(args.avgGroundSpeed);
    builder.add_avgTrueAirspeed(args.avgTrueAirspeed);
    builder.add_avgCalAirspeed(args.avgCalAirspeed);
    builder.add_legDragIndex(args.legDragIndex);
    builder.add_legMsnIndex(args.legMsnIndex);
    builder.add_legMach(args.legMach);
    builder.add_legFuelDegrade(args.legFuelDegrade);
    builder.add_tempDev(args.tempDev);
    builder.add_alt(args.alt);
    builder.add_vorFreq(args.vorFreq);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    if let Some(x) = args.legAlternate { builder.add_legAlternate(x); }
    if let Some(x) = args.ata { builder.add_ata(x); }
    if let Some(x) = args.eta { builder.add_eta(x); }
    if let Some(x) = args.totalTimeRem { builder.add_totalTimeRem(x); }
    if let Some(x) = args.totalTime { builder.add_totalTime(x); }
    if let Some(x) = args.aaTacanChannel { builder.add_aaTacanChannel(x); }
    if let Some(x) = args.thunderCat { builder.add_thunderCat(x); }
    if let Some(x) = args.iceCat { builder.add_iceCat(x); }
    if let Some(x) = args.turbCat { builder.add_turbCat(x); }
    if let Some(x) = args.tacanChannel { builder.add_tacanChannel(x); }
    if let Some(x) = args.navaid { builder.add_navaid(x); }
    if let Some(x) = args.arId { builder.add_arId(x); }
    if let Some(x) = args.arpt { builder.add_arpt(x); }
    if let Some(x) = args.airway { builder.add_airway(x); }
    builder.add_waypointNum(args.waypointNum);
    if let Some(x) = args.waypointName { builder.add_waypointName(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> FlightPlanWaypoints_IngestT {
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let waypointName = self.waypointName().map(|x| {
      x.to_string()
    });
    let waypointNum = self.waypointNum();
    let airway = self.airway().map(|x| {
      x.to_string()
    });
    let arpt = self.arpt().map(|x| {
      x.to_string()
    });
    let lat = self.lat();
    let lon = self.lon();
    let arId = self.arId().map(|x| {
      x.to_string()
    });
    let navaid = self.navaid().map(|x| {
      x.to_string()
    });
    let tacanChannel = self.tacanChannel().map(|x| {
      x.to_string()
    });
    let vorFreq = self.vorFreq();
    let turbCat = self.turbCat().map(|x| {
      x.to_string()
    });
    let iceCat = self.iceCat().map(|x| {
      x.to_string()
    });
    let thunderCat = self.thunderCat().map(|x| {
      x.to_string()
    });
    let alt = self.alt();
    let tempDev = self.tempDev();
    let legFuelDegrade = self.legFuelDegrade();
    let legMach = self.legMach();
    let legMsnIndex = self.legMsnIndex();
    let legDragIndex = self.legDragIndex();
    let avgCalAirspeed = self.avgCalAirspeed();
    let avgTrueAirspeed = self.avgTrueAirspeed();
    let avgGroundSpeed = self.avgGroundSpeed();
    let priFreq = self.priFreq();
    let pointWindDir = self.pointWindDir();
    let pointWindSpeed = self.pointWindSpeed();
    let avgWindDir = self.avgWindDir();
    let avgWindSpeed = self.avgWindSpeed();
    let legWindFac = self.legWindFac();
    let avgDriftAng = self.avgDriftAng();
    let secFreq = self.secFreq();
    let magCourse = self.magCourse();
    let trueCourse = self.trueCourse();
    let magHeading = self.magHeading();
    let aaTacanChannel = self.aaTacanChannel().map(|x| {
      x.to_string()
    });
    let zoneDistance = self.zoneDistance();
    let totalFlownDistance = self.totalFlownDistance();
    let totalRemDistance = self.totalRemDistance();
    let zoneTime = self.zoneTime();
    let totalTime = self.totalTime().map(|x| {
      x.to_string()
    });
    let totalTimeRem = self.totalTimeRem().map(|x| {
      x.to_string()
    });
    let zoneFuel = self.zoneFuel();
    let totalUsedFuel = self.totalUsedFuel();
    let totalRemFuel = self.totalRemFuel();
    let exchangedFuel = self.exchangedFuel();
    let airDistance = self.airDistance();
    let totalAirDistance = self.totalAirDistance();
    let totalWeight = self.totalWeight();
    let eta = self.eta().map(|x| {
      x.to_string()
    });
    let ata = self.ata().map(|x| {
      x.to_string()
    });
    let fuelFlow = self.fuelFlow();
    let legAlternate = self.legAlternate().map(|x| {
      x.to_string()
    });
    let magVar = self.magVar();
    let dayLowAlt = self.dayLowAlt();
    let nightLowAlt = self.nightLowAlt();
    let nvgLowAlt = self.nvgLowAlt();
    FlightPlanWaypoints_IngestT {
      type_,
      waypointName,
      waypointNum,
      airway,
      arpt,
      lat,
      lon,
      arId,
      navaid,
      tacanChannel,
      vorFreq,
      turbCat,
      iceCat,
      thunderCat,
      alt,
      tempDev,
      legFuelDegrade,
      legMach,
      legMsnIndex,
      legDragIndex,
      avgCalAirspeed,
      avgTrueAirspeed,
      avgGroundSpeed,
      priFreq,
      pointWindDir,
      pointWindSpeed,
      avgWindDir,
      avgWindSpeed,
      legWindFac,
      avgDriftAng,
      secFreq,
      magCourse,
      trueCourse,
      magHeading,
      aaTacanChannel,
      zoneDistance,
      totalFlownDistance,
      totalRemDistance,
      zoneTime,
      totalTime,
      totalTimeRem,
      zoneFuel,
      totalUsedFuel,
      totalRemFuel,
      exchangedFuel,
      airDistance,
      totalAirDistance,
      totalWeight,
      eta,
      ata,
      fuelFlow,
      legAlternate,
      magVar,
      dayLowAlt,
      nightLowAlt,
      nvgLowAlt,
    }
  }

  /// Points are designated by type as either a comment point or a waypoint. A comment point conveys important information about the point for pilots but is not entered into a flight management system. A waypoint is a point that is entered into a flight management system and/or filed with Air Traffic Control.
  /// Example: /// Example: COMMENT
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_TYPE_, None)}
  }
  /// Name of the point. The name of a comment point identifies important information about that point, e.g. Top of Climb. The name of a waypoint identifies the location of that point.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn waypointName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_WAYPOINTNAME, None)}
  }
  /// The waypoint number on the route. Comment points do not get a waypoint number.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  #[inline]
  pub fn waypointNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FlightPlanWaypoints_Ingest::VT_WAYPOINTNUM, Some(0)).unwrap()}
  }
  /// The flight path flown for this leg.
  /// Example: /// Example: W15
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn airway(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_AIRWAY, None)}
  }
  /// Point identifying an air refueling track/anchor or fixed track.
  /// Example: /// Example: ARIP
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn arpt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_ARPT, None)}
  }
  /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_LAT, Some(0.0)).unwrap()}
  }
  /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_LON, Some(0.0)).unwrap()}
  }
  /// The ID of the air refueling track/anchor or fixed track.
  /// Example: /// Example: AR202
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn arId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_ARID, None)}
  }
  /// Navigational Aid (NAVAID) identification code.
  /// Example: /// Example: HTO
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn navaid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_NAVAID, None)}
  }
  /// Tactical Air Navigation (TACAN) channel for the Navigational Aid (NAVAID).
  /// Example: /// Example: 83X
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tacanChannel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_TACANCHANNEL, None)}
  }
  /// VHF Omni-directional Range (VOR) frequency for the Navigational Aid (NAVAID) in megahertz.
  /// Example: /// Example: 113.6
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vorFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_VORFREQ, Some(0.0)).unwrap()}
  }
  /// The turbulence intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: EXTREME
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn turbCat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_TURBCAT, None)}
  }
  /// The icing intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: MODERATE
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn iceCat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_ICECAT, None)}
  }
  /// The thunderstorm intensity classification for this flight (LIGHT, MODERATE, etc).
  /// Example: /// Example: MODERATE
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn thunderCat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_THUNDERCAT, None)}
  }
  /// Altitude of a level, point, or object measured in feet above mean sea level.
  /// Example: /// Example: 27000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_ALT, Some(0.0)).unwrap()}
  }
  /// Average temperature deviation from standard day profile for this leg in degrees Celsius.
  /// Example: /// Example: 12.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tempDev(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TEMPDEV, Some(0.0)).unwrap()}
  }
  /// The fuel degrade percentage used for this leg.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legFuelDegrade(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_LEGFUELDEGRADE, Some(0.0)).unwrap()}
  }
  /// The average Mach speed for this leg.
  /// Example: /// Example: 0.74
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legMach(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_LEGMACH, Some(0.0)).unwrap()}
  }
  /// The mission index value for this leg. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  /// Example: /// Example: 65
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legMsnIndex(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_LEGMSNINDEX, Some(0.0)).unwrap()}
  }
  /// The percent degrade due to drag for this aircraft for this leg.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legDragIndex(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_LEGDRAGINDEX, Some(0.0)).unwrap()}
  }
  /// The average calibrated airspeed (CAS) for this leg in knots.
  /// Example: /// Example: 200.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgCalAirspeed(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_AVGCALAIRSPEED, Some(0.0)).unwrap()}
  }
  /// The average true airspeed (TAS) for this leg in knots.
  /// Example: /// Example: 210.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgTrueAirspeed(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_AVGTRUEAIRSPEED, Some(0.0)).unwrap()}
  }
  /// The average ground speed for this leg in knots.
  /// Example: /// Example: 300.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgGroundSpeed(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_AVGGROUNDSPEED, Some(0.0)).unwrap()}
  }
  /// The primary UHF radio frequency used for the air refueling track or anchor in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn priFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_PRIFREQ, Some(0.0)).unwrap()}
  }
  /// The wind direction at this specific point in degrees from true north.
  /// Example: /// Example: 165.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pointWindDir(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_POINTWINDDIR, Some(0.0)).unwrap()}
  }
  /// The wind velocity at this specific point in knots.
  /// Example: /// Example: 14.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pointWindSpeed(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_POINTWINDSPEED, Some(0.0)).unwrap()}
  }
  /// The average wind direction for this leg in degrees from true north.
  /// Example: /// Example: 165.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgWindDir(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_AVGWINDDIR, Some(0.0)).unwrap()}
  }
  /// The average wind speed for this leg in knots.
  /// Example: /// Example: 14.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgWindSpeed(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_AVGWINDSPEED, Some(0.0)).unwrap()}
  }
  /// The wind factor for this leg in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: -32.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legWindFac(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_LEGWINDFAC, Some(0.0)).unwrap()}
  }
  /// The average drift angle for this leg in degrees from true north.
  /// Example: /// Example: -3.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgDriftAng(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_AVGDRIFTANG, Some(0.0)).unwrap()}
  }
  /// The secondary UHF radio frequency used for the air refueling track or anchor in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn secFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_SECFREQ, Some(0.0)).unwrap()}
  }
  /// The magnetic course at leg midpoint in degrees from true north.
  /// Example: /// Example: 338.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn magCourse(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_MAGCOURSE, Some(0.0)).unwrap()}
  }
  /// The true course at leg midpoint in degrees from true north.
  /// Example: /// Example: 328.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn trueCourse(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TRUECOURSE, Some(0.0)).unwrap()}
  }
  /// The magnetic heading at leg midpoint in degrees from true north.
  /// Example: /// Example: 212.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn magHeading(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_MAGHEADING, Some(0.0)).unwrap()}
  }
  /// The air-to-air Tactical Air Navigation (TACAN) channels used by the receiver/tanker during air refueling.
  /// Example: /// Example: 31/94
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn aaTacanChannel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_AATACANCHANNEL, None)}
  }
  /// The zone/leg distance flown in nautical miles.
  /// Example: /// Example: 212.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zoneDistance(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_ZONEDISTANCE, Some(0.0)).unwrap()}
  }
  /// The total distance flown to this waypoint calculated from point of departure in nautical miles.
  /// Example: /// Example: 688.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalFlownDistance(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALFLOWNDISTANCE, Some(0.0)).unwrap()}
  }
  /// The total distance remaining from this waypoint to the point of arrival in nautical miles.
  /// Example: /// Example: 1288.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalRemDistance(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALREMDISTANCE, Some(0.0)).unwrap()}
  }
  /// The time to fly this zone/leg in minutes.
  /// Example: /// Example: 36.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zoneTime(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_ZONETIME, Some(0.0)).unwrap()}
  }
  /// The total time accumulated from takeoff to this waypoint expressed as HH:MM.
  /// Example: /// Example: 08:45
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn totalTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_TOTALTIME, None)}
  }
  /// The total time remaining from this waypoint to the point of arrival expressed as HH:MM.
  /// Example: /// Example: 01:43
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn totalTimeRem(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_TOTALTIMEREM, None)}
  }
  /// The amount of fuel used on this zone/leg in pounds.
  /// Example: /// Example: 1120.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zoneFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_ZONEFUEL, Some(0.0)).unwrap()}
  }
  /// The total fuel used to this waypoint from point of departure in pounds.
  /// Example: /// Example: 70431.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalUsedFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALUSEDFUEL, Some(0.0)).unwrap()}
  }
  /// The total fuel remaining at this waypoint in pounds.
  /// Example: /// Example: 30453.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalRemFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALREMFUEL, Some(0.0)).unwrap()}
  }
  /// The amount of fuel onloaded or offloaded at this waypoint in pounds (negative value for offload).
  /// Example: /// Example: -30400.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn exchangedFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_EXCHANGEDFUEL, Some(0.0)).unwrap()}
  }
  /// The air distance of this leg in nautical miles.
  /// Example: /// Example: 321.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn airDistance(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_AIRDISTANCE, Some(0.0)).unwrap()}
  }
  /// The total air distance to this waypoint in nautical miles.
  /// Example: /// Example: 3251.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalAirDistance(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALAIRDISTANCE, Some(0.0)).unwrap()}
  }
  /// The total weight of the aircraft at this waypoint in pounds.
  /// Example: /// Example: 207123.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALWEIGHT, Some(0.0)).unwrap()}
  }
  /// Estimated Time of Arrival (ETA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eta(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_ETA, None)}
  }
  /// Actual Time of Arrival (ATA) at this waypoint in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ata(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_ATA, None)}
  }
  /// The leg fuel flow in pounds per hour.
  /// Example: /// Example: 17654.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelFlow(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_FUELFLOW, Some(0.0)).unwrap()}
  }
  /// The planned alternate leg based on user-defined constraints, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn legAlternate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanWaypoints_Ingest::VT_LEGALTERNATE, None)}
  }
  /// The magnetic variation for this leg in degrees.
  /// Example: /// Example: -13.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn magVar(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_MAGVAR, Some(0.0)).unwrap()}
  }
  /// The day low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dayLowAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_DAYLOWALT, Some(0.0)).unwrap()}
  }
  /// The night low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 2300.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nightLowAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_NIGHTLOWALT, Some(0.0)).unwrap()}
  }
  /// The night vision goggle low level altitude in feet above sea level for the leg ending at this waypoint.
  /// Example: /// Example: 2450.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nvgLowAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanWaypoints_Ingest::VT_NVGLOWALT, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FlightPlanWaypoints_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("waypointName", Self::VT_WAYPOINTNAME, false)?
     .visit_field::<i32>("waypointNum", Self::VT_WAYPOINTNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("airway", Self::VT_AIRWAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arpt", Self::VT_ARPT, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arId", Self::VT_ARID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("navaid", Self::VT_NAVAID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tacanChannel", Self::VT_TACANCHANNEL, false)?
     .visit_field::<f64>("vorFreq", Self::VT_VORFREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("turbCat", Self::VT_TURBCAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("iceCat", Self::VT_ICECAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("thunderCat", Self::VT_THUNDERCAT, false)?
     .visit_field::<f64>("alt", Self::VT_ALT, false)?
     .visit_field::<f64>("tempDev", Self::VT_TEMPDEV, false)?
     .visit_field::<f64>("legFuelDegrade", Self::VT_LEGFUELDEGRADE, false)?
     .visit_field::<f64>("legMach", Self::VT_LEGMACH, false)?
     .visit_field::<f64>("legMsnIndex", Self::VT_LEGMSNINDEX, false)?
     .visit_field::<f64>("legDragIndex", Self::VT_LEGDRAGINDEX, false)?
     .visit_field::<f64>("avgCalAirspeed", Self::VT_AVGCALAIRSPEED, false)?
     .visit_field::<f64>("avgTrueAirspeed", Self::VT_AVGTRUEAIRSPEED, false)?
     .visit_field::<f64>("avgGroundSpeed", Self::VT_AVGGROUNDSPEED, false)?
     .visit_field::<f64>("priFreq", Self::VT_PRIFREQ, false)?
     .visit_field::<f64>("pointWindDir", Self::VT_POINTWINDDIR, false)?
     .visit_field::<f64>("pointWindSpeed", Self::VT_POINTWINDSPEED, false)?
     .visit_field::<f64>("avgWindDir", Self::VT_AVGWINDDIR, false)?
     .visit_field::<f64>("avgWindSpeed", Self::VT_AVGWINDSPEED, false)?
     .visit_field::<f64>("legWindFac", Self::VT_LEGWINDFAC, false)?
     .visit_field::<f64>("avgDriftAng", Self::VT_AVGDRIFTANG, false)?
     .visit_field::<f64>("secFreq", Self::VT_SECFREQ, false)?
     .visit_field::<f64>("magCourse", Self::VT_MAGCOURSE, false)?
     .visit_field::<f64>("trueCourse", Self::VT_TRUECOURSE, false)?
     .visit_field::<f64>("magHeading", Self::VT_MAGHEADING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aaTacanChannel", Self::VT_AATACANCHANNEL, false)?
     .visit_field::<f64>("zoneDistance", Self::VT_ZONEDISTANCE, false)?
     .visit_field::<f64>("totalFlownDistance", Self::VT_TOTALFLOWNDISTANCE, false)?
     .visit_field::<f64>("totalRemDistance", Self::VT_TOTALREMDISTANCE, false)?
     .visit_field::<f64>("zoneTime", Self::VT_ZONETIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("totalTime", Self::VT_TOTALTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("totalTimeRem", Self::VT_TOTALTIMEREM, false)?
     .visit_field::<f64>("zoneFuel", Self::VT_ZONEFUEL, false)?
     .visit_field::<f64>("totalUsedFuel", Self::VT_TOTALUSEDFUEL, false)?
     .visit_field::<f64>("totalRemFuel", Self::VT_TOTALREMFUEL, false)?
     .visit_field::<f64>("exchangedFuel", Self::VT_EXCHANGEDFUEL, false)?
     .visit_field::<f64>("airDistance", Self::VT_AIRDISTANCE, false)?
     .visit_field::<f64>("totalAirDistance", Self::VT_TOTALAIRDISTANCE, false)?
     .visit_field::<f64>("totalWeight", Self::VT_TOTALWEIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eta", Self::VT_ETA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ata", Self::VT_ATA, false)?
     .visit_field::<f64>("fuelFlow", Self::VT_FUELFLOW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("legAlternate", Self::VT_LEGALTERNATE, false)?
     .visit_field::<f64>("magVar", Self::VT_MAGVAR, false)?
     .visit_field::<f64>("dayLowAlt", Self::VT_DAYLOWALT, false)?
     .visit_field::<f64>("nightLowAlt", Self::VT_NIGHTLOWALT, false)?
     .visit_field::<f64>("nvgLowAlt", Self::VT_NVGLOWALT, false)?
     .finish();
    Ok(())
  }
}
pub struct FlightPlanWaypoints_IngestArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub waypointName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub waypointNum: i32,
    pub airway: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arpt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lat: f64,
    pub lon: f64,
    pub arId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub navaid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tacanChannel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub vorFreq: f64,
    pub turbCat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub iceCat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub thunderCat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub alt: f64,
    pub tempDev: f64,
    pub legFuelDegrade: f64,
    pub legMach: f64,
    pub legMsnIndex: f64,
    pub legDragIndex: f64,
    pub avgCalAirspeed: f64,
    pub avgTrueAirspeed: f64,
    pub avgGroundSpeed: f64,
    pub priFreq: f64,
    pub pointWindDir: f64,
    pub pointWindSpeed: f64,
    pub avgWindDir: f64,
    pub avgWindSpeed: f64,
    pub legWindFac: f64,
    pub avgDriftAng: f64,
    pub secFreq: f64,
    pub magCourse: f64,
    pub trueCourse: f64,
    pub magHeading: f64,
    pub aaTacanChannel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zoneDistance: f64,
    pub totalFlownDistance: f64,
    pub totalRemDistance: f64,
    pub zoneTime: f64,
    pub totalTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub totalTimeRem: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zoneFuel: f64,
    pub totalUsedFuel: f64,
    pub totalRemFuel: f64,
    pub exchangedFuel: f64,
    pub airDistance: f64,
    pub totalAirDistance: f64,
    pub totalWeight: f64,
    pub eta: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ata: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fuelFlow: f64,
    pub legAlternate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub magVar: f64,
    pub dayLowAlt: f64,
    pub nightLowAlt: f64,
    pub nvgLowAlt: f64,
}
impl<'a> Default for FlightPlanWaypoints_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    FlightPlanWaypoints_IngestArgs {
      type_: None,
      waypointName: None,
      waypointNum: 0,
      airway: None,
      arpt: None,
      lat: 0.0,
      lon: 0.0,
      arId: None,
      navaid: None,
      tacanChannel: None,
      vorFreq: 0.0,
      turbCat: None,
      iceCat: None,
      thunderCat: None,
      alt: 0.0,
      tempDev: 0.0,
      legFuelDegrade: 0.0,
      legMach: 0.0,
      legMsnIndex: 0.0,
      legDragIndex: 0.0,
      avgCalAirspeed: 0.0,
      avgTrueAirspeed: 0.0,
      avgGroundSpeed: 0.0,
      priFreq: 0.0,
      pointWindDir: 0.0,
      pointWindSpeed: 0.0,
      avgWindDir: 0.0,
      avgWindSpeed: 0.0,
      legWindFac: 0.0,
      avgDriftAng: 0.0,
      secFreq: 0.0,
      magCourse: 0.0,
      trueCourse: 0.0,
      magHeading: 0.0,
      aaTacanChannel: None,
      zoneDistance: 0.0,
      totalFlownDistance: 0.0,
      totalRemDistance: 0.0,
      zoneTime: 0.0,
      totalTime: None,
      totalTimeRem: None,
      zoneFuel: 0.0,
      totalUsedFuel: 0.0,
      totalRemFuel: 0.0,
      exchangedFuel: 0.0,
      airDistance: 0.0,
      totalAirDistance: 0.0,
      totalWeight: 0.0,
      eta: None,
      ata: None,
      fuelFlow: 0.0,
      legAlternate: None,
      magVar: 0.0,
      dayLowAlt: 0.0,
      nightLowAlt: 0.0,
      nvgLowAlt: 0.0,
    }
  }
}

pub struct FlightPlanWaypoints_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FlightPlanWaypoints_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_waypointName(&mut self, waypointName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_WAYPOINTNAME, waypointName);
  }
  #[inline]
  pub fn add_waypointNum(&mut self, waypointNum: i32) {
    self.fbb_.push_slot::<i32>(FlightPlanWaypoints_Ingest::VT_WAYPOINTNUM, waypointNum, 0);
  }
  #[inline]
  pub fn add_airway(&mut self, airway: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_AIRWAY, airway);
  }
  #[inline]
  pub fn add_arpt(&mut self, arpt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_ARPT, arpt);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_arId(&mut self, arId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_ARID, arId);
  }
  #[inline]
  pub fn add_navaid(&mut self, navaid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_NAVAID, navaid);
  }
  #[inline]
  pub fn add_tacanChannel(&mut self, tacanChannel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_TACANCHANNEL, tacanChannel);
  }
  #[inline]
  pub fn add_vorFreq(&mut self, vorFreq: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_VORFREQ, vorFreq, 0.0);
  }
  #[inline]
  pub fn add_turbCat(&mut self, turbCat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_TURBCAT, turbCat);
  }
  #[inline]
  pub fn add_iceCat(&mut self, iceCat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_ICECAT, iceCat);
  }
  #[inline]
  pub fn add_thunderCat(&mut self, thunderCat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_THUNDERCAT, thunderCat);
  }
  #[inline]
  pub fn add_alt(&mut self, alt: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_ALT, alt, 0.0);
  }
  #[inline]
  pub fn add_tempDev(&mut self, tempDev: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TEMPDEV, tempDev, 0.0);
  }
  #[inline]
  pub fn add_legFuelDegrade(&mut self, legFuelDegrade: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_LEGFUELDEGRADE, legFuelDegrade, 0.0);
  }
  #[inline]
  pub fn add_legMach(&mut self, legMach: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_LEGMACH, legMach, 0.0);
  }
  #[inline]
  pub fn add_legMsnIndex(&mut self, legMsnIndex: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_LEGMSNINDEX, legMsnIndex, 0.0);
  }
  #[inline]
  pub fn add_legDragIndex(&mut self, legDragIndex: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_LEGDRAGINDEX, legDragIndex, 0.0);
  }
  #[inline]
  pub fn add_avgCalAirspeed(&mut self, avgCalAirspeed: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_AVGCALAIRSPEED, avgCalAirspeed, 0.0);
  }
  #[inline]
  pub fn add_avgTrueAirspeed(&mut self, avgTrueAirspeed: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_AVGTRUEAIRSPEED, avgTrueAirspeed, 0.0);
  }
  #[inline]
  pub fn add_avgGroundSpeed(&mut self, avgGroundSpeed: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_AVGGROUNDSPEED, avgGroundSpeed, 0.0);
  }
  #[inline]
  pub fn add_priFreq(&mut self, priFreq: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_PRIFREQ, priFreq, 0.0);
  }
  #[inline]
  pub fn add_pointWindDir(&mut self, pointWindDir: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_POINTWINDDIR, pointWindDir, 0.0);
  }
  #[inline]
  pub fn add_pointWindSpeed(&mut self, pointWindSpeed: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_POINTWINDSPEED, pointWindSpeed, 0.0);
  }
  #[inline]
  pub fn add_avgWindDir(&mut self, avgWindDir: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_AVGWINDDIR, avgWindDir, 0.0);
  }
  #[inline]
  pub fn add_avgWindSpeed(&mut self, avgWindSpeed: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_AVGWINDSPEED, avgWindSpeed, 0.0);
  }
  #[inline]
  pub fn add_legWindFac(&mut self, legWindFac: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_LEGWINDFAC, legWindFac, 0.0);
  }
  #[inline]
  pub fn add_avgDriftAng(&mut self, avgDriftAng: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_AVGDRIFTANG, avgDriftAng, 0.0);
  }
  #[inline]
  pub fn add_secFreq(&mut self, secFreq: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_SECFREQ, secFreq, 0.0);
  }
  #[inline]
  pub fn add_magCourse(&mut self, magCourse: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_MAGCOURSE, magCourse, 0.0);
  }
  #[inline]
  pub fn add_trueCourse(&mut self, trueCourse: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TRUECOURSE, trueCourse, 0.0);
  }
  #[inline]
  pub fn add_magHeading(&mut self, magHeading: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_MAGHEADING, magHeading, 0.0);
  }
  #[inline]
  pub fn add_aaTacanChannel(&mut self, aaTacanChannel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_AATACANCHANNEL, aaTacanChannel);
  }
  #[inline]
  pub fn add_zoneDistance(&mut self, zoneDistance: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_ZONEDISTANCE, zoneDistance, 0.0);
  }
  #[inline]
  pub fn add_totalFlownDistance(&mut self, totalFlownDistance: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALFLOWNDISTANCE, totalFlownDistance, 0.0);
  }
  #[inline]
  pub fn add_totalRemDistance(&mut self, totalRemDistance: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALREMDISTANCE, totalRemDistance, 0.0);
  }
  #[inline]
  pub fn add_zoneTime(&mut self, zoneTime: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_ZONETIME, zoneTime, 0.0);
  }
  #[inline]
  pub fn add_totalTime(&mut self, totalTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_TOTALTIME, totalTime);
  }
  #[inline]
  pub fn add_totalTimeRem(&mut self, totalTimeRem: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_TOTALTIMEREM, totalTimeRem);
  }
  #[inline]
  pub fn add_zoneFuel(&mut self, zoneFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_ZONEFUEL, zoneFuel, 0.0);
  }
  #[inline]
  pub fn add_totalUsedFuel(&mut self, totalUsedFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALUSEDFUEL, totalUsedFuel, 0.0);
  }
  #[inline]
  pub fn add_totalRemFuel(&mut self, totalRemFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALREMFUEL, totalRemFuel, 0.0);
  }
  #[inline]
  pub fn add_exchangedFuel(&mut self, exchangedFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_EXCHANGEDFUEL, exchangedFuel, 0.0);
  }
  #[inline]
  pub fn add_airDistance(&mut self, airDistance: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_AIRDISTANCE, airDistance, 0.0);
  }
  #[inline]
  pub fn add_totalAirDistance(&mut self, totalAirDistance: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALAIRDISTANCE, totalAirDistance, 0.0);
  }
  #[inline]
  pub fn add_totalWeight(&mut self, totalWeight: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_TOTALWEIGHT, totalWeight, 0.0);
  }
  #[inline]
  pub fn add_eta(&mut self, eta: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_ETA, eta);
  }
  #[inline]
  pub fn add_ata(&mut self, ata: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_ATA, ata);
  }
  #[inline]
  pub fn add_fuelFlow(&mut self, fuelFlow: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_FUELFLOW, fuelFlow, 0.0);
  }
  #[inline]
  pub fn add_legAlternate(&mut self, legAlternate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanWaypoints_Ingest::VT_LEGALTERNATE, legAlternate);
  }
  #[inline]
  pub fn add_magVar(&mut self, magVar: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_MAGVAR, magVar, 0.0);
  }
  #[inline]
  pub fn add_dayLowAlt(&mut self, dayLowAlt: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_DAYLOWALT, dayLowAlt, 0.0);
  }
  #[inline]
  pub fn add_nightLowAlt(&mut self, nightLowAlt: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_NIGHTLOWALT, nightLowAlt, 0.0);
  }
  #[inline]
  pub fn add_nvgLowAlt(&mut self, nvgLowAlt: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanWaypoints_Ingest::VT_NVGLOWALT, nvgLowAlt, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FlightPlanWaypoints_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FlightPlanWaypoints_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlightPlanWaypoints_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FlightPlanWaypoints_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FlightPlanWaypoints_Ingest");
      ds.field("type_", &self.type_());
      ds.field("waypointName", &self.waypointName());
      ds.field("waypointNum", &self.waypointNum());
      ds.field("airway", &self.airway());
      ds.field("arpt", &self.arpt());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("arId", &self.arId());
      ds.field("navaid", &self.navaid());
      ds.field("tacanChannel", &self.tacanChannel());
      ds.field("vorFreq", &self.vorFreq());
      ds.field("turbCat", &self.turbCat());
      ds.field("iceCat", &self.iceCat());
      ds.field("thunderCat", &self.thunderCat());
      ds.field("alt", &self.alt());
      ds.field("tempDev", &self.tempDev());
      ds.field("legFuelDegrade", &self.legFuelDegrade());
      ds.field("legMach", &self.legMach());
      ds.field("legMsnIndex", &self.legMsnIndex());
      ds.field("legDragIndex", &self.legDragIndex());
      ds.field("avgCalAirspeed", &self.avgCalAirspeed());
      ds.field("avgTrueAirspeed", &self.avgTrueAirspeed());
      ds.field("avgGroundSpeed", &self.avgGroundSpeed());
      ds.field("priFreq", &self.priFreq());
      ds.field("pointWindDir", &self.pointWindDir());
      ds.field("pointWindSpeed", &self.pointWindSpeed());
      ds.field("avgWindDir", &self.avgWindDir());
      ds.field("avgWindSpeed", &self.avgWindSpeed());
      ds.field("legWindFac", &self.legWindFac());
      ds.field("avgDriftAng", &self.avgDriftAng());
      ds.field("secFreq", &self.secFreq());
      ds.field("magCourse", &self.magCourse());
      ds.field("trueCourse", &self.trueCourse());
      ds.field("magHeading", &self.magHeading());
      ds.field("aaTacanChannel", &self.aaTacanChannel());
      ds.field("zoneDistance", &self.zoneDistance());
      ds.field("totalFlownDistance", &self.totalFlownDistance());
      ds.field("totalRemDistance", &self.totalRemDistance());
      ds.field("zoneTime", &self.zoneTime());
      ds.field("totalTime", &self.totalTime());
      ds.field("totalTimeRem", &self.totalTimeRem());
      ds.field("zoneFuel", &self.zoneFuel());
      ds.field("totalUsedFuel", &self.totalUsedFuel());
      ds.field("totalRemFuel", &self.totalRemFuel());
      ds.field("exchangedFuel", &self.exchangedFuel());
      ds.field("airDistance", &self.airDistance());
      ds.field("totalAirDistance", &self.totalAirDistance());
      ds.field("totalWeight", &self.totalWeight());
      ds.field("eta", &self.eta());
      ds.field("ata", &self.ata());
      ds.field("fuelFlow", &self.fuelFlow());
      ds.field("legAlternate", &self.legAlternate());
      ds.field("magVar", &self.magVar());
      ds.field("dayLowAlt", &self.dayLowAlt());
      ds.field("nightLowAlt", &self.nightLowAlt());
      ds.field("nvgLowAlt", &self.nvgLowAlt());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FlightPlanWaypoints_IngestT {
  pub type_: Option<String>,
  pub waypointName: Option<String>,
  pub waypointNum: i32,
  pub airway: Option<String>,
  pub arpt: Option<String>,
  pub lat: f64,
  pub lon: f64,
  pub arId: Option<String>,
  pub navaid: Option<String>,
  pub tacanChannel: Option<String>,
  pub vorFreq: f64,
  pub turbCat: Option<String>,
  pub iceCat: Option<String>,
  pub thunderCat: Option<String>,
  pub alt: f64,
  pub tempDev: f64,
  pub legFuelDegrade: f64,
  pub legMach: f64,
  pub legMsnIndex: f64,
  pub legDragIndex: f64,
  pub avgCalAirspeed: f64,
  pub avgTrueAirspeed: f64,
  pub avgGroundSpeed: f64,
  pub priFreq: f64,
  pub pointWindDir: f64,
  pub pointWindSpeed: f64,
  pub avgWindDir: f64,
  pub avgWindSpeed: f64,
  pub legWindFac: f64,
  pub avgDriftAng: f64,
  pub secFreq: f64,
  pub magCourse: f64,
  pub trueCourse: f64,
  pub magHeading: f64,
  pub aaTacanChannel: Option<String>,
  pub zoneDistance: f64,
  pub totalFlownDistance: f64,
  pub totalRemDistance: f64,
  pub zoneTime: f64,
  pub totalTime: Option<String>,
  pub totalTimeRem: Option<String>,
  pub zoneFuel: f64,
  pub totalUsedFuel: f64,
  pub totalRemFuel: f64,
  pub exchangedFuel: f64,
  pub airDistance: f64,
  pub totalAirDistance: f64,
  pub totalWeight: f64,
  pub eta: Option<String>,
  pub ata: Option<String>,
  pub fuelFlow: f64,
  pub legAlternate: Option<String>,
  pub magVar: f64,
  pub dayLowAlt: f64,
  pub nightLowAlt: f64,
  pub nvgLowAlt: f64,
}
impl Default for FlightPlanWaypoints_IngestT {
  fn default() -> Self {
    Self {
      type_: None,
      waypointName: None,
      waypointNum: 0,
      airway: None,
      arpt: None,
      lat: 0.0,
      lon: 0.0,
      arId: None,
      navaid: None,
      tacanChannel: None,
      vorFreq: 0.0,
      turbCat: None,
      iceCat: None,
      thunderCat: None,
      alt: 0.0,
      tempDev: 0.0,
      legFuelDegrade: 0.0,
      legMach: 0.0,
      legMsnIndex: 0.0,
      legDragIndex: 0.0,
      avgCalAirspeed: 0.0,
      avgTrueAirspeed: 0.0,
      avgGroundSpeed: 0.0,
      priFreq: 0.0,
      pointWindDir: 0.0,
      pointWindSpeed: 0.0,
      avgWindDir: 0.0,
      avgWindSpeed: 0.0,
      legWindFac: 0.0,
      avgDriftAng: 0.0,
      secFreq: 0.0,
      magCourse: 0.0,
      trueCourse: 0.0,
      magHeading: 0.0,
      aaTacanChannel: None,
      zoneDistance: 0.0,
      totalFlownDistance: 0.0,
      totalRemDistance: 0.0,
      zoneTime: 0.0,
      totalTime: None,
      totalTimeRem: None,
      zoneFuel: 0.0,
      totalUsedFuel: 0.0,
      totalRemFuel: 0.0,
      exchangedFuel: 0.0,
      airDistance: 0.0,
      totalAirDistance: 0.0,
      totalWeight: 0.0,
      eta: None,
      ata: None,
      fuelFlow: 0.0,
      legAlternate: None,
      magVar: 0.0,
      dayLowAlt: 0.0,
      nightLowAlt: 0.0,
      nvgLowAlt: 0.0,
    }
  }
}
impl FlightPlanWaypoints_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FlightPlanWaypoints_Ingest<'b>> {
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let waypointName = self.waypointName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let waypointNum = self.waypointNum;
    let airway = self.airway.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arpt = self.arpt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lat = self.lat;
    let lon = self.lon;
    let arId = self.arId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let navaid = self.navaid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tacanChannel = self.tacanChannel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let vorFreq = self.vorFreq;
    let turbCat = self.turbCat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let iceCat = self.iceCat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let thunderCat = self.thunderCat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let alt = self.alt;
    let tempDev = self.tempDev;
    let legFuelDegrade = self.legFuelDegrade;
    let legMach = self.legMach;
    let legMsnIndex = self.legMsnIndex;
    let legDragIndex = self.legDragIndex;
    let avgCalAirspeed = self.avgCalAirspeed;
    let avgTrueAirspeed = self.avgTrueAirspeed;
    let avgGroundSpeed = self.avgGroundSpeed;
    let priFreq = self.priFreq;
    let pointWindDir = self.pointWindDir;
    let pointWindSpeed = self.pointWindSpeed;
    let avgWindDir = self.avgWindDir;
    let avgWindSpeed = self.avgWindSpeed;
    let legWindFac = self.legWindFac;
    let avgDriftAng = self.avgDriftAng;
    let secFreq = self.secFreq;
    let magCourse = self.magCourse;
    let trueCourse = self.trueCourse;
    let magHeading = self.magHeading;
    let aaTacanChannel = self.aaTacanChannel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zoneDistance = self.zoneDistance;
    let totalFlownDistance = self.totalFlownDistance;
    let totalRemDistance = self.totalRemDistance;
    let zoneTime = self.zoneTime;
    let totalTime = self.totalTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let totalTimeRem = self.totalTimeRem.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zoneFuel = self.zoneFuel;
    let totalUsedFuel = self.totalUsedFuel;
    let totalRemFuel = self.totalRemFuel;
    let exchangedFuel = self.exchangedFuel;
    let airDistance = self.airDistance;
    let totalAirDistance = self.totalAirDistance;
    let totalWeight = self.totalWeight;
    let eta = self.eta.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ata = self.ata.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fuelFlow = self.fuelFlow;
    let legAlternate = self.legAlternate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let magVar = self.magVar;
    let dayLowAlt = self.dayLowAlt;
    let nightLowAlt = self.nightLowAlt;
    let nvgLowAlt = self.nvgLowAlt;
    FlightPlanWaypoints_Ingest::create(_fbb, &FlightPlanWaypoints_IngestArgs{
      type_,
      waypointName,
      waypointNum,
      airway,
      arpt,
      lat,
      lon,
      arId,
      navaid,
      tacanChannel,
      vorFreq,
      turbCat,
      iceCat,
      thunderCat,
      alt,
      tempDev,
      legFuelDegrade,
      legMach,
      legMsnIndex,
      legDragIndex,
      avgCalAirspeed,
      avgTrueAirspeed,
      avgGroundSpeed,
      priFreq,
      pointWindDir,
      pointWindSpeed,
      avgWindDir,
      avgWindSpeed,
      legWindFac,
      avgDriftAng,
      secFreq,
      magCourse,
      trueCourse,
      magHeading,
      aaTacanChannel,
      zoneDistance,
      totalFlownDistance,
      totalRemDistance,
      zoneTime,
      totalTime,
      totalTimeRem,
      zoneFuel,
      totalUsedFuel,
      totalRemFuel,
      exchangedFuel,
      airDistance,
      totalAirDistance,
      totalWeight,
      eta,
      ata,
      fuelFlow,
      legAlternate,
      magVar,
      dayLowAlt,
      nightLowAlt,
      nvgLowAlt,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `FlightPlanWaypoints_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_waypoints_ingest_unchecked`.
pub fn root_as_flight_plan_waypoints_ingest(buf: &[u8]) -> Result<FlightPlanWaypoints_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FlightPlanWaypoints_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FlightPlanWaypoints_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_flight_plan_waypoints_ingest_unchecked`.
pub fn size_prefixed_root_as_flight_plan_waypoints_ingest(buf: &[u8]) -> Result<FlightPlanWaypoints_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FlightPlanWaypoints_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FlightPlanWaypoints_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_waypoints_ingest_unchecked`.
pub fn root_as_flight_plan_waypoints_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlightPlanWaypoints_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FlightPlanWaypoints_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FlightPlanWaypoints_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_waypoints_ingest_unchecked`.
pub fn size_prefixed_root_as_flight_plan_waypoints_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlightPlanWaypoints_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FlightPlanWaypoints_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FlightPlanWaypoints_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FlightPlanWaypoints_Ingest`.
pub unsafe fn root_as_flight_plan_waypoints_ingest_unchecked(buf: &[u8]) -> FlightPlanWaypoints_Ingest {
  flatbuffers::root_unchecked::<FlightPlanWaypoints_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FlightPlanWaypoints_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FlightPlanWaypoints_Ingest`.
pub unsafe fn size_prefixed_root_as_flight_plan_waypoints_ingest_unchecked(buf: &[u8]) -> FlightPlanWaypoints_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<FlightPlanWaypoints_Ingest>(buf)
}
pub const FLIGHT_PLAN_WAYPOINTS_INGEST_IDENTIFIER: &str = "FLIG";

#[inline]
pub fn flight_plan_waypoints_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FLIGHT_PLAN_WAYPOINTS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn flight_plan_waypoints_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FLIGHT_PLAN_WAYPOINTS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_flight_plan_waypoints_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<FlightPlanWaypoints_Ingest<'a>>) {
  fbb.finish(root, Some(FLIGHT_PLAN_WAYPOINTS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_flight_plan_waypoints_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<FlightPlanWaypoints_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(FLIGHT_PLAN_WAYPOINTS_INGEST_IDENTIFIER));
}
