// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TRACK_ROUTE_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TRACK_ROUTE_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TRACK_ROUTE_FULL_DATA_MODE_ENUM: [TrackRoute_Full_dataMode_Enum; 4] = [
  TrackRoute_Full_dataMode_Enum::REAL,
  TrackRoute_Full_dataMode_Enum::TEST,
  TrackRoute_Full_dataMode_Enum::SIMULATED,
  TrackRoute_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct TrackRoute_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl TrackRoute_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for TrackRoute_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for TrackRoute_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for TrackRoute_Full_dataMode_Enum {
    type Output = TrackRoute_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for TrackRoute_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for TrackRoute_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for TrackRoute_Full_dataMode_Enum {}
pub enum TrackRoute_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A track route is a prescribed route for performing training events or operations such as air refueling.
pub struct TrackRoute_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for TrackRoute_Full<'a> {
  type Inner = TrackRoute_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> TrackRoute_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 8;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 10;
  pub const VT_DIRECTION: flatbuffers::VOffsetT = 12;
  pub const VT_CREATINGORG: flatbuffers::VOffsetT = 14;
  pub const VT_LOCATIONTRACKID: flatbuffers::VOffsetT = 16;
  pub const VT_TRACKID: flatbuffers::VOffsetT = 18;
  pub const VT_TRACKNAME: flatbuffers::VOffsetT = 20;
  pub const VT_SHORTNAME: flatbuffers::VOffsetT = 22;
  pub const VT_TYPECODE: flatbuffers::VOffsetT = 24;
  pub const VT_REGIONCODE: flatbuffers::VOffsetT = 26;
  pub const VT_REGIONNAME: flatbuffers::VOffsetT = 28;
  pub const VT_APXBEACONCODE: flatbuffers::VOffsetT = 30;
  pub const VT_RECEIVERTANKERCHCODE: flatbuffers::VOffsetT = 32;
  pub const VT_APNSETTING: flatbuffers::VOffsetT = 34;
  pub const VT_SIC: flatbuffers::VOffsetT = 36;
  pub const VT_REVIEWDATE: flatbuffers::VOffsetT = 38;
  pub const VT_LASTUSEDDATE: flatbuffers::VOffsetT = 40;
  pub const VT_LASTUPDATEDATE: flatbuffers::VOffsetT = 42;
  pub const VT_PRIFREQ: flatbuffers::VOffsetT = 44;
  pub const VT_SECFREQ: flatbuffers::VOffsetT = 46;
  pub const VT_ARTCCMESSAGE: flatbuffers::VOffsetT = 48;
  pub const VT_SCHEDULERORGNAME: flatbuffers::VOffsetT = 50;
  pub const VT_SCHEDULERORGUNIT: flatbuffers::VOffsetT = 52;
  pub const VT_EFFECTIVEDATE: flatbuffers::VOffsetT = 54;
  pub const VT_ROUTEPOINTS: flatbuffers::VOffsetT = 56;
  pub const VT_ALTITUDEBLOCKS: flatbuffers::VOffsetT = 58;
  pub const VT_POC: flatbuffers::VOffsetT = 60;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 62;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 64;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 66;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 68;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 70;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 72;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 74;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 76;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 78;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    TrackRoute_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args TrackRoute_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<TrackRoute_Full<'bldr>> {
    let mut builder = TrackRoute_FullBuilder::new(_fbb);
    builder.add_secFreq(args.secFreq);
    builder.add_priFreq(args.priFreq);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.poc { builder.add_poc(x); }
    if let Some(x) = args.altitudeBlocks { builder.add_altitudeBlocks(x); }
    if let Some(x) = args.routePoints { builder.add_routePoints(x); }
    if let Some(x) = args.effectiveDate { builder.add_effectiveDate(x); }
    if let Some(x) = args.schedulerOrgUnit { builder.add_schedulerOrgUnit(x); }
    if let Some(x) = args.schedulerOrgName { builder.add_schedulerOrgName(x); }
    if let Some(x) = args.artccMessage { builder.add_artccMessage(x); }
    if let Some(x) = args.lastUpdateDate { builder.add_lastUpdateDate(x); }
    if let Some(x) = args.lastUsedDate { builder.add_lastUsedDate(x); }
    if let Some(x) = args.reviewDate { builder.add_reviewDate(x); }
    if let Some(x) = args.sic { builder.add_sic(x); }
    if let Some(x) = args.apnSetting { builder.add_apnSetting(x); }
    if let Some(x) = args.receiverTankerCHCode { builder.add_receiverTankerCHCode(x); }
    if let Some(x) = args.apxBeaconCode { builder.add_apxBeaconCode(x); }
    if let Some(x) = args.regionName { builder.add_regionName(x); }
    if let Some(x) = args.regionCode { builder.add_regionCode(x); }
    if let Some(x) = args.typeCode { builder.add_typeCode(x); }
    if let Some(x) = args.shortName { builder.add_shortName(x); }
    if let Some(x) = args.trackName { builder.add_trackName(x); }
    if let Some(x) = args.trackId { builder.add_trackId(x); }
    if let Some(x) = args.locationTrackId { builder.add_locationTrackId(x); }
    if let Some(x) = args.creatingOrg { builder.add_creatingOrg(x); }
    if let Some(x) = args.direction { builder.add_direction(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> TrackRoute_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let direction = self.direction().map(|x| {
      x.to_string()
    });
    let creatingOrg = self.creatingOrg().map(|x| {
      x.to_string()
    });
    let locationTrackId = self.locationTrackId().map(|x| {
      x.to_string()
    });
    let trackId = self.trackId().map(|x| {
      x.to_string()
    });
    let trackName = self.trackName().map(|x| {
      x.to_string()
    });
    let shortName = self.shortName().map(|x| {
      x.to_string()
    });
    let typeCode = self.typeCode().map(|x| {
      x.to_string()
    });
    let regionCode = self.regionCode().map(|x| {
      x.to_string()
    });
    let regionName = self.regionName().map(|x| {
      x.to_string()
    });
    let apxBeaconCode = self.apxBeaconCode().map(|x| {
      x.to_string()
    });
    let receiverTankerCHCode = self.receiverTankerCHCode().map(|x| {
      x.to_string()
    });
    let apnSetting = self.apnSetting().map(|x| {
      x.to_string()
    });
    let sic = self.sic().map(|x| {
      x.to_string()
    });
    let reviewDate = self.reviewDate().map(|x| {
      x.to_string()
    });
    let lastUsedDate = self.lastUsedDate().map(|x| {
      x.to_string()
    });
    let lastUpdateDate = self.lastUpdateDate().map(|x| {
      x.to_string()
    });
    let priFreq = self.priFreq();
    let secFreq = self.secFreq();
    let artccMessage = self.artccMessage().map(|x| {
      x.to_string()
    });
    let schedulerOrgName = self.schedulerOrgName().map(|x| {
      x.to_string()
    });
    let schedulerOrgUnit = self.schedulerOrgUnit().map(|x| {
      x.to_string()
    });
    let effectiveDate = self.effectiveDate().map(|x| {
      x.to_string()
    });
    let routePoints = self.routePoints().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let altitudeBlocks = self.altitudeBlocks().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let poc = self.poc().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    TrackRoute_FullT {
      id,
      classificationMarking,
      type_,
      externalId,
      direction,
      creatingOrg,
      locationTrackId,
      trackId,
      trackName,
      shortName,
      typeCode,
      regionCode,
      regionName,
      apxBeaconCode,
      receiverTankerCHCode,
      apnSetting,
      sic,
      reviewDate,
      lastUsedDate,
      lastUpdateDate,
      priFreq,
      secFreq,
      artccMessage,
      schedulerOrgName,
      schedulerOrgUnit,
      effectiveDate,
      routePoints,
      altitudeBlocks,
      poc,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The track route type represented by this record (ex. AIR REFUELING).
  /// Example: /// Example: AIR REFUELING
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_TYPE_, None)}
  }
  /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: GDSSMH121004232315303094
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_EXTERNALID, None)}
  }
  /// The principal compass direction (cardinal or ordinal) of the track route.
  /// Example: /// Example: NE
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn direction(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_DIRECTION, None)}
  }
  /// The name of the creating organization of the track route.
  /// Example: /// Example: HQPAC
  /// Constraints: Minimum length = 0, Maximum length = 250
  #[inline]
  pub fn creatingOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_CREATINGORG, None)}
  }
  /// Track location ID.
  /// Example: /// Example: POACHR
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn locationTrackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_LOCATIONTRACKID, None)}
  }
  /// Identifier of the track.
  /// Example: /// Example: CH61A
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_TRACKID, None)}
  }
  /// Name of the track.
  /// Example: /// Example: CH61 POST
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn trackName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_TRACKNAME, None)}
  }
  /// Abbreviated name of the track.
  /// Example: /// Example: CH61
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn shortName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_SHORTNAME, None)}
  }
  /// Type of process used by AMC to schedule an air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn typeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_TYPECODE, None)}
  }
  /// Region code indicating where the track resides as determined by the data source.
  /// Example: /// Example: 5
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn regionCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_REGIONCODE, None)}
  }
  /// Region where the track resides.
  /// Example: /// Example: North America
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn regionName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_REGIONNAME, None)}
  }
  /// The APX radar code sent and received by the aircraft for identification.
  /// Example: /// Example: 5/1
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn apxBeaconCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_APXBEACONCODE, None)}
  }
  /// The receiver tanker channel identifer for air refueling tracks.
  /// Example: /// Example: 31/094
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn receiverTankerCHCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_RECEIVERTANKERCHCODE, None)}
  }
  /// The APN radar code sent and received by the aircraft for identification.
  /// Example: /// Example: 1-3-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn apnSetting(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_APNSETTING, None)}
  }
  /// Standard Indicator Code of the air refueling track.
  /// Example: /// Example: N
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn sic(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_SIC, None)}
  }
  /// Date the track needs to be reviewed for accuracy or deletion in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-16T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reviewDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_REVIEWDATE, None)}
  }
  /// Used to show last time the track route was added to an itinerary in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-17T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lastUsedDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_LASTUSEDDATE, None)}
  }
  /// The last updated date of the track route in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-17T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lastUpdateDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_LASTUPDATEDATE, None)}
  }
  /// The primary UHF radio frequency used for the track route in megahertz.
  /// Example: /// Example: 357.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn priFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(TrackRoute_Full::VT_PRIFREQ, Some(0.0)).unwrap()}
  }
  /// The secondary UHF radio frequency used for the track route in megahertz.
  /// Example: /// Example: 319.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn secFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(TrackRoute_Full::VT_SECFREQ, Some(0.0)).unwrap()}
  }
  /// Air Refueling Track Control Center message.
  /// Example: /// Example: OAKLAND CTR/GUAM CERAP
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn artccMessage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_ARTCCMESSAGE, None)}
  }
  /// Point of contact for the air refueling track route scheduler.
  /// Example: /// Example: 97 OSS/OSOS DSN 866-5555
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn schedulerOrgName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_SCHEDULERORGNAME, None)}
  }
  /// The unit responsible for scheduling the track route.
  /// Example: /// Example: 612 AOC
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn schedulerOrgUnit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_SCHEDULERORGUNIT, None)}
  }
  /// The date which the DAFIF track was last updated/validated in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-09-17T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn effectiveDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_EFFECTIVEDATE, None)}
  }
  /// Points identified within the route.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn routePoints(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TrackRoute_Full::VT_ROUTEPOINTS, None)}
  }
  /// Minimum and maximum altitude bounds for the track.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn altitudeBlocks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TrackRoute_Full::VT_ALTITUDEBLOCKS, None)}
  }
  /// Point of contacts for scheduling or modifying the route.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn poc(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(TrackRoute_Full::VT_POC, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_UPDATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(TrackRoute_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> TrackRoute_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<TrackRoute_Full_dataMode_Enum>(TrackRoute_Full::VT_DATAMODE, Some(TrackRoute_Full_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for TrackRoute_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("direction", Self::VT_DIRECTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("creatingOrg", Self::VT_CREATINGORG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("locationTrackId", Self::VT_LOCATIONTRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trackId", Self::VT_TRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trackName", Self::VT_TRACKNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shortName", Self::VT_SHORTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("typeCode", Self::VT_TYPECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("regionCode", Self::VT_REGIONCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("regionName", Self::VT_REGIONNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apxBeaconCode", Self::VT_APXBEACONCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverTankerCHCode", Self::VT_RECEIVERTANKERCHCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apnSetting", Self::VT_APNSETTING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sic", Self::VT_SIC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reviewDate", Self::VT_REVIEWDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastUsedDate", Self::VT_LASTUSEDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastUpdateDate", Self::VT_LASTUPDATEDATE, false)?
     .visit_field::<f64>("priFreq", Self::VT_PRIFREQ, false)?
     .visit_field::<f64>("secFreq", Self::VT_SECFREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("artccMessage", Self::VT_ARTCCMESSAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("schedulerOrgName", Self::VT_SCHEDULERORGNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("schedulerOrgUnit", Self::VT_SCHEDULERORGUNIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("effectiveDate", Self::VT_EFFECTIVEDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("routePoints", Self::VT_ROUTEPOINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("altitudeBlocks", Self::VT_ALTITUDEBLOCKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("poc", Self::VT_POC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<TrackRoute_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct TrackRoute_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub direction: Option<flatbuffers::WIPOffset<&'a str>>,
    pub creatingOrg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub locationTrackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub shortName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub typeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub regionCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub regionName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub apxBeaconCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverTankerCHCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub apnSetting: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sic: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reviewDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastUsedDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastUpdateDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub priFreq: f64,
    pub secFreq: f64,
    pub artccMessage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub schedulerOrgName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub schedulerOrgUnit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub effectiveDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub routePoints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub altitudeBlocks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub poc: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: TrackRoute_Full_dataMode_Enum,
}
impl<'a> Default for TrackRoute_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    TrackRoute_FullArgs {
      id: None,
      classificationMarking: None,
      type_: None,
      externalId: None,
      direction: None,
      creatingOrg: None,
      locationTrackId: None,
      trackId: None,
      trackName: None,
      shortName: None,
      typeCode: None,
      regionCode: None,
      regionName: None,
      apxBeaconCode: None,
      receiverTankerCHCode: None,
      apnSetting: None,
      sic: None,
      reviewDate: None,
      lastUsedDate: None,
      lastUpdateDate: None,
      priFreq: 0.0,
      secFreq: 0.0,
      artccMessage: None,
      schedulerOrgName: None,
      schedulerOrgUnit: None,
      effectiveDate: None,
      routePoints: None,
      altitudeBlocks: None,
      poc: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: TrackRoute_Full_dataMode_Enum::REAL,
    }
  }
}

pub struct TrackRoute_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> TrackRoute_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_direction(&mut self, direction: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_DIRECTION, direction);
  }
  #[inline]
  pub fn add_creatingOrg(&mut self, creatingOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_CREATINGORG, creatingOrg);
  }
  #[inline]
  pub fn add_locationTrackId(&mut self, locationTrackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_LOCATIONTRACKID, locationTrackId);
  }
  #[inline]
  pub fn add_trackId(&mut self, trackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_TRACKID, trackId);
  }
  #[inline]
  pub fn add_trackName(&mut self, trackName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_TRACKNAME, trackName);
  }
  #[inline]
  pub fn add_shortName(&mut self, shortName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_SHORTNAME, shortName);
  }
  #[inline]
  pub fn add_typeCode(&mut self, typeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_TYPECODE, typeCode);
  }
  #[inline]
  pub fn add_regionCode(&mut self, regionCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_REGIONCODE, regionCode);
  }
  #[inline]
  pub fn add_regionName(&mut self, regionName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_REGIONNAME, regionName);
  }
  #[inline]
  pub fn add_apxBeaconCode(&mut self, apxBeaconCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_APXBEACONCODE, apxBeaconCode);
  }
  #[inline]
  pub fn add_receiverTankerCHCode(&mut self, receiverTankerCHCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_RECEIVERTANKERCHCODE, receiverTankerCHCode);
  }
  #[inline]
  pub fn add_apnSetting(&mut self, apnSetting: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_APNSETTING, apnSetting);
  }
  #[inline]
  pub fn add_sic(&mut self, sic: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_SIC, sic);
  }
  #[inline]
  pub fn add_reviewDate(&mut self, reviewDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_REVIEWDATE, reviewDate);
  }
  #[inline]
  pub fn add_lastUsedDate(&mut self, lastUsedDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_LASTUSEDDATE, lastUsedDate);
  }
  #[inline]
  pub fn add_lastUpdateDate(&mut self, lastUpdateDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_LASTUPDATEDATE, lastUpdateDate);
  }
  #[inline]
  pub fn add_priFreq(&mut self, priFreq: f64) {
    self.fbb_.push_slot::<f64>(TrackRoute_Full::VT_PRIFREQ, priFreq, 0.0);
  }
  #[inline]
  pub fn add_secFreq(&mut self, secFreq: f64) {
    self.fbb_.push_slot::<f64>(TrackRoute_Full::VT_SECFREQ, secFreq, 0.0);
  }
  #[inline]
  pub fn add_artccMessage(&mut self, artccMessage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_ARTCCMESSAGE, artccMessage);
  }
  #[inline]
  pub fn add_schedulerOrgName(&mut self, schedulerOrgName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_SCHEDULERORGNAME, schedulerOrgName);
  }
  #[inline]
  pub fn add_schedulerOrgUnit(&mut self, schedulerOrgUnit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_SCHEDULERORGUNIT, schedulerOrgUnit);
  }
  #[inline]
  pub fn add_effectiveDate(&mut self, effectiveDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_EFFECTIVEDATE, effectiveDate);
  }
  #[inline]
  pub fn add_routePoints(&mut self, routePoints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_ROUTEPOINTS, routePoints);
  }
  #[inline]
  pub fn add_altitudeBlocks(&mut self, altitudeBlocks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_ALTITUDEBLOCKS, altitudeBlocks);
  }
  #[inline]
  pub fn add_poc(&mut self, poc: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_POC, poc);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(TrackRoute_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: TrackRoute_Full_dataMode_Enum) {
    self.fbb_.push_slot::<TrackRoute_Full_dataMode_Enum>(TrackRoute_Full::VT_DATAMODE, dataMode, TrackRoute_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> TrackRoute_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    TrackRoute_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<TrackRoute_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for TrackRoute_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("TrackRoute_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("type_", &self.type_());
      ds.field("externalId", &self.externalId());
      ds.field("direction", &self.direction());
      ds.field("creatingOrg", &self.creatingOrg());
      ds.field("locationTrackId", &self.locationTrackId());
      ds.field("trackId", &self.trackId());
      ds.field("trackName", &self.trackName());
      ds.field("shortName", &self.shortName());
      ds.field("typeCode", &self.typeCode());
      ds.field("regionCode", &self.regionCode());
      ds.field("regionName", &self.regionName());
      ds.field("apxBeaconCode", &self.apxBeaconCode());
      ds.field("receiverTankerCHCode", &self.receiverTankerCHCode());
      ds.field("apnSetting", &self.apnSetting());
      ds.field("sic", &self.sic());
      ds.field("reviewDate", &self.reviewDate());
      ds.field("lastUsedDate", &self.lastUsedDate());
      ds.field("lastUpdateDate", &self.lastUpdateDate());
      ds.field("priFreq", &self.priFreq());
      ds.field("secFreq", &self.secFreq());
      ds.field("artccMessage", &self.artccMessage());
      ds.field("schedulerOrgName", &self.schedulerOrgName());
      ds.field("schedulerOrgUnit", &self.schedulerOrgUnit());
      ds.field("effectiveDate", &self.effectiveDate());
      ds.field("routePoints", &self.routePoints());
      ds.field("altitudeBlocks", &self.altitudeBlocks());
      ds.field("poc", &self.poc());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct TrackRoute_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub type_: Option<String>,
  pub externalId: Option<String>,
  pub direction: Option<String>,
  pub creatingOrg: Option<String>,
  pub locationTrackId: Option<String>,
  pub trackId: Option<String>,
  pub trackName: Option<String>,
  pub shortName: Option<String>,
  pub typeCode: Option<String>,
  pub regionCode: Option<String>,
  pub regionName: Option<String>,
  pub apxBeaconCode: Option<String>,
  pub receiverTankerCHCode: Option<String>,
  pub apnSetting: Option<String>,
  pub sic: Option<String>,
  pub reviewDate: Option<String>,
  pub lastUsedDate: Option<String>,
  pub lastUpdateDate: Option<String>,
  pub priFreq: f64,
  pub secFreq: f64,
  pub artccMessage: Option<String>,
  pub schedulerOrgName: Option<String>,
  pub schedulerOrgUnit: Option<String>,
  pub effectiveDate: Option<String>,
  pub routePoints: Option<Vec<String>>,
  pub altitudeBlocks: Option<Vec<String>>,
  pub poc: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: TrackRoute_Full_dataMode_Enum,
}
impl Default for TrackRoute_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      type_: None,
      externalId: None,
      direction: None,
      creatingOrg: None,
      locationTrackId: None,
      trackId: None,
      trackName: None,
      shortName: None,
      typeCode: None,
      regionCode: None,
      regionName: None,
      apxBeaconCode: None,
      receiverTankerCHCode: None,
      apnSetting: None,
      sic: None,
      reviewDate: None,
      lastUsedDate: None,
      lastUpdateDate: None,
      priFreq: 0.0,
      secFreq: 0.0,
      artccMessage: None,
      schedulerOrgName: None,
      schedulerOrgUnit: None,
      effectiveDate: None,
      routePoints: None,
      altitudeBlocks: None,
      poc: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: TrackRoute_Full_dataMode_Enum::REAL,
    }
  }
}
impl TrackRoute_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<TrackRoute_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let direction = self.direction.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let creatingOrg = self.creatingOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let locationTrackId = self.locationTrackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackId = self.trackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackName = self.trackName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let shortName = self.shortName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let typeCode = self.typeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let regionCode = self.regionCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let regionName = self.regionName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let apxBeaconCode = self.apxBeaconCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverTankerCHCode = self.receiverTankerCHCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let apnSetting = self.apnSetting.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sic = self.sic.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reviewDate = self.reviewDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastUsedDate = self.lastUsedDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastUpdateDate = self.lastUpdateDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let priFreq = self.priFreq;
    let secFreq = self.secFreq;
    let artccMessage = self.artccMessage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let schedulerOrgName = self.schedulerOrgName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let schedulerOrgUnit = self.schedulerOrgUnit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let effectiveDate = self.effectiveDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let routePoints = self.routePoints.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let altitudeBlocks = self.altitudeBlocks.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let poc = self.poc.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    TrackRoute_Full::create(_fbb, &TrackRoute_FullArgs{
      id,
      classificationMarking,
      type_,
      externalId,
      direction,
      creatingOrg,
      locationTrackId,
      trackId,
      trackName,
      shortName,
      typeCode,
      regionCode,
      regionName,
      apxBeaconCode,
      receiverTankerCHCode,
      apnSetting,
      sic,
      reviewDate,
      lastUsedDate,
      lastUpdateDate,
      priFreq,
      secFreq,
      artccMessage,
      schedulerOrgName,
      schedulerOrgUnit,
      effectiveDate,
      routePoints,
      altitudeBlocks,
      poc,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `TrackRoute_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_track_route_full_unchecked`.
pub fn root_as_track_route_full(buf: &[u8]) -> Result<TrackRoute_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<TrackRoute_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `TrackRoute_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_track_route_full_unchecked`.
pub fn size_prefixed_root_as_track_route_full(buf: &[u8]) -> Result<TrackRoute_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<TrackRoute_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `TrackRoute_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_track_route_full_unchecked`.
pub fn root_as_track_route_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TrackRoute_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<TrackRoute_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `TrackRoute_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_track_route_full_unchecked`.
pub fn size_prefixed_root_as_track_route_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<TrackRoute_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<TrackRoute_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a TrackRoute_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `TrackRoute_Full`.
pub unsafe fn root_as_track_route_full_unchecked(buf: &[u8]) -> TrackRoute_Full {
  flatbuffers::root_unchecked::<TrackRoute_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed TrackRoute_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `TrackRoute_Full`.
pub unsafe fn size_prefixed_root_as_track_route_full_unchecked(buf: &[u8]) -> TrackRoute_Full {
  flatbuffers::size_prefixed_root_unchecked::<TrackRoute_Full>(buf)
}
pub const TRACK_ROUTE_FULL_IDENTIFIER: &str = "TRAC";

#[inline]
pub fn track_route_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, TRACK_ROUTE_FULL_IDENTIFIER, false)
}

#[inline]
pub fn track_route_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, TRACK_ROUTE_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_track_route_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<TrackRoute_Full<'a>>) {
  fbb.finish(root, Some(TRACK_ROUTE_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_track_route_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<TrackRoute_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(TRACK_ROUTE_FULL_IDENTIFIER));
}
