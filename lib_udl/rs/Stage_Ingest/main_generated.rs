// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_STAGE_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_STAGE_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STAGE_INGEST_DATA_MODE_ENUM: [Stage_Ingest_dataMode_Enum; 4] = [
  Stage_Ingest_dataMode_Enum::REAL,
  Stage_Ingest_dataMode_Enum::TEST,
  Stage_Ingest_dataMode_Enum::SIMULATED,
  Stage_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Stage_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Stage_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Stage_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Stage_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Stage_Ingest_dataMode_Enum {
    type Output = Stage_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Stage_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Stage_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Stage_Ingest_dataMode_Enum {}
pub enum Stage_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Launch stage information for a particular launch vehicle. A launch vehicle can have several stages, each with 1 to many engines.
pub struct Stage_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Stage_Ingest<'a> {
  type Inner = Stage_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Stage_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDLAUNCHVEHICLE: flatbuffers::VOffsetT = 6;
  pub const VT_IDENGINE: flatbuffers::VOffsetT = 8;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 10;
  pub const VT_STAGENUMBER: flatbuffers::VOffsetT = 12;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 14;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 16;
  pub const VT_NUMENGINES: flatbuffers::VOffsetT = 18;
  pub const VT_LENGTH: flatbuffers::VOffsetT = 20;
  pub const VT_DIAMETER: flatbuffers::VOffsetT = 22;
  pub const VT_MASS: flatbuffers::VOffsetT = 24;
  pub const VT_VERNIER: flatbuffers::VOffsetT = 26;
  pub const VT_NUMVERNIER: flatbuffers::VOffsetT = 28;
  pub const VT_MAINENGINETHRUSTSEALEVEL: flatbuffers::VOffsetT = 30;
  pub const VT_MAINENGINETHRUSTVACUUM: flatbuffers::VOffsetT = 32;
  pub const VT_THRUSTSEALEVEL: flatbuffers::VOffsetT = 34;
  pub const VT_THRUSTVACUUM: flatbuffers::VOffsetT = 36;
  pub const VT_BURNTIME: flatbuffers::VOffsetT = 38;
  pub const VT_NUMBURNS: flatbuffers::VOffsetT = 40;
  pub const VT_VERNIERBURNTIME: flatbuffers::VOffsetT = 42;
  pub const VT_VERNIERNUMBURNS: flatbuffers::VOffsetT = 44;
  pub const VT_VERNIERTHRUSTSEALEVEL: flatbuffers::VOffsetT = 46;
  pub const VT_VERNIERTHRUSTVACUUM: flatbuffers::VOffsetT = 48;
  pub const VT_NUMSTAGEELEMENTS: flatbuffers::VOffsetT = 50;
  pub const VT_REUSABLE: flatbuffers::VOffsetT = 52;
  pub const VT_RESTARTABLE: flatbuffers::VOffsetT = 54;
  pub const VT_CONTROLTHRUSTER1: flatbuffers::VOffsetT = 56;
  pub const VT_NUMCONTROLTHRUSTER1: flatbuffers::VOffsetT = 58;
  pub const VT_CONTROLTHRUSTER2: flatbuffers::VOffsetT = 60;
  pub const VT_NUMCONTROLTHRUSTER2: flatbuffers::VOffsetT = 62;
  pub const VT_PHOTOURLS: flatbuffers::VOffsetT = 64;
  pub const VT_NOTES: flatbuffers::VOffsetT = 66;
  pub const VT_AVIONICSNOTES: flatbuffers::VOffsetT = 68;
  pub const VT_TAGS: flatbuffers::VOffsetT = 70;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 74;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 76;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 78;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 80;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 82;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Stage_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Stage_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<Stage_Ingest<'bldr>> {
    let mut builder = Stage_IngestBuilder::new(_fbb);
    builder.add_vernierThrustVacuum(args.vernierThrustVacuum);
    builder.add_vernierThrustSeaLevel(args.vernierThrustSeaLevel);
    builder.add_vernierBurnTime(args.vernierBurnTime);
    builder.add_burnTime(args.burnTime);
    builder.add_thrustVacuum(args.thrustVacuum);
    builder.add_thrustSeaLevel(args.thrustSeaLevel);
    builder.add_mainEngineThrustVacuum(args.mainEngineThrustVacuum);
    builder.add_mainEngineThrustSeaLevel(args.mainEngineThrustSeaLevel);
    builder.add_mass(args.mass);
    builder.add_diameter(args.diameter);
    builder.add_length(args.length);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.avionicsNotes { builder.add_avionicsNotes(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.photoURLs { builder.add_photoURLs(x); }
    builder.add_numControlThruster2(args.numControlThruster2);
    if let Some(x) = args.controlThruster2 { builder.add_controlThruster2(x); }
    builder.add_numControlThruster1(args.numControlThruster1);
    if let Some(x) = args.controlThruster1 { builder.add_controlThruster1(x); }
    builder.add_numStageElements(args.numStageElements);
    builder.add_vernierNumBurns(args.vernierNumBurns);
    builder.add_numBurns(args.numBurns);
    builder.add_numVernier(args.numVernier);
    if let Some(x) = args.vernier { builder.add_vernier(x); }
    builder.add_numEngines(args.numEngines);
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.add_stageNumber(args.stageNumber);
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idEngine { builder.add_idEngine(x); }
    if let Some(x) = args.idLaunchVehicle { builder.add_idLaunchVehicle(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_restartable(args.restartable);
    builder.add_reusable(args.reusable);
    builder.finish()
  }

  pub fn unpack(&self) -> Stage_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idLaunchVehicle = self.idLaunchVehicle().map(|x| {
      x.to_string()
    });
    let idEngine = self.idEngine().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let stageNumber = self.stageNumber();
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let numEngines = self.numEngines();
    let length = self.length();
    let diameter = self.diameter();
    let mass = self.mass();
    let vernier = self.vernier().map(|x| {
      x.to_string()
    });
    let numVernier = self.numVernier();
    let mainEngineThrustSeaLevel = self.mainEngineThrustSeaLevel();
    let mainEngineThrustVacuum = self.mainEngineThrustVacuum();
    let thrustSeaLevel = self.thrustSeaLevel();
    let thrustVacuum = self.thrustVacuum();
    let burnTime = self.burnTime();
    let numBurns = self.numBurns();
    let vernierBurnTime = self.vernierBurnTime();
    let vernierNumBurns = self.vernierNumBurns();
    let vernierThrustSeaLevel = self.vernierThrustSeaLevel();
    let vernierThrustVacuum = self.vernierThrustVacuum();
    let numStageElements = self.numStageElements();
    let reusable = self.reusable();
    let restartable = self.restartable();
    let controlThruster1 = self.controlThruster1().map(|x| {
      x.to_string()
    });
    let numControlThruster1 = self.numControlThruster1();
    let controlThruster2 = self.controlThruster2().map(|x| {
      x.to_string()
    });
    let numControlThruster2 = self.numControlThruster2();
    let photoURLs = self.photoURLs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let avionicsNotes = self.avionicsNotes().map(|x| {
      x.to_string()
    });
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    Stage_IngestT {
      id,
      idLaunchVehicle,
      idEngine,
      classificationMarking,
      stageNumber,
      type_,
      manufacturerOrgId,
      numEngines,
      length,
      diameter,
      mass,
      vernier,
      numVernier,
      mainEngineThrustSeaLevel,
      mainEngineThrustVacuum,
      thrustSeaLevel,
      thrustVacuum,
      burnTime,
      numBurns,
      vernierBurnTime,
      vernierNumBurns,
      vernierThrustSeaLevel,
      vernierThrustVacuum,
      numStageElements,
      reusable,
      restartable,
      controlThruster1,
      numControlThruster1,
      controlThruster2,
      numControlThruster2,
      photoURLs,
      notes,
      avionicsNotes,
      tags,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: STAGE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_ID, None)}
  }
  /// Identifier of the launch vehicle record for this stage.
  /// Example: /// Example: LAUNCHVEHICLE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idLaunchVehicle(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_IDLAUNCHVEHICLE, None)}
  }
  /// Identifier of the Engine record for this stage.
  /// Example: /// Example: ENGINE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idEngine(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_IDENGINE, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The stage number of this launch stage.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn stageNumber(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_STAGENUMBER, Some(0)).unwrap()}
  }
  /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  /// Example: /// Example: Electrostatic Ion
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_TYPE_, None)}
  }
  /// ID of the organization that manufactures this launch stage.
  /// Example: /// Example: 5feed5d7-d131-57e5-a3fd-acc173bca736
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_MANUFACTURERORGID, None)}
  }
  /// The number of the specified engines on this launch stage.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numEngines(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_NUMENGINES, Some(0)).unwrap()}
  }
  /// Stage length in meters.
  /// Example: /// Example: 25.13
  /// Constraints: No constraints specified.
  #[inline]
  pub fn length(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_LENGTH, Some(0.0)).unwrap()}
  }
  /// Stage maximum external diameter in meters.
  /// Example: /// Example: 3.95
  /// Constraints: No constraints specified.
  #[inline]
  pub fn diameter(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_DIAMETER, Some(0.0)).unwrap()}
  }
  /// Stage gross mass in kg.
  /// Example: /// Example: 9956.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_MASS, Some(0.0)).unwrap()}
  }
  /// Engine vernier or additional engine type.
  /// Example: /// Example: vernier
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn vernier(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_VERNIER, None)}
  }
  /// Number of vernier or additional engines.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numVernier(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_NUMVERNIER, Some(0)).unwrap()}
  }
  /// Thrust of the stage main engine at sea level in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mainEngineThrustSeaLevel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_MAINENGINETHRUSTSEALEVEL, Some(0.0)).unwrap()}
  }
  /// Thrust of the stage main engine in a vacuum in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mainEngineThrustVacuum(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_MAINENGINETHRUSTVACUUM, Some(0.0)).unwrap()}
  }
  /// Total thrust of the stage at sea level in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn thrustSeaLevel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_THRUSTSEALEVEL, Some(0.0)).unwrap()}
  }
  /// Total thrust of the stage in a vacuum in kN.
  /// Example: /// Example: 733.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn thrustVacuum(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_THRUSTVACUUM, Some(0.0)).unwrap()}
  }
  /// Total burn time of the stage engines in seconds.
  /// Example: /// Example: 256.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn burnTime(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_BURNTIME, Some(0.0)).unwrap()}
  }
  /// Number of burns for the stage engines.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numBurns(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_NUMBURNS, Some(0)).unwrap()}
  }
  /// Total burn time of the vernier or additional stage engines in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vernierBurnTime(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_VERNIERBURNTIME, Some(0.0)).unwrap()}
  }
  /// Total number of burns of the vernier or additional stage engines.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vernierNumBurns(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_VERNIERNUMBURNS, Some(0)).unwrap()}
  }
  /// Total thrust of one of the vernier or additional engines at sea level in kN.
  /// Example: /// Example: 4.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vernierThrustSeaLevel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_VERNIERTHRUSTSEALEVEL, Some(0.0)).unwrap()}
  }
  /// Total thrust of one of the vernier or additional engines in a vacuum in kN.
  /// Example: /// Example: 3.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vernierThrustVacuum(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Stage_Ingest::VT_VERNIERTHRUSTVACUUM, Some(0.0)).unwrap()}
  }
  /// Number of launch stage elements used in this stage.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numStageElements(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_NUMSTAGEELEMENTS, Some(0)).unwrap()}
  }
  /// Boolean indicating if this launch stage is reusable.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reusable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Stage_Ingest::VT_REUSABLE, Some(false)).unwrap()}
  }
  /// Boolean indicating if this launch stage can be restarted.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn restartable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Stage_Ingest::VT_RESTARTABLE, Some(false)).unwrap()}
  }
  /// Control thruster 1 type.
  /// Example: /// Example: controlThruster1
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn controlThruster1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_CONTROLTHRUSTER1, None)}
  }
  /// Number of type control thruster 1.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numControlThruster1(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_NUMCONTROLTHRUSTER1, Some(0)).unwrap()}
  }
  /// Control thruster 2 type.
  /// Example: /// Example: controlThruster2
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn controlThruster2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_CONTROLTHRUSTER2, None)}
  }
  /// Number of type control thruster 2.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numControlThruster2(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Stage_Ingest::VT_NUMCONTROLTHRUSTER2, Some(0)).unwrap()}
  }
  /// Array of URLs of photos of the stage.
  /// Example: /// Example: ['photoURL']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn photoURLs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Stage_Ingest::VT_PHOTOURLS, None)}
  }
  /// Description/notes of the stage.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_NOTES, None)}
  }
  /// Description/notes of the stage avionics.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn avionicsNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_AVIONICSNOTES, None)}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Stage_Ingest::VT_TAGS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Stage_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Stage_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Stage_Ingest_dataMode_Enum>(Stage_Ingest::VT_DATAMODE, Some(Stage_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Stage_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idLaunchVehicle", Self::VT_IDLAUNCHVEHICLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idEngine", Self::VT_IDENGINE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<i32>("stageNumber", Self::VT_STAGENUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<i32>("numEngines", Self::VT_NUMENGINES, false)?
     .visit_field::<f64>("length", Self::VT_LENGTH, false)?
     .visit_field::<f64>("diameter", Self::VT_DIAMETER, false)?
     .visit_field::<f64>("mass", Self::VT_MASS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("vernier", Self::VT_VERNIER, false)?
     .visit_field::<i32>("numVernier", Self::VT_NUMVERNIER, false)?
     .visit_field::<f64>("mainEngineThrustSeaLevel", Self::VT_MAINENGINETHRUSTSEALEVEL, false)?
     .visit_field::<f64>("mainEngineThrustVacuum", Self::VT_MAINENGINETHRUSTVACUUM, false)?
     .visit_field::<f64>("thrustSeaLevel", Self::VT_THRUSTSEALEVEL, false)?
     .visit_field::<f64>("thrustVacuum", Self::VT_THRUSTVACUUM, false)?
     .visit_field::<f64>("burnTime", Self::VT_BURNTIME, false)?
     .visit_field::<i32>("numBurns", Self::VT_NUMBURNS, false)?
     .visit_field::<f64>("vernierBurnTime", Self::VT_VERNIERBURNTIME, false)?
     .visit_field::<i32>("vernierNumBurns", Self::VT_VERNIERNUMBURNS, false)?
     .visit_field::<f64>("vernierThrustSeaLevel", Self::VT_VERNIERTHRUSTSEALEVEL, false)?
     .visit_field::<f64>("vernierThrustVacuum", Self::VT_VERNIERTHRUSTVACUUM, false)?
     .visit_field::<i32>("numStageElements", Self::VT_NUMSTAGEELEMENTS, false)?
     .visit_field::<bool>("reusable", Self::VT_REUSABLE, false)?
     .visit_field::<bool>("restartable", Self::VT_RESTARTABLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("controlThruster1", Self::VT_CONTROLTHRUSTER1, false)?
     .visit_field::<i32>("numControlThruster1", Self::VT_NUMCONTROLTHRUSTER1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("controlThruster2", Self::VT_CONTROLTHRUSTER2, false)?
     .visit_field::<i32>("numControlThruster2", Self::VT_NUMCONTROLTHRUSTER2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("photoURLs", Self::VT_PHOTOURLS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("avionicsNotes", Self::VT_AVIONICSNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<Stage_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct Stage_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idLaunchVehicle: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idEngine: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub stageNumber: i32,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numEngines: i32,
    pub length: f64,
    pub diameter: f64,
    pub mass: f64,
    pub vernier: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numVernier: i32,
    pub mainEngineThrustSeaLevel: f64,
    pub mainEngineThrustVacuum: f64,
    pub thrustSeaLevel: f64,
    pub thrustVacuum: f64,
    pub burnTime: f64,
    pub numBurns: i32,
    pub vernierBurnTime: f64,
    pub vernierNumBurns: i32,
    pub vernierThrustSeaLevel: f64,
    pub vernierThrustVacuum: f64,
    pub numStageElements: i32,
    pub reusable: bool,
    pub restartable: bool,
    pub controlThruster1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numControlThruster1: i32,
    pub controlThruster2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numControlThruster2: i32,
    pub photoURLs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub avionicsNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Stage_Ingest_dataMode_Enum,
}
impl<'a> Default for Stage_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    Stage_IngestArgs {
      id: None,
      idLaunchVehicle: None,
      idEngine: None,
      classificationMarking: None,
      stageNumber: 0,
      type_: None,
      manufacturerOrgId: None,
      numEngines: 0,
      length: 0.0,
      diameter: 0.0,
      mass: 0.0,
      vernier: None,
      numVernier: 0,
      mainEngineThrustSeaLevel: 0.0,
      mainEngineThrustVacuum: 0.0,
      thrustSeaLevel: 0.0,
      thrustVacuum: 0.0,
      burnTime: 0.0,
      numBurns: 0,
      vernierBurnTime: 0.0,
      vernierNumBurns: 0,
      vernierThrustSeaLevel: 0.0,
      vernierThrustVacuum: 0.0,
      numStageElements: 0,
      reusable: false,
      restartable: false,
      controlThruster1: None,
      numControlThruster1: 0,
      controlThruster2: None,
      numControlThruster2: 0,
      photoURLs: None,
      notes: None,
      avionicsNotes: None,
      tags: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Stage_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct Stage_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Stage_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_idLaunchVehicle(&mut self, idLaunchVehicle: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_IDLAUNCHVEHICLE, idLaunchVehicle);
  }
  #[inline]
  pub fn add_idEngine(&mut self, idEngine: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_IDENGINE, idEngine);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_stageNumber(&mut self, stageNumber: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_STAGENUMBER, stageNumber, 0);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_numEngines(&mut self, numEngines: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_NUMENGINES, numEngines, 0);
  }
  #[inline]
  pub fn add_length(&mut self, length: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_LENGTH, length, 0.0);
  }
  #[inline]
  pub fn add_diameter(&mut self, diameter: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_DIAMETER, diameter, 0.0);
  }
  #[inline]
  pub fn add_mass(&mut self, mass: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_MASS, mass, 0.0);
  }
  #[inline]
  pub fn add_vernier(&mut self, vernier: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_VERNIER, vernier);
  }
  #[inline]
  pub fn add_numVernier(&mut self, numVernier: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_NUMVERNIER, numVernier, 0);
  }
  #[inline]
  pub fn add_mainEngineThrustSeaLevel(&mut self, mainEngineThrustSeaLevel: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_MAINENGINETHRUSTSEALEVEL, mainEngineThrustSeaLevel, 0.0);
  }
  #[inline]
  pub fn add_mainEngineThrustVacuum(&mut self, mainEngineThrustVacuum: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_MAINENGINETHRUSTVACUUM, mainEngineThrustVacuum, 0.0);
  }
  #[inline]
  pub fn add_thrustSeaLevel(&mut self, thrustSeaLevel: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_THRUSTSEALEVEL, thrustSeaLevel, 0.0);
  }
  #[inline]
  pub fn add_thrustVacuum(&mut self, thrustVacuum: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_THRUSTVACUUM, thrustVacuum, 0.0);
  }
  #[inline]
  pub fn add_burnTime(&mut self, burnTime: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_BURNTIME, burnTime, 0.0);
  }
  #[inline]
  pub fn add_numBurns(&mut self, numBurns: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_NUMBURNS, numBurns, 0);
  }
  #[inline]
  pub fn add_vernierBurnTime(&mut self, vernierBurnTime: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_VERNIERBURNTIME, vernierBurnTime, 0.0);
  }
  #[inline]
  pub fn add_vernierNumBurns(&mut self, vernierNumBurns: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_VERNIERNUMBURNS, vernierNumBurns, 0);
  }
  #[inline]
  pub fn add_vernierThrustSeaLevel(&mut self, vernierThrustSeaLevel: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_VERNIERTHRUSTSEALEVEL, vernierThrustSeaLevel, 0.0);
  }
  #[inline]
  pub fn add_vernierThrustVacuum(&mut self, vernierThrustVacuum: f64) {
    self.fbb_.push_slot::<f64>(Stage_Ingest::VT_VERNIERTHRUSTVACUUM, vernierThrustVacuum, 0.0);
  }
  #[inline]
  pub fn add_numStageElements(&mut self, numStageElements: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_NUMSTAGEELEMENTS, numStageElements, 0);
  }
  #[inline]
  pub fn add_reusable(&mut self, reusable: bool) {
    self.fbb_.push_slot::<bool>(Stage_Ingest::VT_REUSABLE, reusable, false);
  }
  #[inline]
  pub fn add_restartable(&mut self, restartable: bool) {
    self.fbb_.push_slot::<bool>(Stage_Ingest::VT_RESTARTABLE, restartable, false);
  }
  #[inline]
  pub fn add_controlThruster1(&mut self, controlThruster1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_CONTROLTHRUSTER1, controlThruster1);
  }
  #[inline]
  pub fn add_numControlThruster1(&mut self, numControlThruster1: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_NUMCONTROLTHRUSTER1, numControlThruster1, 0);
  }
  #[inline]
  pub fn add_controlThruster2(&mut self, controlThruster2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_CONTROLTHRUSTER2, controlThruster2);
  }
  #[inline]
  pub fn add_numControlThruster2(&mut self, numControlThruster2: i32) {
    self.fbb_.push_slot::<i32>(Stage_Ingest::VT_NUMCONTROLTHRUSTER2, numControlThruster2, 0);
  }
  #[inline]
  pub fn add_photoURLs(&mut self, photoURLs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_PHOTOURLS, photoURLs);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_avionicsNotes(&mut self, avionicsNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_AVIONICSNOTES, avionicsNotes);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Stage_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Stage_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<Stage_Ingest_dataMode_Enum>(Stage_Ingest::VT_DATAMODE, dataMode, Stage_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Stage_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Stage_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Stage_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Stage_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Stage_Ingest");
      ds.field("id", &self.id());
      ds.field("idLaunchVehicle", &self.idLaunchVehicle());
      ds.field("idEngine", &self.idEngine());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("stageNumber", &self.stageNumber());
      ds.field("type_", &self.type_());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("numEngines", &self.numEngines());
      ds.field("length", &self.length());
      ds.field("diameter", &self.diameter());
      ds.field("mass", &self.mass());
      ds.field("vernier", &self.vernier());
      ds.field("numVernier", &self.numVernier());
      ds.field("mainEngineThrustSeaLevel", &self.mainEngineThrustSeaLevel());
      ds.field("mainEngineThrustVacuum", &self.mainEngineThrustVacuum());
      ds.field("thrustSeaLevel", &self.thrustSeaLevel());
      ds.field("thrustVacuum", &self.thrustVacuum());
      ds.field("burnTime", &self.burnTime());
      ds.field("numBurns", &self.numBurns());
      ds.field("vernierBurnTime", &self.vernierBurnTime());
      ds.field("vernierNumBurns", &self.vernierNumBurns());
      ds.field("vernierThrustSeaLevel", &self.vernierThrustSeaLevel());
      ds.field("vernierThrustVacuum", &self.vernierThrustVacuum());
      ds.field("numStageElements", &self.numStageElements());
      ds.field("reusable", &self.reusable());
      ds.field("restartable", &self.restartable());
      ds.field("controlThruster1", &self.controlThruster1());
      ds.field("numControlThruster1", &self.numControlThruster1());
      ds.field("controlThruster2", &self.controlThruster2());
      ds.field("numControlThruster2", &self.numControlThruster2());
      ds.field("photoURLs", &self.photoURLs());
      ds.field("notes", &self.notes());
      ds.field("avionicsNotes", &self.avionicsNotes());
      ds.field("tags", &self.tags());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Stage_IngestT {
  pub id: Option<String>,
  pub idLaunchVehicle: Option<String>,
  pub idEngine: Option<String>,
  pub classificationMarking: Option<String>,
  pub stageNumber: i32,
  pub type_: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub numEngines: i32,
  pub length: f64,
  pub diameter: f64,
  pub mass: f64,
  pub vernier: Option<String>,
  pub numVernier: i32,
  pub mainEngineThrustSeaLevel: f64,
  pub mainEngineThrustVacuum: f64,
  pub thrustSeaLevel: f64,
  pub thrustVacuum: f64,
  pub burnTime: f64,
  pub numBurns: i32,
  pub vernierBurnTime: f64,
  pub vernierNumBurns: i32,
  pub vernierThrustSeaLevel: f64,
  pub vernierThrustVacuum: f64,
  pub numStageElements: i32,
  pub reusable: bool,
  pub restartable: bool,
  pub controlThruster1: Option<String>,
  pub numControlThruster1: i32,
  pub controlThruster2: Option<String>,
  pub numControlThruster2: i32,
  pub photoURLs: Option<Vec<String>>,
  pub notes: Option<String>,
  pub avionicsNotes: Option<String>,
  pub tags: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: Stage_Ingest_dataMode_Enum,
}
impl Default for Stage_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      idLaunchVehicle: None,
      idEngine: None,
      classificationMarking: None,
      stageNumber: 0,
      type_: None,
      manufacturerOrgId: None,
      numEngines: 0,
      length: 0.0,
      diameter: 0.0,
      mass: 0.0,
      vernier: None,
      numVernier: 0,
      mainEngineThrustSeaLevel: 0.0,
      mainEngineThrustVacuum: 0.0,
      thrustSeaLevel: 0.0,
      thrustVacuum: 0.0,
      burnTime: 0.0,
      numBurns: 0,
      vernierBurnTime: 0.0,
      vernierNumBurns: 0,
      vernierThrustSeaLevel: 0.0,
      vernierThrustVacuum: 0.0,
      numStageElements: 0,
      reusable: false,
      restartable: false,
      controlThruster1: None,
      numControlThruster1: 0,
      controlThruster2: None,
      numControlThruster2: 0,
      photoURLs: None,
      notes: None,
      avionicsNotes: None,
      tags: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Stage_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl Stage_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Stage_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idLaunchVehicle = self.idLaunchVehicle.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idEngine = self.idEngine.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let stageNumber = self.stageNumber;
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numEngines = self.numEngines;
    let length = self.length;
    let diameter = self.diameter;
    let mass = self.mass;
    let vernier = self.vernier.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numVernier = self.numVernier;
    let mainEngineThrustSeaLevel = self.mainEngineThrustSeaLevel;
    let mainEngineThrustVacuum = self.mainEngineThrustVacuum;
    let thrustSeaLevel = self.thrustSeaLevel;
    let thrustVacuum = self.thrustVacuum;
    let burnTime = self.burnTime;
    let numBurns = self.numBurns;
    let vernierBurnTime = self.vernierBurnTime;
    let vernierNumBurns = self.vernierNumBurns;
    let vernierThrustSeaLevel = self.vernierThrustSeaLevel;
    let vernierThrustVacuum = self.vernierThrustVacuum;
    let numStageElements = self.numStageElements;
    let reusable = self.reusable;
    let restartable = self.restartable;
    let controlThruster1 = self.controlThruster1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numControlThruster1 = self.numControlThruster1;
    let controlThruster2 = self.controlThruster2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numControlThruster2 = self.numControlThruster2;
    let photoURLs = self.photoURLs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let avionicsNotes = self.avionicsNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    Stage_Ingest::create(_fbb, &Stage_IngestArgs{
      id,
      idLaunchVehicle,
      idEngine,
      classificationMarking,
      stageNumber,
      type_,
      manufacturerOrgId,
      numEngines,
      length,
      diameter,
      mass,
      vernier,
      numVernier,
      mainEngineThrustSeaLevel,
      mainEngineThrustVacuum,
      thrustSeaLevel,
      thrustVacuum,
      burnTime,
      numBurns,
      vernierBurnTime,
      vernierNumBurns,
      vernierThrustSeaLevel,
      vernierThrustVacuum,
      numStageElements,
      reusable,
      restartable,
      controlThruster1,
      numControlThruster1,
      controlThruster2,
      numControlThruster2,
      photoURLs,
      notes,
      avionicsNotes,
      tags,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Stage_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_stage_ingest_unchecked`.
pub fn root_as_stage_ingest(buf: &[u8]) -> Result<Stage_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Stage_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Stage_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_stage_ingest_unchecked`.
pub fn size_prefixed_root_as_stage_ingest(buf: &[u8]) -> Result<Stage_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Stage_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Stage_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_stage_ingest_unchecked`.
pub fn root_as_stage_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Stage_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Stage_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Stage_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_stage_ingest_unchecked`.
pub fn size_prefixed_root_as_stage_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Stage_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Stage_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Stage_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Stage_Ingest`.
pub unsafe fn root_as_stage_ingest_unchecked(buf: &[u8]) -> Stage_Ingest {
  flatbuffers::root_unchecked::<Stage_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Stage_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Stage_Ingest`.
pub unsafe fn size_prefixed_root_as_stage_ingest_unchecked(buf: &[u8]) -> Stage_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<Stage_Ingest>(buf)
}
pub const STAGE_INGEST_IDENTIFIER: &str = "STAG";

#[inline]
pub fn stage_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, STAGE_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn stage_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, STAGE_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_stage_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Stage_Ingest<'a>>) {
  fbb.finish(root, Some(STAGE_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_stage_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Stage_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(STAGE_INGEST_IDENTIFIER));
}
