// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DiplomaticClearanceRemarks_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of diplomatic clearance remarks.
pub struct DiplomaticClearanceRemarks_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DiplomaticClearanceRemarks_Ingest<'a> {
  type Inner = DiplomaticClearanceRemarks_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DiplomaticClearanceRemarks_Ingest<'a> {
  pub const VT_GDSSREMARKID: flatbuffers::VOffsetT = 4;
  pub const VT_TEXT: flatbuffers::VOffsetT = 6;
  pub const VT_DATE: flatbuffers::VOffsetT = 8;
  pub const VT_USER: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DiplomaticClearanceRemarks_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DiplomaticClearanceRemarks_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<DiplomaticClearanceRemarks_Ingest<'bldr>> {
    let mut builder = DiplomaticClearanceRemarks_IngestBuilder::new(_fbb);
    if let Some(x) = args.user { builder.add_user(x); }
    if let Some(x) = args.date { builder.add_date(x); }
    if let Some(x) = args.text { builder.add_text(x); }
    if let Some(x) = args.gdssRemarkId { builder.add_gdssRemarkId(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DiplomaticClearanceRemarks_IngestT {
    let gdssRemarkId = self.gdssRemarkId().map(|x| {
      x.to_string()
    });
    let text = self.text().map(|x| {
      x.to_string()
    });
    let date = self.date().map(|x| {
      x.to_string()
    });
    let user = self.user().map(|x| {
      x.to_string()
    });
    DiplomaticClearanceRemarks_IngestT {
      gdssRemarkId,
      text,
      date,
      user,
    }
  }

  /// Global Decision Support System (GDSS) remark identifier.
  /// Example: /// Example: GDSSREMARK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn gdssRemarkId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceRemarks_Ingest::VT_GDSSREMARKID, None)}
  }
  /// Text of the remark.
  /// Example: /// Example: Example mission remarks.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn text(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceRemarks_Ingest::VT_TEXT, None)}
  }
  /// Date the remark was published, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn date(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceRemarks_Ingest::VT_DATE, None)}
  }
  /// User who published the remark.
  /// Example: /// Example: John Doe
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn user(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceRemarks_Ingest::VT_USER, None)}
  }
}

impl flatbuffers::Verifiable for DiplomaticClearanceRemarks_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("gdssRemarkId", Self::VT_GDSSREMARKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("text", Self::VT_TEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("date", Self::VT_DATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("user", Self::VT_USER, false)?
     .finish();
    Ok(())
  }
}
pub struct DiplomaticClearanceRemarks_IngestArgs<'a> {
    pub gdssRemarkId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub text: Option<flatbuffers::WIPOffset<&'a str>>,
    pub date: Option<flatbuffers::WIPOffset<&'a str>>,
    pub user: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for DiplomaticClearanceRemarks_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    DiplomaticClearanceRemarks_IngestArgs {
      gdssRemarkId: None,
      text: None,
      date: None,
      user: None,
    }
  }
}

pub struct DiplomaticClearanceRemarks_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DiplomaticClearanceRemarks_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_gdssRemarkId(&mut self, gdssRemarkId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceRemarks_Ingest::VT_GDSSREMARKID, gdssRemarkId);
  }
  #[inline]
  pub fn add_text(&mut self, text: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceRemarks_Ingest::VT_TEXT, text);
  }
  #[inline]
  pub fn add_date(&mut self, date: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceRemarks_Ingest::VT_DATE, date);
  }
  #[inline]
  pub fn add_user(&mut self, user: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceRemarks_Ingest::VT_USER, user);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DiplomaticClearanceRemarks_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DiplomaticClearanceRemarks_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DiplomaticClearanceRemarks_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DiplomaticClearanceRemarks_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DiplomaticClearanceRemarks_Ingest");
      ds.field("gdssRemarkId", &self.gdssRemarkId());
      ds.field("text", &self.text());
      ds.field("date", &self.date());
      ds.field("user", &self.user());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DiplomaticClearanceRemarks_IngestT {
  pub gdssRemarkId: Option<String>,
  pub text: Option<String>,
  pub date: Option<String>,
  pub user: Option<String>,
}
impl Default for DiplomaticClearanceRemarks_IngestT {
  fn default() -> Self {
    Self {
      gdssRemarkId: None,
      text: None,
      date: None,
      user: None,
    }
  }
}
impl DiplomaticClearanceRemarks_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DiplomaticClearanceRemarks_Ingest<'b>> {
    let gdssRemarkId = self.gdssRemarkId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let text = self.text.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let date = self.date.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let user = self.user.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    DiplomaticClearanceRemarks_Ingest::create(_fbb, &DiplomaticClearanceRemarks_IngestArgs{
      gdssRemarkId,
      text,
      date,
      user,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DiplomaticClearanceRemarks_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_remarks_ingest_unchecked`.
pub fn root_as_diplomatic_clearance_remarks_ingest(buf: &[u8]) -> Result<DiplomaticClearanceRemarks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DiplomaticClearanceRemarks_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DiplomaticClearanceRemarks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_diplomatic_clearance_remarks_ingest_unchecked`.
pub fn size_prefixed_root_as_diplomatic_clearance_remarks_ingest(buf: &[u8]) -> Result<DiplomaticClearanceRemarks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DiplomaticClearanceRemarks_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DiplomaticClearanceRemarks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_remarks_ingest_unchecked`.
pub fn root_as_diplomatic_clearance_remarks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiplomaticClearanceRemarks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DiplomaticClearanceRemarks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DiplomaticClearanceRemarks_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_remarks_ingest_unchecked`.
pub fn size_prefixed_root_as_diplomatic_clearance_remarks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiplomaticClearanceRemarks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DiplomaticClearanceRemarks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DiplomaticClearanceRemarks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DiplomaticClearanceRemarks_Ingest`.
pub unsafe fn root_as_diplomatic_clearance_remarks_ingest_unchecked(buf: &[u8]) -> DiplomaticClearanceRemarks_Ingest {
  flatbuffers::root_unchecked::<DiplomaticClearanceRemarks_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DiplomaticClearanceRemarks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DiplomaticClearanceRemarks_Ingest`.
pub unsafe fn size_prefixed_root_as_diplomatic_clearance_remarks_ingest_unchecked(buf: &[u8]) -> DiplomaticClearanceRemarks_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<DiplomaticClearanceRemarks_Ingest>(buf)
}
pub const DIPLOMATIC_CLEARANCE_REMARKS_INGEST_IDENTIFIER: &str = "DIPL";

#[inline]
pub fn diplomatic_clearance_remarks_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIPLOMATIC_CLEARANCE_REMARKS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn diplomatic_clearance_remarks_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIPLOMATIC_CLEARANCE_REMARKS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_diplomatic_clearance_remarks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DiplomaticClearanceRemarks_Ingest<'a>>) {
  fbb.finish(root, Some(DIPLOMATIC_CLEARANCE_REMARKS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_diplomatic_clearance_remarks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DiplomaticClearanceRemarks_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(DIPLOMATIC_CLEARANCE_REMARKS_INGEST_IDENTIFIER));
}
