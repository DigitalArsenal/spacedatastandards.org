// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MtiHRRScatterer_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// HRR Scatterer record for a target pixel that exceeds the target detection threshold.
pub struct MtiHRRScatterer_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MtiHRRScatterer_Full<'a> {
  type Inner = MtiHRRScatterer_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MtiHRRScatterer_Full<'a> {
  pub const VT_H32_1: flatbuffers::VOffsetT = 4;
  pub const VT_H32_2: flatbuffers::VOffsetT = 6;
  pub const VT_H32_3: flatbuffers::VOffsetT = 8;
  pub const VT_H32_4: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MtiHRRScatterer_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MtiHRRScatterer_FullArgs
  ) -> flatbuffers::WIPOffset<MtiHRRScatterer_Full<'bldr>> {
    let mut builder = MtiHRRScatterer_FullBuilder::new(_fbb);
    builder.add_h32_4(args.h32_4);
    builder.add_h32_3(args.h32_3);
    builder.add_h32_2(args.h32_2);
    builder.add_h32_1(args.h32_1);
    builder.finish()
  }

  pub fn unpack(&self) -> MtiHRRScatterer_FullT {
    let h32_1 = self.h32_1();
    let h32_2 = self.h32_2();
    let h32_3 = self.h32_3();
    let h32_4 = self.h32_4();
    MtiHRRScatterer_FullT {
      h32_1,
      h32_2,
      h32_3,
      h32_4,
    }
  }

  /// Scatterer’s power magnitude.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn h32_1(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiHRRScatterer_Full::VT_H32_1, Some(0)).unwrap()}
  }
  /// Scatterer’s complex phase, in degrees.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn h32_2(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiHRRScatterer_Full::VT_H32_2, Some(0)).unwrap()}
  }
  /// Scatterer’s Range index relative to Range-Doppler chip, where increasing index equates to increasing range.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn h32_3(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiHRRScatterer_Full::VT_H32_3, Some(0)).unwrap()}
  }
  /// Scatterer’s Doppler index relative to Range-Doppler chip, where increasing index equates to increasing Doppler.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn h32_4(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiHRRScatterer_Full::VT_H32_4, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MtiHRRScatterer_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("h32_1", Self::VT_H32_1, false)?
     .visit_field::<i32>("h32_2", Self::VT_H32_2, false)?
     .visit_field::<i32>("h32_3", Self::VT_H32_3, false)?
     .visit_field::<i32>("h32_4", Self::VT_H32_4, false)?
     .finish();
    Ok(())
  }
}
pub struct MtiHRRScatterer_FullArgs {
    pub h32_1: i32,
    pub h32_2: i32,
    pub h32_3: i32,
    pub h32_4: i32,
}
impl<'a> Default for MtiHRRScatterer_FullArgs {
  #[inline]
  fn default() -> Self {
    MtiHRRScatterer_FullArgs {
      h32_1: 0,
      h32_2: 0,
      h32_3: 0,
      h32_4: 0,
    }
  }
}

pub struct MtiHRRScatterer_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MtiHRRScatterer_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_h32_1(&mut self, h32_1: i32) {
    self.fbb_.push_slot::<i32>(MtiHRRScatterer_Full::VT_H32_1, h32_1, 0);
  }
  #[inline]
  pub fn add_h32_2(&mut self, h32_2: i32) {
    self.fbb_.push_slot::<i32>(MtiHRRScatterer_Full::VT_H32_2, h32_2, 0);
  }
  #[inline]
  pub fn add_h32_3(&mut self, h32_3: i32) {
    self.fbb_.push_slot::<i32>(MtiHRRScatterer_Full::VT_H32_3, h32_3, 0);
  }
  #[inline]
  pub fn add_h32_4(&mut self, h32_4: i32) {
    self.fbb_.push_slot::<i32>(MtiHRRScatterer_Full::VT_H32_4, h32_4, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MtiHRRScatterer_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MtiHRRScatterer_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MtiHRRScatterer_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MtiHRRScatterer_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MtiHRRScatterer_Full");
      ds.field("h32_1", &self.h32_1());
      ds.field("h32_2", &self.h32_2());
      ds.field("h32_3", &self.h32_3());
      ds.field("h32_4", &self.h32_4());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MtiHRRScatterer_FullT {
  pub h32_1: i32,
  pub h32_2: i32,
  pub h32_3: i32,
  pub h32_4: i32,
}
impl Default for MtiHRRScatterer_FullT {
  fn default() -> Self {
    Self {
      h32_1: 0,
      h32_2: 0,
      h32_3: 0,
      h32_4: 0,
    }
  }
}
impl MtiHRRScatterer_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MtiHRRScatterer_Full<'b>> {
    let h32_1 = self.h32_1;
    let h32_2 = self.h32_2;
    let h32_3 = self.h32_3;
    let h32_4 = self.h32_4;
    MtiHRRScatterer_Full::create(_fbb, &MtiHRRScatterer_FullArgs{
      h32_1,
      h32_2,
      h32_3,
      h32_4,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MtiHRRScatterer_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_hrrscatterer_full_unchecked`.
pub fn root_as_mti_hrrscatterer_full(buf: &[u8]) -> Result<MtiHRRScatterer_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MtiHRRScatterer_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MtiHRRScatterer_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mti_hrrscatterer_full_unchecked`.
pub fn size_prefixed_root_as_mti_hrrscatterer_full(buf: &[u8]) -> Result<MtiHRRScatterer_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MtiHRRScatterer_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MtiHRRScatterer_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_hrrscatterer_full_unchecked`.
pub fn root_as_mti_hrrscatterer_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiHRRScatterer_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MtiHRRScatterer_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MtiHRRScatterer_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_hrrscatterer_full_unchecked`.
pub fn size_prefixed_root_as_mti_hrrscatterer_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiHRRScatterer_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MtiHRRScatterer_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MtiHRRScatterer_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MtiHRRScatterer_Full`.
pub unsafe fn root_as_mti_hrrscatterer_full_unchecked(buf: &[u8]) -> MtiHRRScatterer_Full {
  flatbuffers::root_unchecked::<MtiHRRScatterer_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MtiHRRScatterer_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MtiHRRScatterer_Full`.
pub unsafe fn size_prefixed_root_as_mti_hrrscatterer_full_unchecked(buf: &[u8]) -> MtiHRRScatterer_Full {
  flatbuffers::size_prefixed_root_unchecked::<MtiHRRScatterer_Full>(buf)
}
pub const MTI_HRRSCATTERER_FULL_IDENTIFIER: &str = "MTIH";

#[inline]
pub fn mti_hrrscatterer_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_HRRSCATTERER_FULL_IDENTIFIER, false)
}

#[inline]
pub fn mti_hrrscatterer_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_HRRSCATTERER_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_mti_hrrscatterer_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MtiHRRScatterer_Full<'a>>) {
  fbb.finish(root, Some(MTI_HRRSCATTERER_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mti_hrrscatterer_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MtiHRRScatterer_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(MTI_HRRSCATTERER_FULL_IDENTIFIER));
}
