// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MtiJobDefinition_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The means for the platform to pass information pertaining to the sensor job that will be performed and details of the location parameters (terrain elevation model and geoid model) used in the measurement.
pub struct MtiJobDefinition_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MtiJobDefinition_Ingest<'a> {
  type Inner = MtiJobDefinition_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MtiJobDefinition_Ingest<'a> {
  pub const VT_J1: flatbuffers::VOffsetT = 4;
  pub const VT_J2: flatbuffers::VOffsetT = 6;
  pub const VT_J3: flatbuffers::VOffsetT = 8;
  pub const VT_J4: flatbuffers::VOffsetT = 10;
  pub const VT_J5: flatbuffers::VOffsetT = 12;
  pub const VT_J6: flatbuffers::VOffsetT = 14;
  pub const VT_J7: flatbuffers::VOffsetT = 16;
  pub const VT_J8: flatbuffers::VOffsetT = 18;
  pub const VT_J9: flatbuffers::VOffsetT = 20;
  pub const VT_J10: flatbuffers::VOffsetT = 22;
  pub const VT_J11: flatbuffers::VOffsetT = 24;
  pub const VT_J12: flatbuffers::VOffsetT = 26;
  pub const VT_J13: flatbuffers::VOffsetT = 28;
  pub const VT_J14: flatbuffers::VOffsetT = 30;
  pub const VT_J15: flatbuffers::VOffsetT = 32;
  pub const VT_J16: flatbuffers::VOffsetT = 34;
  pub const VT_J17: flatbuffers::VOffsetT = 36;
  pub const VT_J18: flatbuffers::VOffsetT = 38;
  pub const VT_J19: flatbuffers::VOffsetT = 40;
  pub const VT_J20: flatbuffers::VOffsetT = 42;
  pub const VT_J21: flatbuffers::VOffsetT = 44;
  pub const VT_J22: flatbuffers::VOffsetT = 46;
  pub const VT_J23: flatbuffers::VOffsetT = 48;
  pub const VT_J24: flatbuffers::VOffsetT = 50;
  pub const VT_J25: flatbuffers::VOffsetT = 52;
  pub const VT_J26: flatbuffers::VOffsetT = 54;
  pub const VT_J27: flatbuffers::VOffsetT = 56;
  pub const VT_J28: flatbuffers::VOffsetT = 58;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MtiJobDefinition_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MtiJobDefinition_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<MtiJobDefinition_Ingest<'bldr>> {
    let mut builder = MtiJobDefinition_IngestBuilder::new(_fbb);
    builder.add_j22(args.j22);
    builder.add_j13(args.j13);
    builder.add_j12(args.j12);
    builder.add_j11(args.j11);
    builder.add_j10(args.j10);
    builder.add_j9(args.j9);
    builder.add_j8(args.j8);
    builder.add_j7(args.j7);
    builder.add_j6(args.j6);
    builder.add_j1(args.j1);
    if let Some(x) = args.j28 { builder.add_j28(x); }
    if let Some(x) = args.j27 { builder.add_j27(x); }
    builder.add_j26(args.j26);
    builder.add_j25(args.j25);
    builder.add_j24(args.j24);
    builder.add_j23(args.j23);
    builder.add_j21(args.j21);
    builder.add_j20(args.j20);
    builder.add_j19(args.j19);
    builder.add_j18(args.j18);
    builder.add_j17(args.j17);
    builder.add_j16(args.j16);
    builder.add_j15(args.j15);
    if let Some(x) = args.j14 { builder.add_j14(x); }
    builder.add_j5(args.j5);
    builder.add_j4(args.j4);
    if let Some(x) = args.j3 { builder.add_j3(x); }
    if let Some(x) = args.j2 { builder.add_j2(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> MtiJobDefinition_IngestT {
    let j1 = self.j1();
    let j2 = self.j2().map(|x| {
      x.to_string()
    });
    let j3 = self.j3().map(|x| {
      x.to_string()
    });
    let j4 = self.j4();
    let j5 = self.j5();
    let j6 = self.j6();
    let j7 = self.j7();
    let j8 = self.j8();
    let j9 = self.j9();
    let j10 = self.j10();
    let j11 = self.j11();
    let j12 = self.j12();
    let j13 = self.j13();
    let j14 = self.j14().map(|x| {
      x.to_string()
    });
    let j15 = self.j15();
    let j16 = self.j16();
    let j17 = self.j17();
    let j18 = self.j18();
    let j19 = self.j19();
    let j20 = self.j20();
    let j21 = self.j21();
    let j22 = self.j22();
    let j23 = self.j23();
    let j24 = self.j24();
    let j25 = self.j25();
    let j26 = self.j26();
    let j27 = self.j27().map(|x| {
      x.to_string()
    });
    let j28 = self.j28().map(|x| {
      x.to_string()
    });
    MtiJobDefinition_IngestT {
      j1,
      j2,
      j3,
      j4,
      j5,
      j6,
      j7,
      j8,
      j9,
      j10,
      j11,
      j12,
      j13,
      j14,
      j15,
      j16,
      j17,
      j18,
      j19,
      j20,
      j21,
      j22,
      j23,
      j24,
      j25,
      j26,
      j27,
      j28,
    }
  }

  /// A platform assigned number identifying the specific request or task to which the specific dwell pertains.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j1(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MtiJobDefinition_Ingest::VT_J1, Some(0)).unwrap()}
  }
  /// The type of sensor or the platform.
  /// Example: /// Example: TYPE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn j2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobDefinition_Ingest::VT_J2, None)}
  }
  /// Identifier of the particular variant of the sensor type.
  /// Example: /// Example: J3-ID
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn j3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobDefinition_Ingest::VT_J3, None)}
  }
  /// Flag field indicating whether filtering has been applied to the targets detected within the dwell area.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j4(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J4, Some(0)).unwrap()}
  }
  /// Priority of this tasking request relative to all other active tasking requests scheduled for execution on the specified platform.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j5(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J5, Some(0)).unwrap()}
  }
  /// North-South position of the first corner (Point A) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j6(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J6, Some(0.0)).unwrap()}
  }
  ///  East-West position of the first corner (Point A) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j7(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J7, Some(0.0)).unwrap()}
  }
  ///  North-South position of the second corner (Point B) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j8(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J8, Some(0.0)).unwrap()}
  }
  /// East-West position of the second corner (Point B) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j9(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J9, Some(0.0)).unwrap()}
  }
  /// North-South position of the third corner (Point C) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j10(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J10, Some(0.0)).unwrap()}
  }
  /// East-West position of the third corner (Point C) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j11(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J11, Some(0.0)).unwrap()}
  }
  /// North-South position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j12(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J12, Some(0.0)).unwrap()}
  }
  /// East-West position of the fourth corner (Point D) defining the area for sensor service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j13(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J13, Some(0.0)).unwrap()}
  }
  /// Mode in which the radar will operate for the given job ID.
  /// Example: /// Example: MODE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn j14(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobDefinition_Ingest::VT_J14, None)}
  }
  /// The nominal revisit interval for the job ID, expressed in deciseconds.  Value of zero, indicates that the sensor is not revisiting the previous area.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j15(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J15, Some(0)).unwrap()}
  }
  /// Nominal estimate of the standard deviation in the estimated horizontal (along track) sensor location, expressed in decimeters.   measured along the sensor track direction defined in the Dwell segment.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j16(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J16, Some(0)).unwrap()}
  }
  /// Nominal estimate of the standard deviation in the estimated horizontal sensor location, measured orthogonal to the track direction, expressed in decimeters.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j17(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J17, Some(0)).unwrap()}
  }
  /// Nominal estimate of the standard deviation of the measured sensor altitude, expressed in decimeters.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j18(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J18, Some(0)).unwrap()}
  }
  /// Standard deviation of the estimate of sensor track heading, expressed in degrees.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j19(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J19, Some(0)).unwrap()}
  }
  /// Nominal standard deviation of the estimate of sensor speed, expressed in millimeters per second.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j20(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J20, Some(0)).unwrap()}
  }
  /// Nominal standard deviation of the slant range of the reported detection, expressed in centimeters.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j21(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J21, Some(0)).unwrap()}
  }
  /// Nominal standard deviation of the measured cross angle to the reported detection, expressed in degrees.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j22(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobDefinition_Ingest::VT_J22, Some(0.0)).unwrap()}
  }
  /// Nominal standard deviation of the velocity line-of-sight component, expressed in centimeters per second.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j23(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J23, Some(0)).unwrap()}
  }
  /// Nominal minimum velocity component along the line of sight, which can be detected by the sensor, expressed in decimeters per second.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j24(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J24, Some(0)).unwrap()}
  }
  /// Nominal probability that an unobscured ten square-meter target will be detected within the given area of surveillance.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j25(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J25, Some(0)).unwrap()}
  }
  /// The expected density of False Alarms (FA), expressed as the negative of the decibel value.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn j26(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobDefinition_Ingest::VT_J26, Some(0)).unwrap()}
  }
  /// The terrain elevation model used for developing the target reports.
  /// Example: /// Example: MODEL
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn j27(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobDefinition_Ingest::VT_J27, None)}
  }
  /// The geoid model used for developing the target reports.
  /// Example: /// Example: MODEL
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn j28(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobDefinition_Ingest::VT_J28, None)}
  }
}

impl flatbuffers::Verifiable for MtiJobDefinition_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("j1", Self::VT_J1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("j2", Self::VT_J2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("j3", Self::VT_J3, false)?
     .visit_field::<i32>("j4", Self::VT_J4, false)?
     .visit_field::<i32>("j5", Self::VT_J5, false)?
     .visit_field::<f64>("j6", Self::VT_J6, false)?
     .visit_field::<f64>("j7", Self::VT_J7, false)?
     .visit_field::<f64>("j8", Self::VT_J8, false)?
     .visit_field::<f64>("j9", Self::VT_J9, false)?
     .visit_field::<f64>("j10", Self::VT_J10, false)?
     .visit_field::<f64>("j11", Self::VT_J11, false)?
     .visit_field::<f64>("j12", Self::VT_J12, false)?
     .visit_field::<f64>("j13", Self::VT_J13, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("j14", Self::VT_J14, false)?
     .visit_field::<i32>("j15", Self::VT_J15, false)?
     .visit_field::<i32>("j16", Self::VT_J16, false)?
     .visit_field::<i32>("j17", Self::VT_J17, false)?
     .visit_field::<i32>("j18", Self::VT_J18, false)?
     .visit_field::<i32>("j19", Self::VT_J19, false)?
     .visit_field::<i32>("j20", Self::VT_J20, false)?
     .visit_field::<i32>("j21", Self::VT_J21, false)?
     .visit_field::<f64>("j22", Self::VT_J22, false)?
     .visit_field::<i32>("j23", Self::VT_J23, false)?
     .visit_field::<i32>("j24", Self::VT_J24, false)?
     .visit_field::<i32>("j25", Self::VT_J25, false)?
     .visit_field::<i32>("j26", Self::VT_J26, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("j27", Self::VT_J27, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("j28", Self::VT_J28, false)?
     .finish();
    Ok(())
  }
}
pub struct MtiJobDefinition_IngestArgs<'a> {
    pub j1: i64,
    pub j2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub j3: Option<flatbuffers::WIPOffset<&'a str>>,
    pub j4: i32,
    pub j5: i32,
    pub j6: f64,
    pub j7: f64,
    pub j8: f64,
    pub j9: f64,
    pub j10: f64,
    pub j11: f64,
    pub j12: f64,
    pub j13: f64,
    pub j14: Option<flatbuffers::WIPOffset<&'a str>>,
    pub j15: i32,
    pub j16: i32,
    pub j17: i32,
    pub j18: i32,
    pub j19: i32,
    pub j20: i32,
    pub j21: i32,
    pub j22: f64,
    pub j23: i32,
    pub j24: i32,
    pub j25: i32,
    pub j26: i32,
    pub j27: Option<flatbuffers::WIPOffset<&'a str>>,
    pub j28: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MtiJobDefinition_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    MtiJobDefinition_IngestArgs {
      j1: 0,
      j2: None,
      j3: None,
      j4: 0,
      j5: 0,
      j6: 0.0,
      j7: 0.0,
      j8: 0.0,
      j9: 0.0,
      j10: 0.0,
      j11: 0.0,
      j12: 0.0,
      j13: 0.0,
      j14: None,
      j15: 0,
      j16: 0,
      j17: 0,
      j18: 0,
      j19: 0,
      j20: 0,
      j21: 0,
      j22: 0.0,
      j23: 0,
      j24: 0,
      j25: 0,
      j26: 0,
      j27: None,
      j28: None,
    }
  }
}

pub struct MtiJobDefinition_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MtiJobDefinition_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_j1(&mut self, j1: i64) {
    self.fbb_.push_slot::<i64>(MtiJobDefinition_Ingest::VT_J1, j1, 0);
  }
  #[inline]
  pub fn add_j2(&mut self, j2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobDefinition_Ingest::VT_J2, j2);
  }
  #[inline]
  pub fn add_j3(&mut self, j3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobDefinition_Ingest::VT_J3, j3);
  }
  #[inline]
  pub fn add_j4(&mut self, j4: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J4, j4, 0);
  }
  #[inline]
  pub fn add_j5(&mut self, j5: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J5, j5, 0);
  }
  #[inline]
  pub fn add_j6(&mut self, j6: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J6, j6, 0.0);
  }
  #[inline]
  pub fn add_j7(&mut self, j7: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J7, j7, 0.0);
  }
  #[inline]
  pub fn add_j8(&mut self, j8: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J8, j8, 0.0);
  }
  #[inline]
  pub fn add_j9(&mut self, j9: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J9, j9, 0.0);
  }
  #[inline]
  pub fn add_j10(&mut self, j10: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J10, j10, 0.0);
  }
  #[inline]
  pub fn add_j11(&mut self, j11: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J11, j11, 0.0);
  }
  #[inline]
  pub fn add_j12(&mut self, j12: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J12, j12, 0.0);
  }
  #[inline]
  pub fn add_j13(&mut self, j13: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J13, j13, 0.0);
  }
  #[inline]
  pub fn add_j14(&mut self, j14: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobDefinition_Ingest::VT_J14, j14);
  }
  #[inline]
  pub fn add_j15(&mut self, j15: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J15, j15, 0);
  }
  #[inline]
  pub fn add_j16(&mut self, j16: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J16, j16, 0);
  }
  #[inline]
  pub fn add_j17(&mut self, j17: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J17, j17, 0);
  }
  #[inline]
  pub fn add_j18(&mut self, j18: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J18, j18, 0);
  }
  #[inline]
  pub fn add_j19(&mut self, j19: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J19, j19, 0);
  }
  #[inline]
  pub fn add_j20(&mut self, j20: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J20, j20, 0);
  }
  #[inline]
  pub fn add_j21(&mut self, j21: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J21, j21, 0);
  }
  #[inline]
  pub fn add_j22(&mut self, j22: f64) {
    self.fbb_.push_slot::<f64>(MtiJobDefinition_Ingest::VT_J22, j22, 0.0);
  }
  #[inline]
  pub fn add_j23(&mut self, j23: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J23, j23, 0);
  }
  #[inline]
  pub fn add_j24(&mut self, j24: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J24, j24, 0);
  }
  #[inline]
  pub fn add_j25(&mut self, j25: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J25, j25, 0);
  }
  #[inline]
  pub fn add_j26(&mut self, j26: i32) {
    self.fbb_.push_slot::<i32>(MtiJobDefinition_Ingest::VT_J26, j26, 0);
  }
  #[inline]
  pub fn add_j27(&mut self, j27: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobDefinition_Ingest::VT_J27, j27);
  }
  #[inline]
  pub fn add_j28(&mut self, j28: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobDefinition_Ingest::VT_J28, j28);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MtiJobDefinition_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MtiJobDefinition_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MtiJobDefinition_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MtiJobDefinition_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MtiJobDefinition_Ingest");
      ds.field("j1", &self.j1());
      ds.field("j2", &self.j2());
      ds.field("j3", &self.j3());
      ds.field("j4", &self.j4());
      ds.field("j5", &self.j5());
      ds.field("j6", &self.j6());
      ds.field("j7", &self.j7());
      ds.field("j8", &self.j8());
      ds.field("j9", &self.j9());
      ds.field("j10", &self.j10());
      ds.field("j11", &self.j11());
      ds.field("j12", &self.j12());
      ds.field("j13", &self.j13());
      ds.field("j14", &self.j14());
      ds.field("j15", &self.j15());
      ds.field("j16", &self.j16());
      ds.field("j17", &self.j17());
      ds.field("j18", &self.j18());
      ds.field("j19", &self.j19());
      ds.field("j20", &self.j20());
      ds.field("j21", &self.j21());
      ds.field("j22", &self.j22());
      ds.field("j23", &self.j23());
      ds.field("j24", &self.j24());
      ds.field("j25", &self.j25());
      ds.field("j26", &self.j26());
      ds.field("j27", &self.j27());
      ds.field("j28", &self.j28());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MtiJobDefinition_IngestT {
  pub j1: i64,
  pub j2: Option<String>,
  pub j3: Option<String>,
  pub j4: i32,
  pub j5: i32,
  pub j6: f64,
  pub j7: f64,
  pub j8: f64,
  pub j9: f64,
  pub j10: f64,
  pub j11: f64,
  pub j12: f64,
  pub j13: f64,
  pub j14: Option<String>,
  pub j15: i32,
  pub j16: i32,
  pub j17: i32,
  pub j18: i32,
  pub j19: i32,
  pub j20: i32,
  pub j21: i32,
  pub j22: f64,
  pub j23: i32,
  pub j24: i32,
  pub j25: i32,
  pub j26: i32,
  pub j27: Option<String>,
  pub j28: Option<String>,
}
impl Default for MtiJobDefinition_IngestT {
  fn default() -> Self {
    Self {
      j1: 0,
      j2: None,
      j3: None,
      j4: 0,
      j5: 0,
      j6: 0.0,
      j7: 0.0,
      j8: 0.0,
      j9: 0.0,
      j10: 0.0,
      j11: 0.0,
      j12: 0.0,
      j13: 0.0,
      j14: None,
      j15: 0,
      j16: 0,
      j17: 0,
      j18: 0,
      j19: 0,
      j20: 0,
      j21: 0,
      j22: 0.0,
      j23: 0,
      j24: 0,
      j25: 0,
      j26: 0,
      j27: None,
      j28: None,
    }
  }
}
impl MtiJobDefinition_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MtiJobDefinition_Ingest<'b>> {
    let j1 = self.j1;
    let j2 = self.j2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let j3 = self.j3.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let j4 = self.j4;
    let j5 = self.j5;
    let j6 = self.j6;
    let j7 = self.j7;
    let j8 = self.j8;
    let j9 = self.j9;
    let j10 = self.j10;
    let j11 = self.j11;
    let j12 = self.j12;
    let j13 = self.j13;
    let j14 = self.j14.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let j15 = self.j15;
    let j16 = self.j16;
    let j17 = self.j17;
    let j18 = self.j18;
    let j19 = self.j19;
    let j20 = self.j20;
    let j21 = self.j21;
    let j22 = self.j22;
    let j23 = self.j23;
    let j24 = self.j24;
    let j25 = self.j25;
    let j26 = self.j26;
    let j27 = self.j27.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let j28 = self.j28.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MtiJobDefinition_Ingest::create(_fbb, &MtiJobDefinition_IngestArgs{
      j1,
      j2,
      j3,
      j4,
      j5,
      j6,
      j7,
      j8,
      j9,
      j10,
      j11,
      j12,
      j13,
      j14,
      j15,
      j16,
      j17,
      j18,
      j19,
      j20,
      j21,
      j22,
      j23,
      j24,
      j25,
      j26,
      j27,
      j28,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MtiJobDefinition_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_job_definition_ingest_unchecked`.
pub fn root_as_mti_job_definition_ingest(buf: &[u8]) -> Result<MtiJobDefinition_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MtiJobDefinition_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MtiJobDefinition_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mti_job_definition_ingest_unchecked`.
pub fn size_prefixed_root_as_mti_job_definition_ingest(buf: &[u8]) -> Result<MtiJobDefinition_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MtiJobDefinition_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MtiJobDefinition_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_job_definition_ingest_unchecked`.
pub fn root_as_mti_job_definition_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiJobDefinition_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MtiJobDefinition_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MtiJobDefinition_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_job_definition_ingest_unchecked`.
pub fn size_prefixed_root_as_mti_job_definition_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiJobDefinition_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MtiJobDefinition_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MtiJobDefinition_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MtiJobDefinition_Ingest`.
pub unsafe fn root_as_mti_job_definition_ingest_unchecked(buf: &[u8]) -> MtiJobDefinition_Ingest {
  flatbuffers::root_unchecked::<MtiJobDefinition_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MtiJobDefinition_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MtiJobDefinition_Ingest`.
pub unsafe fn size_prefixed_root_as_mti_job_definition_ingest_unchecked(buf: &[u8]) -> MtiJobDefinition_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<MtiJobDefinition_Ingest>(buf)
}
pub const MTI_JOB_DEFINITION_INGEST_IDENTIFIER: &str = "MTIJ";

#[inline]
pub fn mti_job_definition_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_JOB_DEFINITION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn mti_job_definition_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_JOB_DEFINITION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_mti_job_definition_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MtiJobDefinition_Ingest<'a>>) {
  fbb.finish(root, Some(MTI_JOB_DEFINITION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mti_job_definition_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MtiJobDefinition_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(MTI_JOB_DEFINITION_INGEST_IDENTIFIER));
}
