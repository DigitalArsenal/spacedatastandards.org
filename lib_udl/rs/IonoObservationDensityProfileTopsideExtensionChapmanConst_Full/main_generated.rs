// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationDensityProfileTopsideExtensionChapmanConst_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Parameters of the constant-scale-height Chapman layer.
pub struct IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'a> {
  type Inner = IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'a> {
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 4;
  pub const VT_NMF2: flatbuffers::VOffsetT = 6;
  pub const VT_HMF2: flatbuffers::VOffsetT = 8;
  pub const VT_SCALEF2: flatbuffers::VOffsetT = 10;
  pub const VT_CHI: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationDensityProfileTopsideExtensionChapmanConst_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationDensityProfileTopsideExtensionChapmanConst_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'bldr>> {
    let mut builder = IonoObservationDensityProfileTopsideExtensionChapmanConst_FullBuilder::new(_fbb);
    builder.add_chi(args.chi);
    builder.add_scaleF2(args.scaleF2);
    builder.add_hmF2(args.hmF2);
    builder.add_nmF2(args.nmF2);
    if let Some(x) = args.description { builder.add_description(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationDensityProfileTopsideExtensionChapmanConst_FullT {
    let description = self.description().map(|x| {
      x.to_string()
    });
    let nmF2 = self.nmF2();
    let hmF2 = self.hmF2();
    let scaleF2 = self.scaleF2();
    let chi = self.chi();
    IonoObservationDensityProfileTopsideExtensionChapmanConst_FullT {
      description,
      nmF2,
      hmF2,
      scaleF2,
      chi,
    }
  }

  /// Description of the Chapman computation technique.
  /// Example: /// Example: Constant scale height Chapman topside layer determined using bottomside peak density parameters and placed chi km above the ionosonde-determined peak height.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_DESCRIPTION, None)}
  }
  /// Peak density of F2 layer, in grams per cubic centimeter.
  /// Example: /// Example: 313283.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nmF2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_NMF2, Some(0.0)).unwrap()}
  }
  /// Peak height of F2 layer, in kilometers.
  /// Example: /// Example: 265.42
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hmF2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_HMF2, Some(0.0)).unwrap()}
  }
  /// Scale height if F2 layer at the peak, in kilometers.
  /// Example: /// Example: 45.191
  /// Constraints: No constraints specified.
  #[inline]
  pub fn scaleF2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_SCALEF2, Some(0.0)).unwrap()}
  }
  /// Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
  /// Example: /// Example: 35.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn chi(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_CHI, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<f64>("nmF2", Self::VT_NMF2, false)?
     .visit_field::<f64>("hmF2", Self::VT_HMF2, false)?
     .visit_field::<f64>("scaleF2", Self::VT_SCALEF2, false)?
     .visit_field::<f64>("chi", Self::VT_CHI, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationDensityProfileTopsideExtensionChapmanConst_FullArgs<'a> {
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nmF2: f64,
    pub hmF2: f64,
    pub scaleF2: f64,
    pub chi: f64,
}
impl<'a> Default for IonoObservationDensityProfileTopsideExtensionChapmanConst_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationDensityProfileTopsideExtensionChapmanConst_FullArgs {
      description: None,
      nmF2: 0.0,
      hmF2: 0.0,
      scaleF2: 0.0,
      chi: 0.0,
    }
  }
}

pub struct IonoObservationDensityProfileTopsideExtensionChapmanConst_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationDensityProfileTopsideExtensionChapmanConst_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_nmF2(&mut self, nmF2: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_NMF2, nmF2, 0.0);
  }
  #[inline]
  pub fn add_hmF2(&mut self, hmF2: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_HMF2, hmF2, 0.0);
  }
  #[inline]
  pub fn add_scaleF2(&mut self, scaleF2: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_SCALEF2, scaleF2, 0.0);
  }
  #[inline]
  pub fn add_chi(&mut self, chi: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::VT_CHI, chi, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationDensityProfileTopsideExtensionChapmanConst_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationDensityProfileTopsideExtensionChapmanConst_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationDensityProfileTopsideExtensionChapmanConst_Full");
      ds.field("description", &self.description());
      ds.field("nmF2", &self.nmF2());
      ds.field("hmF2", &self.hmF2());
      ds.field("scaleF2", &self.scaleF2());
      ds.field("chi", &self.chi());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationDensityProfileTopsideExtensionChapmanConst_FullT {
  pub description: Option<String>,
  pub nmF2: f64,
  pub hmF2: f64,
  pub scaleF2: f64,
  pub chi: f64,
}
impl Default for IonoObservationDensityProfileTopsideExtensionChapmanConst_FullT {
  fn default() -> Self {
    Self {
      description: None,
      nmF2: 0.0,
      hmF2: 0.0,
      scaleF2: 0.0,
      chi: 0.0,
    }
  }
}
impl IonoObservationDensityProfileTopsideExtensionChapmanConst_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'b>> {
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nmF2 = self.nmF2;
    let hmF2 = self.hmF2;
    let scaleF2 = self.scaleF2;
    let chi = self.chi;
    IonoObservationDensityProfileTopsideExtensionChapmanConst_Full::create(_fbb, &IonoObservationDensityProfileTopsideExtensionChapmanConst_FullArgs{
      description,
      nmF2,
      hmF2,
      scaleF2,
      chi,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationDensityProfileTopsideExtensionChapmanConst_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_topside_extension_chapman_const_full_unchecked`.
pub fn root_as_iono_observation_density_profile_topside_extension_chapman_const_full(buf: &[u8]) -> Result<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationDensityProfileTopsideExtensionChapmanConst_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_density_profile_topside_extension_chapman_const_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_topside_extension_chapman_const_full(buf: &[u8]) -> Result<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationDensityProfileTopsideExtensionChapmanConst_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_topside_extension_chapman_const_full_unchecked`.
pub fn root_as_iono_observation_density_profile_topside_extension_chapman_const_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationDensityProfileTopsideExtensionChapmanConst_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_topside_extension_chapman_const_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_topside_extension_chapman_const_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationDensityProfileTopsideExtensionChapmanConst_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationDensityProfileTopsideExtensionChapmanConst_Full`.
pub unsafe fn root_as_iono_observation_density_profile_topside_extension_chapman_const_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileTopsideExtensionChapmanConst_Full {
  flatbuffers::root_unchecked::<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationDensityProfileTopsideExtensionChapmanConst_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationDensityProfileTopsideExtensionChapmanConst_Full`.
pub unsafe fn size_prefixed_root_as_iono_observation_density_profile_topside_extension_chapman_const_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileTopsideExtensionChapmanConst_Full {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full>(buf)
}
pub const IONO_OBSERVATION_DENSITY_PROFILE_TOPSIDE_EXTENSION_CHAPMAN_CONST_FULL_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_density_profile_topside_extension_chapman_const_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_TOPSIDE_EXTENSION_CHAPMAN_CONST_FULL_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_density_profile_topside_extension_chapman_const_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_TOPSIDE_EXTENSION_CHAPMAN_CONST_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_density_profile_topside_extension_chapman_const_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_TOPSIDE_EXTENSION_CHAPMAN_CONST_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_density_profile_topside_extension_chapman_const_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationDensityProfileTopsideExtensionChapmanConst_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_TOPSIDE_EXTENSION_CHAPMAN_CONST_FULL_IDENTIFIER));
}
