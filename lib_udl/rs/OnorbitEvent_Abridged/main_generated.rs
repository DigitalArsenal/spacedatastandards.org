// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ONORBIT_EVENT_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ONORBIT_EVENT_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ONORBIT_EVENT_ABRIDGED_DATA_MODE_ENUM: [OnorbitEvent_Abridged_dataMode_Enum; 4] = [
  OnorbitEvent_Abridged_dataMode_Enum::REAL,
  OnorbitEvent_Abridged_dataMode_Enum::TEST,
  OnorbitEvent_Abridged_dataMode_Enum::SIMULATED,
  OnorbitEvent_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OnorbitEvent_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl OnorbitEvent_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OnorbitEvent_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OnorbitEvent_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OnorbitEvent_Abridged_dataMode_Enum {
    type Output = OnorbitEvent_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OnorbitEvent_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OnorbitEvent_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OnorbitEvent_Abridged_dataMode_Enum {}
pub enum OnorbitEvent_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// No description available.
pub struct OnorbitEvent_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OnorbitEvent_Abridged<'a> {
  type Inner = OnorbitEvent_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OnorbitEvent_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_DERIVEDFROM: flatbuffers::VOffsetT = 8;
  pub const VT_DECLASSIFICATIONDATE: flatbuffers::VOffsetT = 10;
  pub const VT_DECLASSIFICATIONSTRING: flatbuffers::VOffsetT = 12;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 14;
  pub const VT_SATNO: flatbuffers::VOffsetT = 16;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 18;
  pub const VT_EVENTTIME: flatbuffers::VOffsetT = 20;
  pub const VT_EVENTTIMENOTES: flatbuffers::VOffsetT = 22;
  pub const VT_OPERATORORGID: flatbuffers::VOffsetT = 24;
  pub const VT_OWNERORGID: flatbuffers::VOffsetT = 26;
  pub const VT_LESSEEORGID: flatbuffers::VOffsetT = 28;
  pub const VT_OPERATEDONBEHALFOFORGID: flatbuffers::VOffsetT = 30;
  pub const VT_GEOPOSITION: flatbuffers::VOffsetT = 32;
  pub const VT_PLANESLOT: flatbuffers::VOffsetT = 34;
  pub const VT_PLANENUMBER: flatbuffers::VOffsetT = 36;
  pub const VT_POSITIONSTATUS: flatbuffers::VOffsetT = 38;
  pub const VT_UNTILTIME: flatbuffers::VOffsetT = 40;
  pub const VT_OFFICIALLOSSDATE: flatbuffers::VOffsetT = 42;
  pub const VT_NETAMOUNT: flatbuffers::VOffsetT = 44;
  pub const VT_UNDERLYINGCAUSE: flatbuffers::VOffsetT = 46;
  pub const VT_CAPABILITYLOSS: flatbuffers::VOffsetT = 48;
  pub const VT_CAPACITYLOSS: flatbuffers::VOffsetT = 50;
  pub const VT_INSURANCELOSS: flatbuffers::VOffsetT = 52;
  pub const VT_THIRDPARTYINSURANCELOSS: flatbuffers::VOffsetT = 54;
  pub const VT_INJURED: flatbuffers::VOffsetT = 56;
  pub const VT_KILLED: flatbuffers::VOffsetT = 58;
  pub const VT_LIFELOST: flatbuffers::VOffsetT = 60;
  pub const VT_AGEATEVENT: flatbuffers::VOffsetT = 62;
  pub const VT_ACHIEVEDFLIGHTPHASE: flatbuffers::VOffsetT = 64;
  pub const VT_OCCURRENCEFLIGHTPHASE: flatbuffers::VOffsetT = 66;
  pub const VT_STAGEATFAULT: flatbuffers::VOffsetT = 68;
  pub const VT_EQUIPMENTATFAULT: flatbuffers::VOffsetT = 70;
  pub const VT_EQUIPMENTTYPEATFAULT: flatbuffers::VOffsetT = 72;
  pub const VT_EQUIPMENTPARTATFAULT: flatbuffers::VOffsetT = 74;
  pub const VT_CONSEQUENTIALEQUIPMENTFAILURE: flatbuffers::VOffsetT = 76;
  pub const VT_INCLINED: flatbuffers::VOffsetT = 78;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 80;
  pub const VT_REMARKS: flatbuffers::VOffsetT = 82;
  pub const VT_INSURANCELOSSNOTES: flatbuffers::VOffsetT = 84;
  pub const VT_CAPABILITYLOSSNOTES: flatbuffers::VOffsetT = 86;
  pub const VT_INSURANCECARRIEDNOTES: flatbuffers::VOffsetT = 88;
  pub const VT_EQUIPMENTCAUSINGLOSSNOTES: flatbuffers::VOffsetT = 90;
  pub const VT_EVENTTYPE: flatbuffers::VOffsetT = 92;
  pub const VT_EVENTRESULT: flatbuffers::VOffsetT = 94;
  pub const VT_OBJECTSTATUS: flatbuffers::VOffsetT = 96;
  pub const VT_SATELLITEPOSITION: flatbuffers::VOffsetT = 98;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 100;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 102;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 104;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 106;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 108;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 110;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OnorbitEvent_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OnorbitEvent_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<OnorbitEvent_Abridged<'bldr>> {
    let mut builder = OnorbitEvent_AbridgedBuilder::new(_fbb);
    builder.add_ageAtEvent(args.ageAtEvent);
    builder.add_lifeLost(args.lifeLost);
    builder.add_thirdPartyInsuranceLoss(args.thirdPartyInsuranceLoss);
    builder.add_insuranceLoss(args.insuranceLoss);
    builder.add_capacityLoss(args.capacityLoss);
    builder.add_capabilityLoss(args.capabilityLoss);
    builder.add_netAmount(args.netAmount);
    builder.add_geoPosition(args.geoPosition);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.satellitePosition { builder.add_satellitePosition(x); }
    if let Some(x) = args.objectStatus { builder.add_objectStatus(x); }
    if let Some(x) = args.eventResult { builder.add_eventResult(x); }
    if let Some(x) = args.eventType { builder.add_eventType(x); }
    if let Some(x) = args.equipmentCausingLossNotes { builder.add_equipmentCausingLossNotes(x); }
    if let Some(x) = args.insuranceCarriedNotes { builder.add_insuranceCarriedNotes(x); }
    if let Some(x) = args.capabilityLossNotes { builder.add_capabilityLossNotes(x); }
    if let Some(x) = args.insuranceLossNotes { builder.add_insuranceLossNotes(x); }
    if let Some(x) = args.remarks { builder.add_remarks(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.consequentialEquipmentFailure { builder.add_consequentialEquipmentFailure(x); }
    if let Some(x) = args.equipmentPartAtFault { builder.add_equipmentPartAtFault(x); }
    if let Some(x) = args.equipmentTypeAtFault { builder.add_equipmentTypeAtFault(x); }
    if let Some(x) = args.equipmentAtFault { builder.add_equipmentAtFault(x); }
    if let Some(x) = args.stageAtFault { builder.add_stageAtFault(x); }
    if let Some(x) = args.occurrenceFlightPhase { builder.add_occurrenceFlightPhase(x); }
    if let Some(x) = args.achievedFlightPhase { builder.add_achievedFlightPhase(x); }
    builder.add_killed(args.killed);
    builder.add_injured(args.injured);
    if let Some(x) = args.underlyingCause { builder.add_underlyingCause(x); }
    if let Some(x) = args.officialLossDate { builder.add_officialLossDate(x); }
    if let Some(x) = args.untilTime { builder.add_untilTime(x); }
    if let Some(x) = args.positionStatus { builder.add_positionStatus(x); }
    if let Some(x) = args.planeNumber { builder.add_planeNumber(x); }
    if let Some(x) = args.planeSlot { builder.add_planeSlot(x); }
    if let Some(x) = args.operatedOnBehalfOfOrgId { builder.add_operatedOnBehalfOfOrgId(x); }
    if let Some(x) = args.lesseeOrgId { builder.add_lesseeOrgId(x); }
    if let Some(x) = args.ownerOrgId { builder.add_ownerOrgId(x); }
    if let Some(x) = args.operatorOrgId { builder.add_operatorOrgId(x); }
    if let Some(x) = args.eventTimeNotes { builder.add_eventTimeNotes(x); }
    if let Some(x) = args.eventTime { builder.add_eventTime(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.declassificationString { builder.add_declassificationString(x); }
    if let Some(x) = args.declassificationDate { builder.add_declassificationDate(x); }
    if let Some(x) = args.derivedFrom { builder.add_derivedFrom(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_inclined(args.inclined);
    builder.finish()
  }

  pub fn unpack(&self) -> OnorbitEvent_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let derivedFrom = self.derivedFrom().map(|x| {
      x.to_string()
    });
    let declassificationDate = self.declassificationDate().map(|x| {
      x.to_string()
    });
    let declassificationString = self.declassificationString().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let eventTime = self.eventTime().map(|x| {
      x.to_string()
    });
    let eventTimeNotes = self.eventTimeNotes().map(|x| {
      x.to_string()
    });
    let operatorOrgId = self.operatorOrgId().map(|x| {
      x.to_string()
    });
    let ownerOrgId = self.ownerOrgId().map(|x| {
      x.to_string()
    });
    let lesseeOrgId = self.lesseeOrgId().map(|x| {
      x.to_string()
    });
    let operatedOnBehalfOfOrgId = self.operatedOnBehalfOfOrgId().map(|x| {
      x.to_string()
    });
    let geoPosition = self.geoPosition();
    let planeSlot = self.planeSlot().map(|x| {
      x.to_string()
    });
    let planeNumber = self.planeNumber().map(|x| {
      x.to_string()
    });
    let positionStatus = self.positionStatus().map(|x| {
      x.to_string()
    });
    let untilTime = self.untilTime().map(|x| {
      x.to_string()
    });
    let officialLossDate = self.officialLossDate().map(|x| {
      x.to_string()
    });
    let netAmount = self.netAmount();
    let underlyingCause = self.underlyingCause().map(|x| {
      x.to_string()
    });
    let capabilityLoss = self.capabilityLoss();
    let capacityLoss = self.capacityLoss();
    let insuranceLoss = self.insuranceLoss();
    let thirdPartyInsuranceLoss = self.thirdPartyInsuranceLoss();
    let injured = self.injured();
    let killed = self.killed();
    let lifeLost = self.lifeLost();
    let ageAtEvent = self.ageAtEvent();
    let achievedFlightPhase = self.achievedFlightPhase().map(|x| {
      x.to_string()
    });
    let occurrenceFlightPhase = self.occurrenceFlightPhase().map(|x| {
      x.to_string()
    });
    let stageAtFault = self.stageAtFault().map(|x| {
      x.to_string()
    });
    let equipmentAtFault = self.equipmentAtFault().map(|x| {
      x.to_string()
    });
    let equipmentTypeAtFault = self.equipmentTypeAtFault().map(|x| {
      x.to_string()
    });
    let equipmentPartAtFault = self.equipmentPartAtFault().map(|x| {
      x.to_string()
    });
    let consequentialEquipmentFailure = self.consequentialEquipmentFailure().map(|x| {
      x.to_string()
    });
    let inclined = self.inclined();
    let description = self.description().map(|x| {
      x.to_string()
    });
    let remarks = self.remarks().map(|x| {
      x.to_string()
    });
    let insuranceLossNotes = self.insuranceLossNotes().map(|x| {
      x.to_string()
    });
    let capabilityLossNotes = self.capabilityLossNotes().map(|x| {
      x.to_string()
    });
    let insuranceCarriedNotes = self.insuranceCarriedNotes().map(|x| {
      x.to_string()
    });
    let equipmentCausingLossNotes = self.equipmentCausingLossNotes().map(|x| {
      x.to_string()
    });
    let eventType = self.eventType().map(|x| {
      x.to_string()
    });
    let eventResult = self.eventResult().map(|x| {
      x.to_string()
    });
    let objectStatus = self.objectStatus().map(|x| {
      x.to_string()
    });
    let satellitePosition = self.satellitePosition().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    OnorbitEvent_AbridgedT {
      id,
      classificationMarking,
      derivedFrom,
      declassificationDate,
      declassificationString,
      idOnOrbit,
      satNo,
      origObjectId,
      eventTime,
      eventTimeNotes,
      operatorOrgId,
      ownerOrgId,
      lesseeOrgId,
      operatedOnBehalfOfOrgId,
      geoPosition,
      planeSlot,
      planeNumber,
      positionStatus,
      untilTime,
      officialLossDate,
      netAmount,
      underlyingCause,
      capabilityLoss,
      capacityLoss,
      insuranceLoss,
      thirdPartyInsuranceLoss,
      injured,
      killed,
      lifeLost,
      ageAtEvent,
      achievedFlightPhase,
      occurrenceFlightPhase,
      stageAtFault,
      equipmentAtFault,
      equipmentTypeAtFault,
      equipmentPartAtFault,
      consequentialEquipmentFailure,
      inclined,
      description,
      remarks,
      insuranceLossNotes,
      capabilityLossNotes,
      insuranceCarriedNotes,
      equipmentCausingLossNotes,
      eventType,
      eventResult,
      objectStatus,
      satellitePosition,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONORBITEVENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The sources or SCG references from which the classification of this data is derived.
  /// Example: /// Example: DERIVED_SOURCE
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn derivedFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_DERIVEDFROM, None)}
  }
  /// The declassification date of this data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:02:02.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declassificationDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_DECLASSIFICATIONDATE, None)}
  }
  /// Declassification string of this data.
  /// Example: /// Example: DECLASS_STRING
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn declassificationString(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_DECLASSIFICATIONSTRING, None)}
  }
  /// Unique identifier of the on-orbit object for this event.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_IDONORBIT, None)}
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OnorbitEvent_Abridged::VT_SATNO, Some(0)).unwrap()}
  }
  /// Original object ID or Catalog Number provided by source (may not map to an existing idOnOrbit in UDL).
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_ORIGOBJECTID, None)}
  }
  /// Date/Time of the event. See eventTimeNotes for remarks on the accuracy of the date time.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eventTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EVENTTIME, None)}
  }
  /// Notes/remarks on the validity/accuracy of the eventTime.
  /// Example: /// Example: Notes on validity
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn eventTimeNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EVENTTIMENOTES, None)}
  }
  /// Organization ID of the operator of the on-orbit spacecraft at the time of the event.
  /// Example: /// Example: OPERATORORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn operatorOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_OPERATORORGID, None)}
  }
  /// Organization ID of the owner of the on-orbit spacecraft at the time of the event.
  /// Example: /// Example: OWNERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn ownerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_OWNERORGID, None)}
  }
  /// Unique identifier of the organization which leases this on-orbit spacecraft.
  /// Example: /// Example: LESSEEORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn lesseeOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_LESSEEORGID, None)}
  }
  /// Unique identifier of the organization on whose behalf the on-orbit spacecraft is operated.
  /// Example: /// Example: OPERATEDONBEHALFOFORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn operatedOnBehalfOfOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_OPERATEDONBEHALFOFORGID, None)}
  }
  /// GEO position longitude at event time if applicable. Negative values are west.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geoPosition(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_GEOPOSITION, Some(0.0)).unwrap()}
  }
  /// GEO plane slot of the spacecraft at event time.
  /// Example: /// Example: example_slot
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn planeSlot(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_PLANESLOT, None)}
  }
  /// GEO slot plane number/designator of the spacecraft at event time.
  /// Example: /// Example: PL_1
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn planeNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_PLANENUMBER, None)}
  }
  /// Position status of the spacecraft at event time (e.g. Stable, Drifting/Tumbling, etc).
  /// Example: /// Example: Stable
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn positionStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_POSITIONSTATUS, None)}
  }
  /// Maximum validity time of the event.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn untilTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_UNTILTIME, None)}
  }
  /// Date time of official loss of the spacecraft.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn officialLossDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_OFFICIALLOSSDATE, None)}
  }
  /// Net amount of the insurance claim for the event, in USD.
  /// Example: /// Example: 10000.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn netAmount(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_NETAMOUNT, Some(0.0)).unwrap()}
  }
  /// Underlying cause of the event.
  /// Example: /// Example: CAUSE_EXAMPLE
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn underlyingCause(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_UNDERLYINGCAUSE, None)}
  }
  /// Spacecraft capability loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn capabilityLoss(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_CAPABILITYLOSS, Some(0.0)).unwrap()}
  }
  /// Spacecraft capacity loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn capacityLoss(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_CAPACITYLOSS, Some(0.0)).unwrap()}
  }
  /// Insurance loss incurred, as a fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn insuranceLoss(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_INSURANCELOSS, Some(0.0)).unwrap()}
  }
  /// Insurance loss incurred by 3rd party insurance, in USD.
  /// Example: /// Example: 10000.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn thirdPartyInsuranceLoss(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_THIRDPARTYINSURANCELOSS, Some(0.0)).unwrap()}
  }
  /// Number of humans injured in the event.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn injured(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OnorbitEvent_Abridged::VT_INJURED, Some(0)).unwrap()}
  }
  /// Number of humans killed in the event.
  /// Example: /// Example: 23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn killed(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OnorbitEvent_Abridged::VT_KILLED, Some(0)).unwrap()}
  }
  /// Spacecraft life lost due to the event as a percent/fraction of 1.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lifeLost(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_LIFELOST, Some(0.0)).unwrap()}
  }
  /// Spacecraft age at the event in years.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ageAtEvent(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OnorbitEvent_Abridged::VT_AGEATEVENT, Some(0.0)).unwrap()}
  }
  /// Achieved phase of flight prior to the event.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn achievedFlightPhase(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_ACHIEVEDFLIGHTPHASE, None)}
  }
  /// Phase of flight during which the event occurred.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn occurrenceFlightPhase(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_OCCURRENCEFLIGHTPHASE, None)}
  }
  /// Faulty stage of flight for the event.
  /// Example: /// Example: Phase 2
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn stageAtFault(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_STAGEATFAULT, None)}
  }
  /// Equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn equipmentAtFault(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EQUIPMENTATFAULT, None)}
  }
  /// Type of the equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn equipmentTypeAtFault(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EQUIPMENTTYPEATFAULT, None)}
  }
  /// Specific part of the equipment on the spacecraft which caused the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn equipmentPartAtFault(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EQUIPMENTPARTATFAULT, None)}
  }
  /// Additional equipment which failed as a result of faulty equipment on the spacecraft during the event.
  /// Example: /// Example: Example Equipment
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn consequentialEquipmentFailure(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_CONSEQUENTIALEQUIPMENTFAILURE, None)}
  }
  /// Boolean indicating if the spacecraft is inclined.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn inclined(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(OnorbitEvent_Abridged::VT_INCLINED, Some(false)).unwrap()}
  }
  /// Notes/description of the event.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_DESCRIPTION, None)}
  }
  /// Additional remarks on the event description.
  /// Example: /// Example: Example remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn remarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_REMARKS, None)}
  }
  /// Additional insurance notes if the event is an official loss.
  /// Example: /// Example: Insurance notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn insuranceLossNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_INSURANCELOSSNOTES, None)}
  }
  /// Notes on capability loss at the time of event.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn capabilityLossNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_CAPABILITYLOSSNOTES, None)}
  }
  /// Additional insurance notes on coverages at the time of event.
  /// Example: /// Example: Insurance notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn insuranceCarriedNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_INSURANCECARRIEDNOTES, None)}
  }
  /// Additional notes on the equipment causing the event/loss.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn equipmentCausingLossNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EQUIPMENTCAUSINGLOSSNOTES, None)}
  }
  /// The type of on-orbit event being reported.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn eventType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EVENTTYPE, None)}
  }
  /// The result of the reported event.
  /// Example: /// Example: Example results
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn eventResult(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_EVENTRESULT, None)}
  }
  /// The status of the on-orbit object.
  /// Example: /// Example: Status1
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn objectStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_OBJECTSTATUS, None)}
  }
  /// Description of the satellite orbital position or regime.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn satellitePosition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_SATELLITEPOSITION, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> OnorbitEvent_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OnorbitEvent_Abridged_dataMode_Enum>(OnorbitEvent_Abridged::VT_DATAMODE, Some(OnorbitEvent_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_CREATEDBY, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitEvent_Abridged::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for OnorbitEvent_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("derivedFrom", Self::VT_DERIVEDFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("declassificationDate", Self::VT_DECLASSIFICATIONDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("declassificationString", Self::VT_DECLASSIFICATIONSTRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eventTime", Self::VT_EVENTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eventTimeNotes", Self::VT_EVENTTIMENOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operatorOrgId", Self::VT_OPERATORORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ownerOrgId", Self::VT_OWNERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lesseeOrgId", Self::VT_LESSEEORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operatedOnBehalfOfOrgId", Self::VT_OPERATEDONBEHALFOFORGID, false)?
     .visit_field::<f64>("geoPosition", Self::VT_GEOPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("planeSlot", Self::VT_PLANESLOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("planeNumber", Self::VT_PLANENUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("positionStatus", Self::VT_POSITIONSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("untilTime", Self::VT_UNTILTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("officialLossDate", Self::VT_OFFICIALLOSSDATE, false)?
     .visit_field::<f64>("netAmount", Self::VT_NETAMOUNT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("underlyingCause", Self::VT_UNDERLYINGCAUSE, false)?
     .visit_field::<f64>("capabilityLoss", Self::VT_CAPABILITYLOSS, false)?
     .visit_field::<f64>("capacityLoss", Self::VT_CAPACITYLOSS, false)?
     .visit_field::<f64>("insuranceLoss", Self::VT_INSURANCELOSS, false)?
     .visit_field::<f64>("thirdPartyInsuranceLoss", Self::VT_THIRDPARTYINSURANCELOSS, false)?
     .visit_field::<i32>("injured", Self::VT_INJURED, false)?
     .visit_field::<i32>("killed", Self::VT_KILLED, false)?
     .visit_field::<f64>("lifeLost", Self::VT_LIFELOST, false)?
     .visit_field::<f64>("ageAtEvent", Self::VT_AGEATEVENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("achievedFlightPhase", Self::VT_ACHIEVEDFLIGHTPHASE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("occurrenceFlightPhase", Self::VT_OCCURRENCEFLIGHTPHASE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("stageAtFault", Self::VT_STAGEATFAULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("equipmentAtFault", Self::VT_EQUIPMENTATFAULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("equipmentTypeAtFault", Self::VT_EQUIPMENTTYPEATFAULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("equipmentPartAtFault", Self::VT_EQUIPMENTPARTATFAULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("consequentialEquipmentFailure", Self::VT_CONSEQUENTIALEQUIPMENTFAILURE, false)?
     .visit_field::<bool>("inclined", Self::VT_INCLINED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("remarks", Self::VT_REMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("insuranceLossNotes", Self::VT_INSURANCELOSSNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("capabilityLossNotes", Self::VT_CAPABILITYLOSSNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("insuranceCarriedNotes", Self::VT_INSURANCECARRIEDNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("equipmentCausingLossNotes", Self::VT_EQUIPMENTCAUSINGLOSSNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eventType", Self::VT_EVENTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eventResult", Self::VT_EVENTRESULT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objectStatus", Self::VT_OBJECTSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("satellitePosition", Self::VT_SATELLITEPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<OnorbitEvent_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct OnorbitEvent_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub derivedFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub declassificationDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub declassificationString: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eventTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eventTimeNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operatorOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ownerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lesseeOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operatedOnBehalfOfOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geoPosition: f64,
    pub planeSlot: Option<flatbuffers::WIPOffset<&'a str>>,
    pub planeNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub positionStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub untilTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub officialLossDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub netAmount: f64,
    pub underlyingCause: Option<flatbuffers::WIPOffset<&'a str>>,
    pub capabilityLoss: f64,
    pub capacityLoss: f64,
    pub insuranceLoss: f64,
    pub thirdPartyInsuranceLoss: f64,
    pub injured: i32,
    pub killed: i32,
    pub lifeLost: f64,
    pub ageAtEvent: f64,
    pub achievedFlightPhase: Option<flatbuffers::WIPOffset<&'a str>>,
    pub occurrenceFlightPhase: Option<flatbuffers::WIPOffset<&'a str>>,
    pub stageAtFault: Option<flatbuffers::WIPOffset<&'a str>>,
    pub equipmentAtFault: Option<flatbuffers::WIPOffset<&'a str>>,
    pub equipmentTypeAtFault: Option<flatbuffers::WIPOffset<&'a str>>,
    pub equipmentPartAtFault: Option<flatbuffers::WIPOffset<&'a str>>,
    pub consequentialEquipmentFailure: Option<flatbuffers::WIPOffset<&'a str>>,
    pub inclined: bool,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub remarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub insuranceLossNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub capabilityLossNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub insuranceCarriedNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub equipmentCausingLossNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eventType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eventResult: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objectStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satellitePosition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: OnorbitEvent_Abridged_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for OnorbitEvent_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    OnorbitEvent_AbridgedArgs {
      id: None,
      classificationMarking: None,
      derivedFrom: None,
      declassificationDate: None,
      declassificationString: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      eventTime: None,
      eventTimeNotes: None,
      operatorOrgId: None,
      ownerOrgId: None,
      lesseeOrgId: None,
      operatedOnBehalfOfOrgId: None,
      geoPosition: 0.0,
      planeSlot: None,
      planeNumber: None,
      positionStatus: None,
      untilTime: None,
      officialLossDate: None,
      netAmount: 0.0,
      underlyingCause: None,
      capabilityLoss: 0.0,
      capacityLoss: 0.0,
      insuranceLoss: 0.0,
      thirdPartyInsuranceLoss: 0.0,
      injured: 0,
      killed: 0,
      lifeLost: 0.0,
      ageAtEvent: 0.0,
      achievedFlightPhase: None,
      occurrenceFlightPhase: None,
      stageAtFault: None,
      equipmentAtFault: None,
      equipmentTypeAtFault: None,
      equipmentPartAtFault: None,
      consequentialEquipmentFailure: None,
      inclined: false,
      description: None,
      remarks: None,
      insuranceLossNotes: None,
      capabilityLossNotes: None,
      insuranceCarriedNotes: None,
      equipmentCausingLossNotes: None,
      eventType: None,
      eventResult: None,
      objectStatus: None,
      satellitePosition: None,
      source: None,
      origin: None,
      dataMode: OnorbitEvent_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}

pub struct OnorbitEvent_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OnorbitEvent_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_derivedFrom(&mut self, derivedFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_DERIVEDFROM, derivedFrom);
  }
  #[inline]
  pub fn add_declassificationDate(&mut self, declassificationDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_DECLASSIFICATIONDATE, declassificationDate);
  }
  #[inline]
  pub fn add_declassificationString(&mut self, declassificationString: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_DECLASSIFICATIONSTRING, declassificationString);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(OnorbitEvent_Abridged::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_eventTime(&mut self, eventTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EVENTTIME, eventTime);
  }
  #[inline]
  pub fn add_eventTimeNotes(&mut self, eventTimeNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EVENTTIMENOTES, eventTimeNotes);
  }
  #[inline]
  pub fn add_operatorOrgId(&mut self, operatorOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_OPERATORORGID, operatorOrgId);
  }
  #[inline]
  pub fn add_ownerOrgId(&mut self, ownerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_OWNERORGID, ownerOrgId);
  }
  #[inline]
  pub fn add_lesseeOrgId(&mut self, lesseeOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_LESSEEORGID, lesseeOrgId);
  }
  #[inline]
  pub fn add_operatedOnBehalfOfOrgId(&mut self, operatedOnBehalfOfOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_OPERATEDONBEHALFOFORGID, operatedOnBehalfOfOrgId);
  }
  #[inline]
  pub fn add_geoPosition(&mut self, geoPosition: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_GEOPOSITION, geoPosition, 0.0);
  }
  #[inline]
  pub fn add_planeSlot(&mut self, planeSlot: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_PLANESLOT, planeSlot);
  }
  #[inline]
  pub fn add_planeNumber(&mut self, planeNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_PLANENUMBER, planeNumber);
  }
  #[inline]
  pub fn add_positionStatus(&mut self, positionStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_POSITIONSTATUS, positionStatus);
  }
  #[inline]
  pub fn add_untilTime(&mut self, untilTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_UNTILTIME, untilTime);
  }
  #[inline]
  pub fn add_officialLossDate(&mut self, officialLossDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_OFFICIALLOSSDATE, officialLossDate);
  }
  #[inline]
  pub fn add_netAmount(&mut self, netAmount: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_NETAMOUNT, netAmount, 0.0);
  }
  #[inline]
  pub fn add_underlyingCause(&mut self, underlyingCause: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_UNDERLYINGCAUSE, underlyingCause);
  }
  #[inline]
  pub fn add_capabilityLoss(&mut self, capabilityLoss: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_CAPABILITYLOSS, capabilityLoss, 0.0);
  }
  #[inline]
  pub fn add_capacityLoss(&mut self, capacityLoss: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_CAPACITYLOSS, capacityLoss, 0.0);
  }
  #[inline]
  pub fn add_insuranceLoss(&mut self, insuranceLoss: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_INSURANCELOSS, insuranceLoss, 0.0);
  }
  #[inline]
  pub fn add_thirdPartyInsuranceLoss(&mut self, thirdPartyInsuranceLoss: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_THIRDPARTYINSURANCELOSS, thirdPartyInsuranceLoss, 0.0);
  }
  #[inline]
  pub fn add_injured(&mut self, injured: i32) {
    self.fbb_.push_slot::<i32>(OnorbitEvent_Abridged::VT_INJURED, injured, 0);
  }
  #[inline]
  pub fn add_killed(&mut self, killed: i32) {
    self.fbb_.push_slot::<i32>(OnorbitEvent_Abridged::VT_KILLED, killed, 0);
  }
  #[inline]
  pub fn add_lifeLost(&mut self, lifeLost: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_LIFELOST, lifeLost, 0.0);
  }
  #[inline]
  pub fn add_ageAtEvent(&mut self, ageAtEvent: f64) {
    self.fbb_.push_slot::<f64>(OnorbitEvent_Abridged::VT_AGEATEVENT, ageAtEvent, 0.0);
  }
  #[inline]
  pub fn add_achievedFlightPhase(&mut self, achievedFlightPhase: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_ACHIEVEDFLIGHTPHASE, achievedFlightPhase);
  }
  #[inline]
  pub fn add_occurrenceFlightPhase(&mut self, occurrenceFlightPhase: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_OCCURRENCEFLIGHTPHASE, occurrenceFlightPhase);
  }
  #[inline]
  pub fn add_stageAtFault(&mut self, stageAtFault: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_STAGEATFAULT, stageAtFault);
  }
  #[inline]
  pub fn add_equipmentAtFault(&mut self, equipmentAtFault: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EQUIPMENTATFAULT, equipmentAtFault);
  }
  #[inline]
  pub fn add_equipmentTypeAtFault(&mut self, equipmentTypeAtFault: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EQUIPMENTTYPEATFAULT, equipmentTypeAtFault);
  }
  #[inline]
  pub fn add_equipmentPartAtFault(&mut self, equipmentPartAtFault: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EQUIPMENTPARTATFAULT, equipmentPartAtFault);
  }
  #[inline]
  pub fn add_consequentialEquipmentFailure(&mut self, consequentialEquipmentFailure: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_CONSEQUENTIALEQUIPMENTFAILURE, consequentialEquipmentFailure);
  }
  #[inline]
  pub fn add_inclined(&mut self, inclined: bool) {
    self.fbb_.push_slot::<bool>(OnorbitEvent_Abridged::VT_INCLINED, inclined, false);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_remarks(&mut self, remarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_REMARKS, remarks);
  }
  #[inline]
  pub fn add_insuranceLossNotes(&mut self, insuranceLossNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_INSURANCELOSSNOTES, insuranceLossNotes);
  }
  #[inline]
  pub fn add_capabilityLossNotes(&mut self, capabilityLossNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_CAPABILITYLOSSNOTES, capabilityLossNotes);
  }
  #[inline]
  pub fn add_insuranceCarriedNotes(&mut self, insuranceCarriedNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_INSURANCECARRIEDNOTES, insuranceCarriedNotes);
  }
  #[inline]
  pub fn add_equipmentCausingLossNotes(&mut self, equipmentCausingLossNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EQUIPMENTCAUSINGLOSSNOTES, equipmentCausingLossNotes);
  }
  #[inline]
  pub fn add_eventType(&mut self, eventType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EVENTTYPE, eventType);
  }
  #[inline]
  pub fn add_eventResult(&mut self, eventResult: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_EVENTRESULT, eventResult);
  }
  #[inline]
  pub fn add_objectStatus(&mut self, objectStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_OBJECTSTATUS, objectStatus);
  }
  #[inline]
  pub fn add_satellitePosition(&mut self, satellitePosition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_SATELLITEPOSITION, satellitePosition);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: OnorbitEvent_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<OnorbitEvent_Abridged_dataMode_Enum>(OnorbitEvent_Abridged::VT_DATAMODE, dataMode, OnorbitEvent_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitEvent_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OnorbitEvent_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OnorbitEvent_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OnorbitEvent_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OnorbitEvent_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OnorbitEvent_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("derivedFrom", &self.derivedFrom());
      ds.field("declassificationDate", &self.declassificationDate());
      ds.field("declassificationString", &self.declassificationString());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("eventTime", &self.eventTime());
      ds.field("eventTimeNotes", &self.eventTimeNotes());
      ds.field("operatorOrgId", &self.operatorOrgId());
      ds.field("ownerOrgId", &self.ownerOrgId());
      ds.field("lesseeOrgId", &self.lesseeOrgId());
      ds.field("operatedOnBehalfOfOrgId", &self.operatedOnBehalfOfOrgId());
      ds.field("geoPosition", &self.geoPosition());
      ds.field("planeSlot", &self.planeSlot());
      ds.field("planeNumber", &self.planeNumber());
      ds.field("positionStatus", &self.positionStatus());
      ds.field("untilTime", &self.untilTime());
      ds.field("officialLossDate", &self.officialLossDate());
      ds.field("netAmount", &self.netAmount());
      ds.field("underlyingCause", &self.underlyingCause());
      ds.field("capabilityLoss", &self.capabilityLoss());
      ds.field("capacityLoss", &self.capacityLoss());
      ds.field("insuranceLoss", &self.insuranceLoss());
      ds.field("thirdPartyInsuranceLoss", &self.thirdPartyInsuranceLoss());
      ds.field("injured", &self.injured());
      ds.field("killed", &self.killed());
      ds.field("lifeLost", &self.lifeLost());
      ds.field("ageAtEvent", &self.ageAtEvent());
      ds.field("achievedFlightPhase", &self.achievedFlightPhase());
      ds.field("occurrenceFlightPhase", &self.occurrenceFlightPhase());
      ds.field("stageAtFault", &self.stageAtFault());
      ds.field("equipmentAtFault", &self.equipmentAtFault());
      ds.field("equipmentTypeAtFault", &self.equipmentTypeAtFault());
      ds.field("equipmentPartAtFault", &self.equipmentPartAtFault());
      ds.field("consequentialEquipmentFailure", &self.consequentialEquipmentFailure());
      ds.field("inclined", &self.inclined());
      ds.field("description", &self.description());
      ds.field("remarks", &self.remarks());
      ds.field("insuranceLossNotes", &self.insuranceLossNotes());
      ds.field("capabilityLossNotes", &self.capabilityLossNotes());
      ds.field("insuranceCarriedNotes", &self.insuranceCarriedNotes());
      ds.field("equipmentCausingLossNotes", &self.equipmentCausingLossNotes());
      ds.field("eventType", &self.eventType());
      ds.field("eventResult", &self.eventResult());
      ds.field("objectStatus", &self.objectStatus());
      ds.field("satellitePosition", &self.satellitePosition());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OnorbitEvent_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub derivedFrom: Option<String>,
  pub declassificationDate: Option<String>,
  pub declassificationString: Option<String>,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub origObjectId: Option<String>,
  pub eventTime: Option<String>,
  pub eventTimeNotes: Option<String>,
  pub operatorOrgId: Option<String>,
  pub ownerOrgId: Option<String>,
  pub lesseeOrgId: Option<String>,
  pub operatedOnBehalfOfOrgId: Option<String>,
  pub geoPosition: f64,
  pub planeSlot: Option<String>,
  pub planeNumber: Option<String>,
  pub positionStatus: Option<String>,
  pub untilTime: Option<String>,
  pub officialLossDate: Option<String>,
  pub netAmount: f64,
  pub underlyingCause: Option<String>,
  pub capabilityLoss: f64,
  pub capacityLoss: f64,
  pub insuranceLoss: f64,
  pub thirdPartyInsuranceLoss: f64,
  pub injured: i32,
  pub killed: i32,
  pub lifeLost: f64,
  pub ageAtEvent: f64,
  pub achievedFlightPhase: Option<String>,
  pub occurrenceFlightPhase: Option<String>,
  pub stageAtFault: Option<String>,
  pub equipmentAtFault: Option<String>,
  pub equipmentTypeAtFault: Option<String>,
  pub equipmentPartAtFault: Option<String>,
  pub consequentialEquipmentFailure: Option<String>,
  pub inclined: bool,
  pub description: Option<String>,
  pub remarks: Option<String>,
  pub insuranceLossNotes: Option<String>,
  pub capabilityLossNotes: Option<String>,
  pub insuranceCarriedNotes: Option<String>,
  pub equipmentCausingLossNotes: Option<String>,
  pub eventType: Option<String>,
  pub eventResult: Option<String>,
  pub objectStatus: Option<String>,
  pub satellitePosition: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: OnorbitEvent_Abridged_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub origNetwork: Option<String>,
}
impl Default for OnorbitEvent_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      derivedFrom: None,
      declassificationDate: None,
      declassificationString: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      eventTime: None,
      eventTimeNotes: None,
      operatorOrgId: None,
      ownerOrgId: None,
      lesseeOrgId: None,
      operatedOnBehalfOfOrgId: None,
      geoPosition: 0.0,
      planeSlot: None,
      planeNumber: None,
      positionStatus: None,
      untilTime: None,
      officialLossDate: None,
      netAmount: 0.0,
      underlyingCause: None,
      capabilityLoss: 0.0,
      capacityLoss: 0.0,
      insuranceLoss: 0.0,
      thirdPartyInsuranceLoss: 0.0,
      injured: 0,
      killed: 0,
      lifeLost: 0.0,
      ageAtEvent: 0.0,
      achievedFlightPhase: None,
      occurrenceFlightPhase: None,
      stageAtFault: None,
      equipmentAtFault: None,
      equipmentTypeAtFault: None,
      equipmentPartAtFault: None,
      consequentialEquipmentFailure: None,
      inclined: false,
      description: None,
      remarks: None,
      insuranceLossNotes: None,
      capabilityLossNotes: None,
      insuranceCarriedNotes: None,
      equipmentCausingLossNotes: None,
      eventType: None,
      eventResult: None,
      objectStatus: None,
      satellitePosition: None,
      source: None,
      origin: None,
      dataMode: OnorbitEvent_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}
impl OnorbitEvent_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OnorbitEvent_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let derivedFrom = self.derivedFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let declassificationDate = self.declassificationDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let declassificationString = self.declassificationString.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eventTime = self.eventTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eventTimeNotes = self.eventTimeNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let operatorOrgId = self.operatorOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ownerOrgId = self.ownerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lesseeOrgId = self.lesseeOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let operatedOnBehalfOfOrgId = self.operatedOnBehalfOfOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geoPosition = self.geoPosition;
    let planeSlot = self.planeSlot.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let planeNumber = self.planeNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let positionStatus = self.positionStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let untilTime = self.untilTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let officialLossDate = self.officialLossDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let netAmount = self.netAmount;
    let underlyingCause = self.underlyingCause.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let capabilityLoss = self.capabilityLoss;
    let capacityLoss = self.capacityLoss;
    let insuranceLoss = self.insuranceLoss;
    let thirdPartyInsuranceLoss = self.thirdPartyInsuranceLoss;
    let injured = self.injured;
    let killed = self.killed;
    let lifeLost = self.lifeLost;
    let ageAtEvent = self.ageAtEvent;
    let achievedFlightPhase = self.achievedFlightPhase.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let occurrenceFlightPhase = self.occurrenceFlightPhase.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let stageAtFault = self.stageAtFault.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let equipmentAtFault = self.equipmentAtFault.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let equipmentTypeAtFault = self.equipmentTypeAtFault.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let equipmentPartAtFault = self.equipmentPartAtFault.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let consequentialEquipmentFailure = self.consequentialEquipmentFailure.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let inclined = self.inclined;
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let remarks = self.remarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let insuranceLossNotes = self.insuranceLossNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let capabilityLossNotes = self.capabilityLossNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let insuranceCarriedNotes = self.insuranceCarriedNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let equipmentCausingLossNotes = self.equipmentCausingLossNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eventType = self.eventType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eventResult = self.eventResult.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objectStatus = self.objectStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satellitePosition = self.satellitePosition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    OnorbitEvent_Abridged::create(_fbb, &OnorbitEvent_AbridgedArgs{
      id,
      classificationMarking,
      derivedFrom,
      declassificationDate,
      declassificationString,
      idOnOrbit,
      satNo,
      origObjectId,
      eventTime,
      eventTimeNotes,
      operatorOrgId,
      ownerOrgId,
      lesseeOrgId,
      operatedOnBehalfOfOrgId,
      geoPosition,
      planeSlot,
      planeNumber,
      positionStatus,
      untilTime,
      officialLossDate,
      netAmount,
      underlyingCause,
      capabilityLoss,
      capacityLoss,
      insuranceLoss,
      thirdPartyInsuranceLoss,
      injured,
      killed,
      lifeLost,
      ageAtEvent,
      achievedFlightPhase,
      occurrenceFlightPhase,
      stageAtFault,
      equipmentAtFault,
      equipmentTypeAtFault,
      equipmentPartAtFault,
      consequentialEquipmentFailure,
      inclined,
      description,
      remarks,
      insuranceLossNotes,
      capabilityLossNotes,
      insuranceCarriedNotes,
      equipmentCausingLossNotes,
      eventType,
      eventResult,
      objectStatus,
      satellitePosition,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OnorbitEvent_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_event_abridged_unchecked`.
pub fn root_as_onorbit_event_abridged(buf: &[u8]) -> Result<OnorbitEvent_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OnorbitEvent_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OnorbitEvent_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_onorbit_event_abridged_unchecked`.
pub fn size_prefixed_root_as_onorbit_event_abridged(buf: &[u8]) -> Result<OnorbitEvent_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OnorbitEvent_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OnorbitEvent_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_event_abridged_unchecked`.
pub fn root_as_onorbit_event_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnorbitEvent_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OnorbitEvent_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OnorbitEvent_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_event_abridged_unchecked`.
pub fn size_prefixed_root_as_onorbit_event_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnorbitEvent_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OnorbitEvent_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OnorbitEvent_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OnorbitEvent_Abridged`.
pub unsafe fn root_as_onorbit_event_abridged_unchecked(buf: &[u8]) -> OnorbitEvent_Abridged {
  flatbuffers::root_unchecked::<OnorbitEvent_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OnorbitEvent_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OnorbitEvent_Abridged`.
pub unsafe fn size_prefixed_root_as_onorbit_event_abridged_unchecked(buf: &[u8]) -> OnorbitEvent_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<OnorbitEvent_Abridged>(buf)
}
pub const ONORBIT_EVENT_ABRIDGED_IDENTIFIER: &str = "ONOR";

#[inline]
pub fn onorbit_event_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_EVENT_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn onorbit_event_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_EVENT_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_onorbit_event_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OnorbitEvent_Abridged<'a>>) {
  fbb.finish(root, Some(ONORBIT_EVENT_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_onorbit_event_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OnorbitEvent_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(ONORBIT_EVENT_ABRIDGED_IDENTIFIER));
}
