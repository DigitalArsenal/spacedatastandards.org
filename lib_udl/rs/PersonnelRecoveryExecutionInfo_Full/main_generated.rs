// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PersonnelRecoveryExecutionInfo_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information pertaining to the details of executing the recovery.
pub struct PersonnelRecoveryExecutionInfo_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PersonnelRecoveryExecutionInfo_Full<'a> {
  type Inner = PersonnelRecoveryExecutionInfo_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PersonnelRecoveryExecutionInfo_Full<'a> {
  pub const VT_INITIALPOINT: flatbuffers::VOffsetT = 4;
  pub const VT_INGRESS: flatbuffers::VOffsetT = 6;
  pub const VT_OBJSTRATEGY: flatbuffers::VOffsetT = 8;
  pub const VT_EGRESSPOINT: flatbuffers::VOffsetT = 10;
  pub const VT_EGRESS: flatbuffers::VOffsetT = 12;
  pub const VT_RECOVERYVEHICLE: flatbuffers::VOffsetT = 14;
  pub const VT_ESCORTVEHICLE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PersonnelRecoveryExecutionInfo_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PersonnelRecoveryExecutionInfo_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryExecutionInfo_Full<'bldr>> {
    let mut builder = PersonnelRecoveryExecutionInfo_FullBuilder::new(_fbb);
    builder.add_egress(args.egress);
    builder.add_ingress(args.ingress);
    if let Some(x) = args.escortVehicle { builder.add_escortVehicle(x); }
    if let Some(x) = args.recoveryVehicle { builder.add_recoveryVehicle(x); }
    if let Some(x) = args.egressPoint { builder.add_egressPoint(x); }
    if let Some(x) = args.objStrategy { builder.add_objStrategy(x); }
    if let Some(x) = args.initialPoint { builder.add_initialPoint(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PersonnelRecoveryExecutionInfo_FullT {
    let initialPoint = self.initialPoint().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let ingress = self.ingress();
    let objStrategy = self.objStrategy().map(|x| {
      x.to_string()
    });
    let egressPoint = self.egressPoint().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let egress = self.egress();
    let recoveryVehicle = self.recoveryVehicle().map(|x| {
      x.to_string()
    });
    let escortVehicle = self.escortVehicle().map(|x| {
      x.to_string()
    });
    PersonnelRecoveryExecutionInfo_FullT {
      initialPoint,
      ingress,
      objStrategy,
      egressPoint,
      egress,
      recoveryVehicle,
      escortVehicle,
    }
  }

  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the initial location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [103.23, 30.445]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn initialPoint(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersonnelRecoveryExecutionInfo_Full::VT_INITIALPOINT, None)}
  }
  /// The heading, in degrees clockwise from North, of entering the recovery zone.
  /// Example: /// Example: 35.66
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ingress(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PersonnelRecoveryExecutionInfo_Full::VT_INGRESS, Some(0.0)).unwrap()}
  }
  /// Description of the objective strategy plan.
  /// Example: /// Example: Description of strategy plan.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn objStrategy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryExecutionInfo_Full::VT_OBJSTRATEGY, None)}
  }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the egress location. This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [107.23, 30.455]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn egressPoint(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersonnelRecoveryExecutionInfo_Full::VT_EGRESSPOINT, None)}
  }
  /// The heading, in degrees, of leaving the recovery zone.
  /// Example: /// Example: 66.53
  /// Constraints: No constraints specified.
  #[inline]
  pub fn egress(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PersonnelRecoveryExecutionInfo_Full::VT_EGRESS, Some(0.0)).unwrap()}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn recoveryVehicle(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryExecutionInfo_Full::VT_RECOVERYVEHICLE, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn escortVehicle(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryExecutionInfo_Full::VT_ESCORTVEHICLE, None)}
  }
}

impl flatbuffers::Verifiable for PersonnelRecoveryExecutionInfo_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("initialPoint", Self::VT_INITIALPOINT, false)?
     .visit_field::<f64>("ingress", Self::VT_INGRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objStrategy", Self::VT_OBJSTRATEGY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("egressPoint", Self::VT_EGRESSPOINT, false)?
     .visit_field::<f64>("egress", Self::VT_EGRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("recoveryVehicle", Self::VT_RECOVERYVEHICLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("escortVehicle", Self::VT_ESCORTVEHICLE, false)?
     .finish();
    Ok(())
  }
}
pub struct PersonnelRecoveryExecutionInfo_FullArgs<'a> {
    pub initialPoint: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ingress: f64,
    pub objStrategy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub egressPoint: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub egress: f64,
    pub recoveryVehicle: Option<flatbuffers::WIPOffset<&'a str>>,
    pub escortVehicle: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PersonnelRecoveryExecutionInfo_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    PersonnelRecoveryExecutionInfo_FullArgs {
      initialPoint: None,
      ingress: 0.0,
      objStrategy: None,
      egressPoint: None,
      egress: 0.0,
      recoveryVehicle: None,
      escortVehicle: None,
    }
  }
}

pub struct PersonnelRecoveryExecutionInfo_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PersonnelRecoveryExecutionInfo_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_initialPoint(&mut self, initialPoint: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryExecutionInfo_Full::VT_INITIALPOINT, initialPoint);
  }
  #[inline]
  pub fn add_ingress(&mut self, ingress: f64) {
    self.fbb_.push_slot::<f64>(PersonnelRecoveryExecutionInfo_Full::VT_INGRESS, ingress, 0.0);
  }
  #[inline]
  pub fn add_objStrategy(&mut self, objStrategy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryExecutionInfo_Full::VT_OBJSTRATEGY, objStrategy);
  }
  #[inline]
  pub fn add_egressPoint(&mut self, egressPoint: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryExecutionInfo_Full::VT_EGRESSPOINT, egressPoint);
  }
  #[inline]
  pub fn add_egress(&mut self, egress: f64) {
    self.fbb_.push_slot::<f64>(PersonnelRecoveryExecutionInfo_Full::VT_EGRESS, egress, 0.0);
  }
  #[inline]
  pub fn add_recoveryVehicle(&mut self, recoveryVehicle: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryExecutionInfo_Full::VT_RECOVERYVEHICLE, recoveryVehicle);
  }
  #[inline]
  pub fn add_escortVehicle(&mut self, escortVehicle: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryExecutionInfo_Full::VT_ESCORTVEHICLE, escortVehicle);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PersonnelRecoveryExecutionInfo_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PersonnelRecoveryExecutionInfo_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PersonnelRecoveryExecutionInfo_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PersonnelRecoveryExecutionInfo_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PersonnelRecoveryExecutionInfo_Full");
      ds.field("initialPoint", &self.initialPoint());
      ds.field("ingress", &self.ingress());
      ds.field("objStrategy", &self.objStrategy());
      ds.field("egressPoint", &self.egressPoint());
      ds.field("egress", &self.egress());
      ds.field("recoveryVehicle", &self.recoveryVehicle());
      ds.field("escortVehicle", &self.escortVehicle());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PersonnelRecoveryExecutionInfo_FullT {
  pub initialPoint: Option<Vec<String>>,
  pub ingress: f64,
  pub objStrategy: Option<String>,
  pub egressPoint: Option<Vec<String>>,
  pub egress: f64,
  pub recoveryVehicle: Option<String>,
  pub escortVehicle: Option<String>,
}
impl Default for PersonnelRecoveryExecutionInfo_FullT {
  fn default() -> Self {
    Self {
      initialPoint: None,
      ingress: 0.0,
      objStrategy: None,
      egressPoint: None,
      egress: 0.0,
      recoveryVehicle: None,
      escortVehicle: None,
    }
  }
}
impl PersonnelRecoveryExecutionInfo_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryExecutionInfo_Full<'b>> {
    let initialPoint = self.initialPoint.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ingress = self.ingress;
    let objStrategy = self.objStrategy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let egressPoint = self.egressPoint.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let egress = self.egress;
    let recoveryVehicle = self.recoveryVehicle.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let escortVehicle = self.escortVehicle.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    PersonnelRecoveryExecutionInfo_Full::create(_fbb, &PersonnelRecoveryExecutionInfo_FullArgs{
      initialPoint,
      ingress,
      objStrategy,
      egressPoint,
      egress,
      recoveryVehicle,
      escortVehicle,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PersonnelRecoveryExecutionInfo_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_execution_info_full_unchecked`.
pub fn root_as_personnel_recovery_execution_info_full(buf: &[u8]) -> Result<PersonnelRecoveryExecutionInfo_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PersonnelRecoveryExecutionInfo_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PersonnelRecoveryExecutionInfo_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_personnel_recovery_execution_info_full_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_execution_info_full(buf: &[u8]) -> Result<PersonnelRecoveryExecutionInfo_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PersonnelRecoveryExecutionInfo_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PersonnelRecoveryExecutionInfo_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_execution_info_full_unchecked`.
pub fn root_as_personnel_recovery_execution_info_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryExecutionInfo_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PersonnelRecoveryExecutionInfo_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PersonnelRecoveryExecutionInfo_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_execution_info_full_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_execution_info_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryExecutionInfo_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PersonnelRecoveryExecutionInfo_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PersonnelRecoveryExecutionInfo_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PersonnelRecoveryExecutionInfo_Full`.
pub unsafe fn root_as_personnel_recovery_execution_info_full_unchecked(buf: &[u8]) -> PersonnelRecoveryExecutionInfo_Full {
  flatbuffers::root_unchecked::<PersonnelRecoveryExecutionInfo_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PersonnelRecoveryExecutionInfo_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PersonnelRecoveryExecutionInfo_Full`.
pub unsafe fn size_prefixed_root_as_personnel_recovery_execution_info_full_unchecked(buf: &[u8]) -> PersonnelRecoveryExecutionInfo_Full {
  flatbuffers::size_prefixed_root_unchecked::<PersonnelRecoveryExecutionInfo_Full>(buf)
}
pub const PERSONNEL_RECOVERY_EXECUTION_INFO_FULL_IDENTIFIER: &str = "PERS";

#[inline]
pub fn personnel_recovery_execution_info_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_EXECUTION_INFO_FULL_IDENTIFIER, false)
}

#[inline]
pub fn personnel_recovery_execution_info_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_EXECUTION_INFO_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_personnel_recovery_execution_info_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PersonnelRecoveryExecutionInfo_Full<'a>>) {
  fbb.finish(root, Some(PERSONNEL_RECOVERY_EXECUTION_INFO_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_personnel_recovery_execution_info_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PersonnelRecoveryExecutionInfo_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(PERSONNEL_RECOVERY_EXECUTION_INFO_FULL_IDENTIFIER));
}
