// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkMultiDutyVoiceCoord_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
pub struct DataLinkMultiDutyVoiceCoord_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkMultiDutyVoiceCoord_Abridged<'a> {
  type Inner = DataLinkMultiDutyVoiceCoord_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkMultiDutyVoiceCoord_Abridged<'a> {
  pub const VT_MULTIVOICENETDES: flatbuffers::VOffsetT = 4;
  pub const VT_MULTIFREQDES: flatbuffers::VOffsetT = 6;
  pub const VT_MULTICOMMPRI: flatbuffers::VOffsetT = 8;
  pub const VT_MULTITELEFREQNUMS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkMultiDutyVoiceCoord_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkMultiDutyVoiceCoord_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkMultiDutyVoiceCoord_Abridged<'bldr>> {
    let mut builder = DataLinkMultiDutyVoiceCoord_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.multiTeleFreqNums { builder.add_multiTeleFreqNums(x); }
    if let Some(x) = args.multiCommPri { builder.add_multiCommPri(x); }
    if let Some(x) = args.multiFreqDes { builder.add_multiFreqDes(x); }
    if let Some(x) = args.multiVoiceNetDes { builder.add_multiVoiceNetDes(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkMultiDutyVoiceCoord_AbridgedT {
    let multiVoiceNetDes = self.multiVoiceNetDes().map(|x| {
      x.to_string()
    });
    let multiFreqDes = self.multiFreqDes().map(|x| {
      x.to_string()
    });
    let multiCommPri = self.multiCommPri().map(|x| {
      x.to_string()
    });
    let multiTeleFreqNums = self.multiTeleFreqNums().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    DataLinkMultiDutyVoiceCoord_AbridgedT {
      multiVoiceNetDes,
      multiFreqDes,
      multiCommPri,
      multiTeleFreqNums,
    }
  }

  /// Designator assigned to a voice interface control and coordination net for multilink coordination (e.g. ADCCN, DCN, VPN, etc.).
  /// Example: /// Example: VPN
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn multiVoiceNetDes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTIVOICENETDES, None)}
  }
  /// Designator used in nonsecure communications to refer to a radio frequency for multilink coordination.
  /// Example: /// Example: ST300A
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn multiFreqDes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTIFREQDES, None)}
  }
  /// Priority of a communication circuit, channel or frequency for multilink coordination (e.g. P - Primary, M - Monitor).
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn multiCommPri(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTICOMMPRI, None)}
  }
  /// Array of telephone numbers or contact frequencies used for interface control for multilink coordination.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn multiTeleFreqNums(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTITELEFREQNUMS, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkMultiDutyVoiceCoord_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("multiVoiceNetDes", Self::VT_MULTIVOICENETDES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("multiFreqDes", Self::VT_MULTIFREQDES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("multiCommPri", Self::VT_MULTICOMMPRI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("multiTeleFreqNums", Self::VT_MULTITELEFREQNUMS, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkMultiDutyVoiceCoord_AbridgedArgs<'a> {
    pub multiVoiceNetDes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub multiFreqDes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub multiCommPri: Option<flatbuffers::WIPOffset<&'a str>>,
    pub multiTeleFreqNums: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for DataLinkMultiDutyVoiceCoord_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkMultiDutyVoiceCoord_AbridgedArgs {
      multiVoiceNetDes: None,
      multiFreqDes: None,
      multiCommPri: None,
      multiTeleFreqNums: None,
    }
  }
}

pub struct DataLinkMultiDutyVoiceCoord_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkMultiDutyVoiceCoord_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_multiVoiceNetDes(&mut self, multiVoiceNetDes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTIVOICENETDES, multiVoiceNetDes);
  }
  #[inline]
  pub fn add_multiFreqDes(&mut self, multiFreqDes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTIFREQDES, multiFreqDes);
  }
  #[inline]
  pub fn add_multiCommPri(&mut self, multiCommPri: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTICOMMPRI, multiCommPri);
  }
  #[inline]
  pub fn add_multiTeleFreqNums(&mut self, multiTeleFreqNums: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDutyVoiceCoord_Abridged::VT_MULTITELEFREQNUMS, multiTeleFreqNums);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkMultiDutyVoiceCoord_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkMultiDutyVoiceCoord_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkMultiDutyVoiceCoord_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkMultiDutyVoiceCoord_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkMultiDutyVoiceCoord_Abridged");
      ds.field("multiVoiceNetDes", &self.multiVoiceNetDes());
      ds.field("multiFreqDes", &self.multiFreqDes());
      ds.field("multiCommPri", &self.multiCommPri());
      ds.field("multiTeleFreqNums", &self.multiTeleFreqNums());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkMultiDutyVoiceCoord_AbridgedT {
  pub multiVoiceNetDes: Option<String>,
  pub multiFreqDes: Option<String>,
  pub multiCommPri: Option<String>,
  pub multiTeleFreqNums: Option<Vec<String>>,
}
impl Default for DataLinkMultiDutyVoiceCoord_AbridgedT {
  fn default() -> Self {
    Self {
      multiVoiceNetDes: None,
      multiFreqDes: None,
      multiCommPri: None,
      multiTeleFreqNums: None,
    }
  }
}
impl DataLinkMultiDutyVoiceCoord_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkMultiDutyVoiceCoord_Abridged<'b>> {
    let multiVoiceNetDes = self.multiVoiceNetDes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let multiFreqDes = self.multiFreqDes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let multiCommPri = self.multiCommPri.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let multiTeleFreqNums = self.multiTeleFreqNums.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    DataLinkMultiDutyVoiceCoord_Abridged::create(_fbb, &DataLinkMultiDutyVoiceCoord_AbridgedArgs{
      multiVoiceNetDes,
      multiFreqDes,
      multiCommPri,
      multiTeleFreqNums,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkMultiDutyVoiceCoord_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_multi_duty_voice_coord_abridged_unchecked`.
pub fn root_as_data_link_multi_duty_voice_coord_abridged(buf: &[u8]) -> Result<DataLinkMultiDutyVoiceCoord_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkMultiDutyVoiceCoord_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkMultiDutyVoiceCoord_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_multi_duty_voice_coord_abridged_unchecked`.
pub fn size_prefixed_root_as_data_link_multi_duty_voice_coord_abridged(buf: &[u8]) -> Result<DataLinkMultiDutyVoiceCoord_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkMultiDutyVoiceCoord_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkMultiDutyVoiceCoord_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_multi_duty_voice_coord_abridged_unchecked`.
pub fn root_as_data_link_multi_duty_voice_coord_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkMultiDutyVoiceCoord_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkMultiDutyVoiceCoord_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkMultiDutyVoiceCoord_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_multi_duty_voice_coord_abridged_unchecked`.
pub fn size_prefixed_root_as_data_link_multi_duty_voice_coord_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkMultiDutyVoiceCoord_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkMultiDutyVoiceCoord_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkMultiDutyVoiceCoord_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkMultiDutyVoiceCoord_Abridged`.
pub unsafe fn root_as_data_link_multi_duty_voice_coord_abridged_unchecked(buf: &[u8]) -> DataLinkMultiDutyVoiceCoord_Abridged {
  flatbuffers::root_unchecked::<DataLinkMultiDutyVoiceCoord_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkMultiDutyVoiceCoord_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkMultiDutyVoiceCoord_Abridged`.
pub unsafe fn size_prefixed_root_as_data_link_multi_duty_voice_coord_abridged_unchecked(buf: &[u8]) -> DataLinkMultiDutyVoiceCoord_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkMultiDutyVoiceCoord_Abridged>(buf)
}
pub const DATA_LINK_MULTI_DUTY_VOICE_COORD_ABRIDGED_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_multi_duty_voice_coord_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_MULTI_DUTY_VOICE_COORD_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn data_link_multi_duty_voice_coord_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_MULTI_DUTY_VOICE_COORD_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_multi_duty_voice_coord_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkMultiDutyVoiceCoord_Abridged<'a>>) {
  fbb.finish(root, Some(DATA_LINK_MULTI_DUTY_VOICE_COORD_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_multi_duty_voice_coord_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkMultiDutyVoiceCoord_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_MULTI_DUTY_VOICE_COORD_ABRIDGED_IDENTIFIER));
}
