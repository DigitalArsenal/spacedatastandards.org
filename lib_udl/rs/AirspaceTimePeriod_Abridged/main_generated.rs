// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AirspaceTimePeriod_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The timePeriod set describes the effective datetime for a given airspace control means.
pub struct AirspaceTimePeriod_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirspaceTimePeriod_Abridged<'a> {
  type Inner = AirspaceTimePeriod_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirspaceTimePeriod_Abridged<'a> {
  pub const VT_TIMEMODE: flatbuffers::VOffsetT = 4;
  pub const VT_TIMESTART: flatbuffers::VOffsetT = 6;
  pub const VT_TIMEEND: flatbuffers::VOffsetT = 8;
  pub const VT_INTFREQ: flatbuffers::VOffsetT = 10;
  pub const VT_INTDUR: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirspaceTimePeriod_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirspaceTimePeriod_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<AirspaceTimePeriod_Abridged<'bldr>> {
    let mut builder = AirspaceTimePeriod_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.intDur { builder.add_intDur(x); }
    if let Some(x) = args.intFreq { builder.add_intFreq(x); }
    if let Some(x) = args.timeEnd { builder.add_timeEnd(x); }
    if let Some(x) = args.timeStart { builder.add_timeStart(x); }
    if let Some(x) = args.timeMode { builder.add_timeMode(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AirspaceTimePeriod_AbridgedT {
    let timeMode = self.timeMode().map(|x| {
      x.to_string()
    });
    let timeStart = self.timeStart().map(|x| {
      x.to_string()
    });
    let timeEnd = self.timeEnd().map(|x| {
      x.to_string()
    });
    let intFreq = self.intFreq().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let intDur = self.intDur().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    AirspaceTimePeriod_AbridgedT {
      timeMode,
      timeStart,
      timeEnd,
      intFreq,
      intDur,
    }
  }

  /// The airspace time code associated with the ACO. Can be DISCRETE, a fixed time block, or INTERVAL, a repeating time block.
  /// Example: /// Example: DISCRETE
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn timeMode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceTimePeriod_Abridged::VT_TIMEMODE, None)}
  }
  /// The start time designating that the airspace control order is active.
  /// Example: /// Example: 141325ZFEB2002
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn timeStart(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceTimePeriod_Abridged::VT_TIMESTART, None)}
  }
  /// The end time designating that the airspace control order is no longer active. Can contain datetime information or a stop time qualifier code, such as AFTER, NET, UFN, etc.
  /// Example: /// Example: 141325ZFEB2002
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn timeEnd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceTimePeriod_Abridged::VT_TIMEEND, None)}
  }
  /// Mandatory if timeMode is INTERVAL. Can be on of the interval frequency codes, such as BIWEEKLY, DAILY, YEARLY, etc.
  /// Example: /// Example: ['WEEKLY']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn intFreq(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirspaceTimePeriod_Abridged::VT_INTFREQ, None)}
  }
  /// Mandatory if timeMode is INTERVAL. Can be a numerical multiplier on an interval frequency code, a stop time qualifier code such as AFTER, NET, UFN, etc, or a datetime like string.
  /// Example: /// Example: ['65WK']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn intDur(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirspaceTimePeriod_Abridged::VT_INTDUR, None)}
  }
}

impl flatbuffers::Verifiable for AirspaceTimePeriod_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("timeMode", Self::VT_TIMEMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("timeStart", Self::VT_TIMESTART, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("timeEnd", Self::VT_TIMEEND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("intFreq", Self::VT_INTFREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("intDur", Self::VT_INTDUR, false)?
     .finish();
    Ok(())
  }
}
pub struct AirspaceTimePeriod_AbridgedArgs<'a> {
    pub timeMode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeStart: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeEnd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub intFreq: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub intDur: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for AirspaceTimePeriod_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirspaceTimePeriod_AbridgedArgs {
      timeMode: None,
      timeStart: None,
      timeEnd: None,
      intFreq: None,
      intDur: None,
    }
  }
}

pub struct AirspaceTimePeriod_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirspaceTimePeriod_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timeMode(&mut self, timeMode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceTimePeriod_Abridged::VT_TIMEMODE, timeMode);
  }
  #[inline]
  pub fn add_timeStart(&mut self, timeStart: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceTimePeriod_Abridged::VT_TIMESTART, timeStart);
  }
  #[inline]
  pub fn add_timeEnd(&mut self, timeEnd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceTimePeriod_Abridged::VT_TIMEEND, timeEnd);
  }
  #[inline]
  pub fn add_intFreq(&mut self, intFreq: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceTimePeriod_Abridged::VT_INTFREQ, intFreq);
  }
  #[inline]
  pub fn add_intDur(&mut self, intDur: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceTimePeriod_Abridged::VT_INTDUR, intDur);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirspaceTimePeriod_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirspaceTimePeriod_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirspaceTimePeriod_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirspaceTimePeriod_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirspaceTimePeriod_Abridged");
      ds.field("timeMode", &self.timeMode());
      ds.field("timeStart", &self.timeStart());
      ds.field("timeEnd", &self.timeEnd());
      ds.field("intFreq", &self.intFreq());
      ds.field("intDur", &self.intDur());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirspaceTimePeriod_AbridgedT {
  pub timeMode: Option<String>,
  pub timeStart: Option<String>,
  pub timeEnd: Option<String>,
  pub intFreq: Option<Vec<String>>,
  pub intDur: Option<Vec<String>>,
}
impl Default for AirspaceTimePeriod_AbridgedT {
  fn default() -> Self {
    Self {
      timeMode: None,
      timeStart: None,
      timeEnd: None,
      intFreq: None,
      intDur: None,
    }
  }
}
impl AirspaceTimePeriod_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirspaceTimePeriod_Abridged<'b>> {
    let timeMode = self.timeMode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let timeStart = self.timeStart.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let timeEnd = self.timeEnd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let intFreq = self.intFreq.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let intDur = self.intDur.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    AirspaceTimePeriod_Abridged::create(_fbb, &AirspaceTimePeriod_AbridgedArgs{
      timeMode,
      timeStart,
      timeEnd,
      intFreq,
      intDur,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirspaceTimePeriod_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_time_period_abridged_unchecked`.
pub fn root_as_airspace_time_period_abridged(buf: &[u8]) -> Result<AirspaceTimePeriod_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirspaceTimePeriod_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirspaceTimePeriod_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_airspace_time_period_abridged_unchecked`.
pub fn size_prefixed_root_as_airspace_time_period_abridged(buf: &[u8]) -> Result<AirspaceTimePeriod_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirspaceTimePeriod_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirspaceTimePeriod_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_time_period_abridged_unchecked`.
pub fn root_as_airspace_time_period_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirspaceTimePeriod_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirspaceTimePeriod_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirspaceTimePeriod_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_time_period_abridged_unchecked`.
pub fn size_prefixed_root_as_airspace_time_period_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirspaceTimePeriod_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirspaceTimePeriod_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirspaceTimePeriod_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirspaceTimePeriod_Abridged`.
pub unsafe fn root_as_airspace_time_period_abridged_unchecked(buf: &[u8]) -> AirspaceTimePeriod_Abridged {
  flatbuffers::root_unchecked::<AirspaceTimePeriod_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirspaceTimePeriod_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirspaceTimePeriod_Abridged`.
pub unsafe fn size_prefixed_root_as_airspace_time_period_abridged_unchecked(buf: &[u8]) -> AirspaceTimePeriod_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<AirspaceTimePeriod_Abridged>(buf)
}
pub const AIRSPACE_TIME_PERIOD_ABRIDGED_IDENTIFIER: &str = "AIRS";

#[inline]
pub fn airspace_time_period_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRSPACE_TIME_PERIOD_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn airspace_time_period_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRSPACE_TIME_PERIOD_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_airspace_time_period_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirspaceTimePeriod_Abridged<'a>>) {
  fbb.finish(root, Some(AIRSPACE_TIME_PERIOD_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_airspace_time_period_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirspaceTimePeriod_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRSPACE_TIME_PERIOD_ABRIDGED_IDENTIFIER));
}
