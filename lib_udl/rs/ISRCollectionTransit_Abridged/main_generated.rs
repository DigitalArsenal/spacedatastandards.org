// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ISRCollectionTransit_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Object for data dissemination.
pub struct ISRCollectionTransit_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ISRCollectionTransit_Abridged<'a> {
  type Inner = ISRCollectionTransit_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ISRCollectionTransit_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_BASE: flatbuffers::VOffsetT = 6;
  pub const VT_DURATION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ISRCollectionTransit_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ISRCollectionTransit_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<ISRCollectionTransit_Abridged<'bldr>> {
    let mut builder = ISRCollectionTransit_AbridgedBuilder::new(_fbb);
    builder.add_duration(args.duration);
    if let Some(x) = args.base { builder.add_base(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ISRCollectionTransit_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let base = self.base().map(|x| {
      x.to_string()
    });
    let duration = self.duration();
    ISRCollectionTransit_AbridgedT {
      id,
      base,
      duration,
    }
  }

  /// Transit Unique Identifier.
  /// Example: /// Example: ISRCOLLECTIONTRANSIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionTransit_Abridged::VT_ID, None)}
  }
  /// Military Base to transmit the dissemination of this data.
  /// Example: /// Example: ENVOYS
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn base(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionTransit_Abridged::VT_BASE, None)}
  }
  /// Length of mission in milliseconds.
  /// Example: /// Example: 200.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn duration(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ISRCollectionTransit_Abridged::VT_DURATION, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ISRCollectionTransit_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("base", Self::VT_BASE, false)?
     .visit_field::<f64>("duration", Self::VT_DURATION, false)?
     .finish();
    Ok(())
  }
}
pub struct ISRCollectionTransit_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub base: Option<flatbuffers::WIPOffset<&'a str>>,
    pub duration: f64,
}
impl<'a> Default for ISRCollectionTransit_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    ISRCollectionTransit_AbridgedArgs {
      id: None,
      base: None,
      duration: 0.0,
    }
  }
}

pub struct ISRCollectionTransit_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ISRCollectionTransit_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionTransit_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_base(&mut self, base: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionTransit_Abridged::VT_BASE, base);
  }
  #[inline]
  pub fn add_duration(&mut self, duration: f64) {
    self.fbb_.push_slot::<f64>(ISRCollectionTransit_Abridged::VT_DURATION, duration, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ISRCollectionTransit_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ISRCollectionTransit_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ISRCollectionTransit_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ISRCollectionTransit_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ISRCollectionTransit_Abridged");
      ds.field("id", &self.id());
      ds.field("base", &self.base());
      ds.field("duration", &self.duration());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ISRCollectionTransit_AbridgedT {
  pub id: Option<String>,
  pub base: Option<String>,
  pub duration: f64,
}
impl Default for ISRCollectionTransit_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      base: None,
      duration: 0.0,
    }
  }
}
impl ISRCollectionTransit_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ISRCollectionTransit_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let base = self.base.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let duration = self.duration;
    ISRCollectionTransit_Abridged::create(_fbb, &ISRCollectionTransit_AbridgedArgs{
      id,
      base,
      duration,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ISRCollectionTransit_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_transit_abridged_unchecked`.
pub fn root_as_isrcollection_transit_abridged(buf: &[u8]) -> Result<ISRCollectionTransit_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ISRCollectionTransit_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ISRCollectionTransit_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_isrcollection_transit_abridged_unchecked`.
pub fn size_prefixed_root_as_isrcollection_transit_abridged(buf: &[u8]) -> Result<ISRCollectionTransit_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ISRCollectionTransit_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ISRCollectionTransit_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_transit_abridged_unchecked`.
pub fn root_as_isrcollection_transit_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionTransit_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ISRCollectionTransit_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ISRCollectionTransit_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_transit_abridged_unchecked`.
pub fn size_prefixed_root_as_isrcollection_transit_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionTransit_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ISRCollectionTransit_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ISRCollectionTransit_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ISRCollectionTransit_Abridged`.
pub unsafe fn root_as_isrcollection_transit_abridged_unchecked(buf: &[u8]) -> ISRCollectionTransit_Abridged {
  flatbuffers::root_unchecked::<ISRCollectionTransit_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ISRCollectionTransit_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ISRCollectionTransit_Abridged`.
pub unsafe fn size_prefixed_root_as_isrcollection_transit_abridged_unchecked(buf: &[u8]) -> ISRCollectionTransit_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<ISRCollectionTransit_Abridged>(buf)
}
pub const ISRCOLLECTION_TRANSIT_ABRIDGED_IDENTIFIER: &str = "ISRC";

#[inline]
pub fn isrcollection_transit_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_TRANSIT_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn isrcollection_transit_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_TRANSIT_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_isrcollection_transit_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ISRCollectionTransit_Abridged<'a>>) {
  fbb.finish(root, Some(ISRCOLLECTION_TRANSIT_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_isrcollection_transit_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ISRCollectionTransit_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(ISRCOLLECTION_TRANSIT_ABRIDGED_IDENTIFIER));
}
