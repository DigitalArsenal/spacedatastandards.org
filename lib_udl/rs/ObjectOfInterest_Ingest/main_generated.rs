// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_OBJECT_OF_INTEREST_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_OBJECT_OF_INTEREST_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_OBJECT_OF_INTEREST_INGEST_DATA_MODE_ENUM: [ObjectOfInterest_Ingest_dataMode_Enum; 4] = [
  ObjectOfInterest_Ingest_dataMode_Enum::REAL,
  ObjectOfInterest_Ingest_dataMode_Enum::TEST,
  ObjectOfInterest_Ingest_dataMode_Enum::SIMULATED,
  ObjectOfInterest_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ObjectOfInterest_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl ObjectOfInterest_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ObjectOfInterest_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ObjectOfInterest_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ObjectOfInterest_Ingest_dataMode_Enum {
    type Output = ObjectOfInterest_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ObjectOfInterest_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ObjectOfInterest_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ObjectOfInterest_Ingest_dataMode_Enum {}
pub enum ObjectOfInterest_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// OnOrbit objects of interest, which include information about the last known state of the object.
pub struct ObjectOfInterest_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ObjectOfInterest_Ingest<'a> {
  type Inner = ObjectOfInterest_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ObjectOfInterest_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 8;
  pub const VT_SATNO: flatbuffers::VOffsetT = 10;
  pub const VT_NAME: flatbuffers::VOffsetT = 12;
  pub const VT_SENSORTASKINGSTARTTIME: flatbuffers::VOffsetT = 14;
  pub const VT_SENSORTASKINGSTOPTIME: flatbuffers::VOffsetT = 16;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 18;
  pub const VT_STATUS: flatbuffers::VOffsetT = 20;
  pub const VT_STATUSDATE: flatbuffers::VOffsetT = 22;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 24;
  pub const VT_LASTOBTIME: flatbuffers::VOffsetT = 26;
  pub const VT_MISSEDOBTIME: flatbuffers::VOffsetT = 28;
  pub const VT_DELTAVS: flatbuffers::VOffsetT = 30;
  pub const VT_DELTATS: flatbuffers::VOffsetT = 32;
  pub const VT_SVEPOCH: flatbuffers::VOffsetT = 34;
  pub const VT_X: flatbuffers::VOffsetT = 36;
  pub const VT_Y: flatbuffers::VOffsetT = 38;
  pub const VT_Z: flatbuffers::VOffsetT = 40;
  pub const VT_XVEL: flatbuffers::VOffsetT = 42;
  pub const VT_YVEL: flatbuffers::VOffsetT = 44;
  pub const VT_ZVEL: flatbuffers::VOffsetT = 46;
  pub const VT_ELSETEPOCH: flatbuffers::VOffsetT = 48;
  pub const VT_MEANMOTION: flatbuffers::VOffsetT = 50;
  pub const VT_ECCENTRICITY: flatbuffers::VOffsetT = 52;
  pub const VT_INCLINATION: flatbuffers::VOffsetT = 54;
  pub const VT_RAAN: flatbuffers::VOffsetT = 56;
  pub const VT_ARGOFPERIGEE: flatbuffers::VOffsetT = 58;
  pub const VT_MEANANOMALY: flatbuffers::VOffsetT = 60;
  pub const VT_REVNO: flatbuffers::VOffsetT = 62;
  pub const VT_BSTAR: flatbuffers::VOffsetT = 64;
  pub const VT_MEANMOTIONDOT: flatbuffers::VOffsetT = 66;
  pub const VT_MEANMOTIONDDOT: flatbuffers::VOffsetT = 68;
  pub const VT_SEMIMAJORAXIS: flatbuffers::VOffsetT = 70;
  pub const VT_PERIOD: flatbuffers::VOffsetT = 72;
  pub const VT_APOGEE: flatbuffers::VOffsetT = 74;
  pub const VT_PERIGEE: flatbuffers::VOffsetT = 76;
  pub const VT_AFFECTEDOBJECTS: flatbuffers::VOffsetT = 78;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 80;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 82;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 84;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 86;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 88;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 90;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ObjectOfInterest_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ObjectOfInterest_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<ObjectOfInterest_Ingest<'bldr>> {
    let mut builder = ObjectOfInterest_IngestBuilder::new(_fbb);
    builder.add_perigee(args.perigee);
    builder.add_apogee(args.apogee);
    builder.add_period(args.period);
    builder.add_semiMajorAxis(args.semiMajorAxis);
    builder.add_meanMotionDDot(args.meanMotionDDot);
    builder.add_meanMotionDot(args.meanMotionDot);
    builder.add_bStar(args.bStar);
    builder.add_meanAnomaly(args.meanAnomaly);
    builder.add_argOfPerigee(args.argOfPerigee);
    builder.add_raan(args.raan);
    builder.add_inclination(args.inclination);
    builder.add_eccentricity(args.eccentricity);
    builder.add_meanMotion(args.meanMotion);
    builder.add_zvel(args.zvel);
    builder.add_yvel(args.yvel);
    builder.add_xvel(args.xvel);
    builder.add_z(args.z);
    builder.add_y(args.y);
    builder.add_x(args.x);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.affectedObjects { builder.add_affectedObjects(x); }
    builder.add_revNo(args.revNo);
    if let Some(x) = args.elsetEpoch { builder.add_elsetEpoch(x); }
    if let Some(x) = args.svEpoch { builder.add_svEpoch(x); }
    if let Some(x) = args.deltaTs { builder.add_deltaTs(x); }
    if let Some(x) = args.deltaVs { builder.add_deltaVs(x); }
    if let Some(x) = args.missedObTime { builder.add_missedObTime(x); }
    if let Some(x) = args.lastObTime { builder.add_lastObTime(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.statusDate { builder.add_statusDate(x); }
    if let Some(x) = args.status { builder.add_status(x); }
    builder.add_priority(args.priority);
    if let Some(x) = args.sensorTaskingStopTime { builder.add_sensorTaskingStopTime(x); }
    if let Some(x) = args.sensorTaskingStartTime { builder.add_sensorTaskingStartTime(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> ObjectOfInterest_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let name = self.name().map(|x| {
      x.to_string()
    });
    let sensorTaskingStartTime = self.sensorTaskingStartTime().map(|x| {
      x.to_string()
    });
    let sensorTaskingStopTime = self.sensorTaskingStopTime().map(|x| {
      x.to_string()
    });
    let priority = self.priority();
    let status = self.status().map(|x| {
      x.to_string()
    });
    let statusDate = self.statusDate().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let lastObTime = self.lastObTime().map(|x| {
      x.to_string()
    });
    let missedObTime = self.missedObTime().map(|x| {
      x.to_string()
    });
    let deltaVs = self.deltaVs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let deltaTs = self.deltaTs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let svEpoch = self.svEpoch().map(|x| {
      x.to_string()
    });
    let x = self.x();
    let y = self.y();
    let z = self.z();
    let xvel = self.xvel();
    let yvel = self.yvel();
    let zvel = self.zvel();
    let elsetEpoch = self.elsetEpoch().map(|x| {
      x.to_string()
    });
    let meanMotion = self.meanMotion();
    let eccentricity = self.eccentricity();
    let inclination = self.inclination();
    let raan = self.raan();
    let argOfPerigee = self.argOfPerigee();
    let meanAnomaly = self.meanAnomaly();
    let revNo = self.revNo();
    let bStar = self.bStar();
    let meanMotionDot = self.meanMotionDot();
    let meanMotionDDot = self.meanMotionDDot();
    let semiMajorAxis = self.semiMajorAxis();
    let period = self.period();
    let apogee = self.apogee();
    let perigee = self.perigee();
    let affectedObjects = self.affectedObjects().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    ObjectOfInterest_IngestT {
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      name,
      sensorTaskingStartTime,
      sensorTaskingStopTime,
      priority,
      status,
      statusDate,
      description,
      lastObTime,
      missedObTime,
      deltaVs,
      deltaTs,
      svEpoch,
      x,
      y,
      z,
      xvel,
      yvel,
      zvel,
      elsetEpoch,
      meanMotion,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      affectedObjects,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: OBJECTOFINTEREST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// UUID of the parent Onorbit record.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_IDONORBIT, None)}
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ObjectOfInterest_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Unique name of the object of interest event.
  /// Example: /// Example: Example_name
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_NAME, None)}
  }
  /// Sensor tasking start time for object of interest.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorTaskingStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_SENSORTASKINGSTARTTIME, None)}
  }
  /// Sensor tasking stop time for object of interest.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorTaskingStopTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_SENSORTASKINGSTOPTIME, None)}
  }
  /// Priority of the object of interest as an integer (1=highest priority).
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn priority(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ObjectOfInterest_Ingest::VT_PRIORITY, Some(0)).unwrap()}
  }
  /// Status of the object of interest event (e.g. OPEN, CLOSED, CANCELLED).
  /// Example: /// Example: OPEN
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn status(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_STATUS, None)}
  }
  /// Time of last status change of the object of interest event.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn statusDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_STATUSDATE, None)}
  }
  /// Description of the object of interest event.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_DESCRIPTION, None)}
  }
  /// Last reported observation time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lastObTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_LASTOBTIME, None)}
  }
  /// The time at which an attempted observation of the object of interest noticed it was missing, in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missedObTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_MISSEDOBTIME, None)}
  }
  /// Possible delta V applications for the object of interest, in km/sec.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn deltaVs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ObjectOfInterest_Ingest::VT_DELTAVS, None)}
  }
  /// Possible delta time applications for the object of interest, in seconds.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn deltaTs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ObjectOfInterest_Ingest::VT_DELTATS, None)}
  }
  /// Last reported state vector epoch time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn svEpoch(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_SVEPOCH, None)}
  }
  /// Last reported x position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn x(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_X, Some(0.0)).unwrap()}
  }
  /// Last reported y position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn y(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_Y, Some(0.0)).unwrap()}
  }
  /// Last reported z position of the object in km, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn z(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_Z, Some(0.0)).unwrap()}
  }
  /// Last reported x velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn xvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_XVEL, Some(0.0)).unwrap()}
  }
  /// Last reported y velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn yvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_YVEL, Some(0.0)).unwrap()}
  }
  /// Last reported z velocity of the object in km/sec, in J2000 coordinates.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_ZVEL, Some(0.0)).unwrap()}
  }
  /// Last reported elset epoch time in ISO 8601 UTC time, with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elsetEpoch(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_ELSETEPOCH, None)}
  }
  /// Last reported mean motion of the object. Mean motion is the angular speed required for a body to complete one orbit, assuming constant speed in a circular orbit which completes in the same time as the variable speed, elliptical orbit of the actual body. Measured in revolutions per day.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotion(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_MEANMOTION, Some(0.0)).unwrap()}
  }
  /// Last reported eccentricity of the object. The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. A value of 0 is a circular orbit, values between 0 and 1 form an elliptic orbit, 1 is a parabolic escape orbit, and greater than 1 is a hyperbolic escape orbit.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eccentricity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_ECCENTRICITY, Some(0.0)).unwrap()}
  }
  /// Last reported inclination of the object. Inclination is the angle between the equator and the orbit when looking from the center of the Earth. If the orbit went exactly around the equator from left to right, then the inclination would be 0. The inclination ranges from 0 to 180 degrees.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn inclination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_INCLINATION, Some(0.0)).unwrap()}
  }
  /// Last reported raan.  Right ascension of the ascending node, or RAAN is the angle as measured in degrees eastwards (or, as seen from the north, counterclockwise) from the First Point of Aries to the ascending node, which is where the orbit crosses the equator when traveling north.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raan(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_RAAN, Some(0.0)).unwrap()}
  }
  /// Last reported argument of perigee. The argument of perigee is the angle in degrees formed between the perigee and the ascending node. If the perigee would occur at the ascending node, the argument of perigee would be 0.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn argOfPerigee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_ARGOFPERIGEE, Some(0.0)).unwrap()}
  }
  /// Last reported meanAnomaly. Mean anomoly is where the satellite is in its orbital path. The mean anomaly ranges from 0 to 360 degrees. The mean anomaly is referenced to the perigee. If the satellite were at the perigee, the mean anomaly would be 0.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanAnomaly(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_MEANANOMALY, Some(0.0)).unwrap()}
  }
  /// The last reported revolution number. The value is incremented when a satellite crosses the equator on an ascending pass.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn revNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(ObjectOfInterest_Ingest::VT_REVNO, Some(0)).unwrap()}
  }
  /// Last reported drag term for SGP4 orbital model, used for calculating decay constants for altitude, eccentricity etc, measured in inverse earth radii.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bStar(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_BSTAR, Some(0.0)).unwrap()}
  }
  /// Last reported 1st derivative of the mean motion with respect to time. Units are revolutions per day squared.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotionDot(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_MEANMOTIONDOT, Some(0.0)).unwrap()}
  }
  /// Last reported 2nd derivative of the mean motion with respect to time. Units are revolutions per day cubed.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn meanMotionDDot(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_MEANMOTIONDDOT, Some(0.0)).unwrap()}
  }
  /// Last reported semi major axis, which is the sum of the periapsis and apoapsis distances divided by two. For circular orbits, the semimajor axis is the distance between the centers of the bodies, not the distance of the bodies from the center of mass.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn semiMajorAxis(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_SEMIMAJORAXIS, Some(0.0)).unwrap()}
  }
  /// Last reported orbit period. Period of the orbit is equal to inverse of mean motion.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn period(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_PERIOD, Some(0.0)).unwrap()}
  }
  /// Last reported apogee. The Orbit point furthest from the center of the earth in kilometers.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn apogee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_APOGEE, Some(0.0)).unwrap()}
  }
  /// Last reported perigee. The orbit point nearest to the center of the earth in kilometers.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn perigee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ObjectOfInterest_Ingest::VT_PERIGEE, Some(0.0)).unwrap()}
  }
  /// Optional array of Onorbit IDs (idOnOrbit) representing satellites potentially affected by this object of interest.
  /// Example: /// Example: ['AFFECTEDOBJECT1-ID', 'AFFECTEDOBJECT2-ID']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn affectedObjects(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ObjectOfInterest_Ingest::VT_AFFECTEDOBJECTS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ObjectOfInterest_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> ObjectOfInterest_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ObjectOfInterest_Ingest_dataMode_Enum>(ObjectOfInterest_Ingest::VT_DATAMODE, Some(ObjectOfInterest_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ObjectOfInterest_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sensorTaskingStartTime", Self::VT_SENSORTASKINGSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sensorTaskingStopTime", Self::VT_SENSORTASKINGSTOPTIME, false)?
     .visit_field::<i32>("priority", Self::VT_PRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("status", Self::VT_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("statusDate", Self::VT_STATUSDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastObTime", Self::VT_LASTOBTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missedObTime", Self::VT_MISSEDOBTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("deltaVs", Self::VT_DELTAVS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("deltaTs", Self::VT_DELTATS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("svEpoch", Self::VT_SVEPOCH, false)?
     .visit_field::<f64>("x", Self::VT_X, false)?
     .visit_field::<f64>("y", Self::VT_Y, false)?
     .visit_field::<f64>("z", Self::VT_Z, false)?
     .visit_field::<f64>("xvel", Self::VT_XVEL, false)?
     .visit_field::<f64>("yvel", Self::VT_YVEL, false)?
     .visit_field::<f64>("zvel", Self::VT_ZVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("elsetEpoch", Self::VT_ELSETEPOCH, false)?
     .visit_field::<f64>("meanMotion", Self::VT_MEANMOTION, false)?
     .visit_field::<f64>("eccentricity", Self::VT_ECCENTRICITY, false)?
     .visit_field::<f64>("inclination", Self::VT_INCLINATION, false)?
     .visit_field::<f64>("raan", Self::VT_RAAN, false)?
     .visit_field::<f64>("argOfPerigee", Self::VT_ARGOFPERIGEE, false)?
     .visit_field::<f64>("meanAnomaly", Self::VT_MEANANOMALY, false)?
     .visit_field::<i32>("revNo", Self::VT_REVNO, false)?
     .visit_field::<f64>("bStar", Self::VT_BSTAR, false)?
     .visit_field::<f64>("meanMotionDot", Self::VT_MEANMOTIONDOT, false)?
     .visit_field::<f64>("meanMotionDDot", Self::VT_MEANMOTIONDDOT, false)?
     .visit_field::<f64>("semiMajorAxis", Self::VT_SEMIMAJORAXIS, false)?
     .visit_field::<f64>("period", Self::VT_PERIOD, false)?
     .visit_field::<f64>("apogee", Self::VT_APOGEE, false)?
     .visit_field::<f64>("perigee", Self::VT_PERIGEE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("affectedObjects", Self::VT_AFFECTEDOBJECTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<ObjectOfInterest_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct ObjectOfInterest_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sensorTaskingStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sensorTaskingStopTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub priority: i32,
    pub status: Option<flatbuffers::WIPOffset<&'a str>>,
    pub statusDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastObTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missedObTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub deltaVs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub deltaTs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub svEpoch: Option<flatbuffers::WIPOffset<&'a str>>,
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub xvel: f64,
    pub yvel: f64,
    pub zvel: f64,
    pub elsetEpoch: Option<flatbuffers::WIPOffset<&'a str>>,
    pub meanMotion: f64,
    pub eccentricity: f64,
    pub inclination: f64,
    pub raan: f64,
    pub argOfPerigee: f64,
    pub meanAnomaly: f64,
    pub revNo: i32,
    pub bStar: f64,
    pub meanMotionDot: f64,
    pub meanMotionDDot: f64,
    pub semiMajorAxis: f64,
    pub period: f64,
    pub apogee: f64,
    pub perigee: f64,
    pub affectedObjects: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: ObjectOfInterest_Ingest_dataMode_Enum,
}
impl<'a> Default for ObjectOfInterest_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    ObjectOfInterest_IngestArgs {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      name: None,
      sensorTaskingStartTime: None,
      sensorTaskingStopTime: None,
      priority: 0,
      status: None,
      statusDate: None,
      description: None,
      lastObTime: None,
      missedObTime: None,
      deltaVs: None,
      deltaTs: None,
      svEpoch: None,
      x: 0.0,
      y: 0.0,
      z: 0.0,
      xvel: 0.0,
      yvel: 0.0,
      zvel: 0.0,
      elsetEpoch: None,
      meanMotion: 0.0,
      eccentricity: 0.0,
      inclination: 0.0,
      raan: 0.0,
      argOfPerigee: 0.0,
      meanAnomaly: 0.0,
      revNo: 0,
      bStar: 0.0,
      meanMotionDot: 0.0,
      meanMotionDDot: 0.0,
      semiMajorAxis: 0.0,
      period: 0.0,
      apogee: 0.0,
      perigee: 0.0,
      affectedObjects: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: ObjectOfInterest_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct ObjectOfInterest_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ObjectOfInterest_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(ObjectOfInterest_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_NAME, name);
  }
  #[inline]
  pub fn add_sensorTaskingStartTime(&mut self, sensorTaskingStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_SENSORTASKINGSTARTTIME, sensorTaskingStartTime);
  }
  #[inline]
  pub fn add_sensorTaskingStopTime(&mut self, sensorTaskingStopTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_SENSORTASKINGSTOPTIME, sensorTaskingStopTime);
  }
  #[inline]
  pub fn add_priority(&mut self, priority: i32) {
    self.fbb_.push_slot::<i32>(ObjectOfInterest_Ingest::VT_PRIORITY, priority, 0);
  }
  #[inline]
  pub fn add_status(&mut self, status: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_STATUS, status);
  }
  #[inline]
  pub fn add_statusDate(&mut self, statusDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_STATUSDATE, statusDate);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_lastObTime(&mut self, lastObTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_LASTOBTIME, lastObTime);
  }
  #[inline]
  pub fn add_missedObTime(&mut self, missedObTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_MISSEDOBTIME, missedObTime);
  }
  #[inline]
  pub fn add_deltaVs(&mut self, deltaVs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_DELTAVS, deltaVs);
  }
  #[inline]
  pub fn add_deltaTs(&mut self, deltaTs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_DELTATS, deltaTs);
  }
  #[inline]
  pub fn add_svEpoch(&mut self, svEpoch: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_SVEPOCH, svEpoch);
  }
  #[inline]
  pub fn add_x(&mut self, x: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_z(&mut self, z: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_Z, z, 0.0);
  }
  #[inline]
  pub fn add_xvel(&mut self, xvel: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_XVEL, xvel, 0.0);
  }
  #[inline]
  pub fn add_yvel(&mut self, yvel: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_YVEL, yvel, 0.0);
  }
  #[inline]
  pub fn add_zvel(&mut self, zvel: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_ZVEL, zvel, 0.0);
  }
  #[inline]
  pub fn add_elsetEpoch(&mut self, elsetEpoch: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_ELSETEPOCH, elsetEpoch);
  }
  #[inline]
  pub fn add_meanMotion(&mut self, meanMotion: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_MEANMOTION, meanMotion, 0.0);
  }
  #[inline]
  pub fn add_eccentricity(&mut self, eccentricity: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_ECCENTRICITY, eccentricity, 0.0);
  }
  #[inline]
  pub fn add_inclination(&mut self, inclination: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_INCLINATION, inclination, 0.0);
  }
  #[inline]
  pub fn add_raan(&mut self, raan: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_RAAN, raan, 0.0);
  }
  #[inline]
  pub fn add_argOfPerigee(&mut self, argOfPerigee: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_ARGOFPERIGEE, argOfPerigee, 0.0);
  }
  #[inline]
  pub fn add_meanAnomaly(&mut self, meanAnomaly: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_MEANANOMALY, meanAnomaly, 0.0);
  }
  #[inline]
  pub fn add_revNo(&mut self, revNo: i32) {
    self.fbb_.push_slot::<i32>(ObjectOfInterest_Ingest::VT_REVNO, revNo, 0);
  }
  #[inline]
  pub fn add_bStar(&mut self, bStar: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_BSTAR, bStar, 0.0);
  }
  #[inline]
  pub fn add_meanMotionDot(&mut self, meanMotionDot: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_MEANMOTIONDOT, meanMotionDot, 0.0);
  }
  #[inline]
  pub fn add_meanMotionDDot(&mut self, meanMotionDDot: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_MEANMOTIONDDOT, meanMotionDDot, 0.0);
  }
  #[inline]
  pub fn add_semiMajorAxis(&mut self, semiMajorAxis: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  #[inline]
  pub fn add_period(&mut self, period: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_PERIOD, period, 0.0);
  }
  #[inline]
  pub fn add_apogee(&mut self, apogee: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_APOGEE, apogee, 0.0);
  }
  #[inline]
  pub fn add_perigee(&mut self, perigee: f64) {
    self.fbb_.push_slot::<f64>(ObjectOfInterest_Ingest::VT_PERIGEE, perigee, 0.0);
  }
  #[inline]
  pub fn add_affectedObjects(&mut self, affectedObjects: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_AFFECTEDOBJECTS, affectedObjects);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ObjectOfInterest_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: ObjectOfInterest_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<ObjectOfInterest_Ingest_dataMode_Enum>(ObjectOfInterest_Ingest::VT_DATAMODE, dataMode, ObjectOfInterest_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ObjectOfInterest_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ObjectOfInterest_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ObjectOfInterest_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ObjectOfInterest_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ObjectOfInterest_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("name", &self.name());
      ds.field("sensorTaskingStartTime", &self.sensorTaskingStartTime());
      ds.field("sensorTaskingStopTime", &self.sensorTaskingStopTime());
      ds.field("priority", &self.priority());
      ds.field("status", &self.status());
      ds.field("statusDate", &self.statusDate());
      ds.field("description", &self.description());
      ds.field("lastObTime", &self.lastObTime());
      ds.field("missedObTime", &self.missedObTime());
      ds.field("deltaVs", &self.deltaVs());
      ds.field("deltaTs", &self.deltaTs());
      ds.field("svEpoch", &self.svEpoch());
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("z", &self.z());
      ds.field("xvel", &self.xvel());
      ds.field("yvel", &self.yvel());
      ds.field("zvel", &self.zvel());
      ds.field("elsetEpoch", &self.elsetEpoch());
      ds.field("meanMotion", &self.meanMotion());
      ds.field("eccentricity", &self.eccentricity());
      ds.field("inclination", &self.inclination());
      ds.field("raan", &self.raan());
      ds.field("argOfPerigee", &self.argOfPerigee());
      ds.field("meanAnomaly", &self.meanAnomaly());
      ds.field("revNo", &self.revNo());
      ds.field("bStar", &self.bStar());
      ds.field("meanMotionDot", &self.meanMotionDot());
      ds.field("meanMotionDDot", &self.meanMotionDDot());
      ds.field("semiMajorAxis", &self.semiMajorAxis());
      ds.field("period", &self.period());
      ds.field("apogee", &self.apogee());
      ds.field("perigee", &self.perigee());
      ds.field("affectedObjects", &self.affectedObjects());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ObjectOfInterest_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub name: Option<String>,
  pub sensorTaskingStartTime: Option<String>,
  pub sensorTaskingStopTime: Option<String>,
  pub priority: i32,
  pub status: Option<String>,
  pub statusDate: Option<String>,
  pub description: Option<String>,
  pub lastObTime: Option<String>,
  pub missedObTime: Option<String>,
  pub deltaVs: Option<Vec<String>>,
  pub deltaTs: Option<Vec<String>>,
  pub svEpoch: Option<String>,
  pub x: f64,
  pub y: f64,
  pub z: f64,
  pub xvel: f64,
  pub yvel: f64,
  pub zvel: f64,
  pub elsetEpoch: Option<String>,
  pub meanMotion: f64,
  pub eccentricity: f64,
  pub inclination: f64,
  pub raan: f64,
  pub argOfPerigee: f64,
  pub meanAnomaly: f64,
  pub revNo: i32,
  pub bStar: f64,
  pub meanMotionDot: f64,
  pub meanMotionDDot: f64,
  pub semiMajorAxis: f64,
  pub period: f64,
  pub apogee: f64,
  pub perigee: f64,
  pub affectedObjects: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: ObjectOfInterest_Ingest_dataMode_Enum,
}
impl Default for ObjectOfInterest_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      name: None,
      sensorTaskingStartTime: None,
      sensorTaskingStopTime: None,
      priority: 0,
      status: None,
      statusDate: None,
      description: None,
      lastObTime: None,
      missedObTime: None,
      deltaVs: None,
      deltaTs: None,
      svEpoch: None,
      x: 0.0,
      y: 0.0,
      z: 0.0,
      xvel: 0.0,
      yvel: 0.0,
      zvel: 0.0,
      elsetEpoch: None,
      meanMotion: 0.0,
      eccentricity: 0.0,
      inclination: 0.0,
      raan: 0.0,
      argOfPerigee: 0.0,
      meanAnomaly: 0.0,
      revNo: 0,
      bStar: 0.0,
      meanMotionDot: 0.0,
      meanMotionDDot: 0.0,
      semiMajorAxis: 0.0,
      period: 0.0,
      apogee: 0.0,
      perigee: 0.0,
      affectedObjects: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: ObjectOfInterest_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl ObjectOfInterest_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ObjectOfInterest_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sensorTaskingStartTime = self.sensorTaskingStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sensorTaskingStopTime = self.sensorTaskingStopTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let priority = self.priority;
    let status = self.status.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let statusDate = self.statusDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastObTime = self.lastObTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missedObTime = self.missedObTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let deltaVs = self.deltaVs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let deltaTs = self.deltaTs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let svEpoch = self.svEpoch.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let x = self.x;
    let y = self.y;
    let z = self.z;
    let xvel = self.xvel;
    let yvel = self.yvel;
    let zvel = self.zvel;
    let elsetEpoch = self.elsetEpoch.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let meanMotion = self.meanMotion;
    let eccentricity = self.eccentricity;
    let inclination = self.inclination;
    let raan = self.raan;
    let argOfPerigee = self.argOfPerigee;
    let meanAnomaly = self.meanAnomaly;
    let revNo = self.revNo;
    let bStar = self.bStar;
    let meanMotionDot = self.meanMotionDot;
    let meanMotionDDot = self.meanMotionDDot;
    let semiMajorAxis = self.semiMajorAxis;
    let period = self.period;
    let apogee = self.apogee;
    let perigee = self.perigee;
    let affectedObjects = self.affectedObjects.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    ObjectOfInterest_Ingest::create(_fbb, &ObjectOfInterest_IngestArgs{
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      name,
      sensorTaskingStartTime,
      sensorTaskingStopTime,
      priority,
      status,
      statusDate,
      description,
      lastObTime,
      missedObTime,
      deltaVs,
      deltaTs,
      svEpoch,
      x,
      y,
      z,
      xvel,
      yvel,
      zvel,
      elsetEpoch,
      meanMotion,
      eccentricity,
      inclination,
      raan,
      argOfPerigee,
      meanAnomaly,
      revNo,
      bStar,
      meanMotionDot,
      meanMotionDDot,
      semiMajorAxis,
      period,
      apogee,
      perigee,
      affectedObjects,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ObjectOfInterest_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_object_of_interest_ingest_unchecked`.
pub fn root_as_object_of_interest_ingest(buf: &[u8]) -> Result<ObjectOfInterest_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ObjectOfInterest_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ObjectOfInterest_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_object_of_interest_ingest_unchecked`.
pub fn size_prefixed_root_as_object_of_interest_ingest(buf: &[u8]) -> Result<ObjectOfInterest_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ObjectOfInterest_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ObjectOfInterest_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_object_of_interest_ingest_unchecked`.
pub fn root_as_object_of_interest_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ObjectOfInterest_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ObjectOfInterest_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ObjectOfInterest_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_object_of_interest_ingest_unchecked`.
pub fn size_prefixed_root_as_object_of_interest_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ObjectOfInterest_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ObjectOfInterest_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ObjectOfInterest_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ObjectOfInterest_Ingest`.
pub unsafe fn root_as_object_of_interest_ingest_unchecked(buf: &[u8]) -> ObjectOfInterest_Ingest {
  flatbuffers::root_unchecked::<ObjectOfInterest_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ObjectOfInterest_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ObjectOfInterest_Ingest`.
pub unsafe fn size_prefixed_root_as_object_of_interest_ingest_unchecked(buf: &[u8]) -> ObjectOfInterest_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<ObjectOfInterest_Ingest>(buf)
}
pub const OBJECT_OF_INTEREST_INGEST_IDENTIFIER: &str = "OBJE";

#[inline]
pub fn object_of_interest_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, OBJECT_OF_INTEREST_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn object_of_interest_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, OBJECT_OF_INTEREST_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_object_of_interest_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ObjectOfInterest_Ingest<'a>>) {
  fbb.finish(root, Some(OBJECT_OF_INTEREST_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_object_of_interest_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ObjectOfInterest_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(OBJECT_OF_INTEREST_INGEST_IDENTIFIER));
}
