// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EOOBSERVATION_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EOOBSERVATION_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EOOBSERVATION_INGEST_DATA_MODE_ENUM: [EOObservation_Ingest_dataMode_Enum; 4] = [
  EOObservation_Ingest_dataMode_Enum::REAL,
  EOObservation_Ingest_dataMode_Enum::TEST,
  EOObservation_Ingest_dataMode_Enum::SIMULATED,
  EOObservation_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EOObservation_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl EOObservation_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EOObservation_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EOObservation_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EOObservation_Ingest_dataMode_Enum {
    type Output = EOObservation_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EOObservation_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EOObservation_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EOObservation_Ingest_dataMode_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EOOBSERVATION_INGEST_REFERENCE_FRAME_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EOOBSERVATION_INGEST_REFERENCE_FRAME_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EOOBSERVATION_INGEST_REFERENCE_FRAME_ENUM: [EOObservation_Ingest_referenceFrame_Enum; 4] = [
  EOObservation_Ingest_referenceFrame_Enum::J2000,
  EOObservation_Ingest_referenceFrame_Enum::GCRF,
  EOObservation_Ingest_referenceFrame_Enum::ITRF,
  EOObservation_Ingest_referenceFrame_Enum::TEME,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EOObservation_Ingest_referenceFrame_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl EOObservation_Ingest_referenceFrame_Enum {
  /// No description available.
  pub const J2000: Self = Self(0);
  /// No description available.
  pub const GCRF: Self = Self(1);
  /// No description available.
  pub const ITRF: Self = Self(2);
  /// No description available.
  pub const TEME: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::J2000,
    Self::GCRF,
    Self::ITRF,
    Self::TEME,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::J2000 => Some("J2000"),
      Self::GCRF => Some("GCRF"),
      Self::ITRF => Some("ITRF"),
      Self::TEME => Some("TEME"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EOObservation_Ingest_referenceFrame_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EOObservation_Ingest_referenceFrame_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EOObservation_Ingest_referenceFrame_Enum {
    type Output = EOObservation_Ingest_referenceFrame_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EOObservation_Ingest_referenceFrame_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EOObservation_Ingest_referenceFrame_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EOObservation_Ingest_referenceFrame_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EOOBSERVATION_INGEST_SEN_REFERENCE_FRAME_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EOOBSERVATION_INGEST_SEN_REFERENCE_FRAME_ENUM: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EOOBSERVATION_INGEST_SEN_REFERENCE_FRAME_ENUM: [EOObservation_Ingest_senReferenceFrame_Enum; 6] = [
  EOObservation_Ingest_senReferenceFrame_Enum::J2000,
  EOObservation_Ingest_senReferenceFrame_Enum::EFG_TDR,
  EOObservation_Ingest_senReferenceFrame_Enum::ECR_ECEF,
  EOObservation_Ingest_senReferenceFrame_Enum::TEME,
  EOObservation_Ingest_senReferenceFrame_Enum::ITRF,
  EOObservation_Ingest_senReferenceFrame_Enum::GCRF,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EOObservation_Ingest_senReferenceFrame_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl EOObservation_Ingest_senReferenceFrame_Enum {
  /// No description available.
  pub const J2000: Self = Self(0);
  /// No description available.
  pub const EFG_TDR: Self = Self(1);
  /// No description available.
  pub const ECR_ECEF: Self = Self(2);
  /// No description available.
  pub const TEME: Self = Self(3);
  /// No description available.
  pub const ITRF: Self = Self(4);
  /// No description available.
  pub const GCRF: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::J2000,
    Self::EFG_TDR,
    Self::ECR_ECEF,
    Self::TEME,
    Self::ITRF,
    Self::GCRF,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::J2000 => Some("J2000"),
      Self::EFG_TDR => Some("EFG_TDR"),
      Self::ECR_ECEF => Some("ECR_ECEF"),
      Self::TEME => Some("TEME"),
      Self::ITRF => Some("ITRF"),
      Self::GCRF => Some("GCRF"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EOObservation_Ingest_senReferenceFrame_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EOObservation_Ingest_senReferenceFrame_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EOObservation_Ingest_senReferenceFrame_Enum {
    type Output = EOObservation_Ingest_senReferenceFrame_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EOObservation_Ingest_senReferenceFrame_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EOObservation_Ingest_senReferenceFrame_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EOObservation_Ingest_senReferenceFrame_Enum {}
pub enum EOObservation_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of observation data for electro-optical based sensor phenomenologies. ECI J2K is the preferred reference frame for EOObservations, however, several user-specified reference frames are accommodated. Users should check the EOObservation record as well as the 'Discover' tab in the storefront to confirm the coordinate frames used by the data provider.
pub struct EOObservation_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EOObservation_Ingest<'a> {
  type Inner = EOObservation_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EOObservation_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_OBTIME: flatbuffers::VOffsetT = 8;
  pub const VT_CORRQUALITY: flatbuffers::VOffsetT = 10;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 12;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 14;
  pub const VT_IDSKYIMAGERY: flatbuffers::VOffsetT = 16;
  pub const VT_COLLECTMETHOD: flatbuffers::VOffsetT = 18;
  pub const VT_SATNO: flatbuffers::VOffsetT = 20;
  pub const VT_TASKID: flatbuffers::VOffsetT = 22;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 24;
  pub const VT_TRACKID: flatbuffers::VOffsetT = 26;
  pub const VT_OBPOSITION: flatbuffers::VOffsetT = 28;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 30;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 32;
  pub const VT_UCT: flatbuffers::VOffsetT = 34;
  pub const VT_AZIMUTH: flatbuffers::VOffsetT = 36;
  pub const VT_AZIMUTHUNC: flatbuffers::VOffsetT = 38;
  pub const VT_AZIMUTHBIAS: flatbuffers::VOffsetT = 40;
  pub const VT_AZIMUTHRATE: flatbuffers::VOffsetT = 42;
  pub const VT_ELEVATION: flatbuffers::VOffsetT = 44;
  pub const VT_ELEVATIONUNC: flatbuffers::VOffsetT = 46;
  pub const VT_ELEVATIONBIAS: flatbuffers::VOffsetT = 48;
  pub const VT_ELEVATIONRATE: flatbuffers::VOffsetT = 50;
  pub const VT_RANGE: flatbuffers::VOffsetT = 52;
  pub const VT_RANGEUNC: flatbuffers::VOffsetT = 54;
  pub const VT_RANGEBIAS: flatbuffers::VOffsetT = 56;
  pub const VT_RANGERATE: flatbuffers::VOffsetT = 58;
  pub const VT_RANGERATEUNC: flatbuffers::VOffsetT = 60;
  pub const VT_RA: flatbuffers::VOffsetT = 62;
  pub const VT_RARATE: flatbuffers::VOffsetT = 64;
  pub const VT_RAUNC: flatbuffers::VOffsetT = 66;
  pub const VT_RABIAS: flatbuffers::VOffsetT = 68;
  pub const VT_DECLINATION: flatbuffers::VOffsetT = 70;
  pub const VT_DECLINATIONRATE: flatbuffers::VOffsetT = 72;
  pub const VT_DECLINATIONUNC: flatbuffers::VOffsetT = 74;
  pub const VT_DECLINATIONBIAS: flatbuffers::VOffsetT = 76;
  pub const VT_LOSX: flatbuffers::VOffsetT = 78;
  pub const VT_LOSY: flatbuffers::VOffsetT = 80;
  pub const VT_LOSZ: flatbuffers::VOffsetT = 82;
  pub const VT_LOSUNC: flatbuffers::VOffsetT = 84;
  pub const VT_LOSXVEL: flatbuffers::VOffsetT = 86;
  pub const VT_LOSYVEL: flatbuffers::VOffsetT = 88;
  pub const VT_LOSZVEL: flatbuffers::VOffsetT = 90;
  pub const VT_SENLAT: flatbuffers::VOffsetT = 92;
  pub const VT_SENLON: flatbuffers::VOffsetT = 94;
  pub const VT_SENALT: flatbuffers::VOffsetT = 96;
  pub const VT_SENX: flatbuffers::VOffsetT = 98;
  pub const VT_SENY: flatbuffers::VOffsetT = 100;
  pub const VT_SENZ: flatbuffers::VOffsetT = 102;
  pub const VT_SENVELX: flatbuffers::VOffsetT = 104;
  pub const VT_SENVELY: flatbuffers::VOffsetT = 106;
  pub const VT_SENVELZ: flatbuffers::VOffsetT = 108;
  pub const VT_SENQUAT: flatbuffers::VOffsetT = 110;
  pub const VT_FOVCOUNT: flatbuffers::VOffsetT = 112;
  pub const VT_EXPDURATION: flatbuffers::VOffsetT = 114;
  pub const VT_ZEROPTD: flatbuffers::VOffsetT = 116;
  pub const VT_NETOBJSIG: flatbuffers::VOffsetT = 118;
  pub const VT_NETOBJSIGUNC: flatbuffers::VOffsetT = 120;
  pub const VT_MAG: flatbuffers::VOffsetT = 122;
  pub const VT_MAGUNC: flatbuffers::VOffsetT = 124;
  pub const VT_MAGNORMRANGE: flatbuffers::VOffsetT = 126;
  pub const VT_GEOLAT: flatbuffers::VOffsetT = 128;
  pub const VT_GEOLON: flatbuffers::VOffsetT = 130;
  pub const VT_GEOALT: flatbuffers::VOffsetT = 132;
  pub const VT_GEORANGE: flatbuffers::VOffsetT = 134;
  pub const VT_SKYBKGRND: flatbuffers::VOffsetT = 136;
  pub const VT_PRIMARYEXTINCTION: flatbuffers::VOffsetT = 138;
  pub const VT_PRIMARYEXTINCTIONUNC: flatbuffers::VOffsetT = 140;
  pub const VT_SOLARPHASEANGLE: flatbuffers::VOffsetT = 142;
  pub const VT_SOLAREQPHASEANGLE: flatbuffers::VOffsetT = 144;
  pub const VT_SOLARDECANGLE: flatbuffers::VOffsetT = 146;
  pub const VT_SHUTTERDELAY: flatbuffers::VOffsetT = 148;
  pub const VT_TIMINGBIAS: flatbuffers::VOffsetT = 150;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 152;
  pub const VT_INTENSITY: flatbuffers::VOffsetT = 154;
  pub const VT_BGINTENSITY: flatbuffers::VOffsetT = 156;
  pub const VT_DESCRIPTOR: flatbuffers::VOffsetT = 158;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 160;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 162;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 164;
  pub const VT_TAGS: flatbuffers::VOffsetT = 166;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 168;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 170;
  pub const VT_ZEROPTDUNC: flatbuffers::VOffsetT = 172;
  pub const VT_EOOBSERVATIONDETAILS: flatbuffers::VOffsetT = 174;
  pub const VT_REFERENCEFRAME: flatbuffers::VOffsetT = 176;
  pub const VT_SENREFERENCEFRAME: flatbuffers::VOffsetT = 178;
  pub const VT_UMBRA: flatbuffers::VOffsetT = 180;
  pub const VT_PENUMBRA: flatbuffers::VOffsetT = 182;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 184;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 186;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 188;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EOObservation_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EOObservation_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<EOObservation_Ingest<'bldr>> {
    let mut builder = EOObservation_IngestBuilder::new(_fbb);
    builder.add_zeroPtdUnc(args.zeroPtdUnc);
    builder.add_bgIntensity(args.bgIntensity);
    builder.add_intensity(args.intensity);
    builder.add_timingBias(args.timingBias);
    builder.add_shutterDelay(args.shutterDelay);
    builder.add_solarDecAngle(args.solarDecAngle);
    builder.add_solarEqPhaseAngle(args.solarEqPhaseAngle);
    builder.add_solarPhaseAngle(args.solarPhaseAngle);
    builder.add_primaryExtinctionUnc(args.primaryExtinctionUnc);
    builder.add_primaryExtinction(args.primaryExtinction);
    builder.add_skyBkgrnd(args.skyBkgrnd);
    builder.add_georange(args.georange);
    builder.add_geoalt(args.geoalt);
    builder.add_geolon(args.geolon);
    builder.add_geolat(args.geolat);
    builder.add_magNormRange(args.magNormRange);
    builder.add_magUnc(args.magUnc);
    builder.add_mag(args.mag);
    builder.add_netObjSigUnc(args.netObjSigUnc);
    builder.add_netObjSig(args.netObjSig);
    builder.add_zeroptd(args.zeroptd);
    builder.add_expDuration(args.expDuration);
    builder.add_senvelz(args.senvelz);
    builder.add_senvely(args.senvely);
    builder.add_senvelx(args.senvelx);
    builder.add_senz(args.senz);
    builder.add_seny(args.seny);
    builder.add_senx(args.senx);
    builder.add_senalt(args.senalt);
    builder.add_senlon(args.senlon);
    builder.add_senlat(args.senlat);
    builder.add_loszvel(args.loszvel);
    builder.add_losyvel(args.losyvel);
    builder.add_losxvel(args.losxvel);
    builder.add_losUnc(args.losUnc);
    builder.add_losz(args.losz);
    builder.add_losy(args.losy);
    builder.add_losx(args.losx);
    builder.add_declinationBias(args.declinationBias);
    builder.add_declinationUnc(args.declinationUnc);
    builder.add_declinationRate(args.declinationRate);
    builder.add_declination(args.declination);
    builder.add_raBias(args.raBias);
    builder.add_raUnc(args.raUnc);
    builder.add_raRate(args.raRate);
    builder.add_ra(args.ra);
    builder.add_rangeRateUnc(args.rangeRateUnc);
    builder.add_rangeRate(args.rangeRate);
    builder.add_rangeBias(args.rangeBias);
    builder.add_rangeUnc(args.rangeUnc);
    builder.add_range(args.range);
    builder.add_elevationRate(args.elevationRate);
    builder.add_elevationBias(args.elevationBias);
    builder.add_elevationUnc(args.elevationUnc);
    builder.add_elevation(args.elevation);
    builder.add_azimuthRate(args.azimuthRate);
    builder.add_azimuthBias(args.azimuthBias);
    builder.add_azimuthUnc(args.azimuthUnc);
    builder.add_azimuth(args.azimuth);
    builder.add_corrQuality(args.corrQuality);
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.eoobservationDetails { builder.add_eoobservationDetails(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.descriptor { builder.add_descriptor(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    builder.add_fovCount(args.fovCount);
    if let Some(x) = args.senQuat { builder.add_senQuat(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    if let Some(x) = args.obPosition { builder.add_obPosition(x); }
    if let Some(x) = args.trackId { builder.add_trackId(x); }
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.taskId { builder.add_taskId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.collectMethod { builder.add_collectMethod(x); }
    if let Some(x) = args.idSkyImagery { builder.add_idSkyImagery(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.obTime { builder.add_obTime(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_penumbra(args.penumbra);
    builder.add_umbra(args.umbra);
    builder.add_senReferenceFrame(args.senReferenceFrame);
    builder.add_referenceFrame(args.referenceFrame);
    builder.add_dataMode(args.dataMode);
    builder.add_uct(args.uct);
    builder.finish()
  }

  pub fn unpack(&self) -> EOObservation_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let obTime = self.obTime().map(|x| {
      x.to_string()
    });
    let corrQuality = self.corrQuality();
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let idSkyImagery = self.idSkyImagery().map(|x| {
      x.to_string()
    });
    let collectMethod = self.collectMethod().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let taskId = self.taskId().map(|x| {
      x.to_string()
    });
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    let trackId = self.trackId().map(|x| {
      x.to_string()
    });
    let obPosition = self.obPosition().map(|x| {
      x.to_string()
    });
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let uct = self.uct();
    let azimuth = self.azimuth();
    let azimuthUnc = self.azimuthUnc();
    let azimuthBias = self.azimuthBias();
    let azimuthRate = self.azimuthRate();
    let elevation = self.elevation();
    let elevationUnc = self.elevationUnc();
    let elevationBias = self.elevationBias();
    let elevationRate = self.elevationRate();
    let range = self.range();
    let rangeUnc = self.rangeUnc();
    let rangeBias = self.rangeBias();
    let rangeRate = self.rangeRate();
    let rangeRateUnc = self.rangeRateUnc();
    let ra = self.ra();
    let raRate = self.raRate();
    let raUnc = self.raUnc();
    let raBias = self.raBias();
    let declination = self.declination();
    let declinationRate = self.declinationRate();
    let declinationUnc = self.declinationUnc();
    let declinationBias = self.declinationBias();
    let losx = self.losx();
    let losy = self.losy();
    let losz = self.losz();
    let losUnc = self.losUnc();
    let losxvel = self.losxvel();
    let losyvel = self.losyvel();
    let loszvel = self.loszvel();
    let senlat = self.senlat();
    let senlon = self.senlon();
    let senalt = self.senalt();
    let senx = self.senx();
    let seny = self.seny();
    let senz = self.senz();
    let senvelx = self.senvelx();
    let senvely = self.senvely();
    let senvelz = self.senvelz();
    let senQuat = self.senQuat().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let fovCount = self.fovCount();
    let expDuration = self.expDuration();
    let zeroptd = self.zeroptd();
    let netObjSig = self.netObjSig();
    let netObjSigUnc = self.netObjSigUnc();
    let mag = self.mag();
    let magUnc = self.magUnc();
    let magNormRange = self.magNormRange();
    let geolat = self.geolat();
    let geolon = self.geolon();
    let geoalt = self.geoalt();
    let georange = self.georange();
    let skyBkgrnd = self.skyBkgrnd();
    let primaryExtinction = self.primaryExtinction();
    let primaryExtinctionUnc = self.primaryExtinctionUnc();
    let solarPhaseAngle = self.solarPhaseAngle();
    let solarEqPhaseAngle = self.solarEqPhaseAngle();
    let solarDecAngle = self.solarDecAngle();
    let shutterDelay = self.shutterDelay();
    let timingBias = self.timingBias();
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let intensity = self.intensity();
    let bgIntensity = self.bgIntensity();
    let descriptor = self.descriptor().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let zeroPtdUnc = self.zeroPtdUnc();
    let eoobservationDetails = self.eoobservationDetails().map(|x| {
      x.to_string()
    });
    let referenceFrame = self.referenceFrame();
    let senReferenceFrame = self.senReferenceFrame();
    let umbra = self.umbra();
    let penumbra = self.penumbra();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    EOObservation_IngestT {
      id,
      classificationMarking,
      obTime,
      corrQuality,
      idOnOrbit,
      idSensor,
      idSkyImagery,
      collectMethod,
      satNo,
      taskId,
      transactionId,
      trackId,
      obPosition,
      origObjectId,
      origSensorId,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      range,
      rangeUnc,
      rangeBias,
      rangeRate,
      rangeRateUnc,
      ra,
      raRate,
      raUnc,
      raBias,
      declination,
      declinationRate,
      declinationUnc,
      declinationBias,
      losx,
      losy,
      losz,
      losUnc,
      losxvel,
      losyvel,
      loszvel,
      senlat,
      senlon,
      senalt,
      senx,
      seny,
      senz,
      senvelx,
      senvely,
      senvelz,
      senQuat,
      fovCount,
      expDuration,
      zeroptd,
      netObjSig,
      netObjSigUnc,
      mag,
      magUnc,
      magNormRange,
      geolat,
      geolon,
      geoalt,
      georange,
      skyBkgrnd,
      primaryExtinction,
      primaryExtinctionUnc,
      solarPhaseAngle,
      solarEqPhaseAngle,
      solarDecAngle,
      shutterDelay,
      timingBias,
      rawFileURI,
      intensity,
      bgIntensity,
      descriptor,
      source,
      origin,
      dataMode,
      tags,
      createdAt,
      createdBy,
      zeroPtdUnc,
      eoobservationDetails,
      referenceFrame,
      senReferenceFrame,
      umbra,
      penumbra,
      origNetwork,
      sourceDL,
      type_,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EOOBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_OBTIME, None)}
  }
  /// Object Correlation Quality value (non-standardized). Users should consult data providers regarding the expected range of values.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn corrQuality(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_CORRQUALITY, Some(0.0)).unwrap()}
  }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_IDONORBIT, None)}
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_IDSENSOR, None)}
  }
  /// Unique identifier of the Sky Imagery.
  /// Example: /// Example: SKYIMAGERY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSkyImagery(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_IDSKYIMAGERY, None)}
  }
  /// Method indicating telescope movement during collection (AUTOTRACK, MANUAL AUTOTRACK, MANUAL RATE TRACK, MANUAL SIDEREAL, SIDEREAL, RATE TRACK).
  /// Example: /// Example: AUTOTRACK
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn collectMethod(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_COLLECTMETHOD, None)}
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EOObservation_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn taskId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_TASKID, None)}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_TRANSACTIONID, None)}
  }
  /// Optional identifier of the track to which this observation belongs.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_TRACKID, None)}
  }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn obPosition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_OBPOSITION, None)}
  }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_ORIGOBJECTID, None)}
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_ORIGSENSORID, None)}
  }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn uct(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EOObservation_Ingest::VT_UCT, Some(false)).unwrap()}
  }
  /// Line of sight azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_AZIMUTH, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight azimuth angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_AZIMUTHUNC, Some(0.0)).unwrap()}
  }
  /// Sensor line of sight azimuth angle bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_AZIMUTHBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_AZIMUTHRATE, Some(0.0)).unwrap()}
  }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_ELEVATION, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight elevation angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_ELEVATIONUNC, Some(0.0)).unwrap()}
  }
  /// Sensor line of sight elevation bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_ELEVATIONBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_ELEVATIONRATE, Some(0.0)).unwrap()}
  }
  /// Line of sight range in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn range(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RANGE, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight range, in kilometers.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RANGEUNC, Some(0.0)).unwrap()}
  }
  /// Sensor line of sight range bias in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RANGEBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight range in km/sec.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RANGERATE, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight range rate, in kilometers/second.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeRateUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RANGERATEUNC, Some(0.0)).unwrap()}
  }
  /// Line of sight right ascension, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ra(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RA, Some(0.0)).unwrap()}
  }
  /// Line of sight right ascension rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RARATE, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight right ascension angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RAUNC, Some(0.0)).unwrap()}
  }
  /// Sensor line of sight right ascension bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_RABIAS, Some(0.0)).unwrap()}
  }
  /// Line of sight declination, in degrees, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_DECLINATION, Some(0.0)).unwrap()}
  }
  /// Line of sight declination rate of change, in degrees/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declinationRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_DECLINATIONRATE, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight declination angle, in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declinationUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_DECLINATIONUNC, Some(0.0)).unwrap()}
  }
  /// Sensor line of sight declination angle bias in degrees.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declinationBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_DECLINATIONBIAS, Some(0.0)).unwrap()}
  }
  /// Line-of-sight cartesian X position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn losx(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_LOSX, Some(0.0)).unwrap()}
  }
  /// Line-of-sight cartesian Y position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn losy(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_LOSY, Some(0.0)).unwrap()}
  }
  /// Line-of-sight cartesian Z position of the target, in km, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn losz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_LOSZ, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight pointing in micro-radians.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn losUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_LOSUNC, Some(0.0)).unwrap()}
  }
  /// Line-of-sight cartesian X velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn losxvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_LOSXVEL, Some(0.0)).unwrap()}
  }
  /// Line-of-sight cartesian Y velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn losyvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_LOSYVEL, Some(0.0)).unwrap()}
  }
  /// Line-of-sight cartesian Z velocity of target, in km/sec, in the specified referenceFrame.  If referenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn loszvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_LOSZVEL, Some(0.0)).unwrap()}
  }
  /// Sensor WGS84 latitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senlat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENLAT, Some(0.0)).unwrap()}
  }
  /// Sensor WGS84 longitude at obTime (if mobile/onorbit) in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senlon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENLON, Some(0.0)).unwrap()}
  }
  /// Sensor altitude at obTime (if mobile/onorbit) in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senalt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENALT, Some(0.0)).unwrap()}
  }
  /// Cartesian X position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senx(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENX, Some(0.0)).unwrap()}
  }
  /// Cartesian Y position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seny(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENY, Some(0.0)).unwrap()}
  }
  /// Cartesian Z position of the observing mobile/onorbit sensor at obTime, in km, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENZ, Some(0.0)).unwrap()}
  }
  /// Cartesian X velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senvelx(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENVELX, Some(0.0)).unwrap()}
  }
  /// Cartesian Y velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senvely(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENVELY, Some(0.0)).unwrap()}
  }
  /// Cartesian Z velocity of the observing mobile/onorbit sensor at obTime, in km/sec, in the specified senReferenceFrame.  If senReferenceFrame is null then J2K should be assumed.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senvelz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SENVELZ, Some(0.0)).unwrap()}
  }
  /// The quaternion describing the rotation of the sensor in relation to the body-fixed frame used for this system into the local geodetic frame, at observation time (obTime). The array element order convention is scalar component first, followed by the three vector components (qc, q1, q2, q3).
  /// Example: /// Example: [0.4492, 0.02, 0.8765, 0.2213]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senQuat(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EOObservation_Ingest::VT_SENQUAT, None)}
  }
  /// The number of RSOs detected in the sensor field of view.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fovCount(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EOObservation_Ingest::VT_FOVCOUNT, Some(0)).unwrap()}
  }
  /// Image exposure duration in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn expDuration(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_EXPDURATION, Some(0.0)).unwrap()}
  }
  /// Formula: 2.5 * log_10 (zero_mag_counts / expDuration).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zeroptd(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_ZEROPTD, Some(0.0)).unwrap()}
  }
  /// Net object signature = counts / expDuration.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn netObjSig(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_NETOBJSIG, Some(0.0)).unwrap()}
  }
  /// Net object signature uncertainty = counts uncertainty / expDuration.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn netObjSigUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_NETOBJSIGUNC, Some(0.0)).unwrap()}
  }
  /// Calibrated magnitude in units of magnitudes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_MAG, Some(0.0)).unwrap()}
  }
  /// Uncertainty of calibrated magnitude in units of magnitudes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn magUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_MAGUNC, Some(0.0)).unwrap()}
  }
  /// Formula: mag - 5.0 * log_10(geo_range / 1000000.0).
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn magNormRange(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_MAGNORMRANGE, Some(0.0)).unwrap()}
  }
  /// For GEO detections, the latitude in degrees north.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geolat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_GEOLAT, Some(0.0)).unwrap()}
  }
  /// For GEO detections, the longitude in degrees east.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geolon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_GEOLON, Some(0.0)).unwrap()}
  }
  /// For GEO detections, the altitude in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geoalt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_GEOALT, Some(0.0)).unwrap()}
  }
  /// For GEO detections, the range in km.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn georange(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_GEORANGE, Some(0.0)).unwrap()}
  }
  /// Average Sky Background signal, in Magnitudes. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn skyBkgrnd(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SKYBKGRND, Some(0.0)).unwrap()}
  }
  /// Primary Extinction Coefficient, in Magnitudes. Primary Extinction is the coefficient applied to the airmass to determine how much the observed visual magnitude has been attenuated by the atmosphere. Extinction, in general, describes the absorption and scattering of electromagnetic radiation by dust and gas between an emitting astronomical object and the observer.  See the EOObservationDetails API for specification of extinction coefficients for multiple spectral filters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn primaryExtinction(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_PRIMARYEXTINCTION, Some(0.0)).unwrap()}
  }
  /// Primary Extinction Coefficient Uncertainty, in Magnitudes.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn primaryExtinctionUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_PRIMARYEXTINCTIONUNC, Some(0.0)).unwrap()}
  }
  /// The angle, in degrees, between the target-to-observer vector and the target-to-sun vector.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn solarPhaseAngle(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SOLARPHASEANGLE, Some(0.0)).unwrap()}
  }
  /// The angle, in degrees, between the projections of the target-to-observer vector and the target-to-sun vector onto the equatorial plane. The angle is represented as negative when closing and positive when opening.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn solarEqPhaseAngle(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SOLAREQPHASEANGLE, Some(0.0)).unwrap()}
  }
  /// Angle from the sun to the equatorial plane.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn solarDecAngle(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SOLARDECANGLE, Some(0.0)).unwrap()}
  }
  /// Shutter delay in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn shutterDelay(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_SHUTTERDELAY, Some(0.0)).unwrap()}
  }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn timingBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_TIMINGBIAS, Some(0.0)).unwrap()}
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_RAWFILEURI, None)}
  }
  /// Intensity of the target for IR observations, in kw/sr/um.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn intensity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_INTENSITY, Some(0.0)).unwrap()}
  }
  /// Background intensity for IR observations, in kw/sr/um.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bgIntensity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_BGINTENSITY, Some(0.0)).unwrap()}
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: PROVIDED_DATA1
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn descriptor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_DESCRIPTOR, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> EOObservation_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EOObservation_Ingest_dataMode_Enum>(EOObservation_Ingest::VT_DATAMODE, Some(EOObservation_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EOObservation_Ingest::VT_TAGS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_CREATEDBY, None)}
  }
  /// This is the uncertainty in the zero point for the filter used for this observation/row in units of mag. For use with differential photometry.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zeroPtdUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EOObservation_Ingest::VT_ZEROPTDUNC, Some(0.0)).unwrap()}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eoobservationDetails(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_EOOBSERVATIONDETAILS, None)}
  }
  /// The reference frame of the EOObservation measurements. If the referenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn referenceFrame(&self) -> EOObservation_Ingest_referenceFrame_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EOObservation_Ingest_referenceFrame_Enum>(EOObservation_Ingest::VT_REFERENCEFRAME, Some(EOObservation_Ingest_referenceFrame_Enum::J2000)).unwrap()}
  }
  /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn senReferenceFrame(&self) -> EOObservation_Ingest_senReferenceFrame_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EOObservation_Ingest_senReferenceFrame_Enum>(EOObservation_Ingest::VT_SENREFERENCEFRAME, Some(EOObservation_Ingest_senReferenceFrame_Enum::J2000)).unwrap()}
  }
  /// Boolean indicating that the target object was in umbral eclipse at the time of this observation.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn umbra(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EOObservation_Ingest::VT_UMBRA, Some(false)).unwrap()}
  }
  /// Boolean indicating that the target object was in a penumbral eclipse at the time of this observation.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn penumbra(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(EOObservation_Ingest::VT_PENUMBRA, Some(false)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_ORIGNETWORK, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_SOURCEDL, None)}
  }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: OPTICAL
  /// Constraints: No constraints specified.
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EOObservation_Ingest::VT_TYPE_, None)}
  }
}

impl flatbuffers::Verifiable for EOObservation_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obTime", Self::VT_OBTIME, false)?
     .visit_field::<f64>("corrQuality", Self::VT_CORRQUALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSkyImagery", Self::VT_IDSKYIMAGERY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("collectMethod", Self::VT_COLLECTMETHOD, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("taskId", Self::VT_TASKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trackId", Self::VT_TRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obPosition", Self::VT_OBPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<bool>("uct", Self::VT_UCT, false)?
     .visit_field::<f64>("azimuth", Self::VT_AZIMUTH, false)?
     .visit_field::<f64>("azimuthUnc", Self::VT_AZIMUTHUNC, false)?
     .visit_field::<f64>("azimuthBias", Self::VT_AZIMUTHBIAS, false)?
     .visit_field::<f64>("azimuthRate", Self::VT_AZIMUTHRATE, false)?
     .visit_field::<f64>("elevation", Self::VT_ELEVATION, false)?
     .visit_field::<f64>("elevationUnc", Self::VT_ELEVATIONUNC, false)?
     .visit_field::<f64>("elevationBias", Self::VT_ELEVATIONBIAS, false)?
     .visit_field::<f64>("elevationRate", Self::VT_ELEVATIONRATE, false)?
     .visit_field::<f64>("range", Self::VT_RANGE, false)?
     .visit_field::<f64>("rangeUnc", Self::VT_RANGEUNC, false)?
     .visit_field::<f64>("rangeBias", Self::VT_RANGEBIAS, false)?
     .visit_field::<f64>("rangeRate", Self::VT_RANGERATE, false)?
     .visit_field::<f64>("rangeRateUnc", Self::VT_RANGERATEUNC, false)?
     .visit_field::<f64>("ra", Self::VT_RA, false)?
     .visit_field::<f64>("raRate", Self::VT_RARATE, false)?
     .visit_field::<f64>("raUnc", Self::VT_RAUNC, false)?
     .visit_field::<f64>("raBias", Self::VT_RABIAS, false)?
     .visit_field::<f64>("declination", Self::VT_DECLINATION, false)?
     .visit_field::<f64>("declinationRate", Self::VT_DECLINATIONRATE, false)?
     .visit_field::<f64>("declinationUnc", Self::VT_DECLINATIONUNC, false)?
     .visit_field::<f64>("declinationBias", Self::VT_DECLINATIONBIAS, false)?
     .visit_field::<f64>("losx", Self::VT_LOSX, false)?
     .visit_field::<f64>("losy", Self::VT_LOSY, false)?
     .visit_field::<f64>("losz", Self::VT_LOSZ, false)?
     .visit_field::<f64>("losUnc", Self::VT_LOSUNC, false)?
     .visit_field::<f64>("losxvel", Self::VT_LOSXVEL, false)?
     .visit_field::<f64>("losyvel", Self::VT_LOSYVEL, false)?
     .visit_field::<f64>("loszvel", Self::VT_LOSZVEL, false)?
     .visit_field::<f64>("senlat", Self::VT_SENLAT, false)?
     .visit_field::<f64>("senlon", Self::VT_SENLON, false)?
     .visit_field::<f64>("senalt", Self::VT_SENALT, false)?
     .visit_field::<f64>("senx", Self::VT_SENX, false)?
     .visit_field::<f64>("seny", Self::VT_SENY, false)?
     .visit_field::<f64>("senz", Self::VT_SENZ, false)?
     .visit_field::<f64>("senvelx", Self::VT_SENVELX, false)?
     .visit_field::<f64>("senvely", Self::VT_SENVELY, false)?
     .visit_field::<f64>("senvelz", Self::VT_SENVELZ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("senQuat", Self::VT_SENQUAT, false)?
     .visit_field::<i32>("fovCount", Self::VT_FOVCOUNT, false)?
     .visit_field::<f64>("expDuration", Self::VT_EXPDURATION, false)?
     .visit_field::<f64>("zeroptd", Self::VT_ZEROPTD, false)?
     .visit_field::<f64>("netObjSig", Self::VT_NETOBJSIG, false)?
     .visit_field::<f64>("netObjSigUnc", Self::VT_NETOBJSIGUNC, false)?
     .visit_field::<f64>("mag", Self::VT_MAG, false)?
     .visit_field::<f64>("magUnc", Self::VT_MAGUNC, false)?
     .visit_field::<f64>("magNormRange", Self::VT_MAGNORMRANGE, false)?
     .visit_field::<f64>("geolat", Self::VT_GEOLAT, false)?
     .visit_field::<f64>("geolon", Self::VT_GEOLON, false)?
     .visit_field::<f64>("geoalt", Self::VT_GEOALT, false)?
     .visit_field::<f64>("georange", Self::VT_GEORANGE, false)?
     .visit_field::<f64>("skyBkgrnd", Self::VT_SKYBKGRND, false)?
     .visit_field::<f64>("primaryExtinction", Self::VT_PRIMARYEXTINCTION, false)?
     .visit_field::<f64>("primaryExtinctionUnc", Self::VT_PRIMARYEXTINCTIONUNC, false)?
     .visit_field::<f64>("solarPhaseAngle", Self::VT_SOLARPHASEANGLE, false)?
     .visit_field::<f64>("solarEqPhaseAngle", Self::VT_SOLAREQPHASEANGLE, false)?
     .visit_field::<f64>("solarDecAngle", Self::VT_SOLARDECANGLE, false)?
     .visit_field::<f64>("shutterDelay", Self::VT_SHUTTERDELAY, false)?
     .visit_field::<f64>("timingBias", Self::VT_TIMINGBIAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<f64>("intensity", Self::VT_INTENSITY, false)?
     .visit_field::<f64>("bgIntensity", Self::VT_BGINTENSITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("descriptor", Self::VT_DESCRIPTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<EOObservation_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<f64>("zeroPtdUnc", Self::VT_ZEROPTDUNC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eoobservationDetails", Self::VT_EOOBSERVATIONDETAILS, false)?
     .visit_field::<EOObservation_Ingest_referenceFrame_Enum>("referenceFrame", Self::VT_REFERENCEFRAME, false)?
     .visit_field::<EOObservation_Ingest_senReferenceFrame_Enum>("senReferenceFrame", Self::VT_SENREFERENCEFRAME, false)?
     .visit_field::<bool>("umbra", Self::VT_UMBRA, false)?
     .visit_field::<bool>("penumbra", Self::VT_PENUMBRA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .finish();
    Ok(())
  }
}
pub struct EOObservation_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub corrQuality: f64,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSkyImagery: Option<flatbuffers::WIPOffset<&'a str>>,
    pub collectMethod: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub taskId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obPosition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uct: bool,
    pub azimuth: f64,
    pub azimuthUnc: f64,
    pub azimuthBias: f64,
    pub azimuthRate: f64,
    pub elevation: f64,
    pub elevationUnc: f64,
    pub elevationBias: f64,
    pub elevationRate: f64,
    pub range: f64,
    pub rangeUnc: f64,
    pub rangeBias: f64,
    pub rangeRate: f64,
    pub rangeRateUnc: f64,
    pub ra: f64,
    pub raRate: f64,
    pub raUnc: f64,
    pub raBias: f64,
    pub declination: f64,
    pub declinationRate: f64,
    pub declinationUnc: f64,
    pub declinationBias: f64,
    pub losx: f64,
    pub losy: f64,
    pub losz: f64,
    pub losUnc: f64,
    pub losxvel: f64,
    pub losyvel: f64,
    pub loszvel: f64,
    pub senlat: f64,
    pub senlon: f64,
    pub senalt: f64,
    pub senx: f64,
    pub seny: f64,
    pub senz: f64,
    pub senvelx: f64,
    pub senvely: f64,
    pub senvelz: f64,
    pub senQuat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub fovCount: i32,
    pub expDuration: f64,
    pub zeroptd: f64,
    pub netObjSig: f64,
    pub netObjSigUnc: f64,
    pub mag: f64,
    pub magUnc: f64,
    pub magNormRange: f64,
    pub geolat: f64,
    pub geolon: f64,
    pub geoalt: f64,
    pub georange: f64,
    pub skyBkgrnd: f64,
    pub primaryExtinction: f64,
    pub primaryExtinctionUnc: f64,
    pub solarPhaseAngle: f64,
    pub solarEqPhaseAngle: f64,
    pub solarDecAngle: f64,
    pub shutterDelay: f64,
    pub timingBias: f64,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub intensity: f64,
    pub bgIntensity: f64,
    pub descriptor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: EOObservation_Ingest_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zeroPtdUnc: f64,
    pub eoobservationDetails: Option<flatbuffers::WIPOffset<&'a str>>,
    pub referenceFrame: EOObservation_Ingest_referenceFrame_Enum,
    pub senReferenceFrame: EOObservation_Ingest_senReferenceFrame_Enum,
    pub umbra: bool,
    pub penumbra: bool,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EOObservation_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    EOObservation_IngestArgs {
      id: None,
      classificationMarking: None,
      obTime: None,
      corrQuality: 0.0,
      idOnOrbit: None,
      idSensor: None,
      idSkyImagery: None,
      collectMethod: None,
      satNo: 0,
      taskId: None,
      transactionId: None,
      trackId: None,
      obPosition: None,
      origObjectId: None,
      origSensorId: None,
      uct: false,
      azimuth: 0.0,
      azimuthUnc: 0.0,
      azimuthBias: 0.0,
      azimuthRate: 0.0,
      elevation: 0.0,
      elevationUnc: 0.0,
      elevationBias: 0.0,
      elevationRate: 0.0,
      range: 0.0,
      rangeUnc: 0.0,
      rangeBias: 0.0,
      rangeRate: 0.0,
      rangeRateUnc: 0.0,
      ra: 0.0,
      raRate: 0.0,
      raUnc: 0.0,
      raBias: 0.0,
      declination: 0.0,
      declinationRate: 0.0,
      declinationUnc: 0.0,
      declinationBias: 0.0,
      losx: 0.0,
      losy: 0.0,
      losz: 0.0,
      losUnc: 0.0,
      losxvel: 0.0,
      losyvel: 0.0,
      loszvel: 0.0,
      senlat: 0.0,
      senlon: 0.0,
      senalt: 0.0,
      senx: 0.0,
      seny: 0.0,
      senz: 0.0,
      senvelx: 0.0,
      senvely: 0.0,
      senvelz: 0.0,
      senQuat: None,
      fovCount: 0,
      expDuration: 0.0,
      zeroptd: 0.0,
      netObjSig: 0.0,
      netObjSigUnc: 0.0,
      mag: 0.0,
      magUnc: 0.0,
      magNormRange: 0.0,
      geolat: 0.0,
      geolon: 0.0,
      geoalt: 0.0,
      georange: 0.0,
      skyBkgrnd: 0.0,
      primaryExtinction: 0.0,
      primaryExtinctionUnc: 0.0,
      solarPhaseAngle: 0.0,
      solarEqPhaseAngle: 0.0,
      solarDecAngle: 0.0,
      shutterDelay: 0.0,
      timingBias: 0.0,
      rawFileURI: None,
      intensity: 0.0,
      bgIntensity: 0.0,
      descriptor: None,
      source: None,
      origin: None,
      dataMode: EOObservation_Ingest_dataMode_Enum::REAL,
      tags: None,
      createdAt: None,
      createdBy: None,
      zeroPtdUnc: 0.0,
      eoobservationDetails: None,
      referenceFrame: EOObservation_Ingest_referenceFrame_Enum::J2000,
      senReferenceFrame: EOObservation_Ingest_senReferenceFrame_Enum::J2000,
      umbra: false,
      penumbra: false,
      origNetwork: None,
      sourceDL: None,
      type_: None,
    }
  }
}

pub struct EOObservation_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EOObservation_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_obTime(&mut self, obTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_OBTIME, obTime);
  }
  #[inline]
  pub fn add_corrQuality(&mut self, corrQuality: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_CORRQUALITY, corrQuality, 0.0);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_idSkyImagery(&mut self, idSkyImagery: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_IDSKYIMAGERY, idSkyImagery);
  }
  #[inline]
  pub fn add_collectMethod(&mut self, collectMethod: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_COLLECTMETHOD, collectMethod);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(EOObservation_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_taskId(&mut self, taskId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_TASKID, taskId);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn add_trackId(&mut self, trackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_TRACKID, trackId);
  }
  #[inline]
  pub fn add_obPosition(&mut self, obPosition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_OBPOSITION, obPosition);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_uct(&mut self, uct: bool) {
    self.fbb_.push_slot::<bool>(EOObservation_Ingest::VT_UCT, uct, false);
  }
  #[inline]
  pub fn add_azimuth(&mut self, azimuth: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_AZIMUTH, azimuth, 0.0);
  }
  #[inline]
  pub fn add_azimuthUnc(&mut self, azimuthUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_AZIMUTHUNC, azimuthUnc, 0.0);
  }
  #[inline]
  pub fn add_azimuthBias(&mut self, azimuthBias: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_AZIMUTHBIAS, azimuthBias, 0.0);
  }
  #[inline]
  pub fn add_azimuthRate(&mut self, azimuthRate: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_AZIMUTHRATE, azimuthRate, 0.0);
  }
  #[inline]
  pub fn add_elevation(&mut self, elevation: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_ELEVATION, elevation, 0.0);
  }
  #[inline]
  pub fn add_elevationUnc(&mut self, elevationUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_ELEVATIONUNC, elevationUnc, 0.0);
  }
  #[inline]
  pub fn add_elevationBias(&mut self, elevationBias: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_ELEVATIONBIAS, elevationBias, 0.0);
  }
  #[inline]
  pub fn add_elevationRate(&mut self, elevationRate: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_ELEVATIONRATE, elevationRate, 0.0);
  }
  #[inline]
  pub fn add_range(&mut self, range: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RANGE, range, 0.0);
  }
  #[inline]
  pub fn add_rangeUnc(&mut self, rangeUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RANGEUNC, rangeUnc, 0.0);
  }
  #[inline]
  pub fn add_rangeBias(&mut self, rangeBias: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RANGEBIAS, rangeBias, 0.0);
  }
  #[inline]
  pub fn add_rangeRate(&mut self, rangeRate: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RANGERATE, rangeRate, 0.0);
  }
  #[inline]
  pub fn add_rangeRateUnc(&mut self, rangeRateUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RANGERATEUNC, rangeRateUnc, 0.0);
  }
  #[inline]
  pub fn add_ra(&mut self, ra: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RA, ra, 0.0);
  }
  #[inline]
  pub fn add_raRate(&mut self, raRate: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RARATE, raRate, 0.0);
  }
  #[inline]
  pub fn add_raUnc(&mut self, raUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RAUNC, raUnc, 0.0);
  }
  #[inline]
  pub fn add_raBias(&mut self, raBias: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_RABIAS, raBias, 0.0);
  }
  #[inline]
  pub fn add_declination(&mut self, declination: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_DECLINATION, declination, 0.0);
  }
  #[inline]
  pub fn add_declinationRate(&mut self, declinationRate: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_DECLINATIONRATE, declinationRate, 0.0);
  }
  #[inline]
  pub fn add_declinationUnc(&mut self, declinationUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_DECLINATIONUNC, declinationUnc, 0.0);
  }
  #[inline]
  pub fn add_declinationBias(&mut self, declinationBias: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_DECLINATIONBIAS, declinationBias, 0.0);
  }
  #[inline]
  pub fn add_losx(&mut self, losx: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_LOSX, losx, 0.0);
  }
  #[inline]
  pub fn add_losy(&mut self, losy: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_LOSY, losy, 0.0);
  }
  #[inline]
  pub fn add_losz(&mut self, losz: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_LOSZ, losz, 0.0);
  }
  #[inline]
  pub fn add_losUnc(&mut self, losUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_LOSUNC, losUnc, 0.0);
  }
  #[inline]
  pub fn add_losxvel(&mut self, losxvel: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_LOSXVEL, losxvel, 0.0);
  }
  #[inline]
  pub fn add_losyvel(&mut self, losyvel: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_LOSYVEL, losyvel, 0.0);
  }
  #[inline]
  pub fn add_loszvel(&mut self, loszvel: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_LOSZVEL, loszvel, 0.0);
  }
  #[inline]
  pub fn add_senlat(&mut self, senlat: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENLAT, senlat, 0.0);
  }
  #[inline]
  pub fn add_senlon(&mut self, senlon: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENLON, senlon, 0.0);
  }
  #[inline]
  pub fn add_senalt(&mut self, senalt: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENALT, senalt, 0.0);
  }
  #[inline]
  pub fn add_senx(&mut self, senx: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENX, senx, 0.0);
  }
  #[inline]
  pub fn add_seny(&mut self, seny: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENY, seny, 0.0);
  }
  #[inline]
  pub fn add_senz(&mut self, senz: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENZ, senz, 0.0);
  }
  #[inline]
  pub fn add_senvelx(&mut self, senvelx: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENVELX, senvelx, 0.0);
  }
  #[inline]
  pub fn add_senvely(&mut self, senvely: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENVELY, senvely, 0.0);
  }
  #[inline]
  pub fn add_senvelz(&mut self, senvelz: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SENVELZ, senvelz, 0.0);
  }
  #[inline]
  pub fn add_senQuat(&mut self, senQuat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_SENQUAT, senQuat);
  }
  #[inline]
  pub fn add_fovCount(&mut self, fovCount: i32) {
    self.fbb_.push_slot::<i32>(EOObservation_Ingest::VT_FOVCOUNT, fovCount, 0);
  }
  #[inline]
  pub fn add_expDuration(&mut self, expDuration: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_EXPDURATION, expDuration, 0.0);
  }
  #[inline]
  pub fn add_zeroptd(&mut self, zeroptd: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_ZEROPTD, zeroptd, 0.0);
  }
  #[inline]
  pub fn add_netObjSig(&mut self, netObjSig: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_NETOBJSIG, netObjSig, 0.0);
  }
  #[inline]
  pub fn add_netObjSigUnc(&mut self, netObjSigUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_NETOBJSIGUNC, netObjSigUnc, 0.0);
  }
  #[inline]
  pub fn add_mag(&mut self, mag: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_MAG, mag, 0.0);
  }
  #[inline]
  pub fn add_magUnc(&mut self, magUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_MAGUNC, magUnc, 0.0);
  }
  #[inline]
  pub fn add_magNormRange(&mut self, magNormRange: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_MAGNORMRANGE, magNormRange, 0.0);
  }
  #[inline]
  pub fn add_geolat(&mut self, geolat: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_GEOLAT, geolat, 0.0);
  }
  #[inline]
  pub fn add_geolon(&mut self, geolon: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_GEOLON, geolon, 0.0);
  }
  #[inline]
  pub fn add_geoalt(&mut self, geoalt: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_GEOALT, geoalt, 0.0);
  }
  #[inline]
  pub fn add_georange(&mut self, georange: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_GEORANGE, georange, 0.0);
  }
  #[inline]
  pub fn add_skyBkgrnd(&mut self, skyBkgrnd: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SKYBKGRND, skyBkgrnd, 0.0);
  }
  #[inline]
  pub fn add_primaryExtinction(&mut self, primaryExtinction: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_PRIMARYEXTINCTION, primaryExtinction, 0.0);
  }
  #[inline]
  pub fn add_primaryExtinctionUnc(&mut self, primaryExtinctionUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_PRIMARYEXTINCTIONUNC, primaryExtinctionUnc, 0.0);
  }
  #[inline]
  pub fn add_solarPhaseAngle(&mut self, solarPhaseAngle: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SOLARPHASEANGLE, solarPhaseAngle, 0.0);
  }
  #[inline]
  pub fn add_solarEqPhaseAngle(&mut self, solarEqPhaseAngle: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SOLAREQPHASEANGLE, solarEqPhaseAngle, 0.0);
  }
  #[inline]
  pub fn add_solarDecAngle(&mut self, solarDecAngle: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SOLARDECANGLE, solarDecAngle, 0.0);
  }
  #[inline]
  pub fn add_shutterDelay(&mut self, shutterDelay: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_SHUTTERDELAY, shutterDelay, 0.0);
  }
  #[inline]
  pub fn add_timingBias(&mut self, timingBias: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_TIMINGBIAS, timingBias, 0.0);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_intensity(&mut self, intensity: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_INTENSITY, intensity, 0.0);
  }
  #[inline]
  pub fn add_bgIntensity(&mut self, bgIntensity: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_BGINTENSITY, bgIntensity, 0.0);
  }
  #[inline]
  pub fn add_descriptor(&mut self, descriptor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_DESCRIPTOR, descriptor);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: EOObservation_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<EOObservation_Ingest_dataMode_Enum>(EOObservation_Ingest::VT_DATAMODE, dataMode, EOObservation_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_zeroPtdUnc(&mut self, zeroPtdUnc: f64) {
    self.fbb_.push_slot::<f64>(EOObservation_Ingest::VT_ZEROPTDUNC, zeroPtdUnc, 0.0);
  }
  #[inline]
  pub fn add_eoobservationDetails(&mut self, eoobservationDetails: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_EOOBSERVATIONDETAILS, eoobservationDetails);
  }
  #[inline]
  pub fn add_referenceFrame(&mut self, referenceFrame: EOObservation_Ingest_referenceFrame_Enum) {
    self.fbb_.push_slot::<EOObservation_Ingest_referenceFrame_Enum>(EOObservation_Ingest::VT_REFERENCEFRAME, referenceFrame, EOObservation_Ingest_referenceFrame_Enum::J2000);
  }
  #[inline]
  pub fn add_senReferenceFrame(&mut self, senReferenceFrame: EOObservation_Ingest_senReferenceFrame_Enum) {
    self.fbb_.push_slot::<EOObservation_Ingest_senReferenceFrame_Enum>(EOObservation_Ingest::VT_SENREFERENCEFRAME, senReferenceFrame, EOObservation_Ingest_senReferenceFrame_Enum::J2000);
  }
  #[inline]
  pub fn add_umbra(&mut self, umbra: bool) {
    self.fbb_.push_slot::<bool>(EOObservation_Ingest::VT_UMBRA, umbra, false);
  }
  #[inline]
  pub fn add_penumbra(&mut self, penumbra: bool) {
    self.fbb_.push_slot::<bool>(EOObservation_Ingest::VT_PENUMBRA, penumbra, false);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EOObservation_Ingest::VT_TYPE_, type_);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EOObservation_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EOObservation_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EOObservation_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EOObservation_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EOObservation_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("obTime", &self.obTime());
      ds.field("corrQuality", &self.corrQuality());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("idSensor", &self.idSensor());
      ds.field("idSkyImagery", &self.idSkyImagery());
      ds.field("collectMethod", &self.collectMethod());
      ds.field("satNo", &self.satNo());
      ds.field("taskId", &self.taskId());
      ds.field("transactionId", &self.transactionId());
      ds.field("trackId", &self.trackId());
      ds.field("obPosition", &self.obPosition());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("uct", &self.uct());
      ds.field("azimuth", &self.azimuth());
      ds.field("azimuthUnc", &self.azimuthUnc());
      ds.field("azimuthBias", &self.azimuthBias());
      ds.field("azimuthRate", &self.azimuthRate());
      ds.field("elevation", &self.elevation());
      ds.field("elevationUnc", &self.elevationUnc());
      ds.field("elevationBias", &self.elevationBias());
      ds.field("elevationRate", &self.elevationRate());
      ds.field("range", &self.range());
      ds.field("rangeUnc", &self.rangeUnc());
      ds.field("rangeBias", &self.rangeBias());
      ds.field("rangeRate", &self.rangeRate());
      ds.field("rangeRateUnc", &self.rangeRateUnc());
      ds.field("ra", &self.ra());
      ds.field("raRate", &self.raRate());
      ds.field("raUnc", &self.raUnc());
      ds.field("raBias", &self.raBias());
      ds.field("declination", &self.declination());
      ds.field("declinationRate", &self.declinationRate());
      ds.field("declinationUnc", &self.declinationUnc());
      ds.field("declinationBias", &self.declinationBias());
      ds.field("losx", &self.losx());
      ds.field("losy", &self.losy());
      ds.field("losz", &self.losz());
      ds.field("losUnc", &self.losUnc());
      ds.field("losxvel", &self.losxvel());
      ds.field("losyvel", &self.losyvel());
      ds.field("loszvel", &self.loszvel());
      ds.field("senlat", &self.senlat());
      ds.field("senlon", &self.senlon());
      ds.field("senalt", &self.senalt());
      ds.field("senx", &self.senx());
      ds.field("seny", &self.seny());
      ds.field("senz", &self.senz());
      ds.field("senvelx", &self.senvelx());
      ds.field("senvely", &self.senvely());
      ds.field("senvelz", &self.senvelz());
      ds.field("senQuat", &self.senQuat());
      ds.field("fovCount", &self.fovCount());
      ds.field("expDuration", &self.expDuration());
      ds.field("zeroptd", &self.zeroptd());
      ds.field("netObjSig", &self.netObjSig());
      ds.field("netObjSigUnc", &self.netObjSigUnc());
      ds.field("mag", &self.mag());
      ds.field("magUnc", &self.magUnc());
      ds.field("magNormRange", &self.magNormRange());
      ds.field("geolat", &self.geolat());
      ds.field("geolon", &self.geolon());
      ds.field("geoalt", &self.geoalt());
      ds.field("georange", &self.georange());
      ds.field("skyBkgrnd", &self.skyBkgrnd());
      ds.field("primaryExtinction", &self.primaryExtinction());
      ds.field("primaryExtinctionUnc", &self.primaryExtinctionUnc());
      ds.field("solarPhaseAngle", &self.solarPhaseAngle());
      ds.field("solarEqPhaseAngle", &self.solarEqPhaseAngle());
      ds.field("solarDecAngle", &self.solarDecAngle());
      ds.field("shutterDelay", &self.shutterDelay());
      ds.field("timingBias", &self.timingBias());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("intensity", &self.intensity());
      ds.field("bgIntensity", &self.bgIntensity());
      ds.field("descriptor", &self.descriptor());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("zeroPtdUnc", &self.zeroPtdUnc());
      ds.field("eoobservationDetails", &self.eoobservationDetails());
      ds.field("referenceFrame", &self.referenceFrame());
      ds.field("senReferenceFrame", &self.senReferenceFrame());
      ds.field("umbra", &self.umbra());
      ds.field("penumbra", &self.penumbra());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("type_", &self.type_());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EOObservation_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub obTime: Option<String>,
  pub corrQuality: f64,
  pub idOnOrbit: Option<String>,
  pub idSensor: Option<String>,
  pub idSkyImagery: Option<String>,
  pub collectMethod: Option<String>,
  pub satNo: i32,
  pub taskId: Option<String>,
  pub transactionId: Option<String>,
  pub trackId: Option<String>,
  pub obPosition: Option<String>,
  pub origObjectId: Option<String>,
  pub origSensorId: Option<String>,
  pub uct: bool,
  pub azimuth: f64,
  pub azimuthUnc: f64,
  pub azimuthBias: f64,
  pub azimuthRate: f64,
  pub elevation: f64,
  pub elevationUnc: f64,
  pub elevationBias: f64,
  pub elevationRate: f64,
  pub range: f64,
  pub rangeUnc: f64,
  pub rangeBias: f64,
  pub rangeRate: f64,
  pub rangeRateUnc: f64,
  pub ra: f64,
  pub raRate: f64,
  pub raUnc: f64,
  pub raBias: f64,
  pub declination: f64,
  pub declinationRate: f64,
  pub declinationUnc: f64,
  pub declinationBias: f64,
  pub losx: f64,
  pub losy: f64,
  pub losz: f64,
  pub losUnc: f64,
  pub losxvel: f64,
  pub losyvel: f64,
  pub loszvel: f64,
  pub senlat: f64,
  pub senlon: f64,
  pub senalt: f64,
  pub senx: f64,
  pub seny: f64,
  pub senz: f64,
  pub senvelx: f64,
  pub senvely: f64,
  pub senvelz: f64,
  pub senQuat: Option<Vec<String>>,
  pub fovCount: i32,
  pub expDuration: f64,
  pub zeroptd: f64,
  pub netObjSig: f64,
  pub netObjSigUnc: f64,
  pub mag: f64,
  pub magUnc: f64,
  pub magNormRange: f64,
  pub geolat: f64,
  pub geolon: f64,
  pub geoalt: f64,
  pub georange: f64,
  pub skyBkgrnd: f64,
  pub primaryExtinction: f64,
  pub primaryExtinctionUnc: f64,
  pub solarPhaseAngle: f64,
  pub solarEqPhaseAngle: f64,
  pub solarDecAngle: f64,
  pub shutterDelay: f64,
  pub timingBias: f64,
  pub rawFileURI: Option<String>,
  pub intensity: f64,
  pub bgIntensity: f64,
  pub descriptor: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: EOObservation_Ingest_dataMode_Enum,
  pub tags: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub zeroPtdUnc: f64,
  pub eoobservationDetails: Option<String>,
  pub referenceFrame: EOObservation_Ingest_referenceFrame_Enum,
  pub senReferenceFrame: EOObservation_Ingest_senReferenceFrame_Enum,
  pub umbra: bool,
  pub penumbra: bool,
  pub origNetwork: Option<String>,
  pub sourceDL: Option<String>,
  pub type_: Option<String>,
}
impl Default for EOObservation_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      obTime: None,
      corrQuality: 0.0,
      idOnOrbit: None,
      idSensor: None,
      idSkyImagery: None,
      collectMethod: None,
      satNo: 0,
      taskId: None,
      transactionId: None,
      trackId: None,
      obPosition: None,
      origObjectId: None,
      origSensorId: None,
      uct: false,
      azimuth: 0.0,
      azimuthUnc: 0.0,
      azimuthBias: 0.0,
      azimuthRate: 0.0,
      elevation: 0.0,
      elevationUnc: 0.0,
      elevationBias: 0.0,
      elevationRate: 0.0,
      range: 0.0,
      rangeUnc: 0.0,
      rangeBias: 0.0,
      rangeRate: 0.0,
      rangeRateUnc: 0.0,
      ra: 0.0,
      raRate: 0.0,
      raUnc: 0.0,
      raBias: 0.0,
      declination: 0.0,
      declinationRate: 0.0,
      declinationUnc: 0.0,
      declinationBias: 0.0,
      losx: 0.0,
      losy: 0.0,
      losz: 0.0,
      losUnc: 0.0,
      losxvel: 0.0,
      losyvel: 0.0,
      loszvel: 0.0,
      senlat: 0.0,
      senlon: 0.0,
      senalt: 0.0,
      senx: 0.0,
      seny: 0.0,
      senz: 0.0,
      senvelx: 0.0,
      senvely: 0.0,
      senvelz: 0.0,
      senQuat: None,
      fovCount: 0,
      expDuration: 0.0,
      zeroptd: 0.0,
      netObjSig: 0.0,
      netObjSigUnc: 0.0,
      mag: 0.0,
      magUnc: 0.0,
      magNormRange: 0.0,
      geolat: 0.0,
      geolon: 0.0,
      geoalt: 0.0,
      georange: 0.0,
      skyBkgrnd: 0.0,
      primaryExtinction: 0.0,
      primaryExtinctionUnc: 0.0,
      solarPhaseAngle: 0.0,
      solarEqPhaseAngle: 0.0,
      solarDecAngle: 0.0,
      shutterDelay: 0.0,
      timingBias: 0.0,
      rawFileURI: None,
      intensity: 0.0,
      bgIntensity: 0.0,
      descriptor: None,
      source: None,
      origin: None,
      dataMode: EOObservation_Ingest_dataMode_Enum::REAL,
      tags: None,
      createdAt: None,
      createdBy: None,
      zeroPtdUnc: 0.0,
      eoobservationDetails: None,
      referenceFrame: EOObservation_Ingest_referenceFrame_Enum::J2000,
      senReferenceFrame: EOObservation_Ingest_senReferenceFrame_Enum::J2000,
      umbra: false,
      penumbra: false,
      origNetwork: None,
      sourceDL: None,
      type_: None,
    }
  }
}
impl EOObservation_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EOObservation_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obTime = self.obTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let corrQuality = self.corrQuality;
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSkyImagery = self.idSkyImagery.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let collectMethod = self.collectMethod.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let taskId = self.taskId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackId = self.trackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obPosition = self.obPosition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let uct = self.uct;
    let azimuth = self.azimuth;
    let azimuthUnc = self.azimuthUnc;
    let azimuthBias = self.azimuthBias;
    let azimuthRate = self.azimuthRate;
    let elevation = self.elevation;
    let elevationUnc = self.elevationUnc;
    let elevationBias = self.elevationBias;
    let elevationRate = self.elevationRate;
    let range = self.range;
    let rangeUnc = self.rangeUnc;
    let rangeBias = self.rangeBias;
    let rangeRate = self.rangeRate;
    let rangeRateUnc = self.rangeRateUnc;
    let ra = self.ra;
    let raRate = self.raRate;
    let raUnc = self.raUnc;
    let raBias = self.raBias;
    let declination = self.declination;
    let declinationRate = self.declinationRate;
    let declinationUnc = self.declinationUnc;
    let declinationBias = self.declinationBias;
    let losx = self.losx;
    let losy = self.losy;
    let losz = self.losz;
    let losUnc = self.losUnc;
    let losxvel = self.losxvel;
    let losyvel = self.losyvel;
    let loszvel = self.loszvel;
    let senlat = self.senlat;
    let senlon = self.senlon;
    let senalt = self.senalt;
    let senx = self.senx;
    let seny = self.seny;
    let senz = self.senz;
    let senvelx = self.senvelx;
    let senvely = self.senvely;
    let senvelz = self.senvelz;
    let senQuat = self.senQuat.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let fovCount = self.fovCount;
    let expDuration = self.expDuration;
    let zeroptd = self.zeroptd;
    let netObjSig = self.netObjSig;
    let netObjSigUnc = self.netObjSigUnc;
    let mag = self.mag;
    let magUnc = self.magUnc;
    let magNormRange = self.magNormRange;
    let geolat = self.geolat;
    let geolon = self.geolon;
    let geoalt = self.geoalt;
    let georange = self.georange;
    let skyBkgrnd = self.skyBkgrnd;
    let primaryExtinction = self.primaryExtinction;
    let primaryExtinctionUnc = self.primaryExtinctionUnc;
    let solarPhaseAngle = self.solarPhaseAngle;
    let solarEqPhaseAngle = self.solarEqPhaseAngle;
    let solarDecAngle = self.solarDecAngle;
    let shutterDelay = self.shutterDelay;
    let timingBias = self.timingBias;
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let intensity = self.intensity;
    let bgIntensity = self.bgIntensity;
    let descriptor = self.descriptor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zeroPtdUnc = self.zeroPtdUnc;
    let eoobservationDetails = self.eoobservationDetails.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let referenceFrame = self.referenceFrame;
    let senReferenceFrame = self.senReferenceFrame;
    let umbra = self.umbra;
    let penumbra = self.penumbra;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EOObservation_Ingest::create(_fbb, &EOObservation_IngestArgs{
      id,
      classificationMarking,
      obTime,
      corrQuality,
      idOnOrbit,
      idSensor,
      idSkyImagery,
      collectMethod,
      satNo,
      taskId,
      transactionId,
      trackId,
      obPosition,
      origObjectId,
      origSensorId,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      range,
      rangeUnc,
      rangeBias,
      rangeRate,
      rangeRateUnc,
      ra,
      raRate,
      raUnc,
      raBias,
      declination,
      declinationRate,
      declinationUnc,
      declinationBias,
      losx,
      losy,
      losz,
      losUnc,
      losxvel,
      losyvel,
      loszvel,
      senlat,
      senlon,
      senalt,
      senx,
      seny,
      senz,
      senvelx,
      senvely,
      senvelz,
      senQuat,
      fovCount,
      expDuration,
      zeroptd,
      netObjSig,
      netObjSigUnc,
      mag,
      magUnc,
      magNormRange,
      geolat,
      geolon,
      geoalt,
      georange,
      skyBkgrnd,
      primaryExtinction,
      primaryExtinctionUnc,
      solarPhaseAngle,
      solarEqPhaseAngle,
      solarDecAngle,
      shutterDelay,
      timingBias,
      rawFileURI,
      intensity,
      bgIntensity,
      descriptor,
      source,
      origin,
      dataMode,
      tags,
      createdAt,
      createdBy,
      zeroPtdUnc,
      eoobservationDetails,
      referenceFrame,
      senReferenceFrame,
      umbra,
      penumbra,
      origNetwork,
      sourceDL,
      type_,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EOObservation_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eoobservation_ingest_unchecked`.
pub fn root_as_eoobservation_ingest(buf: &[u8]) -> Result<EOObservation_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EOObservation_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EOObservation_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_eoobservation_ingest_unchecked`.
pub fn size_prefixed_root_as_eoobservation_ingest(buf: &[u8]) -> Result<EOObservation_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EOObservation_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EOObservation_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eoobservation_ingest_unchecked`.
pub fn root_as_eoobservation_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EOObservation_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EOObservation_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EOObservation_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eoobservation_ingest_unchecked`.
pub fn size_prefixed_root_as_eoobservation_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EOObservation_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EOObservation_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EOObservation_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EOObservation_Ingest`.
pub unsafe fn root_as_eoobservation_ingest_unchecked(buf: &[u8]) -> EOObservation_Ingest {
  flatbuffers::root_unchecked::<EOObservation_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EOObservation_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EOObservation_Ingest`.
pub unsafe fn size_prefixed_root_as_eoobservation_ingest_unchecked(buf: &[u8]) -> EOObservation_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<EOObservation_Ingest>(buf)
}
pub const EOOBSERVATION_INGEST_IDENTIFIER: &str = "EOOB";

#[inline]
pub fn eoobservation_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EOOBSERVATION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn eoobservation_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EOOBSERVATION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_eoobservation_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EOObservation_Ingest<'a>>) {
  fbb.finish(root, Some(EOOBSERVATION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_eoobservation_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EOObservation_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(EOOBSERVATION_INGEST_IDENTIFIER));
}
