// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIR_EVENT_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIR_EVENT_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIR_EVENT_ABRIDGED_DATA_MODE_ENUM: [AirEvent_Abridged_dataMode_Enum; 4] = [
  AirEvent_Abridged_dataMode_Enum::REAL,
  AirEvent_Abridged_dataMode_Enum::TEST,
  AirEvent_Abridged_dataMode_Enum::SIMULATED,
  AirEvent_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AirEvent_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AirEvent_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AirEvent_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AirEvent_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AirEvent_Abridged_dataMode_Enum {
    type Output = AirEvent_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AirEvent_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AirEvent_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AirEvent_Abridged_dataMode_Enum {}
pub enum AirEvent_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information related to an air event (e.g. FUEL TRANSFER, AIR DROP) and the associated aircraft.
pub struct AirEvent_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirEvent_Abridged<'a> {
  type Inner = AirEvent_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirEvent_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 8;
  pub const VT_IDSORTIE: flatbuffers::VOffsetT = 10;
  pub const VT_IDMISSION: flatbuffers::VOffsetT = 12;
  pub const VT_EXTERNALAIREVENTID: flatbuffers::VOffsetT = 14;
  pub const VT_LEGNUM: flatbuffers::VOffsetT = 16;
  pub const VT_LOCATION: flatbuffers::VOffsetT = 18;
  pub const VT_ARRPURPOSE: flatbuffers::VOffsetT = 20;
  pub const VT_PLANNEDARRTIME: flatbuffers::VOffsetT = 22;
  pub const VT_ESTARRTIME: flatbuffers::VOffsetT = 24;
  pub const VT_ACTUALARRTIME: flatbuffers::VOffsetT = 26;
  pub const VT_DEPPURPOSE: flatbuffers::VOffsetT = 28;
  pub const VT_PLANNEDDEPTIME: flatbuffers::VOffsetT = 30;
  pub const VT_ESTDEPTIME: flatbuffers::VOffsetT = 32;
  pub const VT_ACTUALDEPTIME: flatbuffers::VOffsetT = 34;
  pub const VT_EXTERNALARTRACKID: flatbuffers::VOffsetT = 36;
  pub const VT_ARTRACKID: flatbuffers::VOffsetT = 38;
  pub const VT_ARTRACKNAME: flatbuffers::VOffsetT = 40;
  pub const VT_RZCT: flatbuffers::VOffsetT = 42;
  pub const VT_ARCT: flatbuffers::VOffsetT = 44;
  pub const VT_BASEALT: flatbuffers::VOffsetT = 46;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 48;
  pub const VT_TRACKTIME: flatbuffers::VOffsetT = 50;
  pub const VT_STATUSCODE: flatbuffers::VOffsetT = 52;
  pub const VT_RZPOINT: flatbuffers::VOffsetT = 54;
  pub const VT_RZTYPE: flatbuffers::VOffsetT = 56;
  pub const VT_AREVENTTYPE: flatbuffers::VOffsetT = 58;
  pub const VT_NUMTANKERS: flatbuffers::VOffsetT = 60;
  pub const VT_REVTRACK: flatbuffers::VOffsetT = 62;
  pub const VT_SHORTTRACK: flatbuffers::VOffsetT = 64;
  pub const VT_CANCELLED: flatbuffers::VOffsetT = 66;
  pub const VT_TANKERS: flatbuffers::VOffsetT = 68;
  pub const VT_RECEIVERS: flatbuffers::VOffsetT = 70;
  pub const VT_REMARKS: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 74;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 76;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 78;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 80;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 82;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 84;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 86;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 88;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 90;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirEvent_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirEvent_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<AirEvent_Abridged<'bldr>> {
    let mut builder = AirEvent_AbridgedBuilder::new(_fbb);
    builder.add_trackTime(args.trackTime);
    builder.add_baseAlt(args.baseAlt);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.remarks { builder.add_remarks(x); }
    if let Some(x) = args.receivers { builder.add_receivers(x); }
    if let Some(x) = args.tankers { builder.add_tankers(x); }
    builder.add_numTankers(args.numTankers);
    if let Some(x) = args.arEventType { builder.add_arEventType(x); }
    if let Some(x) = args.rzType { builder.add_rzType(x); }
    if let Some(x) = args.rzPoint { builder.add_rzPoint(x); }
    if let Some(x) = args.statusCode { builder.add_statusCode(x); }
    if let Some(x) = args.priority { builder.add_priority(x); }
    if let Some(x) = args.arct { builder.add_arct(x); }
    if let Some(x) = args.rzct { builder.add_rzct(x); }
    if let Some(x) = args.arTrackName { builder.add_arTrackName(x); }
    if let Some(x) = args.arTrackId { builder.add_arTrackId(x); }
    if let Some(x) = args.externalARTrackId { builder.add_externalARTrackId(x); }
    if let Some(x) = args.actualDepTime { builder.add_actualDepTime(x); }
    if let Some(x) = args.estDepTime { builder.add_estDepTime(x); }
    if let Some(x) = args.plannedDepTime { builder.add_plannedDepTime(x); }
    if let Some(x) = args.depPurpose { builder.add_depPurpose(x); }
    if let Some(x) = args.actualArrTime { builder.add_actualArrTime(x); }
    if let Some(x) = args.estArrTime { builder.add_estArrTime(x); }
    if let Some(x) = args.plannedArrTime { builder.add_plannedArrTime(x); }
    if let Some(x) = args.arrPurpose { builder.add_arrPurpose(x); }
    if let Some(x) = args.location { builder.add_location(x); }
    builder.add_legNum(args.legNum);
    if let Some(x) = args.externalAirEventId { builder.add_externalAirEventId(x); }
    if let Some(x) = args.idMission { builder.add_idMission(x); }
    if let Some(x) = args.idSortie { builder.add_idSortie(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_cancelled(args.cancelled);
    builder.add_shortTrack(args.shortTrack);
    builder.add_revTrack(args.revTrack);
    builder.finish()
  }

  pub fn unpack(&self) -> AirEvent_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let idSortie = self.idSortie().map(|x| {
      x.to_string()
    });
    let idMission = self.idMission().map(|x| {
      x.to_string()
    });
    let externalAirEventId = self.externalAirEventId().map(|x| {
      x.to_string()
    });
    let legNum = self.legNum();
    let location = self.location().map(|x| {
      x.to_string()
    });
    let arrPurpose = self.arrPurpose().map(|x| {
      x.to_string()
    });
    let plannedArrTime = self.plannedArrTime().map(|x| {
      x.to_string()
    });
    let estArrTime = self.estArrTime().map(|x| {
      x.to_string()
    });
    let actualArrTime = self.actualArrTime().map(|x| {
      x.to_string()
    });
    let depPurpose = self.depPurpose().map(|x| {
      x.to_string()
    });
    let plannedDepTime = self.plannedDepTime().map(|x| {
      x.to_string()
    });
    let estDepTime = self.estDepTime().map(|x| {
      x.to_string()
    });
    let actualDepTime = self.actualDepTime().map(|x| {
      x.to_string()
    });
    let externalARTrackId = self.externalARTrackId().map(|x| {
      x.to_string()
    });
    let arTrackId = self.arTrackId().map(|x| {
      x.to_string()
    });
    let arTrackName = self.arTrackName().map(|x| {
      x.to_string()
    });
    let rzct = self.rzct().map(|x| {
      x.to_string()
    });
    let arct = self.arct().map(|x| {
      x.to_string()
    });
    let baseAlt = self.baseAlt();
    let priority = self.priority().map(|x| {
      x.to_string()
    });
    let trackTime = self.trackTime();
    let statusCode = self.statusCode().map(|x| {
      x.to_string()
    });
    let rzPoint = self.rzPoint().map(|x| {
      x.to_string()
    });
    let rzType = self.rzType().map(|x| {
      x.to_string()
    });
    let arEventType = self.arEventType().map(|x| {
      x.to_string()
    });
    let numTankers = self.numTankers();
    let revTrack = self.revTrack();
    let shortTrack = self.shortTrack();
    let cancelled = self.cancelled();
    let tankers = self.tankers().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let receivers = self.receivers().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let remarks = self.remarks().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    AirEvent_AbridgedT {
      id,
      classificationMarking,
      type_,
      idSortie,
      idMission,
      externalAirEventId,
      legNum,
      location,
      arrPurpose,
      plannedArrTime,
      estArrTime,
      actualArrTime,
      depPurpose,
      plannedDepTime,
      estDepTime,
      actualDepTime,
      externalARTrackId,
      arTrackId,
      arTrackName,
      rzct,
      arct,
      baseAlt,
      priority,
      trackTime,
      statusCode,
      rzPoint,
      rzType,
      arEventType,
      numTankers,
      revTrack,
      shortTrack,
      cancelled,
      tankers,
      receivers,
      remarks,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Type of air event (e.g. FUEL TRANSFER, AIR DROP, etc).
  /// Example: /// Example: FUEL TRANSFER
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_TYPE_, None)}
  }
  /// The UDL unique identifier of the sortie associated with this air event.
  /// Example: /// Example: b9866c03-2397-4506-8153-852e72d9b54f
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSortie(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_IDSORTIE, None)}
  }
  /// The UDL unique identifier of the mission associated with this air event.
  /// Example: /// Example: 190dea6d-2a90-45a2-a276-be9047d9b96c
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idMission(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_IDMISSION, None)}
  }
  /// Optional air event ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: MB014313032022407540
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalAirEventId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_EXTERNALAIREVENTID, None)}
  }
  /// Identifies the Itinerary point of a sortie where an air event occurs.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirEvent_Abridged::VT_LEGNUM, Some(0)).unwrap()}
  }
  /// The location representing this air event specified as a feature Id. Locations specified include air refueling track Ids and air drop event locations.
  /// Example: /// Example: 901EW
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn location(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_LOCATION, None)}
  }
  /// The purpose of the air event at the arrival location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn arrPurpose(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ARRPURPOSE, None)}
  }
  /// The scheduled arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn plannedArrTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_PLANNEDARRTIME, None)}
  }
  /// The current estimated arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:59:48.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estArrTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ESTARRTIME, None)}
  }
  /// The actual arrival time of the aircraft at the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:00:03.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualArrTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ACTUALARRTIME, None)}
  }
  /// The purpose of the air event at the departure location. Can be either descriptive text such as 'fuel onload' or a purpose code specified by the provider, such as 'A'.
  /// Example: /// Example: Q
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn depPurpose(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_DEPPURPOSE, None)}
  }
  /// The scheduled departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:15:43.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn plannedDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_PLANNEDDEPTIME, None)}
  }
  /// The current estimated departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:19:48.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ESTDEPTIME, None)}
  }
  /// The actual departure time of the aircraft from the air event, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T14:17:03.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ACTUALDEPTIME, None)}
  }
  /// Optional air refueling track ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 6418a4b68e5c3896bf024cc79aa4174c
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalARTrackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_EXTERNALARTRACKID, None)}
  }
  /// Identifier of the air refueling track, if applicable.
  /// Example: /// Example: CH61
  /// Constraints: Minimum length = 0, Maximum length = 15
  #[inline]
  pub fn arTrackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ARTRACKID, None)}
  }
  /// Name of the air refueling track, if applicable.
  /// Example: /// Example: CH61 POST
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn arTrackName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ARTRACKNAME, None)}
  }
  /// The Rendezvous Control Time is the planned time the tanker and receiver aircraft will rendezvous for an en route type air refueling event, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rzct(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_RZCT, None)}
  }
  /// The Air Refueling Control Time is the planned time the tanker aircraft will transfer fuel to the receiver aircraft, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2024-01-07T15:11:27.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn arct(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ARCT, None)}
  }
  /// Altitude of this air event, in feet.
  /// Example: /// Example: 28000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn baseAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirEvent_Abridged::VT_BASEALT, Some(0.0)).unwrap()}
  }
  /// Priority of this air event.
  /// Example: /// Example: 1A2
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn priority(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_PRIORITY, None)}
  }
  /// Length of time the receiver unit has requested for an air event, in hours.
  /// Example: /// Example: 1.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn trackTime(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirEvent_Abridged::VT_TRACKTIME, Some(0.0)).unwrap()}
  }
  /// Status of this air refueling event track reservation. Receivers are responsible for scheduling or reserving air refueling tracks. Possible values are A (Altitude Reservation), R (Reserved), or Q (Questionable).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn statusCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_STATUSCODE, None)}
  }
  /// Rendezvous point for the tanker and receiver during this air refueling event. Possible values are AN (Anchor Nav Point), AP (Anchor Pattern), CP (Control Point), ET (Entry Point), EX (Exit Point), IP (Initial Point), NC (Nav Check Point).
  /// Example: /// Example: AN
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn rzPoint(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_RZPOINT, None)}
  }
  /// Type of rendezvous used for this air refueling event. Possible values are BUD (Buddy), EN (Enroute), GCI (Ground Control), PP (Point Parallel).
  /// Example: /// Example: PP
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn rzType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_RZTYPE, None)}
  }
  /// Type of process used by AMC to schedule this air refueling event. Possible values are A (Matched Long Range), F (Matched AMC Short Notice), N (Unmatched Theater Operation Short Notice (Theater Assets)), R, Unmatched Long Range, S (Soft Air Refueling), T (Matched Theater Operation Short Notice (Theater Assets)), V (Unmatched AMC Short Notice), X (Unmatched Theater Operation Short Notice (AMC Assets)), Y (Matched Theater Operation Short Notice (AMC Assets)), Z (Other Air Refueling).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn arEventType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_AREVENTTYPE, None)}
  }
  /// The number of tankers requested for an air refueling event.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numTankers(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirEvent_Abridged::VT_NUMTANKERS, Some(0)).unwrap()}
  }
  /// Flag indicating if the receiver unit has requested flying an air refueling track in both directions.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn revTrack(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AirEvent_Abridged::VT_REVTRACK, Some(false)).unwrap()}
  }
  /// Flag indicating that the receiver unit has requested flying a short portion of an air refueling track.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn shortTrack(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AirEvent_Abridged::VT_SHORTTRACK, Some(false)).unwrap()}
  }
  /// Flag indicating that this air refueling event has been cancelled.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cancelled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(AirEvent_Abridged::VT_CANCELLED, Some(false)).unwrap()}
  }
  /// Collection of tanker aircraft associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tankers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirEvent_Abridged::VT_TANKERS, None)}
  }
  /// Collection of receiver aircraft associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn receivers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirEvent_Abridged::VT_RECEIVERS, None)}
  }
  /// Collection of remarks associated with this Air Event.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn remarks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirEvent_Abridged::VT_REMARKS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_UPDATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEvent_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AirEvent_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AirEvent_Abridged_dataMode_Enum>(AirEvent_Abridged::VT_DATAMODE, Some(AirEvent_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AirEvent_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSortie", Self::VT_IDSORTIE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idMission", Self::VT_IDMISSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalAirEventId", Self::VT_EXTERNALAIREVENTID, false)?
     .visit_field::<i32>("legNum", Self::VT_LEGNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("location", Self::VT_LOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrPurpose", Self::VT_ARRPURPOSE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("plannedArrTime", Self::VT_PLANNEDARRTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estArrTime", Self::VT_ESTARRTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualArrTime", Self::VT_ACTUALARRTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depPurpose", Self::VT_DEPPURPOSE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("plannedDepTime", Self::VT_PLANNEDDEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estDepTime", Self::VT_ESTDEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualDepTime", Self::VT_ACTUALDEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalARTrackId", Self::VT_EXTERNALARTRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arTrackId", Self::VT_ARTRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arTrackName", Self::VT_ARTRACKNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rzct", Self::VT_RZCT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arct", Self::VT_ARCT, false)?
     .visit_field::<f64>("baseAlt", Self::VT_BASEALT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("priority", Self::VT_PRIORITY, false)?
     .visit_field::<f64>("trackTime", Self::VT_TRACKTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("statusCode", Self::VT_STATUSCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rzPoint", Self::VT_RZPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rzType", Self::VT_RZTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arEventType", Self::VT_AREVENTTYPE, false)?
     .visit_field::<i32>("numTankers", Self::VT_NUMTANKERS, false)?
     .visit_field::<bool>("revTrack", Self::VT_REVTRACK, false)?
     .visit_field::<bool>("shortTrack", Self::VT_SHORTTRACK, false)?
     .visit_field::<bool>("cancelled", Self::VT_CANCELLED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tankers", Self::VT_TANKERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("receivers", Self::VT_RECEIVERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("remarks", Self::VT_REMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<AirEvent_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct AirEvent_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSortie: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idMission: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalAirEventId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub legNum: i32,
    pub location: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrPurpose: Option<flatbuffers::WIPOffset<&'a str>>,
    pub plannedArrTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estArrTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualArrTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depPurpose: Option<flatbuffers::WIPOffset<&'a str>>,
    pub plannedDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalARTrackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arTrackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arTrackName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rzct: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arct: Option<flatbuffers::WIPOffset<&'a str>>,
    pub baseAlt: f64,
    pub priority: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackTime: f64,
    pub statusCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rzPoint: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rzType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arEventType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numTankers: i32,
    pub revTrack: bool,
    pub shortTrack: bool,
    pub cancelled: bool,
    pub tankers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub receivers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub remarks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AirEvent_Abridged_dataMode_Enum,
}
impl<'a> Default for AirEvent_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirEvent_AbridgedArgs {
      id: None,
      classificationMarking: None,
      type_: None,
      idSortie: None,
      idMission: None,
      externalAirEventId: None,
      legNum: 0,
      location: None,
      arrPurpose: None,
      plannedArrTime: None,
      estArrTime: None,
      actualArrTime: None,
      depPurpose: None,
      plannedDepTime: None,
      estDepTime: None,
      actualDepTime: None,
      externalARTrackId: None,
      arTrackId: None,
      arTrackName: None,
      rzct: None,
      arct: None,
      baseAlt: 0.0,
      priority: None,
      trackTime: 0.0,
      statusCode: None,
      rzPoint: None,
      rzType: None,
      arEventType: None,
      numTankers: 0,
      revTrack: false,
      shortTrack: false,
      cancelled: false,
      tankers: None,
      receivers: None,
      remarks: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: AirEvent_Abridged_dataMode_Enum::REAL,
    }
  }
}

pub struct AirEvent_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirEvent_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_idSortie(&mut self, idSortie: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_IDSORTIE, idSortie);
  }
  #[inline]
  pub fn add_idMission(&mut self, idMission: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_IDMISSION, idMission);
  }
  #[inline]
  pub fn add_externalAirEventId(&mut self, externalAirEventId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_EXTERNALAIREVENTID, externalAirEventId);
  }
  #[inline]
  pub fn add_legNum(&mut self, legNum: i32) {
    self.fbb_.push_slot::<i32>(AirEvent_Abridged::VT_LEGNUM, legNum, 0);
  }
  #[inline]
  pub fn add_location(&mut self, location: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_LOCATION, location);
  }
  #[inline]
  pub fn add_arrPurpose(&mut self, arrPurpose: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ARRPURPOSE, arrPurpose);
  }
  #[inline]
  pub fn add_plannedArrTime(&mut self, plannedArrTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_PLANNEDARRTIME, plannedArrTime);
  }
  #[inline]
  pub fn add_estArrTime(&mut self, estArrTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ESTARRTIME, estArrTime);
  }
  #[inline]
  pub fn add_actualArrTime(&mut self, actualArrTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ACTUALARRTIME, actualArrTime);
  }
  #[inline]
  pub fn add_depPurpose(&mut self, depPurpose: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_DEPPURPOSE, depPurpose);
  }
  #[inline]
  pub fn add_plannedDepTime(&mut self, plannedDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_PLANNEDDEPTIME, plannedDepTime);
  }
  #[inline]
  pub fn add_estDepTime(&mut self, estDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ESTDEPTIME, estDepTime);
  }
  #[inline]
  pub fn add_actualDepTime(&mut self, actualDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ACTUALDEPTIME, actualDepTime);
  }
  #[inline]
  pub fn add_externalARTrackId(&mut self, externalARTrackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_EXTERNALARTRACKID, externalARTrackId);
  }
  #[inline]
  pub fn add_arTrackId(&mut self, arTrackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ARTRACKID, arTrackId);
  }
  #[inline]
  pub fn add_arTrackName(&mut self, arTrackName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ARTRACKNAME, arTrackName);
  }
  #[inline]
  pub fn add_rzct(&mut self, rzct: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_RZCT, rzct);
  }
  #[inline]
  pub fn add_arct(&mut self, arct: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ARCT, arct);
  }
  #[inline]
  pub fn add_baseAlt(&mut self, baseAlt: f64) {
    self.fbb_.push_slot::<f64>(AirEvent_Abridged::VT_BASEALT, baseAlt, 0.0);
  }
  #[inline]
  pub fn add_priority(&mut self, priority: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_PRIORITY, priority);
  }
  #[inline]
  pub fn add_trackTime(&mut self, trackTime: f64) {
    self.fbb_.push_slot::<f64>(AirEvent_Abridged::VT_TRACKTIME, trackTime, 0.0);
  }
  #[inline]
  pub fn add_statusCode(&mut self, statusCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_STATUSCODE, statusCode);
  }
  #[inline]
  pub fn add_rzPoint(&mut self, rzPoint: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_RZPOINT, rzPoint);
  }
  #[inline]
  pub fn add_rzType(&mut self, rzType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_RZTYPE, rzType);
  }
  #[inline]
  pub fn add_arEventType(&mut self, arEventType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_AREVENTTYPE, arEventType);
  }
  #[inline]
  pub fn add_numTankers(&mut self, numTankers: i32) {
    self.fbb_.push_slot::<i32>(AirEvent_Abridged::VT_NUMTANKERS, numTankers, 0);
  }
  #[inline]
  pub fn add_revTrack(&mut self, revTrack: bool) {
    self.fbb_.push_slot::<bool>(AirEvent_Abridged::VT_REVTRACK, revTrack, false);
  }
  #[inline]
  pub fn add_shortTrack(&mut self, shortTrack: bool) {
    self.fbb_.push_slot::<bool>(AirEvent_Abridged::VT_SHORTTRACK, shortTrack, false);
  }
  #[inline]
  pub fn add_cancelled(&mut self, cancelled: bool) {
    self.fbb_.push_slot::<bool>(AirEvent_Abridged::VT_CANCELLED, cancelled, false);
  }
  #[inline]
  pub fn add_tankers(&mut self, tankers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_TANKERS, tankers);
  }
  #[inline]
  pub fn add_receivers(&mut self, receivers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_RECEIVERS, receivers);
  }
  #[inline]
  pub fn add_remarks(&mut self, remarks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_REMARKS, remarks);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEvent_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AirEvent_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<AirEvent_Abridged_dataMode_Enum>(AirEvent_Abridged::VT_DATAMODE, dataMode, AirEvent_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirEvent_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirEvent_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirEvent_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirEvent_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirEvent_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("type_", &self.type_());
      ds.field("idSortie", &self.idSortie());
      ds.field("idMission", &self.idMission());
      ds.field("externalAirEventId", &self.externalAirEventId());
      ds.field("legNum", &self.legNum());
      ds.field("location", &self.location());
      ds.field("arrPurpose", &self.arrPurpose());
      ds.field("plannedArrTime", &self.plannedArrTime());
      ds.field("estArrTime", &self.estArrTime());
      ds.field("actualArrTime", &self.actualArrTime());
      ds.field("depPurpose", &self.depPurpose());
      ds.field("plannedDepTime", &self.plannedDepTime());
      ds.field("estDepTime", &self.estDepTime());
      ds.field("actualDepTime", &self.actualDepTime());
      ds.field("externalARTrackId", &self.externalARTrackId());
      ds.field("arTrackId", &self.arTrackId());
      ds.field("arTrackName", &self.arTrackName());
      ds.field("rzct", &self.rzct());
      ds.field("arct", &self.arct());
      ds.field("baseAlt", &self.baseAlt());
      ds.field("priority", &self.priority());
      ds.field("trackTime", &self.trackTime());
      ds.field("statusCode", &self.statusCode());
      ds.field("rzPoint", &self.rzPoint());
      ds.field("rzType", &self.rzType());
      ds.field("arEventType", &self.arEventType());
      ds.field("numTankers", &self.numTankers());
      ds.field("revTrack", &self.revTrack());
      ds.field("shortTrack", &self.shortTrack());
      ds.field("cancelled", &self.cancelled());
      ds.field("tankers", &self.tankers());
      ds.field("receivers", &self.receivers());
      ds.field("remarks", &self.remarks());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirEvent_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub type_: Option<String>,
  pub idSortie: Option<String>,
  pub idMission: Option<String>,
  pub externalAirEventId: Option<String>,
  pub legNum: i32,
  pub location: Option<String>,
  pub arrPurpose: Option<String>,
  pub plannedArrTime: Option<String>,
  pub estArrTime: Option<String>,
  pub actualArrTime: Option<String>,
  pub depPurpose: Option<String>,
  pub plannedDepTime: Option<String>,
  pub estDepTime: Option<String>,
  pub actualDepTime: Option<String>,
  pub externalARTrackId: Option<String>,
  pub arTrackId: Option<String>,
  pub arTrackName: Option<String>,
  pub rzct: Option<String>,
  pub arct: Option<String>,
  pub baseAlt: f64,
  pub priority: Option<String>,
  pub trackTime: f64,
  pub statusCode: Option<String>,
  pub rzPoint: Option<String>,
  pub rzType: Option<String>,
  pub arEventType: Option<String>,
  pub numTankers: i32,
  pub revTrack: bool,
  pub shortTrack: bool,
  pub cancelled: bool,
  pub tankers: Option<Vec<String>>,
  pub receivers: Option<Vec<String>>,
  pub remarks: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: AirEvent_Abridged_dataMode_Enum,
}
impl Default for AirEvent_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      type_: None,
      idSortie: None,
      idMission: None,
      externalAirEventId: None,
      legNum: 0,
      location: None,
      arrPurpose: None,
      plannedArrTime: None,
      estArrTime: None,
      actualArrTime: None,
      depPurpose: None,
      plannedDepTime: None,
      estDepTime: None,
      actualDepTime: None,
      externalARTrackId: None,
      arTrackId: None,
      arTrackName: None,
      rzct: None,
      arct: None,
      baseAlt: 0.0,
      priority: None,
      trackTime: 0.0,
      statusCode: None,
      rzPoint: None,
      rzType: None,
      arEventType: None,
      numTankers: 0,
      revTrack: false,
      shortTrack: false,
      cancelled: false,
      tankers: None,
      receivers: None,
      remarks: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: AirEvent_Abridged_dataMode_Enum::REAL,
    }
  }
}
impl AirEvent_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirEvent_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSortie = self.idSortie.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idMission = self.idMission.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalAirEventId = self.externalAirEventId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let legNum = self.legNum;
    let location = self.location.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrPurpose = self.arrPurpose.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let plannedArrTime = self.plannedArrTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estArrTime = self.estArrTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualArrTime = self.actualArrTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depPurpose = self.depPurpose.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let plannedDepTime = self.plannedDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estDepTime = self.estDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualDepTime = self.actualDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalARTrackId = self.externalARTrackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arTrackId = self.arTrackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arTrackName = self.arTrackName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rzct = self.rzct.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arct = self.arct.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let baseAlt = self.baseAlt;
    let priority = self.priority.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackTime = self.trackTime;
    let statusCode = self.statusCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rzPoint = self.rzPoint.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rzType = self.rzType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arEventType = self.arEventType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numTankers = self.numTankers;
    let revTrack = self.revTrack;
    let shortTrack = self.shortTrack;
    let cancelled = self.cancelled;
    let tankers = self.tankers.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let receivers = self.receivers.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let remarks = self.remarks.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    AirEvent_Abridged::create(_fbb, &AirEvent_AbridgedArgs{
      id,
      classificationMarking,
      type_,
      idSortie,
      idMission,
      externalAirEventId,
      legNum,
      location,
      arrPurpose,
      plannedArrTime,
      estArrTime,
      actualArrTime,
      depPurpose,
      plannedDepTime,
      estDepTime,
      actualDepTime,
      externalARTrackId,
      arTrackId,
      arTrackName,
      rzct,
      arct,
      baseAlt,
      priority,
      trackTime,
      statusCode,
      rzPoint,
      rzType,
      arEventType,
      numTankers,
      revTrack,
      shortTrack,
      cancelled,
      tankers,
      receivers,
      remarks,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirEvent_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_event_abridged_unchecked`.
pub fn root_as_air_event_abridged(buf: &[u8]) -> Result<AirEvent_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirEvent_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirEvent_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_air_event_abridged_unchecked`.
pub fn size_prefixed_root_as_air_event_abridged(buf: &[u8]) -> Result<AirEvent_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirEvent_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirEvent_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_event_abridged_unchecked`.
pub fn root_as_air_event_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirEvent_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirEvent_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirEvent_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_event_abridged_unchecked`.
pub fn size_prefixed_root_as_air_event_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirEvent_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirEvent_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirEvent_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirEvent_Abridged`.
pub unsafe fn root_as_air_event_abridged_unchecked(buf: &[u8]) -> AirEvent_Abridged {
  flatbuffers::root_unchecked::<AirEvent_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirEvent_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirEvent_Abridged`.
pub unsafe fn size_prefixed_root_as_air_event_abridged_unchecked(buf: &[u8]) -> AirEvent_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<AirEvent_Abridged>(buf)
}
pub const AIR_EVENT_ABRIDGED_IDENTIFIER: &str = "AIRE";

#[inline]
pub fn air_event_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_EVENT_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn air_event_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_EVENT_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_air_event_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirEvent_Abridged<'a>>) {
  fbb.finish(root, Some(AIR_EVENT_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_air_event_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirEvent_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIR_EVENT_ABRIDGED_IDENTIFIER));
}
