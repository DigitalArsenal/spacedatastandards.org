// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EFFECT_RESPONSE_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EFFECT_RESPONSE_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EFFECT_RESPONSE_FULL_DATA_MODE_ENUM: [EffectResponse_Full_dataMode_Enum; 4] = [
  EffectResponse_Full_dataMode_Enum::REAL,
  EffectResponse_Full_dataMode_Enum::TEST,
  EffectResponse_Full_dataMode_Enum::SIMULATED,
  EffectResponse_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EffectResponse_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl EffectResponse_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EffectResponse_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EffectResponse_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EffectResponse_Full_dataMode_Enum {
    type Output = EffectResponse_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EffectResponse_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EffectResponse_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EffectResponse_Full_dataMode_Enum {}
pub enum EffectResponse_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A response for various effects on a target.
pub struct EffectResponse_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EffectResponse_Full<'a> {
  type Inner = EffectResponse_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EffectResponse_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDEFFECTREQUEST: flatbuffers::VOffsetT = 8;
  pub const VT_EXTERNALREQUESTID: flatbuffers::VOffsetT = 10;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
  pub const VT_ACTORSRCTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_ACTORSRCID: flatbuffers::VOffsetT = 16;
  pub const VT_MUNITIONTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_MUNITIONID: flatbuffers::VOffsetT = 20;
  pub const VT_SHOTSREQUIRED: flatbuffers::VOffsetT = 22;
  pub const VT_PROBABILITYOFKILL: flatbuffers::VOffsetT = 24;
  pub const VT_COLLATERALDAMAGEEST: flatbuffers::VOffsetT = 26;
  pub const VT_ACTIONSLIST: flatbuffers::VOffsetT = 28;
  pub const VT_EXTERNALACTIONS: flatbuffers::VOffsetT = 30;
  pub const VT_COAMETRICS: flatbuffers::VOffsetT = 32;
  pub const VT_REDTIMETOOVERHEAD: flatbuffers::VOffsetT = 34;
  pub const VT_DECISIONDEADLINE: flatbuffers::VOffsetT = 36;
  pub const VT_REDTARGETSRCTYPE: flatbuffers::VOffsetT = 38;
  pub const VT_REDTARGETSRCID: flatbuffers::VOffsetT = 40;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 42;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 44;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 46;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 48;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 50;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 52;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EffectResponse_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EffectResponse_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<EffectResponse_Full<'bldr>> {
    let mut builder = EffectResponse_FullBuilder::new(_fbb);
    builder.add_collateralDamageEst(args.collateralDamageEst);
    builder.add_probabilityOfKill(args.probabilityOfKill);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.redTargetSrcId { builder.add_redTargetSrcId(x); }
    if let Some(x) = args.redTargetSrcType { builder.add_redTargetSrcType(x); }
    if let Some(x) = args.decisionDeadline { builder.add_decisionDeadline(x); }
    if let Some(x) = args.redTimeToOverhead { builder.add_redTimeToOverhead(x); }
    if let Some(x) = args.coaMetrics { builder.add_coaMetrics(x); }
    if let Some(x) = args.externalActions { builder.add_externalActions(x); }
    if let Some(x) = args.actionsList { builder.add_actionsList(x); }
    builder.add_shotsRequired(args.shotsRequired);
    if let Some(x) = args.munitionId { builder.add_munitionId(x); }
    if let Some(x) = args.munitionType { builder.add_munitionType(x); }
    if let Some(x) = args.actorSrcId { builder.add_actorSrcId(x); }
    if let Some(x) = args.actorSrcType { builder.add_actorSrcType(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.externalRequestId { builder.add_externalRequestId(x); }
    if let Some(x) = args.idEffectRequest { builder.add_idEffectRequest(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> EffectResponse_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idEffectRequest = self.idEffectRequest().map(|x| {
      x.to_string()
    });
    let externalRequestId = self.externalRequestId().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let actorSrcType = self.actorSrcType().map(|x| {
      x.to_string()
    });
    let actorSrcId = self.actorSrcId().map(|x| {
      x.to_string()
    });
    let munitionType = self.munitionType().map(|x| {
      x.to_string()
    });
    let munitionId = self.munitionId().map(|x| {
      x.to_string()
    });
    let shotsRequired = self.shotsRequired();
    let probabilityOfKill = self.probabilityOfKill();
    let collateralDamageEst = self.collateralDamageEst();
    let actionsList = self.actionsList().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let externalActions = self.externalActions().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let coaMetrics = self.coaMetrics().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let redTimeToOverhead = self.redTimeToOverhead().map(|x| {
      x.to_string()
    });
    let decisionDeadline = self.decisionDeadline().map(|x| {
      x.to_string()
    });
    let redTargetSrcType = self.redTargetSrcType().map(|x| {
      x.to_string()
    });
    let redTargetSrcId = self.redTargetSrcId().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    EffectResponse_FullT {
      id,
      classificationMarking,
      idEffectRequest,
      externalRequestId,
      type_,
      actorSrcType,
      actorSrcId,
      munitionType,
      munitionId,
      shotsRequired,
      probabilityOfKill,
      collateralDamageEst,
      actionsList,
      externalActions,
      coaMetrics,
      redTimeToOverhead,
      decisionDeadline,
      redTargetSrcType,
      redTargetSrcId,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EFFECTRESPONSE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the EffectRequest associated with this response.
  /// Example: /// Example: EFFECTREQUEST-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idEffectRequest(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_IDEFFECTREQUEST, None)}
  }
  /// The external system identifier of the associated effect request. A human readable unique id.
  /// Example: /// Example: EXTERNALREQUEST-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn externalRequestId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_EXTERNALREQUESTID, None)}
  }
  /// The type of response in this record (e.g. COA, SCORECARD, etc.).
  /// Example: /// Example: COA
  /// Constraints: Minimum length = 1, Maximum length = 24
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_TYPE_, None)}
  }
  /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  /// Example: /// Example: AIRCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn actorSrcType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_ACTORSRCTYPE, None)}
  }
  /// The record ID, depending on the type identified in actorSrcType, of the requested asset.
  /// Example: /// Example: RC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn actorSrcId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_ACTORSRCID, None)}
  }
  /// The type of munition being fired.
  /// Example: /// Example: Dummy
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn munitionType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_MUNITIONTYPE, None)}
  }
  /// Unique identifier of the munition.
  /// Example: /// Example: MUNITION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn munitionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_MUNITIONID, None)}
  }
  /// The number of shots required to destroy target.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn shotsRequired(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EffectResponse_Full::VT_SHOTSREQUIRED, Some(0)).unwrap()}
  }
  /// The probability of kill (0-1) of the target being destroyed.
  /// Example: /// Example: 0.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn probabilityOfKill(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponse_Full::VT_PROBABILITYOFKILL, Some(0.0)).unwrap()}
  }
  /// The collateral damage estimate (CDE) of the munition being fired.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn collateralDamageEst(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponse_Full::VT_COLLATERALDAMAGEEST, Some(0.0)).unwrap()}
  }
  /// List of actions associated with this effect response.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actionsList(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EffectResponse_Full::VT_ACTIONSLIST, None)}
  }
  /// List of external actions to be executed as part of this task.
  /// Example: /// Example: ['ACTION1', 'ACTION2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn externalActions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EffectResponse_Full::VT_EXTERNALACTIONS, None)}
  }
  /// List of COA metrics associated with this effect response.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn coaMetrics(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EffectResponse_Full::VT_COAMETRICS, None)}
  }
  /// The time to overhead for the red force to be over their target, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn redTimeToOverhead(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_REDTIMETOOVERHEAD, None)}
  }
  /// The deadline time to accept this COA before it's no longer valid, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn decisionDeadline(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_DECISIONDEADLINE, None)}
  }
  /// The source type of the targetId identifier (POI, SITE, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn redTargetSrcType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_REDTARGETSRCTYPE, None)}
  }
  /// The record ID, depending on the type identified in redTargetSrcType, of the red force target.  If the redTargetSrcType is POI or TRACK, then this identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: REDTARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn redTargetSrcId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_REDTARGETSRCID, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2021-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> EffectResponse_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EffectResponse_Full_dataMode_Enum>(EffectResponse_Full::VT_DATAMODE, Some(EffectResponse_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponse_Full::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for EffectResponse_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idEffectRequest", Self::VT_IDEFFECTREQUEST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalRequestId", Self::VT_EXTERNALREQUESTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actorSrcType", Self::VT_ACTORSRCTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actorSrcId", Self::VT_ACTORSRCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("munitionType", Self::VT_MUNITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("munitionId", Self::VT_MUNITIONID, false)?
     .visit_field::<i32>("shotsRequired", Self::VT_SHOTSREQUIRED, false)?
     .visit_field::<f64>("probabilityOfKill", Self::VT_PROBABILITYOFKILL, false)?
     .visit_field::<f64>("collateralDamageEst", Self::VT_COLLATERALDAMAGEEST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("actionsList", Self::VT_ACTIONSLIST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("externalActions", Self::VT_EXTERNALACTIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("coaMetrics", Self::VT_COAMETRICS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("redTimeToOverhead", Self::VT_REDTIMETOOVERHEAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("decisionDeadline", Self::VT_DECISIONDEADLINE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("redTargetSrcType", Self::VT_REDTARGETSRCTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("redTargetSrcId", Self::VT_REDTARGETSRCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<EffectResponse_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct EffectResponse_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idEffectRequest: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalRequestId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actorSrcType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actorSrcId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub munitionType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub munitionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub shotsRequired: i32,
    pub probabilityOfKill: f64,
    pub collateralDamageEst: f64,
    pub actionsList: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub externalActions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub coaMetrics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub redTimeToOverhead: Option<flatbuffers::WIPOffset<&'a str>>,
    pub decisionDeadline: Option<flatbuffers::WIPOffset<&'a str>>,
    pub redTargetSrcType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub redTargetSrcId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: EffectResponse_Full_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EffectResponse_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    EffectResponse_FullArgs {
      id: None,
      classificationMarking: None,
      idEffectRequest: None,
      externalRequestId: None,
      type_: None,
      actorSrcType: None,
      actorSrcId: None,
      munitionType: None,
      munitionId: None,
      shotsRequired: 0,
      probabilityOfKill: 0.0,
      collateralDamageEst: 0.0,
      actionsList: None,
      externalActions: None,
      coaMetrics: None,
      redTimeToOverhead: None,
      decisionDeadline: None,
      redTargetSrcType: None,
      redTargetSrcId: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: EffectResponse_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct EffectResponse_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EffectResponse_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idEffectRequest(&mut self, idEffectRequest: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_IDEFFECTREQUEST, idEffectRequest);
  }
  #[inline]
  pub fn add_externalRequestId(&mut self, externalRequestId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_EXTERNALREQUESTID, externalRequestId);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_actorSrcType(&mut self, actorSrcType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_ACTORSRCTYPE, actorSrcType);
  }
  #[inline]
  pub fn add_actorSrcId(&mut self, actorSrcId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_ACTORSRCID, actorSrcId);
  }
  #[inline]
  pub fn add_munitionType(&mut self, munitionType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_MUNITIONTYPE, munitionType);
  }
  #[inline]
  pub fn add_munitionId(&mut self, munitionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_MUNITIONID, munitionId);
  }
  #[inline]
  pub fn add_shotsRequired(&mut self, shotsRequired: i32) {
    self.fbb_.push_slot::<i32>(EffectResponse_Full::VT_SHOTSREQUIRED, shotsRequired, 0);
  }
  #[inline]
  pub fn add_probabilityOfKill(&mut self, probabilityOfKill: f64) {
    self.fbb_.push_slot::<f64>(EffectResponse_Full::VT_PROBABILITYOFKILL, probabilityOfKill, 0.0);
  }
  #[inline]
  pub fn add_collateralDamageEst(&mut self, collateralDamageEst: f64) {
    self.fbb_.push_slot::<f64>(EffectResponse_Full::VT_COLLATERALDAMAGEEST, collateralDamageEst, 0.0);
  }
  #[inline]
  pub fn add_actionsList(&mut self, actionsList: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_ACTIONSLIST, actionsList);
  }
  #[inline]
  pub fn add_externalActions(&mut self, externalActions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_EXTERNALACTIONS, externalActions);
  }
  #[inline]
  pub fn add_coaMetrics(&mut self, coaMetrics: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_COAMETRICS, coaMetrics);
  }
  #[inline]
  pub fn add_redTimeToOverhead(&mut self, redTimeToOverhead: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_REDTIMETOOVERHEAD, redTimeToOverhead);
  }
  #[inline]
  pub fn add_decisionDeadline(&mut self, decisionDeadline: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_DECISIONDEADLINE, decisionDeadline);
  }
  #[inline]
  pub fn add_redTargetSrcType(&mut self, redTargetSrcType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_REDTARGETSRCTYPE, redTargetSrcType);
  }
  #[inline]
  pub fn add_redTargetSrcId(&mut self, redTargetSrcId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_REDTARGETSRCID, redTargetSrcId);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: EffectResponse_Full_dataMode_Enum) {
    self.fbb_.push_slot::<EffectResponse_Full_dataMode_Enum>(EffectResponse_Full::VT_DATAMODE, dataMode, EffectResponse_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponse_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EffectResponse_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EffectResponse_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EffectResponse_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EffectResponse_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EffectResponse_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idEffectRequest", &self.idEffectRequest());
      ds.field("externalRequestId", &self.externalRequestId());
      ds.field("type_", &self.type_());
      ds.field("actorSrcType", &self.actorSrcType());
      ds.field("actorSrcId", &self.actorSrcId());
      ds.field("munitionType", &self.munitionType());
      ds.field("munitionId", &self.munitionId());
      ds.field("shotsRequired", &self.shotsRequired());
      ds.field("probabilityOfKill", &self.probabilityOfKill());
      ds.field("collateralDamageEst", &self.collateralDamageEst());
      ds.field("actionsList", &self.actionsList());
      ds.field("externalActions", &self.externalActions());
      ds.field("coaMetrics", &self.coaMetrics());
      ds.field("redTimeToOverhead", &self.redTimeToOverhead());
      ds.field("decisionDeadline", &self.decisionDeadline());
      ds.field("redTargetSrcType", &self.redTargetSrcType());
      ds.field("redTargetSrcId", &self.redTargetSrcId());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EffectResponse_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idEffectRequest: Option<String>,
  pub externalRequestId: Option<String>,
  pub type_: Option<String>,
  pub actorSrcType: Option<String>,
  pub actorSrcId: Option<String>,
  pub munitionType: Option<String>,
  pub munitionId: Option<String>,
  pub shotsRequired: i32,
  pub probabilityOfKill: f64,
  pub collateralDamageEst: f64,
  pub actionsList: Option<Vec<String>>,
  pub externalActions: Option<Vec<String>>,
  pub coaMetrics: Option<Vec<String>>,
  pub redTimeToOverhead: Option<String>,
  pub decisionDeadline: Option<String>,
  pub redTargetSrcType: Option<String>,
  pub redTargetSrcId: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: EffectResponse_Full_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for EffectResponse_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idEffectRequest: None,
      externalRequestId: None,
      type_: None,
      actorSrcType: None,
      actorSrcId: None,
      munitionType: None,
      munitionId: None,
      shotsRequired: 0,
      probabilityOfKill: 0.0,
      collateralDamageEst: 0.0,
      actionsList: None,
      externalActions: None,
      coaMetrics: None,
      redTimeToOverhead: None,
      decisionDeadline: None,
      redTargetSrcType: None,
      redTargetSrcId: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: EffectResponse_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl EffectResponse_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EffectResponse_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idEffectRequest = self.idEffectRequest.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalRequestId = self.externalRequestId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actorSrcType = self.actorSrcType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actorSrcId = self.actorSrcId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let munitionType = self.munitionType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let munitionId = self.munitionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let shotsRequired = self.shotsRequired;
    let probabilityOfKill = self.probabilityOfKill;
    let collateralDamageEst = self.collateralDamageEst;
    let actionsList = self.actionsList.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let externalActions = self.externalActions.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let coaMetrics = self.coaMetrics.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let redTimeToOverhead = self.redTimeToOverhead.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let decisionDeadline = self.decisionDeadline.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let redTargetSrcType = self.redTargetSrcType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let redTargetSrcId = self.redTargetSrcId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EffectResponse_Full::create(_fbb, &EffectResponse_FullArgs{
      id,
      classificationMarking,
      idEffectRequest,
      externalRequestId,
      type_,
      actorSrcType,
      actorSrcId,
      munitionType,
      munitionId,
      shotsRequired,
      probabilityOfKill,
      collateralDamageEst,
      actionsList,
      externalActions,
      coaMetrics,
      redTimeToOverhead,
      decisionDeadline,
      redTargetSrcType,
      redTargetSrcId,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EffectResponse_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_full_unchecked`.
pub fn root_as_effect_response_full(buf: &[u8]) -> Result<EffectResponse_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EffectResponse_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EffectResponse_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_effect_response_full_unchecked`.
pub fn size_prefixed_root_as_effect_response_full(buf: &[u8]) -> Result<EffectResponse_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EffectResponse_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EffectResponse_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_full_unchecked`.
pub fn root_as_effect_response_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectResponse_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EffectResponse_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EffectResponse_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_full_unchecked`.
pub fn size_prefixed_root_as_effect_response_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectResponse_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EffectResponse_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EffectResponse_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EffectResponse_Full`.
pub unsafe fn root_as_effect_response_full_unchecked(buf: &[u8]) -> EffectResponse_Full {
  flatbuffers::root_unchecked::<EffectResponse_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EffectResponse_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EffectResponse_Full`.
pub unsafe fn size_prefixed_root_as_effect_response_full_unchecked(buf: &[u8]) -> EffectResponse_Full {
  flatbuffers::size_prefixed_root_unchecked::<EffectResponse_Full>(buf)
}
pub const EFFECT_RESPONSE_FULL_IDENTIFIER: &str = "EFFE";

#[inline]
pub fn effect_response_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_RESPONSE_FULL_IDENTIFIER, false)
}

#[inline]
pub fn effect_response_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_RESPONSE_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_effect_response_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EffectResponse_Full<'a>>) {
  fbb.finish(root, Some(EFFECT_RESPONSE_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_effect_response_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EffectResponse_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(EFFECT_RESPONSE_FULL_IDENTIFIER));
}
