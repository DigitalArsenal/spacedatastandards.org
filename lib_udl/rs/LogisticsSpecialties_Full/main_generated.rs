// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum LogisticsSpecialties_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The specialties required to implement this support item.
pub struct LogisticsSpecialties_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LogisticsSpecialties_Full<'a> {
  type Inner = LogisticsSpecialties_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LogisticsSpecialties_Full<'a> {
  pub const VT_SPECIALTY: flatbuffers::VOffsetT = 4;
  pub const VT_SKILLLEVEL: flatbuffers::VOffsetT = 6;
  pub const VT_FIRSTNAME: flatbuffers::VOffsetT = 8;
  pub const VT_LASTNAME: flatbuffers::VOffsetT = 10;
  pub const VT_RANKCODE: flatbuffers::VOffsetT = 12;
  pub const VT_LAST4SSN: flatbuffers::VOffsetT = 14;
  pub const VT_ROLETYPECODE: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LogisticsSpecialties_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogisticsSpecialties_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<LogisticsSpecialties_Full<'bldr>> {
    let mut builder = LogisticsSpecialties_FullBuilder::new(_fbb);
    if let Some(x) = args.roleTypeCode { builder.add_roleTypeCode(x); }
    if let Some(x) = args.last4Ssn { builder.add_last4Ssn(x); }
    if let Some(x) = args.rankCode { builder.add_rankCode(x); }
    if let Some(x) = args.lastName { builder.add_lastName(x); }
    if let Some(x) = args.firstName { builder.add_firstName(x); }
    builder.add_skillLevel(args.skillLevel);
    if let Some(x) = args.specialty { builder.add_specialty(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> LogisticsSpecialties_FullT {
    let specialty = self.specialty().map(|x| {
      x.to_string()
    });
    let skillLevel = self.skillLevel();
    let firstName = self.firstName().map(|x| {
      x.to_string()
    });
    let lastName = self.lastName().map(|x| {
      x.to_string()
    });
    let rankCode = self.rankCode().map(|x| {
      x.to_string()
    });
    let last4Ssn = self.last4Ssn().map(|x| {
      x.to_string()
    });
    let roleTypeCode = self.roleTypeCode().map(|x| {
      x.to_string()
    });
    LogisticsSpecialties_FullT {
      specialty,
      skillLevel,
      firstName,
      lastName,
      rankCode,
      last4Ssn,
      roleTypeCode,
    }
  }

  /// Indicates where the repairs will be performed, or which shop specialty has been assigned responsibility for correcting the discrepancy. Shop specialties are normally listed in abbreviated format.
  /// Example: /// Example: ELEN
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn specialty(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSpecialties_Full::VT_SPECIALTY, None)}
  }
  /// Skill level of the mission response team member.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn skillLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LogisticsSpecialties_Full::VT_SKILLLEVEL, Some(0)).unwrap()}
  }
  /// The first name of the specialist.
  /// Example: /// Example: JOHN
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn firstName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSpecialties_Full::VT_FIRSTNAME, None)}
  }
  /// The last name of the specialist.
  /// Example: /// Example: SMITH
  /// Constraints: Minimum length = 0, Maximum length = 30
  #[inline]
  pub fn lastName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSpecialties_Full::VT_LASTNAME, None)}
  }
  /// Military service rank designation.
  /// Example: /// Example: MAJ
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn rankCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSpecialties_Full::VT_RANKCODE, None)}
  }
  /// The last four digits of the specialist's social security number.
  /// Example: /// Example: 9999
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn last4Ssn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSpecialties_Full::VT_LAST4SSN, None)}
  }
  /// Type code that determines role of the mission response team member. TC - Team Chief, TM - Team Member.
  /// Example: /// Example: TC
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn roleTypeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSpecialties_Full::VT_ROLETYPECODE, None)}
  }
}

impl flatbuffers::Verifiable for LogisticsSpecialties_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("specialty", Self::VT_SPECIALTY, false)?
     .visit_field::<i32>("skillLevel", Self::VT_SKILLLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("firstName", Self::VT_FIRSTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastName", Self::VT_LASTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rankCode", Self::VT_RANKCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("last4Ssn", Self::VT_LAST4SSN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("roleTypeCode", Self::VT_ROLETYPECODE, false)?
     .finish();
    Ok(())
  }
}
pub struct LogisticsSpecialties_FullArgs<'a> {
    pub specialty: Option<flatbuffers::WIPOffset<&'a str>>,
    pub skillLevel: i32,
    pub firstName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rankCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub last4Ssn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub roleTypeCode: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LogisticsSpecialties_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogisticsSpecialties_FullArgs {
      specialty: None,
      skillLevel: 0,
      firstName: None,
      lastName: None,
      rankCode: None,
      last4Ssn: None,
      roleTypeCode: None,
    }
  }
}

pub struct LogisticsSpecialties_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogisticsSpecialties_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_specialty(&mut self, specialty: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSpecialties_Full::VT_SPECIALTY, specialty);
  }
  #[inline]
  pub fn add_skillLevel(&mut self, skillLevel: i32) {
    self.fbb_.push_slot::<i32>(LogisticsSpecialties_Full::VT_SKILLLEVEL, skillLevel, 0);
  }
  #[inline]
  pub fn add_firstName(&mut self, firstName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSpecialties_Full::VT_FIRSTNAME, firstName);
  }
  #[inline]
  pub fn add_lastName(&mut self, lastName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSpecialties_Full::VT_LASTNAME, lastName);
  }
  #[inline]
  pub fn add_rankCode(&mut self, rankCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSpecialties_Full::VT_RANKCODE, rankCode);
  }
  #[inline]
  pub fn add_last4Ssn(&mut self, last4Ssn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSpecialties_Full::VT_LAST4SSN, last4Ssn);
  }
  #[inline]
  pub fn add_roleTypeCode(&mut self, roleTypeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSpecialties_Full::VT_ROLETYPECODE, roleTypeCode);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogisticsSpecialties_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogisticsSpecialties_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LogisticsSpecialties_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LogisticsSpecialties_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LogisticsSpecialties_Full");
      ds.field("specialty", &self.specialty());
      ds.field("skillLevel", &self.skillLevel());
      ds.field("firstName", &self.firstName());
      ds.field("lastName", &self.lastName());
      ds.field("rankCode", &self.rankCode());
      ds.field("last4Ssn", &self.last4Ssn());
      ds.field("roleTypeCode", &self.roleTypeCode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LogisticsSpecialties_FullT {
  pub specialty: Option<String>,
  pub skillLevel: i32,
  pub firstName: Option<String>,
  pub lastName: Option<String>,
  pub rankCode: Option<String>,
  pub last4Ssn: Option<String>,
  pub roleTypeCode: Option<String>,
}
impl Default for LogisticsSpecialties_FullT {
  fn default() -> Self {
    Self {
      specialty: None,
      skillLevel: 0,
      firstName: None,
      lastName: None,
      rankCode: None,
      last4Ssn: None,
      roleTypeCode: None,
    }
  }
}
impl LogisticsSpecialties_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LogisticsSpecialties_Full<'b>> {
    let specialty = self.specialty.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let skillLevel = self.skillLevel;
    let firstName = self.firstName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastName = self.lastName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rankCode = self.rankCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let last4Ssn = self.last4Ssn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let roleTypeCode = self.roleTypeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LogisticsSpecialties_Full::create(_fbb, &LogisticsSpecialties_FullArgs{
      specialty,
      skillLevel,
      firstName,
      lastName,
      rankCode,
      last4Ssn,
      roleTypeCode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LogisticsSpecialties_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_specialties_full_unchecked`.
pub fn root_as_logistics_specialties_full(buf: &[u8]) -> Result<LogisticsSpecialties_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LogisticsSpecialties_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LogisticsSpecialties_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_logistics_specialties_full_unchecked`.
pub fn size_prefixed_root_as_logistics_specialties_full(buf: &[u8]) -> Result<LogisticsSpecialties_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LogisticsSpecialties_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LogisticsSpecialties_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_specialties_full_unchecked`.
pub fn root_as_logistics_specialties_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsSpecialties_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LogisticsSpecialties_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LogisticsSpecialties_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_specialties_full_unchecked`.
pub fn size_prefixed_root_as_logistics_specialties_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsSpecialties_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LogisticsSpecialties_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LogisticsSpecialties_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LogisticsSpecialties_Full`.
pub unsafe fn root_as_logistics_specialties_full_unchecked(buf: &[u8]) -> LogisticsSpecialties_Full {
  flatbuffers::root_unchecked::<LogisticsSpecialties_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LogisticsSpecialties_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LogisticsSpecialties_Full`.
pub unsafe fn size_prefixed_root_as_logistics_specialties_full_unchecked(buf: &[u8]) -> LogisticsSpecialties_Full {
  flatbuffers::size_prefixed_root_unchecked::<LogisticsSpecialties_Full>(buf)
}
pub const LOGISTICS_SPECIALTIES_FULL_IDENTIFIER: &str = "LOGI";

#[inline]
pub fn logistics_specialties_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_SPECIALTIES_FULL_IDENTIFIER, false)
}

#[inline]
pub fn logistics_specialties_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_SPECIALTIES_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_logistics_specialties_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LogisticsSpecialties_Full<'a>>) {
  fbb.finish(root, Some(LOGISTICS_SPECIALTIES_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_logistics_specialties_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LogisticsSpecialties_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(LOGISTICS_SPECIALTIES_FULL_IDENTIFIER));
}
