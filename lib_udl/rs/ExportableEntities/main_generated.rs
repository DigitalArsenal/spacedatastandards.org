// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ExportableEntitiesOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// No description available.
pub struct ExportableEntities<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ExportableEntities<'a> {
  type Inner = ExportableEntities<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ExportableEntities<'a> {

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ExportableEntities { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    _args: &'args ExportableEntitiesArgs
  ) -> flatbuffers::WIPOffset<ExportableEntities<'bldr>> {
    let mut builder = ExportableEntitiesBuilder::new(_fbb);
    builder.finish()
  }

  pub fn unpack(&self) -> ExportableEntitiesT {
    ExportableEntitiesT {
    }
  }
}

impl flatbuffers::Verifiable for ExportableEntities<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .finish();
    Ok(())
  }
}
pub struct ExportableEntitiesArgs {
}
impl<'a> Default for ExportableEntitiesArgs {
  #[inline]
  fn default() -> Self {
    ExportableEntitiesArgs {
    }
  }
}

pub struct ExportableEntitiesBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ExportableEntitiesBuilder<'a, 'b, A> {
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ExportableEntitiesBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ExportableEntitiesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ExportableEntities<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ExportableEntities<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ExportableEntities");
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ExportableEntitiesT {
}
impl Default for ExportableEntitiesT {
  fn default() -> Self {
    Self {
    }
  }
}
impl ExportableEntitiesT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ExportableEntities<'b>> {
    ExportableEntities::create(_fbb, &ExportableEntitiesArgs{
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ExportableEntities`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_exportable_entities_unchecked`.
pub fn root_as_exportable_entities(buf: &[u8]) -> Result<ExportableEntities, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ExportableEntities>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ExportableEntities` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_exportable_entities_unchecked`.
pub fn size_prefixed_root_as_exportable_entities(buf: &[u8]) -> Result<ExportableEntities, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ExportableEntities>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ExportableEntities` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_exportable_entities_unchecked`.
pub fn root_as_exportable_entities_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ExportableEntities<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ExportableEntities<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ExportableEntities` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_exportable_entities_unchecked`.
pub fn size_prefixed_root_as_exportable_entities_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ExportableEntities<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ExportableEntities<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ExportableEntities and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ExportableEntities`.
pub unsafe fn root_as_exportable_entities_unchecked(buf: &[u8]) -> ExportableEntities {
  flatbuffers::root_unchecked::<ExportableEntities>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ExportableEntities and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ExportableEntities`.
pub unsafe fn size_prefixed_root_as_exportable_entities_unchecked(buf: &[u8]) -> ExportableEntities {
  flatbuffers::size_prefixed_root_unchecked::<ExportableEntities>(buf)
}
pub const EXPORTABLE_ENTITIES_IDENTIFIER: &str = "EXPO";

#[inline]
pub fn exportable_entities_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EXPORTABLE_ENTITIES_IDENTIFIER, false)
}

#[inline]
pub fn exportable_entities_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EXPORTABLE_ENTITIES_IDENTIFIER, true)
}

#[inline]
pub fn finish_exportable_entities_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ExportableEntities<'a>>) {
  fbb.finish(root, Some(EXPORTABLE_ENTITIES_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_exportable_entities_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ExportableEntities<'a>>) {
  fbb.finish_size_prefixed(root, Some(EXPORTABLE_ENTITIES_IDENTIFIER));
}
