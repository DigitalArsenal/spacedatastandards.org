// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ORBIT_DETERMINATION_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ORBIT_DETERMINATION_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ORBIT_DETERMINATION_INGEST_DATA_MODE_ENUM: [OrbitDetermination_Ingest_dataMode_Enum; 4] = [
  OrbitDetermination_Ingest_dataMode_Enum::REAL,
  OrbitDetermination_Ingest_dataMode_Enum::TEST,
  OrbitDetermination_Ingest_dataMode_Enum::SIMULATED,
  OrbitDetermination_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OrbitDetermination_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl OrbitDetermination_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OrbitDetermination_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OrbitDetermination_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OrbitDetermination_Ingest_dataMode_Enum {
    type Output = OrbitDetermination_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OrbitDetermination_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OrbitDetermination_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OrbitDetermination_Ingest_dataMode_Enum {}
pub enum OrbitDetermination_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of orbit determination algorithm results describing General Perturbations or Special Perturbations orbital updates.
pub struct OrbitDetermination_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OrbitDetermination_Ingest<'a> {
  type Inner = OrbitDetermination_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OrbitDetermination_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 8;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 10;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 12;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 14;
  pub const VT_SATNO: flatbuffers::VOffsetT = 16;
  pub const VT_APRIORIIDELSET: flatbuffers::VOffsetT = 18;
  pub const VT_APRIORIELSET: flatbuffers::VOffsetT = 20;
  pub const VT_APRIORIIDSTATEVECTOR: flatbuffers::VOffsetT = 22;
  pub const VT_APRIORISTATEVECTOR: flatbuffers::VOffsetT = 24;
  pub const VT_INITIALOD: flatbuffers::VOffsetT = 26;
  pub const VT_LASTOBSTART: flatbuffers::VOffsetT = 28;
  pub const VT_LASTOBEND: flatbuffers::VOffsetT = 30;
  pub const VT_TIMESPAN: flatbuffers::VOffsetT = 32;
  pub const VT_EFFECTIVEFROM: flatbuffers::VOffsetT = 34;
  pub const VT_EFFECTIVEUNTIL: flatbuffers::VOffsetT = 36;
  pub const VT_WRMS: flatbuffers::VOffsetT = 38;
  pub const VT_PREVIOUSWRMS: flatbuffers::VOffsetT = 40;
  pub const VT_FIRSTPASSWRMS: flatbuffers::VOffsetT = 42;
  pub const VT_BESTPASSWRMS: flatbuffers::VOffsetT = 44;
  pub const VT_ERRORGROWTHRATE: flatbuffers::VOffsetT = 46;
  pub const VT_EDR: flatbuffers::VOffsetT = 48;
  pub const VT_METHOD: flatbuffers::VOffsetT = 50;
  pub const VT_METHODSOURCE: flatbuffers::VOffsetT = 52;
  pub const VT_FITSPAN: flatbuffers::VOffsetT = 54;
  pub const VT_BALLISTICCOEFFEST: flatbuffers::VOffsetT = 56;
  pub const VT_BALLISTICCOEFFMODEL: flatbuffers::VOffsetT = 58;
  pub const VT_AGOMEST: flatbuffers::VOffsetT = 60;
  pub const VT_AGOMMODEL: flatbuffers::VOffsetT = 62;
  pub const VT_RMSCONVERGENCECRITERIA: flatbuffers::VOffsetT = 64;
  pub const VT_NUMITERATIONS: flatbuffers::VOffsetT = 66;
  pub const VT_ACCEPTEDOBTYPS: flatbuffers::VOffsetT = 68;
  pub const VT_ACCEPTEDOBIDS: flatbuffers::VOffsetT = 70;
  pub const VT_REJECTEDOBTYPS: flatbuffers::VOffsetT = 72;
  pub const VT_REJECTEDOBIDS: flatbuffers::VOffsetT = 74;
  pub const VT_SENSORIDS: flatbuffers::VOffsetT = 76;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 78;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 80;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 82;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 84;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 86;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 88;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 90;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OrbitDetermination_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrbitDetermination_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<OrbitDetermination_Ingest<'bldr>> {
    let mut builder = OrbitDetermination_IngestBuilder::new(_fbb);
    builder.add_rmsConvergenceCriteria(args.rmsConvergenceCriteria);
    builder.add_fitSpan(args.fitSpan);
    builder.add_edr(args.edr);
    builder.add_errorGrowthRate(args.errorGrowthRate);
    builder.add_bestPassWrms(args.bestPassWrms);
    builder.add_firstPassWrms(args.firstPassWrms);
    builder.add_previousWrms(args.previousWrms);
    builder.add_wrms(args.wrms);
    builder.add_timeSpan(args.timeSpan);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.sensorIds { builder.add_sensorIds(x); }
    if let Some(x) = args.rejectedObIds { builder.add_rejectedObIds(x); }
    if let Some(x) = args.rejectedObTyps { builder.add_rejectedObTyps(x); }
    if let Some(x) = args.acceptedObIds { builder.add_acceptedObIds(x); }
    if let Some(x) = args.acceptedObTyps { builder.add_acceptedObTyps(x); }
    builder.add_numIterations(args.numIterations);
    if let Some(x) = args.agomModel { builder.add_agomModel(x); }
    if let Some(x) = args.ballisticCoeffModel { builder.add_ballisticCoeffModel(x); }
    if let Some(x) = args.methodSource { builder.add_methodSource(x); }
    if let Some(x) = args.method { builder.add_method(x); }
    if let Some(x) = args.effectiveUntil { builder.add_effectiveUntil(x); }
    if let Some(x) = args.effectiveFrom { builder.add_effectiveFrom(x); }
    if let Some(x) = args.lastObEnd { builder.add_lastObEnd(x); }
    if let Some(x) = args.lastObStart { builder.add_lastObStart(x); }
    if let Some(x) = args.aprioriStateVector { builder.add_aprioriStateVector(x); }
    if let Some(x) = args.aprioriIdStateVector { builder.add_aprioriIdStateVector(x); }
    if let Some(x) = args.aprioriElset { builder.add_aprioriElset(x); }
    if let Some(x) = args.aprioriIdElset { builder.add_aprioriIdElset(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_agomEst(args.agomEst);
    builder.add_ballisticCoeffEst(args.ballisticCoeffEst);
    builder.add_initialOD(args.initialOD);
    builder.finish()
  }

  pub fn unpack(&self) -> OrbitDetermination_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let aprioriIdElset = self.aprioriIdElset().map(|x| {
      x.to_string()
    });
    let aprioriElset = self.aprioriElset().map(|x| {
      x.to_string()
    });
    let aprioriIdStateVector = self.aprioriIdStateVector().map(|x| {
      x.to_string()
    });
    let aprioriStateVector = self.aprioriStateVector().map(|x| {
      x.to_string()
    });
    let initialOD = self.initialOD();
    let lastObStart = self.lastObStart().map(|x| {
      x.to_string()
    });
    let lastObEnd = self.lastObEnd().map(|x| {
      x.to_string()
    });
    let timeSpan = self.timeSpan();
    let effectiveFrom = self.effectiveFrom().map(|x| {
      x.to_string()
    });
    let effectiveUntil = self.effectiveUntil().map(|x| {
      x.to_string()
    });
    let wrms = self.wrms();
    let previousWrms = self.previousWrms();
    let firstPassWrms = self.firstPassWrms();
    let bestPassWrms = self.bestPassWrms();
    let errorGrowthRate = self.errorGrowthRate();
    let edr = self.edr();
    let method = self.method().map(|x| {
      x.to_string()
    });
    let methodSource = self.methodSource().map(|x| {
      x.to_string()
    });
    let fitSpan = self.fitSpan();
    let ballisticCoeffEst = self.ballisticCoeffEst();
    let ballisticCoeffModel = self.ballisticCoeffModel().map(|x| {
      x.to_string()
    });
    let agomEst = self.agomEst();
    let agomModel = self.agomModel().map(|x| {
      x.to_string()
    });
    let rmsConvergenceCriteria = self.rmsConvergenceCriteria();
    let numIterations = self.numIterations();
    let acceptedObTyps = self.acceptedObTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let acceptedObIds = self.acceptedObIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let rejectedObTyps = self.rejectedObTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let rejectedObIds = self.rejectedObIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sensorIds = self.sensorIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    OrbitDetermination_IngestT {
      id,
      classificationMarking,
      startTime,
      endTime,
      idOnOrbit,
      origObjectId,
      satNo,
      aprioriIdElset,
      aprioriElset,
      aprioriIdStateVector,
      aprioriStateVector,
      initialOD,
      lastObStart,
      lastObEnd,
      timeSpan,
      effectiveFrom,
      effectiveUntil,
      wrms,
      previousWrms,
      firstPassWrms,
      bestPassWrms,
      errorGrowthRate,
      edr,
      method,
      methodSource,
      fitSpan,
      ballisticCoeffEst,
      ballisticCoeffModel,
      agomEst,
      agomModel,
      rmsConvergenceCriteria,
      numIterations,
      acceptedObTyps,
      acceptedObIds,
      rejectedObTyps,
      rejectedObIds,
      sensorIds,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Start time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_STARTTIME, None)}
  }
  /// End time for OD solution in ISO 8601 UTC datetime format, with microsecond precision.
  /// Example: /// Example: 2023-08-28T15:20:21.247192Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_ENDTIME, None)}
  }
  /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  /// Example: /// Example: 54741
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_IDONORBIT, None)}
  }
  /// Optional identifier provided by the OD source to indicate the target on-orbit object of this OD solution. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_ORIGOBJECTID, None)}
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 54741
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OrbitDetermination_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Identifier of the element set used to seed this OD solution. This ID can be used to obtain additional information on an Elset object using the 'get by ID' operation (e.g. /udl/elset/{id}). For example, the Elset with idElset = abc would be queried as /udl/elset/abc.
  /// Example: /// Example: 80e544b7-6a17-4554-8abf-7301e98f8e5d
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn aprioriIdElset(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_APRIORIIDELSET, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn aprioriElset(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_APRIORIELSET, None)}
  }
  /// Identifier of the state vector used to seed this OD solution. This ID can be used to obtain additional information on a StateVector object using the 'get by ID' operation (e.g. /udl/statevector/{id}). For example, the StateVector with idStateVector = abc would be queried as /udl/statevector/abc.
  /// Example: /// Example: 6e291992-8ae3-4592-bb0f-055715bf4803
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn aprioriIdStateVector(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_APRIORIIDSTATEVECTOR, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn aprioriStateVector(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_APRIORISTATEVECTOR, None)}
  }
  /// Flag indicating whether this is an initial orbit determination.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn initialOD(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(OrbitDetermination_Ingest::VT_INITIALOD, Some(false)).unwrap()}
  }
  /// The start of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lastObStart(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_LASTOBSTART, None)}
  }
  /// The end of the time interval containing the time of the last accepted observation, in ISO 8601 UTC datetime format with microsecond precision. For an exact observation time, the lastObStart and lastObEnd are the same.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lastObEnd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_LASTOBEND, None)}
  }
  /// The time span used for the OD of the object, in days.
  /// Example: /// Example: 3.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn timeSpan(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_TIMESPAN, Some(0.0)).unwrap()}
  }
  /// Optional start time at which this OD solution is accurate, in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2023-08-28T11:20:21.247192Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn effectiveFrom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_EFFECTIVEFROM, None)}
  }
  /// Optional end time at which this OD solution may no longer be accurate, in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2023-08-30T08:15:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn effectiveUntil(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_EFFECTIVEUNTIL, None)}
  }
  /// The Weighted Root Mean Squared (RMS) of the differential correction of the target object that produced this OD state. WRMS is a quality indicator of the OD update, with a value of 1.00 being optimal. WRMS applies to batch least squares (BLS) processes.
  /// Example: /// Example: 0.991
  /// Constraints: No constraints specified.
  #[inline]
  pub fn wrms(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_WRMS, Some(0.0)).unwrap()}
  }
  /// The Weighted Root Mean Squared (RMS) of the differential correction from the previous overhead pass of the satellite. Provides a point of comparison for assessing changes in the quality of the OD solution between consecutive passes.
  /// Example: /// Example: 1.02
  /// Constraints: No constraints specified.
  #[inline]
  pub fn previousWrms(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_PREVIOUSWRMS, Some(0.0)).unwrap()}
  }
  /// The Weighted Root Mean Squared (RMS) calculated for the first satellite pass in the observation span. Serves as the initial quality metric for the beginning of the observation period.
  /// Example: /// Example: 0.985
  /// Constraints: No constraints specified.
  #[inline]
  pub fn firstPassWrms(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_FIRSTPASSWRMS, Some(0.0)).unwrap()}
  }
  /// Lowest Weighted Root Mean Squared (RMS) value achieved for any single satellite pass during the observation span, indicating the pass with the highest quality OD solution.
  /// Example: /// Example: 0.975
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bestPassWrms(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_BESTPASSWRMS, Some(0.0)).unwrap()}
  }
  /// Error growth rate of the OD solution in kilometers per day.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn errorGrowthRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_ERRORGROWTHRATE, Some(0.0)).unwrap()}
  }
  /// Model parameter value for energy dissipation rate (EDR) in watts per kilogram.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn edr(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_EDR, Some(0.0)).unwrap()}
  }
  /// Orbit determination method used to produce this record (e.g. BLS, KF, UKF, etc.).
  /// Example: /// Example: BLS
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn method(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_METHOD, None)}
  }
  /// Source of orbit determination method used to produce this record (e.g. ASW, ACTRAC, FreeFlyer, GEODYNE, GDTS, etc.).
  /// Example: /// Example: ASW
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn methodSource(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_METHODSOURCE, None)}
  }
  /// The fit span, in days, used in a Batch Least Squares (BLS) OD.
  /// Example: /// Example: 0.6
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fitSpan(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_FITSPAN, Some(0.0)).unwrap()}
  }
  /// Flag indicating whether the ballistic coefficient was estimated during this OD solution.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ballisticCoeffEst(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(OrbitDetermination_Ingest::VT_BALLISTICCOEFFEST, Some(false)).unwrap()}
  }
  /// Model used to estimate the ballistic coefficient.
  /// Example: /// Example: GaussMarkov
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn ballisticCoeffModel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_BALLISTICCOEFFMODEL, None)}
  }
  /// Flag indicating whether the AGOM was estimated during this OD solution.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn agomEst(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(OrbitDetermination_Ingest::VT_AGOMEST, Some(false)).unwrap()}
  }
  /// Model used to estimate the AGOM.
  /// Example: /// Example: RandomWalk
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn agomModel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_AGOMMODEL, None)}
  }
  /// OD parameter value for the Root Mean Square (RMS) convergence criteria to successfully close the OD solution.
  /// Example: /// Example: 0.001
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rmsConvergenceCriteria(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrbitDetermination_Ingest::VT_RMSCONVERGENCECRITERIA, Some(0.0)).unwrap()}
  }
  /// The number of iterations taken for the algorithm to converge on an OD solution.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numIterations(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OrbitDetermination_Ingest::VT_NUMITERATIONS, Some(0)).unwrap()}
  }
  /// Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were accepted in this OD solution. See the associated acceptedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The acceptedObTyps and acceptedObIds arrays must match in size.
  /// Example: /// Example: ['EO', 'RADAR']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn acceptedObTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OrbitDetermination_Ingest::VT_ACCEPTEDOBTYPS, None)}
  }
  /// Array of UDL data (observation) UUIDs that were accepted in this OD solution. See the associated acceptedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['EOOBSERVATION-ID1', 'RADAROBSERVATION-ID1']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn acceptedObIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OrbitDetermination_Ingest::VT_ACCEPTEDOBIDS, None)}
  }
  /// Array of UDL observation types (e.g. DOA, EO, RADAR, RF) of the observations that were rejected in this OD solution. See the associated rejectedObIds array for the records UUID(s), positionally corresponding to the record types in this array. The rejectedObTyps and rejectedObIds arrays must match in size.
  /// Example: /// Example: ['DOA', 'RF']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rejectedObTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OrbitDetermination_Ingest::VT_REJECTEDOBTYPS, None)}
  }
  /// Array of UDL data (observation) UUIDs that were rejected in this OD solution. See the associated rejectedObTyps array for the specific types of observations for the positionally corresponding UUIDs in this array (the two arrays must match in size).
  /// Example: /// Example: ['DIFFOFARRIVAL-ID2', 'RFOBSERVATION-ID2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rejectedObIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OrbitDetermination_Ingest::VT_REJECTEDOBIDS, None)}
  }
  /// Array of UDL UUIDs (idSensor) of the sensors that contributed observations in this OD solution.
  /// Example: /// Example: ['SENSOR-ID1', 'SENSOR-ID2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OrbitDetermination_Ingest::VT_SENSORIDS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrbitDetermination_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> OrbitDetermination_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OrbitDetermination_Ingest_dataMode_Enum>(OrbitDetermination_Ingest::VT_DATAMODE, Some(OrbitDetermination_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for OrbitDetermination_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aprioriIdElset", Self::VT_APRIORIIDELSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aprioriElset", Self::VT_APRIORIELSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aprioriIdStateVector", Self::VT_APRIORIIDSTATEVECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aprioriStateVector", Self::VT_APRIORISTATEVECTOR, false)?
     .visit_field::<bool>("initialOD", Self::VT_INITIALOD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastObStart", Self::VT_LASTOBSTART, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastObEnd", Self::VT_LASTOBEND, false)?
     .visit_field::<f64>("timeSpan", Self::VT_TIMESPAN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("effectiveFrom", Self::VT_EFFECTIVEFROM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("effectiveUntil", Self::VT_EFFECTIVEUNTIL, false)?
     .visit_field::<f64>("wrms", Self::VT_WRMS, false)?
     .visit_field::<f64>("previousWrms", Self::VT_PREVIOUSWRMS, false)?
     .visit_field::<f64>("firstPassWrms", Self::VT_FIRSTPASSWRMS, false)?
     .visit_field::<f64>("bestPassWrms", Self::VT_BESTPASSWRMS, false)?
     .visit_field::<f64>("errorGrowthRate", Self::VT_ERRORGROWTHRATE, false)?
     .visit_field::<f64>("edr", Self::VT_EDR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("method", Self::VT_METHOD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("methodSource", Self::VT_METHODSOURCE, false)?
     .visit_field::<f64>("fitSpan", Self::VT_FITSPAN, false)?
     .visit_field::<bool>("ballisticCoeffEst", Self::VT_BALLISTICCOEFFEST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ballisticCoeffModel", Self::VT_BALLISTICCOEFFMODEL, false)?
     .visit_field::<bool>("agomEst", Self::VT_AGOMEST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("agomModel", Self::VT_AGOMMODEL, false)?
     .visit_field::<f64>("rmsConvergenceCriteria", Self::VT_RMSCONVERGENCECRITERIA, false)?
     .visit_field::<i32>("numIterations", Self::VT_NUMITERATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("acceptedObTyps", Self::VT_ACCEPTEDOBTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("acceptedObIds", Self::VT_ACCEPTEDOBIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("rejectedObTyps", Self::VT_REJECTEDOBTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("rejectedObIds", Self::VT_REJECTEDOBIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sensorIds", Self::VT_SENSORIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<OrbitDetermination_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct OrbitDetermination_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub aprioriIdElset: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aprioriElset: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aprioriIdStateVector: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aprioriStateVector: Option<flatbuffers::WIPOffset<&'a str>>,
    pub initialOD: bool,
    pub lastObStart: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastObEnd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub timeSpan: f64,
    pub effectiveFrom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub effectiveUntil: Option<flatbuffers::WIPOffset<&'a str>>,
    pub wrms: f64,
    pub previousWrms: f64,
    pub firstPassWrms: f64,
    pub bestPassWrms: f64,
    pub errorGrowthRate: f64,
    pub edr: f64,
    pub method: Option<flatbuffers::WIPOffset<&'a str>>,
    pub methodSource: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fitSpan: f64,
    pub ballisticCoeffEst: bool,
    pub ballisticCoeffModel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub agomEst: bool,
    pub agomModel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rmsConvergenceCriteria: f64,
    pub numIterations: i32,
    pub acceptedObTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub acceptedObIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub rejectedObTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub rejectedObIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sensorIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: OrbitDetermination_Ingest_dataMode_Enum,
}
impl<'a> Default for OrbitDetermination_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrbitDetermination_IngestArgs {
      id: None,
      classificationMarking: None,
      startTime: None,
      endTime: None,
      idOnOrbit: None,
      origObjectId: None,
      satNo: 0,
      aprioriIdElset: None,
      aprioriElset: None,
      aprioriIdStateVector: None,
      aprioriStateVector: None,
      initialOD: false,
      lastObStart: None,
      lastObEnd: None,
      timeSpan: 0.0,
      effectiveFrom: None,
      effectiveUntil: None,
      wrms: 0.0,
      previousWrms: 0.0,
      firstPassWrms: 0.0,
      bestPassWrms: 0.0,
      errorGrowthRate: 0.0,
      edr: 0.0,
      method: None,
      methodSource: None,
      fitSpan: 0.0,
      ballisticCoeffEst: false,
      ballisticCoeffModel: None,
      agomEst: false,
      agomModel: None,
      rmsConvergenceCriteria: 0.0,
      numIterations: 0,
      acceptedObTyps: None,
      acceptedObIds: None,
      rejectedObTyps: None,
      rejectedObIds: None,
      sensorIds: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: OrbitDetermination_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct OrbitDetermination_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrbitDetermination_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(OrbitDetermination_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_aprioriIdElset(&mut self, aprioriIdElset: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_APRIORIIDELSET, aprioriIdElset);
  }
  #[inline]
  pub fn add_aprioriElset(&mut self, aprioriElset: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_APRIORIELSET, aprioriElset);
  }
  #[inline]
  pub fn add_aprioriIdStateVector(&mut self, aprioriIdStateVector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_APRIORIIDSTATEVECTOR, aprioriIdStateVector);
  }
  #[inline]
  pub fn add_aprioriStateVector(&mut self, aprioriStateVector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_APRIORISTATEVECTOR, aprioriStateVector);
  }
  #[inline]
  pub fn add_initialOD(&mut self, initialOD: bool) {
    self.fbb_.push_slot::<bool>(OrbitDetermination_Ingest::VT_INITIALOD, initialOD, false);
  }
  #[inline]
  pub fn add_lastObStart(&mut self, lastObStart: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_LASTOBSTART, lastObStart);
  }
  #[inline]
  pub fn add_lastObEnd(&mut self, lastObEnd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_LASTOBEND, lastObEnd);
  }
  #[inline]
  pub fn add_timeSpan(&mut self, timeSpan: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_TIMESPAN, timeSpan, 0.0);
  }
  #[inline]
  pub fn add_effectiveFrom(&mut self, effectiveFrom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_EFFECTIVEFROM, effectiveFrom);
  }
  #[inline]
  pub fn add_effectiveUntil(&mut self, effectiveUntil: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_EFFECTIVEUNTIL, effectiveUntil);
  }
  #[inline]
  pub fn add_wrms(&mut self, wrms: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_WRMS, wrms, 0.0);
  }
  #[inline]
  pub fn add_previousWrms(&mut self, previousWrms: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_PREVIOUSWRMS, previousWrms, 0.0);
  }
  #[inline]
  pub fn add_firstPassWrms(&mut self, firstPassWrms: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_FIRSTPASSWRMS, firstPassWrms, 0.0);
  }
  #[inline]
  pub fn add_bestPassWrms(&mut self, bestPassWrms: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_BESTPASSWRMS, bestPassWrms, 0.0);
  }
  #[inline]
  pub fn add_errorGrowthRate(&mut self, errorGrowthRate: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_ERRORGROWTHRATE, errorGrowthRate, 0.0);
  }
  #[inline]
  pub fn add_edr(&mut self, edr: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_EDR, edr, 0.0);
  }
  #[inline]
  pub fn add_method(&mut self, method: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_METHOD, method);
  }
  #[inline]
  pub fn add_methodSource(&mut self, methodSource: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_METHODSOURCE, methodSource);
  }
  #[inline]
  pub fn add_fitSpan(&mut self, fitSpan: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_FITSPAN, fitSpan, 0.0);
  }
  #[inline]
  pub fn add_ballisticCoeffEst(&mut self, ballisticCoeffEst: bool) {
    self.fbb_.push_slot::<bool>(OrbitDetermination_Ingest::VT_BALLISTICCOEFFEST, ballisticCoeffEst, false);
  }
  #[inline]
  pub fn add_ballisticCoeffModel(&mut self, ballisticCoeffModel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_BALLISTICCOEFFMODEL, ballisticCoeffModel);
  }
  #[inline]
  pub fn add_agomEst(&mut self, agomEst: bool) {
    self.fbb_.push_slot::<bool>(OrbitDetermination_Ingest::VT_AGOMEST, agomEst, false);
  }
  #[inline]
  pub fn add_agomModel(&mut self, agomModel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_AGOMMODEL, agomModel);
  }
  #[inline]
  pub fn add_rmsConvergenceCriteria(&mut self, rmsConvergenceCriteria: f64) {
    self.fbb_.push_slot::<f64>(OrbitDetermination_Ingest::VT_RMSCONVERGENCECRITERIA, rmsConvergenceCriteria, 0.0);
  }
  #[inline]
  pub fn add_numIterations(&mut self, numIterations: i32) {
    self.fbb_.push_slot::<i32>(OrbitDetermination_Ingest::VT_NUMITERATIONS, numIterations, 0);
  }
  #[inline]
  pub fn add_acceptedObTyps(&mut self, acceptedObTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_ACCEPTEDOBTYPS, acceptedObTyps);
  }
  #[inline]
  pub fn add_acceptedObIds(&mut self, acceptedObIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_ACCEPTEDOBIDS, acceptedObIds);
  }
  #[inline]
  pub fn add_rejectedObTyps(&mut self, rejectedObTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_REJECTEDOBTYPS, rejectedObTyps);
  }
  #[inline]
  pub fn add_rejectedObIds(&mut self, rejectedObIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_REJECTEDOBIDS, rejectedObIds);
  }
  #[inline]
  pub fn add_sensorIds(&mut self, sensorIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_SENSORIDS, sensorIds);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrbitDetermination_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: OrbitDetermination_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<OrbitDetermination_Ingest_dataMode_Enum>(OrbitDetermination_Ingest::VT_DATAMODE, dataMode, OrbitDetermination_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrbitDetermination_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrbitDetermination_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OrbitDetermination_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OrbitDetermination_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OrbitDetermination_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("satNo", &self.satNo());
      ds.field("aprioriIdElset", &self.aprioriIdElset());
      ds.field("aprioriElset", &self.aprioriElset());
      ds.field("aprioriIdStateVector", &self.aprioriIdStateVector());
      ds.field("aprioriStateVector", &self.aprioriStateVector());
      ds.field("initialOD", &self.initialOD());
      ds.field("lastObStart", &self.lastObStart());
      ds.field("lastObEnd", &self.lastObEnd());
      ds.field("timeSpan", &self.timeSpan());
      ds.field("effectiveFrom", &self.effectiveFrom());
      ds.field("effectiveUntil", &self.effectiveUntil());
      ds.field("wrms", &self.wrms());
      ds.field("previousWrms", &self.previousWrms());
      ds.field("firstPassWrms", &self.firstPassWrms());
      ds.field("bestPassWrms", &self.bestPassWrms());
      ds.field("errorGrowthRate", &self.errorGrowthRate());
      ds.field("edr", &self.edr());
      ds.field("method", &self.method());
      ds.field("methodSource", &self.methodSource());
      ds.field("fitSpan", &self.fitSpan());
      ds.field("ballisticCoeffEst", &self.ballisticCoeffEst());
      ds.field("ballisticCoeffModel", &self.ballisticCoeffModel());
      ds.field("agomEst", &self.agomEst());
      ds.field("agomModel", &self.agomModel());
      ds.field("rmsConvergenceCriteria", &self.rmsConvergenceCriteria());
      ds.field("numIterations", &self.numIterations());
      ds.field("acceptedObTyps", &self.acceptedObTyps());
      ds.field("acceptedObIds", &self.acceptedObIds());
      ds.field("rejectedObTyps", &self.rejectedObTyps());
      ds.field("rejectedObIds", &self.rejectedObIds());
      ds.field("sensorIds", &self.sensorIds());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OrbitDetermination_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub idOnOrbit: Option<String>,
  pub origObjectId: Option<String>,
  pub satNo: i32,
  pub aprioriIdElset: Option<String>,
  pub aprioriElset: Option<String>,
  pub aprioriIdStateVector: Option<String>,
  pub aprioriStateVector: Option<String>,
  pub initialOD: bool,
  pub lastObStart: Option<String>,
  pub lastObEnd: Option<String>,
  pub timeSpan: f64,
  pub effectiveFrom: Option<String>,
  pub effectiveUntil: Option<String>,
  pub wrms: f64,
  pub previousWrms: f64,
  pub firstPassWrms: f64,
  pub bestPassWrms: f64,
  pub errorGrowthRate: f64,
  pub edr: f64,
  pub method: Option<String>,
  pub methodSource: Option<String>,
  pub fitSpan: f64,
  pub ballisticCoeffEst: bool,
  pub ballisticCoeffModel: Option<String>,
  pub agomEst: bool,
  pub agomModel: Option<String>,
  pub rmsConvergenceCriteria: f64,
  pub numIterations: i32,
  pub acceptedObTyps: Option<Vec<String>>,
  pub acceptedObIds: Option<Vec<String>>,
  pub rejectedObTyps: Option<Vec<String>>,
  pub rejectedObIds: Option<Vec<String>>,
  pub sensorIds: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: OrbitDetermination_Ingest_dataMode_Enum,
}
impl Default for OrbitDetermination_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      startTime: None,
      endTime: None,
      idOnOrbit: None,
      origObjectId: None,
      satNo: 0,
      aprioriIdElset: None,
      aprioriElset: None,
      aprioriIdStateVector: None,
      aprioriStateVector: None,
      initialOD: false,
      lastObStart: None,
      lastObEnd: None,
      timeSpan: 0.0,
      effectiveFrom: None,
      effectiveUntil: None,
      wrms: 0.0,
      previousWrms: 0.0,
      firstPassWrms: 0.0,
      bestPassWrms: 0.0,
      errorGrowthRate: 0.0,
      edr: 0.0,
      method: None,
      methodSource: None,
      fitSpan: 0.0,
      ballisticCoeffEst: false,
      ballisticCoeffModel: None,
      agomEst: false,
      agomModel: None,
      rmsConvergenceCriteria: 0.0,
      numIterations: 0,
      acceptedObTyps: None,
      acceptedObIds: None,
      rejectedObTyps: None,
      rejectedObIds: None,
      sensorIds: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: OrbitDetermination_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl OrbitDetermination_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OrbitDetermination_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let aprioriIdElset = self.aprioriIdElset.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aprioriElset = self.aprioriElset.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aprioriIdStateVector = self.aprioriIdStateVector.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aprioriStateVector = self.aprioriStateVector.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let initialOD = self.initialOD;
    let lastObStart = self.lastObStart.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastObEnd = self.lastObEnd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let timeSpan = self.timeSpan;
    let effectiveFrom = self.effectiveFrom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let effectiveUntil = self.effectiveUntil.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let wrms = self.wrms;
    let previousWrms = self.previousWrms;
    let firstPassWrms = self.firstPassWrms;
    let bestPassWrms = self.bestPassWrms;
    let errorGrowthRate = self.errorGrowthRate;
    let edr = self.edr;
    let method = self.method.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let methodSource = self.methodSource.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fitSpan = self.fitSpan;
    let ballisticCoeffEst = self.ballisticCoeffEst;
    let ballisticCoeffModel = self.ballisticCoeffModel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let agomEst = self.agomEst;
    let agomModel = self.agomModel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rmsConvergenceCriteria = self.rmsConvergenceCriteria;
    let numIterations = self.numIterations;
    let acceptedObTyps = self.acceptedObTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let acceptedObIds = self.acceptedObIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let rejectedObTyps = self.rejectedObTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let rejectedObIds = self.rejectedObIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sensorIds = self.sensorIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    OrbitDetermination_Ingest::create(_fbb, &OrbitDetermination_IngestArgs{
      id,
      classificationMarking,
      startTime,
      endTime,
      idOnOrbit,
      origObjectId,
      satNo,
      aprioriIdElset,
      aprioriElset,
      aprioriIdStateVector,
      aprioriStateVector,
      initialOD,
      lastObStart,
      lastObEnd,
      timeSpan,
      effectiveFrom,
      effectiveUntil,
      wrms,
      previousWrms,
      firstPassWrms,
      bestPassWrms,
      errorGrowthRate,
      edr,
      method,
      methodSource,
      fitSpan,
      ballisticCoeffEst,
      ballisticCoeffModel,
      agomEst,
      agomModel,
      rmsConvergenceCriteria,
      numIterations,
      acceptedObTyps,
      acceptedObIds,
      rejectedObTyps,
      rejectedObIds,
      sensorIds,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OrbitDetermination_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_orbit_determination_ingest_unchecked`.
pub fn root_as_orbit_determination_ingest(buf: &[u8]) -> Result<OrbitDetermination_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OrbitDetermination_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OrbitDetermination_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_orbit_determination_ingest_unchecked`.
pub fn size_prefixed_root_as_orbit_determination_ingest(buf: &[u8]) -> Result<OrbitDetermination_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OrbitDetermination_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OrbitDetermination_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_orbit_determination_ingest_unchecked`.
pub fn root_as_orbit_determination_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrbitDetermination_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OrbitDetermination_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OrbitDetermination_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_orbit_determination_ingest_unchecked`.
pub fn size_prefixed_root_as_orbit_determination_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrbitDetermination_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OrbitDetermination_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OrbitDetermination_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OrbitDetermination_Ingest`.
pub unsafe fn root_as_orbit_determination_ingest_unchecked(buf: &[u8]) -> OrbitDetermination_Ingest {
  flatbuffers::root_unchecked::<OrbitDetermination_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OrbitDetermination_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OrbitDetermination_Ingest`.
pub unsafe fn size_prefixed_root_as_orbit_determination_ingest_unchecked(buf: &[u8]) -> OrbitDetermination_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<OrbitDetermination_Ingest>(buf)
}
pub const ORBIT_DETERMINATION_INGEST_IDENTIFIER: &str = "ORBI";

#[inline]
pub fn orbit_determination_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ORBIT_DETERMINATION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn orbit_determination_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ORBIT_DETERMINATION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_orbit_determination_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OrbitDetermination_Ingest<'a>>) {
  fbb.finish(root, Some(ORBIT_DETERMINATION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_orbit_determination_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OrbitDetermination_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ORBIT_DETERMINATION_INGEST_IDENTIFIER));
}
