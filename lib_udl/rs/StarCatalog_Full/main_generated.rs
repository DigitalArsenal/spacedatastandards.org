// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_STAR_CATALOG_FULL_ASTROMETRY_ORIGIN_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_STAR_CATALOG_FULL_ASTROMETRY_ORIGIN_ENUM: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STAR_CATALOG_FULL_ASTROMETRY_ORIGIN_ENUM: [StarCatalog_Full_astrometryOrigin_Enum; 3] = [
  StarCatalog_Full_astrometryOrigin_Enum::GAIADR3,
  StarCatalog_Full_astrometryOrigin_Enum::HIPPARCOS,
  StarCatalog_Full_astrometryOrigin_Enum::USNOBSC,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct StarCatalog_Full_astrometryOrigin_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl StarCatalog_Full_astrometryOrigin_Enum {
  /// No description available.
  pub const GAIADR3: Self = Self(0);
  /// No description available.
  pub const HIPPARCOS: Self = Self(1);
  /// No description available.
  pub const USNOBSC: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::GAIADR3,
    Self::HIPPARCOS,
    Self::USNOBSC,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::GAIADR3 => Some("GAIADR3"),
      Self::HIPPARCOS => Some("HIPPARCOS"),
      Self::USNOBSC => Some("USNOBSC"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for StarCatalog_Full_astrometryOrigin_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for StarCatalog_Full_astrometryOrigin_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for StarCatalog_Full_astrometryOrigin_Enum {
    type Output = StarCatalog_Full_astrometryOrigin_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for StarCatalog_Full_astrometryOrigin_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for StarCatalog_Full_astrometryOrigin_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for StarCatalog_Full_astrometryOrigin_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_STAR_CATALOG_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_STAR_CATALOG_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_STAR_CATALOG_FULL_DATA_MODE_ENUM: [StarCatalog_Full_dataMode_Enum; 4] = [
  StarCatalog_Full_dataMode_Enum::REAL,
  StarCatalog_Full_dataMode_Enum::TEST,
  StarCatalog_Full_dataMode_Enum::SIMULATED,
  StarCatalog_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct StarCatalog_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl StarCatalog_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for StarCatalog_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for StarCatalog_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for StarCatalog_Full_dataMode_Enum {
    type Output = StarCatalog_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for StarCatalog_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for StarCatalog_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for StarCatalog_Full_dataMode_Enum {}
pub enum StarCatalog_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The star catalog provides the position, proper motion, parallax, and photometric magnitudes at various bandpasses of a star.
pub struct StarCatalog_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for StarCatalog_Full<'a> {
  type Inner = StarCatalog_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> StarCatalog_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_CSID: flatbuffers::VOffsetT = 8;
  pub const VT_GNCCATID: flatbuffers::VOffsetT = 10;
  pub const VT_GAIADR3CATID: flatbuffers::VOffsetT = 12;
  pub const VT_HIPCATID: flatbuffers::VOffsetT = 14;
  pub const VT_CATVERSION: flatbuffers::VOffsetT = 16;
  pub const VT_RA: flatbuffers::VOffsetT = 18;
  pub const VT_RAUNC: flatbuffers::VOffsetT = 20;
  pub const VT_DEC: flatbuffers::VOffsetT = 22;
  pub const VT_DECUNC: flatbuffers::VOffsetT = 24;
  pub const VT_POSUNCFLAG: flatbuffers::VOffsetT = 26;
  pub const VT_PARALLAX: flatbuffers::VOffsetT = 28;
  pub const VT_PARALLAXUNC: flatbuffers::VOffsetT = 30;
  pub const VT_PMRA: flatbuffers::VOffsetT = 32;
  pub const VT_PMRAUNC: flatbuffers::VOffsetT = 34;
  pub const VT_PMDEC: flatbuffers::VOffsetT = 36;
  pub const VT_PMDECUNC: flatbuffers::VOffsetT = 38;
  pub const VT_PMUNCFLAG: flatbuffers::VOffsetT = 40;
  pub const VT_ASTROMETRYORIGIN: flatbuffers::VOffsetT = 42;
  pub const VT_STAREPOCH: flatbuffers::VOffsetT = 44;
  pub const VT_GMAG: flatbuffers::VOffsetT = 46;
  pub const VT_GMAGUNC: flatbuffers::VOffsetT = 48;
  pub const VT_BPMAG: flatbuffers::VOffsetT = 50;
  pub const VT_BPMAGUNC: flatbuffers::VOffsetT = 52;
  pub const VT_RPMAG: flatbuffers::VOffsetT = 54;
  pub const VT_RPMAGUNC: flatbuffers::VOffsetT = 56;
  pub const VT_JMAG: flatbuffers::VOffsetT = 58;
  pub const VT_JMAGUNC: flatbuffers::VOffsetT = 60;
  pub const VT_KMAG: flatbuffers::VOffsetT = 62;
  pub const VT_KMAGUNC: flatbuffers::VOffsetT = 64;
  pub const VT_HMAG: flatbuffers::VOffsetT = 66;
  pub const VT_HMAGUNC: flatbuffers::VOffsetT = 68;
  pub const VT_VARFLAG: flatbuffers::VOffsetT = 70;
  pub const VT_MULTFLAG: flatbuffers::VOffsetT = 72;
  pub const VT_NEIGHBORID: flatbuffers::VOffsetT = 74;
  pub const VT_NEIGHBORFLAG: flatbuffers::VOffsetT = 76;
  pub const VT_NEIGHBORDISTANCE: flatbuffers::VOffsetT = 78;
  pub const VT_SHIFTFLAG: flatbuffers::VOffsetT = 80;
  pub const VT_SHIFT: flatbuffers::VOffsetT = 82;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 84;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 86;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 88;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 90;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 92;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 94;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 96;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 98;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    StarCatalog_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args StarCatalog_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<StarCatalog_Full<'bldr>> {
    let mut builder = StarCatalog_FullBuilder::new(_fbb);
    builder.add_shift(args.shift);
    builder.add_neighborDistance(args.neighborDistance);
    builder.add_hmagUnc(args.hmagUnc);
    builder.add_hmag(args.hmag);
    builder.add_kmagUnc(args.kmagUnc);
    builder.add_kmag(args.kmag);
    builder.add_jmagUnc(args.jmagUnc);
    builder.add_jmag(args.jmag);
    builder.add_rpmagUnc(args.rpmagUnc);
    builder.add_rpmag(args.rpmag);
    builder.add_bpmagUnc(args.bpmagUnc);
    builder.add_bpmag(args.bpmag);
    builder.add_gmagUnc(args.gmagUnc);
    builder.add_gmag(args.gmag);
    builder.add_starEpoch(args.starEpoch);
    builder.add_pmdecUnc(args.pmdecUnc);
    builder.add_pmdec(args.pmdec);
    builder.add_pmraUnc(args.pmraUnc);
    builder.add_pmra(args.pmra);
    builder.add_parallaxUnc(args.parallaxUnc);
    builder.add_parallax(args.parallax);
    builder.add_decUnc(args.decUnc);
    builder.add_dec(args.dec);
    builder.add_raUnc(args.raUnc);
    builder.add_ra(args.ra);
    builder.add_gaiadr3CatId(args.gaiadr3CatId);
    builder.add_csId(args.csId);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    builder.add_neighborId(args.neighborId);
    if let Some(x) = args.catVersion { builder.add_catVersion(x); }
    builder.add_hipCatId(args.hipCatId);
    builder.add_gncCatId(args.gncCatId);
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_shiftFlag(args.shiftFlag);
    builder.add_neighborFlag(args.neighborFlag);
    builder.add_multFlag(args.multFlag);
    builder.add_varFlag(args.varFlag);
    builder.add_astrometryOrigin(args.astrometryOrigin);
    builder.add_pmUncFlag(args.pmUncFlag);
    builder.add_posUncFlag(args.posUncFlag);
    builder.finish()
  }

  pub fn unpack(&self) -> StarCatalog_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let csId = self.csId();
    let gncCatId = self.gncCatId();
    let gaiadr3CatId = self.gaiadr3CatId();
    let hipCatId = self.hipCatId();
    let catVersion = self.catVersion().map(|x| {
      x.to_string()
    });
    let ra = self.ra();
    let raUnc = self.raUnc();
    let dec = self.dec();
    let decUnc = self.decUnc();
    let posUncFlag = self.posUncFlag();
    let parallax = self.parallax();
    let parallaxUnc = self.parallaxUnc();
    let pmra = self.pmra();
    let pmraUnc = self.pmraUnc();
    let pmdec = self.pmdec();
    let pmdecUnc = self.pmdecUnc();
    let pmUncFlag = self.pmUncFlag();
    let astrometryOrigin = self.astrometryOrigin();
    let starEpoch = self.starEpoch();
    let gmag = self.gmag();
    let gmagUnc = self.gmagUnc();
    let bpmag = self.bpmag();
    let bpmagUnc = self.bpmagUnc();
    let rpmag = self.rpmag();
    let rpmagUnc = self.rpmagUnc();
    let jmag = self.jmag();
    let jmagUnc = self.jmagUnc();
    let kmag = self.kmag();
    let kmagUnc = self.kmagUnc();
    let hmag = self.hmag();
    let hmagUnc = self.hmagUnc();
    let varFlag = self.varFlag();
    let multFlag = self.multFlag();
    let neighborId = self.neighborId();
    let neighborFlag = self.neighborFlag();
    let neighborDistance = self.neighborDistance();
    let shiftFlag = self.shiftFlag();
    let shift = self.shift();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    StarCatalog_FullT {
      id,
      classificationMarking,
      csId,
      gncCatId,
      gaiadr3CatId,
      hipCatId,
      catVersion,
      ra,
      raUnc,
      dec,
      decUnc,
      posUncFlag,
      parallax,
      parallaxUnc,
      pmra,
      pmraUnc,
      pmdec,
      pmdecUnc,
      pmUncFlag,
      astrometryOrigin,
      starEpoch,
      gmag,
      gmagUnc,
      bpmag,
      bpmagUnc,
      rpmag,
      rpmagUnc,
      jmag,
      jmagUnc,
      kmag,
      kmagUnc,
      hmag,
      hmagUnc,
      varFlag,
      multFlag,
      neighborId,
      neighborFlag,
      neighborDistance,
      shiftFlag,
      shift,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: STAR-CAT-DATASET-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The ID of this object in the specific catalog associated with this record.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  #[inline]
  pub fn csId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StarCatalog_Full::VT_CSID, Some(0)).unwrap()}
  }
  /// The ID of this object in the Guidance and Navagation Control (GNC) Catalog.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gncCatId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StarCatalog_Full::VT_GNCCATID, Some(0)).unwrap()}
  }
  /// The ID of this object in the Gaia DR3 Catalog.
  /// Example: /// Example: 89012345678901
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gaiadr3CatId(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(StarCatalog_Full::VT_GAIADR3CATID, Some(0)).unwrap()}
  }
  /// The ID of this object in the Hipparcos Catalog.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hipCatId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StarCatalog_Full::VT_HIPCATID, Some(0)).unwrap()}
  }
  /// The version of the catalog associated with this object.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn catVersion(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_CATVERSION, None)}
  }
  /// Barycentric right ascension of the source in the International Celestial Reference System (ICRS) frame at the reference epoch, in degrees.
  /// Example: /// Example: 14.43
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ra(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_RA, Some(0.0)).unwrap()}
  }
  /// Uncertainty of the right ascension of the source, in milliarcseconds, at the reference epoch.
  /// Example: /// Example: 509.466
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_RAUNC, Some(0.0)).unwrap()}
  }
  /// Barycentric declination of the source in International Celestial Reference System (ICRS) at the reference epoch, in degrees.
  /// Example: /// Example: 21.8
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dec(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_DEC, Some(0.0)).unwrap()}
  }
  /// Uncertainty of the declination of the source, in milliarcseconds, at the reference epoch.
  /// Example: /// Example: 40.996
  /// Constraints: No constraints specified.
  #[inline]
  pub fn decUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_DECUNC, Some(0.0)).unwrap()}
  }
  /// Flag indicating that the position uncertainty in either ra or dec is greater than 100 milliarcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn posUncFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StarCatalog_Full::VT_POSUNCFLAG, Some(false)).unwrap()}
  }
  /// Absolute stellar parallax of the source, in milliarcseconds.
  /// Example: /// Example: -6.8
  /// Constraints: No constraints specified.
  #[inline]
  pub fn parallax(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_PARALLAX, Some(0.0)).unwrap()}
  }
  /// Uncertainty of the stellar parallax, in milliarcseconds.
  /// Example: /// Example: 82.35
  /// Constraints: No constraints specified.
  #[inline]
  pub fn parallaxUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_PARALLAXUNC, Some(0.0)).unwrap()}
  }
  /// Proper motion in right ascension of the source, in milliarcseconds/year, at the reference epoch.
  /// Example: /// Example: 1000.45
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pmra(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_PMRA, Some(0.0)).unwrap()}
  }
  /// Uncertainty of proper motion in right ascension, in milliarcseconds/year.
  /// Example: /// Example: 5.6
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pmraUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_PMRAUNC, Some(0.0)).unwrap()}
  }
  /// Proper motion in declination of the source, in milliarcseconds/year, at the reference epoch.
  /// Example: /// Example: -970.1003
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pmdec(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_PMDEC, Some(0.0)).unwrap()}
  }
  /// Uncertainty of proper motion in declination, in milliarcseconds/year.
  /// Example: /// Example: 1.22
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pmdecUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_PMDECUNC, Some(0.0)).unwrap()}
  }
  /// Flag indicating that the proper motion uncertainty in either ra or dec is greater than 10 milliarcseconds/year.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pmUncFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StarCatalog_Full::VT_PMUNCFLAG, Some(false)).unwrap()}
  }
  /// Originating astrometric catalog for this object. Enum: [GAIADR3, HIPPARCOS, USNOBSC].
  /// Example: /// Example: GAIADR3
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn astrometryOrigin(&self) -> StarCatalog_Full_astrometryOrigin_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StarCatalog_Full_astrometryOrigin_Enum>(StarCatalog_Full::VT_ASTROMETRYORIGIN, Some(StarCatalog_Full_astrometryOrigin_Enum::GAIADR3)).unwrap()}
  }
  /// Reference epoch to which the astrometric source parameters are referred, expressed as Julian Year in Barycentric Coordinate Time (TCB).
  /// Example: /// Example: 2016
  /// Constraints: No constraints specified.
  #[inline]
  pub fn starEpoch(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_STAREPOCH, Some(0.0)).unwrap()}
  }
  /// Gaia DR3 optical photometric G-band magnitude in the Vega scale.
  /// Example: /// Example: 0.0046
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gmag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_GMAG, Some(0.0)).unwrap()}
  }
  /// Gaia DR3 optical photometric G-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.00292
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gmagUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_GMAGUNC, Some(0.0)).unwrap()}
  }
  /// Gaia DR3 optical photometric Bp-band magnitude in the Vega scale.
  /// Example: /// Example: 0.04559
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bpmag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_BPMAG, Some(0.0)).unwrap()}
  }
  /// Gaia DR3 optical Bp-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.2227
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bpmagUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_BPMAGUNC, Some(0.0)).unwrap()}
  }
  /// Gaia DR3 optical Rp-band magnitude in the Vega scale.
  /// Example: /// Example: 8.0047
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rpmag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_RPMAG, Some(0.0)).unwrap()}
  }
  /// Gaia DR3 optical photometric Rp-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 1.233
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rpmagUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_RPMAGUNC, Some(0.0)).unwrap()}
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude in the Vega scale.
  /// Example: /// Example: 9.515
  /// Constraints: No constraints specified.
  #[inline]
  pub fn jmag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_JMAG, Some(0.0)).unwrap()}
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric J-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 7.559
  /// Constraints: No constraints specified.
  #[inline]
  pub fn jmagUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_JMAGUNC, Some(0.0)).unwrap()}
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude in the Vega scale.
  /// Example: /// Example: 13.545
  /// Constraints: No constraints specified.
  #[inline]
  pub fn kmag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_KMAG, Some(0.0)).unwrap()}
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric K-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 0.052
  /// Constraints: No constraints specified.
  #[inline]
  pub fn kmagUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_KMAGUNC, Some(0.0)).unwrap()}
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude in the Vega scale.
  /// Example: /// Example: 12.126
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hmag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_HMAG, Some(0.0)).unwrap()}
  }
  /// Two Micron All Sky Survey (2MASS) Point Source Catalog (PSC) near-infrared photometric H-band magnitude uncertainty in the Vega scale.
  /// Example: /// Example: 5.722
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hmagUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_HMAGUNC, Some(0.0)).unwrap()}
  }
  /// Flag indicating that the source exhibits variable magnitude.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn varFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StarCatalog_Full::VT_VARFLAG, Some(false)).unwrap()}
  }
  /// Flag indicating that this is a multiple object source.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn multFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StarCatalog_Full::VT_MULTFLAG, Some(false)).unwrap()}
  }
  /// The catalog ID of the nearest neighbor to this source.
  /// Example: /// Example: 2456
  /// Constraints: No constraints specified.
  #[inline]
  pub fn neighborId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(StarCatalog_Full::VT_NEIGHBORID, Some(0)).unwrap()}
  }
  /// Flag indicating that the nearest catalog neighbor is closer than 4.6 arcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn neighborFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StarCatalog_Full::VT_NEIGHBORFLAG, Some(false)).unwrap()}
  }
  /// Distance between source and nearest neighbor, in arcseconds.
  /// Example: /// Example: 201.406
  /// Constraints: No constraints specified.
  #[inline]
  pub fn neighborDistance(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_NEIGHBORDISTANCE, Some(0.0)).unwrap()}
  }
  /// Flag indicating that the photocentric shift is greater than 50 milliarcseconds.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn shiftFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(StarCatalog_Full::VT_SHIFTFLAG, Some(false)).unwrap()}
  }
  /// Photocentric shift caused by neighbors, in arcseconds.
  /// Example: /// Example: 4.548
  /// Constraints: No constraints specified.
  #[inline]
  pub fn shift(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(StarCatalog_Full::VT_SHIFT, Some(0.0)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(StarCatalog_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> StarCatalog_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<StarCatalog_Full_dataMode_Enum>(StarCatalog_Full::VT_DATAMODE, Some(StarCatalog_Full_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for StarCatalog_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<i64>("csId", Self::VT_CSID, false)?
     .visit_field::<i32>("gncCatId", Self::VT_GNCCATID, false)?
     .visit_field::<i64>("gaiadr3CatId", Self::VT_GAIADR3CATID, false)?
     .visit_field::<i32>("hipCatId", Self::VT_HIPCATID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("catVersion", Self::VT_CATVERSION, false)?
     .visit_field::<f64>("ra", Self::VT_RA, false)?
     .visit_field::<f64>("raUnc", Self::VT_RAUNC, false)?
     .visit_field::<f64>("dec", Self::VT_DEC, false)?
     .visit_field::<f64>("decUnc", Self::VT_DECUNC, false)?
     .visit_field::<bool>("posUncFlag", Self::VT_POSUNCFLAG, false)?
     .visit_field::<f64>("parallax", Self::VT_PARALLAX, false)?
     .visit_field::<f64>("parallaxUnc", Self::VT_PARALLAXUNC, false)?
     .visit_field::<f64>("pmra", Self::VT_PMRA, false)?
     .visit_field::<f64>("pmraUnc", Self::VT_PMRAUNC, false)?
     .visit_field::<f64>("pmdec", Self::VT_PMDEC, false)?
     .visit_field::<f64>("pmdecUnc", Self::VT_PMDECUNC, false)?
     .visit_field::<bool>("pmUncFlag", Self::VT_PMUNCFLAG, false)?
     .visit_field::<StarCatalog_Full_astrometryOrigin_Enum>("astrometryOrigin", Self::VT_ASTROMETRYORIGIN, false)?
     .visit_field::<f64>("starEpoch", Self::VT_STAREPOCH, false)?
     .visit_field::<f64>("gmag", Self::VT_GMAG, false)?
     .visit_field::<f64>("gmagUnc", Self::VT_GMAGUNC, false)?
     .visit_field::<f64>("bpmag", Self::VT_BPMAG, false)?
     .visit_field::<f64>("bpmagUnc", Self::VT_BPMAGUNC, false)?
     .visit_field::<f64>("rpmag", Self::VT_RPMAG, false)?
     .visit_field::<f64>("rpmagUnc", Self::VT_RPMAGUNC, false)?
     .visit_field::<f64>("jmag", Self::VT_JMAG, false)?
     .visit_field::<f64>("jmagUnc", Self::VT_JMAGUNC, false)?
     .visit_field::<f64>("kmag", Self::VT_KMAG, false)?
     .visit_field::<f64>("kmagUnc", Self::VT_KMAGUNC, false)?
     .visit_field::<f64>("hmag", Self::VT_HMAG, false)?
     .visit_field::<f64>("hmagUnc", Self::VT_HMAGUNC, false)?
     .visit_field::<bool>("varFlag", Self::VT_VARFLAG, false)?
     .visit_field::<bool>("multFlag", Self::VT_MULTFLAG, false)?
     .visit_field::<i32>("neighborId", Self::VT_NEIGHBORID, false)?
     .visit_field::<bool>("neighborFlag", Self::VT_NEIGHBORFLAG, false)?
     .visit_field::<f64>("neighborDistance", Self::VT_NEIGHBORDISTANCE, false)?
     .visit_field::<bool>("shiftFlag", Self::VT_SHIFTFLAG, false)?
     .visit_field::<f64>("shift", Self::VT_SHIFT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<StarCatalog_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct StarCatalog_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub csId: i64,
    pub gncCatId: i32,
    pub gaiadr3CatId: i64,
    pub hipCatId: i32,
    pub catVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ra: f64,
    pub raUnc: f64,
    pub dec: f64,
    pub decUnc: f64,
    pub posUncFlag: bool,
    pub parallax: f64,
    pub parallaxUnc: f64,
    pub pmra: f64,
    pub pmraUnc: f64,
    pub pmdec: f64,
    pub pmdecUnc: f64,
    pub pmUncFlag: bool,
    pub astrometryOrigin: StarCatalog_Full_astrometryOrigin_Enum,
    pub starEpoch: f64,
    pub gmag: f64,
    pub gmagUnc: f64,
    pub bpmag: f64,
    pub bpmagUnc: f64,
    pub rpmag: f64,
    pub rpmagUnc: f64,
    pub jmag: f64,
    pub jmagUnc: f64,
    pub kmag: f64,
    pub kmagUnc: f64,
    pub hmag: f64,
    pub hmagUnc: f64,
    pub varFlag: bool,
    pub multFlag: bool,
    pub neighborId: i32,
    pub neighborFlag: bool,
    pub neighborDistance: f64,
    pub shiftFlag: bool,
    pub shift: f64,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: StarCatalog_Full_dataMode_Enum,
}
impl<'a> Default for StarCatalog_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    StarCatalog_FullArgs {
      id: None,
      classificationMarking: None,
      csId: 0,
      gncCatId: 0,
      gaiadr3CatId: 0,
      hipCatId: 0,
      catVersion: None,
      ra: 0.0,
      raUnc: 0.0,
      dec: 0.0,
      decUnc: 0.0,
      posUncFlag: false,
      parallax: 0.0,
      parallaxUnc: 0.0,
      pmra: 0.0,
      pmraUnc: 0.0,
      pmdec: 0.0,
      pmdecUnc: 0.0,
      pmUncFlag: false,
      astrometryOrigin: StarCatalog_Full_astrometryOrigin_Enum::GAIADR3,
      starEpoch: 0.0,
      gmag: 0.0,
      gmagUnc: 0.0,
      bpmag: 0.0,
      bpmagUnc: 0.0,
      rpmag: 0.0,
      rpmagUnc: 0.0,
      jmag: 0.0,
      jmagUnc: 0.0,
      kmag: 0.0,
      kmagUnc: 0.0,
      hmag: 0.0,
      hmagUnc: 0.0,
      varFlag: false,
      multFlag: false,
      neighborId: 0,
      neighborFlag: false,
      neighborDistance: 0.0,
      shiftFlag: false,
      shift: 0.0,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: StarCatalog_Full_dataMode_Enum::REAL,
    }
  }
}

pub struct StarCatalog_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> StarCatalog_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_csId(&mut self, csId: i64) {
    self.fbb_.push_slot::<i64>(StarCatalog_Full::VT_CSID, csId, 0);
  }
  #[inline]
  pub fn add_gncCatId(&mut self, gncCatId: i32) {
    self.fbb_.push_slot::<i32>(StarCatalog_Full::VT_GNCCATID, gncCatId, 0);
  }
  #[inline]
  pub fn add_gaiadr3CatId(&mut self, gaiadr3CatId: i64) {
    self.fbb_.push_slot::<i64>(StarCatalog_Full::VT_GAIADR3CATID, gaiadr3CatId, 0);
  }
  #[inline]
  pub fn add_hipCatId(&mut self, hipCatId: i32) {
    self.fbb_.push_slot::<i32>(StarCatalog_Full::VT_HIPCATID, hipCatId, 0);
  }
  #[inline]
  pub fn add_catVersion(&mut self, catVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_CATVERSION, catVersion);
  }
  #[inline]
  pub fn add_ra(&mut self, ra: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_RA, ra, 0.0);
  }
  #[inline]
  pub fn add_raUnc(&mut self, raUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_RAUNC, raUnc, 0.0);
  }
  #[inline]
  pub fn add_dec(&mut self, dec: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_DEC, dec, 0.0);
  }
  #[inline]
  pub fn add_decUnc(&mut self, decUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_DECUNC, decUnc, 0.0);
  }
  #[inline]
  pub fn add_posUncFlag(&mut self, posUncFlag: bool) {
    self.fbb_.push_slot::<bool>(StarCatalog_Full::VT_POSUNCFLAG, posUncFlag, false);
  }
  #[inline]
  pub fn add_parallax(&mut self, parallax: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_PARALLAX, parallax, 0.0);
  }
  #[inline]
  pub fn add_parallaxUnc(&mut self, parallaxUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_PARALLAXUNC, parallaxUnc, 0.0);
  }
  #[inline]
  pub fn add_pmra(&mut self, pmra: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_PMRA, pmra, 0.0);
  }
  #[inline]
  pub fn add_pmraUnc(&mut self, pmraUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_PMRAUNC, pmraUnc, 0.0);
  }
  #[inline]
  pub fn add_pmdec(&mut self, pmdec: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_PMDEC, pmdec, 0.0);
  }
  #[inline]
  pub fn add_pmdecUnc(&mut self, pmdecUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_PMDECUNC, pmdecUnc, 0.0);
  }
  #[inline]
  pub fn add_pmUncFlag(&mut self, pmUncFlag: bool) {
    self.fbb_.push_slot::<bool>(StarCatalog_Full::VT_PMUNCFLAG, pmUncFlag, false);
  }
  #[inline]
  pub fn add_astrometryOrigin(&mut self, astrometryOrigin: StarCatalog_Full_astrometryOrigin_Enum) {
    self.fbb_.push_slot::<StarCatalog_Full_astrometryOrigin_Enum>(StarCatalog_Full::VT_ASTROMETRYORIGIN, astrometryOrigin, StarCatalog_Full_astrometryOrigin_Enum::GAIADR3);
  }
  #[inline]
  pub fn add_starEpoch(&mut self, starEpoch: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_STAREPOCH, starEpoch, 0.0);
  }
  #[inline]
  pub fn add_gmag(&mut self, gmag: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_GMAG, gmag, 0.0);
  }
  #[inline]
  pub fn add_gmagUnc(&mut self, gmagUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_GMAGUNC, gmagUnc, 0.0);
  }
  #[inline]
  pub fn add_bpmag(&mut self, bpmag: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_BPMAG, bpmag, 0.0);
  }
  #[inline]
  pub fn add_bpmagUnc(&mut self, bpmagUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_BPMAGUNC, bpmagUnc, 0.0);
  }
  #[inline]
  pub fn add_rpmag(&mut self, rpmag: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_RPMAG, rpmag, 0.0);
  }
  #[inline]
  pub fn add_rpmagUnc(&mut self, rpmagUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_RPMAGUNC, rpmagUnc, 0.0);
  }
  #[inline]
  pub fn add_jmag(&mut self, jmag: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_JMAG, jmag, 0.0);
  }
  #[inline]
  pub fn add_jmagUnc(&mut self, jmagUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_JMAGUNC, jmagUnc, 0.0);
  }
  #[inline]
  pub fn add_kmag(&mut self, kmag: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_KMAG, kmag, 0.0);
  }
  #[inline]
  pub fn add_kmagUnc(&mut self, kmagUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_KMAGUNC, kmagUnc, 0.0);
  }
  #[inline]
  pub fn add_hmag(&mut self, hmag: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_HMAG, hmag, 0.0);
  }
  #[inline]
  pub fn add_hmagUnc(&mut self, hmagUnc: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_HMAGUNC, hmagUnc, 0.0);
  }
  #[inline]
  pub fn add_varFlag(&mut self, varFlag: bool) {
    self.fbb_.push_slot::<bool>(StarCatalog_Full::VT_VARFLAG, varFlag, false);
  }
  #[inline]
  pub fn add_multFlag(&mut self, multFlag: bool) {
    self.fbb_.push_slot::<bool>(StarCatalog_Full::VT_MULTFLAG, multFlag, false);
  }
  #[inline]
  pub fn add_neighborId(&mut self, neighborId: i32) {
    self.fbb_.push_slot::<i32>(StarCatalog_Full::VT_NEIGHBORID, neighborId, 0);
  }
  #[inline]
  pub fn add_neighborFlag(&mut self, neighborFlag: bool) {
    self.fbb_.push_slot::<bool>(StarCatalog_Full::VT_NEIGHBORFLAG, neighborFlag, false);
  }
  #[inline]
  pub fn add_neighborDistance(&mut self, neighborDistance: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_NEIGHBORDISTANCE, neighborDistance, 0.0);
  }
  #[inline]
  pub fn add_shiftFlag(&mut self, shiftFlag: bool) {
    self.fbb_.push_slot::<bool>(StarCatalog_Full::VT_SHIFTFLAG, shiftFlag, false);
  }
  #[inline]
  pub fn add_shift(&mut self, shift: f64) {
    self.fbb_.push_slot::<f64>(StarCatalog_Full::VT_SHIFT, shift, 0.0);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(StarCatalog_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: StarCatalog_Full_dataMode_Enum) {
    self.fbb_.push_slot::<StarCatalog_Full_dataMode_Enum>(StarCatalog_Full::VT_DATAMODE, dataMode, StarCatalog_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> StarCatalog_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    StarCatalog_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<StarCatalog_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for StarCatalog_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("StarCatalog_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("csId", &self.csId());
      ds.field("gncCatId", &self.gncCatId());
      ds.field("gaiadr3CatId", &self.gaiadr3CatId());
      ds.field("hipCatId", &self.hipCatId());
      ds.field("catVersion", &self.catVersion());
      ds.field("ra", &self.ra());
      ds.field("raUnc", &self.raUnc());
      ds.field("dec", &self.dec());
      ds.field("decUnc", &self.decUnc());
      ds.field("posUncFlag", &self.posUncFlag());
      ds.field("parallax", &self.parallax());
      ds.field("parallaxUnc", &self.parallaxUnc());
      ds.field("pmra", &self.pmra());
      ds.field("pmraUnc", &self.pmraUnc());
      ds.field("pmdec", &self.pmdec());
      ds.field("pmdecUnc", &self.pmdecUnc());
      ds.field("pmUncFlag", &self.pmUncFlag());
      ds.field("astrometryOrigin", &self.astrometryOrigin());
      ds.field("starEpoch", &self.starEpoch());
      ds.field("gmag", &self.gmag());
      ds.field("gmagUnc", &self.gmagUnc());
      ds.field("bpmag", &self.bpmag());
      ds.field("bpmagUnc", &self.bpmagUnc());
      ds.field("rpmag", &self.rpmag());
      ds.field("rpmagUnc", &self.rpmagUnc());
      ds.field("jmag", &self.jmag());
      ds.field("jmagUnc", &self.jmagUnc());
      ds.field("kmag", &self.kmag());
      ds.field("kmagUnc", &self.kmagUnc());
      ds.field("hmag", &self.hmag());
      ds.field("hmagUnc", &self.hmagUnc());
      ds.field("varFlag", &self.varFlag());
      ds.field("multFlag", &self.multFlag());
      ds.field("neighborId", &self.neighborId());
      ds.field("neighborFlag", &self.neighborFlag());
      ds.field("neighborDistance", &self.neighborDistance());
      ds.field("shiftFlag", &self.shiftFlag());
      ds.field("shift", &self.shift());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct StarCatalog_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub csId: i64,
  pub gncCatId: i32,
  pub gaiadr3CatId: i64,
  pub hipCatId: i32,
  pub catVersion: Option<String>,
  pub ra: f64,
  pub raUnc: f64,
  pub dec: f64,
  pub decUnc: f64,
  pub posUncFlag: bool,
  pub parallax: f64,
  pub parallaxUnc: f64,
  pub pmra: f64,
  pub pmraUnc: f64,
  pub pmdec: f64,
  pub pmdecUnc: f64,
  pub pmUncFlag: bool,
  pub astrometryOrigin: StarCatalog_Full_astrometryOrigin_Enum,
  pub starEpoch: f64,
  pub gmag: f64,
  pub gmagUnc: f64,
  pub bpmag: f64,
  pub bpmagUnc: f64,
  pub rpmag: f64,
  pub rpmagUnc: f64,
  pub jmag: f64,
  pub jmagUnc: f64,
  pub kmag: f64,
  pub kmagUnc: f64,
  pub hmag: f64,
  pub hmagUnc: f64,
  pub varFlag: bool,
  pub multFlag: bool,
  pub neighborId: i32,
  pub neighborFlag: bool,
  pub neighborDistance: f64,
  pub shiftFlag: bool,
  pub shift: f64,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: StarCatalog_Full_dataMode_Enum,
}
impl Default for StarCatalog_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      csId: 0,
      gncCatId: 0,
      gaiadr3CatId: 0,
      hipCatId: 0,
      catVersion: None,
      ra: 0.0,
      raUnc: 0.0,
      dec: 0.0,
      decUnc: 0.0,
      posUncFlag: false,
      parallax: 0.0,
      parallaxUnc: 0.0,
      pmra: 0.0,
      pmraUnc: 0.0,
      pmdec: 0.0,
      pmdecUnc: 0.0,
      pmUncFlag: false,
      astrometryOrigin: StarCatalog_Full_astrometryOrigin_Enum::GAIADR3,
      starEpoch: 0.0,
      gmag: 0.0,
      gmagUnc: 0.0,
      bpmag: 0.0,
      bpmagUnc: 0.0,
      rpmag: 0.0,
      rpmagUnc: 0.0,
      jmag: 0.0,
      jmagUnc: 0.0,
      kmag: 0.0,
      kmagUnc: 0.0,
      hmag: 0.0,
      hmagUnc: 0.0,
      varFlag: false,
      multFlag: false,
      neighborId: 0,
      neighborFlag: false,
      neighborDistance: 0.0,
      shiftFlag: false,
      shift: 0.0,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: StarCatalog_Full_dataMode_Enum::REAL,
    }
  }
}
impl StarCatalog_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<StarCatalog_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let csId = self.csId;
    let gncCatId = self.gncCatId;
    let gaiadr3CatId = self.gaiadr3CatId;
    let hipCatId = self.hipCatId;
    let catVersion = self.catVersion.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ra = self.ra;
    let raUnc = self.raUnc;
    let dec = self.dec;
    let decUnc = self.decUnc;
    let posUncFlag = self.posUncFlag;
    let parallax = self.parallax;
    let parallaxUnc = self.parallaxUnc;
    let pmra = self.pmra;
    let pmraUnc = self.pmraUnc;
    let pmdec = self.pmdec;
    let pmdecUnc = self.pmdecUnc;
    let pmUncFlag = self.pmUncFlag;
    let astrometryOrigin = self.astrometryOrigin;
    let starEpoch = self.starEpoch;
    let gmag = self.gmag;
    let gmagUnc = self.gmagUnc;
    let bpmag = self.bpmag;
    let bpmagUnc = self.bpmagUnc;
    let rpmag = self.rpmag;
    let rpmagUnc = self.rpmagUnc;
    let jmag = self.jmag;
    let jmagUnc = self.jmagUnc;
    let kmag = self.kmag;
    let kmagUnc = self.kmagUnc;
    let hmag = self.hmag;
    let hmagUnc = self.hmagUnc;
    let varFlag = self.varFlag;
    let multFlag = self.multFlag;
    let neighborId = self.neighborId;
    let neighborFlag = self.neighborFlag;
    let neighborDistance = self.neighborDistance;
    let shiftFlag = self.shiftFlag;
    let shift = self.shift;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    StarCatalog_Full::create(_fbb, &StarCatalog_FullArgs{
      id,
      classificationMarking,
      csId,
      gncCatId,
      gaiadr3CatId,
      hipCatId,
      catVersion,
      ra,
      raUnc,
      dec,
      decUnc,
      posUncFlag,
      parallax,
      parallaxUnc,
      pmra,
      pmraUnc,
      pmdec,
      pmdecUnc,
      pmUncFlag,
      astrometryOrigin,
      starEpoch,
      gmag,
      gmagUnc,
      bpmag,
      bpmagUnc,
      rpmag,
      rpmagUnc,
      jmag,
      jmagUnc,
      kmag,
      kmagUnc,
      hmag,
      hmagUnc,
      varFlag,
      multFlag,
      neighborId,
      neighborFlag,
      neighborDistance,
      shiftFlag,
      shift,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `StarCatalog_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_star_catalog_full_unchecked`.
pub fn root_as_star_catalog_full(buf: &[u8]) -> Result<StarCatalog_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<StarCatalog_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `StarCatalog_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_star_catalog_full_unchecked`.
pub fn size_prefixed_root_as_star_catalog_full(buf: &[u8]) -> Result<StarCatalog_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<StarCatalog_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `StarCatalog_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_star_catalog_full_unchecked`.
pub fn root_as_star_catalog_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<StarCatalog_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<StarCatalog_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `StarCatalog_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_star_catalog_full_unchecked`.
pub fn size_prefixed_root_as_star_catalog_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<StarCatalog_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<StarCatalog_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a StarCatalog_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `StarCatalog_Full`.
pub unsafe fn root_as_star_catalog_full_unchecked(buf: &[u8]) -> StarCatalog_Full {
  flatbuffers::root_unchecked::<StarCatalog_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed StarCatalog_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `StarCatalog_Full`.
pub unsafe fn size_prefixed_root_as_star_catalog_full_unchecked(buf: &[u8]) -> StarCatalog_Full {
  flatbuffers::size_prefixed_root_unchecked::<StarCatalog_Full>(buf)
}
pub const STAR_CATALOG_FULL_IDENTIFIER: &str = "STAR";

#[inline]
pub fn star_catalog_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, STAR_CATALOG_FULL_IDENTIFIER, false)
}

#[inline]
pub fn star_catalog_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, STAR_CATALOG_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_star_catalog_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<StarCatalog_Full<'a>>) {
  fbb.finish(root, Some(STAR_CATALOG_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_star_catalog_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<StarCatalog_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(STAR_CATALOG_FULL_IDENTIFIER));
}
