// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SERADATA_SPACECRAFT_DETAILS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SERADATA_SPACECRAFT_DETAILS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERADATA_SPACECRAFT_DETAILS_FULL_DATA_MODE_ENUM: [SeradataSpacecraftDetails_Full_dataMode_Enum; 4] = [
  SeradataSpacecraftDetails_Full_dataMode_Enum::REAL,
  SeradataSpacecraftDetails_Full_dataMode_Enum::TEST,
  SeradataSpacecraftDetails_Full_dataMode_Enum::SIMULATED,
  SeradataSpacecraftDetails_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SeradataSpacecraftDetails_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SeradataSpacecraftDetails_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SeradataSpacecraftDetails_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SeradataSpacecraftDetails_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SeradataSpacecraftDetails_Full_dataMode_Enum {
    type Output = SeradataSpacecraftDetails_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SeradataSpacecraftDetails_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SeradataSpacecraftDetails_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SeradataSpacecraftDetails_Full_dataMode_Enum {}
pub enum SeradataSpacecraftDetails_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// On-orbit spacecraft details compiled by Seradata for a particular satellite.
pub struct SeradataSpacecraftDetails_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SeradataSpacecraftDetails_Full<'a> {
  type Inner = SeradataSpacecraftDetails_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SeradataSpacecraftDetails_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 12;
  pub const VT_INTLNUMBER: flatbuffers::VOffsetT = 14;
  pub const VT_SECTOR: flatbuffers::VOffsetT = 16;
  pub const VT_APOGEE: flatbuffers::VOffsetT = 18;
  pub const VT_PERIGEE: flatbuffers::VOffsetT = 20;
  pub const VT_PERIOD: flatbuffers::VOffsetT = 22;
  pub const VT_INCLINATION: flatbuffers::VOffsetT = 24;
  pub const VT_PRIMEMANUFACTURERORGID: flatbuffers::VOffsetT = 26;
  pub const VT_STABILIZER: flatbuffers::VOffsetT = 28;
  pub const VT_DESIGNLIFE: flatbuffers::VOffsetT = 30;
  pub const VT_EXPECTEDLIFE: flatbuffers::VOffsetT = 32;
  pub const VT_INSUREDATLAUNCH: flatbuffers::VOffsetT = 34;
  pub const VT_LAUNCHMASS: flatbuffers::VOffsetT = 36;
  pub const VT_DRYMASS: flatbuffers::VOffsetT = 38;
  pub const VT_CATALOGNUMBER: flatbuffers::VOffsetT = 40;
  pub const VT_TOTALPAYLOADPOWER: flatbuffers::VOffsetT = 42;
  pub const VT_CONSTELLATION: flatbuffers::VOffsetT = 44;
  pub const VT_ORBITCATEGORY: flatbuffers::VOffsetT = 46;
  pub const VT_ORBITSUBCATEGORY: flatbuffers::VOffsetT = 48;
  pub const VT_LAUNCHCOST: flatbuffers::VOffsetT = 50;
  pub const VT_LAUNCHCOSTESTIMATED: flatbuffers::VOffsetT = 52;
  pub const VT_COSTESTIMATED: flatbuffers::VOffsetT = 54;
  pub const VT_NEWCOST: flatbuffers::VOffsetT = 56;
  pub const VT_COMBINEDNEWCOST: flatbuffers::VOffsetT = 58;
  pub const VT_COMBINEDCOSTESTIMATED: flatbuffers::VOffsetT = 60;
  pub const VT_INSUREDVALUEATLAUNCH: flatbuffers::VOffsetT = 62;
  pub const VT_INSUREDVALUELAUNCHESTIMATED: flatbuffers::VOffsetT = 64;
  pub const VT_ANNUALINSUREDDEPRECIATIONFACTOR: flatbuffers::VOffsetT = 66;
  pub const VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED: flatbuffers::VOffsetT = 68;
  pub const VT_INSURANCEPREMIUMATLAUNCH: flatbuffers::VOffsetT = 70;
  pub const VT_INSURANCEPREMIUMATLAUNCHESTIMATED: flatbuffers::VOffsetT = 72;
  pub const VT_NUMHUMANS: flatbuffers::VOffsetT = 74;
  pub const VT_CUBESATDISPENSERTYPE: flatbuffers::VOffsetT = 76;
  pub const VT_MASSCATEGORY: flatbuffers::VOffsetT = 78;
  pub const VT_LAUNCHID: flatbuffers::VOffsetT = 80;
  pub const VT_LAUNCHVEHICLEID: flatbuffers::VOffsetT = 82;
  pub const VT_LAUNCHPROVIDERFLIGHTNUMBER: flatbuffers::VOffsetT = 84;
  pub const VT_LAUNCHSITENAME: flatbuffers::VOffsetT = 86;
  pub const VT_LAUNCHSITEID: flatbuffers::VOffsetT = 88;
  pub const VT_LAUNCHCOUNTRY: flatbuffers::VOffsetT = 90;
  pub const VT_LAUNCHPROVIDER: flatbuffers::VOffsetT = 92;
  pub const VT_LAUNCHPROVIDERCOUNTRY: flatbuffers::VOffsetT = 94;
  pub const VT_COMMERCIALLAUNCH: flatbuffers::VOffsetT = 96;
  pub const VT_LAUNCHTYPE: flatbuffers::VOffsetT = 98;
  pub const VT_LAUNCHCHARACTERISTIC: flatbuffers::VOffsetT = 100;
  pub const VT_LAUNCHNUMBER: flatbuffers::VOffsetT = 102;
  pub const VT_LAUNCHDATE: flatbuffers::VOffsetT = 104;
  pub const VT_LAUNCHDATEREMARKS: flatbuffers::VOffsetT = 106;
  pub const VT_YOUTUBELAUNCHLINK: flatbuffers::VOffsetT = 108;
  pub const VT_STATUS: flatbuffers::VOffsetT = 110;
  pub const VT_OWNER: flatbuffers::VOffsetT = 112;
  pub const VT_OWNERCOUNTRY: flatbuffers::VOffsetT = 114;
  pub const VT_OPERATOR: flatbuffers::VOffsetT = 116;
  pub const VT_OPERATORCOUNTRY: flatbuffers::VOffsetT = 118;
  pub const VT_LEASED: flatbuffers::VOffsetT = 120;
  pub const VT_ORDERDATE: flatbuffers::VOffsetT = 122;
  pub const VT_CAPABILITYLOST: flatbuffers::VOffsetT = 124;
  pub const VT_CAPACITYLOST: flatbuffers::VOffsetT = 126;
  pub const VT_PRIMARYMISSIONGROUP: flatbuffers::VOffsetT = 128;
  pub const VT_ADDITIONALMISSIONSGROUPS: flatbuffers::VOffsetT = 130;
  pub const VT_TOTALCLAIMS: flatbuffers::VOffsetT = 132;
  pub const VT_TOTALINJURIES: flatbuffers::VOffsetT = 134;
  pub const VT_TOTALFATALITIES: flatbuffers::VOffsetT = 136;
  pub const VT_NAMEATLAUNCH: flatbuffers::VOffsetT = 138;
  pub const VT_BUSID: flatbuffers::VOffsetT = 140;
  pub const VT_CURRENTAGE: flatbuffers::VOffsetT = 142;
  pub const VT_LIFELOST: flatbuffers::VOffsetT = 144;
  pub const VT_GEOPOSITION: flatbuffers::VOffsetT = 146;
  pub const VT_INSURANCELOSSESTOTAL: flatbuffers::VOffsetT = 148;
  pub const VT_LAUNCHARRANGER: flatbuffers::VOffsetT = 150;
  pub const VT_LAUNCHARRANGERCOUNTRY: flatbuffers::VOffsetT = 152;
  pub const VT_SERIALNUMBER: flatbuffers::VOffsetT = 154;
  pub const VT_PROGRAMNAME: flatbuffers::VOffsetT = 156;
  pub const VT_REUSEDHULLNAME: flatbuffers::VOffsetT = 158;
  pub const VT_DATEOFOBSERVATION: flatbuffers::VOffsetT = 160;
  pub const VT_LAT: flatbuffers::VOffsetT = 162;
  pub const VT_LON: flatbuffers::VOffsetT = 164;
  pub const VT_ALTITUDE: flatbuffers::VOffsetT = 166;
  pub const VT_COLLISIONRISKMM: flatbuffers::VOffsetT = 168;
  pub const VT_COLLISIONRISKCM: flatbuffers::VOffsetT = 170;
  pub const VT_QUANTITY: flatbuffers::VOffsetT = 172;
  pub const VT_REUSABLEFLIGHTS: flatbuffers::VOffsetT = 174;
  pub const VT_NOTES: flatbuffers::VOffsetT = 176;
  pub const VT_INSURANCENOTES: flatbuffers::VOffsetT = 178;
  pub const VT_LAUNCHNOTES: flatbuffers::VOffsetT = 180;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 182;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 184;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 186;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 188;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 190;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 192;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 194;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 196;
  pub const VT_SERADATASIGINTPAYLOAD: flatbuffers::VOffsetT = 198;
  pub const VT_SERADATARADARPAYLOAD: flatbuffers::VOffsetT = 200;
  pub const VT_SERADATANAVIGATION: flatbuffers::VOffsetT = 202;
  pub const VT_SERADATAOPTICALPAYLOAD: flatbuffers::VOffsetT = 204;
  pub const VT_SERADATAEARLYWARNING: flatbuffers::VOffsetT = 206;
  pub const VT_SCIENTIFIC: flatbuffers::VOffsetT = 208;
  pub const VT_SERADATACOMMDETAILS: flatbuffers::VOffsetT = 210;
  pub const VT_ONORBIT: flatbuffers::VOffsetT = 212;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SeradataSpacecraftDetails_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SeradataSpacecraftDetails_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<SeradataSpacecraftDetails_Full<'bldr>> {
    let mut builder = SeradataSpacecraftDetails_FullBuilder::new(_fbb);
    builder.add_collisionRiskCM(args.collisionRiskCM);
    builder.add_collisionRiskMM(args.collisionRiskMM);
    builder.add_altitude(args.altitude);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    builder.add_insuranceLossesTotal(args.insuranceLossesTotal);
    builder.add_geoPosition(args.geoPosition);
    builder.add_lifeLost(args.lifeLost);
    builder.add_currentAge(args.currentAge);
    builder.add_capacityLost(args.capacityLost);
    builder.add_capabilityLost(args.capabilityLost);
    builder.add_insurancePremiumAtLaunch(args.insurancePremiumAtLaunch);
    builder.add_annualInsuredDepreciationFactor(args.annualInsuredDepreciationFactor);
    builder.add_insuredValueAtLaunch(args.insuredValueAtLaunch);
    builder.add_combinedNewCost(args.combinedNewCost);
    builder.add_newCost(args.newCost);
    builder.add_launchCost(args.launchCost);
    builder.add_totalPayloadPower(args.totalPayloadPower);
    builder.add_dryMass(args.dryMass);
    builder.add_launchMass(args.launchMass);
    builder.add_inclination(args.inclination);
    builder.add_period(args.period);
    builder.add_perigee(args.perigee);
    builder.add_apogee(args.apogee);
    if let Some(x) = args.onOrbit { builder.add_onOrbit(x); }
    if let Some(x) = args.seradataCommDetails { builder.add_seradataCommDetails(x); }
    if let Some(x) = args.scientific { builder.add_scientific(x); }
    if let Some(x) = args.seradataEarlyWarning { builder.add_seradataEarlyWarning(x); }
    if let Some(x) = args.seradataOpticalPayload { builder.add_seradataOpticalPayload(x); }
    if let Some(x) = args.seradataNavigation { builder.add_seradataNavigation(x); }
    if let Some(x) = args.seradataRadarPayload { builder.add_seradataRadarPayload(x); }
    if let Some(x) = args.seradataSigIntPayload { builder.add_seradataSigIntPayload(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.launchNotes { builder.add_launchNotes(x); }
    if let Some(x) = args.insuranceNotes { builder.add_insuranceNotes(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.reusableFlights { builder.add_reusableFlights(x); }
    builder.add_quantity(args.quantity);
    if let Some(x) = args.dateOfObservation { builder.add_dateOfObservation(x); }
    if let Some(x) = args.reusedHullName { builder.add_reusedHullName(x); }
    if let Some(x) = args.programName { builder.add_programName(x); }
    if let Some(x) = args.serialNumber { builder.add_serialNumber(x); }
    if let Some(x) = args.launchArrangerCountry { builder.add_launchArrangerCountry(x); }
    if let Some(x) = args.launchArranger { builder.add_launchArranger(x); }
    if let Some(x) = args.busId { builder.add_busId(x); }
    if let Some(x) = args.nameAtLaunch { builder.add_nameAtLaunch(x); }
    builder.add_totalFatalities(args.totalFatalities);
    builder.add_totalInjuries(args.totalInjuries);
    builder.add_totalClaims(args.totalClaims);
    if let Some(x) = args.additionalMissionsGroups { builder.add_additionalMissionsGroups(x); }
    if let Some(x) = args.primaryMissionGroup { builder.add_primaryMissionGroup(x); }
    if let Some(x) = args.orderDate { builder.add_orderDate(x); }
    if let Some(x) = args.operatorCountry { builder.add_operatorCountry(x); }
    if let Some(x) = args.operator { builder.add_operator(x); }
    if let Some(x) = args.ownerCountry { builder.add_ownerCountry(x); }
    if let Some(x) = args.owner { builder.add_owner(x); }
    if let Some(x) = args.status { builder.add_status(x); }
    if let Some(x) = args.youtubeLaunchLink { builder.add_youtubeLaunchLink(x); }
    if let Some(x) = args.launchDateRemarks { builder.add_launchDateRemarks(x); }
    if let Some(x) = args.launchDate { builder.add_launchDate(x); }
    if let Some(x) = args.launchNumber { builder.add_launchNumber(x); }
    if let Some(x) = args.launchCharacteristic { builder.add_launchCharacteristic(x); }
    if let Some(x) = args.launchType { builder.add_launchType(x); }
    if let Some(x) = args.launchProviderCountry { builder.add_launchProviderCountry(x); }
    if let Some(x) = args.launchProvider { builder.add_launchProvider(x); }
    if let Some(x) = args.launchCountry { builder.add_launchCountry(x); }
    if let Some(x) = args.launchSiteId { builder.add_launchSiteId(x); }
    if let Some(x) = args.launchSiteName { builder.add_launchSiteName(x); }
    if let Some(x) = args.launchProviderFlightNumber { builder.add_launchProviderFlightNumber(x); }
    if let Some(x) = args.launchVehicleId { builder.add_launchVehicleId(x); }
    if let Some(x) = args.launchId { builder.add_launchId(x); }
    if let Some(x) = args.massCategory { builder.add_massCategory(x); }
    if let Some(x) = args.cubesatDispenserType { builder.add_cubesatDispenserType(x); }
    builder.add_numHumans(args.numHumans);
    if let Some(x) = args.orbitSubCategory { builder.add_orbitSubCategory(x); }
    if let Some(x) = args.orbitCategory { builder.add_orbitCategory(x); }
    if let Some(x) = args.constellation { builder.add_constellation(x); }
    builder.add_catalogNumber(args.catalogNumber);
    builder.add_expectedLife(args.expectedLife);
    builder.add_designLife(args.designLife);
    if let Some(x) = args.stabilizer { builder.add_stabilizer(x); }
    if let Some(x) = args.primeManufacturerOrgId { builder.add_primeManufacturerOrgId(x); }
    if let Some(x) = args.sector { builder.add_sector(x); }
    if let Some(x) = args.intlNumber { builder.add_intlNumber(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_leased(args.leased);
    builder.add_commercialLaunch(args.commercialLaunch);
    builder.add_insurancePremiumAtLaunchEstimated(args.insurancePremiumAtLaunchEstimated);
    builder.add_annualInsuredDepreciationFactorEstimated(args.annualInsuredDepreciationFactorEstimated);
    builder.add_insuredValueLaunchEstimated(args.insuredValueLaunchEstimated);
    builder.add_combinedCostEstimated(args.combinedCostEstimated);
    builder.add_costEstimated(args.costEstimated);
    builder.add_launchCostEstimated(args.launchCostEstimated);
    builder.add_insuredAtLaunch(args.insuredAtLaunch);
    builder.finish()
  }

  pub fn unpack(&self) -> SeradataSpacecraftDetails_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let intlNumber = self.intlNumber().map(|x| {
      x.to_string()
    });
    let sector = self.sector().map(|x| {
      x.to_string()
    });
    let apogee = self.apogee();
    let perigee = self.perigee();
    let period = self.period();
    let inclination = self.inclination();
    let primeManufacturerOrgId = self.primeManufacturerOrgId().map(|x| {
      x.to_string()
    });
    let stabilizer = self.stabilizer().map(|x| {
      x.to_string()
    });
    let designLife = self.designLife();
    let expectedLife = self.expectedLife();
    let insuredAtLaunch = self.insuredAtLaunch();
    let launchMass = self.launchMass();
    let dryMass = self.dryMass();
    let catalogNumber = self.catalogNumber();
    let totalPayloadPower = self.totalPayloadPower();
    let constellation = self.constellation().map(|x| {
      x.to_string()
    });
    let orbitCategory = self.orbitCategory().map(|x| {
      x.to_string()
    });
    let orbitSubCategory = self.orbitSubCategory().map(|x| {
      x.to_string()
    });
    let launchCost = self.launchCost();
    let launchCostEstimated = self.launchCostEstimated();
    let costEstimated = self.costEstimated();
    let newCost = self.newCost();
    let combinedNewCost = self.combinedNewCost();
    let combinedCostEstimated = self.combinedCostEstimated();
    let insuredValueAtLaunch = self.insuredValueAtLaunch();
    let insuredValueLaunchEstimated = self.insuredValueLaunchEstimated();
    let annualInsuredDepreciationFactor = self.annualInsuredDepreciationFactor();
    let annualInsuredDepreciationFactorEstimated = self.annualInsuredDepreciationFactorEstimated();
    let insurancePremiumAtLaunch = self.insurancePremiumAtLaunch();
    let insurancePremiumAtLaunchEstimated = self.insurancePremiumAtLaunchEstimated();
    let numHumans = self.numHumans();
    let cubesatDispenserType = self.cubesatDispenserType().map(|x| {
      x.to_string()
    });
    let massCategory = self.massCategory().map(|x| {
      x.to_string()
    });
    let launchId = self.launchId().map(|x| {
      x.to_string()
    });
    let launchVehicleId = self.launchVehicleId().map(|x| {
      x.to_string()
    });
    let launchProviderFlightNumber = self.launchProviderFlightNumber().map(|x| {
      x.to_string()
    });
    let launchSiteName = self.launchSiteName().map(|x| {
      x.to_string()
    });
    let launchSiteId = self.launchSiteId().map(|x| {
      x.to_string()
    });
    let launchCountry = self.launchCountry().map(|x| {
      x.to_string()
    });
    let launchProvider = self.launchProvider().map(|x| {
      x.to_string()
    });
    let launchProviderCountry = self.launchProviderCountry().map(|x| {
      x.to_string()
    });
    let commercialLaunch = self.commercialLaunch();
    let launchType = self.launchType().map(|x| {
      x.to_string()
    });
    let launchCharacteristic = self.launchCharacteristic().map(|x| {
      x.to_string()
    });
    let launchNumber = self.launchNumber().map(|x| {
      x.to_string()
    });
    let launchDate = self.launchDate().map(|x| {
      x.to_string()
    });
    let launchDateRemarks = self.launchDateRemarks().map(|x| {
      x.to_string()
    });
    let youtubeLaunchLink = self.youtubeLaunchLink().map(|x| {
      x.to_string()
    });
    let status = self.status().map(|x| {
      x.to_string()
    });
    let owner = self.owner().map(|x| {
      x.to_string()
    });
    let ownerCountry = self.ownerCountry().map(|x| {
      x.to_string()
    });
    let operator = self.operator().map(|x| {
      x.to_string()
    });
    let operatorCountry = self.operatorCountry().map(|x| {
      x.to_string()
    });
    let leased = self.leased();
    let orderDate = self.orderDate().map(|x| {
      x.to_string()
    });
    let capabilityLost = self.capabilityLost();
    let capacityLost = self.capacityLost();
    let primaryMissionGroup = self.primaryMissionGroup().map(|x| {
      x.to_string()
    });
    let additionalMissionsGroups = self.additionalMissionsGroups().map(|x| {
      x.to_string()
    });
    let totalClaims = self.totalClaims();
    let totalInjuries = self.totalInjuries();
    let totalFatalities = self.totalFatalities();
    let nameAtLaunch = self.nameAtLaunch().map(|x| {
      x.to_string()
    });
    let busId = self.busId().map(|x| {
      x.to_string()
    });
    let currentAge = self.currentAge();
    let lifeLost = self.lifeLost();
    let geoPosition = self.geoPosition();
    let insuranceLossesTotal = self.insuranceLossesTotal();
    let launchArranger = self.launchArranger().map(|x| {
      x.to_string()
    });
    let launchArrangerCountry = self.launchArrangerCountry().map(|x| {
      x.to_string()
    });
    let serialNumber = self.serialNumber().map(|x| {
      x.to_string()
    });
    let programName = self.programName().map(|x| {
      x.to_string()
    });
    let reusedHullName = self.reusedHullName().map(|x| {
      x.to_string()
    });
    let dateOfObservation = self.dateOfObservation().map(|x| {
      x.to_string()
    });
    let lat = self.lat();
    let lon = self.lon();
    let altitude = self.altitude();
    let collisionRiskMM = self.collisionRiskMM();
    let collisionRiskCM = self.collisionRiskCM();
    let quantity = self.quantity();
    let reusableFlights = self.reusableFlights().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let insuranceNotes = self.insuranceNotes().map(|x| {
      x.to_string()
    });
    let launchNotes = self.launchNotes().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let seradataSigIntPayload = self.seradataSigIntPayload().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let seradataRadarPayload = self.seradataRadarPayload().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let seradataNavigation = self.seradataNavigation().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let seradataOpticalPayload = self.seradataOpticalPayload().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let seradataEarlyWarning = self.seradataEarlyWarning().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let scientific = self.scientific().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let seradataCommDetails = self.seradataCommDetails().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let onOrbit = self.onOrbit().map(|x| {
      x.to_string()
    });
    SeradataSpacecraftDetails_FullT {
      id,
      idOnOrbit,
      classificationMarking,
      name,
      description,
      intlNumber,
      sector,
      apogee,
      perigee,
      period,
      inclination,
      primeManufacturerOrgId,
      stabilizer,
      designLife,
      expectedLife,
      insuredAtLaunch,
      launchMass,
      dryMass,
      catalogNumber,
      totalPayloadPower,
      constellation,
      orbitCategory,
      orbitSubCategory,
      launchCost,
      launchCostEstimated,
      costEstimated,
      newCost,
      combinedNewCost,
      combinedCostEstimated,
      insuredValueAtLaunch,
      insuredValueLaunchEstimated,
      annualInsuredDepreciationFactor,
      annualInsuredDepreciationFactorEstimated,
      insurancePremiumAtLaunch,
      insurancePremiumAtLaunchEstimated,
      numHumans,
      cubesatDispenserType,
      massCategory,
      launchId,
      launchVehicleId,
      launchProviderFlightNumber,
      launchSiteName,
      launchSiteId,
      launchCountry,
      launchProvider,
      launchProviderCountry,
      commercialLaunch,
      launchType,
      launchCharacteristic,
      launchNumber,
      launchDate,
      launchDateRemarks,
      youtubeLaunchLink,
      status,
      owner,
      ownerCountry,
      operator,
      operatorCountry,
      leased,
      orderDate,
      capabilityLost,
      capacityLost,
      primaryMissionGroup,
      additionalMissionsGroups,
      totalClaims,
      totalInjuries,
      totalFatalities,
      nameAtLaunch,
      busId,
      currentAge,
      lifeLost,
      geoPosition,
      insuranceLossesTotal,
      launchArranger,
      launchArrangerCountry,
      serialNumber,
      programName,
      reusedHullName,
      dateOfObservation,
      lat,
      lon,
      altitude,
      collisionRiskMM,
      collisionRiskCM,
      quantity,
      reusableFlights,
      notes,
      insuranceNotes,
      launchNotes,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      seradataSigIntPayload,
      seradataRadarPayload,
      seradataNavigation,
      seradataOpticalPayload,
      seradataEarlyWarning,
      scientific,
      seradataCommDetails,
      onOrbit,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATASPACECRAFTDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ID, None)}
  }
  /// UUID of the parent Onorbit record, if available.
  /// Example: /// Example: 503
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_IDONORBIT, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Spacecraft name.
  /// Example: /// Example: name
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_NAME, None)}
  }
  /// Description associated with the spacecraft.
  /// Example: /// Example: description
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_DESCRIPTION, None)}
  }
  /// Seradata international number.
  /// Example: /// Example: number
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn intlNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_INTLNUMBER, None)}
  }
  /// Seradata sector (e.g. Commercial, Military, Civil/Other).
  /// Example: /// Example: Commercial
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn sector(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_SECTOR, None)}
  }
  /// Apogee in km.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn apogee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_APOGEE, Some(0.0)).unwrap()}
  }
  /// Perigee in km.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn perigee(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_PERIGEE, Some(0.0)).unwrap()}
  }
  /// Spacecraft period in minutes.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn period(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_PERIOD, Some(0.0)).unwrap()}
  }
  /// Seradata provided inclination in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn inclination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_INCLINATION, Some(0.0)).unwrap()}
  }
  /// UUID of the prime manufacturer organization, if available.
  /// Example: /// Example: 05c43360-382e-4aa2-b875-ed28945ff2e5
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn primeManufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_PRIMEMANUFACTURERORGID, None)}
  }
  /// Spacecraft stabilizer (e.g. 3-Axis, Gravity Gradiant, etc).
  /// Example: /// Example: 3-Axis
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn stabilizer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_STABILIZER, None)}
  }
  /// Spacecraft design life in days.
  /// Example: /// Example: 231
  /// Constraints: No constraints specified.
  #[inline]
  pub fn designLife(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_DESIGNLIFE, Some(0)).unwrap()}
  }
  /// Spacecraft expected life in days.
  /// Example: /// Example: 231
  /// Constraints: No constraints specified.
  #[inline]
  pub fn expectedLife(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_EXPECTEDLIFE, Some(0)).unwrap()}
  }
  /// Boolean indicating if the spacecraft was insured at launch.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn insuredAtLaunch(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_INSUREDATLAUNCH, Some(false)).unwrap()}
  }
  /// Mass at launch in kg.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_LAUNCHMASS, Some(0.0)).unwrap()}
  }
  /// Mass dry in kg.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dryMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_DRYMASS, Some(0.0)).unwrap()}
  }
  /// NORAD satellite number if available.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn catalogNumber(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_CATALOGNUMBER, Some(0)).unwrap()}
  }
  /// Mass dry in kg.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalPayloadPower(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_TOTALPAYLOADPOWER, Some(0.0)).unwrap()}
  }
  /// Spacecraft constellation.
  /// Example: /// Example: GPS
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn constellation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_CONSTELLATION, None)}
  }
  /// Spacecraft orbit category (e.g GEO, LEO, etc).
  /// Example: /// Example: GEO
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn orbitCategory(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ORBITCATEGORY, None)}
  }
  /// Spacecraft sub orbit category (e.g LEO - Sun-synchronous, Geostationary, etc).
  /// Example: /// Example: Geostationary
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn orbitSubCategory(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ORBITSUBCATEGORY, None)}
  }
  /// Cost of launch in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchCost(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOST, Some(0.0)).unwrap()}
  }
  /// Boolean indicating if the spacecraft launch cost is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchCostEstimated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOSTESTIMATED, Some(false)).unwrap()}
  }
  /// Boolean indicating if the spacecraft cost is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn costEstimated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_COSTESTIMATED, Some(false)).unwrap()}
  }
  /// Cost of spacecraft at new in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn newCost(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_NEWCOST, Some(0.0)).unwrap()}
  }
  /// Combined cost of spacecraft at new in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn combinedNewCost(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_COMBINEDNEWCOST, Some(0.0)).unwrap()}
  }
  /// Boolean indicating if the spacecraft combined new cost is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn combinedCostEstimated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_COMBINEDCOSTESTIMATED, Some(false)).unwrap()}
  }
  /// Insured value of spacecraft at launch in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn insuredValueAtLaunch(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_INSUREDVALUEATLAUNCH, Some(0.0)).unwrap()}
  }
  /// Boolean indicating if the spacecraft insured value at launch is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn insuredValueLaunchEstimated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_INSUREDVALUELAUNCHESTIMATED, Some(false)).unwrap()}
  }
  /// Annual insured depreciaion factor as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn annualInsuredDepreciationFactor(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_ANNUALINSUREDDEPRECIATIONFACTOR, Some(0.0)).unwrap()}
  }
  /// Boolean indicating if the spacecraft annualInsuredDepreciationFactor is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn annualInsuredDepreciationFactorEstimated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED, Some(false)).unwrap()}
  }
  /// Insurance premium at launch in M USD.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn insurancePremiumAtLaunch(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_INSURANCEPREMIUMATLAUNCH, Some(0.0)).unwrap()}
  }
  /// Boolean indicating if the spacecraft insurancePremiumAtLaunch is estimated.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn insurancePremiumAtLaunchEstimated(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_INSURANCEPREMIUMATLAUNCHESTIMATED, Some(false)).unwrap()}
  }
  /// Number of humans carried on spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numHumans(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_NUMHUMANS, Some(0)).unwrap()}
  }
  /// Cubesat dispenser type.
  /// Example: /// Example: cubesatDispenserType
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn cubesatDispenserType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_CUBESATDISPENSERTYPE, None)}
  }
  /// Mass category (e.g.  2500 - 3500kg  - Large Satellite, 10 - 100 kg - Microsatellite, etc).
  /// Example: /// Example: 2500 - 3500kg  - Large Satellite
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn massCategory(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_MASSCATEGORY, None)}
  }
  /// Seradata launch ID.
  /// Example: /// Example: 11573
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn launchId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHID, None)}
  }
  /// Seradata launch ID.
  /// Example: /// Example: 123
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn launchVehicleId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHVEHICLEID, None)}
  }
  /// Seradata launch vehicle family.
  /// Example: /// Example: launchProviderFlightNumber
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn launchProviderFlightNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDERFLIGHTNUMBER, None)}
  }
  /// Launch Site Name.
  /// Example: /// Example: launchSiteName
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn launchSiteName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHSITENAME, None)}
  }
  /// Seradata Launch Site ID.
  /// Example: /// Example: 28
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn launchSiteId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHSITEID, None)}
  }
  /// Seradata launch country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn launchCountry(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOUNTRY, None)}
  }
  /// Seradata launch provider.
  /// Example: /// Example: launchProvider
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn launchProvider(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDER, None)}
  }
  /// Seradata launch provider country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn launchProviderCountry(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDERCOUNTRY, None)}
  }
  /// Boolean indicating if the launch was commercial.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn commercialLaunch(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_COMMERCIALLAUNCH, Some(false)).unwrap()}
  }
  /// Seradata launch type (e.g. Launched, Future, etc).
  /// Example: /// Example: Future
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn launchType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHTYPE, None)}
  }
  /// Seradata launch characteristic (e.g. Expendable, Reusable (New), etc).
  /// Example: /// Example: Expendable
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn launchCharacteristic(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHCHARACTERISTIC, None)}
  }
  /// Seradata launch number.
  /// Example: /// Example: FN040
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn launchNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHNUMBER, None)}
  }
  /// Launch date.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHDATE, None)}
  }
  /// Seradata remarks on launch date.
  /// Example: /// Example: launchDateRemarks
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn launchDateRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHDATEREMARKS, None)}
  }
  /// Youtube link of launch.
  /// Example: /// Example: youtubeLaunchLink
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn youtubeLaunchLink(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_YOUTUBELAUNCHLINK, None)}
  }
  /// Spacecraft status (e.g. Inactive - Retired, Inactive - Re-entered, Active, etc).
  /// Example: /// Example: Inactive - Retired
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn status(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_STATUS, None)}
  }
  /// Spacecraft owner name.
  /// Example: /// Example: owner
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn owner(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_OWNER, None)}
  }
  /// Spacecraft owner country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn ownerCountry(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_OWNERCOUNTRY, None)}
  }
  /// Spacecraft operator name.
  /// Example: /// Example: operator
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn operator(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_OPERATOR, None)}
  }
  /// Spacecraft operator country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn operatorCountry(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_OPERATORCOUNTRY, None)}
  }
  /// Boolean indicating if the spacecraft was leased.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn leased(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataSpacecraftDetails_Full::VT_LEASED, Some(false)).unwrap()}
  }
  /// Spacecraft order date.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn orderDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ORDERDATE, None)}
  }
  /// Total capability lost as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn capabilityLost(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_CAPABILITYLOST, Some(0.0)).unwrap()}
  }
  /// Total capacity lost as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn capacityLost(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_CAPACITYLOST, Some(0.0)).unwrap()}
  }
  /// Spacecraft primary mission and group.
  /// Example: /// Example: primaryMissionGroup
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn primaryMissionGroup(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_PRIMARYMISSIONGROUP, None)}
  }
  /// Spacecraft additional missions and groups.
  /// Example: /// Example: additionalMissionsGroups
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn additionalMissionsGroups(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ADDITIONALMISSIONSGROUPS, None)}
  }
  /// Number of insurance claims for this spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalClaims(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_TOTALCLAIMS, Some(0)).unwrap()}
  }
  /// Number of injuries related to this spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalInjuries(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_TOTALINJURIES, Some(0)).unwrap()}
  }
  /// Number of fatalities related to this spacecraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totalFatalities(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_TOTALFATALITIES, Some(0)).unwrap()}
  }
  /// Spacecraft name at launch.
  /// Example: /// Example: nameAtLaunch
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn nameAtLaunch(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_NAMEATLAUNCH, None)}
  }
  /// Spacecraft Bus ID.
  /// Example: /// Example: BUS-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn busId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_BUSID, None)}
  }
  /// Current age in years.
  /// Example: /// Example: 5.898630136986301
  /// Constraints: No constraints specified.
  #[inline]
  pub fn currentAge(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_CURRENTAGE, Some(0.0)).unwrap()}
  }
  /// Spacecraft life lost as a percent fraction.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lifeLost(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_LIFELOST, Some(0.0)).unwrap()}
  }
  /// WGS84 longitude of the spacecraft’s latest GEO position, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -8.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geoPosition(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_GEOPOSITION, Some(0.0)).unwrap()}
  }
  /// Spacecraft total insurance losses as a fraction.
  /// Example: /// Example: 0.393
  /// Constraints: No constraints specified.
  #[inline]
  pub fn insuranceLossesTotal(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_INSURANCELOSSESTOTAL, Some(0.0)).unwrap()}
  }
  /// Spacecraft launch arranger.
  /// Example: /// Example: launchArranger
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn launchArranger(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHARRANGER, None)}
  }
  /// Spacecraft launch arranger country.
  /// Example: /// Example: USA
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn launchArrangerCountry(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHARRANGERCOUNTRY, None)}
  }
  /// Spacecraft serial number.
  /// Example: /// Example: serialNumber
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn serialNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_SERIALNUMBER, None)}
  }
  /// Spacecraft program name.
  /// Example: /// Example: programName
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn programName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_PROGRAMNAME, None)}
  }
  /// Spacecraft reused hull name.
  /// Example: /// Example: reusedHullName
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn reusedHullName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_REUSEDHULLNAME, None)}
  }
  /// Spacecraft date of observation.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dateOfObservation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_DATEOFOBSERVATION, None)}
  }
  /// Spacecraft latest latitude in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_LAT, Some(0.0)).unwrap()}
  }
  /// Spacecraft latest longitude in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_LON, Some(0.0)).unwrap()}
  }
  /// Spacecraft latest altitude in km.
  /// Example: /// Example: 36036.6330576414
  /// Constraints: No constraints specified.
  #[inline]
  pub fn altitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_ALTITUDE, Some(0.0)).unwrap()}
  }
  /// Spacecraft collision risk 1mm sqm latest.
  /// Example: /// Example: 1.33
  /// Constraints: No constraints specified.
  #[inline]
  pub fn collisionRiskMM(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_COLLISIONRISKMM, Some(0.0)).unwrap()}
  }
  /// Spacecraft collision risk 1cm sqm latest.
  /// Example: /// Example: 1.43
  /// Constraints: No constraints specified.
  #[inline]
  pub fn collisionRiskCM(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSpacecraftDetails_Full::VT_COLLISIONRISKCM, Some(0.0)).unwrap()}
  }
  /// Spacecraft quantity.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn quantity(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SeradataSpacecraftDetails_Full::VT_QUANTITY, Some(0)).unwrap()}
  }
  /// Spacecraft reusable flights.
  /// Example: /// Example: reusableFlights
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn reusableFlights(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_REUSABLEFLIGHTS, None)}
  }
  /// Notes on the spacecraft.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_NOTES, None)}
  }
  /// Insurance notes for the spacecraft.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn insuranceNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_INSURANCENOTES, None)}
  }
  /// Insurance notes for the spacecraft.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn launchNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_LAUNCHNOTES, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SeradataSpacecraftDetails_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SeradataSpacecraftDetails_Full_dataMode_Enum>(SeradataSpacecraftDetails_Full::VT_DATAMODE, Some(SeradataSpacecraftDetails_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_UPDATEDBY, None)}
  }
  /// Read-only details of the SeradataSigIntPayload object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seradataSigIntPayload(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SeradataSpacecraftDetails_Full::VT_SERADATASIGINTPAYLOAD, None)}
  }
  /// Read-only details of the SeradataRadarPayload object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seradataRadarPayload(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SeradataSpacecraftDetails_Full::VT_SERADATARADARPAYLOAD, None)}
  }
  /// Read-only details of the SeradataNavigation object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seradataNavigation(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SeradataSpacecraftDetails_Full::VT_SERADATANAVIGATION, None)}
  }
  /// Read-only details of the SeradataOpticalPayload object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seradataOpticalPayload(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SeradataSpacecraftDetails_Full::VT_SERADATAOPTICALPAYLOAD, None)}
  }
  /// Read-only details of the SeradataEarlyWarning object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seradataEarlyWarning(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SeradataSpacecraftDetails_Full::VT_SERADATAEARLYWARNING, None)}
  }
  /// Read-only details of the Scientific object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn scientific(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SeradataSpacecraftDetails_Full::VT_SCIENTIFIC, None)}
  }
  /// Read-only details of the SeradataCommDetails object, only used during detail queries (not to be provided on create/update operations).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seradataCommDetails(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SeradataSpacecraftDetails_Full::VT_SERADATACOMMDETAILS, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn onOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSpacecraftDetails_Full::VT_ONORBIT, None)}
  }
}

impl flatbuffers::Verifiable for SeradataSpacecraftDetails_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("intlNumber", Self::VT_INTLNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sector", Self::VT_SECTOR, false)?
     .visit_field::<f64>("apogee", Self::VT_APOGEE, false)?
     .visit_field::<f64>("perigee", Self::VT_PERIGEE, false)?
     .visit_field::<f64>("period", Self::VT_PERIOD, false)?
     .visit_field::<f64>("inclination", Self::VT_INCLINATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("primeManufacturerOrgId", Self::VT_PRIMEMANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("stabilizer", Self::VT_STABILIZER, false)?
     .visit_field::<i32>("designLife", Self::VT_DESIGNLIFE, false)?
     .visit_field::<i32>("expectedLife", Self::VT_EXPECTEDLIFE, false)?
     .visit_field::<bool>("insuredAtLaunch", Self::VT_INSUREDATLAUNCH, false)?
     .visit_field::<f64>("launchMass", Self::VT_LAUNCHMASS, false)?
     .visit_field::<f64>("dryMass", Self::VT_DRYMASS, false)?
     .visit_field::<i32>("catalogNumber", Self::VT_CATALOGNUMBER, false)?
     .visit_field::<f64>("totalPayloadPower", Self::VT_TOTALPAYLOADPOWER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("constellation", Self::VT_CONSTELLATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("orbitCategory", Self::VT_ORBITCATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("orbitSubCategory", Self::VT_ORBITSUBCATEGORY, false)?
     .visit_field::<f64>("launchCost", Self::VT_LAUNCHCOST, false)?
     .visit_field::<bool>("launchCostEstimated", Self::VT_LAUNCHCOSTESTIMATED, false)?
     .visit_field::<bool>("costEstimated", Self::VT_COSTESTIMATED, false)?
     .visit_field::<f64>("newCost", Self::VT_NEWCOST, false)?
     .visit_field::<f64>("combinedNewCost", Self::VT_COMBINEDNEWCOST, false)?
     .visit_field::<bool>("combinedCostEstimated", Self::VT_COMBINEDCOSTESTIMATED, false)?
     .visit_field::<f64>("insuredValueAtLaunch", Self::VT_INSUREDVALUEATLAUNCH, false)?
     .visit_field::<bool>("insuredValueLaunchEstimated", Self::VT_INSUREDVALUELAUNCHESTIMATED, false)?
     .visit_field::<f64>("annualInsuredDepreciationFactor", Self::VT_ANNUALINSUREDDEPRECIATIONFACTOR, false)?
     .visit_field::<bool>("annualInsuredDepreciationFactorEstimated", Self::VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED, false)?
     .visit_field::<f64>("insurancePremiumAtLaunch", Self::VT_INSURANCEPREMIUMATLAUNCH, false)?
     .visit_field::<bool>("insurancePremiumAtLaunchEstimated", Self::VT_INSURANCEPREMIUMATLAUNCHESTIMATED, false)?
     .visit_field::<i32>("numHumans", Self::VT_NUMHUMANS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cubesatDispenserType", Self::VT_CUBESATDISPENSERTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("massCategory", Self::VT_MASSCATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchId", Self::VT_LAUNCHID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchVehicleId", Self::VT_LAUNCHVEHICLEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchProviderFlightNumber", Self::VT_LAUNCHPROVIDERFLIGHTNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchSiteName", Self::VT_LAUNCHSITENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchSiteId", Self::VT_LAUNCHSITEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchCountry", Self::VT_LAUNCHCOUNTRY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchProvider", Self::VT_LAUNCHPROVIDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchProviderCountry", Self::VT_LAUNCHPROVIDERCOUNTRY, false)?
     .visit_field::<bool>("commercialLaunch", Self::VT_COMMERCIALLAUNCH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchType", Self::VT_LAUNCHTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchCharacteristic", Self::VT_LAUNCHCHARACTERISTIC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchNumber", Self::VT_LAUNCHNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchDate", Self::VT_LAUNCHDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchDateRemarks", Self::VT_LAUNCHDATEREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("youtubeLaunchLink", Self::VT_YOUTUBELAUNCHLINK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("status", Self::VT_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("owner", Self::VT_OWNER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ownerCountry", Self::VT_OWNERCOUNTRY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operator", Self::VT_OPERATOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operatorCountry", Self::VT_OPERATORCOUNTRY, false)?
     .visit_field::<bool>("leased", Self::VT_LEASED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("orderDate", Self::VT_ORDERDATE, false)?
     .visit_field::<f64>("capabilityLost", Self::VT_CAPABILITYLOST, false)?
     .visit_field::<f64>("capacityLost", Self::VT_CAPACITYLOST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("primaryMissionGroup", Self::VT_PRIMARYMISSIONGROUP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("additionalMissionsGroups", Self::VT_ADDITIONALMISSIONSGROUPS, false)?
     .visit_field::<i32>("totalClaims", Self::VT_TOTALCLAIMS, false)?
     .visit_field::<i32>("totalInjuries", Self::VT_TOTALINJURIES, false)?
     .visit_field::<i32>("totalFatalities", Self::VT_TOTALFATALITIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nameAtLaunch", Self::VT_NAMEATLAUNCH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("busId", Self::VT_BUSID, false)?
     .visit_field::<f64>("currentAge", Self::VT_CURRENTAGE, false)?
     .visit_field::<f64>("lifeLost", Self::VT_LIFELOST, false)?
     .visit_field::<f64>("geoPosition", Self::VT_GEOPOSITION, false)?
     .visit_field::<f64>("insuranceLossesTotal", Self::VT_INSURANCELOSSESTOTAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchArranger", Self::VT_LAUNCHARRANGER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchArrangerCountry", Self::VT_LAUNCHARRANGERCOUNTRY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serialNumber", Self::VT_SERIALNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("programName", Self::VT_PROGRAMNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reusedHullName", Self::VT_REUSEDHULLNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dateOfObservation", Self::VT_DATEOFOBSERVATION, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<f64>("altitude", Self::VT_ALTITUDE, false)?
     .visit_field::<f64>("collisionRiskMM", Self::VT_COLLISIONRISKMM, false)?
     .visit_field::<f64>("collisionRiskCM", Self::VT_COLLISIONRISKCM, false)?
     .visit_field::<i32>("quantity", Self::VT_QUANTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reusableFlights", Self::VT_REUSABLEFLIGHTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("insuranceNotes", Self::VT_INSURANCENOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchNotes", Self::VT_LAUNCHNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<SeradataSpacecraftDetails_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("seradataSigIntPayload", Self::VT_SERADATASIGINTPAYLOAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("seradataRadarPayload", Self::VT_SERADATARADARPAYLOAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("seradataNavigation", Self::VT_SERADATANAVIGATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("seradataOpticalPayload", Self::VT_SERADATAOPTICALPAYLOAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("seradataEarlyWarning", Self::VT_SERADATAEARLYWARNING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("scientific", Self::VT_SCIENTIFIC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("seradataCommDetails", Self::VT_SERADATACOMMDETAILS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("onOrbit", Self::VT_ONORBIT, false)?
     .finish();
    Ok(())
  }
}
pub struct SeradataSpacecraftDetails_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub intlNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sector: Option<flatbuffers::WIPOffset<&'a str>>,
    pub apogee: f64,
    pub perigee: f64,
    pub period: f64,
    pub inclination: f64,
    pub primeManufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub stabilizer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub designLife: i32,
    pub expectedLife: i32,
    pub insuredAtLaunch: bool,
    pub launchMass: f64,
    pub dryMass: f64,
    pub catalogNumber: i32,
    pub totalPayloadPower: f64,
    pub constellation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub orbitCategory: Option<flatbuffers::WIPOffset<&'a str>>,
    pub orbitSubCategory: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchCost: f64,
    pub launchCostEstimated: bool,
    pub costEstimated: bool,
    pub newCost: f64,
    pub combinedNewCost: f64,
    pub combinedCostEstimated: bool,
    pub insuredValueAtLaunch: f64,
    pub insuredValueLaunchEstimated: bool,
    pub annualInsuredDepreciationFactor: f64,
    pub annualInsuredDepreciationFactorEstimated: bool,
    pub insurancePremiumAtLaunch: f64,
    pub insurancePremiumAtLaunchEstimated: bool,
    pub numHumans: i32,
    pub cubesatDispenserType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub massCategory: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchVehicleId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchProviderFlightNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchSiteName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchSiteId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchCountry: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchProvider: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchProviderCountry: Option<flatbuffers::WIPOffset<&'a str>>,
    pub commercialLaunch: bool,
    pub launchType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchCharacteristic: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchDateRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub youtubeLaunchLink: Option<flatbuffers::WIPOffset<&'a str>>,
    pub status: Option<flatbuffers::WIPOffset<&'a str>>,
    pub owner: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ownerCountry: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operator: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operatorCountry: Option<flatbuffers::WIPOffset<&'a str>>,
    pub leased: bool,
    pub orderDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub capabilityLost: f64,
    pub capacityLost: f64,
    pub primaryMissionGroup: Option<flatbuffers::WIPOffset<&'a str>>,
    pub additionalMissionsGroups: Option<flatbuffers::WIPOffset<&'a str>>,
    pub totalClaims: i32,
    pub totalInjuries: i32,
    pub totalFatalities: i32,
    pub nameAtLaunch: Option<flatbuffers::WIPOffset<&'a str>>,
    pub busId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub currentAge: f64,
    pub lifeLost: f64,
    pub geoPosition: f64,
    pub insuranceLossesTotal: f64,
    pub launchArranger: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchArrangerCountry: Option<flatbuffers::WIPOffset<&'a str>>,
    pub serialNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub programName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reusedHullName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dateOfObservation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lat: f64,
    pub lon: f64,
    pub altitude: f64,
    pub collisionRiskMM: f64,
    pub collisionRiskCM: f64,
    pub quantity: i32,
    pub reusableFlights: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub insuranceNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SeradataSpacecraftDetails_Full_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub seradataSigIntPayload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub seradataRadarPayload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub seradataNavigation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub seradataOpticalPayload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub seradataEarlyWarning: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub scientific: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub seradataCommDetails: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub onOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SeradataSpacecraftDetails_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    SeradataSpacecraftDetails_FullArgs {
      id: None,
      idOnOrbit: None,
      classificationMarking: None,
      name: None,
      description: None,
      intlNumber: None,
      sector: None,
      apogee: 0.0,
      perigee: 0.0,
      period: 0.0,
      inclination: 0.0,
      primeManufacturerOrgId: None,
      stabilizer: None,
      designLife: 0,
      expectedLife: 0,
      insuredAtLaunch: false,
      launchMass: 0.0,
      dryMass: 0.0,
      catalogNumber: 0,
      totalPayloadPower: 0.0,
      constellation: None,
      orbitCategory: None,
      orbitSubCategory: None,
      launchCost: 0.0,
      launchCostEstimated: false,
      costEstimated: false,
      newCost: 0.0,
      combinedNewCost: 0.0,
      combinedCostEstimated: false,
      insuredValueAtLaunch: 0.0,
      insuredValueLaunchEstimated: false,
      annualInsuredDepreciationFactor: 0.0,
      annualInsuredDepreciationFactorEstimated: false,
      insurancePremiumAtLaunch: 0.0,
      insurancePremiumAtLaunchEstimated: false,
      numHumans: 0,
      cubesatDispenserType: None,
      massCategory: None,
      launchId: None,
      launchVehicleId: None,
      launchProviderFlightNumber: None,
      launchSiteName: None,
      launchSiteId: None,
      launchCountry: None,
      launchProvider: None,
      launchProviderCountry: None,
      commercialLaunch: false,
      launchType: None,
      launchCharacteristic: None,
      launchNumber: None,
      launchDate: None,
      launchDateRemarks: None,
      youtubeLaunchLink: None,
      status: None,
      owner: None,
      ownerCountry: None,
      operator: None,
      operatorCountry: None,
      leased: false,
      orderDate: None,
      capabilityLost: 0.0,
      capacityLost: 0.0,
      primaryMissionGroup: None,
      additionalMissionsGroups: None,
      totalClaims: 0,
      totalInjuries: 0,
      totalFatalities: 0,
      nameAtLaunch: None,
      busId: None,
      currentAge: 0.0,
      lifeLost: 0.0,
      geoPosition: 0.0,
      insuranceLossesTotal: 0.0,
      launchArranger: None,
      launchArrangerCountry: None,
      serialNumber: None,
      programName: None,
      reusedHullName: None,
      dateOfObservation: None,
      lat: 0.0,
      lon: 0.0,
      altitude: 0.0,
      collisionRiskMM: 0.0,
      collisionRiskCM: 0.0,
      quantity: 0,
      reusableFlights: None,
      notes: None,
      insuranceNotes: None,
      launchNotes: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataSpacecraftDetails_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      seradataSigIntPayload: None,
      seradataRadarPayload: None,
      seradataNavigation: None,
      seradataOpticalPayload: None,
      seradataEarlyWarning: None,
      scientific: None,
      seradataCommDetails: None,
      onOrbit: None,
    }
  }
}

pub struct SeradataSpacecraftDetails_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SeradataSpacecraftDetails_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_intlNumber(&mut self, intlNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_INTLNUMBER, intlNumber);
  }
  #[inline]
  pub fn add_sector(&mut self, sector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SECTOR, sector);
  }
  #[inline]
  pub fn add_apogee(&mut self, apogee: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_APOGEE, apogee, 0.0);
  }
  #[inline]
  pub fn add_perigee(&mut self, perigee: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_PERIGEE, perigee, 0.0);
  }
  #[inline]
  pub fn add_period(&mut self, period: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_PERIOD, period, 0.0);
  }
  #[inline]
  pub fn add_inclination(&mut self, inclination: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_INCLINATION, inclination, 0.0);
  }
  #[inline]
  pub fn add_primeManufacturerOrgId(&mut self, primeManufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_PRIMEMANUFACTURERORGID, primeManufacturerOrgId);
  }
  #[inline]
  pub fn add_stabilizer(&mut self, stabilizer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_STABILIZER, stabilizer);
  }
  #[inline]
  pub fn add_designLife(&mut self, designLife: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_DESIGNLIFE, designLife, 0);
  }
  #[inline]
  pub fn add_expectedLife(&mut self, expectedLife: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_EXPECTEDLIFE, expectedLife, 0);
  }
  #[inline]
  pub fn add_insuredAtLaunch(&mut self, insuredAtLaunch: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_INSUREDATLAUNCH, insuredAtLaunch, false);
  }
  #[inline]
  pub fn add_launchMass(&mut self, launchMass: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_LAUNCHMASS, launchMass, 0.0);
  }
  #[inline]
  pub fn add_dryMass(&mut self, dryMass: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_DRYMASS, dryMass, 0.0);
  }
  #[inline]
  pub fn add_catalogNumber(&mut self, catalogNumber: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_CATALOGNUMBER, catalogNumber, 0);
  }
  #[inline]
  pub fn add_totalPayloadPower(&mut self, totalPayloadPower: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_TOTALPAYLOADPOWER, totalPayloadPower, 0.0);
  }
  #[inline]
  pub fn add_constellation(&mut self, constellation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_CONSTELLATION, constellation);
  }
  #[inline]
  pub fn add_orbitCategory(&mut self, orbitCategory: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ORBITCATEGORY, orbitCategory);
  }
  #[inline]
  pub fn add_orbitSubCategory(&mut self, orbitSubCategory: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ORBITSUBCATEGORY, orbitSubCategory);
  }
  #[inline]
  pub fn add_launchCost(&mut self, launchCost: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOST, launchCost, 0.0);
  }
  #[inline]
  pub fn add_launchCostEstimated(&mut self, launchCostEstimated: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOSTESTIMATED, launchCostEstimated, false);
  }
  #[inline]
  pub fn add_costEstimated(&mut self, costEstimated: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_COSTESTIMATED, costEstimated, false);
  }
  #[inline]
  pub fn add_newCost(&mut self, newCost: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_NEWCOST, newCost, 0.0);
  }
  #[inline]
  pub fn add_combinedNewCost(&mut self, combinedNewCost: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_COMBINEDNEWCOST, combinedNewCost, 0.0);
  }
  #[inline]
  pub fn add_combinedCostEstimated(&mut self, combinedCostEstimated: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_COMBINEDCOSTESTIMATED, combinedCostEstimated, false);
  }
  #[inline]
  pub fn add_insuredValueAtLaunch(&mut self, insuredValueAtLaunch: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_INSUREDVALUEATLAUNCH, insuredValueAtLaunch, 0.0);
  }
  #[inline]
  pub fn add_insuredValueLaunchEstimated(&mut self, insuredValueLaunchEstimated: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_INSUREDVALUELAUNCHESTIMATED, insuredValueLaunchEstimated, false);
  }
  #[inline]
  pub fn add_annualInsuredDepreciationFactor(&mut self, annualInsuredDepreciationFactor: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_ANNUALINSUREDDEPRECIATIONFACTOR, annualInsuredDepreciationFactor, 0.0);
  }
  #[inline]
  pub fn add_annualInsuredDepreciationFactorEstimated(&mut self, annualInsuredDepreciationFactorEstimated: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_ANNUALINSUREDDEPRECIATIONFACTORESTIMATED, annualInsuredDepreciationFactorEstimated, false);
  }
  #[inline]
  pub fn add_insurancePremiumAtLaunch(&mut self, insurancePremiumAtLaunch: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_INSURANCEPREMIUMATLAUNCH, insurancePremiumAtLaunch, 0.0);
  }
  #[inline]
  pub fn add_insurancePremiumAtLaunchEstimated(&mut self, insurancePremiumAtLaunchEstimated: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_INSURANCEPREMIUMATLAUNCHESTIMATED, insurancePremiumAtLaunchEstimated, false);
  }
  #[inline]
  pub fn add_numHumans(&mut self, numHumans: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_NUMHUMANS, numHumans, 0);
  }
  #[inline]
  pub fn add_cubesatDispenserType(&mut self, cubesatDispenserType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_CUBESATDISPENSERTYPE, cubesatDispenserType);
  }
  #[inline]
  pub fn add_massCategory(&mut self, massCategory: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_MASSCATEGORY, massCategory);
  }
  #[inline]
  pub fn add_launchId(&mut self, launchId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHID, launchId);
  }
  #[inline]
  pub fn add_launchVehicleId(&mut self, launchVehicleId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHVEHICLEID, launchVehicleId);
  }
  #[inline]
  pub fn add_launchProviderFlightNumber(&mut self, launchProviderFlightNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDERFLIGHTNUMBER, launchProviderFlightNumber);
  }
  #[inline]
  pub fn add_launchSiteName(&mut self, launchSiteName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHSITENAME, launchSiteName);
  }
  #[inline]
  pub fn add_launchSiteId(&mut self, launchSiteId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHSITEID, launchSiteId);
  }
  #[inline]
  pub fn add_launchCountry(&mut self, launchCountry: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHCOUNTRY, launchCountry);
  }
  #[inline]
  pub fn add_launchProvider(&mut self, launchProvider: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDER, launchProvider);
  }
  #[inline]
  pub fn add_launchProviderCountry(&mut self, launchProviderCountry: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHPROVIDERCOUNTRY, launchProviderCountry);
  }
  #[inline]
  pub fn add_commercialLaunch(&mut self, commercialLaunch: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_COMMERCIALLAUNCH, commercialLaunch, false);
  }
  #[inline]
  pub fn add_launchType(&mut self, launchType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHTYPE, launchType);
  }
  #[inline]
  pub fn add_launchCharacteristic(&mut self, launchCharacteristic: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHCHARACTERISTIC, launchCharacteristic);
  }
  #[inline]
  pub fn add_launchNumber(&mut self, launchNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHNUMBER, launchNumber);
  }
  #[inline]
  pub fn add_launchDate(&mut self, launchDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHDATE, launchDate);
  }
  #[inline]
  pub fn add_launchDateRemarks(&mut self, launchDateRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHDATEREMARKS, launchDateRemarks);
  }
  #[inline]
  pub fn add_youtubeLaunchLink(&mut self, youtubeLaunchLink: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_YOUTUBELAUNCHLINK, youtubeLaunchLink);
  }
  #[inline]
  pub fn add_status(&mut self, status: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_STATUS, status);
  }
  #[inline]
  pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_OWNER, owner);
  }
  #[inline]
  pub fn add_ownerCountry(&mut self, ownerCountry: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_OWNERCOUNTRY, ownerCountry);
  }
  #[inline]
  pub fn add_operator(&mut self, operator: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_OPERATOR, operator);
  }
  #[inline]
  pub fn add_operatorCountry(&mut self, operatorCountry: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_OPERATORCOUNTRY, operatorCountry);
  }
  #[inline]
  pub fn add_leased(&mut self, leased: bool) {
    self.fbb_.push_slot::<bool>(SeradataSpacecraftDetails_Full::VT_LEASED, leased, false);
  }
  #[inline]
  pub fn add_orderDate(&mut self, orderDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ORDERDATE, orderDate);
  }
  #[inline]
  pub fn add_capabilityLost(&mut self, capabilityLost: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_CAPABILITYLOST, capabilityLost, 0.0);
  }
  #[inline]
  pub fn add_capacityLost(&mut self, capacityLost: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_CAPACITYLOST, capacityLost, 0.0);
  }
  #[inline]
  pub fn add_primaryMissionGroup(&mut self, primaryMissionGroup: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_PRIMARYMISSIONGROUP, primaryMissionGroup);
  }
  #[inline]
  pub fn add_additionalMissionsGroups(&mut self, additionalMissionsGroups: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ADDITIONALMISSIONSGROUPS, additionalMissionsGroups);
  }
  #[inline]
  pub fn add_totalClaims(&mut self, totalClaims: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_TOTALCLAIMS, totalClaims, 0);
  }
  #[inline]
  pub fn add_totalInjuries(&mut self, totalInjuries: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_TOTALINJURIES, totalInjuries, 0);
  }
  #[inline]
  pub fn add_totalFatalities(&mut self, totalFatalities: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_TOTALFATALITIES, totalFatalities, 0);
  }
  #[inline]
  pub fn add_nameAtLaunch(&mut self, nameAtLaunch: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_NAMEATLAUNCH, nameAtLaunch);
  }
  #[inline]
  pub fn add_busId(&mut self, busId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_BUSID, busId);
  }
  #[inline]
  pub fn add_currentAge(&mut self, currentAge: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_CURRENTAGE, currentAge, 0.0);
  }
  #[inline]
  pub fn add_lifeLost(&mut self, lifeLost: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_LIFELOST, lifeLost, 0.0);
  }
  #[inline]
  pub fn add_geoPosition(&mut self, geoPosition: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_GEOPOSITION, geoPosition, 0.0);
  }
  #[inline]
  pub fn add_insuranceLossesTotal(&mut self, insuranceLossesTotal: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_INSURANCELOSSESTOTAL, insuranceLossesTotal, 0.0);
  }
  #[inline]
  pub fn add_launchArranger(&mut self, launchArranger: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHARRANGER, launchArranger);
  }
  #[inline]
  pub fn add_launchArrangerCountry(&mut self, launchArrangerCountry: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHARRANGERCOUNTRY, launchArrangerCountry);
  }
  #[inline]
  pub fn add_serialNumber(&mut self, serialNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SERIALNUMBER, serialNumber);
  }
  #[inline]
  pub fn add_programName(&mut self, programName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_PROGRAMNAME, programName);
  }
  #[inline]
  pub fn add_reusedHullName(&mut self, reusedHullName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_REUSEDHULLNAME, reusedHullName);
  }
  #[inline]
  pub fn add_dateOfObservation(&mut self, dateOfObservation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_DATEOFOBSERVATION, dateOfObservation);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_altitude(&mut self, altitude: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_ALTITUDE, altitude, 0.0);
  }
  #[inline]
  pub fn add_collisionRiskMM(&mut self, collisionRiskMM: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_COLLISIONRISKMM, collisionRiskMM, 0.0);
  }
  #[inline]
  pub fn add_collisionRiskCM(&mut self, collisionRiskCM: f64) {
    self.fbb_.push_slot::<f64>(SeradataSpacecraftDetails_Full::VT_COLLISIONRISKCM, collisionRiskCM, 0.0);
  }
  #[inline]
  pub fn add_quantity(&mut self, quantity: i32) {
    self.fbb_.push_slot::<i32>(SeradataSpacecraftDetails_Full::VT_QUANTITY, quantity, 0);
  }
  #[inline]
  pub fn add_reusableFlights(&mut self, reusableFlights: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_REUSABLEFLIGHTS, reusableFlights);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_insuranceNotes(&mut self, insuranceNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_INSURANCENOTES, insuranceNotes);
  }
  #[inline]
  pub fn add_launchNotes(&mut self, launchNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_LAUNCHNOTES, launchNotes);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SeradataSpacecraftDetails_Full_dataMode_Enum) {
    self.fbb_.push_slot::<SeradataSpacecraftDetails_Full_dataMode_Enum>(SeradataSpacecraftDetails_Full::VT_DATAMODE, dataMode, SeradataSpacecraftDetails_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_seradataSigIntPayload(&mut self, seradataSigIntPayload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SERADATASIGINTPAYLOAD, seradataSigIntPayload);
  }
  #[inline]
  pub fn add_seradataRadarPayload(&mut self, seradataRadarPayload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SERADATARADARPAYLOAD, seradataRadarPayload);
  }
  #[inline]
  pub fn add_seradataNavigation(&mut self, seradataNavigation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SERADATANAVIGATION, seradataNavigation);
  }
  #[inline]
  pub fn add_seradataOpticalPayload(&mut self, seradataOpticalPayload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SERADATAOPTICALPAYLOAD, seradataOpticalPayload);
  }
  #[inline]
  pub fn add_seradataEarlyWarning(&mut self, seradataEarlyWarning: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SERADATAEARLYWARNING, seradataEarlyWarning);
  }
  #[inline]
  pub fn add_scientific(&mut self, scientific: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SCIENTIFIC, scientific);
  }
  #[inline]
  pub fn add_seradataCommDetails(&mut self, seradataCommDetails: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_SERADATACOMMDETAILS, seradataCommDetails);
  }
  #[inline]
  pub fn add_onOrbit(&mut self, onOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSpacecraftDetails_Full::VT_ONORBIT, onOrbit);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SeradataSpacecraftDetails_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SeradataSpacecraftDetails_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SeradataSpacecraftDetails_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SeradataSpacecraftDetails_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SeradataSpacecraftDetails_Full");
      ds.field("id", &self.id());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("name", &self.name());
      ds.field("description", &self.description());
      ds.field("intlNumber", &self.intlNumber());
      ds.field("sector", &self.sector());
      ds.field("apogee", &self.apogee());
      ds.field("perigee", &self.perigee());
      ds.field("period", &self.period());
      ds.field("inclination", &self.inclination());
      ds.field("primeManufacturerOrgId", &self.primeManufacturerOrgId());
      ds.field("stabilizer", &self.stabilizer());
      ds.field("designLife", &self.designLife());
      ds.field("expectedLife", &self.expectedLife());
      ds.field("insuredAtLaunch", &self.insuredAtLaunch());
      ds.field("launchMass", &self.launchMass());
      ds.field("dryMass", &self.dryMass());
      ds.field("catalogNumber", &self.catalogNumber());
      ds.field("totalPayloadPower", &self.totalPayloadPower());
      ds.field("constellation", &self.constellation());
      ds.field("orbitCategory", &self.orbitCategory());
      ds.field("orbitSubCategory", &self.orbitSubCategory());
      ds.field("launchCost", &self.launchCost());
      ds.field("launchCostEstimated", &self.launchCostEstimated());
      ds.field("costEstimated", &self.costEstimated());
      ds.field("newCost", &self.newCost());
      ds.field("combinedNewCost", &self.combinedNewCost());
      ds.field("combinedCostEstimated", &self.combinedCostEstimated());
      ds.field("insuredValueAtLaunch", &self.insuredValueAtLaunch());
      ds.field("insuredValueLaunchEstimated", &self.insuredValueLaunchEstimated());
      ds.field("annualInsuredDepreciationFactor", &self.annualInsuredDepreciationFactor());
      ds.field("annualInsuredDepreciationFactorEstimated", &self.annualInsuredDepreciationFactorEstimated());
      ds.field("insurancePremiumAtLaunch", &self.insurancePremiumAtLaunch());
      ds.field("insurancePremiumAtLaunchEstimated", &self.insurancePremiumAtLaunchEstimated());
      ds.field("numHumans", &self.numHumans());
      ds.field("cubesatDispenserType", &self.cubesatDispenserType());
      ds.field("massCategory", &self.massCategory());
      ds.field("launchId", &self.launchId());
      ds.field("launchVehicleId", &self.launchVehicleId());
      ds.field("launchProviderFlightNumber", &self.launchProviderFlightNumber());
      ds.field("launchSiteName", &self.launchSiteName());
      ds.field("launchSiteId", &self.launchSiteId());
      ds.field("launchCountry", &self.launchCountry());
      ds.field("launchProvider", &self.launchProvider());
      ds.field("launchProviderCountry", &self.launchProviderCountry());
      ds.field("commercialLaunch", &self.commercialLaunch());
      ds.field("launchType", &self.launchType());
      ds.field("launchCharacteristic", &self.launchCharacteristic());
      ds.field("launchNumber", &self.launchNumber());
      ds.field("launchDate", &self.launchDate());
      ds.field("launchDateRemarks", &self.launchDateRemarks());
      ds.field("youtubeLaunchLink", &self.youtubeLaunchLink());
      ds.field("status", &self.status());
      ds.field("owner", &self.owner());
      ds.field("ownerCountry", &self.ownerCountry());
      ds.field("operator", &self.operator());
      ds.field("operatorCountry", &self.operatorCountry());
      ds.field("leased", &self.leased());
      ds.field("orderDate", &self.orderDate());
      ds.field("capabilityLost", &self.capabilityLost());
      ds.field("capacityLost", &self.capacityLost());
      ds.field("primaryMissionGroup", &self.primaryMissionGroup());
      ds.field("additionalMissionsGroups", &self.additionalMissionsGroups());
      ds.field("totalClaims", &self.totalClaims());
      ds.field("totalInjuries", &self.totalInjuries());
      ds.field("totalFatalities", &self.totalFatalities());
      ds.field("nameAtLaunch", &self.nameAtLaunch());
      ds.field("busId", &self.busId());
      ds.field("currentAge", &self.currentAge());
      ds.field("lifeLost", &self.lifeLost());
      ds.field("geoPosition", &self.geoPosition());
      ds.field("insuranceLossesTotal", &self.insuranceLossesTotal());
      ds.field("launchArranger", &self.launchArranger());
      ds.field("launchArrangerCountry", &self.launchArrangerCountry());
      ds.field("serialNumber", &self.serialNumber());
      ds.field("programName", &self.programName());
      ds.field("reusedHullName", &self.reusedHullName());
      ds.field("dateOfObservation", &self.dateOfObservation());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("altitude", &self.altitude());
      ds.field("collisionRiskMM", &self.collisionRiskMM());
      ds.field("collisionRiskCM", &self.collisionRiskCM());
      ds.field("quantity", &self.quantity());
      ds.field("reusableFlights", &self.reusableFlights());
      ds.field("notes", &self.notes());
      ds.field("insuranceNotes", &self.insuranceNotes());
      ds.field("launchNotes", &self.launchNotes());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("seradataSigIntPayload", &self.seradataSigIntPayload());
      ds.field("seradataRadarPayload", &self.seradataRadarPayload());
      ds.field("seradataNavigation", &self.seradataNavigation());
      ds.field("seradataOpticalPayload", &self.seradataOpticalPayload());
      ds.field("seradataEarlyWarning", &self.seradataEarlyWarning());
      ds.field("scientific", &self.scientific());
      ds.field("seradataCommDetails", &self.seradataCommDetails());
      ds.field("onOrbit", &self.onOrbit());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SeradataSpacecraftDetails_FullT {
  pub id: Option<String>,
  pub idOnOrbit: Option<String>,
  pub classificationMarking: Option<String>,
  pub name: Option<String>,
  pub description: Option<String>,
  pub intlNumber: Option<String>,
  pub sector: Option<String>,
  pub apogee: f64,
  pub perigee: f64,
  pub period: f64,
  pub inclination: f64,
  pub primeManufacturerOrgId: Option<String>,
  pub stabilizer: Option<String>,
  pub designLife: i32,
  pub expectedLife: i32,
  pub insuredAtLaunch: bool,
  pub launchMass: f64,
  pub dryMass: f64,
  pub catalogNumber: i32,
  pub totalPayloadPower: f64,
  pub constellation: Option<String>,
  pub orbitCategory: Option<String>,
  pub orbitSubCategory: Option<String>,
  pub launchCost: f64,
  pub launchCostEstimated: bool,
  pub costEstimated: bool,
  pub newCost: f64,
  pub combinedNewCost: f64,
  pub combinedCostEstimated: bool,
  pub insuredValueAtLaunch: f64,
  pub insuredValueLaunchEstimated: bool,
  pub annualInsuredDepreciationFactor: f64,
  pub annualInsuredDepreciationFactorEstimated: bool,
  pub insurancePremiumAtLaunch: f64,
  pub insurancePremiumAtLaunchEstimated: bool,
  pub numHumans: i32,
  pub cubesatDispenserType: Option<String>,
  pub massCategory: Option<String>,
  pub launchId: Option<String>,
  pub launchVehicleId: Option<String>,
  pub launchProviderFlightNumber: Option<String>,
  pub launchSiteName: Option<String>,
  pub launchSiteId: Option<String>,
  pub launchCountry: Option<String>,
  pub launchProvider: Option<String>,
  pub launchProviderCountry: Option<String>,
  pub commercialLaunch: bool,
  pub launchType: Option<String>,
  pub launchCharacteristic: Option<String>,
  pub launchNumber: Option<String>,
  pub launchDate: Option<String>,
  pub launchDateRemarks: Option<String>,
  pub youtubeLaunchLink: Option<String>,
  pub status: Option<String>,
  pub owner: Option<String>,
  pub ownerCountry: Option<String>,
  pub operator: Option<String>,
  pub operatorCountry: Option<String>,
  pub leased: bool,
  pub orderDate: Option<String>,
  pub capabilityLost: f64,
  pub capacityLost: f64,
  pub primaryMissionGroup: Option<String>,
  pub additionalMissionsGroups: Option<String>,
  pub totalClaims: i32,
  pub totalInjuries: i32,
  pub totalFatalities: i32,
  pub nameAtLaunch: Option<String>,
  pub busId: Option<String>,
  pub currentAge: f64,
  pub lifeLost: f64,
  pub geoPosition: f64,
  pub insuranceLossesTotal: f64,
  pub launchArranger: Option<String>,
  pub launchArrangerCountry: Option<String>,
  pub serialNumber: Option<String>,
  pub programName: Option<String>,
  pub reusedHullName: Option<String>,
  pub dateOfObservation: Option<String>,
  pub lat: f64,
  pub lon: f64,
  pub altitude: f64,
  pub collisionRiskMM: f64,
  pub collisionRiskCM: f64,
  pub quantity: i32,
  pub reusableFlights: Option<String>,
  pub notes: Option<String>,
  pub insuranceNotes: Option<String>,
  pub launchNotes: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: SeradataSpacecraftDetails_Full_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub seradataSigIntPayload: Option<Vec<String>>,
  pub seradataRadarPayload: Option<Vec<String>>,
  pub seradataNavigation: Option<Vec<String>>,
  pub seradataOpticalPayload: Option<Vec<String>>,
  pub seradataEarlyWarning: Option<Vec<String>>,
  pub scientific: Option<Vec<String>>,
  pub seradataCommDetails: Option<Vec<String>>,
  pub onOrbit: Option<String>,
}
impl Default for SeradataSpacecraftDetails_FullT {
  fn default() -> Self {
    Self {
      id: None,
      idOnOrbit: None,
      classificationMarking: None,
      name: None,
      description: None,
      intlNumber: None,
      sector: None,
      apogee: 0.0,
      perigee: 0.0,
      period: 0.0,
      inclination: 0.0,
      primeManufacturerOrgId: None,
      stabilizer: None,
      designLife: 0,
      expectedLife: 0,
      insuredAtLaunch: false,
      launchMass: 0.0,
      dryMass: 0.0,
      catalogNumber: 0,
      totalPayloadPower: 0.0,
      constellation: None,
      orbitCategory: None,
      orbitSubCategory: None,
      launchCost: 0.0,
      launchCostEstimated: false,
      costEstimated: false,
      newCost: 0.0,
      combinedNewCost: 0.0,
      combinedCostEstimated: false,
      insuredValueAtLaunch: 0.0,
      insuredValueLaunchEstimated: false,
      annualInsuredDepreciationFactor: 0.0,
      annualInsuredDepreciationFactorEstimated: false,
      insurancePremiumAtLaunch: 0.0,
      insurancePremiumAtLaunchEstimated: false,
      numHumans: 0,
      cubesatDispenserType: None,
      massCategory: None,
      launchId: None,
      launchVehicleId: None,
      launchProviderFlightNumber: None,
      launchSiteName: None,
      launchSiteId: None,
      launchCountry: None,
      launchProvider: None,
      launchProviderCountry: None,
      commercialLaunch: false,
      launchType: None,
      launchCharacteristic: None,
      launchNumber: None,
      launchDate: None,
      launchDateRemarks: None,
      youtubeLaunchLink: None,
      status: None,
      owner: None,
      ownerCountry: None,
      operator: None,
      operatorCountry: None,
      leased: false,
      orderDate: None,
      capabilityLost: 0.0,
      capacityLost: 0.0,
      primaryMissionGroup: None,
      additionalMissionsGroups: None,
      totalClaims: 0,
      totalInjuries: 0,
      totalFatalities: 0,
      nameAtLaunch: None,
      busId: None,
      currentAge: 0.0,
      lifeLost: 0.0,
      geoPosition: 0.0,
      insuranceLossesTotal: 0.0,
      launchArranger: None,
      launchArrangerCountry: None,
      serialNumber: None,
      programName: None,
      reusedHullName: None,
      dateOfObservation: None,
      lat: 0.0,
      lon: 0.0,
      altitude: 0.0,
      collisionRiskMM: 0.0,
      collisionRiskCM: 0.0,
      quantity: 0,
      reusableFlights: None,
      notes: None,
      insuranceNotes: None,
      launchNotes: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataSpacecraftDetails_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      seradataSigIntPayload: None,
      seradataRadarPayload: None,
      seradataNavigation: None,
      seradataOpticalPayload: None,
      seradataEarlyWarning: None,
      scientific: None,
      seradataCommDetails: None,
      onOrbit: None,
    }
  }
}
impl SeradataSpacecraftDetails_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SeradataSpacecraftDetails_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let intlNumber = self.intlNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sector = self.sector.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let apogee = self.apogee;
    let perigee = self.perigee;
    let period = self.period;
    let inclination = self.inclination;
    let primeManufacturerOrgId = self.primeManufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let stabilizer = self.stabilizer.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let designLife = self.designLife;
    let expectedLife = self.expectedLife;
    let insuredAtLaunch = self.insuredAtLaunch;
    let launchMass = self.launchMass;
    let dryMass = self.dryMass;
    let catalogNumber = self.catalogNumber;
    let totalPayloadPower = self.totalPayloadPower;
    let constellation = self.constellation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let orbitCategory = self.orbitCategory.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let orbitSubCategory = self.orbitSubCategory.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchCost = self.launchCost;
    let launchCostEstimated = self.launchCostEstimated;
    let costEstimated = self.costEstimated;
    let newCost = self.newCost;
    let combinedNewCost = self.combinedNewCost;
    let combinedCostEstimated = self.combinedCostEstimated;
    let insuredValueAtLaunch = self.insuredValueAtLaunch;
    let insuredValueLaunchEstimated = self.insuredValueLaunchEstimated;
    let annualInsuredDepreciationFactor = self.annualInsuredDepreciationFactor;
    let annualInsuredDepreciationFactorEstimated = self.annualInsuredDepreciationFactorEstimated;
    let insurancePremiumAtLaunch = self.insurancePremiumAtLaunch;
    let insurancePremiumAtLaunchEstimated = self.insurancePremiumAtLaunchEstimated;
    let numHumans = self.numHumans;
    let cubesatDispenserType = self.cubesatDispenserType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let massCategory = self.massCategory.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchId = self.launchId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchVehicleId = self.launchVehicleId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchProviderFlightNumber = self.launchProviderFlightNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchSiteName = self.launchSiteName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchSiteId = self.launchSiteId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchCountry = self.launchCountry.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchProvider = self.launchProvider.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchProviderCountry = self.launchProviderCountry.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let commercialLaunch = self.commercialLaunch;
    let launchType = self.launchType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchCharacteristic = self.launchCharacteristic.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchNumber = self.launchNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchDate = self.launchDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchDateRemarks = self.launchDateRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let youtubeLaunchLink = self.youtubeLaunchLink.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let status = self.status.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let owner = self.owner.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ownerCountry = self.ownerCountry.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let operator = self.operator.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let operatorCountry = self.operatorCountry.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let leased = self.leased;
    let orderDate = self.orderDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let capabilityLost = self.capabilityLost;
    let capacityLost = self.capacityLost;
    let primaryMissionGroup = self.primaryMissionGroup.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let additionalMissionsGroups = self.additionalMissionsGroups.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let totalClaims = self.totalClaims;
    let totalInjuries = self.totalInjuries;
    let totalFatalities = self.totalFatalities;
    let nameAtLaunch = self.nameAtLaunch.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let busId = self.busId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let currentAge = self.currentAge;
    let lifeLost = self.lifeLost;
    let geoPosition = self.geoPosition;
    let insuranceLossesTotal = self.insuranceLossesTotal;
    let launchArranger = self.launchArranger.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchArrangerCountry = self.launchArrangerCountry.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let serialNumber = self.serialNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let programName = self.programName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reusedHullName = self.reusedHullName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dateOfObservation = self.dateOfObservation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lat = self.lat;
    let lon = self.lon;
    let altitude = self.altitude;
    let collisionRiskMM = self.collisionRiskMM;
    let collisionRiskCM = self.collisionRiskCM;
    let quantity = self.quantity;
    let reusableFlights = self.reusableFlights.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let insuranceNotes = self.insuranceNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchNotes = self.launchNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let seradataSigIntPayload = self.seradataSigIntPayload.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let seradataRadarPayload = self.seradataRadarPayload.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let seradataNavigation = self.seradataNavigation.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let seradataOpticalPayload = self.seradataOpticalPayload.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let seradataEarlyWarning = self.seradataEarlyWarning.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let scientific = self.scientific.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let seradataCommDetails = self.seradataCommDetails.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let onOrbit = self.onOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SeradataSpacecraftDetails_Full::create(_fbb, &SeradataSpacecraftDetails_FullArgs{
      id,
      idOnOrbit,
      classificationMarking,
      name,
      description,
      intlNumber,
      sector,
      apogee,
      perigee,
      period,
      inclination,
      primeManufacturerOrgId,
      stabilizer,
      designLife,
      expectedLife,
      insuredAtLaunch,
      launchMass,
      dryMass,
      catalogNumber,
      totalPayloadPower,
      constellation,
      orbitCategory,
      orbitSubCategory,
      launchCost,
      launchCostEstimated,
      costEstimated,
      newCost,
      combinedNewCost,
      combinedCostEstimated,
      insuredValueAtLaunch,
      insuredValueLaunchEstimated,
      annualInsuredDepreciationFactor,
      annualInsuredDepreciationFactorEstimated,
      insurancePremiumAtLaunch,
      insurancePremiumAtLaunchEstimated,
      numHumans,
      cubesatDispenserType,
      massCategory,
      launchId,
      launchVehicleId,
      launchProviderFlightNumber,
      launchSiteName,
      launchSiteId,
      launchCountry,
      launchProvider,
      launchProviderCountry,
      commercialLaunch,
      launchType,
      launchCharacteristic,
      launchNumber,
      launchDate,
      launchDateRemarks,
      youtubeLaunchLink,
      status,
      owner,
      ownerCountry,
      operator,
      operatorCountry,
      leased,
      orderDate,
      capabilityLost,
      capacityLost,
      primaryMissionGroup,
      additionalMissionsGroups,
      totalClaims,
      totalInjuries,
      totalFatalities,
      nameAtLaunch,
      busId,
      currentAge,
      lifeLost,
      geoPosition,
      insuranceLossesTotal,
      launchArranger,
      launchArrangerCountry,
      serialNumber,
      programName,
      reusedHullName,
      dateOfObservation,
      lat,
      lon,
      altitude,
      collisionRiskMM,
      collisionRiskCM,
      quantity,
      reusableFlights,
      notes,
      insuranceNotes,
      launchNotes,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      seradataSigIntPayload,
      seradataRadarPayload,
      seradataNavigation,
      seradataOpticalPayload,
      seradataEarlyWarning,
      scientific,
      seradataCommDetails,
      onOrbit,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SeradataSpacecraftDetails_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_spacecraft_details_full_unchecked`.
pub fn root_as_seradata_spacecraft_details_full(buf: &[u8]) -> Result<SeradataSpacecraftDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SeradataSpacecraftDetails_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SeradataSpacecraftDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_seradata_spacecraft_details_full_unchecked`.
pub fn size_prefixed_root_as_seradata_spacecraft_details_full(buf: &[u8]) -> Result<SeradataSpacecraftDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SeradataSpacecraftDetails_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SeradataSpacecraftDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_spacecraft_details_full_unchecked`.
pub fn root_as_seradata_spacecraft_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataSpacecraftDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SeradataSpacecraftDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SeradataSpacecraftDetails_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_spacecraft_details_full_unchecked`.
pub fn size_prefixed_root_as_seradata_spacecraft_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataSpacecraftDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SeradataSpacecraftDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SeradataSpacecraftDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SeradataSpacecraftDetails_Full`.
pub unsafe fn root_as_seradata_spacecraft_details_full_unchecked(buf: &[u8]) -> SeradataSpacecraftDetails_Full {
  flatbuffers::root_unchecked::<SeradataSpacecraftDetails_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SeradataSpacecraftDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SeradataSpacecraftDetails_Full`.
pub unsafe fn size_prefixed_root_as_seradata_spacecraft_details_full_unchecked(buf: &[u8]) -> SeradataSpacecraftDetails_Full {
  flatbuffers::size_prefixed_root_unchecked::<SeradataSpacecraftDetails_Full>(buf)
}
pub const SERADATA_SPACECRAFT_DETAILS_FULL_IDENTIFIER: &str = "SERA";

#[inline]
pub fn seradata_spacecraft_details_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_SPACECRAFT_DETAILS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn seradata_spacecraft_details_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_SPACECRAFT_DETAILS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_seradata_spacecraft_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SeradataSpacecraftDetails_Full<'a>>) {
  fbb.finish(root, Some(SERADATA_SPACECRAFT_DETAILS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_seradata_spacecraft_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SeradataSpacecraftDetails_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(SERADATA_SPACECRAFT_DETAILS_FULL_IDENTIFIER));
}
