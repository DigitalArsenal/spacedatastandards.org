// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_IONO_OBSERVATION_POLARIZATION_ABRIDGED_DATA_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_IONO_OBSERVATION_POLARIZATION_ABRIDGED_DATA_ENUM: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_IONO_OBSERVATION_POLARIZATION_ABRIDGED_DATA_ENUM: [IonoObservationPolarization_Abridged_data_Enum; 2] = [
  IonoObservationPolarization_Abridged_data_Enum::X,
  IonoObservationPolarization_Abridged_data_Enum::O,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct IonoObservationPolarization_Abridged_data_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl IonoObservationPolarization_Abridged_data_Enum {
  /// No description available.
  pub const X: Self = Self(0);
  /// No description available.
  pub const O: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::X,
    Self::O,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::X => Some("X"),
      Self::O => Some("O"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for IonoObservationPolarization_Abridged_data_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for IonoObservationPolarization_Abridged_data_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for IonoObservationPolarization_Abridged_data_Enum {
    type Output = IonoObservationPolarization_Abridged_data_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for IonoObservationPolarization_Abridged_data_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for IonoObservationPolarization_Abridged_data_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for IonoObservationPolarization_Abridged_data_Enum {}
pub enum IonoObservationPolarization_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Multidimensional array of enums that identifies either classic/basic polarization discrimination “O” or “X” corresponding to ordinary or extraordinary polarizations, respectively. Exclude this enumeration if no classic/basic polarization discrimination is implemented. May accommodate other modes in addition to “O” and “X” with proper documentation in notes field.
pub struct IonoObservationPolarization_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationPolarization_Abridged<'a> {
  type Inner = IonoObservationPolarization_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationPolarization_Abridged<'a> {
  pub const VT_NOTES: flatbuffers::VOffsetT = 4;
  pub const VT_DIMENSIONS: flatbuffers::VOffsetT = 6;
  pub const VT_DIMENSIONNAME: flatbuffers::VOffsetT = 8;
  pub const VT_DATA: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationPolarization_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationPolarization_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationPolarization_Abridged<'bldr>> {
    let mut builder = IonoObservationPolarization_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.dimensionName { builder.add_dimensionName(x); }
    if let Some(x) = args.dimensions { builder.add_dimensions(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    builder.add_data(args.data);
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationPolarization_AbridgedT {
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let dimensions = self.dimensions().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let dimensionName = self.dimensionName().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let data = self.data();
    IonoObservationPolarization_AbridgedT {
      notes,
      dimensions,
      dimensionName,
      data,
    }
  }

  /// Notes for the polarization data.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationPolarization_Abridged::VT_NOTES, None)}
  }
  /// Array of integers for polarization dimensions.
  /// Example: /// Example: [1, 2]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dimensions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(IonoObservationPolarization_Abridged::VT_DIMENSIONS, None)}
  }
  /// Array of names for dimensions.
  /// Example: /// Example: ['NAME1', 'NAME2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dimensionName(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(IonoObservationPolarization_Abridged::VT_DIMENSIONNAME, None)}
  }
  /// Array of polarization data.
  /// Example: /// Example: [[[[[[['X', 'O']]]]]]]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn data(&self) -> IonoObservationPolarization_Abridged_data_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<IonoObservationPolarization_Abridged_data_Enum>(IonoObservationPolarization_Abridged::VT_DATA, Some(IonoObservationPolarization_Abridged_data_Enum::X)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IonoObservationPolarization_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("dimensions", Self::VT_DIMENSIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("dimensionName", Self::VT_DIMENSIONNAME, false)?
     .visit_field::<IonoObservationPolarization_Abridged_data_Enum>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationPolarization_AbridgedArgs<'a> {
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dimensions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub dimensionName: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub data: IonoObservationPolarization_Abridged_data_Enum,
}
impl<'a> Default for IonoObservationPolarization_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationPolarization_AbridgedArgs {
      notes: None,
      dimensions: None,
      dimensionName: None,
      data: IonoObservationPolarization_Abridged_data_Enum::X,
    }
  }
}

pub struct IonoObservationPolarization_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationPolarization_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationPolarization_Abridged::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_dimensions(&mut self, dimensions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationPolarization_Abridged::VT_DIMENSIONS, dimensions);
  }
  #[inline]
  pub fn add_dimensionName(&mut self, dimensionName: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationPolarization_Abridged::VT_DIMENSIONNAME, dimensionName);
  }
  #[inline]
  pub fn add_data(&mut self, data: IonoObservationPolarization_Abridged_data_Enum) {
    self.fbb_.push_slot::<IonoObservationPolarization_Abridged_data_Enum>(IonoObservationPolarization_Abridged::VT_DATA, data, IonoObservationPolarization_Abridged_data_Enum::X);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationPolarization_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationPolarization_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationPolarization_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationPolarization_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationPolarization_Abridged");
      ds.field("notes", &self.notes());
      ds.field("dimensions", &self.dimensions());
      ds.field("dimensionName", &self.dimensionName());
      ds.field("data", &self.data());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationPolarization_AbridgedT {
  pub notes: Option<String>,
  pub dimensions: Option<Vec<String>>,
  pub dimensionName: Option<Vec<String>>,
  pub data: IonoObservationPolarization_Abridged_data_Enum,
}
impl Default for IonoObservationPolarization_AbridgedT {
  fn default() -> Self {
    Self {
      notes: None,
      dimensions: None,
      dimensionName: None,
      data: IonoObservationPolarization_Abridged_data_Enum::X,
    }
  }
}
impl IonoObservationPolarization_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationPolarization_Abridged<'b>> {
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dimensions = self.dimensions.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let dimensionName = self.dimensionName.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let data = self.data;
    IonoObservationPolarization_Abridged::create(_fbb, &IonoObservationPolarization_AbridgedArgs{
      notes,
      dimensions,
      dimensionName,
      data,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationPolarization_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_polarization_abridged_unchecked`.
pub fn root_as_iono_observation_polarization_abridged(buf: &[u8]) -> Result<IonoObservationPolarization_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationPolarization_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationPolarization_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_polarization_abridged_unchecked`.
pub fn size_prefixed_root_as_iono_observation_polarization_abridged(buf: &[u8]) -> Result<IonoObservationPolarization_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationPolarization_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationPolarization_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_polarization_abridged_unchecked`.
pub fn root_as_iono_observation_polarization_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationPolarization_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationPolarization_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationPolarization_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_polarization_abridged_unchecked`.
pub fn size_prefixed_root_as_iono_observation_polarization_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationPolarization_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationPolarization_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationPolarization_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationPolarization_Abridged`.
pub unsafe fn root_as_iono_observation_polarization_abridged_unchecked(buf: &[u8]) -> IonoObservationPolarization_Abridged {
  flatbuffers::root_unchecked::<IonoObservationPolarization_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationPolarization_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationPolarization_Abridged`.
pub unsafe fn size_prefixed_root_as_iono_observation_polarization_abridged_unchecked(buf: &[u8]) -> IonoObservationPolarization_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationPolarization_Abridged>(buf)
}
pub const IONO_OBSERVATION_POLARIZATION_ABRIDGED_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_polarization_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_POLARIZATION_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_polarization_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_POLARIZATION_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_polarization_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationPolarization_Abridged<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_POLARIZATION_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_polarization_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationPolarization_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_POLARIZATION_ABRIDGED_IDENTIFIER));
}
