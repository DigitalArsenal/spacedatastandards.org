// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum EffectResponseActionsList_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// List of actions associated with this effect response.
pub struct EffectResponseActionsList_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EffectResponseActionsList_Full<'a> {
  type Inner = EffectResponseActionsList_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EffectResponseActionsList_Full<'a> {
  pub const VT_SUMMARY: flatbuffers::VOffsetT = 4;
  pub const VT_ACTIONID: flatbuffers::VOffsetT = 6;
  pub const VT_ACTIONSTARTTIME: flatbuffers::VOffsetT = 8;
  pub const VT_ACTIONENDTIME: flatbuffers::VOffsetT = 10;
  pub const VT_TOTSTARTTIME: flatbuffers::VOffsetT = 12;
  pub const VT_TOTENDTIME: flatbuffers::VOffsetT = 14;
  pub const VT_ACTIONACTORSRCTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_ACTIONACTORSRCID: flatbuffers::VOffsetT = 18;
  pub const VT_EFFECTOR: flatbuffers::VOffsetT = 20;
  pub const VT_TARGETSRCTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_TARGETSRCID: flatbuffers::VOffsetT = 24;
  pub const VT_ACTORINTERCEPTLAT: flatbuffers::VOffsetT = 26;
  pub const VT_ACTORINTERCEPTLON: flatbuffers::VOffsetT = 28;
  pub const VT_ACTORINTERCEPTALT: flatbuffers::VOffsetT = 30;
  pub const VT_WEAPONINTERCEPTLAT: flatbuffers::VOffsetT = 32;
  pub const VT_WEAPONINTERCEPTLON: flatbuffers::VOffsetT = 34;
  pub const VT_WEAPONINTERCEPTALT: flatbuffers::VOffsetT = 36;
  pub const VT_ACTIONMETRICS: flatbuffers::VOffsetT = 38;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EffectResponseActionsList_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EffectResponseActionsList_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<EffectResponseActionsList_Full<'bldr>> {
    let mut builder = EffectResponseActionsList_FullBuilder::new(_fbb);
    builder.add_weaponInterceptAlt(args.weaponInterceptAlt);
    builder.add_weaponInterceptLon(args.weaponInterceptLon);
    builder.add_weaponInterceptLat(args.weaponInterceptLat);
    builder.add_actorInterceptAlt(args.actorInterceptAlt);
    builder.add_actorInterceptLon(args.actorInterceptLon);
    builder.add_actorInterceptLat(args.actorInterceptLat);
    if let Some(x) = args.actionMetrics { builder.add_actionMetrics(x); }
    if let Some(x) = args.targetSrcId { builder.add_targetSrcId(x); }
    if let Some(x) = args.targetSrcType { builder.add_targetSrcType(x); }
    if let Some(x) = args.effector { builder.add_effector(x); }
    if let Some(x) = args.actionActorSrcId { builder.add_actionActorSrcId(x); }
    if let Some(x) = args.actionActorSrcType { builder.add_actionActorSrcType(x); }
    if let Some(x) = args.totEndTime { builder.add_totEndTime(x); }
    if let Some(x) = args.totStartTime { builder.add_totStartTime(x); }
    if let Some(x) = args.actionEndTime { builder.add_actionEndTime(x); }
    if let Some(x) = args.actionStartTime { builder.add_actionStartTime(x); }
    if let Some(x) = args.actionId { builder.add_actionId(x); }
    if let Some(x) = args.summary { builder.add_summary(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> EffectResponseActionsList_FullT {
    let summary = self.summary().map(|x| {
      x.to_string()
    });
    let actionId = self.actionId().map(|x| {
      x.to_string()
    });
    let actionStartTime = self.actionStartTime().map(|x| {
      x.to_string()
    });
    let actionEndTime = self.actionEndTime().map(|x| {
      x.to_string()
    });
    let totStartTime = self.totStartTime().map(|x| {
      x.to_string()
    });
    let totEndTime = self.totEndTime().map(|x| {
      x.to_string()
    });
    let actionActorSrcType = self.actionActorSrcType().map(|x| {
      x.to_string()
    });
    let actionActorSrcId = self.actionActorSrcId().map(|x| {
      x.to_string()
    });
    let effector = self.effector().map(|x| {
      x.to_string()
    });
    let targetSrcType = self.targetSrcType().map(|x| {
      x.to_string()
    });
    let targetSrcId = self.targetSrcId().map(|x| {
      x.to_string()
    });
    let actorInterceptLat = self.actorInterceptLat();
    let actorInterceptLon = self.actorInterceptLon();
    let actorInterceptAlt = self.actorInterceptAlt();
    let weaponInterceptLat = self.weaponInterceptLat();
    let weaponInterceptLon = self.weaponInterceptLon();
    let weaponInterceptAlt = self.weaponInterceptAlt();
    let actionMetrics = self.actionMetrics().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    EffectResponseActionsList_FullT {
      summary,
      actionId,
      actionStartTime,
      actionEndTime,
      totStartTime,
      totEndTime,
      actionActorSrcType,
      actionActorSrcId,
      effector,
      targetSrcType,
      targetSrcId,
      actorInterceptLat,
      actorInterceptLon,
      actorInterceptAlt,
      weaponInterceptLat,
      weaponInterceptLon,
      weaponInterceptAlt,
      actionMetrics,
    }
  }

  /// A summary string describing different aspects of the action.
  /// Example: /// Example: Example summary
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn summary(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_SUMMARY, None)}
  }
  /// Identifier of this action.
  /// Example: /// Example: ACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn actionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_ACTIONID, None)}
  }
  /// The desired start time of this task, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actionStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_ACTIONSTARTTIME, None)}
  }
  /// The desired end time of this task, in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actionEndTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_ACTIONENDTIME, None)}
  }
  /// The start time of the asset TOT (time over target), in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_TOTSTARTTIME, None)}
  }
  /// The end time of the asset TOT (time over target), in ISO8601 UTC format.
  /// Example: /// Example: 2021-01-01T00:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn totEndTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_TOTENDTIME, None)}
  }
  /// The source type of the asset/actor identifier (AIRCRAFT, LANDCRAFT, SEACRAFT, TRACK).
  /// Example: /// Example: AIRCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn actionActorSrcType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_ACTIONACTORSRCTYPE, None)}
  }
  /// The record ID, depending on the type identified in actorSrcType, of the requested asset/actor.
  /// Example: /// Example: ACTIONACTORSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn actionActorSrcId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_ACTIONACTORSRCID, None)}
  }
  /// The type of munition or sensor used by this asset/actor.
  /// Example: /// Example: SENSOR1
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn effector(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_EFFECTOR, None)}
  }
  /// The source type of the targetId identifier (POI, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn targetSrcType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_TARGETSRCTYPE, None)}
  }
  /// The POI or TRACK ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: TARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn targetSrcId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseActionsList_Full::VT_TARGETSRCID, None)}
  }
  /// The WGS-84 latitude of the asset/actor location at weapon launch, in degrees.  -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actorInterceptLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseActionsList_Full::VT_ACTORINTERCEPTLAT, Some(0.0)).unwrap()}
  }
  /// The WGS-84 longitude of the asset/actor location at weapon launch, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actorInterceptLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseActionsList_Full::VT_ACTORINTERCEPTLON, Some(0.0)).unwrap()}
  }
  /// The WGS-84 altitude of the asset/actor location at weapon launch, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actorInterceptAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseActionsList_Full::VT_ACTORINTERCEPTALT, Some(0.0)).unwrap()}
  }
  /// The WGS-84 latitude of the weapon destination location, in degrees.  -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn weaponInterceptLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseActionsList_Full::VT_WEAPONINTERCEPTLAT, Some(0.0)).unwrap()}
  }
  /// The WGS-84 longitude of the weapon destination location, in degrees.  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn weaponInterceptLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseActionsList_Full::VT_WEAPONINTERCEPTLON, Some(0.0)).unwrap()}
  }
  /// The WGS-84 altitude of the weapon destination location, in meters.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn weaponInterceptAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseActionsList_Full::VT_WEAPONINTERCEPTALT, Some(0.0)).unwrap()}
  }
  /// List of metrics associated with this action.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actionMetrics(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EffectResponseActionsList_Full::VT_ACTIONMETRICS, None)}
  }
}

impl flatbuffers::Verifiable for EffectResponseActionsList_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("summary", Self::VT_SUMMARY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actionId", Self::VT_ACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actionStartTime", Self::VT_ACTIONSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actionEndTime", Self::VT_ACTIONENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("totStartTime", Self::VT_TOTSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("totEndTime", Self::VT_TOTENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actionActorSrcType", Self::VT_ACTIONACTORSRCTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actionActorSrcId", Self::VT_ACTIONACTORSRCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("effector", Self::VT_EFFECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("targetSrcType", Self::VT_TARGETSRCTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("targetSrcId", Self::VT_TARGETSRCID, false)?
     .visit_field::<f64>("actorInterceptLat", Self::VT_ACTORINTERCEPTLAT, false)?
     .visit_field::<f64>("actorInterceptLon", Self::VT_ACTORINTERCEPTLON, false)?
     .visit_field::<f64>("actorInterceptAlt", Self::VT_ACTORINTERCEPTALT, false)?
     .visit_field::<f64>("weaponInterceptLat", Self::VT_WEAPONINTERCEPTLAT, false)?
     .visit_field::<f64>("weaponInterceptLon", Self::VT_WEAPONINTERCEPTLON, false)?
     .visit_field::<f64>("weaponInterceptAlt", Self::VT_WEAPONINTERCEPTALT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("actionMetrics", Self::VT_ACTIONMETRICS, false)?
     .finish();
    Ok(())
  }
}
pub struct EffectResponseActionsList_FullArgs<'a> {
    pub summary: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actionStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actionEndTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub totStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub totEndTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actionActorSrcType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actionActorSrcId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub effector: Option<flatbuffers::WIPOffset<&'a str>>,
    pub targetSrcType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub targetSrcId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actorInterceptLat: f64,
    pub actorInterceptLon: f64,
    pub actorInterceptAlt: f64,
    pub weaponInterceptLat: f64,
    pub weaponInterceptLon: f64,
    pub weaponInterceptAlt: f64,
    pub actionMetrics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for EffectResponseActionsList_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    EffectResponseActionsList_FullArgs {
      summary: None,
      actionId: None,
      actionStartTime: None,
      actionEndTime: None,
      totStartTime: None,
      totEndTime: None,
      actionActorSrcType: None,
      actionActorSrcId: None,
      effector: None,
      targetSrcType: None,
      targetSrcId: None,
      actorInterceptLat: 0.0,
      actorInterceptLon: 0.0,
      actorInterceptAlt: 0.0,
      weaponInterceptLat: 0.0,
      weaponInterceptLon: 0.0,
      weaponInterceptAlt: 0.0,
      actionMetrics: None,
    }
  }
}

pub struct EffectResponseActionsList_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EffectResponseActionsList_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_summary(&mut self, summary: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_SUMMARY, summary);
  }
  #[inline]
  pub fn add_actionId(&mut self, actionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_ACTIONID, actionId);
  }
  #[inline]
  pub fn add_actionStartTime(&mut self, actionStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_ACTIONSTARTTIME, actionStartTime);
  }
  #[inline]
  pub fn add_actionEndTime(&mut self, actionEndTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_ACTIONENDTIME, actionEndTime);
  }
  #[inline]
  pub fn add_totStartTime(&mut self, totStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_TOTSTARTTIME, totStartTime);
  }
  #[inline]
  pub fn add_totEndTime(&mut self, totEndTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_TOTENDTIME, totEndTime);
  }
  #[inline]
  pub fn add_actionActorSrcType(&mut self, actionActorSrcType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_ACTIONACTORSRCTYPE, actionActorSrcType);
  }
  #[inline]
  pub fn add_actionActorSrcId(&mut self, actionActorSrcId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_ACTIONACTORSRCID, actionActorSrcId);
  }
  #[inline]
  pub fn add_effector(&mut self, effector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_EFFECTOR, effector);
  }
  #[inline]
  pub fn add_targetSrcType(&mut self, targetSrcType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_TARGETSRCTYPE, targetSrcType);
  }
  #[inline]
  pub fn add_targetSrcId(&mut self, targetSrcId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_TARGETSRCID, targetSrcId);
  }
  #[inline]
  pub fn add_actorInterceptLat(&mut self, actorInterceptLat: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseActionsList_Full::VT_ACTORINTERCEPTLAT, actorInterceptLat, 0.0);
  }
  #[inline]
  pub fn add_actorInterceptLon(&mut self, actorInterceptLon: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseActionsList_Full::VT_ACTORINTERCEPTLON, actorInterceptLon, 0.0);
  }
  #[inline]
  pub fn add_actorInterceptAlt(&mut self, actorInterceptAlt: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseActionsList_Full::VT_ACTORINTERCEPTALT, actorInterceptAlt, 0.0);
  }
  #[inline]
  pub fn add_weaponInterceptLat(&mut self, weaponInterceptLat: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseActionsList_Full::VT_WEAPONINTERCEPTLAT, weaponInterceptLat, 0.0);
  }
  #[inline]
  pub fn add_weaponInterceptLon(&mut self, weaponInterceptLon: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseActionsList_Full::VT_WEAPONINTERCEPTLON, weaponInterceptLon, 0.0);
  }
  #[inline]
  pub fn add_weaponInterceptAlt(&mut self, weaponInterceptAlt: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseActionsList_Full::VT_WEAPONINTERCEPTALT, weaponInterceptAlt, 0.0);
  }
  #[inline]
  pub fn add_actionMetrics(&mut self, actionMetrics: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseActionsList_Full::VT_ACTIONMETRICS, actionMetrics);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EffectResponseActionsList_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EffectResponseActionsList_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EffectResponseActionsList_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EffectResponseActionsList_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EffectResponseActionsList_Full");
      ds.field("summary", &self.summary());
      ds.field("actionId", &self.actionId());
      ds.field("actionStartTime", &self.actionStartTime());
      ds.field("actionEndTime", &self.actionEndTime());
      ds.field("totStartTime", &self.totStartTime());
      ds.field("totEndTime", &self.totEndTime());
      ds.field("actionActorSrcType", &self.actionActorSrcType());
      ds.field("actionActorSrcId", &self.actionActorSrcId());
      ds.field("effector", &self.effector());
      ds.field("targetSrcType", &self.targetSrcType());
      ds.field("targetSrcId", &self.targetSrcId());
      ds.field("actorInterceptLat", &self.actorInterceptLat());
      ds.field("actorInterceptLon", &self.actorInterceptLon());
      ds.field("actorInterceptAlt", &self.actorInterceptAlt());
      ds.field("weaponInterceptLat", &self.weaponInterceptLat());
      ds.field("weaponInterceptLon", &self.weaponInterceptLon());
      ds.field("weaponInterceptAlt", &self.weaponInterceptAlt());
      ds.field("actionMetrics", &self.actionMetrics());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EffectResponseActionsList_FullT {
  pub summary: Option<String>,
  pub actionId: Option<String>,
  pub actionStartTime: Option<String>,
  pub actionEndTime: Option<String>,
  pub totStartTime: Option<String>,
  pub totEndTime: Option<String>,
  pub actionActorSrcType: Option<String>,
  pub actionActorSrcId: Option<String>,
  pub effector: Option<String>,
  pub targetSrcType: Option<String>,
  pub targetSrcId: Option<String>,
  pub actorInterceptLat: f64,
  pub actorInterceptLon: f64,
  pub actorInterceptAlt: f64,
  pub weaponInterceptLat: f64,
  pub weaponInterceptLon: f64,
  pub weaponInterceptAlt: f64,
  pub actionMetrics: Option<Vec<String>>,
}
impl Default for EffectResponseActionsList_FullT {
  fn default() -> Self {
    Self {
      summary: None,
      actionId: None,
      actionStartTime: None,
      actionEndTime: None,
      totStartTime: None,
      totEndTime: None,
      actionActorSrcType: None,
      actionActorSrcId: None,
      effector: None,
      targetSrcType: None,
      targetSrcId: None,
      actorInterceptLat: 0.0,
      actorInterceptLon: 0.0,
      actorInterceptAlt: 0.0,
      weaponInterceptLat: 0.0,
      weaponInterceptLon: 0.0,
      weaponInterceptAlt: 0.0,
      actionMetrics: None,
    }
  }
}
impl EffectResponseActionsList_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EffectResponseActionsList_Full<'b>> {
    let summary = self.summary.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actionId = self.actionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actionStartTime = self.actionStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actionEndTime = self.actionEndTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let totStartTime = self.totStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let totEndTime = self.totEndTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actionActorSrcType = self.actionActorSrcType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actionActorSrcId = self.actionActorSrcId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let effector = self.effector.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let targetSrcType = self.targetSrcType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let targetSrcId = self.targetSrcId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actorInterceptLat = self.actorInterceptLat;
    let actorInterceptLon = self.actorInterceptLon;
    let actorInterceptAlt = self.actorInterceptAlt;
    let weaponInterceptLat = self.weaponInterceptLat;
    let weaponInterceptLon = self.weaponInterceptLon;
    let weaponInterceptAlt = self.weaponInterceptAlt;
    let actionMetrics = self.actionMetrics.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    EffectResponseActionsList_Full::create(_fbb, &EffectResponseActionsList_FullArgs{
      summary,
      actionId,
      actionStartTime,
      actionEndTime,
      totStartTime,
      totEndTime,
      actionActorSrcType,
      actionActorSrcId,
      effector,
      targetSrcType,
      targetSrcId,
      actorInterceptLat,
      actorInterceptLon,
      actorInterceptAlt,
      weaponInterceptLat,
      weaponInterceptLon,
      weaponInterceptAlt,
      actionMetrics,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EffectResponseActionsList_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_actions_list_full_unchecked`.
pub fn root_as_effect_response_actions_list_full(buf: &[u8]) -> Result<EffectResponseActionsList_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EffectResponseActionsList_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EffectResponseActionsList_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_effect_response_actions_list_full_unchecked`.
pub fn size_prefixed_root_as_effect_response_actions_list_full(buf: &[u8]) -> Result<EffectResponseActionsList_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EffectResponseActionsList_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EffectResponseActionsList_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_actions_list_full_unchecked`.
pub fn root_as_effect_response_actions_list_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectResponseActionsList_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EffectResponseActionsList_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EffectResponseActionsList_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_actions_list_full_unchecked`.
pub fn size_prefixed_root_as_effect_response_actions_list_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectResponseActionsList_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EffectResponseActionsList_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EffectResponseActionsList_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EffectResponseActionsList_Full`.
pub unsafe fn root_as_effect_response_actions_list_full_unchecked(buf: &[u8]) -> EffectResponseActionsList_Full {
  flatbuffers::root_unchecked::<EffectResponseActionsList_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EffectResponseActionsList_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EffectResponseActionsList_Full`.
pub unsafe fn size_prefixed_root_as_effect_response_actions_list_full_unchecked(buf: &[u8]) -> EffectResponseActionsList_Full {
  flatbuffers::size_prefixed_root_unchecked::<EffectResponseActionsList_Full>(buf)
}
pub const EFFECT_RESPONSE_ACTIONS_LIST_FULL_IDENTIFIER: &str = "EFFE";

#[inline]
pub fn effect_response_actions_list_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_RESPONSE_ACTIONS_LIST_FULL_IDENTIFIER, false)
}

#[inline]
pub fn effect_response_actions_list_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_RESPONSE_ACTIONS_LIST_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_effect_response_actions_list_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EffectResponseActionsList_Full<'a>>) {
  fbb.finish(root, Some(EFFECT_RESPONSE_ACTIONS_LIST_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_effect_response_actions_list_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EffectResponseActionsList_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(EFFECT_RESPONSE_ACTIONS_LIST_FULL_IDENTIFIER));
}
