// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum OnorbitSignature_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Contains a list of common information across both Radar and EO observations.
pub struct OnorbitSignature_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OnorbitSignature_Abridged<'a> {
  type Inner = OnorbitSignature_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OnorbitSignature_Abridged<'a> {
  pub const VT_EOOBSERVATION: flatbuffers::VOffsetT = 4;
  pub const VT_RADAROBSERVATION: flatbuffers::VOffsetT = 6;
  pub const VT_RFOBSERVATION: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OnorbitSignature_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OnorbitSignature_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<OnorbitSignature_Abridged<'bldr>> {
    let mut builder = OnorbitSignature_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.rfObservation { builder.add_rfObservation(x); }
    if let Some(x) = args.radarObservation { builder.add_radarObservation(x); }
    if let Some(x) = args.eoObservation { builder.add_eoObservation(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> OnorbitSignature_AbridgedT {
    let eoObservation = self.eoObservation().map(|x| {
      x.to_string()
    });
    let radarObservation = self.radarObservation().map(|x| {
      x.to_string()
    });
    let rfObservation = self.rfObservation().map(|x| {
      x.to_string()
    });
    OnorbitSignature_AbridgedT {
      eoObservation,
      radarObservation,
      rfObservation,
    }
  }

  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eoObservation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitSignature_Abridged::VT_EOOBSERVATION, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn radarObservation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitSignature_Abridged::VT_RADAROBSERVATION, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rfObservation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnorbitSignature_Abridged::VT_RFOBSERVATION, None)}
  }
}

impl flatbuffers::Verifiable for OnorbitSignature_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eoObservation", Self::VT_EOOBSERVATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("radarObservation", Self::VT_RADAROBSERVATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rfObservation", Self::VT_RFOBSERVATION, false)?
     .finish();
    Ok(())
  }
}
pub struct OnorbitSignature_AbridgedArgs<'a> {
    pub eoObservation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub radarObservation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rfObservation: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for OnorbitSignature_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    OnorbitSignature_AbridgedArgs {
      eoObservation: None,
      radarObservation: None,
      rfObservation: None,
    }
  }
}

pub struct OnorbitSignature_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OnorbitSignature_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_eoObservation(&mut self, eoObservation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitSignature_Abridged::VT_EOOBSERVATION, eoObservation);
  }
  #[inline]
  pub fn add_radarObservation(&mut self, radarObservation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitSignature_Abridged::VT_RADAROBSERVATION, radarObservation);
  }
  #[inline]
  pub fn add_rfObservation(&mut self, rfObservation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnorbitSignature_Abridged::VT_RFOBSERVATION, rfObservation);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OnorbitSignature_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OnorbitSignature_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OnorbitSignature_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OnorbitSignature_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OnorbitSignature_Abridged");
      ds.field("eoObservation", &self.eoObservation());
      ds.field("radarObservation", &self.radarObservation());
      ds.field("rfObservation", &self.rfObservation());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OnorbitSignature_AbridgedT {
  pub eoObservation: Option<String>,
  pub radarObservation: Option<String>,
  pub rfObservation: Option<String>,
}
impl Default for OnorbitSignature_AbridgedT {
  fn default() -> Self {
    Self {
      eoObservation: None,
      radarObservation: None,
      rfObservation: None,
    }
  }
}
impl OnorbitSignature_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OnorbitSignature_Abridged<'b>> {
    let eoObservation = self.eoObservation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let radarObservation = self.radarObservation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rfObservation = self.rfObservation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    OnorbitSignature_Abridged::create(_fbb, &OnorbitSignature_AbridgedArgs{
      eoObservation,
      radarObservation,
      rfObservation,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OnorbitSignature_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_signature_abridged_unchecked`.
pub fn root_as_onorbit_signature_abridged(buf: &[u8]) -> Result<OnorbitSignature_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OnorbitSignature_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OnorbitSignature_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_onorbit_signature_abridged_unchecked`.
pub fn size_prefixed_root_as_onorbit_signature_abridged(buf: &[u8]) -> Result<OnorbitSignature_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OnorbitSignature_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OnorbitSignature_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_signature_abridged_unchecked`.
pub fn root_as_onorbit_signature_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnorbitSignature_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OnorbitSignature_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OnorbitSignature_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_signature_abridged_unchecked`.
pub fn size_prefixed_root_as_onorbit_signature_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnorbitSignature_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OnorbitSignature_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OnorbitSignature_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OnorbitSignature_Abridged`.
pub unsafe fn root_as_onorbit_signature_abridged_unchecked(buf: &[u8]) -> OnorbitSignature_Abridged {
  flatbuffers::root_unchecked::<OnorbitSignature_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OnorbitSignature_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OnorbitSignature_Abridged`.
pub unsafe fn size_prefixed_root_as_onorbit_signature_abridged_unchecked(buf: &[u8]) -> OnorbitSignature_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<OnorbitSignature_Abridged>(buf)
}
pub const ONORBIT_SIGNATURE_ABRIDGED_IDENTIFIER: &str = "ONOR";

#[inline]
pub fn onorbit_signature_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_SIGNATURE_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn onorbit_signature_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_SIGNATURE_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_onorbit_signature_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OnorbitSignature_Abridged<'a>>) {
  fbb.finish(root, Some(ONORBIT_SIGNATURE_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_onorbit_signature_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OnorbitSignature_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(ONORBIT_SIGNATURE_ABRIDGED_IDENTIFIER));
}
