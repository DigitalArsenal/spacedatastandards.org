// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SITE_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SITE_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SITE_ABRIDGED_DATA_MODE_ENUM: [Site_Abridged_dataMode_Enum; 4] = [
  Site_Abridged_dataMode_Enum::REAL,
  Site_Abridged_dataMode_Enum::TEST,
  Site_Abridged_dataMode_Enum::SIMULATED,
  Site_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Site_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Site_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Site_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Site_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Site_Abridged_dataMode_Enum {
    type Output = Site_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Site_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Site_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Site_Abridged_dataMode_Enum {}
pub enum Site_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Properties and characteristics of a site entity, such as an airbase, airfield, naval station, etc.
pub struct Site_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Site_Abridged<'a> {
  type Inner = Site_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Site_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDENTITY: flatbuffers::VOffsetT = 6;
  pub const VT_IDPARENTSITE: flatbuffers::VOffsetT = 8;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 10;
  pub const VT_ORIGSITEID: flatbuffers::VOffsetT = 12;
  pub const VT_ORIGLZID: flatbuffers::VOffsetT = 14;
  pub const VT_PIN: flatbuffers::VOffsetT = 16;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 18;
  pub const VT_USAGE: flatbuffers::VOffsetT = 20;
  pub const VT_LZUSAGE: flatbuffers::VOffsetT = 22;
  pub const VT_NAME: flatbuffers::VOffsetT = 24;
  pub const VT_COORDDATUM: flatbuffers::VOffsetT = 26;
  pub const VT_COORD: flatbuffers::VOffsetT = 28;
  pub const VT_COORDDERIVACC: flatbuffers::VOffsetT = 30;
  pub const VT_OSUFFIX: flatbuffers::VOffsetT = 32;
  pub const VT_IATA: flatbuffers::VOffsetT = 34;
  pub const VT_ICAO: flatbuffers::VOffsetT = 36;
  pub const VT_FAA: flatbuffers::VOffsetT = 38;
  pub const VT_AIRDEFAREA: flatbuffers::VOffsetT = 40;
  pub const VT_UTM: flatbuffers::VOffsetT = 42;
  pub const VT_MILGRIDSYS: flatbuffers::VOffsetT = 44;
  pub const VT_MILGRID: flatbuffers::VOffsetT = 46;
  pub const VT_CATCODE: flatbuffers::VOffsetT = 48;
  pub const VT_CATTEXT: flatbuffers::VOffsetT = 50;
  pub const VT_WAC: flatbuffers::VOffsetT = 52;
  pub const VT_POLSUBDIV: flatbuffers::VOffsetT = 54;
  pub const VT_GEOAREA: flatbuffers::VOffsetT = 56;
  pub const VT_GEOIDALMSLSEP: flatbuffers::VOffsetT = 58;
  pub const VT_ALLEGIANCE: flatbuffers::VOffsetT = 60;
  pub const VT_ALTALLEGIANCE: flatbuffers::VOffsetT = 62;
  pub const VT_CLASSRATING: flatbuffers::VOffsetT = 64;
  pub const VT_FPA: flatbuffers::VOffsetT = 66;
  pub const VT_BENUMBER: flatbuffers::VOffsetT = 68;
  pub const VT_RUNWAYS: flatbuffers::VOffsetT = 70;
  pub const VT_MAXRUNWAYLENGTH: flatbuffers::VOffsetT = 72;
  pub const VT_CONDITION: flatbuffers::VOffsetT = 74;
  pub const VT_CONDITIONAVAIL: flatbuffers::VOffsetT = 76;
  pub const VT_OPERSTATUS: flatbuffers::VOffsetT = 78;
  pub const VT_GRADE: flatbuffers::VOffsetT = 80;
  pub const VT_ACTIVITY: flatbuffers::VOffsetT = 82;
  pub const VT_FUNCTPRIMARY: flatbuffers::VOffsetT = 84;
  pub const VT_MSNPRIMARY: flatbuffers::VOffsetT = 86;
  pub const VT_MSNPRIMARYSPEC: flatbuffers::VOffsetT = 88;
  pub const VT_NUCCAP: flatbuffers::VOffsetT = 90;
  pub const VT_IDENT: flatbuffers::VOffsetT = 92;
  pub const VT_ELEVMSL: flatbuffers::VOffsetT = 94;
  pub const VT_ELEVMSLCONFLVL: flatbuffers::VOffsetT = 96;
  pub const VT_ELEVMSLDERIVACC: flatbuffers::VOffsetT = 98;
  pub const VT_VEGHT: flatbuffers::VOffsetT = 100;
  pub const VT_VEGTYPE: flatbuffers::VOffsetT = 102;
  pub const VT_POPAREA: flatbuffers::VOffsetT = 104;
  pub const VT_POPAREAPROX: flatbuffers::VOffsetT = 106;
  pub const VT_NOTES: flatbuffers::VOffsetT = 108;
  pub const VT_RESPROD: flatbuffers::VOffsetT = 110;
  pub const VT_EVAL: flatbuffers::VOffsetT = 112;
  pub const VT_REVIEWDATE: flatbuffers::VOffsetT = 114;
  pub const VT_RECSTATUS: flatbuffers::VOffsetT = 116;
  pub const VT_SYMCODE: flatbuffers::VOffsetT = 118;
  pub const VT_REFERENCEDOC: flatbuffers::VOffsetT = 120;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 122;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 124;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 126;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 128;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 130;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 132;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Site_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Site_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<Site_Abridged<'bldr>> {
    let mut builder = Site_AbridgedBuilder::new(_fbb);
    builder.add_popAreaProx(args.popAreaProx);
    builder.add_vegHt(args.vegHt);
    builder.add_elevMslDerivAcc(args.elevMslDerivAcc);
    builder.add_elevMsl(args.elevMsl);
    builder.add_geoidalMslSep(args.geoidalMslSep);
    builder.add_coordDerivAcc(args.coordDerivAcc);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.referenceDoc { builder.add_referenceDoc(x); }
    if let Some(x) = args.symCode { builder.add_symCode(x); }
    if let Some(x) = args.recStatus { builder.add_recStatus(x); }
    if let Some(x) = args.reviewDate { builder.add_reviewDate(x); }
    builder.add_eval(args.eval);
    if let Some(x) = args.resProd { builder.add_resProd(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.vegType { builder.add_vegType(x); }
    builder.add_elevMslConfLvl(args.elevMslConfLvl);
    if let Some(x) = args.ident { builder.add_ident(x); }
    if let Some(x) = args.nucCap { builder.add_nucCap(x); }
    if let Some(x) = args.msnPrimarySpec { builder.add_msnPrimarySpec(x); }
    if let Some(x) = args.msnPrimary { builder.add_msnPrimary(x); }
    if let Some(x) = args.functPrimary { builder.add_functPrimary(x); }
    if let Some(x) = args.activity { builder.add_activity(x); }
    builder.add_grade(args.grade);
    if let Some(x) = args.operStatus { builder.add_operStatus(x); }
    if let Some(x) = args.conditionAvail { builder.add_conditionAvail(x); }
    if let Some(x) = args.condition { builder.add_condition(x); }
    builder.add_maxRunwayLength(args.maxRunwayLength);
    builder.add_runways(args.runways);
    if let Some(x) = args.beNumber { builder.add_beNumber(x); }
    if let Some(x) = args.fpa { builder.add_fpa(x); }
    if let Some(x) = args.classRating { builder.add_classRating(x); }
    if let Some(x) = args.altAllegiance { builder.add_altAllegiance(x); }
    if let Some(x) = args.allegiance { builder.add_allegiance(x); }
    if let Some(x) = args.geoArea { builder.add_geoArea(x); }
    if let Some(x) = args.polSubdiv { builder.add_polSubdiv(x); }
    if let Some(x) = args.wac { builder.add_wac(x); }
    if let Some(x) = args.catText { builder.add_catText(x); }
    if let Some(x) = args.catCode { builder.add_catCode(x); }
    if let Some(x) = args.milGrid { builder.add_milGrid(x); }
    if let Some(x) = args.milGridSys { builder.add_milGridSys(x); }
    if let Some(x) = args.utm { builder.add_utm(x); }
    if let Some(x) = args.airDefArea { builder.add_airDefArea(x); }
    if let Some(x) = args.faa { builder.add_faa(x); }
    if let Some(x) = args.icao { builder.add_icao(x); }
    if let Some(x) = args.iata { builder.add_iata(x); }
    if let Some(x) = args.osuffix { builder.add_osuffix(x); }
    if let Some(x) = args.coord { builder.add_coord(x); }
    if let Some(x) = args.coordDatum { builder.add_coordDatum(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.lzUsage { builder.add_lzUsage(x); }
    if let Some(x) = args.usage { builder.add_usage(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.pin { builder.add_pin(x); }
    if let Some(x) = args.origLzId { builder.add_origLzId(x); }
    if let Some(x) = args.origSiteID { builder.add_origSiteID(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idParentSite { builder.add_idParentSite(x); }
    if let Some(x) = args.idEntity { builder.add_idEntity(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_popArea(args.popArea);
    builder.finish()
  }

  pub fn unpack(&self) -> Site_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idEntity = self.idEntity().map(|x| {
      x.to_string()
    });
    let idParentSite = self.idParentSite().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let origSiteID = self.origSiteID().map(|x| {
      x.to_string()
    });
    let origLzId = self.origLzId().map(|x| {
      x.to_string()
    });
    let pin = self.pin().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let usage = self.usage().map(|x| {
      x.to_string()
    });
    let lzUsage = self.lzUsage().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let coordDatum = self.coordDatum().map(|x| {
      x.to_string()
    });
    let coord = self.coord().map(|x| {
      x.to_string()
    });
    let coordDerivAcc = self.coordDerivAcc();
    let osuffix = self.osuffix().map(|x| {
      x.to_string()
    });
    let iata = self.iata().map(|x| {
      x.to_string()
    });
    let icao = self.icao().map(|x| {
      x.to_string()
    });
    let faa = self.faa().map(|x| {
      x.to_string()
    });
    let airDefArea = self.airDefArea().map(|x| {
      x.to_string()
    });
    let utm = self.utm().map(|x| {
      x.to_string()
    });
    let milGridSys = self.milGridSys().map(|x| {
      x.to_string()
    });
    let milGrid = self.milGrid().map(|x| {
      x.to_string()
    });
    let catCode = self.catCode().map(|x| {
      x.to_string()
    });
    let catText = self.catText().map(|x| {
      x.to_string()
    });
    let wac = self.wac().map(|x| {
      x.to_string()
    });
    let polSubdiv = self.polSubdiv().map(|x| {
      x.to_string()
    });
    let geoArea = self.geoArea().map(|x| {
      x.to_string()
    });
    let geoidalMslSep = self.geoidalMslSep();
    let allegiance = self.allegiance().map(|x| {
      x.to_string()
    });
    let altAllegiance = self.altAllegiance().map(|x| {
      x.to_string()
    });
    let classRating = self.classRating().map(|x| {
      x.to_string()
    });
    let fpa = self.fpa().map(|x| {
      x.to_string()
    });
    let beNumber = self.beNumber().map(|x| {
      x.to_string()
    });
    let runways = self.runways();
    let maxRunwayLength = self.maxRunwayLength();
    let condition = self.condition().map(|x| {
      x.to_string()
    });
    let conditionAvail = self.conditionAvail().map(|x| {
      x.to_string()
    });
    let operStatus = self.operStatus().map(|x| {
      x.to_string()
    });
    let grade = self.grade();
    let activity = self.activity().map(|x| {
      x.to_string()
    });
    let functPrimary = self.functPrimary().map(|x| {
      x.to_string()
    });
    let msnPrimary = self.msnPrimary().map(|x| {
      x.to_string()
    });
    let msnPrimarySpec = self.msnPrimarySpec().map(|x| {
      x.to_string()
    });
    let nucCap = self.nucCap().map(|x| {
      x.to_string()
    });
    let ident = self.ident().map(|x| {
      x.to_string()
    });
    let elevMsl = self.elevMsl();
    let elevMslConfLvl = self.elevMslConfLvl();
    let elevMslDerivAcc = self.elevMslDerivAcc();
    let vegHt = self.vegHt();
    let vegType = self.vegType().map(|x| {
      x.to_string()
    });
    let popArea = self.popArea();
    let popAreaProx = self.popAreaProx();
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let resProd = self.resProd().map(|x| {
      x.to_string()
    });
    let eval = self.eval();
    let reviewDate = self.reviewDate().map(|x| {
      x.to_string()
    });
    let recStatus = self.recStatus().map(|x| {
      x.to_string()
    });
    let symCode = self.symCode().map(|x| {
      x.to_string()
    });
    let referenceDoc = self.referenceDoc().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    Site_AbridgedT {
      id,
      idEntity,
      idParentSite,
      classificationMarking,
      origSiteID,
      origLzId,
      pin,
      type_,
      usage,
      lzUsage,
      name,
      coordDatum,
      coord,
      coordDerivAcc,
      osuffix,
      iata,
      icao,
      faa,
      airDefArea,
      utm,
      milGridSys,
      milGrid,
      catCode,
      catText,
      wac,
      polSubdiv,
      geoArea,
      geoidalMslSep,
      allegiance,
      altAllegiance,
      classRating,
      fpa,
      beNumber,
      runways,
      maxRunwayLength,
      condition,
      conditionAvail,
      operStatus,
      grade,
      activity,
      functPrimary,
      msnPrimary,
      msnPrimarySpec,
      nucCap,
      ident,
      elevMsl,
      elevMslConfLvl,
      elevMslDerivAcc,
      vegHt,
      vegType,
      popArea,
      popAreaProx,
      notes,
      resProd,
      eval,
      reviewDate,
      recStatus,
      symCode,
      referenceDoc,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SITE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ID, None)}
  }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idEntity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_IDENTITY, None)}
  }
  /// Unique identifier of the Parent Site record associated with this Site record.
  /// Example: /// Example: ID-Parent-Site
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idParentSite(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_IDPARENTSITE, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the Site record from the originating system.
  /// Example: /// Example: ORIG-SITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origSiteID(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ORIGSITEID, None)}
  }
  /// Unique identifier of the LZ record from the originating system.
  /// Example: /// Example: ORIG-LZ-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origLzId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ORIGLZID, None)}
  }
  /// Site number of a specific electronic site or its associated equipment.
  /// Example: /// Example: 25200
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn pin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_PIN, None)}
  }
  /// The type of this site (AIRBASE, AIRFIELD, AIRPORT, NAVAL STATION, etc.).
  /// Example: /// Example: AIRBASE
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_TYPE_, None)}
  }
  /// The use authorization type of this site (e.g MILITARY, CIVIL, JOINT-USE, etc.).
  /// Example: /// Example: MILITARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn usage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_USAGE, None)}
  }
  /// Indicates the normal usage of the Landing Zone (LZ).  Intended as, but not constrained to MIDB Helocopter Landing Area usage value definitions:
  /// AF - Airfield
  /// FD - Field
  /// HC - High Crop.  1 meter and over.
  /// HY - Highway
  /// LB - Lake Bed
  /// LC - Low Crop.  0-1 meters
  /// O - Other. Explain In Remarks.
  /// PD - Paddy
  /// PK - Park
  /// PS - Pasture
  /// RB - Riverbed
  /// SP - Sport Field
  /// U - Unknown
  /// Z - Inconclusive Analysis.
  /// Example: /// Example: AF
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn lzUsage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_LZUSAGE, None)}
  }
  /// The name of this site.
  /// Example: /// Example: Site Name
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_NAME, None)}
  }
  /// A mathematical model of the earth used to calculate coordinates on a map. US Forces use the World Geodetic System 1984 (WGS 84), but also use maps by allied countries with local datums. The datum must be specified to ensure accuracy of coordinates. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: WGS
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn coordDatum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_COORDDATUM, None)}
  }
  /// Indicates any of the magnitudes that serve to define the position of a point by reference to a fixed figure, system of lines, etc.
  /// Pos. 1-2.  Latitude Degrees     [00-90]
  /// Pos. 3-4.  Latitude Minutes     [00-59]
  /// Pos. 5-6.  Latitude Seconds     [00-59]
  /// Pos. 7-9.  Latitude Thousandths Of Seconds   [000-999]  
  /// Pos. 10. Latitude Hemisphere       [NS] 
  /// Pos. 11-13. Longitude Degrees     [00-180] 
  /// Pos. 14-15. Longitude Minutes     [00-59] 
  /// Pos. 16-17. Longitude Seconds     [00-59] 
  /// Pos. 18-20. Longitude Thousandths Of Seconds      [000-999]
  /// Pos. 21. Longitude Hemisphere     [EW]
  /// Pos. 1-21.  Unknown Latitude and Unknown Longitude [000000000U000000000U].
  /// Example: /// Example: 340000000N0430000000E
  /// Constraints: Minimum length = 0, Maximum length = 21
  #[inline]
  pub fn coord(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_COORD, None)}
  }
  /// Indicates the plus or minus error assessed against the method used to derive the coordinate.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  #[inline]
  pub fn coordDerivAcc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Site_Abridged::VT_COORDDERIVACC, Some(0.0)).unwrap()}
  }
  /// The O-suffix associated with this site. The O-suffix is a five-character alpha/numeric system used to identify a site, or demographic area, within an installation. The Installation Basic Encyclopedia (beNumber), in conjunction with the O-suffix, uniquely identifies the Site. The Installation beNumber and oSuffix are also used in conjunction with the catCode to classify the function or purpose of the facility.
  /// Example: /// Example: BB002
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn osuffix(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_OSUFFIX, None)}
  }
  /// The International Air Transport Association (IATA) code of this site, if applicable.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn iata(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_IATA, None)}
  }
  /// The International Civil Aviation Organization (ICAO) code of this site, if applicable.
  /// Example: /// Example: ICA1
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn icao(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ICAO, None)}
  }
  /// The Federal Aviation Administration (FAA) Location ID of this site, if applicable.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn faa(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_FAA, None)}
  }
  /// Air Defense District (ADD) or Air Defense Area (ADA) in which the geographic coordinates reside.
  /// Example: /// Example: AL006
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn airDefArea(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_AIRDEFAREA, None)}
  }
  /// Universal Transverse Mercator (UTM) grid coordinates.
  /// Pos. 1-2, UTM Zone Column   [01-60
  /// Pos. 3, UTM Zone Row   [C-HJ-NP-X]
  /// Pos. 4, UTM False Easting   [0-9]
  /// Pos. 5-9, UTM Meter Easting    [0-9][0-9][0-9][0-9][0-9]
  /// Pos. 10-11, UTM False Northing    [0-9][0-9]
  /// Pos. 12-16, UTM Meter Northing    [0-9][0-9][0-9][0-9][0-9].
  /// Example: /// Example: 19P4390691376966
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn utm(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_UTM, None)}
  }
  /// Indicates the grid system used in the development of the milGrid coordinates. Values are:
  /// UPS - Universal Polar System
  /// UTM - Universal Transverse Mercator.
  /// Example: /// Example: UTM
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn milGridSys(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_MILGRIDSYS, None)}
  }
  /// The Military Grid Reference System is the geocoordinate standard used by NATO militaries for locating points on Earth. The MGRS is derived from the Universal Transverse Mercator (UTM) grid system and the Universal Polar Stereographic (UPS) grid system, but uses a different labeling convention. The MGRS is used as geocode for the entire Earth. Example of an milgrid coordinate, or grid reference, would be 4QFJ12345678, which consists of three parts:
  /// 4Q (grid zone designator, GZD)
  /// FJ (the 100,000-meter square identifier)
  /// 12345678 (numerical location; easting is 1234 and northing is 5678, in this case specifying a location with 10 m resolution).
  /// Example: /// Example: 4QFJ12345678
  /// Constraints: Minimum length = 0, Maximum length = 15
  #[inline]
  pub fn milGrid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_MILGRID, None)}
  }
  /// The category code that represents the associated site purpose within the target system.
  /// Example: /// Example: 20345
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn catCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CATCODE, None)}
  }
  /// Textual Description of Site catCode.
  /// Example: /// Example: Radar Facility, General
  /// Constraints: Minimum length = 0, Maximum length = 148
  #[inline]
  pub fn catText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CATTEXT, None)}
  }
  /// World Aeronautical Chart identifier for the area in which a designated place is located.
  /// Example: /// Example: 0427
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn wac(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_WAC, None)}
  }
  /// Political subdivision in which the geographic coordinates reside. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: IZO7
  /// Constraints: Minimum length = 0, Maximum length = 7
  #[inline]
  pub fn polSubdiv(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_POLSUBDIV, None)}
  }
  /// Geographical region code used by the Requirements Management System (RMS) as specified by National Geospatial Agency (NGA) in Flight Information Publications (FIPS) 10-4, Appendix 3 - Country Code and Geographic Region Codes. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: E2
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn geoArea(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_GEOAREA, None)}
  }
  /// The distance between Mean Sea Level and a referenced ellipsoid, in meters.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geoidalMslSep(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Site_Abridged::VT_GEOIDALMSLSEP, Some(0.0)).unwrap()}
  }
  /// The DoD Standard Country Code designator for the country or political entity to which the site owes its allegiance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: OTHR
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn allegiance(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ALLEGIANCE, None)}
  }
  /// Specifies an alternate allegiance code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying allegiance.
  /// Example: /// Example: HL
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn altAllegiance(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ALTALLEGIANCE, None)}
  }
  /// Indicates the importance of the entity to the OES or MIR system.  This data element is restricted to update by DIA (DB-4). Valid values are:
  /// 0 - Does not meet criteria above
  /// 1 - Primary importance to system
  /// 2 - Secondary importance to system
  /// 3 - Tertiary importance to system
  /// O - Other. Explain in Remarks.
  /// Example: /// Example: 1
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn classRating(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CLASSRATING, None)}
  }
  /// Functional Production Area (FPA) under the Shared Production Program (SPP). Producers are defined per country per FPA. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: EOB
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn fpa(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_FPA, None)}
  }
  /// The Basic Encyclopedia Number associated with the Site. Uniquely identifies the installation of a site. The beNumber is generated based on the value input for the COORD to determine the appropriate World Aeronautical Chart (WAC) location identifier, the system assigned record originator and a one-up-number.
  /// Example: /// Example: 0427RT1030
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn beNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_BENUMBER, None)}
  }
  /// The number of runways at the site, if applicable.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn runways(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Site_Abridged::VT_RUNWAYS, Some(0)).unwrap()}
  }
  /// The length of the longest runway at this site, if applicable, in meters.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxRunwayLength(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Site_Abridged::VT_MAXRUNWAYLENGTH, Some(0)).unwrap()}
  }
  /// The physical manner of being or state of existence of the entity. A physical condition that must be considered in the determining of a course of action. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: RDY
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn condition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CONDITION, None)}
  }
  /// Availability of the entity relative to its condition. Indicates the reason the entity is not fully operational. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn conditionAvail(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CONDITIONAVAIL, None)}
  }
  /// The Degree to which an entity is ready to perform the overall operational mission(s) for which it was organized and equipped. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OPR
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn operStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_OPERSTATUS, None)}
  }
  /// Indicates the amount or degree of deviation from the horizontal represented as a percent.  Grade is determined by the formula: vertical distance (VD) divided by horizontal distance (HD) times 100. VD is the difference between the highest and  lowest elevation within the entity. HD is the linear distance between the highest and lowest elevation.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn grade(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Site_Abridged::VT_GRADE, Some(0)).unwrap()}
  }
  /// Indicates the function or mission of an entity, which that entity may or may not be engaged in at any particular time. Typically refers to a unit, organization, or installation/site performing a specific function or mission such as a redistribution center or naval shipyard. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: OCC
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn activity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ACTIVITY, None)}
  }
  /// Principal operational function being performed. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: JG
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn functPrimary(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_FUNCTPRIMARY, None)}
  }
  /// Indicates the principal type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: AA
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn msnPrimary(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_MSNPRIMARY, None)}
  }
  /// Indicates the principal specialty type of mission that an entity is organized and equipped to perform. The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field.  If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: AB
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn msnPrimarySpec(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_MSNPRIMARYSPEC, None)}
  }
  /// A sites ability to conduct nuclear warfare. Valid Values are:
  /// A - Nuclear Ammo Or Warheads Available
  /// N - No Nuclear Offense
  /// O - Other. Explain in Remarks
  /// U - Unknown
  /// W - Nuclear Weapons Available
  /// Y - Nuclear Warfare Offensive Capability
  /// Z - Inconclusive Analysis.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn nucCap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_NUCCAP, None)}
  }
  /// Estimated identity of the Site (ASSUMED FRIEND, FRIEND, HOSTILE, FAKER, JOKER, NEUTRAL, PENDING, SUSPECT, UNKNOWN): 
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn ident(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_IDENT, None)}
  }
  /// Ground elevation of the geographic coordinates referenced to (above or below) Mean Sea Level (MSL) vertical datum, in meters.
  /// Example: /// Example: 123.45
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevMsl(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Site_Abridged::VT_ELEVMSL, Some(0.0)).unwrap()}
  }
  /// Indicates the confidence level expressed as a percent that a specific geometric spatial element, ELEVATION_MSL linear accuracy, has been vertically positioned to within a specified vertical accuracy.
  /// Example: /// Example: 50
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevMslConfLvl(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Site_Abridged::VT_ELEVMSLCONFLVL, Some(0)).unwrap()}
  }
  /// Indicates the plus or minus error assessed against the method used to derive the elevation.
  /// Example: /// Example: 12.34
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevMslDerivAcc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Site_Abridged::VT_ELEVMSLDERIVACC, Some(0.0)).unwrap()}
  }
  /// Maximum expected height of the vegetation in the Landing Zone (LZ), in meters.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vegHt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Site_Abridged::VT_VEGHT, Some(0.0)).unwrap()}
  }
  /// The predominant vegetation found in the Landing Zone (LZ). The specific usage and enumerations contained in this field may be found in the documentation provided in the referenceDoc field. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: FR
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn vegType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_VEGTYPE, None)}
  }
  /// Indicates whether the facility is in or outside of a populated area. True, the facility is in or within 5 NM of a populated area. False, the facility is outside a populated area.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn popArea(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Site_Abridged::VT_POPAREA, Some(false)).unwrap()}
  }
  /// Indicates the distance to nearest populated area (over 1,000 people) in nautical miles.
  /// Example: /// Example: 12.345
  /// Constraints: No constraints specified.
  #[inline]
  pub fn popAreaProx(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Site_Abridged::VT_POPAREAPROX, Some(0.0)).unwrap()}
  }
  /// Optional notes/comments for the site.
  /// Example: /// Example: Example Notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_NOTES, None)}
  }
  /// Responsible Producer - Organization that is responsible for the maintenance of the record.
  /// Example: /// Example: RT
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn resProd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_RESPROD, None)}
  }
  /// Eval represents the Intelligence Confidence Level or the Reliability/degree of confidence that the analyst has assigned to the data within this record. The numerical range is from 1 to 9 with 1 representing the highest confidence level.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eval(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Site_Abridged::VT_EVAL, Some(0)).unwrap()}
  }
  /// Date on which the data in the record was last reviewed by the responsible analyst for accuracy and currency, in ISO8601 UTC format. This date cannot be greater than the current date.
  /// Example: /// Example: 2008-06-10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reviewDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_REVIEWDATE, None)}
  }
  /// Validity and currency of the data in the record to be used in conjunction with the other elements in the record as defined by SOPs.
  /// A - Active
  /// I - Inactive
  /// K - Acknowledged
  /// L - Local
  /// Q - A nominated (NOM) or Data Change Request (DCR) record
  /// R - Production reduced by CMD decision
  /// W - Working Record.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn recStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_RECSTATUS, None)}
  }
  /// A standard scheme for symbol coding enabling the transfer, display and use of symbols and graphics among information systems, as per MIL-STD 2525B, and supported by the element ident.
  /// Example: /// Example: SOGPU----------
  /// Constraints: Minimum length = 0, Maximum length = 15
  #[inline]
  pub fn symCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_SYMCODE, None)}
  }
  /// The reference documentation that specifies the usage and enumerations contained in this record. If referenceDoc not provided, users may consult the data provider.
  /// Example: /// Example: Provider Reference Documentation
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn referenceDoc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_REFERENCEDOC, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Site_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Site_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Site_Abridged_dataMode_Enum>(Site_Abridged::VT_DATAMODE, Some(Site_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Site_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idEntity", Self::VT_IDENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idParentSite", Self::VT_IDPARENTSITE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSiteID", Self::VT_ORIGSITEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origLzId", Self::VT_ORIGLZID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pin", Self::VT_PIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("usage", Self::VT_USAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lzUsage", Self::VT_LZUSAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("coordDatum", Self::VT_COORDDATUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("coord", Self::VT_COORD, false)?
     .visit_field::<f64>("coordDerivAcc", Self::VT_COORDDERIVACC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("osuffix", Self::VT_OSUFFIX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("iata", Self::VT_IATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("icao", Self::VT_ICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("faa", Self::VT_FAA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("airDefArea", Self::VT_AIRDEFAREA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("utm", Self::VT_UTM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("milGridSys", Self::VT_MILGRIDSYS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("milGrid", Self::VT_MILGRID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("catCode", Self::VT_CATCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("catText", Self::VT_CATTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("wac", Self::VT_WAC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("polSubdiv", Self::VT_POLSUBDIV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geoArea", Self::VT_GEOAREA, false)?
     .visit_field::<f64>("geoidalMslSep", Self::VT_GEOIDALMSLSEP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("allegiance", Self::VT_ALLEGIANCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altAllegiance", Self::VT_ALTALLEGIANCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classRating", Self::VT_CLASSRATING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fpa", Self::VT_FPA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("beNumber", Self::VT_BENUMBER, false)?
     .visit_field::<i32>("runways", Self::VT_RUNWAYS, false)?
     .visit_field::<i32>("maxRunwayLength", Self::VT_MAXRUNWAYLENGTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("condition", Self::VT_CONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("conditionAvail", Self::VT_CONDITIONAVAIL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("operStatus", Self::VT_OPERSTATUS, false)?
     .visit_field::<i32>("grade", Self::VT_GRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("activity", Self::VT_ACTIVITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("functPrimary", Self::VT_FUNCTPRIMARY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msnPrimary", Self::VT_MSNPRIMARY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msnPrimarySpec", Self::VT_MSNPRIMARYSPEC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nucCap", Self::VT_NUCCAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ident", Self::VT_IDENT, false)?
     .visit_field::<f64>("elevMsl", Self::VT_ELEVMSL, false)?
     .visit_field::<i32>("elevMslConfLvl", Self::VT_ELEVMSLCONFLVL, false)?
     .visit_field::<f64>("elevMslDerivAcc", Self::VT_ELEVMSLDERIVACC, false)?
     .visit_field::<f64>("vegHt", Self::VT_VEGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("vegType", Self::VT_VEGTYPE, false)?
     .visit_field::<bool>("popArea", Self::VT_POPAREA, false)?
     .visit_field::<f64>("popAreaProx", Self::VT_POPAREAPROX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resProd", Self::VT_RESPROD, false)?
     .visit_field::<i32>("eval", Self::VT_EVAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reviewDate", Self::VT_REVIEWDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("recStatus", Self::VT_RECSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("symCode", Self::VT_SYMCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("referenceDoc", Self::VT_REFERENCEDOC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<Site_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct Site_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idEntity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idParentSite: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSiteID: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origLzId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub usage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lzUsage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub coordDatum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub coord: Option<flatbuffers::WIPOffset<&'a str>>,
    pub coordDerivAcc: f64,
    pub osuffix: Option<flatbuffers::WIPOffset<&'a str>>,
    pub iata: Option<flatbuffers::WIPOffset<&'a str>>,
    pub icao: Option<flatbuffers::WIPOffset<&'a str>>,
    pub faa: Option<flatbuffers::WIPOffset<&'a str>>,
    pub airDefArea: Option<flatbuffers::WIPOffset<&'a str>>,
    pub utm: Option<flatbuffers::WIPOffset<&'a str>>,
    pub milGridSys: Option<flatbuffers::WIPOffset<&'a str>>,
    pub milGrid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub catCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub catText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub wac: Option<flatbuffers::WIPOffset<&'a str>>,
    pub polSubdiv: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geoArea: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geoidalMslSep: f64,
    pub allegiance: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altAllegiance: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classRating: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fpa: Option<flatbuffers::WIPOffset<&'a str>>,
    pub beNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub runways: i32,
    pub maxRunwayLength: i32,
    pub condition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub conditionAvail: Option<flatbuffers::WIPOffset<&'a str>>,
    pub operStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub grade: i32,
    pub activity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub functPrimary: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msnPrimary: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msnPrimarySpec: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nucCap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ident: Option<flatbuffers::WIPOffset<&'a str>>,
    pub elevMsl: f64,
    pub elevMslConfLvl: i32,
    pub elevMslDerivAcc: f64,
    pub vegHt: f64,
    pub vegType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub popArea: bool,
    pub popAreaProx: f64,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resProd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eval: i32,
    pub reviewDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub recStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub symCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub referenceDoc: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Site_Abridged_dataMode_Enum,
}
impl<'a> Default for Site_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    Site_AbridgedArgs {
      id: None,
      idEntity: None,
      idParentSite: None,
      classificationMarking: None,
      origSiteID: None,
      origLzId: None,
      pin: None,
      type_: None,
      usage: None,
      lzUsage: None,
      name: None,
      coordDatum: None,
      coord: None,
      coordDerivAcc: 0.0,
      osuffix: None,
      iata: None,
      icao: None,
      faa: None,
      airDefArea: None,
      utm: None,
      milGridSys: None,
      milGrid: None,
      catCode: None,
      catText: None,
      wac: None,
      polSubdiv: None,
      geoArea: None,
      geoidalMslSep: 0.0,
      allegiance: None,
      altAllegiance: None,
      classRating: None,
      fpa: None,
      beNumber: None,
      runways: 0,
      maxRunwayLength: 0,
      condition: None,
      conditionAvail: None,
      operStatus: None,
      grade: 0,
      activity: None,
      functPrimary: None,
      msnPrimary: None,
      msnPrimarySpec: None,
      nucCap: None,
      ident: None,
      elevMsl: 0.0,
      elevMslConfLvl: 0,
      elevMslDerivAcc: 0.0,
      vegHt: 0.0,
      vegType: None,
      popArea: false,
      popAreaProx: 0.0,
      notes: None,
      resProd: None,
      eval: 0,
      reviewDate: None,
      recStatus: None,
      symCode: None,
      referenceDoc: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Site_Abridged_dataMode_Enum::REAL,
    }
  }
}

pub struct Site_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Site_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_idEntity(&mut self, idEntity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_IDENTITY, idEntity);
  }
  #[inline]
  pub fn add_idParentSite(&mut self, idParentSite: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_IDPARENTSITE, idParentSite);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_origSiteID(&mut self, origSiteID: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ORIGSITEID, origSiteID);
  }
  #[inline]
  pub fn add_origLzId(&mut self, origLzId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ORIGLZID, origLzId);
  }
  #[inline]
  pub fn add_pin(&mut self, pin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_PIN, pin);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_usage(&mut self, usage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_USAGE, usage);
  }
  #[inline]
  pub fn add_lzUsage(&mut self, lzUsage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_LZUSAGE, lzUsage);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_NAME, name);
  }
  #[inline]
  pub fn add_coordDatum(&mut self, coordDatum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_COORDDATUM, coordDatum);
  }
  #[inline]
  pub fn add_coord(&mut self, coord: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_COORD, coord);
  }
  #[inline]
  pub fn add_coordDerivAcc(&mut self, coordDerivAcc: f64) {
    self.fbb_.push_slot::<f64>(Site_Abridged::VT_COORDDERIVACC, coordDerivAcc, 0.0);
  }
  #[inline]
  pub fn add_osuffix(&mut self, osuffix: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_OSUFFIX, osuffix);
  }
  #[inline]
  pub fn add_iata(&mut self, iata: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_IATA, iata);
  }
  #[inline]
  pub fn add_icao(&mut self, icao: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ICAO, icao);
  }
  #[inline]
  pub fn add_faa(&mut self, faa: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_FAA, faa);
  }
  #[inline]
  pub fn add_airDefArea(&mut self, airDefArea: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_AIRDEFAREA, airDefArea);
  }
  #[inline]
  pub fn add_utm(&mut self, utm: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_UTM, utm);
  }
  #[inline]
  pub fn add_milGridSys(&mut self, milGridSys: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_MILGRIDSYS, milGridSys);
  }
  #[inline]
  pub fn add_milGrid(&mut self, milGrid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_MILGRID, milGrid);
  }
  #[inline]
  pub fn add_catCode(&mut self, catCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CATCODE, catCode);
  }
  #[inline]
  pub fn add_catText(&mut self, catText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CATTEXT, catText);
  }
  #[inline]
  pub fn add_wac(&mut self, wac: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_WAC, wac);
  }
  #[inline]
  pub fn add_polSubdiv(&mut self, polSubdiv: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_POLSUBDIV, polSubdiv);
  }
  #[inline]
  pub fn add_geoArea(&mut self, geoArea: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_GEOAREA, geoArea);
  }
  #[inline]
  pub fn add_geoidalMslSep(&mut self, geoidalMslSep: f64) {
    self.fbb_.push_slot::<f64>(Site_Abridged::VT_GEOIDALMSLSEP, geoidalMslSep, 0.0);
  }
  #[inline]
  pub fn add_allegiance(&mut self, allegiance: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ALLEGIANCE, allegiance);
  }
  #[inline]
  pub fn add_altAllegiance(&mut self, altAllegiance: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ALTALLEGIANCE, altAllegiance);
  }
  #[inline]
  pub fn add_classRating(&mut self, classRating: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CLASSRATING, classRating);
  }
  #[inline]
  pub fn add_fpa(&mut self, fpa: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_FPA, fpa);
  }
  #[inline]
  pub fn add_beNumber(&mut self, beNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_BENUMBER, beNumber);
  }
  #[inline]
  pub fn add_runways(&mut self, runways: i32) {
    self.fbb_.push_slot::<i32>(Site_Abridged::VT_RUNWAYS, runways, 0);
  }
  #[inline]
  pub fn add_maxRunwayLength(&mut self, maxRunwayLength: i32) {
    self.fbb_.push_slot::<i32>(Site_Abridged::VT_MAXRUNWAYLENGTH, maxRunwayLength, 0);
  }
  #[inline]
  pub fn add_condition(&mut self, condition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CONDITION, condition);
  }
  #[inline]
  pub fn add_conditionAvail(&mut self, conditionAvail: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CONDITIONAVAIL, conditionAvail);
  }
  #[inline]
  pub fn add_operStatus(&mut self, operStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_OPERSTATUS, operStatus);
  }
  #[inline]
  pub fn add_grade(&mut self, grade: i32) {
    self.fbb_.push_slot::<i32>(Site_Abridged::VT_GRADE, grade, 0);
  }
  #[inline]
  pub fn add_activity(&mut self, activity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ACTIVITY, activity);
  }
  #[inline]
  pub fn add_functPrimary(&mut self, functPrimary: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_FUNCTPRIMARY, functPrimary);
  }
  #[inline]
  pub fn add_msnPrimary(&mut self, msnPrimary: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_MSNPRIMARY, msnPrimary);
  }
  #[inline]
  pub fn add_msnPrimarySpec(&mut self, msnPrimarySpec: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_MSNPRIMARYSPEC, msnPrimarySpec);
  }
  #[inline]
  pub fn add_nucCap(&mut self, nucCap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_NUCCAP, nucCap);
  }
  #[inline]
  pub fn add_ident(&mut self, ident: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_IDENT, ident);
  }
  #[inline]
  pub fn add_elevMsl(&mut self, elevMsl: f64) {
    self.fbb_.push_slot::<f64>(Site_Abridged::VT_ELEVMSL, elevMsl, 0.0);
  }
  #[inline]
  pub fn add_elevMslConfLvl(&mut self, elevMslConfLvl: i32) {
    self.fbb_.push_slot::<i32>(Site_Abridged::VT_ELEVMSLCONFLVL, elevMslConfLvl, 0);
  }
  #[inline]
  pub fn add_elevMslDerivAcc(&mut self, elevMslDerivAcc: f64) {
    self.fbb_.push_slot::<f64>(Site_Abridged::VT_ELEVMSLDERIVACC, elevMslDerivAcc, 0.0);
  }
  #[inline]
  pub fn add_vegHt(&mut self, vegHt: f64) {
    self.fbb_.push_slot::<f64>(Site_Abridged::VT_VEGHT, vegHt, 0.0);
  }
  #[inline]
  pub fn add_vegType(&mut self, vegType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_VEGTYPE, vegType);
  }
  #[inline]
  pub fn add_popArea(&mut self, popArea: bool) {
    self.fbb_.push_slot::<bool>(Site_Abridged::VT_POPAREA, popArea, false);
  }
  #[inline]
  pub fn add_popAreaProx(&mut self, popAreaProx: f64) {
    self.fbb_.push_slot::<f64>(Site_Abridged::VT_POPAREAPROX, popAreaProx, 0.0);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_resProd(&mut self, resProd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_RESPROD, resProd);
  }
  #[inline]
  pub fn add_eval(&mut self, eval: i32) {
    self.fbb_.push_slot::<i32>(Site_Abridged::VT_EVAL, eval, 0);
  }
  #[inline]
  pub fn add_reviewDate(&mut self, reviewDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_REVIEWDATE, reviewDate);
  }
  #[inline]
  pub fn add_recStatus(&mut self, recStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_RECSTATUS, recStatus);
  }
  #[inline]
  pub fn add_symCode(&mut self, symCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_SYMCODE, symCode);
  }
  #[inline]
  pub fn add_referenceDoc(&mut self, referenceDoc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_REFERENCEDOC, referenceDoc);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Site_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Site_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<Site_Abridged_dataMode_Enum>(Site_Abridged::VT_DATAMODE, dataMode, Site_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Site_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Site_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Site_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Site_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Site_Abridged");
      ds.field("id", &self.id());
      ds.field("idEntity", &self.idEntity());
      ds.field("idParentSite", &self.idParentSite());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("origSiteID", &self.origSiteID());
      ds.field("origLzId", &self.origLzId());
      ds.field("pin", &self.pin());
      ds.field("type_", &self.type_());
      ds.field("usage", &self.usage());
      ds.field("lzUsage", &self.lzUsage());
      ds.field("name", &self.name());
      ds.field("coordDatum", &self.coordDatum());
      ds.field("coord", &self.coord());
      ds.field("coordDerivAcc", &self.coordDerivAcc());
      ds.field("osuffix", &self.osuffix());
      ds.field("iata", &self.iata());
      ds.field("icao", &self.icao());
      ds.field("faa", &self.faa());
      ds.field("airDefArea", &self.airDefArea());
      ds.field("utm", &self.utm());
      ds.field("milGridSys", &self.milGridSys());
      ds.field("milGrid", &self.milGrid());
      ds.field("catCode", &self.catCode());
      ds.field("catText", &self.catText());
      ds.field("wac", &self.wac());
      ds.field("polSubdiv", &self.polSubdiv());
      ds.field("geoArea", &self.geoArea());
      ds.field("geoidalMslSep", &self.geoidalMslSep());
      ds.field("allegiance", &self.allegiance());
      ds.field("altAllegiance", &self.altAllegiance());
      ds.field("classRating", &self.classRating());
      ds.field("fpa", &self.fpa());
      ds.field("beNumber", &self.beNumber());
      ds.field("runways", &self.runways());
      ds.field("maxRunwayLength", &self.maxRunwayLength());
      ds.field("condition", &self.condition());
      ds.field("conditionAvail", &self.conditionAvail());
      ds.field("operStatus", &self.operStatus());
      ds.field("grade", &self.grade());
      ds.field("activity", &self.activity());
      ds.field("functPrimary", &self.functPrimary());
      ds.field("msnPrimary", &self.msnPrimary());
      ds.field("msnPrimarySpec", &self.msnPrimarySpec());
      ds.field("nucCap", &self.nucCap());
      ds.field("ident", &self.ident());
      ds.field("elevMsl", &self.elevMsl());
      ds.field("elevMslConfLvl", &self.elevMslConfLvl());
      ds.field("elevMslDerivAcc", &self.elevMslDerivAcc());
      ds.field("vegHt", &self.vegHt());
      ds.field("vegType", &self.vegType());
      ds.field("popArea", &self.popArea());
      ds.field("popAreaProx", &self.popAreaProx());
      ds.field("notes", &self.notes());
      ds.field("resProd", &self.resProd());
      ds.field("eval", &self.eval());
      ds.field("reviewDate", &self.reviewDate());
      ds.field("recStatus", &self.recStatus());
      ds.field("symCode", &self.symCode());
      ds.field("referenceDoc", &self.referenceDoc());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Site_AbridgedT {
  pub id: Option<String>,
  pub idEntity: Option<String>,
  pub idParentSite: Option<String>,
  pub classificationMarking: Option<String>,
  pub origSiteID: Option<String>,
  pub origLzId: Option<String>,
  pub pin: Option<String>,
  pub type_: Option<String>,
  pub usage: Option<String>,
  pub lzUsage: Option<String>,
  pub name: Option<String>,
  pub coordDatum: Option<String>,
  pub coord: Option<String>,
  pub coordDerivAcc: f64,
  pub osuffix: Option<String>,
  pub iata: Option<String>,
  pub icao: Option<String>,
  pub faa: Option<String>,
  pub airDefArea: Option<String>,
  pub utm: Option<String>,
  pub milGridSys: Option<String>,
  pub milGrid: Option<String>,
  pub catCode: Option<String>,
  pub catText: Option<String>,
  pub wac: Option<String>,
  pub polSubdiv: Option<String>,
  pub geoArea: Option<String>,
  pub geoidalMslSep: f64,
  pub allegiance: Option<String>,
  pub altAllegiance: Option<String>,
  pub classRating: Option<String>,
  pub fpa: Option<String>,
  pub beNumber: Option<String>,
  pub runways: i32,
  pub maxRunwayLength: i32,
  pub condition: Option<String>,
  pub conditionAvail: Option<String>,
  pub operStatus: Option<String>,
  pub grade: i32,
  pub activity: Option<String>,
  pub functPrimary: Option<String>,
  pub msnPrimary: Option<String>,
  pub msnPrimarySpec: Option<String>,
  pub nucCap: Option<String>,
  pub ident: Option<String>,
  pub elevMsl: f64,
  pub elevMslConfLvl: i32,
  pub elevMslDerivAcc: f64,
  pub vegHt: f64,
  pub vegType: Option<String>,
  pub popArea: bool,
  pub popAreaProx: f64,
  pub notes: Option<String>,
  pub resProd: Option<String>,
  pub eval: i32,
  pub reviewDate: Option<String>,
  pub recStatus: Option<String>,
  pub symCode: Option<String>,
  pub referenceDoc: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: Site_Abridged_dataMode_Enum,
}
impl Default for Site_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      idEntity: None,
      idParentSite: None,
      classificationMarking: None,
      origSiteID: None,
      origLzId: None,
      pin: None,
      type_: None,
      usage: None,
      lzUsage: None,
      name: None,
      coordDatum: None,
      coord: None,
      coordDerivAcc: 0.0,
      osuffix: None,
      iata: None,
      icao: None,
      faa: None,
      airDefArea: None,
      utm: None,
      milGridSys: None,
      milGrid: None,
      catCode: None,
      catText: None,
      wac: None,
      polSubdiv: None,
      geoArea: None,
      geoidalMslSep: 0.0,
      allegiance: None,
      altAllegiance: None,
      classRating: None,
      fpa: None,
      beNumber: None,
      runways: 0,
      maxRunwayLength: 0,
      condition: None,
      conditionAvail: None,
      operStatus: None,
      grade: 0,
      activity: None,
      functPrimary: None,
      msnPrimary: None,
      msnPrimarySpec: None,
      nucCap: None,
      ident: None,
      elevMsl: 0.0,
      elevMslConfLvl: 0,
      elevMslDerivAcc: 0.0,
      vegHt: 0.0,
      vegType: None,
      popArea: false,
      popAreaProx: 0.0,
      notes: None,
      resProd: None,
      eval: 0,
      reviewDate: None,
      recStatus: None,
      symCode: None,
      referenceDoc: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Site_Abridged_dataMode_Enum::REAL,
    }
  }
}
impl Site_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Site_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idEntity = self.idEntity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idParentSite = self.idParentSite.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSiteID = self.origSiteID.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origLzId = self.origLzId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pin = self.pin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let usage = self.usage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lzUsage = self.lzUsage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let coordDatum = self.coordDatum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let coord = self.coord.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let coordDerivAcc = self.coordDerivAcc;
    let osuffix = self.osuffix.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let iata = self.iata.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let icao = self.icao.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let faa = self.faa.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let airDefArea = self.airDefArea.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let utm = self.utm.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let milGridSys = self.milGridSys.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let milGrid = self.milGrid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let catCode = self.catCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let catText = self.catText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let wac = self.wac.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let polSubdiv = self.polSubdiv.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geoArea = self.geoArea.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geoidalMslSep = self.geoidalMslSep;
    let allegiance = self.allegiance.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altAllegiance = self.altAllegiance.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classRating = self.classRating.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fpa = self.fpa.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let beNumber = self.beNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let runways = self.runways;
    let maxRunwayLength = self.maxRunwayLength;
    let condition = self.condition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let conditionAvail = self.conditionAvail.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let operStatus = self.operStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let grade = self.grade;
    let activity = self.activity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let functPrimary = self.functPrimary.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msnPrimary = self.msnPrimary.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msnPrimarySpec = self.msnPrimarySpec.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nucCap = self.nucCap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ident = self.ident.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let elevMsl = self.elevMsl;
    let elevMslConfLvl = self.elevMslConfLvl;
    let elevMslDerivAcc = self.elevMslDerivAcc;
    let vegHt = self.vegHt;
    let vegType = self.vegType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let popArea = self.popArea;
    let popAreaProx = self.popAreaProx;
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let resProd = self.resProd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eval = self.eval;
    let reviewDate = self.reviewDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let recStatus = self.recStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let symCode = self.symCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let referenceDoc = self.referenceDoc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    Site_Abridged::create(_fbb, &Site_AbridgedArgs{
      id,
      idEntity,
      idParentSite,
      classificationMarking,
      origSiteID,
      origLzId,
      pin,
      type_,
      usage,
      lzUsage,
      name,
      coordDatum,
      coord,
      coordDerivAcc,
      osuffix,
      iata,
      icao,
      faa,
      airDefArea,
      utm,
      milGridSys,
      milGrid,
      catCode,
      catText,
      wac,
      polSubdiv,
      geoArea,
      geoidalMslSep,
      allegiance,
      altAllegiance,
      classRating,
      fpa,
      beNumber,
      runways,
      maxRunwayLength,
      condition,
      conditionAvail,
      operStatus,
      grade,
      activity,
      functPrimary,
      msnPrimary,
      msnPrimarySpec,
      nucCap,
      ident,
      elevMsl,
      elevMslConfLvl,
      elevMslDerivAcc,
      vegHt,
      vegType,
      popArea,
      popAreaProx,
      notes,
      resProd,
      eval,
      reviewDate,
      recStatus,
      symCode,
      referenceDoc,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Site_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_site_abridged_unchecked`.
pub fn root_as_site_abridged(buf: &[u8]) -> Result<Site_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Site_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Site_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_site_abridged_unchecked`.
pub fn size_prefixed_root_as_site_abridged(buf: &[u8]) -> Result<Site_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Site_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Site_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_site_abridged_unchecked`.
pub fn root_as_site_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Site_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Site_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Site_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_site_abridged_unchecked`.
pub fn size_prefixed_root_as_site_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Site_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Site_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Site_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Site_Abridged`.
pub unsafe fn root_as_site_abridged_unchecked(buf: &[u8]) -> Site_Abridged {
  flatbuffers::root_unchecked::<Site_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Site_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Site_Abridged`.
pub unsafe fn size_prefixed_root_as_site_abridged_unchecked(buf: &[u8]) -> Site_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<Site_Abridged>(buf)
}
pub const SITE_ABRIDGED_IDENTIFIER: &str = "SITE";

#[inline]
pub fn site_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SITE_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn site_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SITE_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_site_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Site_Abridged<'a>>) {
  fbb.finish(root, Some(SITE_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_site_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Site_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(SITE_ABRIDGED_IDENTIFIER));
}
