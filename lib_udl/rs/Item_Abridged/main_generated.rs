// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ITEM_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ITEM_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ITEM_ABRIDGED_DATA_MODE_ENUM: [Item_Abridged_dataMode_Enum; 4] = [
  Item_Abridged_dataMode_Enum::REAL,
  Item_Abridged_dataMode_Enum::TEST,
  Item_Abridged_dataMode_Enum::SIMULATED,
  Item_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Item_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Item_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Item_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Item_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Item_Abridged_dataMode_Enum {
    type Output = Item_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Item_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Item_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Item_Abridged_dataMode_Enum {}
pub enum Item_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// No description available.
pub struct Item_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Item_Abridged<'a> {
  type Inner = Item_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Item_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDAIRLOADPLAN: flatbuffers::VOffsetT = 8;
  pub const VT_SCANCODE: flatbuffers::VOffsetT = 10;
  pub const VT_SCGENTOOL: flatbuffers::VOffsetT = 12;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 14;
  pub const VT_CARGOTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_NAME: flatbuffers::VOffsetT = 18;
  pub const VT_DESTINATION: flatbuffers::VOffsetT = 20;
  pub const VT_DEPARTURE: flatbuffers::VOffsetT = 22;
  pub const VT_RECEIVINGUNIT: flatbuffers::VOffsetT = 24;
  pub const VT_RECEIVINGBRANCH: flatbuffers::VOffsetT = 26;
  pub const VT_LASTARRDATE: flatbuffers::VOffsetT = 28;
  pub const VT_ULN: flatbuffers::VOffsetT = 30;
  pub const VT_WEIGHT: flatbuffers::VOffsetT = 32;
  pub const VT_WEIGHTTS: flatbuffers::VOffsetT = 34;
  pub const VT_COMMODITYCODE: flatbuffers::VOffsetT = 36;
  pub const VT_COMMODITYSYS: flatbuffers::VOffsetT = 38;
  pub const VT_PRODUCTCODE: flatbuffers::VOffsetT = 40;
  pub const VT_PRODUCTSYS: flatbuffers::VOffsetT = 42;
  pub const VT_WIDTH: flatbuffers::VOffsetT = 44;
  pub const VT_LENGTH: flatbuffers::VOffsetT = 46;
  pub const VT_HEIGHT: flatbuffers::VOffsetT = 48;
  pub const VT_VOLUME: flatbuffers::VOffsetT = 50;
  pub const VT_CG: flatbuffers::VOffsetT = 52;
  pub const VT_FS: flatbuffers::VOffsetT = 54;
  pub const VT_CENTERLINEOFFSET: flatbuffers::VOffsetT = 56;
  pub const VT_MOMENT: flatbuffers::VOffsetT = 58;
  pub const VT_AIRDROP: flatbuffers::VOffsetT = 60;
  pub const VT_TCN: flatbuffers::VOffsetT = 62;
  pub const VT_HAZCODES: flatbuffers::VOffsetT = 64;
  pub const VT_NETEXPWT: flatbuffers::VOffsetT = 66;
  pub const VT_CONTAINER: flatbuffers::VOffsetT = 68;
  pub const VT_ITEMCONTAINS: flatbuffers::VOffsetT = 70;
  pub const VT_NUMPALLETPOS: flatbuffers::VOffsetT = 72;
  pub const VT_DVCODE: flatbuffers::VOffsetT = 74;
  pub const VT_NOTES: flatbuffers::VOffsetT = 76;
  pub const VT_KEYS: flatbuffers::VOffsetT = 78;
  pub const VT_VALUES: flatbuffers::VOffsetT = 80;
  pub const VT_ALTDATAFORMAT: flatbuffers::VOffsetT = 82;
  pub const VT_ACCSYSTEM: flatbuffers::VOffsetT = 84;
  pub const VT_ACCSYSNOTES: flatbuffers::VOffsetT = 86;
  pub const VT_ACCSYSKEYS: flatbuffers::VOffsetT = 88;
  pub const VT_ACCSYSVALUES: flatbuffers::VOffsetT = 90;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 92;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 94;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 96;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 98;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 100;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 102;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 104;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Item_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Item_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<Item_Abridged<'bldr>> {
    let mut builder = Item_AbridgedBuilder::new(_fbb);
    builder.add_netExpWt(args.netExpWt);
    builder.add_moment(args.moment);
    builder.add_centerlineOffset(args.centerlineOffset);
    builder.add_fs(args.fs);
    builder.add_cg(args.cg);
    builder.add_volume(args.volume);
    builder.add_height(args.height);
    builder.add_length(args.length);
    builder.add_width(args.width);
    builder.add_weight(args.weight);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.accSysValues { builder.add_accSysValues(x); }
    if let Some(x) = args.accSysKeys { builder.add_accSysKeys(x); }
    if let Some(x) = args.accSysNotes { builder.add_accSysNotes(x); }
    if let Some(x) = args.accSystem { builder.add_accSystem(x); }
    if let Some(x) = args.altDataFormat { builder.add_altDataFormat(x); }
    if let Some(x) = args.values { builder.add_values(x); }
    if let Some(x) = args.keys { builder.add_keys(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.dvCode { builder.add_dvCode(x); }
    builder.add_numPalletPos(args.numPalletPos);
    if let Some(x) = args.itemContains { builder.add_itemContains(x); }
    if let Some(x) = args.hazCodes { builder.add_hazCodes(x); }
    if let Some(x) = args.tcn { builder.add_tcn(x); }
    if let Some(x) = args.productSys { builder.add_productSys(x); }
    if let Some(x) = args.productCode { builder.add_productCode(x); }
    if let Some(x) = args.commoditySys { builder.add_commoditySys(x); }
    if let Some(x) = args.commodityCode { builder.add_commodityCode(x); }
    if let Some(x) = args.weightTS { builder.add_weightTS(x); }
    if let Some(x) = args.uln { builder.add_uln(x); }
    if let Some(x) = args.lastArrDate { builder.add_lastArrDate(x); }
    if let Some(x) = args.receivingBranch { builder.add_receivingBranch(x); }
    if let Some(x) = args.receivingUnit { builder.add_receivingUnit(x); }
    if let Some(x) = args.departure { builder.add_departure(x); }
    if let Some(x) = args.destination { builder.add_destination(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.cargoType { builder.add_cargoType(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.scGenTool { builder.add_scGenTool(x); }
    if let Some(x) = args.scanCode { builder.add_scanCode(x); }
    if let Some(x) = args.idAirLoadPlan { builder.add_idAirLoadPlan(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_container(args.container);
    builder.add_airdrop(args.airdrop);
    builder.finish()
  }

  pub fn unpack(&self) -> Item_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idAirLoadPlan = self.idAirLoadPlan().map(|x| {
      x.to_string()
    });
    let scanCode = self.scanCode().map(|x| {
      x.to_string()
    });
    let scGenTool = self.scGenTool().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let cargoType = self.cargoType().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let destination = self.destination().map(|x| {
      x.to_string()
    });
    let departure = self.departure().map(|x| {
      x.to_string()
    });
    let receivingUnit = self.receivingUnit().map(|x| {
      x.to_string()
    });
    let receivingBranch = self.receivingBranch().map(|x| {
      x.to_string()
    });
    let lastArrDate = self.lastArrDate().map(|x| {
      x.to_string()
    });
    let uln = self.uln().map(|x| {
      x.to_string()
    });
    let weight = self.weight();
    let weightTS = self.weightTS().map(|x| {
      x.to_string()
    });
    let commodityCode = self.commodityCode().map(|x| {
      x.to_string()
    });
    let commoditySys = self.commoditySys().map(|x| {
      x.to_string()
    });
    let productCode = self.productCode().map(|x| {
      x.to_string()
    });
    let productSys = self.productSys().map(|x| {
      x.to_string()
    });
    let width = self.width();
    let length = self.length();
    let height = self.height();
    let volume = self.volume();
    let cg = self.cg();
    let fs = self.fs();
    let centerlineOffset = self.centerlineOffset();
    let moment = self.moment();
    let airdrop = self.airdrop();
    let tcn = self.tcn().map(|x| {
      x.to_string()
    });
    let hazCodes = self.hazCodes().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let netExpWt = self.netExpWt();
    let container = self.container();
    let itemContains = self.itemContains().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let numPalletPos = self.numPalletPos();
    let dvCode = self.dvCode().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let keys = self.keys().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let values = self.values().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let altDataFormat = self.altDataFormat().map(|x| {
      x.to_string()
    });
    let accSystem = self.accSystem().map(|x| {
      x.to_string()
    });
    let accSysNotes = self.accSysNotes().map(|x| {
      x.to_string()
    });
    let accSysKeys = self.accSysKeys().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let accSysValues = self.accSysValues().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    Item_AbridgedT {
      id,
      classificationMarking,
      idAirLoadPlan,
      scanCode,
      scGenTool,
      type_,
      cargoType,
      name,
      destination,
      departure,
      receivingUnit,
      receivingBranch,
      lastArrDate,
      uln,
      weight,
      weightTS,
      commodityCode,
      commoditySys,
      productCode,
      productSys,
      width,
      length,
      height,
      volume,
      cg,
      fs,
      centerlineOffset,
      moment,
      airdrop,
      tcn,
      hazCodes,
      netExpWt,
      container,
      itemContains,
      numPalletPos,
      dvCode,
      notes,
      keys,
      values,
      altDataFormat,
      accSystem,
      accSysNotes,
      accSysKeys,
      accSysValues,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 22f1f6da-a568-655a-ea37-76d013d04853
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The UDL ID of the air load plan this item is associated with.
  /// Example: /// Example: 1038c389-d38e-270f-51cc-6a12e905abe8
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idAirLoadPlan(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_IDAIRLOADPLAN, None)}
  }
  /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC. If no scanCode or tracking number equivalent is available, 'NONE' should be used.
  /// Example: /// Example: 12345ABCD
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn scanCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_SCANCODE, None)}
  }
  /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  /// Example: /// Example: bID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn scGenTool(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_SCGENTOOL, None)}
  }
  /// The item type of this record (e.g. EQUIPMENT, CARGO, PASSENGER).
  /// Example: /// Example: CARGO
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_TYPE_, None)}
  }
  /// The type of cargo (e.g. PALLET, ROLLING STOCK, LOOSE, OTHER). Applicable for cargo item types only.
  /// Example: /// Example: PALLET
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn cargoType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_CARGOTYPE, None)}
  }
  /// Name of the item. Applicable for equipment and cargo item types only.
  /// Example: /// Example: Product Name
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_NAME, None)}
  }
  /// The destination of the item, typically an ICAO or port code. Applicable for cargo and passenger item types only.
  /// Example: /// Example: RMS
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn destination(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_DESTINATION, None)}
  }
  /// The departure code or location where this item has left or is leaving.
  /// Example: /// Example: CHS
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn departure(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_DEPARTURE, None)}
  }
  /// The name of the unit receiving this item.
  /// Example: /// Example: 50 SBN
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn receivingUnit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_RECEIVINGUNIT, None)}
  }
  /// The military branch receiving this item.
  /// Example: /// Example: Air Force
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn receivingBranch(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_RECEIVINGBRANCH, None)}
  }
  /// The latest acceptable arrival date of the item at the destination, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2023-03-13
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lastArrDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_LASTARRDATE, None)}
  }
  /// The unit line number of this item.
  /// Example: /// Example: T01ME01
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn uln(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_ULN, None)}
  }
  /// Weight of the item in kilograms (if item is a passenger, include on-person bags).
  /// Example: /// Example: 5443.335
  /// Constraints: No constraints specified.
  #[inline]
  pub fn weight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_WEIGHT, Some(0.0)).unwrap()}
  }
  /// Timestamp when the weight was taken, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-03-13T16:06:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn weightTS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_WEIGHTTS, None)}
  }
  /// The classification code of the commodity or group of commodities.
  /// Example: /// Example: 2304116
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn commodityCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_COMMODITYCODE, None)}
  }
  /// The classification system denoting the commodity code, commodityCode (e.g. AIR, WATER, NMFC, UFC, STCC, DODUNQ, etc.).
  /// Example: /// Example: STCC
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn commoditySys(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_COMMODITYSYS, None)}
  }
  /// The code denoting the type of material item.
  /// Example: /// Example: 530500234
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn productCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_PRODUCTCODE, None)}
  }
  /// The assigning system that denotes the type of material item, productCode (e.g. NSN-national stock number, NDC-national drug code, MPN-manufacturer part number, etc.).
  /// Example: /// Example: NSN
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn productSys(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_PRODUCTSYS, None)}
  }
  /// Width of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn width(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_WIDTH, Some(0.0)).unwrap()}
  }
  /// Length of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn length(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_LENGTH, Some(0.0)).unwrap()}
  }
  /// Height of the cargo in meters. Applicable for cargo item types only.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn height(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_HEIGHT, Some(0.0)).unwrap()}
  }
  /// The volume of the item, in cubic meters. Applicable for cargo item types only.
  /// Example: /// Example: 7.8902
  /// Constraints: No constraints specified.
  #[inline]
  pub fn volume(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_VOLUME, Some(0.0)).unwrap()}
  }
  /// Center of gravity position of the item, measured from the item's front datum, in centimeters.
  /// Example: /// Example: 112.014
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cg(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_CG, Some(0.0)).unwrap()}
  }
  /// The fuselage station of the item measured from the reference datum, in centimeters. Applicable for cargo and passenger item types only.
  /// Example: /// Example: 412.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fs(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_FS, Some(0.0)).unwrap()}
  }
  /// How far left or right of centerline is the item in meters. Applicable for cargo and passenger item types only.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn centerlineOffset(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_CENTERLINEOFFSET, Some(0.0)).unwrap()}
  }
  /// Moment of the item in Newton-meters. Applicable for equipment and cargo item types only.
  /// Example: /// Example: 4000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn moment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_MOMENT, Some(0.0)).unwrap()}
  }
  /// Flag indicating this item is planned to be airdropped. Applicable for cargo and passenger item types only.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn airdrop(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Item_Abridged::VT_AIRDROP, Some(false)).unwrap()}
  }
  /// Transportation Control Number of the cargo. Applicable for cargo item types only.
  /// Example: /// Example: M1358232245912XXX
  /// Constraints: Minimum length = 0, Maximum length = 17
  #[inline]
  pub fn tcn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_TCN, None)}
  }
  /// Array of UN hazard classes or division codes that apply to this item.
  /// Example: /// Example: [1.1, 1.2]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hazCodes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Item_Abridged::VT_HAZCODES, None)}
  }
  /// Net explosive weight of the item, in kilograms.
  /// Example: /// Example: 51.437
  /// Constraints: No constraints specified.
  #[inline]
  pub fn netExpWt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Item_Abridged::VT_NETEXPWT, Some(0.0)).unwrap()}
  }
  /// Flag indicating this item acts as a container and contains additional items.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn container(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Item_Abridged::VT_CONTAINER, Some(false)).unwrap()}
  }
  /// Array of tracking identifiers that are contained within this item.
  /// Example: /// Example: ['2UJ8843K', '745YV1T65']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn itemContains(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Item_Abridged::VT_ITEMCONTAINS, None)}
  }
  /// Number of pallet positions or equivalent on the aircraft, ship, or conveyance equipment that this item occupies.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numPalletPos(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Item_Abridged::VT_NUMPALLETPOS, Some(0)).unwrap()}
  }
  /// United States Distinguished Visitor Code, only applicable to people.
  /// Example: /// Example: DV-2
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn dvCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_DVCODE, None)}
  }
  /// Optional notes or comments about this item.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_NOTES, None)}
  }
  /// Array of keys that may be associated to this item. The entries in this array must correspond to the position index in the values array. This array must be the same length as values..
  /// Example: /// Example: ['key1', 'key2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn keys(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Item_Abridged::VT_KEYS, None)}
  }
  /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['value1', 'value2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn values(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Item_Abridged::VT_VALUES, None)}
  }
  /// Name of the additional data format so downstream consuming applications can know how to parse it. Typically includes the source system name and the format name.
  /// Example: /// Example: Alt Data Format
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn altDataFormat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_ALTDATAFORMAT, None)}
  }
  /// Name of the system that accepted this item from a customer. Where a user or application could go look for additional information.
  /// Example: /// Example: Accepting System
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn accSystem(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_ACCSYSTEM, None)}
  }
  /// Additional data required to find this item in the accepting system.
  /// Example: /// Example: Accepting System Notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn accSysNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_ACCSYSNOTES, None)}
  }
  /// Array of keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysValues array. This array must be the same length as accSysValues.
  /// Example: /// Example: ['System key1', 'System key2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn accSysKeys(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Item_Abridged::VT_ACCSYSKEYS, None)}
  }
  /// Array of values for the keys that may be associated to the accepting system data. The entries in this array must correspond to the position index in accSysKeys array. This array must be the same length as accSysKeys.
  /// Example: /// Example: ['System value1', 'System value2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn accSysValues(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Item_Abridged::VT_ACCSYSVALUES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Item_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Item_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Item_Abridged_dataMode_Enum>(Item_Abridged::VT_DATAMODE, Some(Item_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Item_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idAirLoadPlan", Self::VT_IDAIRLOADPLAN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scanCode", Self::VT_SCANCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scGenTool", Self::VT_SCGENTOOL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cargoType", Self::VT_CARGOTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("destination", Self::VT_DESTINATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("departure", Self::VT_DEPARTURE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receivingUnit", Self::VT_RECEIVINGUNIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receivingBranch", Self::VT_RECEIVINGBRANCH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastArrDate", Self::VT_LASTARRDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("uln", Self::VT_ULN, false)?
     .visit_field::<f64>("weight", Self::VT_WEIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("weightTS", Self::VT_WEIGHTTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("commodityCode", Self::VT_COMMODITYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("commoditySys", Self::VT_COMMODITYSYS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("productCode", Self::VT_PRODUCTCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("productSys", Self::VT_PRODUCTSYS, false)?
     .visit_field::<f64>("width", Self::VT_WIDTH, false)?
     .visit_field::<f64>("length", Self::VT_LENGTH, false)?
     .visit_field::<f64>("height", Self::VT_HEIGHT, false)?
     .visit_field::<f64>("volume", Self::VT_VOLUME, false)?
     .visit_field::<f64>("cg", Self::VT_CG, false)?
     .visit_field::<f64>("fs", Self::VT_FS, false)?
     .visit_field::<f64>("centerlineOffset", Self::VT_CENTERLINEOFFSET, false)?
     .visit_field::<f64>("moment", Self::VT_MOMENT, false)?
     .visit_field::<bool>("airdrop", Self::VT_AIRDROP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tcn", Self::VT_TCN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("hazCodes", Self::VT_HAZCODES, false)?
     .visit_field::<f64>("netExpWt", Self::VT_NETEXPWT, false)?
     .visit_field::<bool>("container", Self::VT_CONTAINER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("itemContains", Self::VT_ITEMCONTAINS, false)?
     .visit_field::<i32>("numPalletPos", Self::VT_NUMPALLETPOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dvCode", Self::VT_DVCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("keys", Self::VT_KEYS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("values", Self::VT_VALUES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altDataFormat", Self::VT_ALTDATAFORMAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("accSystem", Self::VT_ACCSYSTEM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("accSysNotes", Self::VT_ACCSYSNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("accSysKeys", Self::VT_ACCSYSKEYS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("accSysValues", Self::VT_ACCSYSVALUES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<Item_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct Item_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idAirLoadPlan: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scanCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scGenTool: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cargoType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub destination: Option<flatbuffers::WIPOffset<&'a str>>,
    pub departure: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receivingUnit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receivingBranch: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastArrDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uln: Option<flatbuffers::WIPOffset<&'a str>>,
    pub weight: f64,
    pub weightTS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub commodityCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub commoditySys: Option<flatbuffers::WIPOffset<&'a str>>,
    pub productCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub productSys: Option<flatbuffers::WIPOffset<&'a str>>,
    pub width: f64,
    pub length: f64,
    pub height: f64,
    pub volume: f64,
    pub cg: f64,
    pub fs: f64,
    pub centerlineOffset: f64,
    pub moment: f64,
    pub airdrop: bool,
    pub tcn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hazCodes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub netExpWt: f64,
    pub container: bool,
    pub itemContains: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub numPalletPos: i32,
    pub dvCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub keys: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub altDataFormat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub accSystem: Option<flatbuffers::WIPOffset<&'a str>>,
    pub accSysNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub accSysKeys: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub accSysValues: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Item_Abridged_dataMode_Enum,
}
impl<'a> Default for Item_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    Item_AbridgedArgs {
      id: None,
      classificationMarking: None,
      idAirLoadPlan: None,
      scanCode: None,
      scGenTool: None,
      type_: None,
      cargoType: None,
      name: None,
      destination: None,
      departure: None,
      receivingUnit: None,
      receivingBranch: None,
      lastArrDate: None,
      uln: None,
      weight: 0.0,
      weightTS: None,
      commodityCode: None,
      commoditySys: None,
      productCode: None,
      productSys: None,
      width: 0.0,
      length: 0.0,
      height: 0.0,
      volume: 0.0,
      cg: 0.0,
      fs: 0.0,
      centerlineOffset: 0.0,
      moment: 0.0,
      airdrop: false,
      tcn: None,
      hazCodes: None,
      netExpWt: 0.0,
      container: false,
      itemContains: None,
      numPalletPos: 0,
      dvCode: None,
      notes: None,
      keys: None,
      values: None,
      altDataFormat: None,
      accSystem: None,
      accSysNotes: None,
      accSysKeys: None,
      accSysValues: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Item_Abridged_dataMode_Enum::REAL,
    }
  }
}

pub struct Item_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Item_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idAirLoadPlan(&mut self, idAirLoadPlan: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_IDAIRLOADPLAN, idAirLoadPlan);
  }
  #[inline]
  pub fn add_scanCode(&mut self, scanCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_SCANCODE, scanCode);
  }
  #[inline]
  pub fn add_scGenTool(&mut self, scGenTool: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_SCGENTOOL, scGenTool);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_cargoType(&mut self, cargoType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_CARGOTYPE, cargoType);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_NAME, name);
  }
  #[inline]
  pub fn add_destination(&mut self, destination: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_DESTINATION, destination);
  }
  #[inline]
  pub fn add_departure(&mut self, departure: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_DEPARTURE, departure);
  }
  #[inline]
  pub fn add_receivingUnit(&mut self, receivingUnit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_RECEIVINGUNIT, receivingUnit);
  }
  #[inline]
  pub fn add_receivingBranch(&mut self, receivingBranch: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_RECEIVINGBRANCH, receivingBranch);
  }
  #[inline]
  pub fn add_lastArrDate(&mut self, lastArrDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_LASTARRDATE, lastArrDate);
  }
  #[inline]
  pub fn add_uln(&mut self, uln: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ULN, uln);
  }
  #[inline]
  pub fn add_weight(&mut self, weight: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_WEIGHT, weight, 0.0);
  }
  #[inline]
  pub fn add_weightTS(&mut self, weightTS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_WEIGHTTS, weightTS);
  }
  #[inline]
  pub fn add_commodityCode(&mut self, commodityCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_COMMODITYCODE, commodityCode);
  }
  #[inline]
  pub fn add_commoditySys(&mut self, commoditySys: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_COMMODITYSYS, commoditySys);
  }
  #[inline]
  pub fn add_productCode(&mut self, productCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_PRODUCTCODE, productCode);
  }
  #[inline]
  pub fn add_productSys(&mut self, productSys: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_PRODUCTSYS, productSys);
  }
  #[inline]
  pub fn add_width(&mut self, width: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_WIDTH, width, 0.0);
  }
  #[inline]
  pub fn add_length(&mut self, length: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_LENGTH, length, 0.0);
  }
  #[inline]
  pub fn add_height(&mut self, height: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_HEIGHT, height, 0.0);
  }
  #[inline]
  pub fn add_volume(&mut self, volume: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_VOLUME, volume, 0.0);
  }
  #[inline]
  pub fn add_cg(&mut self, cg: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_CG, cg, 0.0);
  }
  #[inline]
  pub fn add_fs(&mut self, fs: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_FS, fs, 0.0);
  }
  #[inline]
  pub fn add_centerlineOffset(&mut self, centerlineOffset: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_CENTERLINEOFFSET, centerlineOffset, 0.0);
  }
  #[inline]
  pub fn add_moment(&mut self, moment: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_MOMENT, moment, 0.0);
  }
  #[inline]
  pub fn add_airdrop(&mut self, airdrop: bool) {
    self.fbb_.push_slot::<bool>(Item_Abridged::VT_AIRDROP, airdrop, false);
  }
  #[inline]
  pub fn add_tcn(&mut self, tcn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_TCN, tcn);
  }
  #[inline]
  pub fn add_hazCodes(&mut self, hazCodes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_HAZCODES, hazCodes);
  }
  #[inline]
  pub fn add_netExpWt(&mut self, netExpWt: f64) {
    self.fbb_.push_slot::<f64>(Item_Abridged::VT_NETEXPWT, netExpWt, 0.0);
  }
  #[inline]
  pub fn add_container(&mut self, container: bool) {
    self.fbb_.push_slot::<bool>(Item_Abridged::VT_CONTAINER, container, false);
  }
  #[inline]
  pub fn add_itemContains(&mut self, itemContains: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ITEMCONTAINS, itemContains);
  }
  #[inline]
  pub fn add_numPalletPos(&mut self, numPalletPos: i32) {
    self.fbb_.push_slot::<i32>(Item_Abridged::VT_NUMPALLETPOS, numPalletPos, 0);
  }
  #[inline]
  pub fn add_dvCode(&mut self, dvCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_DVCODE, dvCode);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_keys(&mut self, keys: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_KEYS, keys);
  }
  #[inline]
  pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_VALUES, values);
  }
  #[inline]
  pub fn add_altDataFormat(&mut self, altDataFormat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ALTDATAFORMAT, altDataFormat);
  }
  #[inline]
  pub fn add_accSystem(&mut self, accSystem: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ACCSYSTEM, accSystem);
  }
  #[inline]
  pub fn add_accSysNotes(&mut self, accSysNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ACCSYSNOTES, accSysNotes);
  }
  #[inline]
  pub fn add_accSysKeys(&mut self, accSysKeys: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ACCSYSKEYS, accSysKeys);
  }
  #[inline]
  pub fn add_accSysValues(&mut self, accSysValues: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ACCSYSVALUES, accSysValues);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Item_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Item_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<Item_Abridged_dataMode_Enum>(Item_Abridged::VT_DATAMODE, dataMode, Item_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Item_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Item_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Item_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Item_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Item_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idAirLoadPlan", &self.idAirLoadPlan());
      ds.field("scanCode", &self.scanCode());
      ds.field("scGenTool", &self.scGenTool());
      ds.field("type_", &self.type_());
      ds.field("cargoType", &self.cargoType());
      ds.field("name", &self.name());
      ds.field("destination", &self.destination());
      ds.field("departure", &self.departure());
      ds.field("receivingUnit", &self.receivingUnit());
      ds.field("receivingBranch", &self.receivingBranch());
      ds.field("lastArrDate", &self.lastArrDate());
      ds.field("uln", &self.uln());
      ds.field("weight", &self.weight());
      ds.field("weightTS", &self.weightTS());
      ds.field("commodityCode", &self.commodityCode());
      ds.field("commoditySys", &self.commoditySys());
      ds.field("productCode", &self.productCode());
      ds.field("productSys", &self.productSys());
      ds.field("width", &self.width());
      ds.field("length", &self.length());
      ds.field("height", &self.height());
      ds.field("volume", &self.volume());
      ds.field("cg", &self.cg());
      ds.field("fs", &self.fs());
      ds.field("centerlineOffset", &self.centerlineOffset());
      ds.field("moment", &self.moment());
      ds.field("airdrop", &self.airdrop());
      ds.field("tcn", &self.tcn());
      ds.field("hazCodes", &self.hazCodes());
      ds.field("netExpWt", &self.netExpWt());
      ds.field("container", &self.container());
      ds.field("itemContains", &self.itemContains());
      ds.field("numPalletPos", &self.numPalletPos());
      ds.field("dvCode", &self.dvCode());
      ds.field("notes", &self.notes());
      ds.field("keys", &self.keys());
      ds.field("values", &self.values());
      ds.field("altDataFormat", &self.altDataFormat());
      ds.field("accSystem", &self.accSystem());
      ds.field("accSysNotes", &self.accSysNotes());
      ds.field("accSysKeys", &self.accSysKeys());
      ds.field("accSysValues", &self.accSysValues());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Item_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idAirLoadPlan: Option<String>,
  pub scanCode: Option<String>,
  pub scGenTool: Option<String>,
  pub type_: Option<String>,
  pub cargoType: Option<String>,
  pub name: Option<String>,
  pub destination: Option<String>,
  pub departure: Option<String>,
  pub receivingUnit: Option<String>,
  pub receivingBranch: Option<String>,
  pub lastArrDate: Option<String>,
  pub uln: Option<String>,
  pub weight: f64,
  pub weightTS: Option<String>,
  pub commodityCode: Option<String>,
  pub commoditySys: Option<String>,
  pub productCode: Option<String>,
  pub productSys: Option<String>,
  pub width: f64,
  pub length: f64,
  pub height: f64,
  pub volume: f64,
  pub cg: f64,
  pub fs: f64,
  pub centerlineOffset: f64,
  pub moment: f64,
  pub airdrop: bool,
  pub tcn: Option<String>,
  pub hazCodes: Option<Vec<String>>,
  pub netExpWt: f64,
  pub container: bool,
  pub itemContains: Option<Vec<String>>,
  pub numPalletPos: i32,
  pub dvCode: Option<String>,
  pub notes: Option<String>,
  pub keys: Option<Vec<String>>,
  pub values: Option<Vec<String>>,
  pub altDataFormat: Option<String>,
  pub accSystem: Option<String>,
  pub accSysNotes: Option<String>,
  pub accSysKeys: Option<Vec<String>>,
  pub accSysValues: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: Item_Abridged_dataMode_Enum,
}
impl Default for Item_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idAirLoadPlan: None,
      scanCode: None,
      scGenTool: None,
      type_: None,
      cargoType: None,
      name: None,
      destination: None,
      departure: None,
      receivingUnit: None,
      receivingBranch: None,
      lastArrDate: None,
      uln: None,
      weight: 0.0,
      weightTS: None,
      commodityCode: None,
      commoditySys: None,
      productCode: None,
      productSys: None,
      width: 0.0,
      length: 0.0,
      height: 0.0,
      volume: 0.0,
      cg: 0.0,
      fs: 0.0,
      centerlineOffset: 0.0,
      moment: 0.0,
      airdrop: false,
      tcn: None,
      hazCodes: None,
      netExpWt: 0.0,
      container: false,
      itemContains: None,
      numPalletPos: 0,
      dvCode: None,
      notes: None,
      keys: None,
      values: None,
      altDataFormat: None,
      accSystem: None,
      accSysNotes: None,
      accSysKeys: None,
      accSysValues: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Item_Abridged_dataMode_Enum::REAL,
    }
  }
}
impl Item_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Item_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idAirLoadPlan = self.idAirLoadPlan.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let scanCode = self.scanCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let scGenTool = self.scGenTool.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cargoType = self.cargoType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let destination = self.destination.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let departure = self.departure.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receivingUnit = self.receivingUnit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receivingBranch = self.receivingBranch.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastArrDate = self.lastArrDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let uln = self.uln.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let weight = self.weight;
    let weightTS = self.weightTS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let commodityCode = self.commodityCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let commoditySys = self.commoditySys.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let productCode = self.productCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let productSys = self.productSys.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let width = self.width;
    let length = self.length;
    let height = self.height;
    let volume = self.volume;
    let cg = self.cg;
    let fs = self.fs;
    let centerlineOffset = self.centerlineOffset;
    let moment = self.moment;
    let airdrop = self.airdrop;
    let tcn = self.tcn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let hazCodes = self.hazCodes.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let netExpWt = self.netExpWt;
    let container = self.container;
    let itemContains = self.itemContains.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let numPalletPos = self.numPalletPos;
    let dvCode = self.dvCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let keys = self.keys.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let values = self.values.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let altDataFormat = self.altDataFormat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let accSystem = self.accSystem.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let accSysNotes = self.accSysNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let accSysKeys = self.accSysKeys.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let accSysValues = self.accSysValues.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    Item_Abridged::create(_fbb, &Item_AbridgedArgs{
      id,
      classificationMarking,
      idAirLoadPlan,
      scanCode,
      scGenTool,
      type_,
      cargoType,
      name,
      destination,
      departure,
      receivingUnit,
      receivingBranch,
      lastArrDate,
      uln,
      weight,
      weightTS,
      commodityCode,
      commoditySys,
      productCode,
      productSys,
      width,
      length,
      height,
      volume,
      cg,
      fs,
      centerlineOffset,
      moment,
      airdrop,
      tcn,
      hazCodes,
      netExpWt,
      container,
      itemContains,
      numPalletPos,
      dvCode,
      notes,
      keys,
      values,
      altDataFormat,
      accSystem,
      accSysNotes,
      accSysKeys,
      accSysValues,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Item_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_abridged_unchecked`.
pub fn root_as_item_abridged(buf: &[u8]) -> Result<Item_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Item_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Item_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_item_abridged_unchecked`.
pub fn size_prefixed_root_as_item_abridged(buf: &[u8]) -> Result<Item_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Item_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Item_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_abridged_unchecked`.
pub fn root_as_item_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Item_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Item_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Item_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_abridged_unchecked`.
pub fn size_prefixed_root_as_item_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Item_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Item_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Item_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Item_Abridged`.
pub unsafe fn root_as_item_abridged_unchecked(buf: &[u8]) -> Item_Abridged {
  flatbuffers::root_unchecked::<Item_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Item_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Item_Abridged`.
pub unsafe fn size_prefixed_root_as_item_abridged_unchecked(buf: &[u8]) -> Item_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<Item_Abridged>(buf)
}
pub const ITEM_ABRIDGED_IDENTIFIER: &str = "ITEM";

#[inline]
pub fn item_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ITEM_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn item_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ITEM_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_item_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Item_Abridged<'a>>) {
  fbb.finish(root, Some(ITEM_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_item_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Item_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(ITEM_ABRIDGED_IDENTIFIER));
}
