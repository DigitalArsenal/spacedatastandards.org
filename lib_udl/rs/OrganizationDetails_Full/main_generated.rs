// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ORGANIZATION_DETAILS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ORGANIZATION_DETAILS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ORGANIZATION_DETAILS_FULL_DATA_MODE_ENUM: [OrganizationDetails_Full_dataMode_Enum; 4] = [
  OrganizationDetails_Full_dataMode_Enum::REAL,
  OrganizationDetails_Full_dataMode_Enum::TEST,
  OrganizationDetails_Full_dataMode_Enum::SIMULATED,
  OrganizationDetails_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OrganizationDetails_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl OrganizationDetails_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OrganizationDetails_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OrganizationDetails_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OrganizationDetails_Full_dataMode_Enum {
    type Output = OrganizationDetails_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OrganizationDetails_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OrganizationDetails_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OrganizationDetails_Full_dataMode_Enum {}
pub enum OrganizationDetails_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of additional detailed organization data as collected by a particular source.
pub struct OrganizationDetails_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OrganizationDetails_Full<'a> {
  type Inner = OrganizationDetails_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OrganizationDetails_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDORGANIZATION: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_EMAIL: flatbuffers::VOffsetT = 12;
  pub const VT_ADDRESS1: flatbuffers::VOffsetT = 14;
  pub const VT_ADDRESS2: flatbuffers::VOffsetT = 16;
  pub const VT_ADDRESS3: flatbuffers::VOffsetT = 18;
  pub const VT_GEOADMINLEVEL1: flatbuffers::VOffsetT = 20;
  pub const VT_GEOADMINLEVEL2: flatbuffers::VOffsetT = 22;
  pub const VT_GEOADMINLEVEL3: flatbuffers::VOffsetT = 24;
  pub const VT_POSTALCODE: flatbuffers::VOffsetT = 26;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 28;
  pub const VT_FORMERORGID: flatbuffers::VOffsetT = 30;
  pub const VT_PARENTORGID: flatbuffers::VOffsetT = 32;
  pub const VT_FINANCIALYEARENDDATE: flatbuffers::VOffsetT = 34;
  pub const VT_REVENUE: flatbuffers::VOffsetT = 36;
  pub const VT_PROFIT: flatbuffers::VOffsetT = 38;
  pub const VT_EBITDA: flatbuffers::VOffsetT = 40;
  pub const VT_FTES: flatbuffers::VOffsetT = 42;
  pub const VT_BROKER: flatbuffers::VOffsetT = 44;
  pub const VT_CEO: flatbuffers::VOffsetT = 46;
  pub const VT_CFO: flatbuffers::VOffsetT = 48;
  pub const VT_CTO: flatbuffers::VOffsetT = 50;
  pub const VT_RISKMANAGER: flatbuffers::VOffsetT = 52;
  pub const VT_MASSRANKING: flatbuffers::VOffsetT = 54;
  pub const VT_REVENUERANKING: flatbuffers::VOffsetT = 56;
  pub const VT_FINANCIALNOTES: flatbuffers::VOffsetT = 58;
  pub const VT_SERVICESNOTES: flatbuffers::VOffsetT = 60;
  pub const VT_FLEETPLANNOTES: flatbuffers::VOffsetT = 62;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 64;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 66;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 68;
  pub const VT_TAGS: flatbuffers::VOffsetT = 70;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 74;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 76;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 78;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 80;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OrganizationDetails_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OrganizationDetails_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<OrganizationDetails_Full<'bldr>> {
    let mut builder = OrganizationDetails_FullBuilder::new(_fbb);
    builder.add_ebitda(args.ebitda);
    builder.add_profit(args.profit);
    builder.add_revenue(args.revenue);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.fleetPlanNotes { builder.add_fleetPlanNotes(x); }
    if let Some(x) = args.servicesNotes { builder.add_servicesNotes(x); }
    if let Some(x) = args.financialNotes { builder.add_financialNotes(x); }
    builder.add_revenueRanking(args.revenueRanking);
    builder.add_massRanking(args.massRanking);
    if let Some(x) = args.riskManager { builder.add_riskManager(x); }
    if let Some(x) = args.cto { builder.add_cto(x); }
    if let Some(x) = args.cfo { builder.add_cfo(x); }
    if let Some(x) = args.ceo { builder.add_ceo(x); }
    if let Some(x) = args.broker { builder.add_broker(x); }
    builder.add_ftes(args.ftes);
    if let Some(x) = args.financialYearEndDate { builder.add_financialYearEndDate(x); }
    if let Some(x) = args.parentOrgId { builder.add_parentOrgId(x); }
    if let Some(x) = args.formerOrgId { builder.add_formerOrgId(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.postalCode { builder.add_postalCode(x); }
    if let Some(x) = args.geoAdminLevel3 { builder.add_geoAdminLevel3(x); }
    if let Some(x) = args.geoAdminLevel2 { builder.add_geoAdminLevel2(x); }
    if let Some(x) = args.geoAdminLevel1 { builder.add_geoAdminLevel1(x); }
    if let Some(x) = args.address3 { builder.add_address3(x); }
    if let Some(x) = args.address2 { builder.add_address2(x); }
    if let Some(x) = args.address1 { builder.add_address1(x); }
    if let Some(x) = args.email { builder.add_email(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idOrganization { builder.add_idOrganization(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> OrganizationDetails_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idOrganization = self.idOrganization().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let email = self.email().map(|x| {
      x.to_string()
    });
    let address1 = self.address1().map(|x| {
      x.to_string()
    });
    let address2 = self.address2().map(|x| {
      x.to_string()
    });
    let address3 = self.address3().map(|x| {
      x.to_string()
    });
    let geoAdminLevel1 = self.geoAdminLevel1().map(|x| {
      x.to_string()
    });
    let geoAdminLevel2 = self.geoAdminLevel2().map(|x| {
      x.to_string()
    });
    let geoAdminLevel3 = self.geoAdminLevel3().map(|x| {
      x.to_string()
    });
    let postalCode = self.postalCode().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let formerOrgId = self.formerOrgId().map(|x| {
      x.to_string()
    });
    let parentOrgId = self.parentOrgId().map(|x| {
      x.to_string()
    });
    let financialYearEndDate = self.financialYearEndDate().map(|x| {
      x.to_string()
    });
    let revenue = self.revenue();
    let profit = self.profit();
    let ebitda = self.ebitda();
    let ftes = self.ftes();
    let broker = self.broker().map(|x| {
      x.to_string()
    });
    let ceo = self.ceo().map(|x| {
      x.to_string()
    });
    let cfo = self.cfo().map(|x| {
      x.to_string()
    });
    let cto = self.cto().map(|x| {
      x.to_string()
    });
    let riskManager = self.riskManager().map(|x| {
      x.to_string()
    });
    let massRanking = self.massRanking();
    let revenueRanking = self.revenueRanking();
    let financialNotes = self.financialNotes().map(|x| {
      x.to_string()
    });
    let servicesNotes = self.servicesNotes().map(|x| {
      x.to_string()
    });
    let fleetPlanNotes = self.fleetPlanNotes().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    OrganizationDetails_FullT {
      id,
      idOrganization,
      classificationMarking,
      name,
      email,
      address1,
      address2,
      address3,
      geoAdminLevel1,
      geoAdminLevel2,
      geoAdminLevel3,
      postalCode,
      description,
      formerOrgId,
      parentOrgId,
      financialYearEndDate,
      revenue,
      profit,
      ebitda,
      ftes,
      broker,
      ceo,
      cfo,
      cto,
      riskManager,
      massRanking,
      revenueRanking,
      financialNotes,
      servicesNotes,
      fleetPlanNotes,
      source,
      origin,
      dataMode,
      tags,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ORGANIZATIONDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_ID, None)}
  }
  /// Unique identifier of the parent organization.
  /// Example: /// Example: ORGANIZATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idOrganization(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_IDORGANIZATION, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Organization details name.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_NAME, None)}
  }
  /// Listed contact email address for the organization.
  /// Example: /// Example: some_organization@organization.com
  /// Constraints: Minimum length = 0, Maximum length = 320
  #[inline]
  pub fn email(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_EMAIL, None)}
  }
  /// Street number of the organization.
  /// Example: /// Example: 123 Main Street
  /// Constraints: Minimum length = 0, Maximum length = 120
  #[inline]
  pub fn address1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_ADDRESS1, None)}
  }
  /// Field for additional organization address information such as PO Box and unit number.
  /// Example: /// Example: Apt 4B
  /// Constraints: Minimum length = 0, Maximum length = 120
  #[inline]
  pub fn address2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_ADDRESS2, None)}
  }
  /// Contains the third line of address information for an organization.
  /// Example: /// Example: Colorado Springs CO, 80903
  /// Constraints: Minimum length = 0, Maximum length = 120
  #[inline]
  pub fn address3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_ADDRESS3, None)}
  }
  /// Administrative boundaries of the first sub-national level. Level 1 is simply the largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a state or province.
  /// Example: /// Example: Colorado
  /// Constraints: Minimum length = 0, Maximum length = 120
  #[inline]
  pub fn geoAdminLevel1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_GEOADMINLEVEL1, None)}
  }
  /// Administrative boundaries of the second sub-national level. Level 2 is simply the second largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a county or district.
  /// Example: /// Example: El Paso County
  /// Constraints: Minimum length = 0, Maximum length = 120
  #[inline]
  pub fn geoAdminLevel2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_GEOADMINLEVEL2, None)}
  }
  /// Administrative boundaries of the third sub-national level. Level 3 is simply the third largest demarcation under whatever demarcation criteria has been determined by the governing body. For example, this may be a city or township.
  /// Example: /// Example: Colorado Springs
  /// Constraints: Minimum length = 0, Maximum length = 120
  #[inline]
  pub fn geoAdminLevel3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_GEOADMINLEVEL3, None)}
  }
  /// A postal code, such as PIN or ZIP Code, is a series of letters or digits or both included in the postal address of the organization.
  /// Example: /// Example: 80903
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn postalCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_POSTALCODE, None)}
  }
  /// Organization description.
  /// Example: /// Example: Example description
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_DESCRIPTION, None)}
  }
  /// Former organization ID (if this organization previously existed as another organization).
  /// Example: /// Example: FORMERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn formerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_FORMERORGID, None)}
  }
  /// Parent organization ID of this organization if it is a child organization.
  /// Example: /// Example: PARENTORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn parentOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_PARENTORGID, None)}
  }
  /// For organizations of type CORPORATION, the effective financial year end date for revenue, EBITDA, and profit values.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn financialYearEndDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_FINANCIALYEARENDDATE, None)}
  }
  /// For organizations of type CORPORATION, total annual revenue as of financialYearEndDate in US Dollars.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn revenue(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrganizationDetails_Full::VT_REVENUE, Some(0.0)).unwrap()}
  }
  /// For organizations of type CORPORATION, total annual profit as of financialYearEndDate in US Dollars.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn profit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrganizationDetails_Full::VT_PROFIT, Some(0.0)).unwrap()}
  }
  /// For organizations of type CORPORATION, the company EBITDA value as of financialYearEndDate in US Dollars.
  /// Example: /// Example: 123.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ebitda(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(OrganizationDetails_Full::VT_EBITDA, Some(0.0)).unwrap()}
  }
  /// Total number of FTEs in this organization.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ftes(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OrganizationDetails_Full::VT_FTES, Some(0)).unwrap()}
  }
  /// Designated broker for this organization.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn broker(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_BROKER, None)}
  }
  /// For organizations of type CORPORATION, the name of the Chief Executive Officer.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn ceo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_CEO, None)}
  }
  /// For organizations of type CORPORATION, the name of the Chief Financial Officer.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn cfo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_CFO, None)}
  }
  /// For organizations of type CORPORATION, the name of the Chief Technology Officer.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn cto(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_CTO, None)}
  }
  /// The name of the risk manager for the organization.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn riskManager(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_RISKMANAGER, None)}
  }
  /// Mass ranking for this organization.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn massRanking(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OrganizationDetails_Full::VT_MASSRANKING, Some(0)).unwrap()}
  }
  /// Revenue ranking for this organization.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn revenueRanking(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OrganizationDetails_Full::VT_REVENUERANKING, Some(0)).unwrap()}
  }
  /// For organizations of type CORPORATION, notes on company financials.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn financialNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_FINANCIALNOTES, None)}
  }
  /// Notes on the services provided by the organization.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn servicesNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_SERVICESNOTES, None)}
  }
  /// Satellite fleet planning notes for this organization.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn fleetPlanNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_FLEETPLANNOTES, None)}
  }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> OrganizationDetails_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OrganizationDetails_Full_dataMode_Enum>(OrganizationDetails_Full::VT_DATAMODE, Some(OrganizationDetails_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OrganizationDetails_Full::VT_TAGS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_UPDATEDBY, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OrganizationDetails_Full::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for OrganizationDetails_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOrganization", Self::VT_IDORGANIZATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("email", Self::VT_EMAIL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("address1", Self::VT_ADDRESS1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("address2", Self::VT_ADDRESS2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("address3", Self::VT_ADDRESS3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geoAdminLevel1", Self::VT_GEOADMINLEVEL1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geoAdminLevel2", Self::VT_GEOADMINLEVEL2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geoAdminLevel3", Self::VT_GEOADMINLEVEL3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("postalCode", Self::VT_POSTALCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("formerOrgId", Self::VT_FORMERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("parentOrgId", Self::VT_PARENTORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("financialYearEndDate", Self::VT_FINANCIALYEARENDDATE, false)?
     .visit_field::<f64>("revenue", Self::VT_REVENUE, false)?
     .visit_field::<f64>("profit", Self::VT_PROFIT, false)?
     .visit_field::<f64>("ebitda", Self::VT_EBITDA, false)?
     .visit_field::<i32>("ftes", Self::VT_FTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("broker", Self::VT_BROKER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ceo", Self::VT_CEO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cfo", Self::VT_CFO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cto", Self::VT_CTO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("riskManager", Self::VT_RISKMANAGER, false)?
     .visit_field::<i32>("massRanking", Self::VT_MASSRANKING, false)?
     .visit_field::<i32>("revenueRanking", Self::VT_REVENUERANKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("financialNotes", Self::VT_FINANCIALNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("servicesNotes", Self::VT_SERVICESNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fleetPlanNotes", Self::VT_FLEETPLANNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<OrganizationDetails_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct OrganizationDetails_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOrganization: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub email: Option<flatbuffers::WIPOffset<&'a str>>,
    pub address1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub address2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub address3: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geoAdminLevel1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geoAdminLevel2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geoAdminLevel3: Option<flatbuffers::WIPOffset<&'a str>>,
    pub postalCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub formerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub parentOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub financialYearEndDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub revenue: f64,
    pub profit: f64,
    pub ebitda: f64,
    pub ftes: i32,
    pub broker: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ceo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cfo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cto: Option<flatbuffers::WIPOffset<&'a str>>,
    pub riskManager: Option<flatbuffers::WIPOffset<&'a str>>,
    pub massRanking: i32,
    pub revenueRanking: i32,
    pub financialNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub servicesNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fleetPlanNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: OrganizationDetails_Full_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for OrganizationDetails_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    OrganizationDetails_FullArgs {
      id: None,
      idOrganization: None,
      classificationMarking: None,
      name: None,
      email: None,
      address1: None,
      address2: None,
      address3: None,
      geoAdminLevel1: None,
      geoAdminLevel2: None,
      geoAdminLevel3: None,
      postalCode: None,
      description: None,
      formerOrgId: None,
      parentOrgId: None,
      financialYearEndDate: None,
      revenue: 0.0,
      profit: 0.0,
      ebitda: 0.0,
      ftes: 0,
      broker: None,
      ceo: None,
      cfo: None,
      cto: None,
      riskManager: None,
      massRanking: 0,
      revenueRanking: 0,
      financialNotes: None,
      servicesNotes: None,
      fleetPlanNotes: None,
      source: None,
      origin: None,
      dataMode: OrganizationDetails_Full_dataMode_Enum::REAL,
      tags: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      origNetwork: None,
    }
  }
}

pub struct OrganizationDetails_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OrganizationDetails_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_idOrganization(&mut self, idOrganization: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_IDORGANIZATION, idOrganization);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_email(&mut self, email: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_EMAIL, email);
  }
  #[inline]
  pub fn add_address1(&mut self, address1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_ADDRESS1, address1);
  }
  #[inline]
  pub fn add_address2(&mut self, address2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_ADDRESS2, address2);
  }
  #[inline]
  pub fn add_address3(&mut self, address3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_ADDRESS3, address3);
  }
  #[inline]
  pub fn add_geoAdminLevel1(&mut self, geoAdminLevel1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_GEOADMINLEVEL1, geoAdminLevel1);
  }
  #[inline]
  pub fn add_geoAdminLevel2(&mut self, geoAdminLevel2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_GEOADMINLEVEL2, geoAdminLevel2);
  }
  #[inline]
  pub fn add_geoAdminLevel3(&mut self, geoAdminLevel3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_GEOADMINLEVEL3, geoAdminLevel3);
  }
  #[inline]
  pub fn add_postalCode(&mut self, postalCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_POSTALCODE, postalCode);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_formerOrgId(&mut self, formerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_FORMERORGID, formerOrgId);
  }
  #[inline]
  pub fn add_parentOrgId(&mut self, parentOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_PARENTORGID, parentOrgId);
  }
  #[inline]
  pub fn add_financialYearEndDate(&mut self, financialYearEndDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_FINANCIALYEARENDDATE, financialYearEndDate);
  }
  #[inline]
  pub fn add_revenue(&mut self, revenue: f64) {
    self.fbb_.push_slot::<f64>(OrganizationDetails_Full::VT_REVENUE, revenue, 0.0);
  }
  #[inline]
  pub fn add_profit(&mut self, profit: f64) {
    self.fbb_.push_slot::<f64>(OrganizationDetails_Full::VT_PROFIT, profit, 0.0);
  }
  #[inline]
  pub fn add_ebitda(&mut self, ebitda: f64) {
    self.fbb_.push_slot::<f64>(OrganizationDetails_Full::VT_EBITDA, ebitda, 0.0);
  }
  #[inline]
  pub fn add_ftes(&mut self, ftes: i32) {
    self.fbb_.push_slot::<i32>(OrganizationDetails_Full::VT_FTES, ftes, 0);
  }
  #[inline]
  pub fn add_broker(&mut self, broker: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_BROKER, broker);
  }
  #[inline]
  pub fn add_ceo(&mut self, ceo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_CEO, ceo);
  }
  #[inline]
  pub fn add_cfo(&mut self, cfo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_CFO, cfo);
  }
  #[inline]
  pub fn add_cto(&mut self, cto: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_CTO, cto);
  }
  #[inline]
  pub fn add_riskManager(&mut self, riskManager: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_RISKMANAGER, riskManager);
  }
  #[inline]
  pub fn add_massRanking(&mut self, massRanking: i32) {
    self.fbb_.push_slot::<i32>(OrganizationDetails_Full::VT_MASSRANKING, massRanking, 0);
  }
  #[inline]
  pub fn add_revenueRanking(&mut self, revenueRanking: i32) {
    self.fbb_.push_slot::<i32>(OrganizationDetails_Full::VT_REVENUERANKING, revenueRanking, 0);
  }
  #[inline]
  pub fn add_financialNotes(&mut self, financialNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_FINANCIALNOTES, financialNotes);
  }
  #[inline]
  pub fn add_servicesNotes(&mut self, servicesNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_SERVICESNOTES, servicesNotes);
  }
  #[inline]
  pub fn add_fleetPlanNotes(&mut self, fleetPlanNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_FLEETPLANNOTES, fleetPlanNotes);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: OrganizationDetails_Full_dataMode_Enum) {
    self.fbb_.push_slot::<OrganizationDetails_Full_dataMode_Enum>(OrganizationDetails_Full::VT_DATAMODE, dataMode, OrganizationDetails_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OrganizationDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OrganizationDetails_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OrganizationDetails_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OrganizationDetails_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OrganizationDetails_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OrganizationDetails_Full");
      ds.field("id", &self.id());
      ds.field("idOrganization", &self.idOrganization());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("name", &self.name());
      ds.field("email", &self.email());
      ds.field("address1", &self.address1());
      ds.field("address2", &self.address2());
      ds.field("address3", &self.address3());
      ds.field("geoAdminLevel1", &self.geoAdminLevel1());
      ds.field("geoAdminLevel2", &self.geoAdminLevel2());
      ds.field("geoAdminLevel3", &self.geoAdminLevel3());
      ds.field("postalCode", &self.postalCode());
      ds.field("description", &self.description());
      ds.field("formerOrgId", &self.formerOrgId());
      ds.field("parentOrgId", &self.parentOrgId());
      ds.field("financialYearEndDate", &self.financialYearEndDate());
      ds.field("revenue", &self.revenue());
      ds.field("profit", &self.profit());
      ds.field("ebitda", &self.ebitda());
      ds.field("ftes", &self.ftes());
      ds.field("broker", &self.broker());
      ds.field("ceo", &self.ceo());
      ds.field("cfo", &self.cfo());
      ds.field("cto", &self.cto());
      ds.field("riskManager", &self.riskManager());
      ds.field("massRanking", &self.massRanking());
      ds.field("revenueRanking", &self.revenueRanking());
      ds.field("financialNotes", &self.financialNotes());
      ds.field("servicesNotes", &self.servicesNotes());
      ds.field("fleetPlanNotes", &self.fleetPlanNotes());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OrganizationDetails_FullT {
  pub id: Option<String>,
  pub idOrganization: Option<String>,
  pub classificationMarking: Option<String>,
  pub name: Option<String>,
  pub email: Option<String>,
  pub address1: Option<String>,
  pub address2: Option<String>,
  pub address3: Option<String>,
  pub geoAdminLevel1: Option<String>,
  pub geoAdminLevel2: Option<String>,
  pub geoAdminLevel3: Option<String>,
  pub postalCode: Option<String>,
  pub description: Option<String>,
  pub formerOrgId: Option<String>,
  pub parentOrgId: Option<String>,
  pub financialYearEndDate: Option<String>,
  pub revenue: f64,
  pub profit: f64,
  pub ebitda: f64,
  pub ftes: i32,
  pub broker: Option<String>,
  pub ceo: Option<String>,
  pub cfo: Option<String>,
  pub cto: Option<String>,
  pub riskManager: Option<String>,
  pub massRanking: i32,
  pub revenueRanking: i32,
  pub financialNotes: Option<String>,
  pub servicesNotes: Option<String>,
  pub fleetPlanNotes: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: OrganizationDetails_Full_dataMode_Enum,
  pub tags: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub origNetwork: Option<String>,
}
impl Default for OrganizationDetails_FullT {
  fn default() -> Self {
    Self {
      id: None,
      idOrganization: None,
      classificationMarking: None,
      name: None,
      email: None,
      address1: None,
      address2: None,
      address3: None,
      geoAdminLevel1: None,
      geoAdminLevel2: None,
      geoAdminLevel3: None,
      postalCode: None,
      description: None,
      formerOrgId: None,
      parentOrgId: None,
      financialYearEndDate: None,
      revenue: 0.0,
      profit: 0.0,
      ebitda: 0.0,
      ftes: 0,
      broker: None,
      ceo: None,
      cfo: None,
      cto: None,
      riskManager: None,
      massRanking: 0,
      revenueRanking: 0,
      financialNotes: None,
      servicesNotes: None,
      fleetPlanNotes: None,
      source: None,
      origin: None,
      dataMode: OrganizationDetails_Full_dataMode_Enum::REAL,
      tags: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      origNetwork: None,
    }
  }
}
impl OrganizationDetails_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OrganizationDetails_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOrganization = self.idOrganization.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let email = self.email.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let address1 = self.address1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let address2 = self.address2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let address3 = self.address3.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geoAdminLevel1 = self.geoAdminLevel1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geoAdminLevel2 = self.geoAdminLevel2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geoAdminLevel3 = self.geoAdminLevel3.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let postalCode = self.postalCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let formerOrgId = self.formerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let parentOrgId = self.parentOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let financialYearEndDate = self.financialYearEndDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let revenue = self.revenue;
    let profit = self.profit;
    let ebitda = self.ebitda;
    let ftes = self.ftes;
    let broker = self.broker.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ceo = self.ceo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cfo = self.cfo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cto = self.cto.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let riskManager = self.riskManager.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let massRanking = self.massRanking;
    let revenueRanking = self.revenueRanking;
    let financialNotes = self.financialNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let servicesNotes = self.servicesNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fleetPlanNotes = self.fleetPlanNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    OrganizationDetails_Full::create(_fbb, &OrganizationDetails_FullArgs{
      id,
      idOrganization,
      classificationMarking,
      name,
      email,
      address1,
      address2,
      address3,
      geoAdminLevel1,
      geoAdminLevel2,
      geoAdminLevel3,
      postalCode,
      description,
      formerOrgId,
      parentOrgId,
      financialYearEndDate,
      revenue,
      profit,
      ebitda,
      ftes,
      broker,
      ceo,
      cfo,
      cto,
      riskManager,
      massRanking,
      revenueRanking,
      financialNotes,
      servicesNotes,
      fleetPlanNotes,
      source,
      origin,
      dataMode,
      tags,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OrganizationDetails_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_organization_details_full_unchecked`.
pub fn root_as_organization_details_full(buf: &[u8]) -> Result<OrganizationDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OrganizationDetails_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OrganizationDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_organization_details_full_unchecked`.
pub fn size_prefixed_root_as_organization_details_full(buf: &[u8]) -> Result<OrganizationDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OrganizationDetails_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OrganizationDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_organization_details_full_unchecked`.
pub fn root_as_organization_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrganizationDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OrganizationDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OrganizationDetails_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_organization_details_full_unchecked`.
pub fn size_prefixed_root_as_organization_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OrganizationDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OrganizationDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OrganizationDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OrganizationDetails_Full`.
pub unsafe fn root_as_organization_details_full_unchecked(buf: &[u8]) -> OrganizationDetails_Full {
  flatbuffers::root_unchecked::<OrganizationDetails_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OrganizationDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OrganizationDetails_Full`.
pub unsafe fn size_prefixed_root_as_organization_details_full_unchecked(buf: &[u8]) -> OrganizationDetails_Full {
  flatbuffers::size_prefixed_root_unchecked::<OrganizationDetails_Full>(buf)
}
pub const ORGANIZATION_DETAILS_FULL_IDENTIFIER: &str = "ORGA";

#[inline]
pub fn organization_details_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ORGANIZATION_DETAILS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn organization_details_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ORGANIZATION_DETAILS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_organization_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OrganizationDetails_Full<'a>>) {
  fbb.finish(root, Some(ORGANIZATION_DETAILS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_organization_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OrganizationDetails_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(ORGANIZATION_DETAILS_FULL_IDENTIFIER));
}
