// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RFBAND_INGEST_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RFBAND_INGEST_MODE_ENUM: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RFBAND_INGEST_MODE_ENUM: [RFBand_Ingest_mode_Enum; 2] = [
  RFBand_Ingest_mode_Enum::TX,
  RFBand_Ingest_mode_Enum::RX,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RFBand_Ingest_mode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RFBand_Ingest_mode_Enum {
  /// No description available.
  pub const TX: Self = Self(0);
  /// No description available.
  pub const RX: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::TX,
    Self::RX,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::TX => Some("TX"),
      Self::RX => Some("RX"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RFBand_Ingest_mode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RFBand_Ingest_mode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RFBand_Ingest_mode_Enum {
    type Output = RFBand_Ingest_mode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RFBand_Ingest_mode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RFBand_Ingest_mode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RFBand_Ingest_mode_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RFBAND_INGEST_PURPOSE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RFBAND_INGEST_PURPOSE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RFBAND_INGEST_PURPOSE_ENUM: [RFBand_Ingest_purpose_Enum; 4] = [
  RFBand_Ingest_purpose_Enum::COMM,
  RFBand_Ingest_purpose_Enum::TTC,
  RFBand_Ingest_purpose_Enum::OPS,
  RFBand_Ingest_purpose_Enum::OTHER,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RFBand_Ingest_purpose_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RFBand_Ingest_purpose_Enum {
  /// No description available.
  pub const COMM: Self = Self(0);
  /// No description available.
  pub const TTC: Self = Self(1);
  /// No description available.
  pub const OPS: Self = Self(2);
  /// No description available.
  pub const OTHER: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::COMM,
    Self::TTC,
    Self::OPS,
    Self::OTHER,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::COMM => Some("COMM"),
      Self::TTC => Some("TTC"),
      Self::OPS => Some("OPS"),
      Self::OTHER => Some("OTHER"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RFBand_Ingest_purpose_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RFBand_Ingest_purpose_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RFBand_Ingest_purpose_Enum {
    type Output = RFBand_Ingest_purpose_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RFBand_Ingest_purpose_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RFBand_Ingest_purpose_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RFBand_Ingest_purpose_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RFBAND_INGEST_POLARIZATION_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RFBAND_INGEST_POLARIZATION_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RFBAND_INGEST_POLARIZATION_ENUM: [RFBand_Ingest_polarization_Enum; 4] = [
  RFBand_Ingest_polarization_Enum::H,
  RFBand_Ingest_polarization_Enum::V,
  RFBand_Ingest_polarization_Enum::R,
  RFBand_Ingest_polarization_Enum::L,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RFBand_Ingest_polarization_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RFBand_Ingest_polarization_Enum {
  /// No description available.
  pub const H: Self = Self(0);
  /// No description available.
  pub const V: Self = Self(1);
  /// No description available.
  pub const R: Self = Self(2);
  /// No description available.
  pub const L: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::H,
    Self::V,
    Self::R,
    Self::L,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::H => Some("H"),
      Self::V => Some("V"),
      Self::R => Some("R"),
      Self::L => Some("L"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RFBand_Ingest_polarization_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RFBand_Ingest_polarization_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RFBand_Ingest_polarization_Enum {
    type Output = RFBand_Ingest_polarization_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RFBand_Ingest_polarization_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RFBand_Ingest_polarization_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RFBand_Ingest_polarization_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RFBAND_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RFBAND_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RFBAND_INGEST_DATA_MODE_ENUM: [RFBand_Ingest_dataMode_Enum; 4] = [
  RFBand_Ingest_dataMode_Enum::REAL,
  RFBand_Ingest_dataMode_Enum::TEST,
  RFBand_Ingest_dataMode_Enum::SIMULATED,
  RFBand_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RFBand_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RFBand_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RFBand_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RFBand_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RFBand_Ingest_dataMode_Enum {
    type Output = RFBand_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RFBand_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RFBand_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RFBand_Ingest_dataMode_Enum {}
pub enum RFBand_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Details on a particular Radio Frequency (RF) band, also known as a carrier, which may be in use by any type of Entity for communications or operations.
pub struct RFBand_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RFBand_Ingest<'a> {
  type Inner = RFBand_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RFBand_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDENTITY: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_NAME: flatbuffers::VOffsetT = 10;
  pub const VT_BAND: flatbuffers::VOffsetT = 12;
  pub const VT_MODE: flatbuffers::VOffsetT = 14;
  pub const VT_PURPOSE: flatbuffers::VOffsetT = 16;
  pub const VT_FREQMIN: flatbuffers::VOffsetT = 18;
  pub const VT_FREQMAX: flatbuffers::VOffsetT = 20;
  pub const VT_CENTERFREQ: flatbuffers::VOffsetT = 22;
  pub const VT_PEAKGAIN: flatbuffers::VOffsetT = 24;
  pub const VT_EDGEGAIN: flatbuffers::VOffsetT = 26;
  pub const VT_BANDWIDTH: flatbuffers::VOffsetT = 28;
  pub const VT_BEAMWIDTH: flatbuffers::VOffsetT = 30;
  pub const VT_POLARIZATION: flatbuffers::VOffsetT = 32;
  pub const VT_ERP: flatbuffers::VOffsetT = 34;
  pub const VT_EIRP: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 38;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 40;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 42;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 44;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 46;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 48;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RFBand_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RFBand_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<RFBand_Ingest<'bldr>> {
    let mut builder = RFBand_IngestBuilder::new(_fbb);
    builder.add_eirp(args.eirp);
    builder.add_erp(args.erp);
    builder.add_beamwidth(args.beamwidth);
    builder.add_bandwidth(args.bandwidth);
    builder.add_edgeGain(args.edgeGain);
    builder.add_peakGain(args.peakGain);
    builder.add_centerFreq(args.centerFreq);
    builder.add_freqMax(args.freqMax);
    builder.add_freqMin(args.freqMin);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.band { builder.add_band(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idEntity { builder.add_idEntity(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_polarization(args.polarization);
    builder.add_purpose(args.purpose);
    builder.add_mode(args.mode);
    builder.finish()
  }

  pub fn unpack(&self) -> RFBand_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idEntity = self.idEntity().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let band = self.band().map(|x| {
      x.to_string()
    });
    let mode = self.mode();
    let purpose = self.purpose();
    let freqMin = self.freqMin();
    let freqMax = self.freqMax();
    let centerFreq = self.centerFreq();
    let peakGain = self.peakGain();
    let edgeGain = self.edgeGain();
    let bandwidth = self.bandwidth();
    let beamwidth = self.beamwidth();
    let polarization = self.polarization();
    let erp = self.erp();
    let eirp = self.eirp();
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    RFBand_IngestT {
      id,
      idEntity,
      classificationMarking,
      name,
      band,
      mode,
      purpose,
      freqMin,
      freqMax,
      centerFreq,
      peakGain,
      edgeGain,
      bandwidth,
      beamwidth,
      polarization,
      erp,
      eirp,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RFBAND-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_ID, None)}
  }
  /// Unique identifier of the parent Entity which uses this band.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idEntity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_IDENTITY, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// RF Band name.
  /// Example: /// Example: BAND_NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_NAME, None)}
  }
  /// Name of the band of this RF range (e.g. X,K,Ku,Ka,L,S,C,UHF,VHF,EHF,SHF,UNK,VLF,HF,E,Q,V,W). See RFBandType for more details and descriptions of each band name.
  /// Example: /// Example: Ku
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn band(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_BAND, None)}
  }
  /// RF Band mode (e.g. TX, RX).
  /// Example: /// Example: TX
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn mode(&self) -> RFBand_Ingest_mode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RFBand_Ingest_mode_Enum>(RFBand_Ingest::VT_MODE, Some(RFBand_Ingest_mode_Enum::TX)).unwrap()}
  }
  /// Purpose or use of the RF Band -- COMM = communications, TTC = Telemetry/Tracking/Control, OPS = Operations, OTHER = Other).
  /// Example: /// Example: TTC
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn purpose(&self) -> RFBand_Ingest_purpose_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RFBand_Ingest_purpose_Enum>(RFBand_Ingest::VT_PURPOSE, Some(RFBand_Ingest_purpose_Enum::COMM)).unwrap()}
  }
  /// Start/minimum of transmit RF frequency range, if applicable, in Mhz.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn freqMin(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_FREQMIN, Some(0.0)).unwrap()}
  }
  /// End/maximum of transmit RF frequency range, if applicable, in Mhz.
  /// Example: /// Example: 2000.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn freqMax(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_FREQMAX, Some(0.0)).unwrap()}
  }
  /// Center frequency of RF frequency range, if applicable, in Mhz.
  /// Example: /// Example: 1000.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn centerFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_CENTERFREQ, Some(0.0)).unwrap()}
  }
  /// RF Range maximum gain, in dBi.
  /// Example: /// Example: 120.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn peakGain(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_PEAKGAIN, Some(0.0)).unwrap()}
  }
  /// RF Range edge gain, in dBi.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn edgeGain(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_EDGEGAIN, Some(0.0)).unwrap()}
  }
  /// RF Band frequency range bandwidth in Mhz.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bandwidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_BANDWIDTH, Some(0.0)).unwrap()}
  }
  /// Angle between the half-power (-3 dB) points of the main lobe of the antenna, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn beamwidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_BEAMWIDTH, Some(0.0)).unwrap()}
  }
  /// Transponder polarization e.g. H - (Horizontally Polarized) Perpendicular to Earth's surface, V - (Vertically Polarized) Parallel to Earth's surface, L - (Left Hand Circularly Polarized) Rotating left relative to the Earth's surface, R - (Right Hand Circularly Polarized) Rotating right relative to the Earth's surface.
  /// Example: /// Example: H
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn polarization(&self) -> RFBand_Ingest_polarization_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RFBand_Ingest_polarization_Enum>(RFBand_Ingest::VT_POLARIZATION, Some(RFBand_Ingest_polarization_Enum::H)).unwrap()}
  }
  /// Effective Radiated Power (ERP) is the total power in decibel watts radiated by an actual antenna relative to a half-wave dipole rather than a theoretical isotropic antenna. A half-wave dipole has a gain of 2.15 dB compared to an isotropic antenna.  EIRP(dB) = ERP (dB)+2.15 dB or EIRP (W) = 1.64*ERP(W). Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
  /// Example: /// Example: 2.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn erp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_ERP, Some(0.0)).unwrap()}
  }
  /// EIRP is defined as the RMS power input in decibel watts required to a lossless half-wave dipole antenna to give the same maximum power density far from the antenna as the actual transmitter. It is equal to the power input to the transmitter's antenna multiplied by the antenna gain relative to a half-wave dipole. Effective radiated power and effective isotropic radiated power both measure the amount of power a radio transmitter and antenna (or other source of electromagnetic waves) radiates in a specific direction: in the direction of maximum signal strength (the "main lobe") of its radiation pattern.
  /// Example: /// Example: 2.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eirp(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFBand_Ingest::VT_EIRP, Some(0.0)).unwrap()}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> RFBand_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RFBand_Ingest_dataMode_Enum>(RFBand_Ingest::VT_DATAMODE, Some(RFBand_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_CREATEDBY, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFBand_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for RFBand_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idEntity", Self::VT_IDENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("band", Self::VT_BAND, false)?
     .visit_field::<RFBand_Ingest_mode_Enum>("mode", Self::VT_MODE, false)?
     .visit_field::<RFBand_Ingest_purpose_Enum>("purpose", Self::VT_PURPOSE, false)?
     .visit_field::<f64>("freqMin", Self::VT_FREQMIN, false)?
     .visit_field::<f64>("freqMax", Self::VT_FREQMAX, false)?
     .visit_field::<f64>("centerFreq", Self::VT_CENTERFREQ, false)?
     .visit_field::<f64>("peakGain", Self::VT_PEAKGAIN, false)?
     .visit_field::<f64>("edgeGain", Self::VT_EDGEGAIN, false)?
     .visit_field::<f64>("bandwidth", Self::VT_BANDWIDTH, false)?
     .visit_field::<f64>("beamwidth", Self::VT_BEAMWIDTH, false)?
     .visit_field::<RFBand_Ingest_polarization_Enum>("polarization", Self::VT_POLARIZATION, false)?
     .visit_field::<f64>("erp", Self::VT_ERP, false)?
     .visit_field::<f64>("eirp", Self::VT_EIRP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<RFBand_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct RFBand_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idEntity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub band: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mode: RFBand_Ingest_mode_Enum,
    pub purpose: RFBand_Ingest_purpose_Enum,
    pub freqMin: f64,
    pub freqMax: f64,
    pub centerFreq: f64,
    pub peakGain: f64,
    pub edgeGain: f64,
    pub bandwidth: f64,
    pub beamwidth: f64,
    pub polarization: RFBand_Ingest_polarization_Enum,
    pub erp: f64,
    pub eirp: f64,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: RFBand_Ingest_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RFBand_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    RFBand_IngestArgs {
      id: None,
      idEntity: None,
      classificationMarking: None,
      name: None,
      band: None,
      mode: RFBand_Ingest_mode_Enum::TX,
      purpose: RFBand_Ingest_purpose_Enum::COMM,
      freqMin: 0.0,
      freqMax: 0.0,
      centerFreq: 0.0,
      peakGain: 0.0,
      edgeGain: 0.0,
      bandwidth: 0.0,
      beamwidth: 0.0,
      polarization: RFBand_Ingest_polarization_Enum::H,
      erp: 0.0,
      eirp: 0.0,
      source: None,
      origin: None,
      dataMode: RFBand_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}

pub struct RFBand_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RFBand_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_idEntity(&mut self, idEntity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_IDENTITY, idEntity);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_NAME, name);
  }
  #[inline]
  pub fn add_band(&mut self, band: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_BAND, band);
  }
  #[inline]
  pub fn add_mode(&mut self, mode: RFBand_Ingest_mode_Enum) {
    self.fbb_.push_slot::<RFBand_Ingest_mode_Enum>(RFBand_Ingest::VT_MODE, mode, RFBand_Ingest_mode_Enum::TX);
  }
  #[inline]
  pub fn add_purpose(&mut self, purpose: RFBand_Ingest_purpose_Enum) {
    self.fbb_.push_slot::<RFBand_Ingest_purpose_Enum>(RFBand_Ingest::VT_PURPOSE, purpose, RFBand_Ingest_purpose_Enum::COMM);
  }
  #[inline]
  pub fn add_freqMin(&mut self, freqMin: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_FREQMIN, freqMin, 0.0);
  }
  #[inline]
  pub fn add_freqMax(&mut self, freqMax: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_FREQMAX, freqMax, 0.0);
  }
  #[inline]
  pub fn add_centerFreq(&mut self, centerFreq: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_CENTERFREQ, centerFreq, 0.0);
  }
  #[inline]
  pub fn add_peakGain(&mut self, peakGain: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_PEAKGAIN, peakGain, 0.0);
  }
  #[inline]
  pub fn add_edgeGain(&mut self, edgeGain: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_EDGEGAIN, edgeGain, 0.0);
  }
  #[inline]
  pub fn add_bandwidth(&mut self, bandwidth: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_BANDWIDTH, bandwidth, 0.0);
  }
  #[inline]
  pub fn add_beamwidth(&mut self, beamwidth: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_BEAMWIDTH, beamwidth, 0.0);
  }
  #[inline]
  pub fn add_polarization(&mut self, polarization: RFBand_Ingest_polarization_Enum) {
    self.fbb_.push_slot::<RFBand_Ingest_polarization_Enum>(RFBand_Ingest::VT_POLARIZATION, polarization, RFBand_Ingest_polarization_Enum::H);
  }
  #[inline]
  pub fn add_erp(&mut self, erp: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_ERP, erp, 0.0);
  }
  #[inline]
  pub fn add_eirp(&mut self, eirp: f64) {
    self.fbb_.push_slot::<f64>(RFBand_Ingest::VT_EIRP, eirp, 0.0);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: RFBand_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<RFBand_Ingest_dataMode_Enum>(RFBand_Ingest::VT_DATAMODE, dataMode, RFBand_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFBand_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RFBand_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RFBand_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RFBand_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RFBand_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RFBand_Ingest");
      ds.field("id", &self.id());
      ds.field("idEntity", &self.idEntity());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("name", &self.name());
      ds.field("band", &self.band());
      ds.field("mode", &self.mode());
      ds.field("purpose", &self.purpose());
      ds.field("freqMin", &self.freqMin());
      ds.field("freqMax", &self.freqMax());
      ds.field("centerFreq", &self.centerFreq());
      ds.field("peakGain", &self.peakGain());
      ds.field("edgeGain", &self.edgeGain());
      ds.field("bandwidth", &self.bandwidth());
      ds.field("beamwidth", &self.beamwidth());
      ds.field("polarization", &self.polarization());
      ds.field("erp", &self.erp());
      ds.field("eirp", &self.eirp());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RFBand_IngestT {
  pub id: Option<String>,
  pub idEntity: Option<String>,
  pub classificationMarking: Option<String>,
  pub name: Option<String>,
  pub band: Option<String>,
  pub mode: RFBand_Ingest_mode_Enum,
  pub purpose: RFBand_Ingest_purpose_Enum,
  pub freqMin: f64,
  pub freqMax: f64,
  pub centerFreq: f64,
  pub peakGain: f64,
  pub edgeGain: f64,
  pub bandwidth: f64,
  pub beamwidth: f64,
  pub polarization: RFBand_Ingest_polarization_Enum,
  pub erp: f64,
  pub eirp: f64,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: RFBand_Ingest_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub origNetwork: Option<String>,
}
impl Default for RFBand_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      idEntity: None,
      classificationMarking: None,
      name: None,
      band: None,
      mode: RFBand_Ingest_mode_Enum::TX,
      purpose: RFBand_Ingest_purpose_Enum::COMM,
      freqMin: 0.0,
      freqMax: 0.0,
      centerFreq: 0.0,
      peakGain: 0.0,
      edgeGain: 0.0,
      bandwidth: 0.0,
      beamwidth: 0.0,
      polarization: RFBand_Ingest_polarization_Enum::H,
      erp: 0.0,
      eirp: 0.0,
      source: None,
      origin: None,
      dataMode: RFBand_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}
impl RFBand_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RFBand_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idEntity = self.idEntity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let band = self.band.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let mode = self.mode;
    let purpose = self.purpose;
    let freqMin = self.freqMin;
    let freqMax = self.freqMax;
    let centerFreq = self.centerFreq;
    let peakGain = self.peakGain;
    let edgeGain = self.edgeGain;
    let bandwidth = self.bandwidth;
    let beamwidth = self.beamwidth;
    let polarization = self.polarization;
    let erp = self.erp;
    let eirp = self.eirp;
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    RFBand_Ingest::create(_fbb, &RFBand_IngestArgs{
      id,
      idEntity,
      classificationMarking,
      name,
      band,
      mode,
      purpose,
      freqMin,
      freqMax,
      centerFreq,
      peakGain,
      edgeGain,
      bandwidth,
      beamwidth,
      polarization,
      erp,
      eirp,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RFBand_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfband_ingest_unchecked`.
pub fn root_as_rfband_ingest(buf: &[u8]) -> Result<RFBand_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RFBand_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RFBand_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_rfband_ingest_unchecked`.
pub fn size_prefixed_root_as_rfband_ingest(buf: &[u8]) -> Result<RFBand_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RFBand_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RFBand_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfband_ingest_unchecked`.
pub fn root_as_rfband_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFBand_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RFBand_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RFBand_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfband_ingest_unchecked`.
pub fn size_prefixed_root_as_rfband_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFBand_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RFBand_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RFBand_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RFBand_Ingest`.
pub unsafe fn root_as_rfband_ingest_unchecked(buf: &[u8]) -> RFBand_Ingest {
  flatbuffers::root_unchecked::<RFBand_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RFBand_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RFBand_Ingest`.
pub unsafe fn size_prefixed_root_as_rfband_ingest_unchecked(buf: &[u8]) -> RFBand_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<RFBand_Ingest>(buf)
}
pub const RFBAND_INGEST_IDENTIFIER: &str = "RFBA";

#[inline]
pub fn rfband_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFBAND_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn rfband_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFBAND_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_rfband_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RFBand_Ingest<'a>>) {
  fbb.finish(root, Some(RFBAND_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_rfband_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RFBand_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(RFBAND_INGEST_IDENTIFIER));
}
