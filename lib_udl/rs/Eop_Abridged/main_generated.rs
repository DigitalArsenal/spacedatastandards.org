// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EOP_ABRIDGED_POLAR_MOTION_STATE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EOP_ABRIDGED_POLAR_MOTION_STATE_ENUM: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EOP_ABRIDGED_POLAR_MOTION_STATE_ENUM: [Eop_Abridged_polarMotionState_Enum; 2] = [
  Eop_Abridged_polarMotionState_Enum::I,
  Eop_Abridged_polarMotionState_Enum::P,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Eop_Abridged_polarMotionState_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Eop_Abridged_polarMotionState_Enum {
  /// No description available.
  pub const I: Self = Self(0);
  /// No description available.
  pub const P: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::I,
    Self::P,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::I => Some("I"),
      Self::P => Some("P"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Eop_Abridged_polarMotionState_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Eop_Abridged_polarMotionState_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Eop_Abridged_polarMotionState_Enum {
    type Output = Eop_Abridged_polarMotionState_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Eop_Abridged_polarMotionState_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Eop_Abridged_polarMotionState_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Eop_Abridged_polarMotionState_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EOP_ABRIDGED_UT_1_UTCSTATE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EOP_ABRIDGED_UT_1_UTCSTATE_ENUM: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EOP_ABRIDGED_UT_1_UTCSTATE_ENUM: [Eop_Abridged_ut1UTCState_Enum; 2] = [
  Eop_Abridged_ut1UTCState_Enum::I,
  Eop_Abridged_ut1UTCState_Enum::P,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Eop_Abridged_ut1UTCState_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Eop_Abridged_ut1UTCState_Enum {
  /// No description available.
  pub const I: Self = Self(0);
  /// No description available.
  pub const P: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::I,
    Self::P,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::I => Some("I"),
      Self::P => Some("P"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Eop_Abridged_ut1UTCState_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Eop_Abridged_ut1UTCState_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Eop_Abridged_ut1UTCState_Enum {
    type Output = Eop_Abridged_ut1UTCState_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Eop_Abridged_ut1UTCState_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Eop_Abridged_ut1UTCState_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Eop_Abridged_ut1UTCState_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EOP_ABRIDGED_NUTATION_STATE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EOP_ABRIDGED_NUTATION_STATE_ENUM: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EOP_ABRIDGED_NUTATION_STATE_ENUM: [Eop_Abridged_nutationState_Enum; 2] = [
  Eop_Abridged_nutationState_Enum::I,
  Eop_Abridged_nutationState_Enum::P,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Eop_Abridged_nutationState_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Eop_Abridged_nutationState_Enum {
  /// No description available.
  pub const I: Self = Self(0);
  /// No description available.
  pub const P: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::I,
    Self::P,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::I => Some("I"),
      Self::P => Some("P"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Eop_Abridged_nutationState_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Eop_Abridged_nutationState_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Eop_Abridged_nutationState_Enum {
    type Output = Eop_Abridged_nutationState_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Eop_Abridged_nutationState_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Eop_Abridged_nutationState_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Eop_Abridged_nutationState_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EOP_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EOP_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EOP_ABRIDGED_DATA_MODE_ENUM: [Eop_Abridged_dataMode_Enum; 4] = [
  Eop_Abridged_dataMode_Enum::REAL,
  Eop_Abridged_dataMode_Enum::TEST,
  Eop_Abridged_dataMode_Enum::SIMULATED,
  Eop_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Eop_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Eop_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Eop_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Eop_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Eop_Abridged_dataMode_Enum {
    type Output = Eop_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Eop_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Eop_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Eop_Abridged_dataMode_Enum {}
pub enum Eop_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of Earth Orientation Parameters (EOP) produced by the IERS (International Earth Rotation and Reference Systems Service). Earth Orientation Parameters describe the irregularities of the earth's rotation. Technically, they are the parameters which provide the rotation of the ITRS (International Terrestrial Reference System) to the ICRS (International Celestial Reference System) as a function of time.
/// Universal time -- Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
/// Coordinates of the pole -- x and y are the coordinates of the Celestial Ephemeris Pole (CEP) relative to the IRP, the IERS Reference Pole. The CEP differs from the instantaneous rotation axis by quasi-diurnal terms with amplitudes under 0.01" (see Seidelmann, 1982). The x-axis is in the direction of the ITRF zero-meridian; the y-axis is in the direction 90 degrees West longitude.
/// Celestial pole offsets -- Celestial pole offsets are described in the IAU Precession and Nutation models. The observed differences with respect to the conventional celestial pole position defined by the models are monitored and reported by the IERS.
/// IERS Bulletins A and B provide current information on the Earth's orientation in the IERS Reference System.  This includes Universal Time, coordinates of the terrestrial pole, and celestial pole offsets.  Bulletin A gives an advanced solution updated weekly; the standard solution is given monthly in Bulletin B. Fields suffixed with 'B' are Bulletin B values. All solutions are continuous within their respective uncertainties.  Bulletin A is issued by the IERS Rapid Service/Prediction Centre at the U.S. Naval Observatory, Washington, DC and Bulletin B is issued by the IERS Earth Orientation Centre at the Paris Observatory. IERS Bulletin A reports the latest determinations for polar motion, UT1-UTC, and nutation offsets at daily intervals based on a combination of contributed analysis results using data from Very Long Baseline Interferometry (VLBI), Satellite Laser Ranging (SLR), Global Positioning System (GPS) satellites, and Lunar Laser Ranging (LLR). Predictions for variations a year into the future are also provided. Meteorological predictions of variations in Atmospheric Angular Momentum (AAM) are used to aid in the prediction of near-term UT1-UTC changes. This publication is prepared by the IERS Rapid Service/Prediction Center.
pub struct Eop_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Eop_Abridged<'a> {
  type Inner = Eop_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Eop_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_EOPDATE: flatbuffers::VOffsetT = 8;
  pub const VT_POLARMOTIONSTATE: flatbuffers::VOffsetT = 10;
  pub const VT_POLARMOTIONX: flatbuffers::VOffsetT = 12;
  pub const VT_POLARMOTIONXUNC: flatbuffers::VOffsetT = 14;
  pub const VT_POLARMOTIONY: flatbuffers::VOffsetT = 16;
  pub const VT_POLARMOTIONYUNC: flatbuffers::VOffsetT = 18;
  pub const VT_UT1UTCSTATE: flatbuffers::VOffsetT = 20;
  pub const VT_UT1UTC: flatbuffers::VOffsetT = 22;
  pub const VT_UT1UTCUNC: flatbuffers::VOffsetT = 24;
  pub const VT_LOD: flatbuffers::VOffsetT = 26;
  pub const VT_LODUNC: flatbuffers::VOffsetT = 28;
  pub const VT_NUTATIONSTATE: flatbuffers::VOffsetT = 30;
  pub const VT_DPSI: flatbuffers::VOffsetT = 32;
  pub const VT_DPSIUNC: flatbuffers::VOffsetT = 34;
  pub const VT_DEPSILON: flatbuffers::VOffsetT = 36;
  pub const VT_DEPSILONUNC: flatbuffers::VOffsetT = 38;
  pub const VT_DX: flatbuffers::VOffsetT = 40;
  pub const VT_DXUNC: flatbuffers::VOffsetT = 42;
  pub const VT_DY: flatbuffers::VOffsetT = 44;
  pub const VT_DYUNC: flatbuffers::VOffsetT = 46;
  pub const VT_POLARMOTIONXB: flatbuffers::VOffsetT = 48;
  pub const VT_POLARMOTIONYB: flatbuffers::VOffsetT = 50;
  pub const VT_UT1UTCB: flatbuffers::VOffsetT = 52;
  pub const VT_DPSIB: flatbuffers::VOffsetT = 54;
  pub const VT_DEPSILONB: flatbuffers::VOffsetT = 56;
  pub const VT_DXB: flatbuffers::VOffsetT = 58;
  pub const VT_DYB: flatbuffers::VOffsetT = 60;
  pub const VT_PRECESSIONNUTATIONSTD: flatbuffers::VOffsetT = 62;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 64;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 66;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 68;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 70;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 74;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 76;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Eop_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Eop_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<Eop_Abridged<'bldr>> {
    let mut builder = Eop_AbridgedBuilder::new(_fbb);
    builder.add_dYB(args.dYB);
    builder.add_dXB(args.dXB);
    builder.add_dEpsilonB(args.dEpsilonB);
    builder.add_dPSIB(args.dPSIB);
    builder.add_ut1UTCB(args.ut1UTCB);
    builder.add_polarMotionYB(args.polarMotionYB);
    builder.add_polarMotionXB(args.polarMotionXB);
    builder.add_dYUnc(args.dYUnc);
    builder.add_dY(args.dY);
    builder.add_dXUnc(args.dXUnc);
    builder.add_dX(args.dX);
    builder.add_dEpsilonUnc(args.dEpsilonUnc);
    builder.add_dEpsilon(args.dEpsilon);
    builder.add_dPSIUnc(args.dPSIUnc);
    builder.add_dPSI(args.dPSI);
    builder.add_lodUnc(args.lodUnc);
    builder.add_lod(args.lod);
    builder.add_ut1UTCUnc(args.ut1UTCUnc);
    builder.add_ut1UTC(args.ut1UTC);
    builder.add_polarMotionYUnc(args.polarMotionYUnc);
    builder.add_polarMotionY(args.polarMotionY);
    builder.add_polarMotionXUnc(args.polarMotionXUnc);
    builder.add_polarMotionX(args.polarMotionX);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    if let Some(x) = args.precessionNutationStd { builder.add_precessionNutationStd(x); }
    if let Some(x) = args.eopDate { builder.add_eopDate(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_nutationState(args.nutationState);
    builder.add_ut1UTCState(args.ut1UTCState);
    builder.add_polarMotionState(args.polarMotionState);
    builder.finish()
  }

  pub fn unpack(&self) -> Eop_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let eopDate = self.eopDate().map(|x| {
      x.to_string()
    });
    let polarMotionState = self.polarMotionState();
    let polarMotionX = self.polarMotionX();
    let polarMotionXUnc = self.polarMotionXUnc();
    let polarMotionY = self.polarMotionY();
    let polarMotionYUnc = self.polarMotionYUnc();
    let ut1UTCState = self.ut1UTCState();
    let ut1UTC = self.ut1UTC();
    let ut1UTCUnc = self.ut1UTCUnc();
    let lod = self.lod();
    let lodUnc = self.lodUnc();
    let nutationState = self.nutationState();
    let dPSI = self.dPSI();
    let dPSIUnc = self.dPSIUnc();
    let dEpsilon = self.dEpsilon();
    let dEpsilonUnc = self.dEpsilonUnc();
    let dX = self.dX();
    let dXUnc = self.dXUnc();
    let dY = self.dY();
    let dYUnc = self.dYUnc();
    let polarMotionXB = self.polarMotionXB();
    let polarMotionYB = self.polarMotionYB();
    let ut1UTCB = self.ut1UTCB();
    let dPSIB = self.dPSIB();
    let dEpsilonB = self.dEpsilonB();
    let dXB = self.dXB();
    let dYB = self.dYB();
    let precessionNutationStd = self.precessionNutationStd().map(|x| {
      x.to_string()
    });
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    Eop_AbridgedT {
      id,
      classificationMarking,
      eopDate,
      polarMotionState,
      polarMotionX,
      polarMotionXUnc,
      polarMotionY,
      polarMotionYUnc,
      ut1UTCState,
      ut1UTC,
      ut1UTCUnc,
      lod,
      lodUnc,
      nutationState,
      dPSI,
      dPSIUnc,
      dEpsilon,
      dEpsilonUnc,
      dX,
      dXUnc,
      dY,
      dYUnc,
      polarMotionXB,
      polarMotionYB,
      ut1UTCB,
      dPSIB,
      dEpsilonB,
      dXB,
      dYB,
      precessionNutationStd,
      rawFileURI,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EOP-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Effective date/time for the EOP values in ISO8601 UTC format.  The values could be current or predicted.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eopDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_EOPDATE, None)}
  }
  /// Flag indicating Issued (I), or Predicted (P) for this record's polar motion values.
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn polarMotionState(&self) -> Eop_Abridged_polarMotionState_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Eop_Abridged_polarMotionState_Enum>(Eop_Abridged::VT_POLARMOTIONSTATE, Some(Eop_Abridged_polarMotionState_Enum::I)).unwrap()}
  }
  /// The Bulletin A X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.182987
  /// Constraints: No constraints specified.
  #[inline]
  pub fn polarMotionX(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_POLARMOTIONX, Some(0.0)).unwrap()}
  }
  /// Estimated uncertainty/error in polarMotionX value in arc seconds.
  /// Example: /// Example: 0.000672
  /// Constraints: No constraints specified.
  #[inline]
  pub fn polarMotionXUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_POLARMOTIONXUNC, Some(0.0)).unwrap()}
  }
  /// The Bulletin A Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.168775
  /// Constraints: No constraints specified.
  #[inline]
  pub fn polarMotionY(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_POLARMOTIONY, Some(0.0)).unwrap()}
  }
  /// Estimated uncertainty/error in polarMotionY value in arc seconds.
  /// Example: /// Example: 0.000345
  /// Constraints: No constraints specified.
  #[inline]
  pub fn polarMotionYUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_POLARMOTIONYUNC, Some(0.0)).unwrap()}
  }
  /// Flag indicating Issued (I), or Predicted (P) for this record''s Bulletin A UT1-UTC values.
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn ut1UTCState(&self) -> Eop_Abridged_ut1UTCState_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Eop_Abridged_ut1UTCState_Enum>(Eop_Abridged::VT_UT1UTCSTATE, Some(Eop_Abridged_ut1UTCState_Enum::I)).unwrap()}
  }
  /// The difference between the Bulletin A UT1 and UTC time scales as of eopDate in seconds.
  /// Example: /// Example: -0.1251659
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ut1UTC(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_UT1UTC, Some(0.0)).unwrap()}
  }
  /// The estimated uncertainty/error in the ut1UTC value in seconds.
  /// Example: /// Example: 2.07e-05
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ut1UTCUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_UT1UTCUNC, Some(0.0)).unwrap()}
  }
  /// Bulletin A length of day or LOD in milliseconds. Universal time (UT1) is the time of the earth clock, which performs one revolution in about 24h. It is practically proportional to the sidereal time. The excess revolution time is called length of day (LOD).
  /// Example: /// Example: 1.8335
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lod(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_LOD, Some(0.0)).unwrap()}
  }
  /// The estimated uncertainty/error in the lod value in seconds.
  /// Example: /// Example: 0.0201
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lodUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_LODUNC, Some(0.0)).unwrap()}
  }
  /// Flag indicating Issued (I), or Predicted (P) for this record's nutation values (dPSI and dEpsilon).
  /// Example: /// Example: I
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn nutationState(&self) -> Eop_Abridged_nutationState_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Eop_Abridged_nutationState_Enum>(Eop_Abridged::VT_NUTATIONSTATE, Some(Eop_Abridged_nutationState_Enum::I)).unwrap()}
  }
  /// The Bulletin A offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSI is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -10.437
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dPSI(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DPSI, Some(0.0)).unwrap()}
  }
  /// The estimated uncertainty/error in the dPSI value in milliseconds of arc.
  /// Example: /// Example: 0.507
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dPSIUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DPSIUNC, Some(0.0)).unwrap()}
  }
  /// The Bulletin A offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilon is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -0.917
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dEpsilon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DEPSILON, Some(0.0)).unwrap()}
  }
  /// The estimated uncertainty/error in the dEpsilon value in milliseconds of arc.
  /// Example: /// Example: 0.165
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dEpsilonUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DEPSILONUNC, Some(0.0)).unwrap()}
  }
  /// The Bulletin A celestial pole offset along x-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dX is not used when this record represents IAU 1980 data.
  /// Example: /// Example: -0.086
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dX(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DX, Some(0.0)).unwrap()}
  }
  /// The estimated uncertainty/error in the Bulletin A dX value, in milliseconds of arc.
  /// Example: /// Example: 0.202
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dXUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DXUNC, Some(0.0)).unwrap()}
  }
  /// The Bulletin A celestial pole offset along y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dY is not used when this record represents IAU 1980 data.
  /// Example: /// Example: 0.13
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dY(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DY, Some(0.0)).unwrap()}
  }
  /// The estimated uncertainty/error in the Bulletin A dY value, in milliseconds of arc.
  /// Example: /// Example: 0.165
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dYUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DYUNC, Some(0.0)).unwrap()}
  }
  /// Bulletin B X coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.1824
  /// Constraints: No constraints specified.
  #[inline]
  pub fn polarMotionXB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_POLARMOTIONXB, Some(0.0)).unwrap()}
  }
  /// Bulletin B Y coordinate value of earth polar motion at eopDate. Polar motion of the Earth is the motion of the Earth's rotational axis relative to its crust. This is measured with respect to a reference frame in which the solid Earth is fixed (a so-called Earth-centered, Earth-fixed or ECEF reference frame). Measured in arc seconds.
  /// Example: /// Example: 0.1679
  /// Constraints: No constraints specified.
  #[inline]
  pub fn polarMotionYB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_POLARMOTIONYB, Some(0.0)).unwrap()}
  }
  /// The Bulletin B difference between the UT1 and UTC time scales as of eopDate in seconds.
  /// Example: /// Example: -0.1253
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ut1UTCB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_UT1UTCB, Some(0.0)).unwrap()}
  }
  /// The Bulletin B offset in longitude dDy1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dPSIB is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -9.9
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dPSIB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DPSIB, Some(0.0)).unwrap()}
  }
  /// The Bulletin B offset in obliquity dDe1980 with respect to the IAU 1976 Theory of Precession and the IAU 1980 Theory of Nutation, measured in milliseconds of arc. Note: dEpsilonB is not used when this record represents IAU 2000 data.
  /// Example: /// Example: -1.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dEpsilonB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DEPSILONB, Some(0.0)).unwrap()}
  }
  /// The Bulletin B celestial pole offset along the X-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dXB is not used when this record represents IAU 1980 data.
  /// Example: /// Example: 0.129
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dXB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DXB, Some(0.0)).unwrap()}
  }
  /// The Bulletin B celestial pole offset along the Y-axis with respect to the IAU 2000A Theory of Precession and Nutation, measured in milliseconds of arc. Note: dYB is not used when this record represents IAU 1980 data.
  /// Example: /// Example: -0.653
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dYB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Eop_Abridged::VT_DYB, Some(0.0)).unwrap()}
  }
  /// The IAU Theory of Precession and Theory of Nutation applied to the data in this record. IAU1980 records employ the IAU 1976 Theory of Precession and IAU 1980 Theory of Nutation, and IAU2000 records employ the IAU 2000A Theory of Precession and Nutation.
  /// Example: /// Example: IAU1980
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn precessionNutationStd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_PRECESSIONNUTATIONSTD, None)}
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_RAWFILEURI, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Eop_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Eop_Abridged_dataMode_Enum>(Eop_Abridged::VT_DATAMODE, Some(Eop_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_CREATEDBY, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Eop_Abridged::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for Eop_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eopDate", Self::VT_EOPDATE, false)?
     .visit_field::<Eop_Abridged_polarMotionState_Enum>("polarMotionState", Self::VT_POLARMOTIONSTATE, false)?
     .visit_field::<f64>("polarMotionX", Self::VT_POLARMOTIONX, false)?
     .visit_field::<f64>("polarMotionXUnc", Self::VT_POLARMOTIONXUNC, false)?
     .visit_field::<f64>("polarMotionY", Self::VT_POLARMOTIONY, false)?
     .visit_field::<f64>("polarMotionYUnc", Self::VT_POLARMOTIONYUNC, false)?
     .visit_field::<Eop_Abridged_ut1UTCState_Enum>("ut1UTCState", Self::VT_UT1UTCSTATE, false)?
     .visit_field::<f64>("ut1UTC", Self::VT_UT1UTC, false)?
     .visit_field::<f64>("ut1UTCUnc", Self::VT_UT1UTCUNC, false)?
     .visit_field::<f64>("lod", Self::VT_LOD, false)?
     .visit_field::<f64>("lodUnc", Self::VT_LODUNC, false)?
     .visit_field::<Eop_Abridged_nutationState_Enum>("nutationState", Self::VT_NUTATIONSTATE, false)?
     .visit_field::<f64>("dPSI", Self::VT_DPSI, false)?
     .visit_field::<f64>("dPSIUnc", Self::VT_DPSIUNC, false)?
     .visit_field::<f64>("dEpsilon", Self::VT_DEPSILON, false)?
     .visit_field::<f64>("dEpsilonUnc", Self::VT_DEPSILONUNC, false)?
     .visit_field::<f64>("dX", Self::VT_DX, false)?
     .visit_field::<f64>("dXUnc", Self::VT_DXUNC, false)?
     .visit_field::<f64>("dY", Self::VT_DY, false)?
     .visit_field::<f64>("dYUnc", Self::VT_DYUNC, false)?
     .visit_field::<f64>("polarMotionXB", Self::VT_POLARMOTIONXB, false)?
     .visit_field::<f64>("polarMotionYB", Self::VT_POLARMOTIONYB, false)?
     .visit_field::<f64>("ut1UTCB", Self::VT_UT1UTCB, false)?
     .visit_field::<f64>("dPSIB", Self::VT_DPSIB, false)?
     .visit_field::<f64>("dEpsilonB", Self::VT_DEPSILONB, false)?
     .visit_field::<f64>("dXB", Self::VT_DXB, false)?
     .visit_field::<f64>("dYB", Self::VT_DYB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("precessionNutationStd", Self::VT_PRECESSIONNUTATIONSTD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<Eop_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct Eop_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eopDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub polarMotionState: Eop_Abridged_polarMotionState_Enum,
    pub polarMotionX: f64,
    pub polarMotionXUnc: f64,
    pub polarMotionY: f64,
    pub polarMotionYUnc: f64,
    pub ut1UTCState: Eop_Abridged_ut1UTCState_Enum,
    pub ut1UTC: f64,
    pub ut1UTCUnc: f64,
    pub lod: f64,
    pub lodUnc: f64,
    pub nutationState: Eop_Abridged_nutationState_Enum,
    pub dPSI: f64,
    pub dPSIUnc: f64,
    pub dEpsilon: f64,
    pub dEpsilonUnc: f64,
    pub dX: f64,
    pub dXUnc: f64,
    pub dY: f64,
    pub dYUnc: f64,
    pub polarMotionXB: f64,
    pub polarMotionYB: f64,
    pub ut1UTCB: f64,
    pub dPSIB: f64,
    pub dEpsilonB: f64,
    pub dXB: f64,
    pub dYB: f64,
    pub precessionNutationStd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Eop_Abridged_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Eop_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    Eop_AbridgedArgs {
      id: None,
      classificationMarking: None,
      eopDate: None,
      polarMotionState: Eop_Abridged_polarMotionState_Enum::I,
      polarMotionX: 0.0,
      polarMotionXUnc: 0.0,
      polarMotionY: 0.0,
      polarMotionYUnc: 0.0,
      ut1UTCState: Eop_Abridged_ut1UTCState_Enum::I,
      ut1UTC: 0.0,
      ut1UTCUnc: 0.0,
      lod: 0.0,
      lodUnc: 0.0,
      nutationState: Eop_Abridged_nutationState_Enum::I,
      dPSI: 0.0,
      dPSIUnc: 0.0,
      dEpsilon: 0.0,
      dEpsilonUnc: 0.0,
      dX: 0.0,
      dXUnc: 0.0,
      dY: 0.0,
      dYUnc: 0.0,
      polarMotionXB: 0.0,
      polarMotionYB: 0.0,
      ut1UTCB: 0.0,
      dPSIB: 0.0,
      dEpsilonB: 0.0,
      dXB: 0.0,
      dYB: 0.0,
      precessionNutationStd: None,
      rawFileURI: None,
      source: None,
      origin: None,
      dataMode: Eop_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}

pub struct Eop_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Eop_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_eopDate(&mut self, eopDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_EOPDATE, eopDate);
  }
  #[inline]
  pub fn add_polarMotionState(&mut self, polarMotionState: Eop_Abridged_polarMotionState_Enum) {
    self.fbb_.push_slot::<Eop_Abridged_polarMotionState_Enum>(Eop_Abridged::VT_POLARMOTIONSTATE, polarMotionState, Eop_Abridged_polarMotionState_Enum::I);
  }
  #[inline]
  pub fn add_polarMotionX(&mut self, polarMotionX: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_POLARMOTIONX, polarMotionX, 0.0);
  }
  #[inline]
  pub fn add_polarMotionXUnc(&mut self, polarMotionXUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_POLARMOTIONXUNC, polarMotionXUnc, 0.0);
  }
  #[inline]
  pub fn add_polarMotionY(&mut self, polarMotionY: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_POLARMOTIONY, polarMotionY, 0.0);
  }
  #[inline]
  pub fn add_polarMotionYUnc(&mut self, polarMotionYUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_POLARMOTIONYUNC, polarMotionYUnc, 0.0);
  }
  #[inline]
  pub fn add_ut1UTCState(&mut self, ut1UTCState: Eop_Abridged_ut1UTCState_Enum) {
    self.fbb_.push_slot::<Eop_Abridged_ut1UTCState_Enum>(Eop_Abridged::VT_UT1UTCSTATE, ut1UTCState, Eop_Abridged_ut1UTCState_Enum::I);
  }
  #[inline]
  pub fn add_ut1UTC(&mut self, ut1UTC: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_UT1UTC, ut1UTC, 0.0);
  }
  #[inline]
  pub fn add_ut1UTCUnc(&mut self, ut1UTCUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_UT1UTCUNC, ut1UTCUnc, 0.0);
  }
  #[inline]
  pub fn add_lod(&mut self, lod: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_LOD, lod, 0.0);
  }
  #[inline]
  pub fn add_lodUnc(&mut self, lodUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_LODUNC, lodUnc, 0.0);
  }
  #[inline]
  pub fn add_nutationState(&mut self, nutationState: Eop_Abridged_nutationState_Enum) {
    self.fbb_.push_slot::<Eop_Abridged_nutationState_Enum>(Eop_Abridged::VT_NUTATIONSTATE, nutationState, Eop_Abridged_nutationState_Enum::I);
  }
  #[inline]
  pub fn add_dPSI(&mut self, dPSI: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DPSI, dPSI, 0.0);
  }
  #[inline]
  pub fn add_dPSIUnc(&mut self, dPSIUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DPSIUNC, dPSIUnc, 0.0);
  }
  #[inline]
  pub fn add_dEpsilon(&mut self, dEpsilon: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DEPSILON, dEpsilon, 0.0);
  }
  #[inline]
  pub fn add_dEpsilonUnc(&mut self, dEpsilonUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DEPSILONUNC, dEpsilonUnc, 0.0);
  }
  #[inline]
  pub fn add_dX(&mut self, dX: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DX, dX, 0.0);
  }
  #[inline]
  pub fn add_dXUnc(&mut self, dXUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DXUNC, dXUnc, 0.0);
  }
  #[inline]
  pub fn add_dY(&mut self, dY: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DY, dY, 0.0);
  }
  #[inline]
  pub fn add_dYUnc(&mut self, dYUnc: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DYUNC, dYUnc, 0.0);
  }
  #[inline]
  pub fn add_polarMotionXB(&mut self, polarMotionXB: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_POLARMOTIONXB, polarMotionXB, 0.0);
  }
  #[inline]
  pub fn add_polarMotionYB(&mut self, polarMotionYB: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_POLARMOTIONYB, polarMotionYB, 0.0);
  }
  #[inline]
  pub fn add_ut1UTCB(&mut self, ut1UTCB: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_UT1UTCB, ut1UTCB, 0.0);
  }
  #[inline]
  pub fn add_dPSIB(&mut self, dPSIB: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DPSIB, dPSIB, 0.0);
  }
  #[inline]
  pub fn add_dEpsilonB(&mut self, dEpsilonB: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DEPSILONB, dEpsilonB, 0.0);
  }
  #[inline]
  pub fn add_dXB(&mut self, dXB: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DXB, dXB, 0.0);
  }
  #[inline]
  pub fn add_dYB(&mut self, dYB: f64) {
    self.fbb_.push_slot::<f64>(Eop_Abridged::VT_DYB, dYB, 0.0);
  }
  #[inline]
  pub fn add_precessionNutationStd(&mut self, precessionNutationStd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_PRECESSIONNUTATIONSTD, precessionNutationStd);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Eop_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<Eop_Abridged_dataMode_Enum>(Eop_Abridged::VT_DATAMODE, dataMode, Eop_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Eop_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Eop_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Eop_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Eop_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Eop_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Eop_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("eopDate", &self.eopDate());
      ds.field("polarMotionState", &self.polarMotionState());
      ds.field("polarMotionX", &self.polarMotionX());
      ds.field("polarMotionXUnc", &self.polarMotionXUnc());
      ds.field("polarMotionY", &self.polarMotionY());
      ds.field("polarMotionYUnc", &self.polarMotionYUnc());
      ds.field("ut1UTCState", &self.ut1UTCState());
      ds.field("ut1UTC", &self.ut1UTC());
      ds.field("ut1UTCUnc", &self.ut1UTCUnc());
      ds.field("lod", &self.lod());
      ds.field("lodUnc", &self.lodUnc());
      ds.field("nutationState", &self.nutationState());
      ds.field("dPSI", &self.dPSI());
      ds.field("dPSIUnc", &self.dPSIUnc());
      ds.field("dEpsilon", &self.dEpsilon());
      ds.field("dEpsilonUnc", &self.dEpsilonUnc());
      ds.field("dX", &self.dX());
      ds.field("dXUnc", &self.dXUnc());
      ds.field("dY", &self.dY());
      ds.field("dYUnc", &self.dYUnc());
      ds.field("polarMotionXB", &self.polarMotionXB());
      ds.field("polarMotionYB", &self.polarMotionYB());
      ds.field("ut1UTCB", &self.ut1UTCB());
      ds.field("dPSIB", &self.dPSIB());
      ds.field("dEpsilonB", &self.dEpsilonB());
      ds.field("dXB", &self.dXB());
      ds.field("dYB", &self.dYB());
      ds.field("precessionNutationStd", &self.precessionNutationStd());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Eop_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub eopDate: Option<String>,
  pub polarMotionState: Eop_Abridged_polarMotionState_Enum,
  pub polarMotionX: f64,
  pub polarMotionXUnc: f64,
  pub polarMotionY: f64,
  pub polarMotionYUnc: f64,
  pub ut1UTCState: Eop_Abridged_ut1UTCState_Enum,
  pub ut1UTC: f64,
  pub ut1UTCUnc: f64,
  pub lod: f64,
  pub lodUnc: f64,
  pub nutationState: Eop_Abridged_nutationState_Enum,
  pub dPSI: f64,
  pub dPSIUnc: f64,
  pub dEpsilon: f64,
  pub dEpsilonUnc: f64,
  pub dX: f64,
  pub dXUnc: f64,
  pub dY: f64,
  pub dYUnc: f64,
  pub polarMotionXB: f64,
  pub polarMotionYB: f64,
  pub ut1UTCB: f64,
  pub dPSIB: f64,
  pub dEpsilonB: f64,
  pub dXB: f64,
  pub dYB: f64,
  pub precessionNutationStd: Option<String>,
  pub rawFileURI: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: Eop_Abridged_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub origNetwork: Option<String>,
}
impl Default for Eop_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      eopDate: None,
      polarMotionState: Eop_Abridged_polarMotionState_Enum::I,
      polarMotionX: 0.0,
      polarMotionXUnc: 0.0,
      polarMotionY: 0.0,
      polarMotionYUnc: 0.0,
      ut1UTCState: Eop_Abridged_ut1UTCState_Enum::I,
      ut1UTC: 0.0,
      ut1UTCUnc: 0.0,
      lod: 0.0,
      lodUnc: 0.0,
      nutationState: Eop_Abridged_nutationState_Enum::I,
      dPSI: 0.0,
      dPSIUnc: 0.0,
      dEpsilon: 0.0,
      dEpsilonUnc: 0.0,
      dX: 0.0,
      dXUnc: 0.0,
      dY: 0.0,
      dYUnc: 0.0,
      polarMotionXB: 0.0,
      polarMotionYB: 0.0,
      ut1UTCB: 0.0,
      dPSIB: 0.0,
      dEpsilonB: 0.0,
      dXB: 0.0,
      dYB: 0.0,
      precessionNutationStd: None,
      rawFileURI: None,
      source: None,
      origin: None,
      dataMode: Eop_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}
impl Eop_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Eop_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eopDate = self.eopDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let polarMotionState = self.polarMotionState;
    let polarMotionX = self.polarMotionX;
    let polarMotionXUnc = self.polarMotionXUnc;
    let polarMotionY = self.polarMotionY;
    let polarMotionYUnc = self.polarMotionYUnc;
    let ut1UTCState = self.ut1UTCState;
    let ut1UTC = self.ut1UTC;
    let ut1UTCUnc = self.ut1UTCUnc;
    let lod = self.lod;
    let lodUnc = self.lodUnc;
    let nutationState = self.nutationState;
    let dPSI = self.dPSI;
    let dPSIUnc = self.dPSIUnc;
    let dEpsilon = self.dEpsilon;
    let dEpsilonUnc = self.dEpsilonUnc;
    let dX = self.dX;
    let dXUnc = self.dXUnc;
    let dY = self.dY;
    let dYUnc = self.dYUnc;
    let polarMotionXB = self.polarMotionXB;
    let polarMotionYB = self.polarMotionYB;
    let ut1UTCB = self.ut1UTCB;
    let dPSIB = self.dPSIB;
    let dEpsilonB = self.dEpsilonB;
    let dXB = self.dXB;
    let dYB = self.dYB;
    let precessionNutationStd = self.precessionNutationStd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Eop_Abridged::create(_fbb, &Eop_AbridgedArgs{
      id,
      classificationMarking,
      eopDate,
      polarMotionState,
      polarMotionX,
      polarMotionXUnc,
      polarMotionY,
      polarMotionYUnc,
      ut1UTCState,
      ut1UTC,
      ut1UTCUnc,
      lod,
      lodUnc,
      nutationState,
      dPSI,
      dPSIUnc,
      dEpsilon,
      dEpsilonUnc,
      dX,
      dXUnc,
      dY,
      dYUnc,
      polarMotionXB,
      polarMotionYB,
      ut1UTCB,
      dPSIB,
      dEpsilonB,
      dXB,
      dYB,
      precessionNutationStd,
      rawFileURI,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Eop_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eop_abridged_unchecked`.
pub fn root_as_eop_abridged(buf: &[u8]) -> Result<Eop_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Eop_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Eop_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_eop_abridged_unchecked`.
pub fn size_prefixed_root_as_eop_abridged(buf: &[u8]) -> Result<Eop_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Eop_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Eop_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eop_abridged_unchecked`.
pub fn root_as_eop_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Eop_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Eop_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Eop_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_eop_abridged_unchecked`.
pub fn size_prefixed_root_as_eop_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Eop_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Eop_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Eop_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Eop_Abridged`.
pub unsafe fn root_as_eop_abridged_unchecked(buf: &[u8]) -> Eop_Abridged {
  flatbuffers::root_unchecked::<Eop_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Eop_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Eop_Abridged`.
pub unsafe fn size_prefixed_root_as_eop_abridged_unchecked(buf: &[u8]) -> Eop_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<Eop_Abridged>(buf)
}
pub const EOP_ABRIDGED_IDENTIFIER: &str = "EOPA";

#[inline]
pub fn eop_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EOP_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn eop_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EOP_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_eop_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Eop_Abridged<'a>>) {
  fbb.finish(root, Some(EOP_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_eop_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Eop_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(EOP_ABRIDGED_IDENTIFIER));
}
