// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ONORBIT_INGEST_OBJECT_TYPE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ONORBIT_INGEST_OBJECT_TYPE_ENUM: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ONORBIT_INGEST_OBJECT_TYPE_ENUM: [Onorbit_Ingest_objectType_Enum; 6] = [
  Onorbit_Ingest_objectType_Enum::ROCKET_BODY,
  Onorbit_Ingest_objectType_Enum::DEBRIS,
  Onorbit_Ingest_objectType_Enum::PAYLOAD,
  Onorbit_Ingest_objectType_Enum::PLATFORM,
  Onorbit_Ingest_objectType_Enum::MANNED,
  Onorbit_Ingest_objectType_Enum::UNKNOWN,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Onorbit_Ingest_objectType_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Onorbit_Ingest_objectType_Enum {
  /// No description available.
  pub const ROCKET_BODY: Self = Self(0);
  /// No description available.
  pub const DEBRIS: Self = Self(1);
  /// No description available.
  pub const PAYLOAD: Self = Self(2);
  /// No description available.
  pub const PLATFORM: Self = Self(3);
  /// No description available.
  pub const MANNED: Self = Self(4);
  /// No description available.
  pub const UNKNOWN: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::ROCKET_BODY,
    Self::DEBRIS,
    Self::PAYLOAD,
    Self::PLATFORM,
    Self::MANNED,
    Self::UNKNOWN,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::ROCKET_BODY => Some("ROCKET_BODY"),
      Self::DEBRIS => Some("DEBRIS"),
      Self::PAYLOAD => Some("PAYLOAD"),
      Self::PLATFORM => Some("PLATFORM"),
      Self::MANNED => Some("MANNED"),
      Self::UNKNOWN => Some("UNKNOWN"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Onorbit_Ingest_objectType_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Onorbit_Ingest_objectType_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Onorbit_Ingest_objectType_Enum {
    type Output = Onorbit_Ingest_objectType_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Onorbit_Ingest_objectType_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Onorbit_Ingest_objectType_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Onorbit_Ingest_objectType_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ONORBIT_INGEST_CATEGORY_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ONORBIT_INGEST_CATEGORY_ENUM: i8 = 12;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ONORBIT_INGEST_CATEGORY_ENUM: [Onorbit_Ingest_category_Enum; 13] = [
  Onorbit_Ingest_category_Enum::UNKNOWN,
  Onorbit_Ingest_category_Enum::ON_ORBIT,
  Onorbit_Ingest_category_Enum::DECAYED,
  Onorbit_Ingest_category_Enum::CATALOGED_WITHOUT_STATE,
  Onorbit_Ingest_category_Enum::LAUNCH_NOMINAL,
  Onorbit_Ingest_category_Enum::ANALYST_SATELLITE,
  Onorbit_Ingest_category_Enum::CISLUNAR,
  Onorbit_Ingest_category_Enum::LUNAR,
  Onorbit_Ingest_category_Enum::HYPERBOLIC,
  Onorbit_Ingest_category_Enum::HELIOCENTRIC,
  Onorbit_Ingest_category_Enum::INTERPLANETARY,
  Onorbit_Ingest_category_Enum::LAGRANGIAN,
  Onorbit_Ingest_category_Enum::DOCKED,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Onorbit_Ingest_category_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Onorbit_Ingest_category_Enum {
  /// No description available.
  pub const UNKNOWN: Self = Self(0);
  /// No description available.
  pub const ON_ORBIT: Self = Self(1);
  /// No description available.
  pub const DECAYED: Self = Self(2);
  /// No description available.
  pub const CATALOGED_WITHOUT_STATE: Self = Self(3);
  /// No description available.
  pub const LAUNCH_NOMINAL: Self = Self(4);
  /// No description available.
  pub const ANALYST_SATELLITE: Self = Self(5);
  /// No description available.
  pub const CISLUNAR: Self = Self(6);
  /// No description available.
  pub const LUNAR: Self = Self(7);
  /// No description available.
  pub const HYPERBOLIC: Self = Self(8);
  /// No description available.
  pub const HELIOCENTRIC: Self = Self(9);
  /// No description available.
  pub const INTERPLANETARY: Self = Self(10);
  /// No description available.
  pub const LAGRANGIAN: Self = Self(11);
  /// No description available.
  pub const DOCKED: Self = Self(12);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 12;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::UNKNOWN,
    Self::ON_ORBIT,
    Self::DECAYED,
    Self::CATALOGED_WITHOUT_STATE,
    Self::LAUNCH_NOMINAL,
    Self::ANALYST_SATELLITE,
    Self::CISLUNAR,
    Self::LUNAR,
    Self::HYPERBOLIC,
    Self::HELIOCENTRIC,
    Self::INTERPLANETARY,
    Self::LAGRANGIAN,
    Self::DOCKED,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::UNKNOWN => Some("UNKNOWN"),
      Self::ON_ORBIT => Some("ON_ORBIT"),
      Self::DECAYED => Some("DECAYED"),
      Self::CATALOGED_WITHOUT_STATE => Some("CATALOGED_WITHOUT_STATE"),
      Self::LAUNCH_NOMINAL => Some("LAUNCH_NOMINAL"),
      Self::ANALYST_SATELLITE => Some("ANALYST_SATELLITE"),
      Self::CISLUNAR => Some("CISLUNAR"),
      Self::LUNAR => Some("LUNAR"),
      Self::HYPERBOLIC => Some("HYPERBOLIC"),
      Self::HELIOCENTRIC => Some("HELIOCENTRIC"),
      Self::INTERPLANETARY => Some("INTERPLANETARY"),
      Self::LAGRANGIAN => Some("LAGRANGIAN"),
      Self::DOCKED => Some("DOCKED"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Onorbit_Ingest_category_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Onorbit_Ingest_category_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Onorbit_Ingest_category_Enum {
    type Output = Onorbit_Ingest_category_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Onorbit_Ingest_category_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Onorbit_Ingest_category_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Onorbit_Ingest_category_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ONORBIT_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ONORBIT_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ONORBIT_INGEST_DATA_MODE_ENUM: [Onorbit_Ingest_dataMode_Enum; 4] = [
  Onorbit_Ingest_dataMode_Enum::REAL,
  Onorbit_Ingest_dataMode_Enum::TEST,
  Onorbit_Ingest_dataMode_Enum::SIMULATED,
  Onorbit_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Onorbit_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Onorbit_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Onorbit_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Onorbit_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Onorbit_Ingest_dataMode_Enum {
    type Output = Onorbit_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Onorbit_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Onorbit_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Onorbit_Ingest_dataMode_Enum {}
pub enum Onorbit_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model object representing on-orbit objects or satellites in the system.
pub struct Onorbit_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Onorbit_Ingest<'a> {
  type Inner = Onorbit_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Onorbit_Ingest<'a> {
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_SATNO: flatbuffers::VOffsetT = 8;
  pub const VT_COMMONNAME: flatbuffers::VOffsetT = 10;
  pub const VT_CONSTELLATION: flatbuffers::VOffsetT = 12;
  pub const VT_INTLDES: flatbuffers::VOffsetT = 14;
  pub const VT_LAUNCHDATE: flatbuffers::VOffsetT = 16;
  pub const VT_DECAYDATE: flatbuffers::VOffsetT = 18;
  pub const VT_OBJECTTYPE: flatbuffers::VOffsetT = 20;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 22;
  pub const VT_MISSIONNUMBER: flatbuffers::VOffsetT = 24;
  pub const VT_CATEGORY: flatbuffers::VOffsetT = 26;
  pub const VT_LIFETIMEYEARS: flatbuffers::VOffsetT = 28;
  pub const VT_ALTNAME: flatbuffers::VOffsetT = 30;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 34;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 36;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 38;
  pub const VT_LAUNCHSITEID: flatbuffers::VOffsetT = 40;
  pub const VT_COUNTRYCODE: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Onorbit_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Onorbit_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<Onorbit_Ingest<'bldr>> {
    let mut builder = Onorbit_IngestBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.countryCode { builder.add_countryCode(x); }
    if let Some(x) = args.launchSiteId { builder.add_launchSiteId(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.altName { builder.add_altName(x); }
    builder.add_lifetimeYears(args.lifetimeYears);
    if let Some(x) = args.missionNumber { builder.add_missionNumber(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.decayDate { builder.add_decayDate(x); }
    if let Some(x) = args.launchDate { builder.add_launchDate(x); }
    if let Some(x) = args.intlDes { builder.add_intlDes(x); }
    if let Some(x) = args.constellation { builder.add_constellation(x); }
    if let Some(x) = args.commonName { builder.add_commonName(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_category(args.category);
    builder.add_objectType(args.objectType);
    builder.finish()
  }

  pub fn unpack(&self) -> Onorbit_IngestT {
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let commonName = self.commonName().map(|x| {
      x.to_string()
    });
    let constellation = self.constellation().map(|x| {
      x.to_string()
    });
    let intlDes = self.intlDes().map(|x| {
      x.to_string()
    });
    let launchDate = self.launchDate().map(|x| {
      x.to_string()
    });
    let decayDate = self.decayDate().map(|x| {
      x.to_string()
    });
    let objectType = self.objectType();
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let missionNumber = self.missionNumber().map(|x| {
      x.to_string()
    });
    let category = self.category();
    let lifetimeYears = self.lifetimeYears();
    let altName = self.altName().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let launchSiteId = self.launchSiteId().map(|x| {
      x.to_string()
    });
    let countryCode = self.countryCode().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    Onorbit_IngestT {
      idOnOrbit,
      classificationMarking,
      satNo,
      commonName,
      constellation,
      intlDes,
      launchDate,
      decayDate,
      objectType,
      origin,
      missionNumber,
      category,
      lifetimeYears,
      altName,
      createdAt,
      createdBy,
      source,
      dataMode,
      launchSiteId,
      countryCode,
      origNetwork,
    }
  }

  /// For the public catalog, the idOnOrbit is typically the satellite number as a string, but may be a UUID for analyst or other unknown or untracked satellites, auto-generated by the system.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_IDONORBIT, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Onorbit_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Common name of the on-orbit object.
  /// Example: /// Example: Example common name
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn commonName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_COMMONNAME, None)}
  }
  /// Constellation to which this satellite belongs.
  /// Example: /// Example: Big Dipper
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn constellation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_CONSTELLATION, None)}
  }
  /// International Designator, typically of the format YYYYLLLAAA, where YYYY is the launch year, LLL is the sequential launch number of that year, and AAA is an optional launch piece designator for the launch.
  /// Example: /// Example: 2021123ABC
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn intlDes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_INTLDES, None)}
  }
  /// Date of launch.
  /// Example: /// Example: 2018-01-01
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_LAUNCHDATE, None)}
  }
  /// Date of decay.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn decayDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_DECAYDATE, None)}
  }
  /// Type of on-orbit object: ROCKET BODY, DEBRIS, PAYLOAD, PLATFORM, MANNED, UNKNOWN.
  /// Example: /// Example: PAYLOAD
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn objectType(&self) -> Onorbit_Ingest_objectType_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Onorbit_Ingest_objectType_Enum>(Onorbit_Ingest::VT_OBJECTTYPE, Some(Onorbit_Ingest_objectType_Enum::ROCKET_BODY)).unwrap()}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_ORIGIN, None)}
  }
  /// Mission number of the on-orbit object.
  /// Example: /// Example: Expedition 1
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn missionNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_MISSIONNUMBER, None)}
  }
  /// Category of the on-orbit object. (Unknown, On-Orbit, Decayed, Cataloged Without State, Launch Nominal, Analyst Satellite, Cislunar, Lunar, Hyperbolic, Heliocentric, Interplanetary, Lagrangian, Docked).
  /// Example: /// Example: Lunar
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn category(&self) -> Onorbit_Ingest_category_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Onorbit_Ingest_category_Enum>(Onorbit_Ingest::VT_CATEGORY, Some(Onorbit_Ingest_category_Enum::UNKNOWN)).unwrap()}
  }
  /// Estimated lifetime of the on-orbit payload, if known.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lifetimeYears(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Onorbit_Ingest::VT_LIFETIMEYEARS, Some(0)).unwrap()}
  }
  /// Alternate name of the on-orbit object.
  /// Example: /// Example: Alternate Name
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn altName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_ALTNAME, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_SOURCE, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Onorbit_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Onorbit_Ingest_dataMode_Enum>(Onorbit_Ingest::VT_DATAMODE, Some(Onorbit_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Id of the associated launchSite entity.
  /// Example: /// Example: LAUNCHSITE-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn launchSiteId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_LAUNCHSITEID, None)}
  }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDL’s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: No constraints specified.
  #[inline]
  pub fn countryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_COUNTRYCODE, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Onorbit_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for Onorbit_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("commonName", Self::VT_COMMONNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("constellation", Self::VT_CONSTELLATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("intlDes", Self::VT_INTLDES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchDate", Self::VT_LAUNCHDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("decayDate", Self::VT_DECAYDATE, false)?
     .visit_field::<Onorbit_Ingest_objectType_Enum>("objectType", Self::VT_OBJECTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionNumber", Self::VT_MISSIONNUMBER, false)?
     .visit_field::<Onorbit_Ingest_category_Enum>("category", Self::VT_CATEGORY, false)?
     .visit_field::<i32>("lifetimeYears", Self::VT_LIFETIMEYEARS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altName", Self::VT_ALTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<Onorbit_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchSiteId", Self::VT_LAUNCHSITEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryCode", Self::VT_COUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct Onorbit_IngestArgs<'a> {
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub commonName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub constellation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub intlDes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub decayDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objectType: Onorbit_Ingest_objectType_Enum,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub category: Onorbit_Ingest_category_Enum,
    pub lifetimeYears: i32,
    pub altName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Onorbit_Ingest_dataMode_Enum,
    pub launchSiteId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub countryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Onorbit_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    Onorbit_IngestArgs {
      idOnOrbit: None,
      classificationMarking: None,
      satNo: 0,
      commonName: None,
      constellation: None,
      intlDes: None,
      launchDate: None,
      decayDate: None,
      objectType: Onorbit_Ingest_objectType_Enum::ROCKET_BODY,
      origin: None,
      missionNumber: None,
      category: Onorbit_Ingest_category_Enum::UNKNOWN,
      lifetimeYears: 0,
      altName: None,
      createdAt: None,
      createdBy: None,
      source: None,
      dataMode: Onorbit_Ingest_dataMode_Enum::REAL,
      launchSiteId: None,
      countryCode: None,
      origNetwork: None,
    }
  }
}

pub struct Onorbit_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Onorbit_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(Onorbit_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_commonName(&mut self, commonName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_COMMONNAME, commonName);
  }
  #[inline]
  pub fn add_constellation(&mut self, constellation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_CONSTELLATION, constellation);
  }
  #[inline]
  pub fn add_intlDes(&mut self, intlDes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_INTLDES, intlDes);
  }
  #[inline]
  pub fn add_launchDate(&mut self, launchDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_LAUNCHDATE, launchDate);
  }
  #[inline]
  pub fn add_decayDate(&mut self, decayDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_DECAYDATE, decayDate);
  }
  #[inline]
  pub fn add_objectType(&mut self, objectType: Onorbit_Ingest_objectType_Enum) {
    self.fbb_.push_slot::<Onorbit_Ingest_objectType_Enum>(Onorbit_Ingest::VT_OBJECTTYPE, objectType, Onorbit_Ingest_objectType_Enum::ROCKET_BODY);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_missionNumber(&mut self, missionNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_MISSIONNUMBER, missionNumber);
  }
  #[inline]
  pub fn add_category(&mut self, category: Onorbit_Ingest_category_Enum) {
    self.fbb_.push_slot::<Onorbit_Ingest_category_Enum>(Onorbit_Ingest::VT_CATEGORY, category, Onorbit_Ingest_category_Enum::UNKNOWN);
  }
  #[inline]
  pub fn add_lifetimeYears(&mut self, lifetimeYears: i32) {
    self.fbb_.push_slot::<i32>(Onorbit_Ingest::VT_LIFETIMEYEARS, lifetimeYears, 0);
  }
  #[inline]
  pub fn add_altName(&mut self, altName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_ALTNAME, altName);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Onorbit_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<Onorbit_Ingest_dataMode_Enum>(Onorbit_Ingest::VT_DATAMODE, dataMode, Onorbit_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_launchSiteId(&mut self, launchSiteId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_LAUNCHSITEID, launchSiteId);
  }
  #[inline]
  pub fn add_countryCode(&mut self, countryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_COUNTRYCODE, countryCode);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Onorbit_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Onorbit_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Onorbit_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Onorbit_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Onorbit_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Onorbit_Ingest");
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("satNo", &self.satNo());
      ds.field("commonName", &self.commonName());
      ds.field("constellation", &self.constellation());
      ds.field("intlDes", &self.intlDes());
      ds.field("launchDate", &self.launchDate());
      ds.field("decayDate", &self.decayDate());
      ds.field("objectType", &self.objectType());
      ds.field("origin", &self.origin());
      ds.field("missionNumber", &self.missionNumber());
      ds.field("category", &self.category());
      ds.field("lifetimeYears", &self.lifetimeYears());
      ds.field("altName", &self.altName());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("dataMode", &self.dataMode());
      ds.field("launchSiteId", &self.launchSiteId());
      ds.field("countryCode", &self.countryCode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Onorbit_IngestT {
  pub idOnOrbit: Option<String>,
  pub classificationMarking: Option<String>,
  pub satNo: i32,
  pub commonName: Option<String>,
  pub constellation: Option<String>,
  pub intlDes: Option<String>,
  pub launchDate: Option<String>,
  pub decayDate: Option<String>,
  pub objectType: Onorbit_Ingest_objectType_Enum,
  pub origin: Option<String>,
  pub missionNumber: Option<String>,
  pub category: Onorbit_Ingest_category_Enum,
  pub lifetimeYears: i32,
  pub altName: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub dataMode: Onorbit_Ingest_dataMode_Enum,
  pub launchSiteId: Option<String>,
  pub countryCode: Option<String>,
  pub origNetwork: Option<String>,
}
impl Default for Onorbit_IngestT {
  fn default() -> Self {
    Self {
      idOnOrbit: None,
      classificationMarking: None,
      satNo: 0,
      commonName: None,
      constellation: None,
      intlDes: None,
      launchDate: None,
      decayDate: None,
      objectType: Onorbit_Ingest_objectType_Enum::ROCKET_BODY,
      origin: None,
      missionNumber: None,
      category: Onorbit_Ingest_category_Enum::UNKNOWN,
      lifetimeYears: 0,
      altName: None,
      createdAt: None,
      createdBy: None,
      source: None,
      dataMode: Onorbit_Ingest_dataMode_Enum::REAL,
      launchSiteId: None,
      countryCode: None,
      origNetwork: None,
    }
  }
}
impl Onorbit_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Onorbit_Ingest<'b>> {
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let commonName = self.commonName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let constellation = self.constellation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let intlDes = self.intlDes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchDate = self.launchDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let decayDate = self.decayDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objectType = self.objectType;
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionNumber = self.missionNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let category = self.category;
    let lifetimeYears = self.lifetimeYears;
    let altName = self.altName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let launchSiteId = self.launchSiteId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let countryCode = self.countryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Onorbit_Ingest::create(_fbb, &Onorbit_IngestArgs{
      idOnOrbit,
      classificationMarking,
      satNo,
      commonName,
      constellation,
      intlDes,
      launchDate,
      decayDate,
      objectType,
      origin,
      missionNumber,
      category,
      lifetimeYears,
      altName,
      createdAt,
      createdBy,
      source,
      dataMode,
      launchSiteId,
      countryCode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Onorbit_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_ingest_unchecked`.
pub fn root_as_onorbit_ingest(buf: &[u8]) -> Result<Onorbit_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Onorbit_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Onorbit_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_onorbit_ingest_unchecked`.
pub fn size_prefixed_root_as_onorbit_ingest(buf: &[u8]) -> Result<Onorbit_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Onorbit_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Onorbit_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_ingest_unchecked`.
pub fn root_as_onorbit_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Onorbit_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Onorbit_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Onorbit_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onorbit_ingest_unchecked`.
pub fn size_prefixed_root_as_onorbit_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Onorbit_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Onorbit_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Onorbit_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Onorbit_Ingest`.
pub unsafe fn root_as_onorbit_ingest_unchecked(buf: &[u8]) -> Onorbit_Ingest {
  flatbuffers::root_unchecked::<Onorbit_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Onorbit_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Onorbit_Ingest`.
pub unsafe fn size_prefixed_root_as_onorbit_ingest_unchecked(buf: &[u8]) -> Onorbit_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<Onorbit_Ingest>(buf)
}
pub const ONORBIT_INGEST_IDENTIFIER: &str = "ONOR";

#[inline]
pub fn onorbit_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn onorbit_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONORBIT_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_onorbit_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Onorbit_Ingest<'a>>) {
  fbb.finish(root, Some(ONORBIT_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_onorbit_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Onorbit_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ONORBIT_INGEST_IDENTIFIER));
}
