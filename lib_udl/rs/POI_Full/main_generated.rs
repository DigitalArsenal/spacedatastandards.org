// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_POI_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_POI_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_POI_FULL_DATA_MODE_ENUM: [POI_Full_dataMode_Enum; 4] = [
  POI_Full_dataMode_Enum::REAL,
  POI_Full_dataMode_Enum::TEST,
  POI_Full_dataMode_Enum::SIMULATED,
  POI_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct POI_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl POI_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for POI_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for POI_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for POI_Full_dataMode_Enum {
    type Output = POI_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for POI_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for POI_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for POI_Full_dataMode_Enum {}
pub enum POI_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A Point of Interest is loosely based on the MITRE CoT (Cursor on Target) schema (https://www.mitre.org/publications/technical-papers/cursorontarget-message-router-users-guide) and provides a simple way to specify a point on the earth for a variety of purposes (tasking, targeting, etc).
pub struct POI_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for POI_Full<'a> {
  type Inner = POI_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> POI_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_PPS: flatbuffers::VOffsetT = 8;
  pub const VT_MSNID: flatbuffers::VOffsetT = 10;
  pub const VT_PRI: flatbuffers::VOffsetT = 12;
  pub const VT_TRKID: flatbuffers::VOffsetT = 14;
  pub const VT_IDWEATHERREPORT: flatbuffers::VOffsetT = 16;
  pub const VT_POIID: flatbuffers::VOffsetT = 18;
  pub const VT_NAME: flatbuffers::VOffsetT = 20;
  pub const VT_DESC: flatbuffers::VOffsetT = 22;
  pub const VT_SPEC: flatbuffers::VOffsetT = 24;
  pub const VT_IDENT: flatbuffers::VOffsetT = 26;
  pub const VT_ENV: flatbuffers::VOffsetT = 28;
  pub const VT_PLAT: flatbuffers::VOffsetT = 30;
  pub const VT_ACTIVITY: flatbuffers::VOffsetT = 32;
  pub const VT_TS: flatbuffers::VOffsetT = 34;
  pub const VT_START: flatbuffers::VOffsetT = 36;
  pub const VT_STALE: flatbuffers::VOffsetT = 38;
  pub const VT_HOW: flatbuffers::VOffsetT = 40;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 42;
  pub const VT_LAT: flatbuffers::VOffsetT = 44;
  pub const VT_LON: flatbuffers::VOffsetT = 46;
  pub const VT_ALT: flatbuffers::VOffsetT = 48;
  pub const VT_AZ: flatbuffers::VOffsetT = 50;
  pub const VT_EL: flatbuffers::VOffsetT = 52;
  pub const VT_LE: flatbuffers::VOffsetT = 54;
  pub const VT_CE: flatbuffers::VOffsetT = 56;
  pub const VT_ELLE: flatbuffers::VOffsetT = 58;
  pub const VT_CNTCT: flatbuffers::VOffsetT = 60;
  pub const VT_CONF: flatbuffers::VOffsetT = 62;
  pub const VT_URLS: flatbuffers::VOffsetT = 64;
  pub const VT_AREA: flatbuffers::VOffsetT = 66;
  pub const VT_ATEXT: flatbuffers::VOffsetT = 68;
  pub const VT_AGJSON: flatbuffers::VOffsetT = 70;
  pub const VT_ATYPE: flatbuffers::VOffsetT = 72;
  pub const VT_ANDIMS: flatbuffers::VOffsetT = 74;
  pub const VT_ASRID: flatbuffers::VOffsetT = 76;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 78;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 80;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 82;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 84;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 86;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 88;
  pub const VT_GROUPS: flatbuffers::VOffsetT = 90;
  pub const VT_ASSET: flatbuffers::VOffsetT = 92;
  pub const VT_TAGS: flatbuffers::VOffsetT = 94;
  pub const VT_SRCTYPS: flatbuffers::VOffsetT = 96;
  pub const VT_SRCIDS: flatbuffers::VOffsetT = 98;
  pub const VT_BENUMBER: flatbuffers::VOffsetT = 100;
  pub const VT_ORIENTATION: flatbuffers::VOffsetT = 102;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 104;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 106;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    POI_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args POI_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<POI_Full<'bldr>> {
    let mut builder = POI_FullBuilder::new(_fbb);
    builder.add_orientation(args.orientation);
    builder.add_conf(args.conf);
    builder.add_ce(args.ce);
    builder.add_le(args.le);
    builder.add_el(args.el);
    builder.add_az(args.az);
    builder.add_alt(args.alt);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.beNumber { builder.add_beNumber(x); }
    if let Some(x) = args.srcIds { builder.add_srcIds(x); }
    if let Some(x) = args.srcTyps { builder.add_srcTyps(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.asset { builder.add_asset(x); }
    if let Some(x) = args.groups { builder.add_groups(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    builder.add_asrid(args.asrid);
    builder.add_andims(args.andims);
    if let Some(x) = args.atype { builder.add_atype(x); }
    if let Some(x) = args.agjson { builder.add_agjson(x); }
    if let Some(x) = args.atext { builder.add_atext(x); }
    if let Some(x) = args.area { builder.add_area(x); }
    if let Some(x) = args.urls { builder.add_urls(x); }
    if let Some(x) = args.cntct { builder.add_cntct(x); }
    if let Some(x) = args.elle { builder.add_elle(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.how { builder.add_how(x); }
    if let Some(x) = args.stale { builder.add_stale(x); }
    if let Some(x) = args.start { builder.add_start(x); }
    if let Some(x) = args.ts { builder.add_ts(x); }
    if let Some(x) = args.activity { builder.add_activity(x); }
    if let Some(x) = args.plat { builder.add_plat(x); }
    if let Some(x) = args.env { builder.add_env(x); }
    if let Some(x) = args.ident { builder.add_ident(x); }
    if let Some(x) = args.spec { builder.add_spec(x); }
    if let Some(x) = args.desc { builder.add_desc(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.poiid { builder.add_poiid(x); }
    if let Some(x) = args.idWeatherReport { builder.add_idWeatherReport(x); }
    if let Some(x) = args.trkid { builder.add_trkid(x); }
    builder.add_pri(args.pri);
    if let Some(x) = args.msnid { builder.add_msnid(x); }
    if let Some(x) = args.pps { builder.add_pps(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> POI_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let pps = self.pps().map(|x| {
      x.to_string()
    });
    let msnid = self.msnid().map(|x| {
      x.to_string()
    });
    let pri = self.pri();
    let trkid = self.trkid().map(|x| {
      x.to_string()
    });
    let idWeatherReport = self.idWeatherReport().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let poiid = self.poiid().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let desc = self.desc().map(|x| {
      x.to_string()
    });
    let spec = self.spec().map(|x| {
      x.to_string()
    });
    let ident = self.ident().map(|x| {
      x.to_string()
    });
    let env = self.env().map(|x| {
      x.to_string()
    });
    let plat = self.plat().map(|x| {
      x.to_string()
    });
    let activity = self.activity().map(|x| {
      x.to_string()
    });
    let ts = self.ts().map(|x| {
      x.to_string()
    });
    let start = self.start().map(|x| {
      x.to_string()
    });
    let stale = self.stale().map(|x| {
      x.to_string()
    });
    let how = self.how().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let lat = self.lat();
    let lon = self.lon();
    let alt = self.alt();
    let az = self.az();
    let el = self.el();
    let le = self.le();
    let ce = self.ce();
    let elle = self.elle().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let cntct = self.cntct().map(|x| {
      x.to_string()
    });
    let conf = self.conf();
    let urls = self.urls().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let area = self.area().map(|x| {
      x.to_string()
    });
    let atext = self.atext().map(|x| {
      x.to_string()
    });
    let agjson = self.agjson().map(|x| {
      x.to_string()
    });
    let atype = self.atype().map(|x| {
      x.to_string()
    });
    let andims = self.andims();
    let asrid = self.asrid();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let groups = self.groups().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let asset = self.asset().map(|x| {
      x.to_string()
    });
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcTyps = self.srcTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcIds = self.srcIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let beNumber = self.beNumber().map(|x| {
      x.to_string()
    });
    let orientation = self.orientation();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    POI_FullT {
      id,
      classificationMarking,
      pps,
      msnid,
      pri,
      trkid,
      idWeatherReport,
      poiid,
      name,
      desc,
      spec,
      ident,
      env,
      plat,
      activity,
      ts,
      start,
      stale,
      how,
      type_,
      lat,
      lon,
      alt,
      az,
      el,
      le,
      ce,
      elle,
      cntct,
      conf,
      urls,
      area,
      atext,
      agjson,
      atype,
      andims,
      asrid,
      createdAt,
      createdBy,
      sourceDL,
      source,
      dataMode,
      origin,
      groups,
      asset,
      tags,
      srcTyps,
      srcIds,
      beNumber,
      orientation,
      origNetwork,
      transactionId,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The purpose of this Point of Interest record (e.g., BDA, EQPT, EVENT, GEOL, HZRD, PPLI, SHOTBOX, SURVL, TGT, TSK, WTHR).
  /// Example: /// Example: BDA
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn pps(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_PPS, None)}
  }
  /// Optional mission ID related to the POI.
  /// Example: /// Example: MSN-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn msnid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_MSNID, None)}
  }
  /// Priority of the  POI target object.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pri(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(POI_Full::VT_PRI, Some(0)).unwrap()}
  }
  /// Optional ID of an associated track related to the POI object, if applicable. This track ID should correlate the Point of Interest to a track from the Track service.
  /// Example: /// Example: TRK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trkid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_TRKID, None)}
  }
  /// Array of one or more unique identifiers of weather records associated with this POI. Each element in array must be 36 characters or less in length.
  /// Example: /// Example: ['WEATHER-EVENT-ID1', 'WEATHER-EVENT-ID2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn idWeatherReport(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(POI_Full::VT_IDWEATHERREPORT, None)}
  }
  /// Identifier of the actual Point of Interest or target object, which should remain the same on subsequent POI records of the same Point of Interest.
  /// Example: /// Example: POI-ID
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn poiid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_POIID, None)}
  }
  /// Name of the POI target object.
  /// Example: /// Example: POI_NAME
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_NAME, None)}
  }
  /// Description of the POI target object.
  /// Example: /// Example: Description of the object
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn desc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_DESC, None)}
  }
  /// Specific point/object type (e.g., 82/GROUND, LIGHT_TANK, etc.).
  /// Example: /// Example: LIGHT_TANK
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn spec(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_SPEC, None)}
  }
  /// Estimated identity of the point/object (e.g., FRIEND, HOSTILE, SUSPECT, ASSUMED_FRIEND, UNKNOWN, etc.).
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn ident(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_IDENT, None)}
  }
  /// POI environment type (e.g., LAND, SURFACE, SUBSURFACE, UNKNOWN, etc.).
  /// Example: /// Example: SURFACE
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn env(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ENV, None)}
  }
  /// POI/object platform type (e.g., 14/GROUND, COMBAT_VEHICLE, etc.).
  /// Example: /// Example: COMBAT_VEHICLE
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn plat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_PLAT, None)}
  }
  /// The activity in which the POI subject is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 30/LAND) or as the descriptive enumeration (e.g. TRAINING), which are equivalent.
  /// Example: /// Example: TRAINING
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn activity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ACTIVITY, None)}
  }
  /// Activity/POI timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ts(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_TS, None)}
  }
  /// Start time of event validity (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn start(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_START, None)}
  }
  /// Stale timestamp (optional), in ISO8601 UTC format.
  /// Example: /// Example: 2020-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn stale(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_STALE, None)}
  }
  /// How the event point was generated, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: h-g-i-g-o
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn how(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_HOW, None)}
  }
  /// Event type, in CoT object heirarchy notation (optional, CoT).
  /// Example: /// Example: a-h-G
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_TYPE_, None)}
  }
  /// WGS-84 latitude of the POI, in degrees (+N, -S), -90 to 90.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_LAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the POI, in degrees (+E, -W), -180 to 180.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_LON, Some(0.0)).unwrap()}
  }
  /// Point height above ellipsoid (WGS-84), in meters.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_ALT, Some(0.0)).unwrap()}
  }
  /// Target object pointing azimuth angle, in degrees (for target with sensing or emitting capability).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn az(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_AZ, Some(0.0)).unwrap()}
  }
  /// Target object pointing elevation angle, in degrees (for target with sensing or emitting capability).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn el(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_EL, Some(0.0)).unwrap()}
  }
  /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn le(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_LE, Some(0.0)).unwrap()}
  }
  /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ce(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_CE, Some(0.0)).unwrap()}
  }
  /// Elliptical area about the lat/lon point, specified as [semi-major axis (m), semi-minor axis (m), orientation (deg) off true North at POI].
  /// Example: /// Example: [125.5, 85.1, 125.75]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elle(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(POI_Full::VT_ELLE, None)}
  }
  /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  /// Example: /// Example: Contact Info
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn cntct(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_CNTCT, None)}
  }
  /// POI confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn conf(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_CONF, Some(0.0)).unwrap()}
  }
  /// List of URLs to before/after images of this Point of Interest entity.
  /// Example: /// Example: ['URL1', 'URL2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn urls(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(POI_Full::VT_URLS, None)}
  }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn area(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_AREA, None)}
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn atext(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ATEXT, None)}
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  #[inline]
  pub fn agjson(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_AGJSON, None)}
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: Type1
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn atype(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ATYPE, None)}
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn andims(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(POI_Full::VT_ANDIMS, Some(0)).unwrap()}
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn asrid(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(POI_Full::VT_ASRID, Some(0)).unwrap()}
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_SOURCE, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> POI_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<POI_Full_dataMode_Enum>(POI_Full::VT_DATAMODE, Some(POI_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ORIGIN, None)}
  }
  /// Optional array of groups used when a POI msg originates from a TAK server. Each group must be no longer than 256 characters. Groups identify a set of users targeted by the cot/poi msg.
  /// Example: /// Example: ['GROUP1', 'GROUP2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn groups(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(POI_Full::VT_GROUPS, None)}
  }
  /// ID/name of the platform or entity providing the POI data.
  /// Example: /// Example: PLATFORM_NAME
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn asset(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ASSET, None)}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(POI_Full::VT_TAGS, None)}
  }
  /// Array of UDL record types (GROUNDIMAGE, RFOBS) that are related to the determination of this Point of Interest. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['TYPE1', 'TYPE2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(POI_Full::VT_SRCTYPS, None)}
  }
  /// Array of UUIDs of the UDL data records that are related to the determination of this Point of Interest. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size.  See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['ID1', 'ID2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(POI_Full::VT_SRCIDS, None)}
  }
  /// The Basic Encyclopedia Number associated with the POI, if applicable.
  /// Example: /// Example: 0427RT1030
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn beNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_BENUMBER, None)}
  }
  /// The orientation of a vehicle, platform or other entity described by the POI. The orientation is defined as the pointing direction of the front/nose of the object in degrees clockwise from true North at the object point.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn orientation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(POI_Full::VT_ORIENTATION, Some(0.0)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_ORIGNETWORK, None)}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(POI_Full::VT_TRANSACTIONID, None)}
  }
}

impl flatbuffers::Verifiable for POI_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pps", Self::VT_PPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msnid", Self::VT_MSNID, false)?
     .visit_field::<i32>("pri", Self::VT_PRI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trkid", Self::VT_TRKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("idWeatherReport", Self::VT_IDWEATHERREPORT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("poiid", Self::VT_POIID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("desc", Self::VT_DESC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("spec", Self::VT_SPEC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ident", Self::VT_IDENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("env", Self::VT_ENV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("plat", Self::VT_PLAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("activity", Self::VT_ACTIVITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ts", Self::VT_TS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("start", Self::VT_START, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("stale", Self::VT_STALE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("how", Self::VT_HOW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<f64>("alt", Self::VT_ALT, false)?
     .visit_field::<f64>("az", Self::VT_AZ, false)?
     .visit_field::<f64>("el", Self::VT_EL, false)?
     .visit_field::<f64>("le", Self::VT_LE, false)?
     .visit_field::<f64>("ce", Self::VT_CE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("elle", Self::VT_ELLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cntct", Self::VT_CNTCT, false)?
     .visit_field::<f64>("conf", Self::VT_CONF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("urls", Self::VT_URLS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("area", Self::VT_AREA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("atext", Self::VT_ATEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("agjson", Self::VT_AGJSON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("atype", Self::VT_ATYPE, false)?
     .visit_field::<i32>("andims", Self::VT_ANDIMS, false)?
     .visit_field::<i32>("asrid", Self::VT_ASRID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<POI_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("groups", Self::VT_GROUPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("asset", Self::VT_ASSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcTyps", Self::VT_SRCTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcIds", Self::VT_SRCIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("beNumber", Self::VT_BENUMBER, false)?
     .visit_field::<f64>("orientation", Self::VT_ORIENTATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .finish();
    Ok(())
  }
}
pub struct POI_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pps: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msnid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pri: i32,
    pub trkid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idWeatherReport: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub poiid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub desc: Option<flatbuffers::WIPOffset<&'a str>>,
    pub spec: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ident: Option<flatbuffers::WIPOffset<&'a str>>,
    pub env: Option<flatbuffers::WIPOffset<&'a str>>,
    pub plat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub activity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ts: Option<flatbuffers::WIPOffset<&'a str>>,
    pub start: Option<flatbuffers::WIPOffset<&'a str>>,
    pub stale: Option<flatbuffers::WIPOffset<&'a str>>,
    pub how: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lat: f64,
    pub lon: f64,
    pub alt: f64,
    pub az: f64,
    pub el: f64,
    pub le: f64,
    pub ce: f64,
    pub elle: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub cntct: Option<flatbuffers::WIPOffset<&'a str>>,
    pub conf: f64,
    pub urls: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub area: Option<flatbuffers::WIPOffset<&'a str>>,
    pub atext: Option<flatbuffers::WIPOffset<&'a str>>,
    pub agjson: Option<flatbuffers::WIPOffset<&'a str>>,
    pub atype: Option<flatbuffers::WIPOffset<&'a str>>,
    pub andims: i32,
    pub asrid: i32,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: POI_Full_dataMode_Enum,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub groups: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub asset: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub beNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub orientation: f64,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for POI_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    POI_FullArgs {
      id: None,
      classificationMarking: None,
      pps: None,
      msnid: None,
      pri: 0,
      trkid: None,
      idWeatherReport: None,
      poiid: None,
      name: None,
      desc: None,
      spec: None,
      ident: None,
      env: None,
      plat: None,
      activity: None,
      ts: None,
      start: None,
      stale: None,
      how: None,
      type_: None,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      az: 0.0,
      el: 0.0,
      le: 0.0,
      ce: 0.0,
      elle: None,
      cntct: None,
      conf: 0.0,
      urls: None,
      area: None,
      atext: None,
      agjson: None,
      atype: None,
      andims: 0,
      asrid: 0,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      dataMode: POI_Full_dataMode_Enum::REAL,
      origin: None,
      groups: None,
      asset: None,
      tags: None,
      srcTyps: None,
      srcIds: None,
      beNumber: None,
      orientation: 0.0,
      origNetwork: None,
      transactionId: None,
    }
  }
}

pub struct POI_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> POI_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_pps(&mut self, pps: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_PPS, pps);
  }
  #[inline]
  pub fn add_msnid(&mut self, msnid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_MSNID, msnid);
  }
  #[inline]
  pub fn add_pri(&mut self, pri: i32) {
    self.fbb_.push_slot::<i32>(POI_Full::VT_PRI, pri, 0);
  }
  #[inline]
  pub fn add_trkid(&mut self, trkid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_TRKID, trkid);
  }
  #[inline]
  pub fn add_idWeatherReport(&mut self, idWeatherReport: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_IDWEATHERREPORT, idWeatherReport);
  }
  #[inline]
  pub fn add_poiid(&mut self, poiid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_POIID, poiid);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_desc(&mut self, desc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_DESC, desc);
  }
  #[inline]
  pub fn add_spec(&mut self, spec: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_SPEC, spec);
  }
  #[inline]
  pub fn add_ident(&mut self, ident: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_IDENT, ident);
  }
  #[inline]
  pub fn add_env(&mut self, env: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ENV, env);
  }
  #[inline]
  pub fn add_plat(&mut self, plat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_PLAT, plat);
  }
  #[inline]
  pub fn add_activity(&mut self, activity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ACTIVITY, activity);
  }
  #[inline]
  pub fn add_ts(&mut self, ts: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_TS, ts);
  }
  #[inline]
  pub fn add_start(&mut self, start: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_START, start);
  }
  #[inline]
  pub fn add_stale(&mut self, stale: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_STALE, stale);
  }
  #[inline]
  pub fn add_how(&mut self, how: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_HOW, how);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_alt(&mut self, alt: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_ALT, alt, 0.0);
  }
  #[inline]
  pub fn add_az(&mut self, az: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_AZ, az, 0.0);
  }
  #[inline]
  pub fn add_el(&mut self, el: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_EL, el, 0.0);
  }
  #[inline]
  pub fn add_le(&mut self, le: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_LE, le, 0.0);
  }
  #[inline]
  pub fn add_ce(&mut self, ce: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_CE, ce, 0.0);
  }
  #[inline]
  pub fn add_elle(&mut self, elle: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ELLE, elle);
  }
  #[inline]
  pub fn add_cntct(&mut self, cntct: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_CNTCT, cntct);
  }
  #[inline]
  pub fn add_conf(&mut self, conf: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_CONF, conf, 0.0);
  }
  #[inline]
  pub fn add_urls(&mut self, urls: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_URLS, urls);
  }
  #[inline]
  pub fn add_area(&mut self, area: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_AREA, area);
  }
  #[inline]
  pub fn add_atext(&mut self, atext: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ATEXT, atext);
  }
  #[inline]
  pub fn add_agjson(&mut self, agjson: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_AGJSON, agjson);
  }
  #[inline]
  pub fn add_atype(&mut self, atype: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ATYPE, atype);
  }
  #[inline]
  pub fn add_andims(&mut self, andims: i32) {
    self.fbb_.push_slot::<i32>(POI_Full::VT_ANDIMS, andims, 0);
  }
  #[inline]
  pub fn add_asrid(&mut self, asrid: i32) {
    self.fbb_.push_slot::<i32>(POI_Full::VT_ASRID, asrid, 0);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: POI_Full_dataMode_Enum) {
    self.fbb_.push_slot::<POI_Full_dataMode_Enum>(POI_Full::VT_DATAMODE, dataMode, POI_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_groups(&mut self, groups: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_GROUPS, groups);
  }
  #[inline]
  pub fn add_asset(&mut self, asset: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ASSET, asset);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_srcTyps(&mut self, srcTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_SRCTYPS, srcTyps);
  }
  #[inline]
  pub fn add_srcIds(&mut self, srcIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_SRCIDS, srcIds);
  }
  #[inline]
  pub fn add_beNumber(&mut self, beNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_BENUMBER, beNumber);
  }
  #[inline]
  pub fn add_orientation(&mut self, orientation: f64) {
    self.fbb_.push_slot::<f64>(POI_Full::VT_ORIENTATION, orientation, 0.0);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(POI_Full::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> POI_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    POI_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<POI_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for POI_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("POI_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("pps", &self.pps());
      ds.field("msnid", &self.msnid());
      ds.field("pri", &self.pri());
      ds.field("trkid", &self.trkid());
      ds.field("idWeatherReport", &self.idWeatherReport());
      ds.field("poiid", &self.poiid());
      ds.field("name", &self.name());
      ds.field("desc", &self.desc());
      ds.field("spec", &self.spec());
      ds.field("ident", &self.ident());
      ds.field("env", &self.env());
      ds.field("plat", &self.plat());
      ds.field("activity", &self.activity());
      ds.field("ts", &self.ts());
      ds.field("start", &self.start());
      ds.field("stale", &self.stale());
      ds.field("how", &self.how());
      ds.field("type_", &self.type_());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("alt", &self.alt());
      ds.field("az", &self.az());
      ds.field("el", &self.el());
      ds.field("le", &self.le());
      ds.field("ce", &self.ce());
      ds.field("elle", &self.elle());
      ds.field("cntct", &self.cntct());
      ds.field("conf", &self.conf());
      ds.field("urls", &self.urls());
      ds.field("area", &self.area());
      ds.field("atext", &self.atext());
      ds.field("agjson", &self.agjson());
      ds.field("atype", &self.atype());
      ds.field("andims", &self.andims());
      ds.field("asrid", &self.asrid());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("dataMode", &self.dataMode());
      ds.field("origin", &self.origin());
      ds.field("groups", &self.groups());
      ds.field("asset", &self.asset());
      ds.field("tags", &self.tags());
      ds.field("srcTyps", &self.srcTyps());
      ds.field("srcIds", &self.srcIds());
      ds.field("beNumber", &self.beNumber());
      ds.field("orientation", &self.orientation());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("transactionId", &self.transactionId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct POI_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub pps: Option<String>,
  pub msnid: Option<String>,
  pub pri: i32,
  pub trkid: Option<String>,
  pub idWeatherReport: Option<Vec<String>>,
  pub poiid: Option<String>,
  pub name: Option<String>,
  pub desc: Option<String>,
  pub spec: Option<String>,
  pub ident: Option<String>,
  pub env: Option<String>,
  pub plat: Option<String>,
  pub activity: Option<String>,
  pub ts: Option<String>,
  pub start: Option<String>,
  pub stale: Option<String>,
  pub how: Option<String>,
  pub type_: Option<String>,
  pub lat: f64,
  pub lon: f64,
  pub alt: f64,
  pub az: f64,
  pub el: f64,
  pub le: f64,
  pub ce: f64,
  pub elle: Option<Vec<String>>,
  pub cntct: Option<String>,
  pub conf: f64,
  pub urls: Option<Vec<String>>,
  pub area: Option<String>,
  pub atext: Option<String>,
  pub agjson: Option<String>,
  pub atype: Option<String>,
  pub andims: i32,
  pub asrid: i32,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub dataMode: POI_Full_dataMode_Enum,
  pub origin: Option<String>,
  pub groups: Option<Vec<String>>,
  pub asset: Option<String>,
  pub tags: Option<Vec<String>>,
  pub srcTyps: Option<Vec<String>>,
  pub srcIds: Option<Vec<String>>,
  pub beNumber: Option<String>,
  pub orientation: f64,
  pub origNetwork: Option<String>,
  pub transactionId: Option<String>,
}
impl Default for POI_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      pps: None,
      msnid: None,
      pri: 0,
      trkid: None,
      idWeatherReport: None,
      poiid: None,
      name: None,
      desc: None,
      spec: None,
      ident: None,
      env: None,
      plat: None,
      activity: None,
      ts: None,
      start: None,
      stale: None,
      how: None,
      type_: None,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      az: 0.0,
      el: 0.0,
      le: 0.0,
      ce: 0.0,
      elle: None,
      cntct: None,
      conf: 0.0,
      urls: None,
      area: None,
      atext: None,
      agjson: None,
      atype: None,
      andims: 0,
      asrid: 0,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      dataMode: POI_Full_dataMode_Enum::REAL,
      origin: None,
      groups: None,
      asset: None,
      tags: None,
      srcTyps: None,
      srcIds: None,
      beNumber: None,
      orientation: 0.0,
      origNetwork: None,
      transactionId: None,
    }
  }
}
impl POI_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<POI_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pps = self.pps.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msnid = self.msnid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pri = self.pri;
    let trkid = self.trkid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idWeatherReport = self.idWeatherReport.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let poiid = self.poiid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let desc = self.desc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let spec = self.spec.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ident = self.ident.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let env = self.env.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let plat = self.plat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let activity = self.activity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ts = self.ts.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let start = self.start.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let stale = self.stale.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let how = self.how.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lat = self.lat;
    let lon = self.lon;
    let alt = self.alt;
    let az = self.az;
    let el = self.el;
    let le = self.le;
    let ce = self.ce;
    let elle = self.elle.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let cntct = self.cntct.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let conf = self.conf;
    let urls = self.urls.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let area = self.area.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let atext = self.atext.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let agjson = self.agjson.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let atype = self.atype.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let andims = self.andims;
    let asrid = self.asrid;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let groups = self.groups.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let asset = self.asset.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcTyps = self.srcTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcIds = self.srcIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let beNumber = self.beNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let orientation = self.orientation;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    POI_Full::create(_fbb, &POI_FullArgs{
      id,
      classificationMarking,
      pps,
      msnid,
      pri,
      trkid,
      idWeatherReport,
      poiid,
      name,
      desc,
      spec,
      ident,
      env,
      plat,
      activity,
      ts,
      start,
      stale,
      how,
      type_,
      lat,
      lon,
      alt,
      az,
      el,
      le,
      ce,
      elle,
      cntct,
      conf,
      urls,
      area,
      atext,
      agjson,
      atype,
      andims,
      asrid,
      createdAt,
      createdBy,
      sourceDL,
      source,
      dataMode,
      origin,
      groups,
      asset,
      tags,
      srcTyps,
      srcIds,
      beNumber,
      orientation,
      origNetwork,
      transactionId,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `POI_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_poi_full_unchecked`.
pub fn root_as_poi_full(buf: &[u8]) -> Result<POI_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<POI_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `POI_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_poi_full_unchecked`.
pub fn size_prefixed_root_as_poi_full(buf: &[u8]) -> Result<POI_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<POI_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `POI_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_poi_full_unchecked`.
pub fn root_as_poi_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<POI_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<POI_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `POI_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_poi_full_unchecked`.
pub fn size_prefixed_root_as_poi_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<POI_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<POI_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a POI_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `POI_Full`.
pub unsafe fn root_as_poi_full_unchecked(buf: &[u8]) -> POI_Full {
  flatbuffers::root_unchecked::<POI_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed POI_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `POI_Full`.
pub unsafe fn size_prefixed_root_as_poi_full_unchecked(buf: &[u8]) -> POI_Full {
  flatbuffers::size_prefixed_root_unchecked::<POI_Full>(buf)
}
pub const POI_FULL_IDENTIFIER: &str = "POIF";

#[inline]
pub fn poi_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, POI_FULL_IDENTIFIER, false)
}

#[inline]
pub fn poi_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, POI_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_poi_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<POI_Full<'a>>) {
  fbb.finish(root, Some(POI_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_poi_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<POI_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(POI_FULL_IDENTIFIER));
}
