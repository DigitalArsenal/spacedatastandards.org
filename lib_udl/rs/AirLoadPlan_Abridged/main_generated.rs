// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIR_LOAD_PLAN_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIR_LOAD_PLAN_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIR_LOAD_PLAN_ABRIDGED_DATA_MODE_ENUM: [AirLoadPlan_Abridged_dataMode_Enum; 4] = [
  AirLoadPlan_Abridged_dataMode_Enum::REAL,
  AirLoadPlan_Abridged_dataMode_Enum::TEST,
  AirLoadPlan_Abridged_dataMode_Enum::SIMULATED,
  AirLoadPlan_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AirLoadPlan_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AirLoadPlan_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AirLoadPlan_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AirLoadPlan_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AirLoadPlan_Abridged_dataMode_Enum {
    type Output = AirLoadPlan_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AirLoadPlan_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AirLoadPlan_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AirLoadPlan_Abridged_dataMode_Enum {}
pub enum AirLoadPlan_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information related to how an aircraft is loaded with cargo, equipment, and passengers.
pub struct AirLoadPlan_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirLoadPlan_Abridged<'a> {
  type Inner = AirLoadPlan_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirLoadPlan_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 8;
  pub const VT_IDMISSION: flatbuffers::VOffsetT = 10;
  pub const VT_MISSIONNUMBER: flatbuffers::VOffsetT = 12;
  pub const VT_IDSORTIE: flatbuffers::VOffsetT = 14;
  pub const VT_LEGNUM: flatbuffers::VOffsetT = 16;
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 18;
  pub const VT_TAILNUMBER: flatbuffers::VOffsetT = 20;
  pub const VT_AIRCRAFTMDS: flatbuffers::VOffsetT = 22;
  pub const VT_DEPICAO: flatbuffers::VOffsetT = 24;
  pub const VT_DEPAIRFIELD: flatbuffers::VOffsetT = 26;
  pub const VT_ESTDEPTIME: flatbuffers::VOffsetT = 28;
  pub const VT_ARRICAO: flatbuffers::VOffsetT = 30;
  pub const VT_ARRAIRFIELD: flatbuffers::VOffsetT = 32;
  pub const VT_ESTARRTIME: flatbuffers::VOffsetT = 34;
  pub const VT_CREWSIZE: flatbuffers::VOffsetT = 36;
  pub const VT_CARGOCONFIG: flatbuffers::VOffsetT = 38;
  pub const VT_EQUIPCONFIG: flatbuffers::VOffsetT = 40;
  pub const VT_TANKCONFIG: flatbuffers::VOffsetT = 42;
  pub const VT_BASICWEIGHT: flatbuffers::VOffsetT = 44;
  pub const VT_BASICMOMENT: flatbuffers::VOffsetT = 46;
  pub const VT_FUELWEIGHT: flatbuffers::VOffsetT = 48;
  pub const VT_FUELMOMENT: flatbuffers::VOffsetT = 50;
  pub const VT_ESTLANDINGFUELWEIGHT: flatbuffers::VOffsetT = 52;
  pub const VT_ESTLANDINGFUELMOMENT: flatbuffers::VOffsetT = 54;
  pub const VT_OPERATINGWEIGHT: flatbuffers::VOffsetT = 56;
  pub const VT_OPERATINGMOMENT: flatbuffers::VOffsetT = 58;
  pub const VT_CARGOWEIGHT: flatbuffers::VOffsetT = 60;
  pub const VT_CARGOMOMENT: flatbuffers::VOffsetT = 62;
  pub const VT_ZEROFUELWEIGHT: flatbuffers::VOffsetT = 64;
  pub const VT_ZEROFUELMOMENT: flatbuffers::VOffsetT = 66;
  pub const VT_ZEROFUELCG: flatbuffers::VOffsetT = 68;
  pub const VT_GROSSWEIGHT: flatbuffers::VOffsetT = 70;
  pub const VT_GROSSMOMENT: flatbuffers::VOffsetT = 72;
  pub const VT_GROSSCG: flatbuffers::VOffsetT = 74;
  pub const VT_LANDINGWEIGHT: flatbuffers::VOffsetT = 76;
  pub const VT_LANDINGMOMENT: flatbuffers::VOffsetT = 78;
  pub const VT_LANDINGCG: flatbuffers::VOffsetT = 80;
  pub const VT_CARGOBAYFSMIN: flatbuffers::VOffsetT = 82;
  pub const VT_CARGOBAYFSMAX: flatbuffers::VOffsetT = 84;
  pub const VT_CARGOBAYWIDTH: flatbuffers::VOffsetT = 86;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 88;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 90;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 92;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 94;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 96;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 98;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 100;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirLoadPlan_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirLoadPlan_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<AirLoadPlan_Abridged<'bldr>> {
    let mut builder = AirLoadPlan_AbridgedBuilder::new(_fbb);
    builder.add_cargoBayWidth(args.cargoBayWidth);
    builder.add_landingCG(args.landingCG);
    builder.add_landingMoment(args.landingMoment);
    builder.add_landingWeight(args.landingWeight);
    builder.add_grossCG(args.grossCG);
    builder.add_grossMoment(args.grossMoment);
    builder.add_grossWeight(args.grossWeight);
    builder.add_zeroFuelCG(args.zeroFuelCG);
    builder.add_zeroFuelMoment(args.zeroFuelMoment);
    builder.add_zeroFuelWeight(args.zeroFuelWeight);
    builder.add_cargoMoment(args.cargoMoment);
    builder.add_cargoWeight(args.cargoWeight);
    builder.add_operatingMoment(args.operatingMoment);
    builder.add_operatingWeight(args.operatingWeight);
    builder.add_estLandingFuelMoment(args.estLandingFuelMoment);
    builder.add_estLandingFuelWeight(args.estLandingFuelWeight);
    builder.add_fuelMoment(args.fuelMoment);
    builder.add_fuelWeight(args.fuelWeight);
    builder.add_basicMoment(args.basicMoment);
    builder.add_basicWeight(args.basicWeight);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    builder.add_cargoBayFSMax(args.cargoBayFSMax);
    builder.add_cargoBayFSMin(args.cargoBayFSMin);
    if let Some(x) = args.tankConfig { builder.add_tankConfig(x); }
    if let Some(x) = args.equipConfig { builder.add_equipConfig(x); }
    if let Some(x) = args.cargoConfig { builder.add_cargoConfig(x); }
    builder.add_crewSize(args.crewSize);
    if let Some(x) = args.estArrTime { builder.add_estArrTime(x); }
    if let Some(x) = args.arrAirfield { builder.add_arrAirfield(x); }
    if let Some(x) = args.arrICAO { builder.add_arrICAO(x); }
    if let Some(x) = args.estDepTime { builder.add_estDepTime(x); }
    if let Some(x) = args.depAirfield { builder.add_depAirfield(x); }
    if let Some(x) = args.depICAO { builder.add_depICAO(x); }
    if let Some(x) = args.aircraftMDS { builder.add_aircraftMDS(x); }
    if let Some(x) = args.tailNumber { builder.add_tailNumber(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    builder.add_legNum(args.legNum);
    if let Some(x) = args.idSortie { builder.add_idSortie(x); }
    if let Some(x) = args.missionNumber { builder.add_missionNumber(x); }
    if let Some(x) = args.idMission { builder.add_idMission(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> AirLoadPlan_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let idMission = self.idMission().map(|x| {
      x.to_string()
    });
    let missionNumber = self.missionNumber().map(|x| {
      x.to_string()
    });
    let idSortie = self.idSortie().map(|x| {
      x.to_string()
    });
    let legNum = self.legNum();
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let tailNumber = self.tailNumber().map(|x| {
      x.to_string()
    });
    let aircraftMDS = self.aircraftMDS().map(|x| {
      x.to_string()
    });
    let depICAO = self.depICAO().map(|x| {
      x.to_string()
    });
    let depAirfield = self.depAirfield().map(|x| {
      x.to_string()
    });
    let estDepTime = self.estDepTime().map(|x| {
      x.to_string()
    });
    let arrICAO = self.arrICAO().map(|x| {
      x.to_string()
    });
    let arrAirfield = self.arrAirfield().map(|x| {
      x.to_string()
    });
    let estArrTime = self.estArrTime().map(|x| {
      x.to_string()
    });
    let crewSize = self.crewSize();
    let cargoConfig = self.cargoConfig().map(|x| {
      x.to_string()
    });
    let equipConfig = self.equipConfig().map(|x| {
      x.to_string()
    });
    let tankConfig = self.tankConfig().map(|x| {
      x.to_string()
    });
    let basicWeight = self.basicWeight();
    let basicMoment = self.basicMoment();
    let fuelWeight = self.fuelWeight();
    let fuelMoment = self.fuelMoment();
    let estLandingFuelWeight = self.estLandingFuelWeight();
    let estLandingFuelMoment = self.estLandingFuelMoment();
    let operatingWeight = self.operatingWeight();
    let operatingMoment = self.operatingMoment();
    let cargoWeight = self.cargoWeight();
    let cargoMoment = self.cargoMoment();
    let zeroFuelWeight = self.zeroFuelWeight();
    let zeroFuelMoment = self.zeroFuelMoment();
    let zeroFuelCG = self.zeroFuelCG();
    let grossWeight = self.grossWeight();
    let grossMoment = self.grossMoment();
    let grossCG = self.grossCG();
    let landingWeight = self.landingWeight();
    let landingMoment = self.landingMoment();
    let landingCG = self.landingCG();
    let cargoBayFSMin = self.cargoBayFSMin();
    let cargoBayFSMax = self.cargoBayFSMax();
    let cargoBayWidth = self.cargoBayWidth();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    AirLoadPlan_AbridgedT {
      id,
      classificationMarking,
      externalId,
      idMission,
      missionNumber,
      idSortie,
      legNum,
      callSign,
      tailNumber,
      aircraftMDS,
      depICAO,
      depAirfield,
      estDepTime,
      arrICAO,
      arrAirfield,
      estArrTime,
      crewSize,
      cargoConfig,
      equipConfig,
      tankConfig,
      basicWeight,
      basicMoment,
      fuelWeight,
      fuelMoment,
      estLandingFuelWeight,
      estLandingFuelMoment,
      operatingWeight,
      operatingMoment,
      cargoWeight,
      cargoMoment,
      zeroFuelWeight,
      zeroFuelMoment,
      zeroFuelCG,
      grossWeight,
      grossMoment,
      grossCG,
      landingWeight,
      landingMoment,
      landingCG,
      cargoBayFSMin,
      cargoBayFSMax,
      cargoBayWidth,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0457f578-e29c-312e-85aa-0a04a430bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Required ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: dec7a61a-cd97-4af0-b7bc-f4c3bb33341b
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_EXTERNALID, None)}
  }
  /// The UDL ID of the mission this record is associated with.
  /// Example: /// Example: 412bebb6-a45e-029c-ca51-e29f8a442b12
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idMission(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_IDMISSION, None)}
  }
  /// The mission number of the mission supporting this load plan.
  /// Example: /// Example: AJM123456123
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn missionNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_MISSIONNUMBER, None)}
  }
  /// The UDL ID of the aircraft sortie this record is associated with.
  /// Example: /// Example: 823acfbe6-f36a-157b-ef32-b47c9b589c3
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSortie(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_IDSORTIE, None)}
  }
  /// The leg number of the mission supporting this load plan.
  /// Example: /// Example: 200
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirLoadPlan_Abridged::VT_LEGNUM, Some(0)).unwrap()}
  }
  /// The call sign of the mission supporting this load plan.
  /// Example: /// Example: RCH1234
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_CALLSIGN, None)}
  }
  /// The tail number of the aircraft supporting this load plan.
  /// Example: /// Example: 77187
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tailNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_TAILNUMBER, None)}
  }
  /// The Model Design Series designation of the aircraft supporting this load plan.
  /// Example: /// Example: C17A
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn aircraftMDS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_AIRCRAFTMDS, None)}
  }
  /// The departure International Civil Organization (ICAO) code of the departure airfield.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn depICAO(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_DEPICAO, None)}
  }
  /// Optional identifier of departure airfield with no International Civil Organization (ICAO) code.
  /// Example: /// Example: W99
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn depAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_DEPAIRFIELD, None)}
  }
  /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format.
  /// Example: /// Example: 2023-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_ESTDEPTIME, None)}
  }
  /// The arrival International Civil Organization (ICAO) code of the landing airfield.
  /// Example: /// Example: ETAR
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn arrICAO(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_ARRICAO, None)}
  }
  /// Optional identifier of arrival airfield with no International Civil Organization (ICAO) code.
  /// Example: /// Example: W99
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn arrAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_ARRAIRFIELD, None)}
  }
  /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estArrTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_ESTARRTIME, None)}
  }
  /// The number of crew members on the aircraft.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn crewSize(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirLoadPlan_Abridged::VT_CREWSIZE, Some(0)).unwrap()}
  }
  /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn cargoConfig(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_CARGOCONFIG, None)}
  }
  /// Description of the equipment configuration (e.g. Standard, Ferry, JBLM, CHS, Combat, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: Standard
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn equipConfig(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_EQUIPCONFIG, None)}
  }
  /// Description of the fuel tank(s) configuration (e.g. ER, NON-ER, etc.). Configuration meanings are determined by the data source.
  /// Example: /// Example: ER
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn tankConfig(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_TANKCONFIG, None)}
  }
  /// The weight of the aircraft without passengers, cargo, equipment, or usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn basicWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_BASICWEIGHT, Some(0.0)).unwrap()}
  }
  /// The basic weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn basicMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_BASICMOMENT, Some(0.0)).unwrap()}
  }
  /// The weight of usable fuel on board the aircraft, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_FUELWEIGHT, Some(0.0)).unwrap()}
  }
  /// The fuel weight on board the aircraft multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_FUELMOMENT, Some(0.0)).unwrap()}
  }
  /// The estimated weight of usable fuel upon landing, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estLandingFuelWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_ESTLANDINGFUELWEIGHT, Some(0.0)).unwrap()}
  }
  /// The estimated weight of usable fuel upon landing multiplied by the distance between the reference datum and the fuel's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estLandingFuelMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_ESTLANDINGFUELMOMENT, Some(0.0)).unwrap()}
  }
  /// The basic weight of the aircraft including passengers and equipment, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn operatingWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_OPERATINGWEIGHT, Some(0.0)).unwrap()}
  }
  /// The operating weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn operatingMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_OPERATINGMOMENT, Some(0.0)).unwrap()}
  }
  /// The weight of the cargo on board the aircraft, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cargoWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_CARGOWEIGHT, Some(0.0)).unwrap()}
  }
  /// The sum of cargo moments of all cargo on board the aircraft, in Newton-meters. Each individual cargo moment is the weight of the cargo multiplied by the distance between the reference datum and the cargo's center of gravity.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cargoMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_CARGOMOMENT, Some(0.0)).unwrap()}
  }
  /// The operating weight of the aircraft including cargo but without usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zeroFuelWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_ZEROFUELWEIGHT, Some(0.0)).unwrap()}
  }
  /// The zero fuel weight of the aircraft multiplied by the distance between the reference datum and the aircraft's center of gravity, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zeroFuelMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_ZEROFUELMOMENT, Some(0.0)).unwrap()}
  }
  /// The center of gravity of the aircraft using the zero fuel weight and zero fuel total moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 39.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zeroFuelCG(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_ZEROFUELCG, Some(0.0)).unwrap()}
  }
  /// The total weight of the aircraft at takeoff including passengers, cargo, equipment, and usable fuel, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn grossWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_GROSSWEIGHT, Some(0.0)).unwrap()}
  }
  /// The sum of moments of all items making up the gross weight of the aircraft, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn grossMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_GROSSMOMENT, Some(0.0)).unwrap()}
  }
  /// The center of gravity of the aircraft using the gross weight and gross moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 38.8
  /// Constraints: No constraints specified.
  #[inline]
  pub fn grossCG(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_GROSSCG, Some(0.0)).unwrap()}
  }
  /// The gross weight of the aircraft upon landing, in kilograms.
  /// Example: /// Example: 100.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn landingWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_LANDINGWEIGHT, Some(0.0)).unwrap()}
  }
  /// The sum of moments of all items making up the gross weight of the aircraft upon landing, in Newton-meters.
  /// Example: /// Example: 2500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn landingMoment(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_LANDINGMOMENT, Some(0.0)).unwrap()}
  }
  /// The center of gravity of the aircraft using the landing weight and landing moment, as a percentage of the mean aerodynamic chord (%MAC).
  /// Example: /// Example: 38.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn landingCG(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_LANDINGCG, Some(0.0)).unwrap()}
  }
  /// Minimum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cargoBayFSMin(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirLoadPlan_Abridged::VT_CARGOBAYFSMIN, Some(0)).unwrap()}
  }
  /// Maximum fuselage station (FS) where cargo can be stored. FS is the distance from the reference datum, in meters.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cargoBayFSMax(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirLoadPlan_Abridged::VT_CARGOBAYFSMAX, Some(0)).unwrap()}
  }
  /// Width of the cargo bay, in meters.
  /// Example: /// Example: 3.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cargoBayWidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirLoadPlan_Abridged::VT_CARGOBAYWIDTH, Some(0.0)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: source
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirLoadPlan_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AirLoadPlan_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AirLoadPlan_Abridged_dataMode_Enum>(AirLoadPlan_Abridged::VT_DATAMODE, Some(AirLoadPlan_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AirLoadPlan_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idMission", Self::VT_IDMISSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionNumber", Self::VT_MISSIONNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSortie", Self::VT_IDSORTIE, false)?
     .visit_field::<i32>("legNum", Self::VT_LEGNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tailNumber", Self::VT_TAILNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftMDS", Self::VT_AIRCRAFTMDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depICAO", Self::VT_DEPICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depAirfield", Self::VT_DEPAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estDepTime", Self::VT_ESTDEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrICAO", Self::VT_ARRICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrAirfield", Self::VT_ARRAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estArrTime", Self::VT_ESTARRTIME, false)?
     .visit_field::<i32>("crewSize", Self::VT_CREWSIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cargoConfig", Self::VT_CARGOCONFIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("equipConfig", Self::VT_EQUIPCONFIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tankConfig", Self::VT_TANKCONFIG, false)?
     .visit_field::<f64>("basicWeight", Self::VT_BASICWEIGHT, false)?
     .visit_field::<f64>("basicMoment", Self::VT_BASICMOMENT, false)?
     .visit_field::<f64>("fuelWeight", Self::VT_FUELWEIGHT, false)?
     .visit_field::<f64>("fuelMoment", Self::VT_FUELMOMENT, false)?
     .visit_field::<f64>("estLandingFuelWeight", Self::VT_ESTLANDINGFUELWEIGHT, false)?
     .visit_field::<f64>("estLandingFuelMoment", Self::VT_ESTLANDINGFUELMOMENT, false)?
     .visit_field::<f64>("operatingWeight", Self::VT_OPERATINGWEIGHT, false)?
     .visit_field::<f64>("operatingMoment", Self::VT_OPERATINGMOMENT, false)?
     .visit_field::<f64>("cargoWeight", Self::VT_CARGOWEIGHT, false)?
     .visit_field::<f64>("cargoMoment", Self::VT_CARGOMOMENT, false)?
     .visit_field::<f64>("zeroFuelWeight", Self::VT_ZEROFUELWEIGHT, false)?
     .visit_field::<f64>("zeroFuelMoment", Self::VT_ZEROFUELMOMENT, false)?
     .visit_field::<f64>("zeroFuelCG", Self::VT_ZEROFUELCG, false)?
     .visit_field::<f64>("grossWeight", Self::VT_GROSSWEIGHT, false)?
     .visit_field::<f64>("grossMoment", Self::VT_GROSSMOMENT, false)?
     .visit_field::<f64>("grossCG", Self::VT_GROSSCG, false)?
     .visit_field::<f64>("landingWeight", Self::VT_LANDINGWEIGHT, false)?
     .visit_field::<f64>("landingMoment", Self::VT_LANDINGMOMENT, false)?
     .visit_field::<f64>("landingCG", Self::VT_LANDINGCG, false)?
     .visit_field::<i32>("cargoBayFSMin", Self::VT_CARGOBAYFSMIN, false)?
     .visit_field::<i32>("cargoBayFSMax", Self::VT_CARGOBAYFSMAX, false)?
     .visit_field::<f64>("cargoBayWidth", Self::VT_CARGOBAYWIDTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<AirLoadPlan_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct AirLoadPlan_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idMission: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSortie: Option<flatbuffers::WIPOffset<&'a str>>,
    pub legNum: i32,
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tailNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftMDS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depICAO: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrICAO: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estArrTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub crewSize: i32,
    pub cargoConfig: Option<flatbuffers::WIPOffset<&'a str>>,
    pub equipConfig: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tankConfig: Option<flatbuffers::WIPOffset<&'a str>>,
    pub basicWeight: f64,
    pub basicMoment: f64,
    pub fuelWeight: f64,
    pub fuelMoment: f64,
    pub estLandingFuelWeight: f64,
    pub estLandingFuelMoment: f64,
    pub operatingWeight: f64,
    pub operatingMoment: f64,
    pub cargoWeight: f64,
    pub cargoMoment: f64,
    pub zeroFuelWeight: f64,
    pub zeroFuelMoment: f64,
    pub zeroFuelCG: f64,
    pub grossWeight: f64,
    pub grossMoment: f64,
    pub grossCG: f64,
    pub landingWeight: f64,
    pub landingMoment: f64,
    pub landingCG: f64,
    pub cargoBayFSMin: i32,
    pub cargoBayFSMax: i32,
    pub cargoBayWidth: f64,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AirLoadPlan_Abridged_dataMode_Enum,
}
impl<'a> Default for AirLoadPlan_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirLoadPlan_AbridgedArgs {
      id: None,
      classificationMarking: None,
      externalId: None,
      idMission: None,
      missionNumber: None,
      idSortie: None,
      legNum: 0,
      callSign: None,
      tailNumber: None,
      aircraftMDS: None,
      depICAO: None,
      depAirfield: None,
      estDepTime: None,
      arrICAO: None,
      arrAirfield: None,
      estArrTime: None,
      crewSize: 0,
      cargoConfig: None,
      equipConfig: None,
      tankConfig: None,
      basicWeight: 0.0,
      basicMoment: 0.0,
      fuelWeight: 0.0,
      fuelMoment: 0.0,
      estLandingFuelWeight: 0.0,
      estLandingFuelMoment: 0.0,
      operatingWeight: 0.0,
      operatingMoment: 0.0,
      cargoWeight: 0.0,
      cargoMoment: 0.0,
      zeroFuelWeight: 0.0,
      zeroFuelMoment: 0.0,
      zeroFuelCG: 0.0,
      grossWeight: 0.0,
      grossMoment: 0.0,
      grossCG: 0.0,
      landingWeight: 0.0,
      landingMoment: 0.0,
      landingCG: 0.0,
      cargoBayFSMin: 0,
      cargoBayFSMax: 0,
      cargoBayWidth: 0.0,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: AirLoadPlan_Abridged_dataMode_Enum::REAL,
    }
  }
}

pub struct AirLoadPlan_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirLoadPlan_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_idMission(&mut self, idMission: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_IDMISSION, idMission);
  }
  #[inline]
  pub fn add_missionNumber(&mut self, missionNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_MISSIONNUMBER, missionNumber);
  }
  #[inline]
  pub fn add_idSortie(&mut self, idSortie: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_IDSORTIE, idSortie);
  }
  #[inline]
  pub fn add_legNum(&mut self, legNum: i32) {
    self.fbb_.push_slot::<i32>(AirLoadPlan_Abridged::VT_LEGNUM, legNum, 0);
  }
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_tailNumber(&mut self, tailNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_TAILNUMBER, tailNumber);
  }
  #[inline]
  pub fn add_aircraftMDS(&mut self, aircraftMDS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_AIRCRAFTMDS, aircraftMDS);
  }
  #[inline]
  pub fn add_depICAO(&mut self, depICAO: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_DEPICAO, depICAO);
  }
  #[inline]
  pub fn add_depAirfield(&mut self, depAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_DEPAIRFIELD, depAirfield);
  }
  #[inline]
  pub fn add_estDepTime(&mut self, estDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_ESTDEPTIME, estDepTime);
  }
  #[inline]
  pub fn add_arrICAO(&mut self, arrICAO: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_ARRICAO, arrICAO);
  }
  #[inline]
  pub fn add_arrAirfield(&mut self, arrAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_ARRAIRFIELD, arrAirfield);
  }
  #[inline]
  pub fn add_estArrTime(&mut self, estArrTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_ESTARRTIME, estArrTime);
  }
  #[inline]
  pub fn add_crewSize(&mut self, crewSize: i32) {
    self.fbb_.push_slot::<i32>(AirLoadPlan_Abridged::VT_CREWSIZE, crewSize, 0);
  }
  #[inline]
  pub fn add_cargoConfig(&mut self, cargoConfig: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_CARGOCONFIG, cargoConfig);
  }
  #[inline]
  pub fn add_equipConfig(&mut self, equipConfig: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_EQUIPCONFIG, equipConfig);
  }
  #[inline]
  pub fn add_tankConfig(&mut self, tankConfig: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_TANKCONFIG, tankConfig);
  }
  #[inline]
  pub fn add_basicWeight(&mut self, basicWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_BASICWEIGHT, basicWeight, 0.0);
  }
  #[inline]
  pub fn add_basicMoment(&mut self, basicMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_BASICMOMENT, basicMoment, 0.0);
  }
  #[inline]
  pub fn add_fuelWeight(&mut self, fuelWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_FUELWEIGHT, fuelWeight, 0.0);
  }
  #[inline]
  pub fn add_fuelMoment(&mut self, fuelMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_FUELMOMENT, fuelMoment, 0.0);
  }
  #[inline]
  pub fn add_estLandingFuelWeight(&mut self, estLandingFuelWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_ESTLANDINGFUELWEIGHT, estLandingFuelWeight, 0.0);
  }
  #[inline]
  pub fn add_estLandingFuelMoment(&mut self, estLandingFuelMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_ESTLANDINGFUELMOMENT, estLandingFuelMoment, 0.0);
  }
  #[inline]
  pub fn add_operatingWeight(&mut self, operatingWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_OPERATINGWEIGHT, operatingWeight, 0.0);
  }
  #[inline]
  pub fn add_operatingMoment(&mut self, operatingMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_OPERATINGMOMENT, operatingMoment, 0.0);
  }
  #[inline]
  pub fn add_cargoWeight(&mut self, cargoWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_CARGOWEIGHT, cargoWeight, 0.0);
  }
  #[inline]
  pub fn add_cargoMoment(&mut self, cargoMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_CARGOMOMENT, cargoMoment, 0.0);
  }
  #[inline]
  pub fn add_zeroFuelWeight(&mut self, zeroFuelWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_ZEROFUELWEIGHT, zeroFuelWeight, 0.0);
  }
  #[inline]
  pub fn add_zeroFuelMoment(&mut self, zeroFuelMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_ZEROFUELMOMENT, zeroFuelMoment, 0.0);
  }
  #[inline]
  pub fn add_zeroFuelCG(&mut self, zeroFuelCG: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_ZEROFUELCG, zeroFuelCG, 0.0);
  }
  #[inline]
  pub fn add_grossWeight(&mut self, grossWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_GROSSWEIGHT, grossWeight, 0.0);
  }
  #[inline]
  pub fn add_grossMoment(&mut self, grossMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_GROSSMOMENT, grossMoment, 0.0);
  }
  #[inline]
  pub fn add_grossCG(&mut self, grossCG: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_GROSSCG, grossCG, 0.0);
  }
  #[inline]
  pub fn add_landingWeight(&mut self, landingWeight: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_LANDINGWEIGHT, landingWeight, 0.0);
  }
  #[inline]
  pub fn add_landingMoment(&mut self, landingMoment: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_LANDINGMOMENT, landingMoment, 0.0);
  }
  #[inline]
  pub fn add_landingCG(&mut self, landingCG: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_LANDINGCG, landingCG, 0.0);
  }
  #[inline]
  pub fn add_cargoBayFSMin(&mut self, cargoBayFSMin: i32) {
    self.fbb_.push_slot::<i32>(AirLoadPlan_Abridged::VT_CARGOBAYFSMIN, cargoBayFSMin, 0);
  }
  #[inline]
  pub fn add_cargoBayFSMax(&mut self, cargoBayFSMax: i32) {
    self.fbb_.push_slot::<i32>(AirLoadPlan_Abridged::VT_CARGOBAYFSMAX, cargoBayFSMax, 0);
  }
  #[inline]
  pub fn add_cargoBayWidth(&mut self, cargoBayWidth: f64) {
    self.fbb_.push_slot::<f64>(AirLoadPlan_Abridged::VT_CARGOBAYWIDTH, cargoBayWidth, 0.0);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirLoadPlan_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AirLoadPlan_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<AirLoadPlan_Abridged_dataMode_Enum>(AirLoadPlan_Abridged::VT_DATAMODE, dataMode, AirLoadPlan_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirLoadPlan_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirLoadPlan_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirLoadPlan_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirLoadPlan_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirLoadPlan_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("externalId", &self.externalId());
      ds.field("idMission", &self.idMission());
      ds.field("missionNumber", &self.missionNumber());
      ds.field("idSortie", &self.idSortie());
      ds.field("legNum", &self.legNum());
      ds.field("callSign", &self.callSign());
      ds.field("tailNumber", &self.tailNumber());
      ds.field("aircraftMDS", &self.aircraftMDS());
      ds.field("depICAO", &self.depICAO());
      ds.field("depAirfield", &self.depAirfield());
      ds.field("estDepTime", &self.estDepTime());
      ds.field("arrICAO", &self.arrICAO());
      ds.field("arrAirfield", &self.arrAirfield());
      ds.field("estArrTime", &self.estArrTime());
      ds.field("crewSize", &self.crewSize());
      ds.field("cargoConfig", &self.cargoConfig());
      ds.field("equipConfig", &self.equipConfig());
      ds.field("tankConfig", &self.tankConfig());
      ds.field("basicWeight", &self.basicWeight());
      ds.field("basicMoment", &self.basicMoment());
      ds.field("fuelWeight", &self.fuelWeight());
      ds.field("fuelMoment", &self.fuelMoment());
      ds.field("estLandingFuelWeight", &self.estLandingFuelWeight());
      ds.field("estLandingFuelMoment", &self.estLandingFuelMoment());
      ds.field("operatingWeight", &self.operatingWeight());
      ds.field("operatingMoment", &self.operatingMoment());
      ds.field("cargoWeight", &self.cargoWeight());
      ds.field("cargoMoment", &self.cargoMoment());
      ds.field("zeroFuelWeight", &self.zeroFuelWeight());
      ds.field("zeroFuelMoment", &self.zeroFuelMoment());
      ds.field("zeroFuelCG", &self.zeroFuelCG());
      ds.field("grossWeight", &self.grossWeight());
      ds.field("grossMoment", &self.grossMoment());
      ds.field("grossCG", &self.grossCG());
      ds.field("landingWeight", &self.landingWeight());
      ds.field("landingMoment", &self.landingMoment());
      ds.field("landingCG", &self.landingCG());
      ds.field("cargoBayFSMin", &self.cargoBayFSMin());
      ds.field("cargoBayFSMax", &self.cargoBayFSMax());
      ds.field("cargoBayWidth", &self.cargoBayWidth());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirLoadPlan_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub externalId: Option<String>,
  pub idMission: Option<String>,
  pub missionNumber: Option<String>,
  pub idSortie: Option<String>,
  pub legNum: i32,
  pub callSign: Option<String>,
  pub tailNumber: Option<String>,
  pub aircraftMDS: Option<String>,
  pub depICAO: Option<String>,
  pub depAirfield: Option<String>,
  pub estDepTime: Option<String>,
  pub arrICAO: Option<String>,
  pub arrAirfield: Option<String>,
  pub estArrTime: Option<String>,
  pub crewSize: i32,
  pub cargoConfig: Option<String>,
  pub equipConfig: Option<String>,
  pub tankConfig: Option<String>,
  pub basicWeight: f64,
  pub basicMoment: f64,
  pub fuelWeight: f64,
  pub fuelMoment: f64,
  pub estLandingFuelWeight: f64,
  pub estLandingFuelMoment: f64,
  pub operatingWeight: f64,
  pub operatingMoment: f64,
  pub cargoWeight: f64,
  pub cargoMoment: f64,
  pub zeroFuelWeight: f64,
  pub zeroFuelMoment: f64,
  pub zeroFuelCG: f64,
  pub grossWeight: f64,
  pub grossMoment: f64,
  pub grossCG: f64,
  pub landingWeight: f64,
  pub landingMoment: f64,
  pub landingCG: f64,
  pub cargoBayFSMin: i32,
  pub cargoBayFSMax: i32,
  pub cargoBayWidth: f64,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: AirLoadPlan_Abridged_dataMode_Enum,
}
impl Default for AirLoadPlan_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      externalId: None,
      idMission: None,
      missionNumber: None,
      idSortie: None,
      legNum: 0,
      callSign: None,
      tailNumber: None,
      aircraftMDS: None,
      depICAO: None,
      depAirfield: None,
      estDepTime: None,
      arrICAO: None,
      arrAirfield: None,
      estArrTime: None,
      crewSize: 0,
      cargoConfig: None,
      equipConfig: None,
      tankConfig: None,
      basicWeight: 0.0,
      basicMoment: 0.0,
      fuelWeight: 0.0,
      fuelMoment: 0.0,
      estLandingFuelWeight: 0.0,
      estLandingFuelMoment: 0.0,
      operatingWeight: 0.0,
      operatingMoment: 0.0,
      cargoWeight: 0.0,
      cargoMoment: 0.0,
      zeroFuelWeight: 0.0,
      zeroFuelMoment: 0.0,
      zeroFuelCG: 0.0,
      grossWeight: 0.0,
      grossMoment: 0.0,
      grossCG: 0.0,
      landingWeight: 0.0,
      landingMoment: 0.0,
      landingCG: 0.0,
      cargoBayFSMin: 0,
      cargoBayFSMax: 0,
      cargoBayWidth: 0.0,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: AirLoadPlan_Abridged_dataMode_Enum::REAL,
    }
  }
}
impl AirLoadPlan_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirLoadPlan_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idMission = self.idMission.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionNumber = self.missionNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSortie = self.idSortie.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let legNum = self.legNum;
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tailNumber = self.tailNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftMDS = self.aircraftMDS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depICAO = self.depICAO.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depAirfield = self.depAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estDepTime = self.estDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrICAO = self.arrICAO.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrAirfield = self.arrAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estArrTime = self.estArrTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let crewSize = self.crewSize;
    let cargoConfig = self.cargoConfig.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let equipConfig = self.equipConfig.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tankConfig = self.tankConfig.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let basicWeight = self.basicWeight;
    let basicMoment = self.basicMoment;
    let fuelWeight = self.fuelWeight;
    let fuelMoment = self.fuelMoment;
    let estLandingFuelWeight = self.estLandingFuelWeight;
    let estLandingFuelMoment = self.estLandingFuelMoment;
    let operatingWeight = self.operatingWeight;
    let operatingMoment = self.operatingMoment;
    let cargoWeight = self.cargoWeight;
    let cargoMoment = self.cargoMoment;
    let zeroFuelWeight = self.zeroFuelWeight;
    let zeroFuelMoment = self.zeroFuelMoment;
    let zeroFuelCG = self.zeroFuelCG;
    let grossWeight = self.grossWeight;
    let grossMoment = self.grossMoment;
    let grossCG = self.grossCG;
    let landingWeight = self.landingWeight;
    let landingMoment = self.landingMoment;
    let landingCG = self.landingCG;
    let cargoBayFSMin = self.cargoBayFSMin;
    let cargoBayFSMax = self.cargoBayFSMax;
    let cargoBayWidth = self.cargoBayWidth;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    AirLoadPlan_Abridged::create(_fbb, &AirLoadPlan_AbridgedArgs{
      id,
      classificationMarking,
      externalId,
      idMission,
      missionNumber,
      idSortie,
      legNum,
      callSign,
      tailNumber,
      aircraftMDS,
      depICAO,
      depAirfield,
      estDepTime,
      arrICAO,
      arrAirfield,
      estArrTime,
      crewSize,
      cargoConfig,
      equipConfig,
      tankConfig,
      basicWeight,
      basicMoment,
      fuelWeight,
      fuelMoment,
      estLandingFuelWeight,
      estLandingFuelMoment,
      operatingWeight,
      operatingMoment,
      cargoWeight,
      cargoMoment,
      zeroFuelWeight,
      zeroFuelMoment,
      zeroFuelCG,
      grossWeight,
      grossMoment,
      grossCG,
      landingWeight,
      landingMoment,
      landingCG,
      cargoBayFSMin,
      cargoBayFSMax,
      cargoBayWidth,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirLoadPlan_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_load_plan_abridged_unchecked`.
pub fn root_as_air_load_plan_abridged(buf: &[u8]) -> Result<AirLoadPlan_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirLoadPlan_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirLoadPlan_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_air_load_plan_abridged_unchecked`.
pub fn size_prefixed_root_as_air_load_plan_abridged(buf: &[u8]) -> Result<AirLoadPlan_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirLoadPlan_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirLoadPlan_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_load_plan_abridged_unchecked`.
pub fn root_as_air_load_plan_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirLoadPlan_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirLoadPlan_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirLoadPlan_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_load_plan_abridged_unchecked`.
pub fn size_prefixed_root_as_air_load_plan_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirLoadPlan_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirLoadPlan_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirLoadPlan_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirLoadPlan_Abridged`.
pub unsafe fn root_as_air_load_plan_abridged_unchecked(buf: &[u8]) -> AirLoadPlan_Abridged {
  flatbuffers::root_unchecked::<AirLoadPlan_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirLoadPlan_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirLoadPlan_Abridged`.
pub unsafe fn size_prefixed_root_as_air_load_plan_abridged_unchecked(buf: &[u8]) -> AirLoadPlan_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<AirLoadPlan_Abridged>(buf)
}
pub const AIR_LOAD_PLAN_ABRIDGED_IDENTIFIER: &str = "AIRL";

#[inline]
pub fn air_load_plan_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_LOAD_PLAN_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn air_load_plan_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_LOAD_PLAN_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_air_load_plan_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirLoadPlan_Abridged<'a>>) {
  fbb.finish(root, Some(AIR_LOAD_PLAN_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_air_load_plan_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirLoadPlan_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIR_LOAD_PLAN_ABRIDGED_IDENTIFIER));
}
