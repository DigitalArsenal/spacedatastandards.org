// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SERADATA_EARLY_WARNING_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SERADATA_EARLY_WARNING_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERADATA_EARLY_WARNING_FULL_DATA_MODE_ENUM: [SeradataEarlyWarning_Full_dataMode_Enum; 4] = [
  SeradataEarlyWarning_Full_dataMode_Enum::REAL,
  SeradataEarlyWarning_Full_dataMode_Enum::TEST,
  SeradataEarlyWarning_Full_dataMode_Enum::SIMULATED,
  SeradataEarlyWarning_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SeradataEarlyWarning_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SeradataEarlyWarning_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SeradataEarlyWarning_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SeradataEarlyWarning_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SeradataEarlyWarning_Full_dataMode_Enum {
    type Output = SeradataEarlyWarning_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SeradataEarlyWarning_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SeradataEarlyWarning_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SeradataEarlyWarning_Full_dataMode_Enum {}
pub enum SeradataEarlyWarning_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Details for an early warning payload from  Seradata.
pub struct SeradataEarlyWarning_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SeradataEarlyWarning_Full<'a> {
  type Inner = SeradataEarlyWarning_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SeradataEarlyWarning_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDIR: flatbuffers::VOffsetT = 8;
  pub const VT_SPACECRAFTID: flatbuffers::VOffsetT = 10;
  pub const VT_HOSTEDFORCOMPANYORGID: flatbuffers::VOffsetT = 12;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 14;
  pub const VT_NAME: flatbuffers::VOffsetT = 16;
  pub const VT_SPECTRALBANDS: flatbuffers::VOffsetT = 18;
  pub const VT_FREQUENCYLIMITS: flatbuffers::VOffsetT = 20;
  pub const VT_BESTRESOLUTION: flatbuffers::VOffsetT = 22;
  pub const VT_GROUNDSTATIONS: flatbuffers::VOffsetT = 24;
  pub const VT_GROUNDSTATIONLOCATIONS: flatbuffers::VOffsetT = 26;
  pub const VT_MISSILELAUNCHPHASEDETECTIONABILITY: flatbuffers::VOffsetT = 28;
  pub const VT_EARTHPOINTING: flatbuffers::VOffsetT = 30;
  pub const VT_PARTNERSPACECRAFTID: flatbuffers::VOffsetT = 32;
  pub const VT_PAYLOADNOTES: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 36;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 38;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 40;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 42;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 44;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 46;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 48;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 50;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SeradataEarlyWarning_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SeradataEarlyWarning_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<SeradataEarlyWarning_Full<'bldr>> {
    let mut builder = SeradataEarlyWarning_FullBuilder::new(_fbb);
    builder.add_bestResolution(args.bestResolution);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.payloadNotes { builder.add_payloadNotes(x); }
    if let Some(x) = args.partnerSpacecraftId { builder.add_partnerSpacecraftId(x); }
    if let Some(x) = args.missileLaunchPhaseDetectionAbility { builder.add_missileLaunchPhaseDetectionAbility(x); }
    if let Some(x) = args.groundStationLocations { builder.add_groundStationLocations(x); }
    if let Some(x) = args.groundStations { builder.add_groundStations(x); }
    if let Some(x) = args.frequencyLimits { builder.add_frequencyLimits(x); }
    if let Some(x) = args.spectralBands { builder.add_spectralBands(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.hostedForCompanyOrgId { builder.add_hostedForCompanyOrgId(x); }
    if let Some(x) = args.spacecraftId { builder.add_spacecraftId(x); }
    if let Some(x) = args.idIR { builder.add_idIR(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_earthPointing(args.earthPointing);
    builder.finish()
  }

  pub fn unpack(&self) -> SeradataEarlyWarning_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idIR = self.idIR().map(|x| {
      x.to_string()
    });
    let spacecraftId = self.spacecraftId().map(|x| {
      x.to_string()
    });
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let spectralBands = self.spectralBands().map(|x| {
      x.to_string()
    });
    let frequencyLimits = self.frequencyLimits().map(|x| {
      x.to_string()
    });
    let bestResolution = self.bestResolution();
    let groundStations = self.groundStations().map(|x| {
      x.to_string()
    });
    let groundStationLocations = self.groundStationLocations().map(|x| {
      x.to_string()
    });
    let missileLaunchPhaseDetectionAbility = self.missileLaunchPhaseDetectionAbility().map(|x| {
      x.to_string()
    });
    let earthPointing = self.earthPointing();
    let partnerSpacecraftId = self.partnerSpacecraftId().map(|x| {
      x.to_string()
    });
    let payloadNotes = self.payloadNotes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    SeradataEarlyWarning_FullT {
      id,
      classificationMarking,
      idIR,
      spacecraftId,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      name,
      spectralBands,
      frequencyLimits,
      bestResolution,
      groundStations,
      groundStationLocations,
      missileLaunchPhaseDetectionAbility,
      earthPointing,
      partnerSpacecraftId,
      payloadNotes,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATAEARLYWARNING-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// UUID of the parent IR record.
  /// Example: /// Example: idIR
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idIR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_IDIR, None)}
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn spacecraftId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_SPACECRAFTID, None)}
  }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn hostedForCompanyOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_HOSTEDFORCOMPANYORGID, None)}
  }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_MANUFACTURERORGID, None)}
  }
  /// Sensor name from Seradata, e.g. Infra red telescope, Schmidt Telescope, etc.
  /// Example: /// Example: Infra red telescope
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_NAME, None)}
  }
  /// Spectral Bands, e.g. Infra-Red.
  /// Example: /// Example: Infra-Red
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn spectralBands(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_SPECTRALBANDS, None)}
  }
  /// Frequency Limits for this IR.
  /// Example: /// Example: frequencyLimits
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn frequencyLimits(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_FREQUENCYLIMITS, None)}
  }
  /// Best resolution for this IR in meters.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bestResolution(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataEarlyWarning_Full::VT_BESTRESOLUTION, Some(0.0)).unwrap()}
  }
  /// Ground Station info for this IR.
  /// Example: /// Example: groundStations
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn groundStations(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_GROUNDSTATIONS, None)}
  }
  /// Ground Station Locations for this IR.
  /// Example: /// Example: groundStationLocations
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn groundStationLocations(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_GROUNDSTATIONLOCATIONS, None)}
  }
  /// Missile Launch Phase Detection Ability.
  /// Example: /// Example: missileLaunchPhaseDetectionAbility
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn missileLaunchPhaseDetectionAbility(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_MISSILELAUNCHPHASEDETECTIONABILITY, None)}
  }
  /// Is the sensor Earth Pointing.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn earthPointing(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SeradataEarlyWarning_Full::VT_EARTHPOINTING, Some(false)).unwrap()}
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: partnerSpacecraftId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn partnerSpacecraftId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_PARTNERSPACECRAFTID, None)}
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn payloadNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_PAYLOADNOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataEarlyWarning_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SeradataEarlyWarning_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SeradataEarlyWarning_Full_dataMode_Enum>(SeradataEarlyWarning_Full::VT_DATAMODE, Some(SeradataEarlyWarning_Full_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SeradataEarlyWarning_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idIR", Self::VT_IDIR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("spacecraftId", Self::VT_SPACECRAFTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostedForCompanyOrgId", Self::VT_HOSTEDFORCOMPANYORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("spectralBands", Self::VT_SPECTRALBANDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("frequencyLimits", Self::VT_FREQUENCYLIMITS, false)?
     .visit_field::<f64>("bestResolution", Self::VT_BESTRESOLUTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("groundStations", Self::VT_GROUNDSTATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("groundStationLocations", Self::VT_GROUNDSTATIONLOCATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missileLaunchPhaseDetectionAbility", Self::VT_MISSILELAUNCHPHASEDETECTIONABILITY, false)?
     .visit_field::<bool>("earthPointing", Self::VT_EARTHPOINTING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("partnerSpacecraftId", Self::VT_PARTNERSPACECRAFTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payloadNotes", Self::VT_PAYLOADNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<SeradataEarlyWarning_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct SeradataEarlyWarning_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idIR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub spacecraftId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostedForCompanyOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub spectralBands: Option<flatbuffers::WIPOffset<&'a str>>,
    pub frequencyLimits: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bestResolution: f64,
    pub groundStations: Option<flatbuffers::WIPOffset<&'a str>>,
    pub groundStationLocations: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missileLaunchPhaseDetectionAbility: Option<flatbuffers::WIPOffset<&'a str>>,
    pub earthPointing: bool,
    pub partnerSpacecraftId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub payloadNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SeradataEarlyWarning_Full_dataMode_Enum,
}
impl<'a> Default for SeradataEarlyWarning_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    SeradataEarlyWarning_FullArgs {
      id: None,
      classificationMarking: None,
      idIR: None,
      spacecraftId: None,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      name: None,
      spectralBands: None,
      frequencyLimits: None,
      bestResolution: 0.0,
      groundStations: None,
      groundStationLocations: None,
      missileLaunchPhaseDetectionAbility: None,
      earthPointing: false,
      partnerSpacecraftId: None,
      payloadNotes: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataEarlyWarning_Full_dataMode_Enum::REAL,
    }
  }
}

pub struct SeradataEarlyWarning_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SeradataEarlyWarning_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idIR(&mut self, idIR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_IDIR, idIR);
  }
  #[inline]
  pub fn add_spacecraftId(&mut self, spacecraftId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_SPACECRAFTID, spacecraftId);
  }
  #[inline]
  pub fn add_hostedForCompanyOrgId(&mut self, hostedForCompanyOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_spectralBands(&mut self, spectralBands: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_SPECTRALBANDS, spectralBands);
  }
  #[inline]
  pub fn add_frequencyLimits(&mut self, frequencyLimits: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_FREQUENCYLIMITS, frequencyLimits);
  }
  #[inline]
  pub fn add_bestResolution(&mut self, bestResolution: f64) {
    self.fbb_.push_slot::<f64>(SeradataEarlyWarning_Full::VT_BESTRESOLUTION, bestResolution, 0.0);
  }
  #[inline]
  pub fn add_groundStations(&mut self, groundStations: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_GROUNDSTATIONS, groundStations);
  }
  #[inline]
  pub fn add_groundStationLocations(&mut self, groundStationLocations: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_GROUNDSTATIONLOCATIONS, groundStationLocations);
  }
  #[inline]
  pub fn add_missileLaunchPhaseDetectionAbility(&mut self, missileLaunchPhaseDetectionAbility: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_MISSILELAUNCHPHASEDETECTIONABILITY, missileLaunchPhaseDetectionAbility);
  }
  #[inline]
  pub fn add_earthPointing(&mut self, earthPointing: bool) {
    self.fbb_.push_slot::<bool>(SeradataEarlyWarning_Full::VT_EARTHPOINTING, earthPointing, false);
  }
  #[inline]
  pub fn add_partnerSpacecraftId(&mut self, partnerSpacecraftId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_PARTNERSPACECRAFTID, partnerSpacecraftId);
  }
  #[inline]
  pub fn add_payloadNotes(&mut self, payloadNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_PAYLOADNOTES, payloadNotes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataEarlyWarning_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SeradataEarlyWarning_Full_dataMode_Enum) {
    self.fbb_.push_slot::<SeradataEarlyWarning_Full_dataMode_Enum>(SeradataEarlyWarning_Full::VT_DATAMODE, dataMode, SeradataEarlyWarning_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SeradataEarlyWarning_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SeradataEarlyWarning_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SeradataEarlyWarning_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SeradataEarlyWarning_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SeradataEarlyWarning_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idIR", &self.idIR());
      ds.field("spacecraftId", &self.spacecraftId());
      ds.field("hostedForCompanyOrgId", &self.hostedForCompanyOrgId());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("name", &self.name());
      ds.field("spectralBands", &self.spectralBands());
      ds.field("frequencyLimits", &self.frequencyLimits());
      ds.field("bestResolution", &self.bestResolution());
      ds.field("groundStations", &self.groundStations());
      ds.field("groundStationLocations", &self.groundStationLocations());
      ds.field("missileLaunchPhaseDetectionAbility", &self.missileLaunchPhaseDetectionAbility());
      ds.field("earthPointing", &self.earthPointing());
      ds.field("partnerSpacecraftId", &self.partnerSpacecraftId());
      ds.field("payloadNotes", &self.payloadNotes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SeradataEarlyWarning_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idIR: Option<String>,
  pub spacecraftId: Option<String>,
  pub hostedForCompanyOrgId: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub name: Option<String>,
  pub spectralBands: Option<String>,
  pub frequencyLimits: Option<String>,
  pub bestResolution: f64,
  pub groundStations: Option<String>,
  pub groundStationLocations: Option<String>,
  pub missileLaunchPhaseDetectionAbility: Option<String>,
  pub earthPointing: bool,
  pub partnerSpacecraftId: Option<String>,
  pub payloadNotes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: SeradataEarlyWarning_Full_dataMode_Enum,
}
impl Default for SeradataEarlyWarning_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idIR: None,
      spacecraftId: None,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      name: None,
      spectralBands: None,
      frequencyLimits: None,
      bestResolution: 0.0,
      groundStations: None,
      groundStationLocations: None,
      missileLaunchPhaseDetectionAbility: None,
      earthPointing: false,
      partnerSpacecraftId: None,
      payloadNotes: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataEarlyWarning_Full_dataMode_Enum::REAL,
    }
  }
}
impl SeradataEarlyWarning_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SeradataEarlyWarning_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idIR = self.idIR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let spacecraftId = self.spacecraftId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let spectralBands = self.spectralBands.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let frequencyLimits = self.frequencyLimits.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let bestResolution = self.bestResolution;
    let groundStations = self.groundStations.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let groundStationLocations = self.groundStationLocations.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missileLaunchPhaseDetectionAbility = self.missileLaunchPhaseDetectionAbility.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let earthPointing = self.earthPointing;
    let partnerSpacecraftId = self.partnerSpacecraftId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let payloadNotes = self.payloadNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    SeradataEarlyWarning_Full::create(_fbb, &SeradataEarlyWarning_FullArgs{
      id,
      classificationMarking,
      idIR,
      spacecraftId,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      name,
      spectralBands,
      frequencyLimits,
      bestResolution,
      groundStations,
      groundStationLocations,
      missileLaunchPhaseDetectionAbility,
      earthPointing,
      partnerSpacecraftId,
      payloadNotes,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SeradataEarlyWarning_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_early_warning_full_unchecked`.
pub fn root_as_seradata_early_warning_full(buf: &[u8]) -> Result<SeradataEarlyWarning_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SeradataEarlyWarning_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SeradataEarlyWarning_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_seradata_early_warning_full_unchecked`.
pub fn size_prefixed_root_as_seradata_early_warning_full(buf: &[u8]) -> Result<SeradataEarlyWarning_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SeradataEarlyWarning_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SeradataEarlyWarning_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_early_warning_full_unchecked`.
pub fn root_as_seradata_early_warning_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataEarlyWarning_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SeradataEarlyWarning_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SeradataEarlyWarning_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_early_warning_full_unchecked`.
pub fn size_prefixed_root_as_seradata_early_warning_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataEarlyWarning_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SeradataEarlyWarning_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SeradataEarlyWarning_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SeradataEarlyWarning_Full`.
pub unsafe fn root_as_seradata_early_warning_full_unchecked(buf: &[u8]) -> SeradataEarlyWarning_Full {
  flatbuffers::root_unchecked::<SeradataEarlyWarning_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SeradataEarlyWarning_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SeradataEarlyWarning_Full`.
pub unsafe fn size_prefixed_root_as_seradata_early_warning_full_unchecked(buf: &[u8]) -> SeradataEarlyWarning_Full {
  flatbuffers::size_prefixed_root_unchecked::<SeradataEarlyWarning_Full>(buf)
}
pub const SERADATA_EARLY_WARNING_FULL_IDENTIFIER: &str = "SERA";

#[inline]
pub fn seradata_early_warning_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_EARLY_WARNING_FULL_IDENTIFIER, false)
}

#[inline]
pub fn seradata_early_warning_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_EARLY_WARNING_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_seradata_early_warning_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SeradataEarlyWarning_Full<'a>>) {
  fbb.finish(root, Some(SERADATA_EARLY_WARNING_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_seradata_early_warning_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SeradataEarlyWarning_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(SERADATA_EARLY_WARNING_FULL_IDENTIFIER));
}
