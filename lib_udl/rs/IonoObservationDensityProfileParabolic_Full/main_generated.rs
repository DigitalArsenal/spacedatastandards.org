// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationDensityProfileParabolic_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Coefficients to describe the E, F1, and F2 layers as parabolic-shape segments.
pub struct IonoObservationDensityProfileParabolic_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationDensityProfileParabolic_Full<'a> {
  type Inner = IonoObservationDensityProfileParabolic_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationDensityProfileParabolic_Full<'a> {
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 4;
  pub const VT_PARABOLICITEMS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationDensityProfileParabolic_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationDensityProfileParabolic_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileParabolic_Full<'bldr>> {
    let mut builder = IonoObservationDensityProfileParabolic_FullBuilder::new(_fbb);
    if let Some(x) = args.parabolicItems { builder.add_parabolicItems(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationDensityProfileParabolic_FullT {
    let description = self.description().map(|x| {
      x.to_string()
    });
    let parabolicItems = self.parabolicItems().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    IonoObservationDensityProfileParabolic_FullT {
      description,
      parabolicItems,
    }
  }

  /// General description of the QP computation algorithm.
  /// Example: /// Example: Best-fit algorithm in NHPC software.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfileParabolic_Full::VT_DESCRIPTION, None)}
  }
  /// Describes the E, F1, and F2 layers as parabolic-shape segments.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn parabolicItems(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(IonoObservationDensityProfileParabolic_Full::VT_PARABOLICITEMS, None)}
  }
}

impl flatbuffers::Verifiable for IonoObservationDensityProfileParabolic_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("parabolicItems", Self::VT_PARABOLICITEMS, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationDensityProfileParabolic_FullArgs<'a> {
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub parabolicItems: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for IonoObservationDensityProfileParabolic_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationDensityProfileParabolic_FullArgs {
      description: None,
      parabolicItems: None,
    }
  }
}

pub struct IonoObservationDensityProfileParabolic_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationDensityProfileParabolic_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfileParabolic_Full::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_parabolicItems(&mut self, parabolicItems: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfileParabolic_Full::VT_PARABOLICITEMS, parabolicItems);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationDensityProfileParabolic_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationDensityProfileParabolic_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationDensityProfileParabolic_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationDensityProfileParabolic_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationDensityProfileParabolic_Full");
      ds.field("description", &self.description());
      ds.field("parabolicItems", &self.parabolicItems());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationDensityProfileParabolic_FullT {
  pub description: Option<String>,
  pub parabolicItems: Option<Vec<String>>,
}
impl Default for IonoObservationDensityProfileParabolic_FullT {
  fn default() -> Self {
    Self {
      description: None,
      parabolicItems: None,
    }
  }
}
impl IonoObservationDensityProfileParabolic_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileParabolic_Full<'b>> {
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let parabolicItems = self.parabolicItems.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    IonoObservationDensityProfileParabolic_Full::create(_fbb, &IonoObservationDensityProfileParabolic_FullArgs{
      description,
      parabolicItems,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationDensityProfileParabolic_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_parabolic_full_unchecked`.
pub fn root_as_iono_observation_density_profile_parabolic_full(buf: &[u8]) -> Result<IonoObservationDensityProfileParabolic_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationDensityProfileParabolic_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationDensityProfileParabolic_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_density_profile_parabolic_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_parabolic_full(buf: &[u8]) -> Result<IonoObservationDensityProfileParabolic_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationDensityProfileParabolic_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationDensityProfileParabolic_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_parabolic_full_unchecked`.
pub fn root_as_iono_observation_density_profile_parabolic_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileParabolic_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationDensityProfileParabolic_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationDensityProfileParabolic_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_parabolic_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_parabolic_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileParabolic_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationDensityProfileParabolic_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationDensityProfileParabolic_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationDensityProfileParabolic_Full`.
pub unsafe fn root_as_iono_observation_density_profile_parabolic_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileParabolic_Full {
  flatbuffers::root_unchecked::<IonoObservationDensityProfileParabolic_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationDensityProfileParabolic_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationDensityProfileParabolic_Full`.
pub unsafe fn size_prefixed_root_as_iono_observation_density_profile_parabolic_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileParabolic_Full {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationDensityProfileParabolic_Full>(buf)
}
pub const IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_FULL_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_density_profile_parabolic_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_FULL_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_density_profile_parabolic_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_density_profile_parabolic_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationDensityProfileParabolic_Full<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_density_profile_parabolic_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationDensityProfileParabolic_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_FULL_IDENTIFIER));
}
