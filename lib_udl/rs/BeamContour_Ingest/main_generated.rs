// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BEAM_CONTOUR_INGEST_TYPE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BEAM_CONTOUR_INGEST_TYPE_ENUM: i8 = 2;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BEAM_CONTOUR_INGEST_TYPE_ENUM: [BeamContour_Ingest_type_Enum; 3] = [
  BeamContour_Ingest_type_Enum::BORESIGHT,
  BeamContour_Ingest_type_Enum::CONTOUR,
  BeamContour_Ingest_type_Enum::SVC_AREA,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BeamContour_Ingest_type_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl BeamContour_Ingest_type_Enum {
  /// No description available.
  pub const BORESIGHT: Self = Self(0);
  /// No description available.
  pub const CONTOUR: Self = Self(1);
  /// No description available.
  pub const SVC_AREA: Self = Self(2);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 2;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::BORESIGHT,
    Self::CONTOUR,
    Self::SVC_AREA,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::BORESIGHT => Some("BORESIGHT"),
      Self::CONTOUR => Some("CONTOUR"),
      Self::SVC_AREA => Some("SVC_AREA"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for BeamContour_Ingest_type_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BeamContour_Ingest_type_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for BeamContour_Ingest_type_Enum {
    type Output = BeamContour_Ingest_type_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BeamContour_Ingest_type_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BeamContour_Ingest_type_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BeamContour_Ingest_type_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BEAM_CONTOUR_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BEAM_CONTOUR_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BEAM_CONTOUR_INGEST_DATA_MODE_ENUM: [BeamContour_Ingest_dataMode_Enum; 4] = [
  BeamContour_Ingest_dataMode_Enum::REAL,
  BeamContour_Ingest_dataMode_Enum::TEST,
  BeamContour_Ingest_dataMode_Enum::SIMULATED,
  BeamContour_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BeamContour_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl BeamContour_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for BeamContour_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BeamContour_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for BeamContour_Ingest_dataMode_Enum {
    type Output = BeamContour_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BeamContour_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BeamContour_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BeamContour_Ingest_dataMode_Enum {}
pub enum BeamContour_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Describes the beam contour associated with a beam entity. Beam contours are the geographic representation of the relative gain levels of beam power off of the maximum gain boresight points.
pub struct BeamContour_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BeamContour_Ingest<'a> {
  type Inner = BeamContour_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BeamContour_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDBEAM: flatbuffers::VOffsetT = 8;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 10;
  pub const VT_CONTOURIDX: flatbuffers::VOffsetT = 12;
  pub const VT_GAIN: flatbuffers::VOffsetT = 14;
  pub const VT_REGIONNAME: flatbuffers::VOffsetT = 16;
  pub const VT_GEOGRAPHY: flatbuffers::VOffsetT = 18;
  pub const VT_GEOGRAPHYTEXT: flatbuffers::VOffsetT = 20;
  pub const VT_GEOGRAPHYJSON: flatbuffers::VOffsetT = 22;
  pub const VT_GEOGRAPHYTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_GEOGRAPHYNDIMS: flatbuffers::VOffsetT = 26;
  pub const VT_GEOGRAPHYSRID: flatbuffers::VOffsetT = 28;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 30;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 32;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 34;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 36;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 38;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BeamContour_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BeamContour_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<BeamContour_Ingest<'bldr>> {
    let mut builder = BeamContour_IngestBuilder::new(_fbb);
    builder.add_gain(args.gain);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    builder.add_geographySrid(args.geographySrid);
    builder.add_geographyNdims(args.geographyNdims);
    if let Some(x) = args.geographyType { builder.add_geographyType(x); }
    if let Some(x) = args.geographyJson { builder.add_geographyJson(x); }
    if let Some(x) = args.geographyText { builder.add_geographyText(x); }
    if let Some(x) = args.geography { builder.add_geography(x); }
    if let Some(x) = args.regionName { builder.add_regionName(x); }
    builder.add_contourIdx(args.contourIdx);
    if let Some(x) = args.idBeam { builder.add_idBeam(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_type_(args.type_);
    builder.finish()
  }

  pub fn unpack(&self) -> BeamContour_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idBeam = self.idBeam().map(|x| {
      x.to_string()
    });
    let type_ = self.type_();
    let contourIdx = self.contourIdx();
    let gain = self.gain();
    let regionName = self.regionName().map(|x| {
      x.to_string()
    });
    let geography = self.geography().map(|x| {
      x.to_string()
    });
    let geographyText = self.geographyText().map(|x| {
      x.to_string()
    });
    let geographyJson = self.geographyJson().map(|x| {
      x.to_string()
    });
    let geographyType = self.geographyType().map(|x| {
      x.to_string()
    });
    let geographyNdims = self.geographyNdims();
    let geographySrid = self.geographySrid();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    BeamContour_IngestT {
      id,
      classificationMarking,
      idBeam,
      type_,
      contourIdx,
      gain,
      regionName,
      geography,
      geographyText,
      geographyJson,
      geographyType,
      geographyNdims,
      geographySrid,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: BEAMCONTOUR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// ID of the beam.
  /// Example: /// Example: REF-BEAM-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idBeam(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_IDBEAM, None)}
  }
  /// The type of object represented in this record (BORESIGHT, CONTOUR, SVC AREA).  Boresight refers to the point of maximum/peak gain, and should not be confused with the 'aim point' of the related beam.  Gain contours are regions of  coverage referenced to the relative gain of the related beam.  Service Areas are composed of one or more service regions, with each region being either discrete point(s) or a continuous contour.
  /// Example: /// Example: BORESIGHT
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn type_(&self) -> BeamContour_Ingest_type_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BeamContour_Ingest_type_Enum>(BeamContour_Ingest::VT_TYPE_, Some(BeamContour_Ingest_type_Enum::BORESIGHT)).unwrap()}
  }
  /// The index number of this contour. The value is required if type = CONTOUR.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn contourIdx(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BeamContour_Ingest::VT_CONTOURIDX, Some(0)).unwrap()}
  }
  /// The relative gain level in dB associated with this boresight or contour.  Gain does not apply to service area records. The value is required if type = BORESIGHT or CONTOUR.
  /// Example: /// Example: 17.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gain(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BeamContour_Ingest::VT_GAIN, Some(0.0)).unwrap()}
  }
  /// The region name within the service area.
  /// Example: /// Example: Example region name
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn regionName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_REGIONNAME, None)}
  }
  /// GeoJSON or Well Known Text expression of the boresight point, service area point or region, or the gain contour region in geographic longitude, latitude pairs. Boresight and service area point(s) are represented as a 'Point' or 'MultiPoint', service areas and closed gain contours as 'Polygon', and open contours as 'LineString'. This is an optional convenience field only used for create operations. The system will auto-detect the format (Well Known Text or GeoJSON) and populate both geographyText and geographyJson fields appropriately. A create request must contain one of the geography, geographyText, or geographyJson.
  /// Example: /// Example: POLYGON((26.156175339112 67.3291113966927,26.0910220642717 67.2580009640721,26.6637992964562 67.1795862381682,26.730115808233 67.2501237475598,26.156175339112 67.3291113966927))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geography(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_GEOGRAPHY, None)}
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geographyText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_GEOGRAPHYTEXT, None)}
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geographyJson(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_GEOGRAPHYJSON, None)}
  }
  /// Type of region as projected.
  /// Example: /// Example: ST_Polygon
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn geographyType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_GEOGRAPHYTYPE, None)}
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geographyNdims(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BeamContour_Ingest::VT_GEOGRAPHYNDIMS, Some(0)).unwrap()}
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geographySrid(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(BeamContour_Ingest::VT_GEOGRAPHYSRID, Some(0)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system, example = 2018-01-01T16:00:00.123Z.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BeamContour_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> BeamContour_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BeamContour_Ingest_dataMode_Enum>(BeamContour_Ingest::VT_DATAMODE, Some(BeamContour_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for BeamContour_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idBeam", Self::VT_IDBEAM, false)?
     .visit_field::<BeamContour_Ingest_type_Enum>("type_", Self::VT_TYPE_, false)?
     .visit_field::<i32>("contourIdx", Self::VT_CONTOURIDX, false)?
     .visit_field::<f64>("gain", Self::VT_GAIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("regionName", Self::VT_REGIONNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geography", Self::VT_GEOGRAPHY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geographyText", Self::VT_GEOGRAPHYTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geographyJson", Self::VT_GEOGRAPHYJSON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("geographyType", Self::VT_GEOGRAPHYTYPE, false)?
     .visit_field::<i32>("geographyNdims", Self::VT_GEOGRAPHYNDIMS, false)?
     .visit_field::<i32>("geographySrid", Self::VT_GEOGRAPHYSRID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<BeamContour_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct BeamContour_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idBeam: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: BeamContour_Ingest_type_Enum,
    pub contourIdx: i32,
    pub gain: f64,
    pub regionName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geography: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geographyText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geographyJson: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geographyType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub geographyNdims: i32,
    pub geographySrid: i32,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: BeamContour_Ingest_dataMode_Enum,
}
impl<'a> Default for BeamContour_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    BeamContour_IngestArgs {
      id: None,
      classificationMarking: None,
      idBeam: None,
      type_: BeamContour_Ingest_type_Enum::BORESIGHT,
      contourIdx: 0,
      gain: 0.0,
      regionName: None,
      geography: None,
      geographyText: None,
      geographyJson: None,
      geographyType: None,
      geographyNdims: 0,
      geographySrid: 0,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: BeamContour_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct BeamContour_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BeamContour_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idBeam(&mut self, idBeam: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_IDBEAM, idBeam);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: BeamContour_Ingest_type_Enum) {
    self.fbb_.push_slot::<BeamContour_Ingest_type_Enum>(BeamContour_Ingest::VT_TYPE_, type_, BeamContour_Ingest_type_Enum::BORESIGHT);
  }
  #[inline]
  pub fn add_contourIdx(&mut self, contourIdx: i32) {
    self.fbb_.push_slot::<i32>(BeamContour_Ingest::VT_CONTOURIDX, contourIdx, 0);
  }
  #[inline]
  pub fn add_gain(&mut self, gain: f64) {
    self.fbb_.push_slot::<f64>(BeamContour_Ingest::VT_GAIN, gain, 0.0);
  }
  #[inline]
  pub fn add_regionName(&mut self, regionName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_REGIONNAME, regionName);
  }
  #[inline]
  pub fn add_geography(&mut self, geography: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_GEOGRAPHY, geography);
  }
  #[inline]
  pub fn add_geographyText(&mut self, geographyText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_GEOGRAPHYTEXT, geographyText);
  }
  #[inline]
  pub fn add_geographyJson(&mut self, geographyJson: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_GEOGRAPHYJSON, geographyJson);
  }
  #[inline]
  pub fn add_geographyType(&mut self, geographyType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_GEOGRAPHYTYPE, geographyType);
  }
  #[inline]
  pub fn add_geographyNdims(&mut self, geographyNdims: i32) {
    self.fbb_.push_slot::<i32>(BeamContour_Ingest::VT_GEOGRAPHYNDIMS, geographyNdims, 0);
  }
  #[inline]
  pub fn add_geographySrid(&mut self, geographySrid: i32) {
    self.fbb_.push_slot::<i32>(BeamContour_Ingest::VT_GEOGRAPHYSRID, geographySrid, 0);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BeamContour_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: BeamContour_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<BeamContour_Ingest_dataMode_Enum>(BeamContour_Ingest::VT_DATAMODE, dataMode, BeamContour_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BeamContour_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BeamContour_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BeamContour_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BeamContour_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BeamContour_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idBeam", &self.idBeam());
      ds.field("type_", &self.type_());
      ds.field("contourIdx", &self.contourIdx());
      ds.field("gain", &self.gain());
      ds.field("regionName", &self.regionName());
      ds.field("geography", &self.geography());
      ds.field("geographyText", &self.geographyText());
      ds.field("geographyJson", &self.geographyJson());
      ds.field("geographyType", &self.geographyType());
      ds.field("geographyNdims", &self.geographyNdims());
      ds.field("geographySrid", &self.geographySrid());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BeamContour_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idBeam: Option<String>,
  pub type_: BeamContour_Ingest_type_Enum,
  pub contourIdx: i32,
  pub gain: f64,
  pub regionName: Option<String>,
  pub geography: Option<String>,
  pub geographyText: Option<String>,
  pub geographyJson: Option<String>,
  pub geographyType: Option<String>,
  pub geographyNdims: i32,
  pub geographySrid: i32,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: BeamContour_Ingest_dataMode_Enum,
}
impl Default for BeamContour_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idBeam: None,
      type_: BeamContour_Ingest_type_Enum::BORESIGHT,
      contourIdx: 0,
      gain: 0.0,
      regionName: None,
      geography: None,
      geographyText: None,
      geographyJson: None,
      geographyType: None,
      geographyNdims: 0,
      geographySrid: 0,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: BeamContour_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl BeamContour_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BeamContour_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idBeam = self.idBeam.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_;
    let contourIdx = self.contourIdx;
    let gain = self.gain;
    let regionName = self.regionName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geography = self.geography.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geographyText = self.geographyText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geographyJson = self.geographyJson.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geographyType = self.geographyType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let geographyNdims = self.geographyNdims;
    let geographySrid = self.geographySrid;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    BeamContour_Ingest::create(_fbb, &BeamContour_IngestArgs{
      id,
      classificationMarking,
      idBeam,
      type_,
      contourIdx,
      gain,
      regionName,
      geography,
      geographyText,
      geographyJson,
      geographyType,
      geographyNdims,
      geographySrid,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `BeamContour_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_beam_contour_ingest_unchecked`.
pub fn root_as_beam_contour_ingest(buf: &[u8]) -> Result<BeamContour_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BeamContour_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BeamContour_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_beam_contour_ingest_unchecked`.
pub fn size_prefixed_root_as_beam_contour_ingest(buf: &[u8]) -> Result<BeamContour_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BeamContour_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BeamContour_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_beam_contour_ingest_unchecked`.
pub fn root_as_beam_contour_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BeamContour_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BeamContour_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BeamContour_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_beam_contour_ingest_unchecked`.
pub fn size_prefixed_root_as_beam_contour_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BeamContour_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BeamContour_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BeamContour_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BeamContour_Ingest`.
pub unsafe fn root_as_beam_contour_ingest_unchecked(buf: &[u8]) -> BeamContour_Ingest {
  flatbuffers::root_unchecked::<BeamContour_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BeamContour_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BeamContour_Ingest`.
pub unsafe fn size_prefixed_root_as_beam_contour_ingest_unchecked(buf: &[u8]) -> BeamContour_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<BeamContour_Ingest>(buf)
}
pub const BEAM_CONTOUR_INGEST_IDENTIFIER: &str = "BEAM";

#[inline]
pub fn beam_contour_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, BEAM_CONTOUR_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn beam_contour_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, BEAM_CONTOUR_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_beam_contour_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<BeamContour_Ingest<'a>>) {
  fbb.finish(root, Some(BEAM_CONTOUR_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_beam_contour_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<BeamContour_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(BEAM_CONTOUR_INGEST_IDENTIFIER));
}
