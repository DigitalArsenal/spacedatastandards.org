// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum LogisticsParts_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The parts associated with this support item.
pub struct LogisticsParts_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LogisticsParts_Ingest<'a> {
  type Inner = LogisticsParts_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LogisticsParts_Ingest<'a> {
  pub const VT_PARTNUMBER: flatbuffers::VOffsetT = 4;
  pub const VT_NATIONALSTOCKNUMBER: flatbuffers::VOffsetT = 6;
  pub const VT_MEASUREMENTUNITCODE: flatbuffers::VOffsetT = 8;
  pub const VT_WORKUNITCODE: flatbuffers::VOffsetT = 10;
  pub const VT_TECHNICALORDERTEXT: flatbuffers::VOffsetT = 12;
  pub const VT_FIGURENUMBER: flatbuffers::VOffsetT = 14;
  pub const VT_INDEXNUMBER: flatbuffers::VOffsetT = 16;
  pub const VT_REQUESTVERIFIER: flatbuffers::VOffsetT = 18;
  pub const VT_LOCATIONVERIFIER: flatbuffers::VOffsetT = 20;
  pub const VT_SUPPLYDOCUMENTNUMBER: flatbuffers::VOffsetT = 22;
  pub const VT_LOGISTICSSTOCKS: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LogisticsParts_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogisticsParts_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<LogisticsParts_Ingest<'bldr>> {
    let mut builder = LogisticsParts_IngestBuilder::new(_fbb);
    if let Some(x) = args.logisticsStocks { builder.add_logisticsStocks(x); }
    if let Some(x) = args.supplyDocumentNumber { builder.add_supplyDocumentNumber(x); }
    if let Some(x) = args.locationVerifier { builder.add_locationVerifier(x); }
    if let Some(x) = args.requestVerifier { builder.add_requestVerifier(x); }
    if let Some(x) = args.indexNumber { builder.add_indexNumber(x); }
    if let Some(x) = args.figureNumber { builder.add_figureNumber(x); }
    if let Some(x) = args.technicalOrderText { builder.add_technicalOrderText(x); }
    if let Some(x) = args.workUnitCode { builder.add_workUnitCode(x); }
    if let Some(x) = args.measurementUnitCode { builder.add_measurementUnitCode(x); }
    if let Some(x) = args.nationalStockNumber { builder.add_nationalStockNumber(x); }
    if let Some(x) = args.partNumber { builder.add_partNumber(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> LogisticsParts_IngestT {
    let partNumber = self.partNumber().map(|x| {
      x.to_string()
    });
    let nationalStockNumber = self.nationalStockNumber().map(|x| {
      x.to_string()
    });
    let measurementUnitCode = self.measurementUnitCode().map(|x| {
      x.to_string()
    });
    let workUnitCode = self.workUnitCode().map(|x| {
      x.to_string()
    });
    let technicalOrderText = self.technicalOrderText().map(|x| {
      x.to_string()
    });
    let figureNumber = self.figureNumber().map(|x| {
      x.to_string()
    });
    let indexNumber = self.indexNumber().map(|x| {
      x.to_string()
    });
    let requestVerifier = self.requestVerifier().map(|x| {
      x.to_string()
    });
    let locationVerifier = self.locationVerifier().map(|x| {
      x.to_string()
    });
    let supplyDocumentNumber = self.supplyDocumentNumber().map(|x| {
      x.to_string()
    });
    let logisticsStocks = self.logisticsStocks().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    LogisticsParts_IngestT {
      partNumber,
      nationalStockNumber,
      measurementUnitCode,
      workUnitCode,
      technicalOrderText,
      figureNumber,
      indexNumber,
      requestVerifier,
      locationVerifier,
      supplyDocumentNumber,
      logisticsStocks,
    }
  }

  /// Requested or supplied part number.
  /// Example: /// Example: MS35338-42
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn partNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_PARTNUMBER, None)}
  }
  /// The National Stock Number of the part being requested or supplied.
  /// Example: /// Example: 5310-00-045-3299
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn nationalStockNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_NATIONALSTOCKNUMBER, None)}
  }
  /// Code for a unit of measurement.
  /// Example: /// Example: EA
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn measurementUnitCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_MEASUREMENTUNITCODE, None)}
  }
  /// Work Unit Code (WUC), or for some aircraft types, the Reference Designator.
  /// Example: /// Example: 5611UU001
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn workUnitCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_WORKUNITCODE, None)}
  }
  /// Indicates the specified Technical Order manual holding the aircraft information for use in diagnosing a problem or condition.
  /// Example: /// Example: 1C-17A-4
  /// Constraints: Minimum length = 0, Maximum length = 15
  #[inline]
  pub fn technicalOrderText(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_TECHNICALORDERTEXT, None)}
  }
  /// Technical order manual figure number for the requested / supplied part.
  /// Example: /// Example: 3
  /// Constraints: Minimum length = 0, Maximum length = 7
  #[inline]
  pub fn figureNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_FIGURENUMBER, None)}
  }
  /// Technical order manual index number for the requested part.
  /// Example: /// Example: 4
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn indexNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_INDEXNUMBER, None)}
  }
  /// The person who validated the request for parts.
  /// Example: /// Example: JOHN SMITH
  /// Constraints: Minimum length = 0, Maximum length = 25
  #[inline]
  pub fn requestVerifier(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_REQUESTVERIFIER, None)}
  }
  /// The person who validated that the sourced location has, and can supply, the requested parts.
  /// Example: /// Example: JANE DOE
  /// Constraints: Minimum length = 0, Maximum length = 25
  #[inline]
  pub fn locationVerifier(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_LOCATIONVERIFIER, None)}
  }
  /// The supply document number.
  /// Example: /// Example: J223FU31908300
  /// Constraints: Minimum length = 0, Maximum length = 17
  #[inline]
  pub fn supplyDocumentNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsParts_Ingest::VT_SUPPLYDOCUMENTNUMBER, None)}
  }
  /// The supply stocks for this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn logisticsStocks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LogisticsParts_Ingest::VT_LOGISTICSSTOCKS, None)}
  }
}

impl flatbuffers::Verifiable for LogisticsParts_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("partNumber", Self::VT_PARTNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nationalStockNumber", Self::VT_NATIONALSTOCKNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("measurementUnitCode", Self::VT_MEASUREMENTUNITCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("workUnitCode", Self::VT_WORKUNITCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("technicalOrderText", Self::VT_TECHNICALORDERTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("figureNumber", Self::VT_FIGURENUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("indexNumber", Self::VT_INDEXNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("requestVerifier", Self::VT_REQUESTVERIFIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("locationVerifier", Self::VT_LOCATIONVERIFIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("supplyDocumentNumber", Self::VT_SUPPLYDOCUMENTNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("logisticsStocks", Self::VT_LOGISTICSSTOCKS, false)?
     .finish();
    Ok(())
  }
}
pub struct LogisticsParts_IngestArgs<'a> {
    pub partNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nationalStockNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub measurementUnitCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub workUnitCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub technicalOrderText: Option<flatbuffers::WIPOffset<&'a str>>,
    pub figureNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub indexNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub requestVerifier: Option<flatbuffers::WIPOffset<&'a str>>,
    pub locationVerifier: Option<flatbuffers::WIPOffset<&'a str>>,
    pub supplyDocumentNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub logisticsStocks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for LogisticsParts_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogisticsParts_IngestArgs {
      partNumber: None,
      nationalStockNumber: None,
      measurementUnitCode: None,
      workUnitCode: None,
      technicalOrderText: None,
      figureNumber: None,
      indexNumber: None,
      requestVerifier: None,
      locationVerifier: None,
      supplyDocumentNumber: None,
      logisticsStocks: None,
    }
  }
}

pub struct LogisticsParts_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogisticsParts_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_partNumber(&mut self, partNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_PARTNUMBER, partNumber);
  }
  #[inline]
  pub fn add_nationalStockNumber(&mut self, nationalStockNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_NATIONALSTOCKNUMBER, nationalStockNumber);
  }
  #[inline]
  pub fn add_measurementUnitCode(&mut self, measurementUnitCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_MEASUREMENTUNITCODE, measurementUnitCode);
  }
  #[inline]
  pub fn add_workUnitCode(&mut self, workUnitCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_WORKUNITCODE, workUnitCode);
  }
  #[inline]
  pub fn add_technicalOrderText(&mut self, technicalOrderText: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_TECHNICALORDERTEXT, technicalOrderText);
  }
  #[inline]
  pub fn add_figureNumber(&mut self, figureNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_FIGURENUMBER, figureNumber);
  }
  #[inline]
  pub fn add_indexNumber(&mut self, indexNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_INDEXNUMBER, indexNumber);
  }
  #[inline]
  pub fn add_requestVerifier(&mut self, requestVerifier: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_REQUESTVERIFIER, requestVerifier);
  }
  #[inline]
  pub fn add_locationVerifier(&mut self, locationVerifier: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_LOCATIONVERIFIER, locationVerifier);
  }
  #[inline]
  pub fn add_supplyDocumentNumber(&mut self, supplyDocumentNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_SUPPLYDOCUMENTNUMBER, supplyDocumentNumber);
  }
  #[inline]
  pub fn add_logisticsStocks(&mut self, logisticsStocks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsParts_Ingest::VT_LOGISTICSSTOCKS, logisticsStocks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogisticsParts_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogisticsParts_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LogisticsParts_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LogisticsParts_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LogisticsParts_Ingest");
      ds.field("partNumber", &self.partNumber());
      ds.field("nationalStockNumber", &self.nationalStockNumber());
      ds.field("measurementUnitCode", &self.measurementUnitCode());
      ds.field("workUnitCode", &self.workUnitCode());
      ds.field("technicalOrderText", &self.technicalOrderText());
      ds.field("figureNumber", &self.figureNumber());
      ds.field("indexNumber", &self.indexNumber());
      ds.field("requestVerifier", &self.requestVerifier());
      ds.field("locationVerifier", &self.locationVerifier());
      ds.field("supplyDocumentNumber", &self.supplyDocumentNumber());
      ds.field("logisticsStocks", &self.logisticsStocks());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LogisticsParts_IngestT {
  pub partNumber: Option<String>,
  pub nationalStockNumber: Option<String>,
  pub measurementUnitCode: Option<String>,
  pub workUnitCode: Option<String>,
  pub technicalOrderText: Option<String>,
  pub figureNumber: Option<String>,
  pub indexNumber: Option<String>,
  pub requestVerifier: Option<String>,
  pub locationVerifier: Option<String>,
  pub supplyDocumentNumber: Option<String>,
  pub logisticsStocks: Option<Vec<String>>,
}
impl Default for LogisticsParts_IngestT {
  fn default() -> Self {
    Self {
      partNumber: None,
      nationalStockNumber: None,
      measurementUnitCode: None,
      workUnitCode: None,
      technicalOrderText: None,
      figureNumber: None,
      indexNumber: None,
      requestVerifier: None,
      locationVerifier: None,
      supplyDocumentNumber: None,
      logisticsStocks: None,
    }
  }
}
impl LogisticsParts_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LogisticsParts_Ingest<'b>> {
    let partNumber = self.partNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nationalStockNumber = self.nationalStockNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let measurementUnitCode = self.measurementUnitCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let workUnitCode = self.workUnitCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let technicalOrderText = self.technicalOrderText.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let figureNumber = self.figureNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let indexNumber = self.indexNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let requestVerifier = self.requestVerifier.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let locationVerifier = self.locationVerifier.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let supplyDocumentNumber = self.supplyDocumentNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let logisticsStocks = self.logisticsStocks.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    LogisticsParts_Ingest::create(_fbb, &LogisticsParts_IngestArgs{
      partNumber,
      nationalStockNumber,
      measurementUnitCode,
      workUnitCode,
      technicalOrderText,
      figureNumber,
      indexNumber,
      requestVerifier,
      locationVerifier,
      supplyDocumentNumber,
      logisticsStocks,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LogisticsParts_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_parts_ingest_unchecked`.
pub fn root_as_logistics_parts_ingest(buf: &[u8]) -> Result<LogisticsParts_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LogisticsParts_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LogisticsParts_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_logistics_parts_ingest_unchecked`.
pub fn size_prefixed_root_as_logistics_parts_ingest(buf: &[u8]) -> Result<LogisticsParts_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LogisticsParts_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LogisticsParts_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_parts_ingest_unchecked`.
pub fn root_as_logistics_parts_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsParts_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LogisticsParts_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LogisticsParts_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_parts_ingest_unchecked`.
pub fn size_prefixed_root_as_logistics_parts_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsParts_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LogisticsParts_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LogisticsParts_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LogisticsParts_Ingest`.
pub unsafe fn root_as_logistics_parts_ingest_unchecked(buf: &[u8]) -> LogisticsParts_Ingest {
  flatbuffers::root_unchecked::<LogisticsParts_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LogisticsParts_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LogisticsParts_Ingest`.
pub unsafe fn size_prefixed_root_as_logistics_parts_ingest_unchecked(buf: &[u8]) -> LogisticsParts_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<LogisticsParts_Ingest>(buf)
}
pub const LOGISTICS_PARTS_INGEST_IDENTIFIER: &str = "LOGI";

#[inline]
pub fn logistics_parts_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_PARTS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn logistics_parts_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_PARTS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_logistics_parts_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LogisticsParts_Ingest<'a>>) {
  fbb.finish(root, Some(LOGISTICS_PARTS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_logistics_parts_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LogisticsParts_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(LOGISTICS_PARTS_INGEST_IDENTIFIER));
}
