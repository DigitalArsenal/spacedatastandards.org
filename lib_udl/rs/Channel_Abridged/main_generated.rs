// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CHANNEL_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CHANNEL_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CHANNEL_ABRIDGED_DATA_MODE_ENUM: [Channel_Abridged_dataMode_Enum; 4] = [
  Channel_Abridged_dataMode_Enum::REAL,
  Channel_Abridged_dataMode_Enum::TEST,
  Channel_Abridged_dataMode_Enum::SIMULATED,
  Channel_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Channel_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Channel_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Channel_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Channel_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Channel_Abridged_dataMode_Enum {
    type Output = Channel_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Channel_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Channel_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Channel_Abridged_dataMode_Enum {}
pub enum Channel_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Channel information on a particular transponder.
pub struct Channel_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Channel_Abridged<'a> {
  type Inner = Channel_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Channel_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDTRANSPONDER: flatbuffers::VOffsetT = 6;
  pub const VT_NAME: flatbuffers::VOffsetT = 8;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 10;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 12;
  pub const VT_IDBEAM: flatbuffers::VOffsetT = 14;
  pub const VT_BEAMNAME: flatbuffers::VOffsetT = 16;
  pub const VT_IDRFBAND: flatbuffers::VOffsetT = 18;
  pub const VT_ENCRYPTION: flatbuffers::VOffsetT = 20;
  pub const VT_PKG: flatbuffers::VOffsetT = 22;
  pub const VT_RES: flatbuffers::VOffsetT = 24;
  pub const VT_COMPRESSION: flatbuffers::VOffsetT = 26;
  pub const VT_VPID: flatbuffers::VOffsetT = 28;
  pub const VT_APID: flatbuffers::VOffsetT = 30;
  pub const VT_SID: flatbuffers::VOffsetT = 32;
  pub const VT_OWNER: flatbuffers::VOffsetT = 34;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 36;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 38;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 40;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 42;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 44;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 46;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Channel_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Channel_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<Channel_Abridged<'bldr>> {
    let mut builder = Channel_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.owner { builder.add_owner(x); }
    if let Some(x) = args.sid { builder.add_sid(x); }
    if let Some(x) = args.apid { builder.add_apid(x); }
    if let Some(x) = args.vpid { builder.add_vpid(x); }
    if let Some(x) = args.compression { builder.add_compression(x); }
    if let Some(x) = args.res { builder.add_res(x); }
    if let Some(x) = args.pkg { builder.add_pkg(x); }
    if let Some(x) = args.encryption { builder.add_encryption(x); }
    if let Some(x) = args.idRFBand { builder.add_idRFBand(x); }
    if let Some(x) = args.beamName { builder.add_beamName(x); }
    if let Some(x) = args.idBeam { builder.add_idBeam(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.idTransponder { builder.add_idTransponder(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> Channel_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idTransponder = self.idTransponder().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let idBeam = self.idBeam().map(|x| {
      x.to_string()
    });
    let beamName = self.beamName().map(|x| {
      x.to_string()
    });
    let idRFBand = self.idRFBand().map(|x| {
      x.to_string()
    });
    let encryption = self.encryption().map(|x| {
      x.to_string()
    });
    let pkg = self.pkg().map(|x| {
      x.to_string()
    });
    let res = self.res().map(|x| {
      x.to_string()
    });
    let compression = self.compression().map(|x| {
      x.to_string()
    });
    let vpid = self.vpid().map(|x| {
      x.to_string()
    });
    let apid = self.apid().map(|x| {
      x.to_string()
    });
    let sid = self.sid().map(|x| {
      x.to_string()
    });
    let owner = self.owner().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    Channel_AbridgedT {
      id,
      idTransponder,
      name,
      classificationMarking,
      type_,
      idBeam,
      beamName,
      idRFBand,
      encryption,
      pkg,
      res,
      compression,
      vpid,
      apid,
      sid,
      owner,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: CHANNEL-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_ID, None)}
  }
  /// ID of the parent transponder object for this Channel.
  /// Example: /// Example: REF-TRANSPONDER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idTransponder(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_IDTRANSPONDER, None)}
  }
  /// Channel name.
  /// Example: /// Example: Example name
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_NAME, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Channel type.
  /// Example: /// Example: Example type
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_TYPE_, None)}
  }
  /// Identifier of the particular beam for this channel.
  /// Example: /// Example: REF-BEAM-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idBeam(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_IDBEAM, None)}
  }
  /// The antenna beam ID of the particular beam for this channel.  beamName is not unique across payloads.
  /// Example: /// Example: B8VD
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn beamName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_BEAMNAME, None)}
  }
  /// ID of the RF Band object for this channel.
  /// Example: /// Example: REF-RFBAND-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idRFBand(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_IDRFBAND, None)}
  }
  /// Channel encryption.
  /// Example: /// Example: Example encryption
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn encryption(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_ENCRYPTION, None)}
  }
  /// Pkg.
  /// Example: /// Example: Example pkg
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn pkg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_PKG, None)}
  }
  /// Res.
  /// Example: /// Example: Example res
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn res(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_RES, None)}
  }
  /// Channel compression.
  /// Example: /// Example: Example compression
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn compression(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_COMPRESSION, None)}
  }
  /// Channel vPid.
  /// Example: /// Example: VP-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn vpid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_VPID, None)}
  }
  /// Channel aPid.
  /// Example: /// Example: AP-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn apid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_APID, None)}
  }
  /// SID.
  /// Example: /// Example: S-ID
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn sid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_SID, None)}
  }
  /// Owner.
  /// Example: /// Example: example_owner
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn owner(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_OWNER, None)}
  }
  /// Source of the data.
  /// Example: /// Example: system.source
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: example_origin
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Channel_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Channel_Abridged_dataMode_Enum>(Channel_Abridged::VT_DATAMODE, Some(Channel_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Channel_Abridged::VT_CREATEDBY, None)}
  }
}

impl flatbuffers::Verifiable for Channel_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idTransponder", Self::VT_IDTRANSPONDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idBeam", Self::VT_IDBEAM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("beamName", Self::VT_BEAMNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idRFBand", Self::VT_IDRFBAND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("encryption", Self::VT_ENCRYPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pkg", Self::VT_PKG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("res", Self::VT_RES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("compression", Self::VT_COMPRESSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("vpid", Self::VT_VPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apid", Self::VT_APID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sid", Self::VT_SID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("owner", Self::VT_OWNER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<Channel_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .finish();
    Ok(())
  }
}
pub struct Channel_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idTransponder: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idBeam: Option<flatbuffers::WIPOffset<&'a str>>,
    pub beamName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idRFBand: Option<flatbuffers::WIPOffset<&'a str>>,
    pub encryption: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pkg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub res: Option<flatbuffers::WIPOffset<&'a str>>,
    pub compression: Option<flatbuffers::WIPOffset<&'a str>>,
    pub vpid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub apid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub owner: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Channel_Abridged_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Channel_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    Channel_AbridgedArgs {
      id: None,
      idTransponder: None,
      name: None,
      classificationMarking: None,
      type_: None,
      idBeam: None,
      beamName: None,
      idRFBand: None,
      encryption: None,
      pkg: None,
      res: None,
      compression: None,
      vpid: None,
      apid: None,
      sid: None,
      owner: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Channel_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
    }
  }
}

pub struct Channel_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Channel_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_idTransponder(&mut self, idTransponder: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_IDTRANSPONDER, idTransponder);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_NAME, name);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_idBeam(&mut self, idBeam: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_IDBEAM, idBeam);
  }
  #[inline]
  pub fn add_beamName(&mut self, beamName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_BEAMNAME, beamName);
  }
  #[inline]
  pub fn add_idRFBand(&mut self, idRFBand: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_IDRFBAND, idRFBand);
  }
  #[inline]
  pub fn add_encryption(&mut self, encryption: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_ENCRYPTION, encryption);
  }
  #[inline]
  pub fn add_pkg(&mut self, pkg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_PKG, pkg);
  }
  #[inline]
  pub fn add_res(&mut self, res: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_RES, res);
  }
  #[inline]
  pub fn add_compression(&mut self, compression: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_COMPRESSION, compression);
  }
  #[inline]
  pub fn add_vpid(&mut self, vpid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_VPID, vpid);
  }
  #[inline]
  pub fn add_apid(&mut self, apid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_APID, apid);
  }
  #[inline]
  pub fn add_sid(&mut self, sid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_SID, sid);
  }
  #[inline]
  pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_OWNER, owner);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Channel_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<Channel_Abridged_dataMode_Enum>(Channel_Abridged::VT_DATAMODE, dataMode, Channel_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Channel_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Channel_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Channel_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Channel_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Channel_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Channel_Abridged");
      ds.field("id", &self.id());
      ds.field("idTransponder", &self.idTransponder());
      ds.field("name", &self.name());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("type_", &self.type_());
      ds.field("idBeam", &self.idBeam());
      ds.field("beamName", &self.beamName());
      ds.field("idRFBand", &self.idRFBand());
      ds.field("encryption", &self.encryption());
      ds.field("pkg", &self.pkg());
      ds.field("res", &self.res());
      ds.field("compression", &self.compression());
      ds.field("vpid", &self.vpid());
      ds.field("apid", &self.apid());
      ds.field("sid", &self.sid());
      ds.field("owner", &self.owner());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Channel_AbridgedT {
  pub id: Option<String>,
  pub idTransponder: Option<String>,
  pub name: Option<String>,
  pub classificationMarking: Option<String>,
  pub type_: Option<String>,
  pub idBeam: Option<String>,
  pub beamName: Option<String>,
  pub idRFBand: Option<String>,
  pub encryption: Option<String>,
  pub pkg: Option<String>,
  pub res: Option<String>,
  pub compression: Option<String>,
  pub vpid: Option<String>,
  pub apid: Option<String>,
  pub sid: Option<String>,
  pub owner: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: Channel_Abridged_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
}
impl Default for Channel_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      idTransponder: None,
      name: None,
      classificationMarking: None,
      type_: None,
      idBeam: None,
      beamName: None,
      idRFBand: None,
      encryption: None,
      pkg: None,
      res: None,
      compression: None,
      vpid: None,
      apid: None,
      sid: None,
      owner: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Channel_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
    }
  }
}
impl Channel_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Channel_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idTransponder = self.idTransponder.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idBeam = self.idBeam.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let beamName = self.beamName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idRFBand = self.idRFBand.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let encryption = self.encryption.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pkg = self.pkg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let res = self.res.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let compression = self.compression.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let vpid = self.vpid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let apid = self.apid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sid = self.sid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let owner = self.owner.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Channel_Abridged::create(_fbb, &Channel_AbridgedArgs{
      id,
      idTransponder,
      name,
      classificationMarking,
      type_,
      idBeam,
      beamName,
      idRFBand,
      encryption,
      pkg,
      res,
      compression,
      vpid,
      apid,
      sid,
      owner,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Channel_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_channel_abridged_unchecked`.
pub fn root_as_channel_abridged(buf: &[u8]) -> Result<Channel_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Channel_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Channel_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_channel_abridged_unchecked`.
pub fn size_prefixed_root_as_channel_abridged(buf: &[u8]) -> Result<Channel_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Channel_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Channel_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_channel_abridged_unchecked`.
pub fn root_as_channel_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Channel_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Channel_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Channel_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_channel_abridged_unchecked`.
pub fn size_prefixed_root_as_channel_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Channel_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Channel_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Channel_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Channel_Abridged`.
pub unsafe fn root_as_channel_abridged_unchecked(buf: &[u8]) -> Channel_Abridged {
  flatbuffers::root_unchecked::<Channel_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Channel_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Channel_Abridged`.
pub unsafe fn size_prefixed_root_as_channel_abridged_unchecked(buf: &[u8]) -> Channel_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<Channel_Abridged>(buf)
}
pub const CHANNEL_ABRIDGED_IDENTIFIER: &str = "CHAN";

#[inline]
pub fn channel_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CHANNEL_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn channel_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CHANNEL_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_channel_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Channel_Abridged<'a>>) {
  fbb.finish(root, Some(CHANNEL_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_channel_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Channel_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(CHANNEL_ABRIDGED_IDENTIFIER));
}
