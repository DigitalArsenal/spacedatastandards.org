// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RADAR_OBSERVATION_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RADAR_OBSERVATION_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RADAR_OBSERVATION_ABRIDGED_DATA_MODE_ENUM: [RadarObservation_Abridged_dataMode_Enum; 4] = [
  RadarObservation_Abridged_dataMode_Enum::REAL,
  RadarObservation_Abridged_dataMode_Enum::TEST,
  RadarObservation_Abridged_dataMode_Enum::SIMULATED,
  RadarObservation_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RadarObservation_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RadarObservation_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RadarObservation_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RadarObservation_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RadarObservation_Abridged_dataMode_Enum {
    type Output = RadarObservation_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RadarObservation_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RadarObservation_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RadarObservation_Abridged_dataMode_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RADAR_OBSERVATION_ABRIDGED_SEN_REFERENCE_FRAME_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RADAR_OBSERVATION_ABRIDGED_SEN_REFERENCE_FRAME_ENUM: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RADAR_OBSERVATION_ABRIDGED_SEN_REFERENCE_FRAME_ENUM: [RadarObservation_Abridged_senReferenceFrame_Enum; 6] = [
  RadarObservation_Abridged_senReferenceFrame_Enum::J2000,
  RadarObservation_Abridged_senReferenceFrame_Enum::EFG_TDR,
  RadarObservation_Abridged_senReferenceFrame_Enum::ECR_ECEF,
  RadarObservation_Abridged_senReferenceFrame_Enum::TEME,
  RadarObservation_Abridged_senReferenceFrame_Enum::ITRF,
  RadarObservation_Abridged_senReferenceFrame_Enum::GCRF,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RadarObservation_Abridged_senReferenceFrame_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RadarObservation_Abridged_senReferenceFrame_Enum {
  /// No description available.
  pub const J2000: Self = Self(0);
  /// No description available.
  pub const EFG_TDR: Self = Self(1);
  /// No description available.
  pub const ECR_ECEF: Self = Self(2);
  /// No description available.
  pub const TEME: Self = Self(3);
  /// No description available.
  pub const ITRF: Self = Self(4);
  /// No description available.
  pub const GCRF: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::J2000,
    Self::EFG_TDR,
    Self::ECR_ECEF,
    Self::TEME,
    Self::ITRF,
    Self::GCRF,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::J2000 => Some("J2000"),
      Self::EFG_TDR => Some("EFG_TDR"),
      Self::ECR_ECEF => Some("ECR_ECEF"),
      Self::TEME => Some("TEME"),
      Self::ITRF => Some("ITRF"),
      Self::GCRF => Some("GCRF"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RadarObservation_Abridged_senReferenceFrame_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RadarObservation_Abridged_senReferenceFrame_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RadarObservation_Abridged_senReferenceFrame_Enum {
    type Output = RadarObservation_Abridged_senReferenceFrame_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RadarObservation_Abridged_senReferenceFrame_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RadarObservation_Abridged_senReferenceFrame_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RadarObservation_Abridged_senReferenceFrame_Enum {}
pub enum RadarObservation_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of observation data for radar based sensor phenomenologies. J2000 is the preferred coordinate frame for all observations, but in some cases observations may be in another frame depending on the provider. Please see the 'Discover' tab in the storefront to confirm coordinate frames by data provider.
pub struct RadarObservation_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RadarObservation_Abridged<'a> {
  type Inner = RadarObservation_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RadarObservation_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_OBTIME: flatbuffers::VOffsetT = 8;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 10;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 12;
  pub const VT_SATNO: flatbuffers::VOffsetT = 14;
  pub const VT_TASKID: flatbuffers::VOffsetT = 16;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 18;
  pub const VT_TRACKID: flatbuffers::VOffsetT = 20;
  pub const VT_OBPOSITION: flatbuffers::VOffsetT = 22;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 24;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 26;
  pub const VT_UCT: flatbuffers::VOffsetT = 28;
  pub const VT_AZIMUTH: flatbuffers::VOffsetT = 30;
  pub const VT_AZIMUTHUNC: flatbuffers::VOffsetT = 32;
  pub const VT_AZIMUTHBIAS: flatbuffers::VOffsetT = 34;
  pub const VT_AZIMUTHRATE: flatbuffers::VOffsetT = 36;
  pub const VT_ELEVATION: flatbuffers::VOffsetT = 38;
  pub const VT_ELEVATIONUNC: flatbuffers::VOffsetT = 40;
  pub const VT_ELEVATIONBIAS: flatbuffers::VOffsetT = 42;
  pub const VT_ELEVATIONRATE: flatbuffers::VOffsetT = 44;
  pub const VT_RANGE: flatbuffers::VOffsetT = 46;
  pub const VT_RANGEACCEL: flatbuffers::VOffsetT = 48;
  pub const VT_RANGEACCELUNC: flatbuffers::VOffsetT = 50;
  pub const VT_RANGEUNC: flatbuffers::VOffsetT = 52;
  pub const VT_RANGEBIAS: flatbuffers::VOffsetT = 54;
  pub const VT_RANGERATE: flatbuffers::VOffsetT = 56;
  pub const VT_RANGERATEUNC: flatbuffers::VOffsetT = 58;
  pub const VT_DOPPLER: flatbuffers::VOffsetT = 60;
  pub const VT_DOPPLERUNC: flatbuffers::VOffsetT = 62;
  pub const VT_RA: flatbuffers::VOffsetT = 64;
  pub const VT_DECLINATION: flatbuffers::VOffsetT = 66;
  pub const VT_X: flatbuffers::VOffsetT = 68;
  pub const VT_Y: flatbuffers::VOffsetT = 70;
  pub const VT_Z: flatbuffers::VOffsetT = 72;
  pub const VT_XVEL: flatbuffers::VOffsetT = 74;
  pub const VT_YVEL: flatbuffers::VOffsetT = 76;
  pub const VT_ZVEL: flatbuffers::VOffsetT = 78;
  pub const VT_SENX: flatbuffers::VOffsetT = 80;
  pub const VT_SENY: flatbuffers::VOffsetT = 82;
  pub const VT_SENZ: flatbuffers::VOffsetT = 84;
  pub const VT_RCS: flatbuffers::VOffsetT = 86;
  pub const VT_RCSUNC: flatbuffers::VOffsetT = 88;
  pub const VT_ORTHOGONALRCS: flatbuffers::VOffsetT = 90;
  pub const VT_ORTHOGONALRCSUNC: flatbuffers::VOffsetT = 92;
  pub const VT_SNR: flatbuffers::VOffsetT = 94;
  pub const VT_BEAM: flatbuffers::VOffsetT = 96;
  pub const VT_TIMINGBIAS: flatbuffers::VOffsetT = 98;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 100;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 102;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 104;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 106;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 108;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 110;
  pub const VT_SENREFERENCEFRAME: flatbuffers::VOffsetT = 112;
  pub const VT_DESCRIPTOR: flatbuffers::VOffsetT = 114;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 116;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 118;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 120;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RadarObservation_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RadarObservation_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<RadarObservation_Abridged<'bldr>> {
    let mut builder = RadarObservation_AbridgedBuilder::new(_fbb);
    builder.add_timingBias(args.timingBias);
    builder.add_beam(args.beam);
    builder.add_snr(args.snr);
    builder.add_orthogonalRcsUnc(args.orthogonalRcsUnc);
    builder.add_orthogonalRcs(args.orthogonalRcs);
    builder.add_rcsUnc(args.rcsUnc);
    builder.add_rcs(args.rcs);
    builder.add_senz(args.senz);
    builder.add_seny(args.seny);
    builder.add_senx(args.senx);
    builder.add_zvel(args.zvel);
    builder.add_yvel(args.yvel);
    builder.add_xvel(args.xvel);
    builder.add_z(args.z);
    builder.add_y(args.y);
    builder.add_x(args.x);
    builder.add_declination(args.declination);
    builder.add_ra(args.ra);
    builder.add_dopplerUnc(args.dopplerUnc);
    builder.add_doppler(args.doppler);
    builder.add_rangeRateUnc(args.rangeRateUnc);
    builder.add_rangeRate(args.rangeRate);
    builder.add_rangeBias(args.rangeBias);
    builder.add_rangeUnc(args.rangeUnc);
    builder.add_rangeAccelUnc(args.rangeAccelUnc);
    builder.add_rangeAccel(args.rangeAccel);
    builder.add_range(args.range);
    builder.add_elevationRate(args.elevationRate);
    builder.add_elevationBias(args.elevationBias);
    builder.add_elevationUnc(args.elevationUnc);
    builder.add_elevation(args.elevation);
    builder.add_azimuthRate(args.azimuthRate);
    builder.add_azimuthBias(args.azimuthBias);
    builder.add_azimuthUnc(args.azimuthUnc);
    builder.add_azimuth(args.azimuth);
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.descriptor { builder.add_descriptor(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    if let Some(x) = args.obPosition { builder.add_obPosition(x); }
    if let Some(x) = args.trackId { builder.add_trackId(x); }
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.taskId { builder.add_taskId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.obTime { builder.add_obTime(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_senReferenceFrame(args.senReferenceFrame);
    builder.add_dataMode(args.dataMode);
    builder.add_uct(args.uct);
    builder.finish()
  }

  pub fn unpack(&self) -> RadarObservation_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let obTime = self.obTime().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let taskId = self.taskId().map(|x| {
      x.to_string()
    });
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    let trackId = self.trackId().map(|x| {
      x.to_string()
    });
    let obPosition = self.obPosition().map(|x| {
      x.to_string()
    });
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let uct = self.uct();
    let azimuth = self.azimuth();
    let azimuthUnc = self.azimuthUnc();
    let azimuthBias = self.azimuthBias();
    let azimuthRate = self.azimuthRate();
    let elevation = self.elevation();
    let elevationUnc = self.elevationUnc();
    let elevationBias = self.elevationBias();
    let elevationRate = self.elevationRate();
    let range = self.range();
    let rangeAccel = self.rangeAccel();
    let rangeAccelUnc = self.rangeAccelUnc();
    let rangeUnc = self.rangeUnc();
    let rangeBias = self.rangeBias();
    let rangeRate = self.rangeRate();
    let rangeRateUnc = self.rangeRateUnc();
    let doppler = self.doppler();
    let dopplerUnc = self.dopplerUnc();
    let ra = self.ra();
    let declination = self.declination();
    let x = self.x();
    let y = self.y();
    let z = self.z();
    let xvel = self.xvel();
    let yvel = self.yvel();
    let zvel = self.zvel();
    let senx = self.senx();
    let seny = self.seny();
    let senz = self.senz();
    let rcs = self.rcs();
    let rcsUnc = self.rcsUnc();
    let orthogonalRcs = self.orthogonalRcs();
    let orthogonalRcsUnc = self.orthogonalRcsUnc();
    let snr = self.snr();
    let beam = self.beam();
    let timingBias = self.timingBias();
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let senReferenceFrame = self.senReferenceFrame();
    let descriptor = self.descriptor().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    RadarObservation_AbridgedT {
      id,
      classificationMarking,
      obTime,
      idOnOrbit,
      idSensor,
      satNo,
      taskId,
      transactionId,
      trackId,
      obPosition,
      origObjectId,
      origSensorId,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      range,
      rangeAccel,
      rangeAccelUnc,
      rangeUnc,
      rangeBias,
      rangeRate,
      rangeRateUnc,
      doppler,
      dopplerUnc,
      ra,
      declination,
      x,
      y,
      z,
      xvel,
      yvel,
      zvel,
      senx,
      seny,
      senz,
      rcs,
      rcsUnc,
      orthogonalRcs,
      orthogonalRcsUnc,
      snr,
      beam,
      timingBias,
      rawFileURI,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      senReferenceFrame,
      descriptor,
      origNetwork,
      sourceDL,
      type_,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RADAROBSERVATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_OBTIME, None)}
  }
  /// Unique identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_IDONORBIT, None)}
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_IDSENSOR, None)}
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RadarObservation_Abridged::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn taskId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_TASKID, None)}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_TRANSACTIONID, None)}
  }
  /// Optional identifier of the track to which this observation belongs.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_TRACKID, None)}
  }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn obPosition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_OBPOSITION, None)}
  }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_ORIGOBJECTID, None)}
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_ORIGSENSORID, None)}
  }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn uct(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(RadarObservation_Abridged::VT_UCT, Some(false)).unwrap()}
  }
  /// azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_AZIMUTH, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_AZIMUTHUNC, Some(0.0)).unwrap()}
  }
  /// Sensor azimuth angle bias in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_AZIMUTHBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_AZIMUTHRATE, Some(0.0)).unwrap()}
  }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_ELEVATION, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_ELEVATIONUNC, Some(0.0)).unwrap()}
  }
  /// Sensor elevation bias in degrees.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_ELEVATIONBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_ELEVATIONRATE, Some(0.0)).unwrap()}
  }
  /// Target range in km.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn range(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RANGE, Some(0.0)).unwrap()}
  }
  /// Range accelaration in km/s2.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeAccel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RANGEACCEL, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the range acceleration measurement, in kilometers/(second^2).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeAccelUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RANGEACCELUNC, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the range measurement, in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RANGEUNC, Some(0.0)).unwrap()}
  }
  /// Sensor range bias in km.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RANGEBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight range in km/sec.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RANGERATE, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the range rate measurement, in kilometers/second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rangeRateUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RANGERATEUNC, Some(0.0)).unwrap()}
  }
  /// Corrected doppler measurement in meters per second.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn doppler(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_DOPPLER, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the corrected doppler measurement, in meters/second.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dopplerUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_DOPPLERUNC, Some(0.0)).unwrap()}
  }
  /// Line of sight right ascension in degrees and J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ra(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RA, Some(0.0)).unwrap()}
  }
  /// Line of sight declination angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_DECLINATION, Some(0.0)).unwrap()}
  }
  /// X position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn x(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_X, Some(0.0)).unwrap()}
  }
  /// Y position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn y(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_Y, Some(0.0)).unwrap()}
  }
  /// Z position of target in km in J2000 coordinate frame.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn z(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_Z, Some(0.0)).unwrap()}
  }
  /// X velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn xvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_XVEL, Some(0.0)).unwrap()}
  }
  /// Y velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn yvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_YVEL, Some(0.0)).unwrap()}
  }
  /// Z velocity of target in km/sec in J2000 coordinate frame.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_ZVEL, Some(0.0)).unwrap()}
  }
  /// Sensor x position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senx(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_SENX, Some(0.0)).unwrap()}
  }
  /// Sensor y position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 40.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seny(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_SENY, Some(0.0)).unwrap()}
  }
  /// Sensor z position in km at obTime (if mobile/onorbit) in the specified senReferenceFrame.  If senReferenceFrame is null then J2000 should be assumed.
  /// Example: /// Example: 35.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_SENZ, Some(0.0)).unwrap()}
  }
  /// Radar cross section in meters squared for polarization principal.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcs(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RCS, Some(0.0)).unwrap()}
  }
  /// one sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcsUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_RCSUNC, Some(0.0)).unwrap()}
  }
  /// Radar cross section in meters squared for orthogonal polarization.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn orthogonalRcs(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_ORTHOGONALRCS, Some(0.0)).unwrap()}
  }
  /// one sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn orthogonalRcsUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_ORTHOGONALRCSUNC, Some(0.0)).unwrap()}
  }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn snr(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_SNR, Some(0.0)).unwrap()}
  }
  /// ID of the beam that produced this observation.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn beam(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_BEAM, Some(0.0)).unwrap()}
  }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn timingBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RadarObservation_Abridged::VT_TIMINGBIAS, Some(0.0)).unwrap()}
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: rawFileURI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_RAWFILEURI, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> RadarObservation_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RadarObservation_Abridged_dataMode_Enum>(RadarObservation_Abridged::VT_DATAMODE, Some(RadarObservation_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_CREATEDBY, None)}
  }
  /// The reference frame of the observing sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn senReferenceFrame(&self) -> RadarObservation_Abridged_senReferenceFrame_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RadarObservation_Abridged_senReferenceFrame_Enum>(RadarObservation_Abridged::VT_SENREFERENCEFRAME, Some(RadarObservation_Abridged_senReferenceFrame_Enum::J2000)).unwrap()}
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn descriptor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_DESCRIPTOR, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_ORIGNETWORK, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_SOURCEDL, None)}
  }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: RADAR
  /// Constraints: No constraints specified.
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RadarObservation_Abridged::VT_TYPE_, None)}
  }
}

impl flatbuffers::Verifiable for RadarObservation_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obTime", Self::VT_OBTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("taskId", Self::VT_TASKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trackId", Self::VT_TRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obPosition", Self::VT_OBPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<bool>("uct", Self::VT_UCT, false)?
     .visit_field::<f64>("azimuth", Self::VT_AZIMUTH, false)?
     .visit_field::<f64>("azimuthUnc", Self::VT_AZIMUTHUNC, false)?
     .visit_field::<f64>("azimuthBias", Self::VT_AZIMUTHBIAS, false)?
     .visit_field::<f64>("azimuthRate", Self::VT_AZIMUTHRATE, false)?
     .visit_field::<f64>("elevation", Self::VT_ELEVATION, false)?
     .visit_field::<f64>("elevationUnc", Self::VT_ELEVATIONUNC, false)?
     .visit_field::<f64>("elevationBias", Self::VT_ELEVATIONBIAS, false)?
     .visit_field::<f64>("elevationRate", Self::VT_ELEVATIONRATE, false)?
     .visit_field::<f64>("range", Self::VT_RANGE, false)?
     .visit_field::<f64>("rangeAccel", Self::VT_RANGEACCEL, false)?
     .visit_field::<f64>("rangeAccelUnc", Self::VT_RANGEACCELUNC, false)?
     .visit_field::<f64>("rangeUnc", Self::VT_RANGEUNC, false)?
     .visit_field::<f64>("rangeBias", Self::VT_RANGEBIAS, false)?
     .visit_field::<f64>("rangeRate", Self::VT_RANGERATE, false)?
     .visit_field::<f64>("rangeRateUnc", Self::VT_RANGERATEUNC, false)?
     .visit_field::<f64>("doppler", Self::VT_DOPPLER, false)?
     .visit_field::<f64>("dopplerUnc", Self::VT_DOPPLERUNC, false)?
     .visit_field::<f64>("ra", Self::VT_RA, false)?
     .visit_field::<f64>("declination", Self::VT_DECLINATION, false)?
     .visit_field::<f64>("x", Self::VT_X, false)?
     .visit_field::<f64>("y", Self::VT_Y, false)?
     .visit_field::<f64>("z", Self::VT_Z, false)?
     .visit_field::<f64>("xvel", Self::VT_XVEL, false)?
     .visit_field::<f64>("yvel", Self::VT_YVEL, false)?
     .visit_field::<f64>("zvel", Self::VT_ZVEL, false)?
     .visit_field::<f64>("senx", Self::VT_SENX, false)?
     .visit_field::<f64>("seny", Self::VT_SENY, false)?
     .visit_field::<f64>("senz", Self::VT_SENZ, false)?
     .visit_field::<f64>("rcs", Self::VT_RCS, false)?
     .visit_field::<f64>("rcsUnc", Self::VT_RCSUNC, false)?
     .visit_field::<f64>("orthogonalRcs", Self::VT_ORTHOGONALRCS, false)?
     .visit_field::<f64>("orthogonalRcsUnc", Self::VT_ORTHOGONALRCSUNC, false)?
     .visit_field::<f64>("snr", Self::VT_SNR, false)?
     .visit_field::<f64>("beam", Self::VT_BEAM, false)?
     .visit_field::<f64>("timingBias", Self::VT_TIMINGBIAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<RadarObservation_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<RadarObservation_Abridged_senReferenceFrame_Enum>("senReferenceFrame", Self::VT_SENREFERENCEFRAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("descriptor", Self::VT_DESCRIPTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .finish();
    Ok(())
  }
}
pub struct RadarObservation_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub taskId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obPosition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uct: bool,
    pub azimuth: f64,
    pub azimuthUnc: f64,
    pub azimuthBias: f64,
    pub azimuthRate: f64,
    pub elevation: f64,
    pub elevationUnc: f64,
    pub elevationBias: f64,
    pub elevationRate: f64,
    pub range: f64,
    pub rangeAccel: f64,
    pub rangeAccelUnc: f64,
    pub rangeUnc: f64,
    pub rangeBias: f64,
    pub rangeRate: f64,
    pub rangeRateUnc: f64,
    pub doppler: f64,
    pub dopplerUnc: f64,
    pub ra: f64,
    pub declination: f64,
    pub x: f64,
    pub y: f64,
    pub z: f64,
    pub xvel: f64,
    pub yvel: f64,
    pub zvel: f64,
    pub senx: f64,
    pub seny: f64,
    pub senz: f64,
    pub rcs: f64,
    pub rcsUnc: f64,
    pub orthogonalRcs: f64,
    pub orthogonalRcsUnc: f64,
    pub snr: f64,
    pub beam: f64,
    pub timingBias: f64,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: RadarObservation_Abridged_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub senReferenceFrame: RadarObservation_Abridged_senReferenceFrame_Enum,
    pub descriptor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RadarObservation_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    RadarObservation_AbridgedArgs {
      id: None,
      classificationMarking: None,
      obTime: None,
      idOnOrbit: None,
      idSensor: None,
      satNo: 0,
      taskId: None,
      transactionId: None,
      trackId: None,
      obPosition: None,
      origObjectId: None,
      origSensorId: None,
      uct: false,
      azimuth: 0.0,
      azimuthUnc: 0.0,
      azimuthBias: 0.0,
      azimuthRate: 0.0,
      elevation: 0.0,
      elevationUnc: 0.0,
      elevationBias: 0.0,
      elevationRate: 0.0,
      range: 0.0,
      rangeAccel: 0.0,
      rangeAccelUnc: 0.0,
      rangeUnc: 0.0,
      rangeBias: 0.0,
      rangeRate: 0.0,
      rangeRateUnc: 0.0,
      doppler: 0.0,
      dopplerUnc: 0.0,
      ra: 0.0,
      declination: 0.0,
      x: 0.0,
      y: 0.0,
      z: 0.0,
      xvel: 0.0,
      yvel: 0.0,
      zvel: 0.0,
      senx: 0.0,
      seny: 0.0,
      senz: 0.0,
      rcs: 0.0,
      rcsUnc: 0.0,
      orthogonalRcs: 0.0,
      orthogonalRcsUnc: 0.0,
      snr: 0.0,
      beam: 0.0,
      timingBias: 0.0,
      rawFileURI: None,
      source: None,
      origin: None,
      dataMode: RadarObservation_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      senReferenceFrame: RadarObservation_Abridged_senReferenceFrame_Enum::J2000,
      descriptor: None,
      origNetwork: None,
      sourceDL: None,
      type_: None,
    }
  }
}

pub struct RadarObservation_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RadarObservation_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_obTime(&mut self, obTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_OBTIME, obTime);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(RadarObservation_Abridged::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_taskId(&mut self, taskId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_TASKID, taskId);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn add_trackId(&mut self, trackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_TRACKID, trackId);
  }
  #[inline]
  pub fn add_obPosition(&mut self, obPosition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_OBPOSITION, obPosition);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_uct(&mut self, uct: bool) {
    self.fbb_.push_slot::<bool>(RadarObservation_Abridged::VT_UCT, uct, false);
  }
  #[inline]
  pub fn add_azimuth(&mut self, azimuth: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_AZIMUTH, azimuth, 0.0);
  }
  #[inline]
  pub fn add_azimuthUnc(&mut self, azimuthUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_AZIMUTHUNC, azimuthUnc, 0.0);
  }
  #[inline]
  pub fn add_azimuthBias(&mut self, azimuthBias: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_AZIMUTHBIAS, azimuthBias, 0.0);
  }
  #[inline]
  pub fn add_azimuthRate(&mut self, azimuthRate: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_AZIMUTHRATE, azimuthRate, 0.0);
  }
  #[inline]
  pub fn add_elevation(&mut self, elevation: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_ELEVATION, elevation, 0.0);
  }
  #[inline]
  pub fn add_elevationUnc(&mut self, elevationUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_ELEVATIONUNC, elevationUnc, 0.0);
  }
  #[inline]
  pub fn add_elevationBias(&mut self, elevationBias: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_ELEVATIONBIAS, elevationBias, 0.0);
  }
  #[inline]
  pub fn add_elevationRate(&mut self, elevationRate: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_ELEVATIONRATE, elevationRate, 0.0);
  }
  #[inline]
  pub fn add_range(&mut self, range: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RANGE, range, 0.0);
  }
  #[inline]
  pub fn add_rangeAccel(&mut self, rangeAccel: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RANGEACCEL, rangeAccel, 0.0);
  }
  #[inline]
  pub fn add_rangeAccelUnc(&mut self, rangeAccelUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RANGEACCELUNC, rangeAccelUnc, 0.0);
  }
  #[inline]
  pub fn add_rangeUnc(&mut self, rangeUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RANGEUNC, rangeUnc, 0.0);
  }
  #[inline]
  pub fn add_rangeBias(&mut self, rangeBias: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RANGEBIAS, rangeBias, 0.0);
  }
  #[inline]
  pub fn add_rangeRate(&mut self, rangeRate: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RANGERATE, rangeRate, 0.0);
  }
  #[inline]
  pub fn add_rangeRateUnc(&mut self, rangeRateUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RANGERATEUNC, rangeRateUnc, 0.0);
  }
  #[inline]
  pub fn add_doppler(&mut self, doppler: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_DOPPLER, doppler, 0.0);
  }
  #[inline]
  pub fn add_dopplerUnc(&mut self, dopplerUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_DOPPLERUNC, dopplerUnc, 0.0);
  }
  #[inline]
  pub fn add_ra(&mut self, ra: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RA, ra, 0.0);
  }
  #[inline]
  pub fn add_declination(&mut self, declination: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_DECLINATION, declination, 0.0);
  }
  #[inline]
  pub fn add_x(&mut self, x: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_X, x, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn add_z(&mut self, z: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_Z, z, 0.0);
  }
  #[inline]
  pub fn add_xvel(&mut self, xvel: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_XVEL, xvel, 0.0);
  }
  #[inline]
  pub fn add_yvel(&mut self, yvel: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_YVEL, yvel, 0.0);
  }
  #[inline]
  pub fn add_zvel(&mut self, zvel: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_ZVEL, zvel, 0.0);
  }
  #[inline]
  pub fn add_senx(&mut self, senx: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_SENX, senx, 0.0);
  }
  #[inline]
  pub fn add_seny(&mut self, seny: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_SENY, seny, 0.0);
  }
  #[inline]
  pub fn add_senz(&mut self, senz: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_SENZ, senz, 0.0);
  }
  #[inline]
  pub fn add_rcs(&mut self, rcs: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RCS, rcs, 0.0);
  }
  #[inline]
  pub fn add_rcsUnc(&mut self, rcsUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_RCSUNC, rcsUnc, 0.0);
  }
  #[inline]
  pub fn add_orthogonalRcs(&mut self, orthogonalRcs: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_ORTHOGONALRCS, orthogonalRcs, 0.0);
  }
  #[inline]
  pub fn add_orthogonalRcsUnc(&mut self, orthogonalRcsUnc: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_ORTHOGONALRCSUNC, orthogonalRcsUnc, 0.0);
  }
  #[inline]
  pub fn add_snr(&mut self, snr: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_SNR, snr, 0.0);
  }
  #[inline]
  pub fn add_beam(&mut self, beam: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_BEAM, beam, 0.0);
  }
  #[inline]
  pub fn add_timingBias(&mut self, timingBias: f64) {
    self.fbb_.push_slot::<f64>(RadarObservation_Abridged::VT_TIMINGBIAS, timingBias, 0.0);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: RadarObservation_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<RadarObservation_Abridged_dataMode_Enum>(RadarObservation_Abridged::VT_DATAMODE, dataMode, RadarObservation_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_senReferenceFrame(&mut self, senReferenceFrame: RadarObservation_Abridged_senReferenceFrame_Enum) {
    self.fbb_.push_slot::<RadarObservation_Abridged_senReferenceFrame_Enum>(RadarObservation_Abridged::VT_SENREFERENCEFRAME, senReferenceFrame, RadarObservation_Abridged_senReferenceFrame_Enum::J2000);
  }
  #[inline]
  pub fn add_descriptor(&mut self, descriptor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_DESCRIPTOR, descriptor);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RadarObservation_Abridged::VT_TYPE_, type_);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RadarObservation_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RadarObservation_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RadarObservation_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RadarObservation_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RadarObservation_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("obTime", &self.obTime());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("idSensor", &self.idSensor());
      ds.field("satNo", &self.satNo());
      ds.field("taskId", &self.taskId());
      ds.field("transactionId", &self.transactionId());
      ds.field("trackId", &self.trackId());
      ds.field("obPosition", &self.obPosition());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("uct", &self.uct());
      ds.field("azimuth", &self.azimuth());
      ds.field("azimuthUnc", &self.azimuthUnc());
      ds.field("azimuthBias", &self.azimuthBias());
      ds.field("azimuthRate", &self.azimuthRate());
      ds.field("elevation", &self.elevation());
      ds.field("elevationUnc", &self.elevationUnc());
      ds.field("elevationBias", &self.elevationBias());
      ds.field("elevationRate", &self.elevationRate());
      ds.field("range", &self.range());
      ds.field("rangeAccel", &self.rangeAccel());
      ds.field("rangeAccelUnc", &self.rangeAccelUnc());
      ds.field("rangeUnc", &self.rangeUnc());
      ds.field("rangeBias", &self.rangeBias());
      ds.field("rangeRate", &self.rangeRate());
      ds.field("rangeRateUnc", &self.rangeRateUnc());
      ds.field("doppler", &self.doppler());
      ds.field("dopplerUnc", &self.dopplerUnc());
      ds.field("ra", &self.ra());
      ds.field("declination", &self.declination());
      ds.field("x", &self.x());
      ds.field("y", &self.y());
      ds.field("z", &self.z());
      ds.field("xvel", &self.xvel());
      ds.field("yvel", &self.yvel());
      ds.field("zvel", &self.zvel());
      ds.field("senx", &self.senx());
      ds.field("seny", &self.seny());
      ds.field("senz", &self.senz());
      ds.field("rcs", &self.rcs());
      ds.field("rcsUnc", &self.rcsUnc());
      ds.field("orthogonalRcs", &self.orthogonalRcs());
      ds.field("orthogonalRcsUnc", &self.orthogonalRcsUnc());
      ds.field("snr", &self.snr());
      ds.field("beam", &self.beam());
      ds.field("timingBias", &self.timingBias());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("senReferenceFrame", &self.senReferenceFrame());
      ds.field("descriptor", &self.descriptor());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("type_", &self.type_());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RadarObservation_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub obTime: Option<String>,
  pub idOnOrbit: Option<String>,
  pub idSensor: Option<String>,
  pub satNo: i32,
  pub taskId: Option<String>,
  pub transactionId: Option<String>,
  pub trackId: Option<String>,
  pub obPosition: Option<String>,
  pub origObjectId: Option<String>,
  pub origSensorId: Option<String>,
  pub uct: bool,
  pub azimuth: f64,
  pub azimuthUnc: f64,
  pub azimuthBias: f64,
  pub azimuthRate: f64,
  pub elevation: f64,
  pub elevationUnc: f64,
  pub elevationBias: f64,
  pub elevationRate: f64,
  pub range: f64,
  pub rangeAccel: f64,
  pub rangeAccelUnc: f64,
  pub rangeUnc: f64,
  pub rangeBias: f64,
  pub rangeRate: f64,
  pub rangeRateUnc: f64,
  pub doppler: f64,
  pub dopplerUnc: f64,
  pub ra: f64,
  pub declination: f64,
  pub x: f64,
  pub y: f64,
  pub z: f64,
  pub xvel: f64,
  pub yvel: f64,
  pub zvel: f64,
  pub senx: f64,
  pub seny: f64,
  pub senz: f64,
  pub rcs: f64,
  pub rcsUnc: f64,
  pub orthogonalRcs: f64,
  pub orthogonalRcsUnc: f64,
  pub snr: f64,
  pub beam: f64,
  pub timingBias: f64,
  pub rawFileURI: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: RadarObservation_Abridged_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub senReferenceFrame: RadarObservation_Abridged_senReferenceFrame_Enum,
  pub descriptor: Option<String>,
  pub origNetwork: Option<String>,
  pub sourceDL: Option<String>,
  pub type_: Option<String>,
}
impl Default for RadarObservation_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      obTime: None,
      idOnOrbit: None,
      idSensor: None,
      satNo: 0,
      taskId: None,
      transactionId: None,
      trackId: None,
      obPosition: None,
      origObjectId: None,
      origSensorId: None,
      uct: false,
      azimuth: 0.0,
      azimuthUnc: 0.0,
      azimuthBias: 0.0,
      azimuthRate: 0.0,
      elevation: 0.0,
      elevationUnc: 0.0,
      elevationBias: 0.0,
      elevationRate: 0.0,
      range: 0.0,
      rangeAccel: 0.0,
      rangeAccelUnc: 0.0,
      rangeUnc: 0.0,
      rangeBias: 0.0,
      rangeRate: 0.0,
      rangeRateUnc: 0.0,
      doppler: 0.0,
      dopplerUnc: 0.0,
      ra: 0.0,
      declination: 0.0,
      x: 0.0,
      y: 0.0,
      z: 0.0,
      xvel: 0.0,
      yvel: 0.0,
      zvel: 0.0,
      senx: 0.0,
      seny: 0.0,
      senz: 0.0,
      rcs: 0.0,
      rcsUnc: 0.0,
      orthogonalRcs: 0.0,
      orthogonalRcsUnc: 0.0,
      snr: 0.0,
      beam: 0.0,
      timingBias: 0.0,
      rawFileURI: None,
      source: None,
      origin: None,
      dataMode: RadarObservation_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      senReferenceFrame: RadarObservation_Abridged_senReferenceFrame_Enum::J2000,
      descriptor: None,
      origNetwork: None,
      sourceDL: None,
      type_: None,
    }
  }
}
impl RadarObservation_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RadarObservation_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obTime = self.obTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let taskId = self.taskId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackId = self.trackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obPosition = self.obPosition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let uct = self.uct;
    let azimuth = self.azimuth;
    let azimuthUnc = self.azimuthUnc;
    let azimuthBias = self.azimuthBias;
    let azimuthRate = self.azimuthRate;
    let elevation = self.elevation;
    let elevationUnc = self.elevationUnc;
    let elevationBias = self.elevationBias;
    let elevationRate = self.elevationRate;
    let range = self.range;
    let rangeAccel = self.rangeAccel;
    let rangeAccelUnc = self.rangeAccelUnc;
    let rangeUnc = self.rangeUnc;
    let rangeBias = self.rangeBias;
    let rangeRate = self.rangeRate;
    let rangeRateUnc = self.rangeRateUnc;
    let doppler = self.doppler;
    let dopplerUnc = self.dopplerUnc;
    let ra = self.ra;
    let declination = self.declination;
    let x = self.x;
    let y = self.y;
    let z = self.z;
    let xvel = self.xvel;
    let yvel = self.yvel;
    let zvel = self.zvel;
    let senx = self.senx;
    let seny = self.seny;
    let senz = self.senz;
    let rcs = self.rcs;
    let rcsUnc = self.rcsUnc;
    let orthogonalRcs = self.orthogonalRcs;
    let orthogonalRcsUnc = self.orthogonalRcsUnc;
    let snr = self.snr;
    let beam = self.beam;
    let timingBias = self.timingBias;
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let senReferenceFrame = self.senReferenceFrame;
    let descriptor = self.descriptor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    RadarObservation_Abridged::create(_fbb, &RadarObservation_AbridgedArgs{
      id,
      classificationMarking,
      obTime,
      idOnOrbit,
      idSensor,
      satNo,
      taskId,
      transactionId,
      trackId,
      obPosition,
      origObjectId,
      origSensorId,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      range,
      rangeAccel,
      rangeAccelUnc,
      rangeUnc,
      rangeBias,
      rangeRate,
      rangeRateUnc,
      doppler,
      dopplerUnc,
      ra,
      declination,
      x,
      y,
      z,
      xvel,
      yvel,
      zvel,
      senx,
      seny,
      senz,
      rcs,
      rcsUnc,
      orthogonalRcs,
      orthogonalRcsUnc,
      snr,
      beam,
      timingBias,
      rawFileURI,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      senReferenceFrame,
      descriptor,
      origNetwork,
      sourceDL,
      type_,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RadarObservation_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_radar_observation_abridged_unchecked`.
pub fn root_as_radar_observation_abridged(buf: &[u8]) -> Result<RadarObservation_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RadarObservation_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RadarObservation_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_radar_observation_abridged_unchecked`.
pub fn size_prefixed_root_as_radar_observation_abridged(buf: &[u8]) -> Result<RadarObservation_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RadarObservation_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RadarObservation_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_radar_observation_abridged_unchecked`.
pub fn root_as_radar_observation_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RadarObservation_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RadarObservation_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RadarObservation_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_radar_observation_abridged_unchecked`.
pub fn size_prefixed_root_as_radar_observation_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RadarObservation_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RadarObservation_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RadarObservation_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RadarObservation_Abridged`.
pub unsafe fn root_as_radar_observation_abridged_unchecked(buf: &[u8]) -> RadarObservation_Abridged {
  flatbuffers::root_unchecked::<RadarObservation_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RadarObservation_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RadarObservation_Abridged`.
pub unsafe fn size_prefixed_root_as_radar_observation_abridged_unchecked(buf: &[u8]) -> RadarObservation_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<RadarObservation_Abridged>(buf)
}
pub const RADAR_OBSERVATION_ABRIDGED_IDENTIFIER: &str = "RADA";

#[inline]
pub fn radar_observation_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RADAR_OBSERVATION_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn radar_observation_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RADAR_OBSERVATION_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_radar_observation_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RadarObservation_Abridged<'a>>) {
  fbb.finish(root, Some(RADAR_OBSERVATION_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_radar_observation_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RadarObservation_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(RADAR_OBSERVATION_ABRIDGED_IDENTIFIER));
}
