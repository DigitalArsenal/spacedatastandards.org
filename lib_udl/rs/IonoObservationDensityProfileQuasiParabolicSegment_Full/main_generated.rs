// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationDensityProfileQuasiParabolicSegment_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A quasi-parabolic segment is the best-fit 3-parameter quasi-parabolas defined via A, B, C coefficients, f^2=A/r^2+B/r+C‚Äù. Usually 3 groups for E, F1, and F2 layers, but additional segments may be used to improve accuracy.
pub struct IonoObservationDensityProfileQuasiParabolicSegment_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationDensityProfileQuasiParabolicSegment_Full<'a> {
  type Inner = IonoObservationDensityProfileQuasiParabolicSegment_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationDensityProfileQuasiParabolicSegment_Full<'a> {
  pub const VT_INDEX: flatbuffers::VOffsetT = 4;
  pub const VT_RB: flatbuffers::VOffsetT = 6;
  pub const VT_RE: flatbuffers::VOffsetT = 8;
  pub const VT_A: flatbuffers::VOffsetT = 10;
  pub const VT_B: flatbuffers::VOffsetT = 12;
  pub const VT_C: flatbuffers::VOffsetT = 14;
  pub const VT_ERROR: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationDensityProfileQuasiParabolicSegment_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationDensityProfileQuasiParabolicSegment_FullArgs
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileQuasiParabolicSegment_Full<'bldr>> {
    let mut builder = IonoObservationDensityProfileQuasiParabolicSegment_FullBuilder::new(_fbb);
    builder.add_error(args.error);
    builder.add_c(args.c);
    builder.add_b(args.b);
    builder.add_a(args.a);
    builder.add_re(args.re);
    builder.add_rb(args.rb);
    builder.add_index(args.index);
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationDensityProfileQuasiParabolicSegment_FullT {
    let index = self.index();
    let rb = self.rb();
    let re = self.re();
    let a = self.a();
    let b = self.b();
    let c = self.c();
    let error = self.error();
    IonoObservationDensityProfileQuasiParabolicSegment_FullT {
      index,
      rb,
      re,
      a,
      b,
      c,
      error,
    }
  }

  /// The index of this segment in the list, from 1 to NumSegments.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn index(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_INDEX, Some(0)).unwrap()}
  }
  /// Starting range of the segment, in kilometers from the Earth's center.
  /// Example: /// Example: 6460.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rb(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_RB, Some(0.0)).unwrap()}
  }
  /// Ending range of the segment, in kilometers from the Earth's center.
  /// Example: /// Example: 6480.001
  /// Constraints: No constraints specified.
  #[inline]
  pub fn re(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_RE, Some(0.0)).unwrap()}
  }
  /// Coefficient A.
  /// Example: /// Example: -550273940000
  /// Constraints: No constraints specified.
  #[inline]
  pub fn a(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_A, Some(0.0)).unwrap()}
  }
  /// Coefficient B.
  /// Example: /// Example: 169837632
  /// Constraints: No constraints specified.
  #[inline]
  pub fn b(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_B, Some(0.0)).unwrap()}
  }
  /// Coefficient C.
  /// Example: /// Example: 13104.63
  /// Constraints: No constraints specified.
  #[inline]
  pub fn c(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_C, Some(0.0)).unwrap()}
  }
  /// Best-fit error.
  /// Example: /// Example: 0.0016
  /// Constraints: No constraints specified.
  #[inline]
  pub fn error(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_ERROR, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IonoObservationDensityProfileQuasiParabolicSegment_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("index", Self::VT_INDEX, false)?
     .visit_field::<f64>("rb", Self::VT_RB, false)?
     .visit_field::<f64>("re", Self::VT_RE, false)?
     .visit_field::<f64>("a", Self::VT_A, false)?
     .visit_field::<f64>("b", Self::VT_B, false)?
     .visit_field::<f64>("c", Self::VT_C, false)?
     .visit_field::<f64>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationDensityProfileQuasiParabolicSegment_FullArgs {
    pub index: i32,
    pub rb: f64,
    pub re: f64,
    pub a: f64,
    pub b: f64,
    pub c: f64,
    pub error: f64,
}
impl<'a> Default for IonoObservationDensityProfileQuasiParabolicSegment_FullArgs {
  #[inline]
  fn default() -> Self {
    IonoObservationDensityProfileQuasiParabolicSegment_FullArgs {
      index: 0,
      rb: 0.0,
      re: 0.0,
      a: 0.0,
      b: 0.0,
      c: 0.0,
      error: 0.0,
    }
  }
}

pub struct IonoObservationDensityProfileQuasiParabolicSegment_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationDensityProfileQuasiParabolicSegment_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_index(&mut self, index: i32) {
    self.fbb_.push_slot::<i32>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_INDEX, index, 0);
  }
  #[inline]
  pub fn add_rb(&mut self, rb: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_RB, rb, 0.0);
  }
  #[inline]
  pub fn add_re(&mut self, re: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_RE, re, 0.0);
  }
  #[inline]
  pub fn add_a(&mut self, a: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_A, a, 0.0);
  }
  #[inline]
  pub fn add_b(&mut self, b: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_B, b, 0.0);
  }
  #[inline]
  pub fn add_c(&mut self, c: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_C, c, 0.0);
  }
  #[inline]
  pub fn add_error(&mut self, error: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileQuasiParabolicSegment_Full::VT_ERROR, error, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationDensityProfileQuasiParabolicSegment_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationDensityProfileQuasiParabolicSegment_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationDensityProfileQuasiParabolicSegment_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationDensityProfileQuasiParabolicSegment_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationDensityProfileQuasiParabolicSegment_Full");
      ds.field("index", &self.index());
      ds.field("rb", &self.rb());
      ds.field("re", &self.re());
      ds.field("a", &self.a());
      ds.field("b", &self.b());
      ds.field("c", &self.c());
      ds.field("error", &self.error());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationDensityProfileQuasiParabolicSegment_FullT {
  pub index: i32,
  pub rb: f64,
  pub re: f64,
  pub a: f64,
  pub b: f64,
  pub c: f64,
  pub error: f64,
}
impl Default for IonoObservationDensityProfileQuasiParabolicSegment_FullT {
  fn default() -> Self {
    Self {
      index: 0,
      rb: 0.0,
      re: 0.0,
      a: 0.0,
      b: 0.0,
      c: 0.0,
      error: 0.0,
    }
  }
}
impl IonoObservationDensityProfileQuasiParabolicSegment_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileQuasiParabolicSegment_Full<'b>> {
    let index = self.index;
    let rb = self.rb;
    let re = self.re;
    let a = self.a;
    let b = self.b;
    let c = self.c;
    let error = self.error;
    IonoObservationDensityProfileQuasiParabolicSegment_Full::create(_fbb, &IonoObservationDensityProfileQuasiParabolicSegment_FullArgs{
      index,
      rb,
      re,
      a,
      b,
      c,
      error,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationDensityProfileQuasiParabolicSegment_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_quasi_parabolic_segment_full_unchecked`.
pub fn root_as_iono_observation_density_profile_quasi_parabolic_segment_full(buf: &[u8]) -> Result<IonoObservationDensityProfileQuasiParabolicSegment_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationDensityProfileQuasiParabolicSegment_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationDensityProfileQuasiParabolicSegment_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_density_profile_quasi_parabolic_segment_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_quasi_parabolic_segment_full(buf: &[u8]) -> Result<IonoObservationDensityProfileQuasiParabolicSegment_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationDensityProfileQuasiParabolicSegment_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationDensityProfileQuasiParabolicSegment_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_quasi_parabolic_segment_full_unchecked`.
pub fn root_as_iono_observation_density_profile_quasi_parabolic_segment_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileQuasiParabolicSegment_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationDensityProfileQuasiParabolicSegment_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationDensityProfileQuasiParabolicSegment_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_quasi_parabolic_segment_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_quasi_parabolic_segment_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileQuasiParabolicSegment_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationDensityProfileQuasiParabolicSegment_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationDensityProfileQuasiParabolicSegment_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationDensityProfileQuasiParabolicSegment_Full`.
pub unsafe fn root_as_iono_observation_density_profile_quasi_parabolic_segment_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileQuasiParabolicSegment_Full {
  flatbuffers::root_unchecked::<IonoObservationDensityProfileQuasiParabolicSegment_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationDensityProfileQuasiParabolicSegment_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationDensityProfileQuasiParabolicSegment_Full`.
pub unsafe fn size_prefixed_root_as_iono_observation_density_profile_quasi_parabolic_segment_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileQuasiParabolicSegment_Full {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationDensityProfileQuasiParabolicSegment_Full>(buf)
}
pub const IONO_OBSERVATION_DENSITY_PROFILE_QUASI_PARABOLIC_SEGMENT_FULL_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_density_profile_quasi_parabolic_segment_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_QUASI_PARABOLIC_SEGMENT_FULL_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_density_profile_quasi_parabolic_segment_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_QUASI_PARABOLIC_SEGMENT_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_density_profile_quasi_parabolic_segment_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationDensityProfileQuasiParabolicSegment_Full<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_QUASI_PARABOLIC_SEGMENT_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_density_profile_quasi_parabolic_segment_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationDensityProfileQuasiParabolicSegment_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_QUASI_PARABOLIC_SEGMENT_FULL_IDENTIFIER));
}
