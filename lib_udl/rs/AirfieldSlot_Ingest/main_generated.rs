// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRFIELD_SLOT_INGEST_TYPE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRFIELD_SLOT_INGEST_TYPE_ENUM: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRFIELD_SLOT_INGEST_TYPE_ENUM: [AirfieldSlot_Ingest_type_Enum; 5] = [
  AirfieldSlot_Ingest_type_Enum::WORKING,
  AirfieldSlot_Ingest_type_Enum::PARKING,
  AirfieldSlot_Ingest_type_Enum::TAKEOFF,
  AirfieldSlot_Ingest_type_Enum::LANDING,
  AirfieldSlot_Ingest_type_Enum::OTHER,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AirfieldSlot_Ingest_type_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AirfieldSlot_Ingest_type_Enum {
  /// No description available.
  pub const WORKING: Self = Self(0);
  /// No description available.
  pub const PARKING: Self = Self(1);
  /// No description available.
  pub const TAKEOFF: Self = Self(2);
  /// No description available.
  pub const LANDING: Self = Self(3);
  /// No description available.
  pub const OTHER: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::WORKING,
    Self::PARKING,
    Self::TAKEOFF,
    Self::LANDING,
    Self::OTHER,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::WORKING => Some("WORKING"),
      Self::PARKING => Some("PARKING"),
      Self::TAKEOFF => Some("TAKEOFF"),
      Self::LANDING => Some("LANDING"),
      Self::OTHER => Some("OTHER"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AirfieldSlot_Ingest_type_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AirfieldSlot_Ingest_type_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AirfieldSlot_Ingest_type_Enum {
    type Output = AirfieldSlot_Ingest_type_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AirfieldSlot_Ingest_type_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AirfieldSlot_Ingest_type_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AirfieldSlot_Ingest_type_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRFIELD_SLOT_INGEST_AC_SLOT_CAT_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRFIELD_SLOT_INGEST_AC_SLOT_CAT_ENUM: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRFIELD_SLOT_INGEST_AC_SLOT_CAT_ENUM: [AirfieldSlot_Ingest_acSlotCat_Enum; 5] = [
  AirfieldSlot_Ingest_acSlotCat_Enum::WIDE,
  AirfieldSlot_Ingest_acSlotCat_Enum::NARROW,
  AirfieldSlot_Ingest_acSlotCat_Enum::HELO,
  AirfieldSlot_Ingest_acSlotCat_Enum::ALL,
  AirfieldSlot_Ingest_acSlotCat_Enum::OTHER,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AirfieldSlot_Ingest_acSlotCat_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AirfieldSlot_Ingest_acSlotCat_Enum {
  /// No description available.
  pub const WIDE: Self = Self(0);
  /// No description available.
  pub const NARROW: Self = Self(1);
  /// No description available.
  pub const HELO: Self = Self(2);
  /// No description available.
  pub const ALL: Self = Self(3);
  /// No description available.
  pub const OTHER: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::WIDE,
    Self::NARROW,
    Self::HELO,
    Self::ALL,
    Self::OTHER,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::WIDE => Some("WIDE"),
      Self::NARROW => Some("NARROW"),
      Self::HELO => Some("HELO"),
      Self::ALL => Some("ALL"),
      Self::OTHER => Some("OTHER"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AirfieldSlot_Ingest_acSlotCat_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AirfieldSlot_Ingest_acSlotCat_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AirfieldSlot_Ingest_acSlotCat_Enum {
    type Output = AirfieldSlot_Ingest_acSlotCat_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AirfieldSlot_Ingest_acSlotCat_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AirfieldSlot_Ingest_acSlotCat_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AirfieldSlot_Ingest_acSlotCat_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRFIELD_SLOT_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRFIELD_SLOT_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRFIELD_SLOT_INGEST_DATA_MODE_ENUM: [AirfieldSlot_Ingest_dataMode_Enum; 4] = [
  AirfieldSlot_Ingest_dataMode_Enum::REAL,
  AirfieldSlot_Ingest_dataMode_Enum::TEST,
  AirfieldSlot_Ingest_dataMode_Enum::SIMULATED,
  AirfieldSlot_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AirfieldSlot_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AirfieldSlot_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AirfieldSlot_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AirfieldSlot_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AirfieldSlot_Ingest_dataMode_Enum {
    type Output = AirfieldSlot_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AirfieldSlot_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AirfieldSlot_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AirfieldSlot_Ingest_dataMode_Enum {}
pub enum AirfieldSlot_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Airfield capacity data. Contains data associated with the airfieldslots available for parking, working, takeoff, and landing at the airfield, as well as the types of aircraft that can be accommodated.
pub struct AirfieldSlot_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirfieldSlot_Ingest<'a> {
  type Inner = AirfieldSlot_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirfieldSlot_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_AIRFIELDNAME: flatbuffers::VOffsetT = 8;
  pub const VT_ICAO: flatbuffers::VOffsetT = 10;
  pub const VT_IDAIRFIELD: flatbuffers::VOffsetT = 12;
  pub const VT_ALTAIRFIELDID: flatbuffers::VOffsetT = 14;
  pub const VT_NAME: flatbuffers::VOffsetT = 16;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 18;
  pub const VT_ACSLOTCAT: flatbuffers::VOffsetT = 20;
  pub const VT_CAPACITY: flatbuffers::VOffsetT = 22;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 24;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 26;
  pub const VT_MINSEPARATION: flatbuffers::VOffsetT = 28;
  pub const VT_NOTES: flatbuffers::VOffsetT = 30;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 34;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 38;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 40;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 42;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirfieldSlot_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirfieldSlot_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<AirfieldSlot_Ingest<'bldr>> {
    let mut builder = AirfieldSlot_IngestBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    builder.add_minSeparation(args.minSeparation);
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    builder.add_capacity(args.capacity);
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.altAirfieldId { builder.add_altAirfieldId(x); }
    if let Some(x) = args.idAirfield { builder.add_idAirfield(x); }
    if let Some(x) = args.icao { builder.add_icao(x); }
    if let Some(x) = args.airfieldName { builder.add_airfieldName(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_acSlotCat(args.acSlotCat);
    builder.add_type_(args.type_);
    builder.finish()
  }

  pub fn unpack(&self) -> AirfieldSlot_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let airfieldName = self.airfieldName().map(|x| {
      x.to_string()
    });
    let icao = self.icao().map(|x| {
      x.to_string()
    });
    let idAirfield = self.idAirfield().map(|x| {
      x.to_string()
    });
    let altAirfieldId = self.altAirfieldId().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let type_ = self.type_();
    let acSlotCat = self.acSlotCat();
    let capacity = self.capacity();
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let minSeparation = self.minSeparation();
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    AirfieldSlot_IngestT {
      id,
      classificationMarking,
      airfieldName,
      icao,
      idAirfield,
      altAirfieldId,
      name,
      type_,
      acSlotCat,
      capacity,
      startTime,
      endTime,
      minSeparation,
      notes,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: be831d39-1822-da9f-7ace-6cc5643397dc
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The name of the airfield where this slot is located.
  /// Example: /// Example: USAF Academy AFLD
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn airfieldName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_AIRFIELDNAME, None)}
  }
  /// The International Civil Aviation Organization (ICAO) code of the airfield.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn icao(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_ICAO, None)}
  }
  /// Unique identifier of the Airfield for which this slot information applies.
  /// Example: /// Example: 3136498f-2969-3535-1432-e984b2e2e686
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_IDAIRFIELD, None)}
  }
  /// Alternate airfield identifier provided by the source.
  /// Example: /// Example: ALT-AIRFIELD-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn altAirfieldId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_ALTAIRFIELDID, None)}
  }
  /// Name of this slot.
  /// Example: /// Example: Apron 5
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_NAME, None)}
  }
  /// Designates how this slot can be used (WORKING, PARKING, TAKEOFF, LANDING, OTHER).
  /// Example: /// Example: WORKING
  /// Constraints: Minimum length = 0, Maximum length = 7
  #[inline]
  pub fn type_(&self) -> AirfieldSlot_Ingest_type_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AirfieldSlot_Ingest_type_Enum>(AirfieldSlot_Ingest::VT_TYPE_, Some(AirfieldSlot_Ingest_type_Enum::WORKING)).unwrap()}
  }
  /// Largest category of aircraft supported in this slot (WIDE, NARROW, HELO, ALL, OTHER).
  /// Example: /// Example: WIDE
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn acSlotCat(&self) -> AirfieldSlot_Ingest_acSlotCat_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AirfieldSlot_Ingest_acSlotCat_Enum>(AirfieldSlot_Ingest::VT_ACSLOTCAT, Some(AirfieldSlot_Ingest_acSlotCat_Enum::WIDE)).unwrap()}
  }
  /// Number of aircraft that can fit in this slot at the same time.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn capacity(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirfieldSlot_Ingest::VT_CAPACITY, Some(0)).unwrap()}
  }
  /// Zulu time this slot is first available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  /// Example: /// Example: 0000Z
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_STARTTIME, None)}
  }
  /// Latest zulu time this slot is available based on daily standard hours. Not applicable to slots with type PARKING. Abnormal hours, such as holidays, should be marked via the AirfieldSlotConsumption schema.
  /// Example: /// Example: 2359Z
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_ENDTIME, None)}
  }
  /// Minimum time that must elapse between different aircraft leaving and entering this slot, in minutes.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn minSeparation(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirfieldSlot_Ingest::VT_MINSEPARATION, Some(0)).unwrap()}
  }
  /// Optional notes/comments for this airfield slot.
  /// Example: /// Example: Notes for an airfield slot.
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_NOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirfieldSlot_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AirfieldSlot_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AirfieldSlot_Ingest_dataMode_Enum>(AirfieldSlot_Ingest::VT_DATAMODE, Some(AirfieldSlot_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AirfieldSlot_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("airfieldName", Self::VT_AIRFIELDNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("icao", Self::VT_ICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idAirfield", Self::VT_IDAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altAirfieldId", Self::VT_ALTAIRFIELDID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<AirfieldSlot_Ingest_type_Enum>("type_", Self::VT_TYPE_, false)?
     .visit_field::<AirfieldSlot_Ingest_acSlotCat_Enum>("acSlotCat", Self::VT_ACSLOTCAT, false)?
     .visit_field::<i32>("capacity", Self::VT_CAPACITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<i32>("minSeparation", Self::VT_MINSEPARATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<AirfieldSlot_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct AirfieldSlot_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub airfieldName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub icao: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altAirfieldId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: AirfieldSlot_Ingest_type_Enum,
    pub acSlotCat: AirfieldSlot_Ingest_acSlotCat_Enum,
    pub capacity: i32,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub minSeparation: i32,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AirfieldSlot_Ingest_dataMode_Enum,
}
impl<'a> Default for AirfieldSlot_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirfieldSlot_IngestArgs {
      id: None,
      classificationMarking: None,
      airfieldName: None,
      icao: None,
      idAirfield: None,
      altAirfieldId: None,
      name: None,
      type_: AirfieldSlot_Ingest_type_Enum::WORKING,
      acSlotCat: AirfieldSlot_Ingest_acSlotCat_Enum::WIDE,
      capacity: 0,
      startTime: None,
      endTime: None,
      minSeparation: 0,
      notes: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: AirfieldSlot_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct AirfieldSlot_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirfieldSlot_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_airfieldName(&mut self, airfieldName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_AIRFIELDNAME, airfieldName);
  }
  #[inline]
  pub fn add_icao(&mut self, icao: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_ICAO, icao);
  }
  #[inline]
  pub fn add_idAirfield(&mut self, idAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_IDAIRFIELD, idAirfield);
  }
  #[inline]
  pub fn add_altAirfieldId(&mut self, altAirfieldId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_ALTAIRFIELDID, altAirfieldId);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_NAME, name);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: AirfieldSlot_Ingest_type_Enum) {
    self.fbb_.push_slot::<AirfieldSlot_Ingest_type_Enum>(AirfieldSlot_Ingest::VT_TYPE_, type_, AirfieldSlot_Ingest_type_Enum::WORKING);
  }
  #[inline]
  pub fn add_acSlotCat(&mut self, acSlotCat: AirfieldSlot_Ingest_acSlotCat_Enum) {
    self.fbb_.push_slot::<AirfieldSlot_Ingest_acSlotCat_Enum>(AirfieldSlot_Ingest::VT_ACSLOTCAT, acSlotCat, AirfieldSlot_Ingest_acSlotCat_Enum::WIDE);
  }
  #[inline]
  pub fn add_capacity(&mut self, capacity: i32) {
    self.fbb_.push_slot::<i32>(AirfieldSlot_Ingest::VT_CAPACITY, capacity, 0);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_minSeparation(&mut self, minSeparation: i32) {
    self.fbb_.push_slot::<i32>(AirfieldSlot_Ingest::VT_MINSEPARATION, minSeparation, 0);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirfieldSlot_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AirfieldSlot_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<AirfieldSlot_Ingest_dataMode_Enum>(AirfieldSlot_Ingest::VT_DATAMODE, dataMode, AirfieldSlot_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirfieldSlot_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirfieldSlot_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirfieldSlot_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirfieldSlot_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirfieldSlot_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("airfieldName", &self.airfieldName());
      ds.field("icao", &self.icao());
      ds.field("idAirfield", &self.idAirfield());
      ds.field("altAirfieldId", &self.altAirfieldId());
      ds.field("name", &self.name());
      ds.field("type_", &self.type_());
      ds.field("acSlotCat", &self.acSlotCat());
      ds.field("capacity", &self.capacity());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("minSeparation", &self.minSeparation());
      ds.field("notes", &self.notes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirfieldSlot_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub airfieldName: Option<String>,
  pub icao: Option<String>,
  pub idAirfield: Option<String>,
  pub altAirfieldId: Option<String>,
  pub name: Option<String>,
  pub type_: AirfieldSlot_Ingest_type_Enum,
  pub acSlotCat: AirfieldSlot_Ingest_acSlotCat_Enum,
  pub capacity: i32,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub minSeparation: i32,
  pub notes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: AirfieldSlot_Ingest_dataMode_Enum,
}
impl Default for AirfieldSlot_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      airfieldName: None,
      icao: None,
      idAirfield: None,
      altAirfieldId: None,
      name: None,
      type_: AirfieldSlot_Ingest_type_Enum::WORKING,
      acSlotCat: AirfieldSlot_Ingest_acSlotCat_Enum::WIDE,
      capacity: 0,
      startTime: None,
      endTime: None,
      minSeparation: 0,
      notes: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: AirfieldSlot_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl AirfieldSlot_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirfieldSlot_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let airfieldName = self.airfieldName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let icao = self.icao.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idAirfield = self.idAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altAirfieldId = self.altAirfieldId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_;
    let acSlotCat = self.acSlotCat;
    let capacity = self.capacity;
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let minSeparation = self.minSeparation;
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    AirfieldSlot_Ingest::create(_fbb, &AirfieldSlot_IngestArgs{
      id,
      classificationMarking,
      airfieldName,
      icao,
      idAirfield,
      altAirfieldId,
      name,
      type_,
      acSlotCat,
      capacity,
      startTime,
      endTime,
      minSeparation,
      notes,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirfieldSlot_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airfield_slot_ingest_unchecked`.
pub fn root_as_airfield_slot_ingest(buf: &[u8]) -> Result<AirfieldSlot_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirfieldSlot_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirfieldSlot_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_airfield_slot_ingest_unchecked`.
pub fn size_prefixed_root_as_airfield_slot_ingest(buf: &[u8]) -> Result<AirfieldSlot_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirfieldSlot_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirfieldSlot_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airfield_slot_ingest_unchecked`.
pub fn root_as_airfield_slot_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirfieldSlot_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirfieldSlot_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirfieldSlot_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airfield_slot_ingest_unchecked`.
pub fn size_prefixed_root_as_airfield_slot_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirfieldSlot_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirfieldSlot_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirfieldSlot_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirfieldSlot_Ingest`.
pub unsafe fn root_as_airfield_slot_ingest_unchecked(buf: &[u8]) -> AirfieldSlot_Ingest {
  flatbuffers::root_unchecked::<AirfieldSlot_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirfieldSlot_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirfieldSlot_Ingest`.
pub unsafe fn size_prefixed_root_as_airfield_slot_ingest_unchecked(buf: &[u8]) -> AirfieldSlot_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<AirfieldSlot_Ingest>(buf)
}
pub const AIRFIELD_SLOT_INGEST_IDENTIFIER: &str = "AIRF";

#[inline]
pub fn airfield_slot_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRFIELD_SLOT_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn airfield_slot_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRFIELD_SLOT_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_airfield_slot_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirfieldSlot_Ingest<'a>>) {
  fbb.finish(root, Some(AIRFIELD_SLOT_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_airfield_slot_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirfieldSlot_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRFIELD_SLOT_INGEST_IDENTIFIER));
}
