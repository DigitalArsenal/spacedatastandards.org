// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum FlightPlanPoints_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Array of point data for this Point Group.
pub struct FlightPlanPoints_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlightPlanPoints_Ingest<'a> {
  type Inner = FlightPlanPoints_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FlightPlanPoints_Ingest<'a> {
  pub const VT_POINTNAME: flatbuffers::VOffsetT = 4;
  pub const VT_FPPLAT: flatbuffers::VOffsetT = 6;
  pub const VT_FPPLON: flatbuffers::VOffsetT = 8;
  pub const VT_FPPETA: flatbuffers::VOffsetT = 10;
  pub const VT_FPPREQFUEL: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FlightPlanPoints_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FlightPlanPoints_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<FlightPlanPoints_Ingest<'bldr>> {
    let mut builder = FlightPlanPoints_IngestBuilder::new(_fbb);
    builder.add_fppReqFuel(args.fppReqFuel);
    builder.add_fppLon(args.fppLon);
    builder.add_fppLat(args.fppLat);
    if let Some(x) = args.fppEta { builder.add_fppEta(x); }
    if let Some(x) = args.pointName { builder.add_pointName(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> FlightPlanPoints_IngestT {
    let pointName = self.pointName().map(|x| {
      x.to_string()
    });
    let fppLat = self.fppLat();
    let fppLon = self.fppLon();
    let fppEta = self.fppEta().map(|x| {
      x.to_string()
    });
    let fppReqFuel = self.fppReqFuel();
    FlightPlanPoints_IngestT {
      pointName,
      fppLat,
      fppLon,
      fppEta,
      fppReqFuel,
    }
  }

  /// Name of this point.
  /// Example: /// Example: CRUISE ALTITUDE ETP
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn pointName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanPoints_Ingest::VT_POINTNAME, None)}
  }
  /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fppLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanPoints_Ingest::VT_FPPLAT, Some(0.0)).unwrap()}
  }
  /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fppLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanPoints_Ingest::VT_FPPLON, Some(0.0)).unwrap()}
  }
  /// Estimated Time of Arrival (ETA) at this point in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-09-09T01:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fppEta(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlanPoints_Ingest::VT_FPPETA, None)}
  }
  /// Fuel required at this point to execute an Equal Time Point (ETP) or Extended Operations (ETOPS) plan in pounds.
  /// Example: /// Example: 4250.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fppReqFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlanPoints_Ingest::VT_FPPREQFUEL, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for FlightPlanPoints_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pointName", Self::VT_POINTNAME, false)?
     .visit_field::<f64>("fppLat", Self::VT_FPPLAT, false)?
     .visit_field::<f64>("fppLon", Self::VT_FPPLON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fppEta", Self::VT_FPPETA, false)?
     .visit_field::<f64>("fppReqFuel", Self::VT_FPPREQFUEL, false)?
     .finish();
    Ok(())
  }
}
pub struct FlightPlanPoints_IngestArgs<'a> {
    pub pointName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fppLat: f64,
    pub fppLon: f64,
    pub fppEta: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fppReqFuel: f64,
}
impl<'a> Default for FlightPlanPoints_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    FlightPlanPoints_IngestArgs {
      pointName: None,
      fppLat: 0.0,
      fppLon: 0.0,
      fppEta: None,
      fppReqFuel: 0.0,
    }
  }
}

pub struct FlightPlanPoints_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FlightPlanPoints_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_pointName(&mut self, pointName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanPoints_Ingest::VT_POINTNAME, pointName);
  }
  #[inline]
  pub fn add_fppLat(&mut self, fppLat: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanPoints_Ingest::VT_FPPLAT, fppLat, 0.0);
  }
  #[inline]
  pub fn add_fppLon(&mut self, fppLon: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanPoints_Ingest::VT_FPPLON, fppLon, 0.0);
  }
  #[inline]
  pub fn add_fppEta(&mut self, fppEta: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlanPoints_Ingest::VT_FPPETA, fppEta);
  }
  #[inline]
  pub fn add_fppReqFuel(&mut self, fppReqFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlanPoints_Ingest::VT_FPPREQFUEL, fppReqFuel, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FlightPlanPoints_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FlightPlanPoints_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlightPlanPoints_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FlightPlanPoints_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FlightPlanPoints_Ingest");
      ds.field("pointName", &self.pointName());
      ds.field("fppLat", &self.fppLat());
      ds.field("fppLon", &self.fppLon());
      ds.field("fppEta", &self.fppEta());
      ds.field("fppReqFuel", &self.fppReqFuel());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FlightPlanPoints_IngestT {
  pub pointName: Option<String>,
  pub fppLat: f64,
  pub fppLon: f64,
  pub fppEta: Option<String>,
  pub fppReqFuel: f64,
}
impl Default for FlightPlanPoints_IngestT {
  fn default() -> Self {
    Self {
      pointName: None,
      fppLat: 0.0,
      fppLon: 0.0,
      fppEta: None,
      fppReqFuel: 0.0,
    }
  }
}
impl FlightPlanPoints_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FlightPlanPoints_Ingest<'b>> {
    let pointName = self.pointName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fppLat = self.fppLat;
    let fppLon = self.fppLon;
    let fppEta = self.fppEta.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fppReqFuel = self.fppReqFuel;
    FlightPlanPoints_Ingest::create(_fbb, &FlightPlanPoints_IngestArgs{
      pointName,
      fppLat,
      fppLon,
      fppEta,
      fppReqFuel,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `FlightPlanPoints_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_points_ingest_unchecked`.
pub fn root_as_flight_plan_points_ingest(buf: &[u8]) -> Result<FlightPlanPoints_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FlightPlanPoints_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FlightPlanPoints_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_flight_plan_points_ingest_unchecked`.
pub fn size_prefixed_root_as_flight_plan_points_ingest(buf: &[u8]) -> Result<FlightPlanPoints_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FlightPlanPoints_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FlightPlanPoints_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_points_ingest_unchecked`.
pub fn root_as_flight_plan_points_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlightPlanPoints_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FlightPlanPoints_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FlightPlanPoints_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_points_ingest_unchecked`.
pub fn size_prefixed_root_as_flight_plan_points_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlightPlanPoints_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FlightPlanPoints_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FlightPlanPoints_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FlightPlanPoints_Ingest`.
pub unsafe fn root_as_flight_plan_points_ingest_unchecked(buf: &[u8]) -> FlightPlanPoints_Ingest {
  flatbuffers::root_unchecked::<FlightPlanPoints_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FlightPlanPoints_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FlightPlanPoints_Ingest`.
pub unsafe fn size_prefixed_root_as_flight_plan_points_ingest_unchecked(buf: &[u8]) -> FlightPlanPoints_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<FlightPlanPoints_Ingest>(buf)
}
pub const FLIGHT_PLAN_POINTS_INGEST_IDENTIFIER: &str = "FLIG";

#[inline]
pub fn flight_plan_points_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FLIGHT_PLAN_POINTS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn flight_plan_points_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FLIGHT_PLAN_POINTS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_flight_plan_points_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<FlightPlanPoints_Ingest<'a>>) {
  fbb.finish(root, Some(FLIGHT_PLAN_POINTS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_flight_plan_points_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<FlightPlanPoints_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(FLIGHT_PLAN_POINTS_INGEST_IDENTIFIER));
}
