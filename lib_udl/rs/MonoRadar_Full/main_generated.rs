// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MONO_RADAR_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MONO_RADAR_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MONO_RADAR_FULL_DATA_MODE_ENUM: [MonoRadar_Full_dataMode_Enum; 4] = [
  MonoRadar_Full_dataMode_Enum::REAL,
  MonoRadar_Full_dataMode_Enum::TEST,
  MonoRadar_Full_dataMode_Enum::SIMULATED,
  MonoRadar_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct MonoRadar_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl MonoRadar_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for MonoRadar_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for MonoRadar_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for MonoRadar_Full_dataMode_Enum {
    type Output = MonoRadar_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for MonoRadar_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for MonoRadar_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for MonoRadar_Full_dataMode_Enum {}
pub enum MonoRadar_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A monoradar record contains the raw, and in some cases, processed target reports from primary and secondary air surveillance radars.  All target positions for monoradar reports are recorded as range and azimuth from geographical North relative to the detecting radar site.  In the case of secondary surveillance radars, interrogation response codes are provided as well as quality and validation characteristics, when available in the particular record type used to generate the record.
pub struct MonoRadar_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MonoRadar_Full<'a> {
  type Inner = MonoRadar_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MonoRadar_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_TTI: flatbuffers::VOffsetT = 8;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 10;
  pub const VT_SENLAT: flatbuffers::VOffsetT = 12;
  pub const VT_SENLON: flatbuffers::VOffsetT = 14;
  pub const VT_SENALT: flatbuffers::VOffsetT = 16;
  pub const VT_SAC: flatbuffers::VOffsetT = 18;
  pub const VT_SIC: flatbuffers::VOffsetT = 20;
  pub const VT_TGTID: flatbuffers::VOffsetT = 22;
  pub const VT_ADDR: flatbuffers::VOffsetT = 24;
  pub const VT_MSGFMT: flatbuffers::VOffsetT = 26;
  pub const VT_MSGTYP: flatbuffers::VOffsetT = 28;
  pub const VT_AF: flatbuffers::VOffsetT = 30;
  pub const VT_FAA: flatbuffers::VOffsetT = 32;
  pub const VT_SPI: flatbuffers::VOffsetT = 34;
  pub const VT_AIMS: flatbuffers::VOffsetT = 36;
  pub const VT_MTI: flatbuffers::VOffsetT = 38;
  pub const VT_BCNHITS: flatbuffers::VOffsetT = 40;
  pub const VT_TS: flatbuffers::VOffsetT = 42;
  pub const VT_MSGTS: flatbuffers::VOffsetT = 44;
  pub const VT_RNG: flatbuffers::VOffsetT = 46;
  pub const VT_AZ: flatbuffers::VOffsetT = 48;
  pub const VT_ACP: flatbuffers::VOffsetT = 50;
  pub const VT_ALT3D: flatbuffers::VOffsetT = 52;
  pub const VT_MC: flatbuffers::VOffsetT = 54;
  pub const VT_MCV: flatbuffers::VOffsetT = 56;
  pub const VT_MCG: flatbuffers::VOffsetT = 58;
  pub const VT_M1: flatbuffers::VOffsetT = 60;
  pub const VT_M1V: flatbuffers::VOffsetT = 62;
  pub const VT_M1G: flatbuffers::VOffsetT = 64;
  pub const VT_M2: flatbuffers::VOffsetT = 66;
  pub const VT_M2V: flatbuffers::VOffsetT = 68;
  pub const VT_M2XV: flatbuffers::VOffsetT = 70;
  pub const VT_M2G: flatbuffers::VOffsetT = 72;
  pub const VT_M3A: flatbuffers::VOffsetT = 74;
  pub const VT_M3AV: flatbuffers::VOffsetT = 76;
  pub const VT_M3AG: flatbuffers::VOffsetT = 78;
  pub const VT_M3AXV: flatbuffers::VOffsetT = 80;
  pub const VT_M4: flatbuffers::VOffsetT = 82;
  pub const VT_M4V: flatbuffers::VOffsetT = 84;
  pub const VT_M4D1D2: flatbuffers::VOffsetT = 86;
  pub const VT_MSCOMMB: flatbuffers::VOffsetT = 88;
  pub const VT_MILEMRGCY: flatbuffers::VOffsetT = 90;
  pub const VT_CODE7500: flatbuffers::VOffsetT = 92;
  pub const VT_CODE7600: flatbuffers::VOffsetT = 94;
  pub const VT_CODE7700: flatbuffers::VOffsetT = 96;
  pub const VT_GRNDSPD: flatbuffers::VOffsetT = 98;
  pub const VT_HDNG: flatbuffers::VOffsetT = 100;
  pub const VT_TRKNUM: flatbuffers::VOffsetT = 102;
  pub const VT_RAD: flatbuffers::VOffsetT = 104;
  pub const VT_MAH: flatbuffers::VOffsetT = 106;
  pub const VT_CDM: flatbuffers::VOffsetT = 108;
  pub const VT_CARTPOS: flatbuffers::VOffsetT = 110;
  pub const VT_PSRRL: flatbuffers::VOffsetT = 112;
  pub const VT_SSRL: flatbuffers::VOffsetT = 114;
  pub const VT_RNGDELT: flatbuffers::VOffsetT = 116;
  pub const VT_AZDELT: flatbuffers::VOffsetT = 118;
  pub const VT_WECTC: flatbuffers::VOffsetT = 120;
  pub const VT_MRGRPT: flatbuffers::VOffsetT = 122;
  pub const VT_ARTSQUAL: flatbuffers::VOffsetT = 124;
  pub const VT_TRKELIG: flatbuffers::VOffsetT = 126;
  pub const VT_TGTCONF: flatbuffers::VOffsetT = 128;
  pub const VT_TGTCORR: flatbuffers::VOffsetT = 130;
  pub const VT_TIS: flatbuffers::VOffsetT = 132;
  pub const VT_TAGS: flatbuffers::VOffsetT = 134;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 136;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 138;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 140;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 142;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 144;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 146;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 148;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MonoRadar_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MonoRadar_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<MonoRadar_Full<'bldr>> {
    let mut builder = MonoRadar_FullBuilder::new(_fbb);
    builder.add_tis(args.tis);
    builder.add_azdelt(args.azdelt);
    builder.add_rngdelt(args.rngdelt);
    builder.add_ssrl(args.ssrl);
    builder.add_psrrl(args.psrrl);
    builder.add_hdng(args.hdng);
    builder.add_grndspd(args.grndspd);
    builder.add_mc(args.mc);
    builder.add_alt3d(args.alt3d);
    builder.add_az(args.az);
    builder.add_rng(args.rng);
    builder.add_senalt(args.senalt);
    builder.add_senlon(args.senlon);
    builder.add_senlat(args.senlat);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.tgtcorr { builder.add_tgtcorr(x); }
    if let Some(x) = args.tgtconf { builder.add_tgtconf(x); }
    if let Some(x) = args.trkelig { builder.add_trkelig(x); }
    if let Some(x) = args.artsqual { builder.add_artsqual(x); }
    if let Some(x) = args.wectc { builder.add_wectc(x); }
    if let Some(x) = args.cartpos { builder.add_cartpos(x); }
    if let Some(x) = args.cdm { builder.add_cdm(x); }
    if let Some(x) = args.mah { builder.add_mah(x); }
    if let Some(x) = args.rad { builder.add_rad(x); }
    builder.add_trknum(args.trknum);
    if let Some(x) = args.mscommb { builder.add_mscommb(x); }
    if let Some(x) = args.m4d1d2 { builder.add_m4d1d2(x); }
    if let Some(x) = args.m4v { builder.add_m4v(x); }
    if let Some(x) = args.m4 { builder.add_m4(x); }
    if let Some(x) = args.m3axv { builder.add_m3axv(x); }
    if let Some(x) = args.m3av { builder.add_m3av(x); }
    if let Some(x) = args.m3a { builder.add_m3a(x); }
    if let Some(x) = args.m2xv { builder.add_m2xv(x); }
    if let Some(x) = args.m2v { builder.add_m2v(x); }
    if let Some(x) = args.m2 { builder.add_m2(x); }
    if let Some(x) = args.m1v { builder.add_m1v(x); }
    if let Some(x) = args.m1 { builder.add_m1(x); }
    if let Some(x) = args.mcv { builder.add_mcv(x); }
    builder.add_acp(args.acp);
    if let Some(x) = args.msgts { builder.add_msgts(x); }
    if let Some(x) = args.ts { builder.add_ts(x); }
    builder.add_bcnhits(args.bcnhits);
    if let Some(x) = args.msgtyp { builder.add_msgtyp(x); }
    if let Some(x) = args.msgfmt { builder.add_msgfmt(x); }
    if let Some(x) = args.addr { builder.add_addr(x); }
    if let Some(x) = args.tgtid { builder.add_tgtid(x); }
    builder.add_sic(args.sic);
    builder.add_sac(args.sac);
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.tti { builder.add_tti(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_mrgrpt(args.mrgrpt);
    builder.add_code7700(args.code7700);
    builder.add_code7600(args.code7600);
    builder.add_code7500(args.code7500);
    builder.add_milemrgcy(args.milemrgcy);
    builder.add_m3ag(args.m3ag);
    builder.add_m2g(args.m2g);
    builder.add_m1g(args.m1g);
    builder.add_mcg(args.mcg);
    builder.add_mti(args.mti);
    builder.add_aims(args.aims);
    builder.add_spi(args.spi);
    builder.add_faa(args.faa);
    builder.add_af(args.af);
    builder.finish()
  }

  pub fn unpack(&self) -> MonoRadar_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let tti = self.tti().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let senlat = self.senlat();
    let senlon = self.senlon();
    let senalt = self.senalt();
    let sac = self.sac();
    let sic = self.sic();
    let tgtid = self.tgtid().map(|x| {
      x.to_string()
    });
    let addr = self.addr().map(|x| {
      x.to_string()
    });
    let msgfmt = self.msgfmt().map(|x| {
      x.to_string()
    });
    let msgtyp = self.msgtyp().map(|x| {
      x.to_string()
    });
    let af = self.af();
    let faa = self.faa();
    let spi = self.spi();
    let aims = self.aims();
    let mti = self.mti();
    let bcnhits = self.bcnhits();
    let ts = self.ts().map(|x| {
      x.to_string()
    });
    let msgts = self.msgts().map(|x| {
      x.to_string()
    });
    let rng = self.rng();
    let az = self.az();
    let acp = self.acp();
    let alt3d = self.alt3d();
    let mc = self.mc();
    let mcv = self.mcv().map(|x| {
      x.to_string()
    });
    let mcg = self.mcg();
    let m1 = self.m1().map(|x| {
      x.to_string()
    });
    let m1v = self.m1v().map(|x| {
      x.to_string()
    });
    let m1g = self.m1g();
    let m2 = self.m2().map(|x| {
      x.to_string()
    });
    let m2v = self.m2v().map(|x| {
      x.to_string()
    });
    let m2xv = self.m2xv().map(|x| {
      x.to_string()
    });
    let m2g = self.m2g();
    let m3a = self.m3a().map(|x| {
      x.to_string()
    });
    let m3av = self.m3av().map(|x| {
      x.to_string()
    });
    let m3ag = self.m3ag();
    let m3axv = self.m3axv().map(|x| {
      x.to_string()
    });
    let m4 = self.m4().map(|x| {
      x.to_string()
    });
    let m4v = self.m4v().map(|x| {
      x.to_string()
    });
    let m4d1d2 = self.m4d1d2().map(|x| {
      x.to_string()
    });
    let mscommb = self.mscommb().map(|x| {
      x.to_string()
    });
    let milemrgcy = self.milemrgcy();
    let code7500 = self.code7500();
    let code7600 = self.code7600();
    let code7700 = self.code7700();
    let grndspd = self.grndspd();
    let hdng = self.hdng();
    let trknum = self.trknum();
    let rad = self.rad().map(|x| {
      x.to_string()
    });
    let mah = self.mah().map(|x| {
      x.to_string()
    });
    let cdm = self.cdm().map(|x| {
      x.to_string()
    });
    let cartpos = self.cartpos().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let psrrl = self.psrrl();
    let ssrl = self.ssrl();
    let rngdelt = self.rngdelt();
    let azdelt = self.azdelt();
    let wectc = self.wectc().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let mrgrpt = self.mrgrpt();
    let artsqual = self.artsqual().map(|x| {
      x.to_string()
    });
    let trkelig = self.trkelig().map(|x| {
      x.to_string()
    });
    let tgtconf = self.tgtconf().map(|x| {
      x.to_string()
    });
    let tgtcorr = self.tgtcorr().map(|x| {
      x.to_string()
    });
    let tis = self.tis();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    MonoRadar_FullT {
      id,
      classificationMarking,
      tti,
      idSensor,
      senlat,
      senlon,
      senalt,
      sac,
      sic,
      tgtid,
      addr,
      msgfmt,
      msgtyp,
      af,
      faa,
      spi,
      aims,
      mti,
      bcnhits,
      ts,
      msgts,
      rng,
      az,
      acp,
      alt3d,
      mc,
      mcv,
      mcg,
      m1,
      m1v,
      m1g,
      m2,
      m2v,
      m2xv,
      m2g,
      m3a,
      m3av,
      m3ag,
      m3axv,
      m4,
      m4v,
      m4d1d2,
      mscommb,
      milemrgcy,
      code7500,
      code7600,
      code7700,
      grndspd,
      hdng,
      trknum,
      rad,
      mah,
      cdm,
      cartpos,
      psrrl,
      ssrl,
      rngdelt,
      azdelt,
      wectc,
      mrgrpt,
      artsqual,
      trkelig,
      tgtconf,
      tgtcorr,
      tis,
      tags,
      origSensorId,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MONORADAR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Test target indicator.
  /// Example: /// Example: TTI
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tti(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_TTI, None)}
  }
  /// ID of the radar site or station providing the data.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_IDSENSOR, None)}
  }
  /// Sensor WGS84 latitude, in degrees, at time of observation (ts). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senlat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_SENLAT, Some(0.0)).unwrap()}
  }
  /// Sensor WGS84 longitude, in degrees, at time of observation (ts).  -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senlon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_SENLON, Some(0.0)).unwrap()}
  }
  /// Sensor altitude, in kilometers, at time of observation (ts).
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senalt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_SENALT, Some(0.0)).unwrap()}
  }
  /// System Area Code.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sac(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MonoRadar_Full::VT_SAC, Some(0)).unwrap()}
  }
  /// System Identification Code.
  /// Example: /// Example: 40
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sic(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MonoRadar_Full::VT_SIC, Some(0)).unwrap()}
  }
  /// Aircraft identification from an aircraft equipped with a Mode S transponder.
  /// Example: /// Example: TGT-ID
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tgtid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_TGTID, None)}
  }
  /// Aircraft address (24-bits Mode S address) assigned uniquely to each aircraft.
  /// Example: /// Example: ADDR-ID
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn addr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_ADDR, None)}
  }
  /// Message format received (i.e. 'ASR9', 'CAT48', 'TPS70', etc..).
  /// Example: /// Example: CAT48
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn msgfmt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_MSGFMT, None)}
  }
  /// Message report type received (i.e. 'SRCH', 'BCN', 'REINF', 'BRTQC', 'PSR', etc..).
  /// Example: /// Example: BCN
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn msgtyp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_MSGTYP, None)}
  }
  /// Flag indicating military message.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn af(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_AF, Some(false)).unwrap()}
  }
  /// Flag indicating FAA/Civ message.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn faa(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_FAA, Some(false)).unwrap()}
  }
  /// Flag indicating whether Special Position Indicator (SPI) present in interrogation response.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn spi(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_SPI, Some(false)).unwrap()}
  }
  /// Flag indicating whether AIMS present.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn aims(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_AIMS, Some(false)).unwrap()}
  }
  /// Flag indicating that target was detected using data from an MTI receiver.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mti(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_MTI, Some(false)).unwrap()}
  }
  /// Number of beacon hits received on the target.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bcnhits(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MonoRadar_Full::VT_BCNHITS, Some(0)).unwrap()}
  }
  /// Target detection time, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ts(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_TS, None)}
  }
  /// Message time, in ISO 8601 UTC format with microsecond precision. This is the time that the data message was released from the site.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn msgts(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_MSGTS, None)}
  }
  /// Measured slant range to target from the observing site, in km.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rng(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_RNG, Some(0.0)).unwrap()}
  }
  /// Target azimuth, measured from the observing site, in degrees from true North.  If Azimuth Change Pulse (acp) count is provided, az represents the computed angle.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn az(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_AZ, Some(0.0)).unwrap()}
  }
  /// Azimuth Change Pulse count at target detection.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn acp(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MonoRadar_Full::VT_ACP, Some(0)).unwrap()}
  }
  /// Measured height of the target, in km. (for 3D radars).
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alt3d(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_ALT3D, Some(0.0)).unwrap()}
  }
  /// Mode-C altitude (uncorrected pressure altitude), in km.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_MC, Some(0.0)).unwrap()}
  }
  /// Status of the mode-C validity bit.
  /// Example: /// Example: MCV
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn mcv(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_MCV, None)}
  }
  /// Indicator that the mode-C response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mcg(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_MCG, Some(false)).unwrap()}
  }
  /// Mode-1 interrogation response (mission code).
  /// Example: /// Example: MISSION_CODE
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn m1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M1, None)}
  }
  /// Status of the mode-1 validity bit.
  /// Example: /// Example: M1V
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn m1v(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M1V, None)}
  }
  /// Indicator that the mode-1 response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m1g(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_M1G, Some(false)).unwrap()}
  }
  /// Mode-2 interrogation response (military identification code).
  /// Example: /// Example: MILITARY_ID_CODE
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn m2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M2, None)}
  }
  /// Status of the mode-2 validity bit.
  /// Example: /// Example: M2V
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn m2v(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M2V, None)}
  }
  /// Status of the mode-2 X-Pulse response validation.
  /// Example: /// Example: M2XV
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn m2xv(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M2XV, None)}
  }
  /// Indicator that the mode-2 response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m2g(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_M2G, Some(false)).unwrap()}
  }
  /// Mode-3/A interrogation response (aircraft identification).
  /// Example: /// Example: AIRCRAFT_ID
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn m3a(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M3A, None)}
  }
  /// Status of the mode-3/A validity bit.
  /// Example: /// Example: M3AV
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn m3av(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M3AV, None)}
  }
  /// Indicator that the mode-3/A response was garbled.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m3ag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_M3AG, Some(false)).unwrap()}
  }
  /// Status of the mode-3 X-Pulse response validation.
  /// Example: /// Example: M3AXV
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn m3axv(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M3AXV, None)}
  }
  /// Mode-4 interrogation response (Identification Friend/Foe).
  /// Example: /// Example: ID_FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn m4(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M4, None)}
  }
  /// Status of the mode-4 validity bit.
  /// Example: /// Example: M4V
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn m4v(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M4V, None)}
  }
  /// Mode-4 D1 & D2 response status.
  /// Example: /// Example: STATUS
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn m4d1d2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_M4D1D2, None)}
  }
  /// Mode-S Comm B message data.
  /// Example: /// Example: MSCOMMB
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn mscommb(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_MSCOMMB, None)}
  }
  /// Flag indicating military emergency.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn milemrgcy(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_MILEMRGCY, Some(false)).unwrap()}
  }
  /// 7500 squawk present (hijack).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn code7500(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_CODE7500, Some(false)).unwrap()}
  }
  /// 7600 squawk present (loss of comm).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn code7600(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_CODE7600, Some(false)).unwrap()}
  }
  /// 7700 squawk present (general emergency).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn code7700(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_CODE7700, Some(false)).unwrap()}
  }
  /// Target ground speed, in meters/second.
  /// Example: /// Example: 30.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn grndspd(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_GRNDSPD, Some(0.0)).unwrap()}
  }
  /// Target heading, in degrees from true North at the target position.
  /// Example: /// Example: 30.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hdng(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_HDNG, Some(0.0)).unwrap()}
  }
  /// Value representing a unique reference to a track record within a particular track file.  Included when the  radar station outputs tracks.
  /// Example: /// Example: 30
  /// Constraints: No constraints specified.
  #[inline]
  pub fn trknum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MonoRadar_Full::VT_TRKNUM, Some(0)).unwrap()}
  }
  /// Type of sensor(s) maintaining track.
  /// Example: /// Example: RAD
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn rad(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_RAD, None)}
  }
  /// Indication of Horizontal Maneuver detection.
  /// Example: /// Example: MAH
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn mah(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_MAH, None)}
  }
  /// Climbing/Descending mode indicator.
  /// Example: /// Example: CDM
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn cdm(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_CDM, None)}
  }
  /// Array of local 2d-cartesian [x, y] coordinates of target, in km.
  /// Example: /// Example: [1.2, 2.2]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cartpos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(MonoRadar_Full::VT_CARTPOS, None)}
  }
  /// Runlength of the primary surveillance radar track, in degrees.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn psrrl(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_PSRRL, Some(0.0)).unwrap()}
  }
  /// Runlength of the secondary surveillance radar track, in degrees.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ssrl(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_SSRL, Some(0.0)).unwrap()}
  }
  /// Target range delta between PSR and SSR (reference PSR-SSR), in km.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rngdelt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_RNGDELT, Some(0.0)).unwrap()}
  }
  /// Target azimuth delta between PSR and SSR (reference PSR-SSR), in degrees.
  /// Example: /// Example: 44.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azdelt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_AZDELT, Some(0.0)).unwrap()}
  }
  /// Warning/Error Conditions and Target Classification.
  /// Example: /// Example: ['WARNING', 'WARNING']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn wectc(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(MonoRadar_Full::VT_WECTC, None)}
  }
  /// Flag indicating report separated from different responses at same range.  Azimuth may have larger than normal error when present.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mrgrpt(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MonoRadar_Full::VT_MRGRPT, Some(false)).unwrap()}
  }
  /// ARTS quality.
  /// Example: /// Example: QUALITY
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn artsqual(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_ARTSQUAL, None)}
  }
  /// Track eligibility flag.
  /// Example: /// Example: ELIGIBILITY
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn trkelig(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_TRKELIG, None)}
  }
  /// Target confidence.
  /// Example: /// Example: CONFIDENCE
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn tgtconf(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_TGTCONF, None)}
  }
  /// Target correlation flag.
  /// Example: /// Example: CORRELATION
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tgtcorr(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_TGTCORR, None)}
  }
  /// Data time-in-storage, in seconds. This is the amount of time elapsed between target detection and message transmission.
  /// Example: /// Example: 0.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tis(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MonoRadar_Full::VT_TIS, Some(0.0)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(MonoRadar_Full::VT_TAGS, None)}
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation.This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_ORIGSENSORID, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> MonoRadar_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<MonoRadar_Full_dataMode_Enum>(MonoRadar_Full::VT_DATAMODE, Some(MonoRadar_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_CREATEDBY, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MonoRadar_Full::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for MonoRadar_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tti", Self::VT_TTI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<f64>("senlat", Self::VT_SENLAT, false)?
     .visit_field::<f64>("senlon", Self::VT_SENLON, false)?
     .visit_field::<f64>("senalt", Self::VT_SENALT, false)?
     .visit_field::<i32>("sac", Self::VT_SAC, false)?
     .visit_field::<i32>("sic", Self::VT_SIC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tgtid", Self::VT_TGTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("addr", Self::VT_ADDR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgfmt", Self::VT_MSGFMT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgtyp", Self::VT_MSGTYP, false)?
     .visit_field::<bool>("af", Self::VT_AF, false)?
     .visit_field::<bool>("faa", Self::VT_FAA, false)?
     .visit_field::<bool>("spi", Self::VT_SPI, false)?
     .visit_field::<bool>("aims", Self::VT_AIMS, false)?
     .visit_field::<bool>("mti", Self::VT_MTI, false)?
     .visit_field::<i32>("bcnhits", Self::VT_BCNHITS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ts", Self::VT_TS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgts", Self::VT_MSGTS, false)?
     .visit_field::<f64>("rng", Self::VT_RNG, false)?
     .visit_field::<f64>("az", Self::VT_AZ, false)?
     .visit_field::<i32>("acp", Self::VT_ACP, false)?
     .visit_field::<f64>("alt3d", Self::VT_ALT3D, false)?
     .visit_field::<f64>("mc", Self::VT_MC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mcv", Self::VT_MCV, false)?
     .visit_field::<bool>("mcg", Self::VT_MCG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m1", Self::VT_M1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m1v", Self::VT_M1V, false)?
     .visit_field::<bool>("m1g", Self::VT_M1G, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m2", Self::VT_M2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m2v", Self::VT_M2V, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m2xv", Self::VT_M2XV, false)?
     .visit_field::<bool>("m2g", Self::VT_M2G, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m3a", Self::VT_M3A, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m3av", Self::VT_M3AV, false)?
     .visit_field::<bool>("m3ag", Self::VT_M3AG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m3axv", Self::VT_M3AXV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m4", Self::VT_M4, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m4v", Self::VT_M4V, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("m4d1d2", Self::VT_M4D1D2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mscommb", Self::VT_MSCOMMB, false)?
     .visit_field::<bool>("milemrgcy", Self::VT_MILEMRGCY, false)?
     .visit_field::<bool>("code7500", Self::VT_CODE7500, false)?
     .visit_field::<bool>("code7600", Self::VT_CODE7600, false)?
     .visit_field::<bool>("code7700", Self::VT_CODE7700, false)?
     .visit_field::<f64>("grndspd", Self::VT_GRNDSPD, false)?
     .visit_field::<f64>("hdng", Self::VT_HDNG, false)?
     .visit_field::<i32>("trknum", Self::VT_TRKNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rad", Self::VT_RAD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("mah", Self::VT_MAH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cdm", Self::VT_CDM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("cartpos", Self::VT_CARTPOS, false)?
     .visit_field::<f64>("psrrl", Self::VT_PSRRL, false)?
     .visit_field::<f64>("ssrl", Self::VT_SSRL, false)?
     .visit_field::<f64>("rngdelt", Self::VT_RNGDELT, false)?
     .visit_field::<f64>("azdelt", Self::VT_AZDELT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("wectc", Self::VT_WECTC, false)?
     .visit_field::<bool>("mrgrpt", Self::VT_MRGRPT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("artsqual", Self::VT_ARTSQUAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trkelig", Self::VT_TRKELIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tgtconf", Self::VT_TGTCONF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tgtcorr", Self::VT_TGTCORR, false)?
     .visit_field::<f64>("tis", Self::VT_TIS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<MonoRadar_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct MonoRadar_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tti: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub senlat: f64,
    pub senlon: f64,
    pub senalt: f64,
    pub sac: i32,
    pub sic: i32,
    pub tgtid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub addr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgfmt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgtyp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub af: bool,
    pub faa: bool,
    pub spi: bool,
    pub aims: bool,
    pub mti: bool,
    pub bcnhits: i32,
    pub ts: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgts: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rng: f64,
    pub az: f64,
    pub acp: i32,
    pub alt3d: f64,
    pub mc: f64,
    pub mcv: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mcg: bool,
    pub m1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m1v: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m1g: bool,
    pub m2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m2v: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m2xv: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m2g: bool,
    pub m3a: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m3av: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m3ag: bool,
    pub m3axv: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m4: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m4v: Option<flatbuffers::WIPOffset<&'a str>>,
    pub m4d1d2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mscommb: Option<flatbuffers::WIPOffset<&'a str>>,
    pub milemrgcy: bool,
    pub code7500: bool,
    pub code7600: bool,
    pub code7700: bool,
    pub grndspd: f64,
    pub hdng: f64,
    pub trknum: i32,
    pub rad: Option<flatbuffers::WIPOffset<&'a str>>,
    pub mah: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cdm: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cartpos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub psrrl: f64,
    pub ssrl: f64,
    pub rngdelt: f64,
    pub azdelt: f64,
    pub wectc: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub mrgrpt: bool,
    pub artsqual: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trkelig: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tgtconf: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tgtcorr: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tis: f64,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: MonoRadar_Full_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MonoRadar_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    MonoRadar_FullArgs {
      id: None,
      classificationMarking: None,
      tti: None,
      idSensor: None,
      senlat: 0.0,
      senlon: 0.0,
      senalt: 0.0,
      sac: 0,
      sic: 0,
      tgtid: None,
      addr: None,
      msgfmt: None,
      msgtyp: None,
      af: false,
      faa: false,
      spi: false,
      aims: false,
      mti: false,
      bcnhits: 0,
      ts: None,
      msgts: None,
      rng: 0.0,
      az: 0.0,
      acp: 0,
      alt3d: 0.0,
      mc: 0.0,
      mcv: None,
      mcg: false,
      m1: None,
      m1v: None,
      m1g: false,
      m2: None,
      m2v: None,
      m2xv: None,
      m2g: false,
      m3a: None,
      m3av: None,
      m3ag: false,
      m3axv: None,
      m4: None,
      m4v: None,
      m4d1d2: None,
      mscommb: None,
      milemrgcy: false,
      code7500: false,
      code7600: false,
      code7700: false,
      grndspd: 0.0,
      hdng: 0.0,
      trknum: 0,
      rad: None,
      mah: None,
      cdm: None,
      cartpos: None,
      psrrl: 0.0,
      ssrl: 0.0,
      rngdelt: 0.0,
      azdelt: 0.0,
      wectc: None,
      mrgrpt: false,
      artsqual: None,
      trkelig: None,
      tgtconf: None,
      tgtcorr: None,
      tis: 0.0,
      tags: None,
      origSensorId: None,
      source: None,
      origin: None,
      dataMode: MonoRadar_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}

pub struct MonoRadar_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MonoRadar_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_tti(&mut self, tti: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_TTI, tti);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_senlat(&mut self, senlat: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_SENLAT, senlat, 0.0);
  }
  #[inline]
  pub fn add_senlon(&mut self, senlon: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_SENLON, senlon, 0.0);
  }
  #[inline]
  pub fn add_senalt(&mut self, senalt: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_SENALT, senalt, 0.0);
  }
  #[inline]
  pub fn add_sac(&mut self, sac: i32) {
    self.fbb_.push_slot::<i32>(MonoRadar_Full::VT_SAC, sac, 0);
  }
  #[inline]
  pub fn add_sic(&mut self, sic: i32) {
    self.fbb_.push_slot::<i32>(MonoRadar_Full::VT_SIC, sic, 0);
  }
  #[inline]
  pub fn add_tgtid(&mut self, tgtid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_TGTID, tgtid);
  }
  #[inline]
  pub fn add_addr(&mut self, addr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_ADDR, addr);
  }
  #[inline]
  pub fn add_msgfmt(&mut self, msgfmt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_MSGFMT, msgfmt);
  }
  #[inline]
  pub fn add_msgtyp(&mut self, msgtyp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_MSGTYP, msgtyp);
  }
  #[inline]
  pub fn add_af(&mut self, af: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_AF, af, false);
  }
  #[inline]
  pub fn add_faa(&mut self, faa: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_FAA, faa, false);
  }
  #[inline]
  pub fn add_spi(&mut self, spi: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_SPI, spi, false);
  }
  #[inline]
  pub fn add_aims(&mut self, aims: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_AIMS, aims, false);
  }
  #[inline]
  pub fn add_mti(&mut self, mti: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_MTI, mti, false);
  }
  #[inline]
  pub fn add_bcnhits(&mut self, bcnhits: i32) {
    self.fbb_.push_slot::<i32>(MonoRadar_Full::VT_BCNHITS, bcnhits, 0);
  }
  #[inline]
  pub fn add_ts(&mut self, ts: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_TS, ts);
  }
  #[inline]
  pub fn add_msgts(&mut self, msgts: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_MSGTS, msgts);
  }
  #[inline]
  pub fn add_rng(&mut self, rng: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_RNG, rng, 0.0);
  }
  #[inline]
  pub fn add_az(&mut self, az: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_AZ, az, 0.0);
  }
  #[inline]
  pub fn add_acp(&mut self, acp: i32) {
    self.fbb_.push_slot::<i32>(MonoRadar_Full::VT_ACP, acp, 0);
  }
  #[inline]
  pub fn add_alt3d(&mut self, alt3d: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_ALT3D, alt3d, 0.0);
  }
  #[inline]
  pub fn add_mc(&mut self, mc: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_MC, mc, 0.0);
  }
  #[inline]
  pub fn add_mcv(&mut self, mcv: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_MCV, mcv);
  }
  #[inline]
  pub fn add_mcg(&mut self, mcg: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_MCG, mcg, false);
  }
  #[inline]
  pub fn add_m1(&mut self, m1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M1, m1);
  }
  #[inline]
  pub fn add_m1v(&mut self, m1v: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M1V, m1v);
  }
  #[inline]
  pub fn add_m1g(&mut self, m1g: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_M1G, m1g, false);
  }
  #[inline]
  pub fn add_m2(&mut self, m2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M2, m2);
  }
  #[inline]
  pub fn add_m2v(&mut self, m2v: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M2V, m2v);
  }
  #[inline]
  pub fn add_m2xv(&mut self, m2xv: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M2XV, m2xv);
  }
  #[inline]
  pub fn add_m2g(&mut self, m2g: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_M2G, m2g, false);
  }
  #[inline]
  pub fn add_m3a(&mut self, m3a: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M3A, m3a);
  }
  #[inline]
  pub fn add_m3av(&mut self, m3av: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M3AV, m3av);
  }
  #[inline]
  pub fn add_m3ag(&mut self, m3ag: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_M3AG, m3ag, false);
  }
  #[inline]
  pub fn add_m3axv(&mut self, m3axv: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M3AXV, m3axv);
  }
  #[inline]
  pub fn add_m4(&mut self, m4: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M4, m4);
  }
  #[inline]
  pub fn add_m4v(&mut self, m4v: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M4V, m4v);
  }
  #[inline]
  pub fn add_m4d1d2(&mut self, m4d1d2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_M4D1D2, m4d1d2);
  }
  #[inline]
  pub fn add_mscommb(&mut self, mscommb: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_MSCOMMB, mscommb);
  }
  #[inline]
  pub fn add_milemrgcy(&mut self, milemrgcy: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_MILEMRGCY, milemrgcy, false);
  }
  #[inline]
  pub fn add_code7500(&mut self, code7500: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_CODE7500, code7500, false);
  }
  #[inline]
  pub fn add_code7600(&mut self, code7600: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_CODE7600, code7600, false);
  }
  #[inline]
  pub fn add_code7700(&mut self, code7700: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_CODE7700, code7700, false);
  }
  #[inline]
  pub fn add_grndspd(&mut self, grndspd: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_GRNDSPD, grndspd, 0.0);
  }
  #[inline]
  pub fn add_hdng(&mut self, hdng: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_HDNG, hdng, 0.0);
  }
  #[inline]
  pub fn add_trknum(&mut self, trknum: i32) {
    self.fbb_.push_slot::<i32>(MonoRadar_Full::VT_TRKNUM, trknum, 0);
  }
  #[inline]
  pub fn add_rad(&mut self, rad: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_RAD, rad);
  }
  #[inline]
  pub fn add_mah(&mut self, mah: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_MAH, mah);
  }
  #[inline]
  pub fn add_cdm(&mut self, cdm: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_CDM, cdm);
  }
  #[inline]
  pub fn add_cartpos(&mut self, cartpos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_CARTPOS, cartpos);
  }
  #[inline]
  pub fn add_psrrl(&mut self, psrrl: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_PSRRL, psrrl, 0.0);
  }
  #[inline]
  pub fn add_ssrl(&mut self, ssrl: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_SSRL, ssrl, 0.0);
  }
  #[inline]
  pub fn add_rngdelt(&mut self, rngdelt: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_RNGDELT, rngdelt, 0.0);
  }
  #[inline]
  pub fn add_azdelt(&mut self, azdelt: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_AZDELT, azdelt, 0.0);
  }
  #[inline]
  pub fn add_wectc(&mut self, wectc: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_WECTC, wectc);
  }
  #[inline]
  pub fn add_mrgrpt(&mut self, mrgrpt: bool) {
    self.fbb_.push_slot::<bool>(MonoRadar_Full::VT_MRGRPT, mrgrpt, false);
  }
  #[inline]
  pub fn add_artsqual(&mut self, artsqual: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_ARTSQUAL, artsqual);
  }
  #[inline]
  pub fn add_trkelig(&mut self, trkelig: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_TRKELIG, trkelig);
  }
  #[inline]
  pub fn add_tgtconf(&mut self, tgtconf: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_TGTCONF, tgtconf);
  }
  #[inline]
  pub fn add_tgtcorr(&mut self, tgtcorr: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_TGTCORR, tgtcorr);
  }
  #[inline]
  pub fn add_tis(&mut self, tis: f64) {
    self.fbb_.push_slot::<f64>(MonoRadar_Full::VT_TIS, tis, 0.0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: MonoRadar_Full_dataMode_Enum) {
    self.fbb_.push_slot::<MonoRadar_Full_dataMode_Enum>(MonoRadar_Full::VT_DATAMODE, dataMode, MonoRadar_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MonoRadar_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MonoRadar_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MonoRadar_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MonoRadar_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MonoRadar_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MonoRadar_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("tti", &self.tti());
      ds.field("idSensor", &self.idSensor());
      ds.field("senlat", &self.senlat());
      ds.field("senlon", &self.senlon());
      ds.field("senalt", &self.senalt());
      ds.field("sac", &self.sac());
      ds.field("sic", &self.sic());
      ds.field("tgtid", &self.tgtid());
      ds.field("addr", &self.addr());
      ds.field("msgfmt", &self.msgfmt());
      ds.field("msgtyp", &self.msgtyp());
      ds.field("af", &self.af());
      ds.field("faa", &self.faa());
      ds.field("spi", &self.spi());
      ds.field("aims", &self.aims());
      ds.field("mti", &self.mti());
      ds.field("bcnhits", &self.bcnhits());
      ds.field("ts", &self.ts());
      ds.field("msgts", &self.msgts());
      ds.field("rng", &self.rng());
      ds.field("az", &self.az());
      ds.field("acp", &self.acp());
      ds.field("alt3d", &self.alt3d());
      ds.field("mc", &self.mc());
      ds.field("mcv", &self.mcv());
      ds.field("mcg", &self.mcg());
      ds.field("m1", &self.m1());
      ds.field("m1v", &self.m1v());
      ds.field("m1g", &self.m1g());
      ds.field("m2", &self.m2());
      ds.field("m2v", &self.m2v());
      ds.field("m2xv", &self.m2xv());
      ds.field("m2g", &self.m2g());
      ds.field("m3a", &self.m3a());
      ds.field("m3av", &self.m3av());
      ds.field("m3ag", &self.m3ag());
      ds.field("m3axv", &self.m3axv());
      ds.field("m4", &self.m4());
      ds.field("m4v", &self.m4v());
      ds.field("m4d1d2", &self.m4d1d2());
      ds.field("mscommb", &self.mscommb());
      ds.field("milemrgcy", &self.milemrgcy());
      ds.field("code7500", &self.code7500());
      ds.field("code7600", &self.code7600());
      ds.field("code7700", &self.code7700());
      ds.field("grndspd", &self.grndspd());
      ds.field("hdng", &self.hdng());
      ds.field("trknum", &self.trknum());
      ds.field("rad", &self.rad());
      ds.field("mah", &self.mah());
      ds.field("cdm", &self.cdm());
      ds.field("cartpos", &self.cartpos());
      ds.field("psrrl", &self.psrrl());
      ds.field("ssrl", &self.ssrl());
      ds.field("rngdelt", &self.rngdelt());
      ds.field("azdelt", &self.azdelt());
      ds.field("wectc", &self.wectc());
      ds.field("mrgrpt", &self.mrgrpt());
      ds.field("artsqual", &self.artsqual());
      ds.field("trkelig", &self.trkelig());
      ds.field("tgtconf", &self.tgtconf());
      ds.field("tgtcorr", &self.tgtcorr());
      ds.field("tis", &self.tis());
      ds.field("tags", &self.tags());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MonoRadar_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub tti: Option<String>,
  pub idSensor: Option<String>,
  pub senlat: f64,
  pub senlon: f64,
  pub senalt: f64,
  pub sac: i32,
  pub sic: i32,
  pub tgtid: Option<String>,
  pub addr: Option<String>,
  pub msgfmt: Option<String>,
  pub msgtyp: Option<String>,
  pub af: bool,
  pub faa: bool,
  pub spi: bool,
  pub aims: bool,
  pub mti: bool,
  pub bcnhits: i32,
  pub ts: Option<String>,
  pub msgts: Option<String>,
  pub rng: f64,
  pub az: f64,
  pub acp: i32,
  pub alt3d: f64,
  pub mc: f64,
  pub mcv: Option<String>,
  pub mcg: bool,
  pub m1: Option<String>,
  pub m1v: Option<String>,
  pub m1g: bool,
  pub m2: Option<String>,
  pub m2v: Option<String>,
  pub m2xv: Option<String>,
  pub m2g: bool,
  pub m3a: Option<String>,
  pub m3av: Option<String>,
  pub m3ag: bool,
  pub m3axv: Option<String>,
  pub m4: Option<String>,
  pub m4v: Option<String>,
  pub m4d1d2: Option<String>,
  pub mscommb: Option<String>,
  pub milemrgcy: bool,
  pub code7500: bool,
  pub code7600: bool,
  pub code7700: bool,
  pub grndspd: f64,
  pub hdng: f64,
  pub trknum: i32,
  pub rad: Option<String>,
  pub mah: Option<String>,
  pub cdm: Option<String>,
  pub cartpos: Option<Vec<String>>,
  pub psrrl: f64,
  pub ssrl: f64,
  pub rngdelt: f64,
  pub azdelt: f64,
  pub wectc: Option<Vec<String>>,
  pub mrgrpt: bool,
  pub artsqual: Option<String>,
  pub trkelig: Option<String>,
  pub tgtconf: Option<String>,
  pub tgtcorr: Option<String>,
  pub tis: f64,
  pub tags: Option<Vec<String>>,
  pub origSensorId: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: MonoRadar_Full_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub origNetwork: Option<String>,
}
impl Default for MonoRadar_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      tti: None,
      idSensor: None,
      senlat: 0.0,
      senlon: 0.0,
      senalt: 0.0,
      sac: 0,
      sic: 0,
      tgtid: None,
      addr: None,
      msgfmt: None,
      msgtyp: None,
      af: false,
      faa: false,
      spi: false,
      aims: false,
      mti: false,
      bcnhits: 0,
      ts: None,
      msgts: None,
      rng: 0.0,
      az: 0.0,
      acp: 0,
      alt3d: 0.0,
      mc: 0.0,
      mcv: None,
      mcg: false,
      m1: None,
      m1v: None,
      m1g: false,
      m2: None,
      m2v: None,
      m2xv: None,
      m2g: false,
      m3a: None,
      m3av: None,
      m3ag: false,
      m3axv: None,
      m4: None,
      m4v: None,
      m4d1d2: None,
      mscommb: None,
      milemrgcy: false,
      code7500: false,
      code7600: false,
      code7700: false,
      grndspd: 0.0,
      hdng: 0.0,
      trknum: 0,
      rad: None,
      mah: None,
      cdm: None,
      cartpos: None,
      psrrl: 0.0,
      ssrl: 0.0,
      rngdelt: 0.0,
      azdelt: 0.0,
      wectc: None,
      mrgrpt: false,
      artsqual: None,
      trkelig: None,
      tgtconf: None,
      tgtcorr: None,
      tis: 0.0,
      tags: None,
      origSensorId: None,
      source: None,
      origin: None,
      dataMode: MonoRadar_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      origNetwork: None,
    }
  }
}
impl MonoRadar_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MonoRadar_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tti = self.tti.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let senlat = self.senlat;
    let senlon = self.senlon;
    let senalt = self.senalt;
    let sac = self.sac;
    let sic = self.sic;
    let tgtid = self.tgtid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let addr = self.addr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgfmt = self.msgfmt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgtyp = self.msgtyp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let af = self.af;
    let faa = self.faa;
    let spi = self.spi;
    let aims = self.aims;
    let mti = self.mti;
    let bcnhits = self.bcnhits;
    let ts = self.ts.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgts = self.msgts.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rng = self.rng;
    let az = self.az;
    let acp = self.acp;
    let alt3d = self.alt3d;
    let mc = self.mc;
    let mcv = self.mcv.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let mcg = self.mcg;
    let m1 = self.m1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m1v = self.m1v.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m1g = self.m1g;
    let m2 = self.m2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m2v = self.m2v.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m2xv = self.m2xv.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m2g = self.m2g;
    let m3a = self.m3a.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m3av = self.m3av.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m3ag = self.m3ag;
    let m3axv = self.m3axv.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m4 = self.m4.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m4v = self.m4v.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let m4d1d2 = self.m4d1d2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let mscommb = self.mscommb.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let milemrgcy = self.milemrgcy;
    let code7500 = self.code7500;
    let code7600 = self.code7600;
    let code7700 = self.code7700;
    let grndspd = self.grndspd;
    let hdng = self.hdng;
    let trknum = self.trknum;
    let rad = self.rad.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let mah = self.mah.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cdm = self.cdm.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cartpos = self.cartpos.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let psrrl = self.psrrl;
    let ssrl = self.ssrl;
    let rngdelt = self.rngdelt;
    let azdelt = self.azdelt;
    let wectc = self.wectc.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let mrgrpt = self.mrgrpt;
    let artsqual = self.artsqual.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trkelig = self.trkelig.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tgtconf = self.tgtconf.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tgtcorr = self.tgtcorr.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tis = self.tis;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MonoRadar_Full::create(_fbb, &MonoRadar_FullArgs{
      id,
      classificationMarking,
      tti,
      idSensor,
      senlat,
      senlon,
      senalt,
      sac,
      sic,
      tgtid,
      addr,
      msgfmt,
      msgtyp,
      af,
      faa,
      spi,
      aims,
      mti,
      bcnhits,
      ts,
      msgts,
      rng,
      az,
      acp,
      alt3d,
      mc,
      mcv,
      mcg,
      m1,
      m1v,
      m1g,
      m2,
      m2v,
      m2xv,
      m2g,
      m3a,
      m3av,
      m3ag,
      m3axv,
      m4,
      m4v,
      m4d1d2,
      mscommb,
      milemrgcy,
      code7500,
      code7600,
      code7700,
      grndspd,
      hdng,
      trknum,
      rad,
      mah,
      cdm,
      cartpos,
      psrrl,
      ssrl,
      rngdelt,
      azdelt,
      wectc,
      mrgrpt,
      artsqual,
      trkelig,
      tgtconf,
      tgtcorr,
      tis,
      tags,
      origSensorId,
      source,
      origin,
      dataMode,
      createdAt,
      createdBy,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MonoRadar_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mono_radar_full_unchecked`.
pub fn root_as_mono_radar_full(buf: &[u8]) -> Result<MonoRadar_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MonoRadar_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MonoRadar_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mono_radar_full_unchecked`.
pub fn size_prefixed_root_as_mono_radar_full(buf: &[u8]) -> Result<MonoRadar_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MonoRadar_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MonoRadar_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mono_radar_full_unchecked`.
pub fn root_as_mono_radar_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MonoRadar_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MonoRadar_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MonoRadar_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mono_radar_full_unchecked`.
pub fn size_prefixed_root_as_mono_radar_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MonoRadar_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MonoRadar_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MonoRadar_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MonoRadar_Full`.
pub unsafe fn root_as_mono_radar_full_unchecked(buf: &[u8]) -> MonoRadar_Full {
  flatbuffers::root_unchecked::<MonoRadar_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MonoRadar_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MonoRadar_Full`.
pub unsafe fn size_prefixed_root_as_mono_radar_full_unchecked(buf: &[u8]) -> MonoRadar_Full {
  flatbuffers::size_prefixed_root_unchecked::<MonoRadar_Full>(buf)
}
pub const MONO_RADAR_FULL_IDENTIFIER: &str = "MONO";

#[inline]
pub fn mono_radar_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MONO_RADAR_FULL_IDENTIFIER, false)
}

#[inline]
pub fn mono_radar_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MONO_RADAR_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_mono_radar_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MonoRadar_Full<'a>>) {
  fbb.finish(root, Some(MONO_RADAR_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mono_radar_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MonoRadar_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(MONO_RADAR_FULL_IDENTIFIER));
}
