// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationDensityProfile_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Profile of electron densities in the ionosphere associated with an IonoObservation.
pub struct IonoObservationDensityProfile_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationDensityProfile_Ingest<'a> {
  type Inner = IonoObservationDensityProfile_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationDensityProfile_Ingest<'a> {
  pub const VT_PARABOLIC: flatbuffers::VOffsetT = 4;
  pub const VT_QUASIPARABOLIC: flatbuffers::VOffsetT = 6;
  pub const VT_VALLEYMODELDESCRIPTION: flatbuffers::VOffsetT = 8;
  pub const VT_VALLEYMODELCOEFFS: flatbuffers::VOffsetT = 10;
  pub const VT_SHIFTEDCHEBYSHEV: flatbuffers::VOffsetT = 12;
  pub const VT_TOPSIDEEXTENSIONCHAPMANCONST: flatbuffers::VOffsetT = 14;
  pub const VT_TOPSIDEEXTENSIONVARYCHAP: flatbuffers::VOffsetT = 16;
  pub const VT_IRI: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationDensityProfile_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationDensityProfile_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfile_Ingest<'bldr>> {
    let mut builder = IonoObservationDensityProfile_IngestBuilder::new(_fbb);
    if let Some(x) = args.iri { builder.add_iri(x); }
    if let Some(x) = args.topsideExtensionVaryChap { builder.add_topsideExtensionVaryChap(x); }
    if let Some(x) = args.topsideExtensionChapmanConst { builder.add_topsideExtensionChapmanConst(x); }
    if let Some(x) = args.shiftedChebyshev { builder.add_shiftedChebyshev(x); }
    if let Some(x) = args.valleyModelCoeffs { builder.add_valleyModelCoeffs(x); }
    if let Some(x) = args.valleyModelDescription { builder.add_valleyModelDescription(x); }
    if let Some(x) = args.quasiParabolic { builder.add_quasiParabolic(x); }
    if let Some(x) = args.parabolic { builder.add_parabolic(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationDensityProfile_IngestT {
    let parabolic = self.parabolic().map(|x| {
      x.to_string()
    });
    let quasiParabolic = self.quasiParabolic().map(|x| {
      x.to_string()
    });
    let valleyModelDescription = self.valleyModelDescription().map(|x| {
      x.to_string()
    });
    let valleyModelCoeffs = self.valleyModelCoeffs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let shiftedChebyshev = self.shiftedChebyshev().map(|x| {
      x.to_string()
    });
    let topsideExtensionChapmanConst = self.topsideExtensionChapmanConst().map(|x| {
      x.to_string()
    });
    let topsideExtensionVaryChap = self.topsideExtensionVaryChap().map(|x| {
      x.to_string()
    });
    let iri = self.iri().map(|x| {
      x.to_string()
    });
    IonoObservationDensityProfile_IngestT {
      parabolic,
      quasiParabolic,
      valleyModelDescription,
      valleyModelCoeffs,
      shiftedChebyshev,
      topsideExtensionChapmanConst,
      topsideExtensionVaryChap,
      iri,
    }
  }

  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn parabolic(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfile_Ingest::VT_PARABOLIC, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn quasiParabolic(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfile_Ingest::VT_QUASIPARABOLIC, None)}
  }
  /// Description of the valley model and parameters.
  /// Example: /// Example: 2-parameter UMLCAR model with width W in km and depth D in MHz, no fitting.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn valleyModelDescription(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfile_Ingest::VT_VALLEYMODELDESCRIPTION, None)}
  }
  /// Array of valley model coefficients.
  /// Example: /// Example: [39.597, 0.1777]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn valleyModelCoeffs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(IonoObservationDensityProfile_Ingest::VT_VALLEYMODELCOEFFS, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn shiftedChebyshev(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfile_Ingest::VT_SHIFTEDCHEBYSHEV, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn topsideExtensionChapmanConst(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfile_Ingest::VT_TOPSIDEEXTENSIONCHAPMANCONST, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn topsideExtensionVaryChap(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfile_Ingest::VT_TOPSIDEEXTENSIONVARYCHAP, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn iri(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfile_Ingest::VT_IRI, None)}
  }
}

impl flatbuffers::Verifiable for IonoObservationDensityProfile_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("parabolic", Self::VT_PARABOLIC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("quasiParabolic", Self::VT_QUASIPARABOLIC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("valleyModelDescription", Self::VT_VALLEYMODELDESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("valleyModelCoeffs", Self::VT_VALLEYMODELCOEFFS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shiftedChebyshev", Self::VT_SHIFTEDCHEBYSHEV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("topsideExtensionChapmanConst", Self::VT_TOPSIDEEXTENSIONCHAPMANCONST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("topsideExtensionVaryChap", Self::VT_TOPSIDEEXTENSIONVARYCHAP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("iri", Self::VT_IRI, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationDensityProfile_IngestArgs<'a> {
    pub parabolic: Option<flatbuffers::WIPOffset<&'a str>>,
    pub quasiParabolic: Option<flatbuffers::WIPOffset<&'a str>>,
    pub valleyModelDescription: Option<flatbuffers::WIPOffset<&'a str>>,
    pub valleyModelCoeffs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub shiftedChebyshev: Option<flatbuffers::WIPOffset<&'a str>>,
    pub topsideExtensionChapmanConst: Option<flatbuffers::WIPOffset<&'a str>>,
    pub topsideExtensionVaryChap: Option<flatbuffers::WIPOffset<&'a str>>,
    pub iri: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for IonoObservationDensityProfile_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationDensityProfile_IngestArgs {
      parabolic: None,
      quasiParabolic: None,
      valleyModelDescription: None,
      valleyModelCoeffs: None,
      shiftedChebyshev: None,
      topsideExtensionChapmanConst: None,
      topsideExtensionVaryChap: None,
      iri: None,
    }
  }
}

pub struct IonoObservationDensityProfile_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationDensityProfile_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_parabolic(&mut self, parabolic: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_PARABOLIC, parabolic);
  }
  #[inline]
  pub fn add_quasiParabolic(&mut self, quasiParabolic: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_QUASIPARABOLIC, quasiParabolic);
  }
  #[inline]
  pub fn add_valleyModelDescription(&mut self, valleyModelDescription: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_VALLEYMODELDESCRIPTION, valleyModelDescription);
  }
  #[inline]
  pub fn add_valleyModelCoeffs(&mut self, valleyModelCoeffs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_VALLEYMODELCOEFFS, valleyModelCoeffs);
  }
  #[inline]
  pub fn add_shiftedChebyshev(&mut self, shiftedChebyshev: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_SHIFTEDCHEBYSHEV, shiftedChebyshev);
  }
  #[inline]
  pub fn add_topsideExtensionChapmanConst(&mut self, topsideExtensionChapmanConst: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_TOPSIDEEXTENSIONCHAPMANCONST, topsideExtensionChapmanConst);
  }
  #[inline]
  pub fn add_topsideExtensionVaryChap(&mut self, topsideExtensionVaryChap: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_TOPSIDEEXTENSIONVARYCHAP, topsideExtensionVaryChap);
  }
  #[inline]
  pub fn add_iri(&mut self, iri: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfile_Ingest::VT_IRI, iri);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationDensityProfile_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationDensityProfile_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationDensityProfile_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationDensityProfile_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationDensityProfile_Ingest");
      ds.field("parabolic", &self.parabolic());
      ds.field("quasiParabolic", &self.quasiParabolic());
      ds.field("valleyModelDescription", &self.valleyModelDescription());
      ds.field("valleyModelCoeffs", &self.valleyModelCoeffs());
      ds.field("shiftedChebyshev", &self.shiftedChebyshev());
      ds.field("topsideExtensionChapmanConst", &self.topsideExtensionChapmanConst());
      ds.field("topsideExtensionVaryChap", &self.topsideExtensionVaryChap());
      ds.field("iri", &self.iri());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationDensityProfile_IngestT {
  pub parabolic: Option<String>,
  pub quasiParabolic: Option<String>,
  pub valleyModelDescription: Option<String>,
  pub valleyModelCoeffs: Option<Vec<String>>,
  pub shiftedChebyshev: Option<String>,
  pub topsideExtensionChapmanConst: Option<String>,
  pub topsideExtensionVaryChap: Option<String>,
  pub iri: Option<String>,
}
impl Default for IonoObservationDensityProfile_IngestT {
  fn default() -> Self {
    Self {
      parabolic: None,
      quasiParabolic: None,
      valleyModelDescription: None,
      valleyModelCoeffs: None,
      shiftedChebyshev: None,
      topsideExtensionChapmanConst: None,
      topsideExtensionVaryChap: None,
      iri: None,
    }
  }
}
impl IonoObservationDensityProfile_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfile_Ingest<'b>> {
    let parabolic = self.parabolic.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let quasiParabolic = self.quasiParabolic.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let valleyModelDescription = self.valleyModelDescription.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let valleyModelCoeffs = self.valleyModelCoeffs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let shiftedChebyshev = self.shiftedChebyshev.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let topsideExtensionChapmanConst = self.topsideExtensionChapmanConst.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let topsideExtensionVaryChap = self.topsideExtensionVaryChap.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let iri = self.iri.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    IonoObservationDensityProfile_Ingest::create(_fbb, &IonoObservationDensityProfile_IngestArgs{
      parabolic,
      quasiParabolic,
      valleyModelDescription,
      valleyModelCoeffs,
      shiftedChebyshev,
      topsideExtensionChapmanConst,
      topsideExtensionVaryChap,
      iri,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationDensityProfile_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_ingest_unchecked`.
pub fn root_as_iono_observation_density_profile_ingest(buf: &[u8]) -> Result<IonoObservationDensityProfile_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationDensityProfile_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationDensityProfile_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_density_profile_ingest_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_ingest(buf: &[u8]) -> Result<IonoObservationDensityProfile_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationDensityProfile_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationDensityProfile_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_ingest_unchecked`.
pub fn root_as_iono_observation_density_profile_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfile_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationDensityProfile_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationDensityProfile_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_ingest_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfile_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationDensityProfile_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationDensityProfile_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationDensityProfile_Ingest`.
pub unsafe fn root_as_iono_observation_density_profile_ingest_unchecked(buf: &[u8]) -> IonoObservationDensityProfile_Ingest {
  flatbuffers::root_unchecked::<IonoObservationDensityProfile_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationDensityProfile_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationDensityProfile_Ingest`.
pub unsafe fn size_prefixed_root_as_iono_observation_density_profile_ingest_unchecked(buf: &[u8]) -> IonoObservationDensityProfile_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationDensityProfile_Ingest>(buf)
}
pub const IONO_OBSERVATION_DENSITY_PROFILE_INGEST_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_density_profile_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_density_profile_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_density_profile_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationDensityProfile_Ingest<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_density_profile_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationDensityProfile_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_INGEST_IDENTIFIER));
}
