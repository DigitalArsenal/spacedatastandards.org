// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GNSSRAW_IF_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GNSSRAW_IF_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GNSSRAW_IF_INGEST_DATA_MODE_ENUM: [GNSSRawIF_Ingest_dataMode_Enum; 4] = [
  GNSSRawIF_Ingest_dataMode_Enum::REAL,
  GNSSRawIF_Ingest_dataMode_Enum::TEST,
  GNSSRawIF_Ingest_dataMode_Enum::SIMULATED,
  GNSSRawIF_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GNSSRawIF_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl GNSSRawIF_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GNSSRawIF_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for GNSSRawIF_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GNSSRawIF_Ingest_dataMode_Enum {
    type Output = GNSSRawIF_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GNSSRawIF_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GNSSRawIF_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GNSSRawIF_Ingest_dataMode_Enum {}
pub enum GNSSRawIF_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Global Navigation Satellite System (GNSS) Raw Intermediate Frequency (IF) data are the recorded streams of raw signal samples after down-conversion of the received signal to IF and prior to any processing onboard the receiving spacecraft.  These data sets are processed in various geophysical applications and used to characterize Electromagnetic Interference (EMI) in the operating environment.
pub struct GNSSRawIF_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GNSSRawIF_Ingest<'a> {
  type Inner = GNSSRawIF_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GNSSRawIF_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 8;
  pub const VT_SATNO: flatbuffers::VOffsetT = 10;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 12;
  pub const VT_ESID: flatbuffers::VOffsetT = 14;
  pub const VT_RECEIVER: flatbuffers::VOffsetT = 16;
  pub const VT_BORESIGHT: flatbuffers::VOffsetT = 18;
  pub const VT_QUAT: flatbuffers::VOffsetT = 20;
  pub const VT_STARTINDEX: flatbuffers::VOffsetT = 22;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 24;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 26;
  pub const VT_STARTLAT: flatbuffers::VOffsetT = 28;
  pub const VT_STARTLON: flatbuffers::VOffsetT = 30;
  pub const VT_STARTALT: flatbuffers::VOffsetT = 32;
  pub const VT_ENDLAT: flatbuffers::VOffsetT = 34;
  pub const VT_ENDLON: flatbuffers::VOffsetT = 36;
  pub const VT_ENDALT: flatbuffers::VOffsetT = 38;
  pub const VT_CENTERFREQ: flatbuffers::VOffsetT = 40;
  pub const VT_IFFREQ: flatbuffers::VOffsetT = 42;
  pub const VT_SAMPLERATE: flatbuffers::VOffsetT = 44;
  pub const VT_POSTFOURIER: flatbuffers::VOffsetT = 46;
  pub const VT_SAMPLETYPE: flatbuffers::VOffsetT = 48;
  pub const VT_BITDEPTH: flatbuffers::VOffsetT = 50;
  pub const VT_DIFFCODEBIAS: flatbuffers::VOffsetT = 52;
  pub const VT_DATARATE: flatbuffers::VOffsetT = 54;
  pub const VT_SETID: flatbuffers::VOffsetT = 56;
  pub const VT_SETLENGTH: flatbuffers::VOffsetT = 58;
  pub const VT_SEQUENCEID: flatbuffers::VOffsetT = 60;
  pub const VT_FILENAME: flatbuffers::VOffsetT = 62;
  pub const VT_SRCTYPS: flatbuffers::VOffsetT = 64;
  pub const VT_SRCIDS: flatbuffers::VOffsetT = 66;
  pub const VT_FILESIZE: flatbuffers::VOffsetT = 68;
  pub const VT_TAGS: flatbuffers::VOffsetT = 70;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 74;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 76;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 78;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 80;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 82;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GNSSRawIF_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GNSSRawIF_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<GNSSRawIF_Ingest<'bldr>> {
    let mut builder = GNSSRawIF_IngestBuilder::new(_fbb);
    builder.add_fileSize(args.fileSize);
    builder.add_dataRate(args.dataRate);
    builder.add_endAlt(args.endAlt);
    builder.add_endLon(args.endLon);
    builder.add_endLat(args.endLat);
    builder.add_startAlt(args.startAlt);
    builder.add_startLon(args.startLon);
    builder.add_startLat(args.startLat);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.srcIds { builder.add_srcIds(x); }
    if let Some(x) = args.srcTyps { builder.add_srcTyps(x); }
    if let Some(x) = args.fileName { builder.add_fileName(x); }
    builder.add_sequenceID(args.sequenceID);
    builder.add_setLength(args.setLength);
    if let Some(x) = args.setId { builder.add_setId(x); }
    if let Some(x) = args.diffCodeBias { builder.add_diffCodeBias(x); }
    builder.add_bitDepth(args.bitDepth);
    if let Some(x) = args.sampleType { builder.add_sampleType(x); }
    if let Some(x) = args.postFourier { builder.add_postFourier(x); }
    if let Some(x) = args.sampleRate { builder.add_sampleRate(x); }
    if let Some(x) = args.ifFreq { builder.add_ifFreq(x); }
    if let Some(x) = args.centerFreq { builder.add_centerFreq(x); }
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    builder.add_startIndex(args.startIndex);
    if let Some(x) = args.quat { builder.add_quat(x); }
    if let Some(x) = args.boresight { builder.add_boresight(x); }
    if let Some(x) = args.receiver { builder.add_receiver(x); }
    if let Some(x) = args.esId { builder.add_esId(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> GNSSRawIF_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let esId = self.esId().map(|x| {
      x.to_string()
    });
    let receiver = self.receiver().map(|x| {
      x.to_string()
    });
    let boresight = self.boresight().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let quat = self.quat().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let startIndex = self.startIndex();
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let startLat = self.startLat();
    let startLon = self.startLon();
    let startAlt = self.startAlt();
    let endLat = self.endLat();
    let endLon = self.endLon();
    let endAlt = self.endAlt();
    let centerFreq = self.centerFreq().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let ifFreq = self.ifFreq().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sampleRate = self.sampleRate().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let postFourier = self.postFourier().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sampleType = self.sampleType().map(|x| {
      x.to_string()
    });
    let bitDepth = self.bitDepth();
    let diffCodeBias = self.diffCodeBias().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let dataRate = self.dataRate();
    let setId = self.setId().map(|x| {
      x.to_string()
    });
    let setLength = self.setLength();
    let sequenceID = self.sequenceID();
    let fileName = self.fileName().map(|x| {
      x.to_string()
    });
    let srcTyps = self.srcTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcIds = self.srcIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let fileSize = self.fileSize();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    GNSSRawIF_IngestT {
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      origObjectId,
      esId,
      receiver,
      boresight,
      quat,
      startIndex,
      startTime,
      endTime,
      startLat,
      startLon,
      startAlt,
      endLat,
      endLon,
      endAlt,
      centerFreq,
      ifFreq,
      sampleRate,
      postFourier,
      sampleType,
      bitDepth,
      diffCodeBias,
      dataRate,
      setId,
      setLength,
      sequenceID,
      fileName,
      srcTyps,
      srcIds,
      fileSize,
      tags,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GNSSRawIF-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: 32375
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_IDONORBIT, None)}
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 32375
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GNSSRawIF_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: L2045
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_ORIGOBJECTID, None)}
  }
  /// Unique identifier of the parent Ephemeris Set, if this data is correlated with an Ephemeris. If reporting for a spacecraft with multiple onboard GNSS receivers, this ID may be associated with multiple GNSS Raw IF records if each receiver is synced to the ephemeris points.
  /// Example: /// Example: 60f7a241-b7be-48d8-acf3-786670af53f9
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn esId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_ESID, None)}
  }
  /// The number or ID of the GNSS receiver associated with this data.  If reporting for multiple receivers a separate record should be generated for each. If null, it  is assumed to indicate that only one receiver is present, or reported.
  /// Example: /// Example: GPS1
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn receiver(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_RECEIVER, None)}
  }
  /// Unit vector of the outward facing direction of the receiver boresight in a body-fixed coordinate system.
  /// Example: /// Example: [0, 1, 0]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn boresight(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_BORESIGHT, None)}
  }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at the sample start time (startTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion. The quaternion should be normalized to 1.
  /// Example: /// Example: [0, -0.2734104, 0.1562345, 0.9491246]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn quat(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_QUAT, None)}
  }
  /// The index of the sample within the associated binary file that corresponds to the startTime indicated in this record.  This is especially useful on high sample-rate sensors when some samples are less than one microsecond before the value of startTime.  This index is 0-based.  If null, the startIndex is assumed to be 0.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startIndex(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GNSSRawIF_Ingest::VT_STARTINDEX, Some(0)).unwrap()}
  }
  /// Start time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2022-04-09T18:11:28.919768Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_STARTTIME, None)}
  }
  /// End time of the data contained in the associated binary file, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2022-04-09T18:12:28.919768Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_ENDTIME, None)}
  }
  /// WGS-84 spacecraft latitude sub-point at start time (startTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.834
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GNSSRawIF_Ingest::VT_STARTLAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 spacecraft longitude sub-point at start time (startTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.821
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GNSSRawIF_Ingest::VT_STARTLON, Some(0.0)).unwrap()}
  }
  /// Spacecraft altitude at start time (startTime), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 525.664
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GNSSRawIF_Ingest::VT_STARTALT, Some(0.0)).unwrap()}
  }
  /// WGS-84 spacecraft latitude sub-point at end time (endTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.922
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GNSSRawIF_Ingest::VT_ENDLAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 spacecraft longitude sub-point at end time (endTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.67
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GNSSRawIF_Ingest::VT_ENDLON, Some(0.0)).unwrap()}
  }
  /// Spacecraft altitude at end time (endTime), expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 525.626
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GNSSRawIF_Ingest::VT_ENDALT, Some(0.0)).unwrap()}
  }
  /// The center frequency, in MHz, of the observation bands.  More than one band may be reported in each binary file, so this is an array of the center frequency of each band (including an array of length 1 if only one band is present).
  /// Example: /// Example: [1227.6, 1575.4]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn centerFreq(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_CENTERFREQ, None)}
  }
  /// The center frequency, in MHz, after downconversion to intermediate frequency.  If provided, this array should have the same length as centerFreqs.
  /// Example: /// Example: [4.09, 5.87]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ifFreq(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_IFFREQ, None)}
  }
  /// The number of samples taken per second.
  /// Example: /// Example: [8000, 9000]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sampleRate(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_SAMPLERATE, None)}
  }
  /// After converting the raw data in the file, to generate (frequency-space) spectra some sets require an additional transformation or correction based on details of the hardware that recorded it.  This field marks any such transformations.  Currently supported options are NONE (no correction) and MIRRORED (frequency axis is flipped around the corresponding value of ifFreq). If null, it is assumed that NONE applies to all frequency bands.
  /// Example: /// Example: ['NONE', 'NONE']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn postFourier(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_POSTFOURIER, None)}
  }
  /// The sample type associated with the IF data.  REAL for data with only an I-component or COMPLEX for data with both I & Q components.
  /// Example: /// Example: COMPLEX
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn sampleType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_SAMPLETYPE, None)}
  }
  /// The number of bits in each datum, for example 2 for 2-bit integers or 8 for 8-bit integers.
  /// Example: /// Example: 8
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bitDepth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GNSSRawIF_Ingest::VT_BITDEPTH, Some(0)).unwrap()}
  }
  /// Differential Code Biases (DCBs) are the systematic errors, or biases, between two GNSS code observations at the same or different frequencies.  If applicable, this field should contain an array of DBC with length equal to the number of frequencies in the binary file.  The reference frequency should show DCB equal to 0.  If null, it is assumed that there is no DCB (all values are 0).
  /// Example: /// Example: [0.0271, 0.0016]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn diffCodeBias(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_DIFFCODEBIAS, None)}
  }
  /// The amount of data generated per unit time, expressed in Megabytes/minute.
  /// Example: /// Example: 0.205
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dataRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GNSSRawIF_Ingest::VT_DATARATE, Some(0.0)).unwrap()}
  }
  /// User-defined ID of a set or sequence of records/files.  Used to associate a set of related raw IF records.
  /// Example: /// Example: 2b0b1b1a-a3c0-4267-894a-0c40cb84a5af
  /// Constraints: No constraints specified.
  #[inline]
  pub fn setId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_SETID, None)}
  }
  /// The number of raw IF records/files in a set.
  /// Example: /// Example: 7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn setLength(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GNSSRawIF_Ingest::VT_SETLENGTH, Some(0)).unwrap()}
  }
  /// The sequence number of a raw IF record/file within a set.  Sequence number should start at 1.  If null, then it is assumed that the order of records within a raw IF set is not relevant.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sequenceID(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GNSSRawIF_Ingest::VT_SEQUENCEID, Some(0)).unwrap()}
  }
  /// The file name of the Raw IF Binary file.  The files should be in the Hierarchical Data Format (HDF5).
  /// Example: /// Example: somefile.hdf5
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn fileName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_FILENAME, None)}
  }
  /// Array of UDL record types (GNSSSET) associated with this GNSSRawIF record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['GNSSSET']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_SRCTYPS, None)}
  }
  /// Array of UUIDs of the UDL data records associated with this GNSSRawIF record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/gnssobservationset/{uuid}).
  /// Example: /// Example: ['GNSSSET_ID']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_SRCIDS, None)}
  }
  /// The binary file size, in bytes, auto-populated by the system.  The maximum file size for this service is 5,000,000 Bytes (5 MB). Files exceeding the maximum size will be rejected.
  /// Example: /// Example: 3168895
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fileSize(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(GNSSRawIF_Ingest::VT_FILESIZE, Some(0)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(GNSSRawIF_Ingest::VT_TAGS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> GNSSRawIF_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GNSSRawIF_Ingest_dataMode_Enum>(GNSSRawIF_Ingest::VT_DATAMODE, Some(GNSSRawIF_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GNSSRawIF_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for GNSSRawIF_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("esId", Self::VT_ESID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiver", Self::VT_RECEIVER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("boresight", Self::VT_BORESIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("quat", Self::VT_QUAT, false)?
     .visit_field::<i32>("startIndex", Self::VT_STARTINDEX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<f64>("startLat", Self::VT_STARTLAT, false)?
     .visit_field::<f64>("startLon", Self::VT_STARTLON, false)?
     .visit_field::<f64>("startAlt", Self::VT_STARTALT, false)?
     .visit_field::<f64>("endLat", Self::VT_ENDLAT, false)?
     .visit_field::<f64>("endLon", Self::VT_ENDLON, false)?
     .visit_field::<f64>("endAlt", Self::VT_ENDALT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("centerFreq", Self::VT_CENTERFREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ifFreq", Self::VT_IFFREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sampleRate", Self::VT_SAMPLERATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("postFourier", Self::VT_POSTFOURIER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sampleType", Self::VT_SAMPLETYPE, false)?
     .visit_field::<i32>("bitDepth", Self::VT_BITDEPTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("diffCodeBias", Self::VT_DIFFCODEBIAS, false)?
     .visit_field::<f64>("dataRate", Self::VT_DATARATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("setId", Self::VT_SETID, false)?
     .visit_field::<i32>("setLength", Self::VT_SETLENGTH, false)?
     .visit_field::<i32>("sequenceID", Self::VT_SEQUENCEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fileName", Self::VT_FILENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcTyps", Self::VT_SRCTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcIds", Self::VT_SRCIDS, false)?
     .visit_field::<i64>("fileSize", Self::VT_FILESIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<GNSSRawIF_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct GNSSRawIF_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub esId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiver: Option<flatbuffers::WIPOffset<&'a str>>,
    pub boresight: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub quat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub startIndex: i32,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startLat: f64,
    pub startLon: f64,
    pub startAlt: f64,
    pub endLat: f64,
    pub endLon: f64,
    pub endAlt: f64,
    pub centerFreq: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ifFreq: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sampleRate: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub postFourier: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sampleType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bitDepth: i32,
    pub diffCodeBias: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub dataRate: f64,
    pub setId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub setLength: i32,
    pub sequenceID: i32,
    pub fileName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub srcTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub fileSize: i64,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: GNSSRawIF_Ingest_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for GNSSRawIF_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    GNSSRawIF_IngestArgs {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      esId: None,
      receiver: None,
      boresight: None,
      quat: None,
      startIndex: 0,
      startTime: None,
      endTime: None,
      startLat: 0.0,
      startLon: 0.0,
      startAlt: 0.0,
      endLat: 0.0,
      endLon: 0.0,
      endAlt: 0.0,
      centerFreq: None,
      ifFreq: None,
      sampleRate: None,
      postFourier: None,
      sampleType: None,
      bitDepth: 0,
      diffCodeBias: None,
      dataRate: 0.0,
      setId: None,
      setLength: 0,
      sequenceID: 0,
      fileName: None,
      srcTyps: None,
      srcIds: None,
      fileSize: 0,
      tags: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: GNSSRawIF_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct GNSSRawIF_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GNSSRawIF_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(GNSSRawIF_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_esId(&mut self, esId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_ESID, esId);
  }
  #[inline]
  pub fn add_receiver(&mut self, receiver: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_RECEIVER, receiver);
  }
  #[inline]
  pub fn add_boresight(&mut self, boresight: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_BORESIGHT, boresight);
  }
  #[inline]
  pub fn add_quat(&mut self, quat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_QUAT, quat);
  }
  #[inline]
  pub fn add_startIndex(&mut self, startIndex: i32) {
    self.fbb_.push_slot::<i32>(GNSSRawIF_Ingest::VT_STARTINDEX, startIndex, 0);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_startLat(&mut self, startLat: f64) {
    self.fbb_.push_slot::<f64>(GNSSRawIF_Ingest::VT_STARTLAT, startLat, 0.0);
  }
  #[inline]
  pub fn add_startLon(&mut self, startLon: f64) {
    self.fbb_.push_slot::<f64>(GNSSRawIF_Ingest::VT_STARTLON, startLon, 0.0);
  }
  #[inline]
  pub fn add_startAlt(&mut self, startAlt: f64) {
    self.fbb_.push_slot::<f64>(GNSSRawIF_Ingest::VT_STARTALT, startAlt, 0.0);
  }
  #[inline]
  pub fn add_endLat(&mut self, endLat: f64) {
    self.fbb_.push_slot::<f64>(GNSSRawIF_Ingest::VT_ENDLAT, endLat, 0.0);
  }
  #[inline]
  pub fn add_endLon(&mut self, endLon: f64) {
    self.fbb_.push_slot::<f64>(GNSSRawIF_Ingest::VT_ENDLON, endLon, 0.0);
  }
  #[inline]
  pub fn add_endAlt(&mut self, endAlt: f64) {
    self.fbb_.push_slot::<f64>(GNSSRawIF_Ingest::VT_ENDALT, endAlt, 0.0);
  }
  #[inline]
  pub fn add_centerFreq(&mut self, centerFreq: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_CENTERFREQ, centerFreq);
  }
  #[inline]
  pub fn add_ifFreq(&mut self, ifFreq: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_IFFREQ, ifFreq);
  }
  #[inline]
  pub fn add_sampleRate(&mut self, sampleRate: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_SAMPLERATE, sampleRate);
  }
  #[inline]
  pub fn add_postFourier(&mut self, postFourier: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_POSTFOURIER, postFourier);
  }
  #[inline]
  pub fn add_sampleType(&mut self, sampleType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_SAMPLETYPE, sampleType);
  }
  #[inline]
  pub fn add_bitDepth(&mut self, bitDepth: i32) {
    self.fbb_.push_slot::<i32>(GNSSRawIF_Ingest::VT_BITDEPTH, bitDepth, 0);
  }
  #[inline]
  pub fn add_diffCodeBias(&mut self, diffCodeBias: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_DIFFCODEBIAS, diffCodeBias);
  }
  #[inline]
  pub fn add_dataRate(&mut self, dataRate: f64) {
    self.fbb_.push_slot::<f64>(GNSSRawIF_Ingest::VT_DATARATE, dataRate, 0.0);
  }
  #[inline]
  pub fn add_setId(&mut self, setId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_SETID, setId);
  }
  #[inline]
  pub fn add_setLength(&mut self, setLength: i32) {
    self.fbb_.push_slot::<i32>(GNSSRawIF_Ingest::VT_SETLENGTH, setLength, 0);
  }
  #[inline]
  pub fn add_sequenceID(&mut self, sequenceID: i32) {
    self.fbb_.push_slot::<i32>(GNSSRawIF_Ingest::VT_SEQUENCEID, sequenceID, 0);
  }
  #[inline]
  pub fn add_fileName(&mut self, fileName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_FILENAME, fileName);
  }
  #[inline]
  pub fn add_srcTyps(&mut self, srcTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_SRCTYPS, srcTyps);
  }
  #[inline]
  pub fn add_srcIds(&mut self, srcIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_SRCIDS, srcIds);
  }
  #[inline]
  pub fn add_fileSize(&mut self, fileSize: i64) {
    self.fbb_.push_slot::<i64>(GNSSRawIF_Ingest::VT_FILESIZE, fileSize, 0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: GNSSRawIF_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<GNSSRawIF_Ingest_dataMode_Enum>(GNSSRawIF_Ingest::VT_DATAMODE, dataMode, GNSSRawIF_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GNSSRawIF_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GNSSRawIF_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GNSSRawIF_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GNSSRawIF_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GNSSRawIF_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GNSSRawIF_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("esId", &self.esId());
      ds.field("receiver", &self.receiver());
      ds.field("boresight", &self.boresight());
      ds.field("quat", &self.quat());
      ds.field("startIndex", &self.startIndex());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("startLat", &self.startLat());
      ds.field("startLon", &self.startLon());
      ds.field("startAlt", &self.startAlt());
      ds.field("endLat", &self.endLat());
      ds.field("endLon", &self.endLon());
      ds.field("endAlt", &self.endAlt());
      ds.field("centerFreq", &self.centerFreq());
      ds.field("ifFreq", &self.ifFreq());
      ds.field("sampleRate", &self.sampleRate());
      ds.field("postFourier", &self.postFourier());
      ds.field("sampleType", &self.sampleType());
      ds.field("bitDepth", &self.bitDepth());
      ds.field("diffCodeBias", &self.diffCodeBias());
      ds.field("dataRate", &self.dataRate());
      ds.field("setId", &self.setId());
      ds.field("setLength", &self.setLength());
      ds.field("sequenceID", &self.sequenceID());
      ds.field("fileName", &self.fileName());
      ds.field("srcTyps", &self.srcTyps());
      ds.field("srcIds", &self.srcIds());
      ds.field("fileSize", &self.fileSize());
      ds.field("tags", &self.tags());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GNSSRawIF_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub origObjectId: Option<String>,
  pub esId: Option<String>,
  pub receiver: Option<String>,
  pub boresight: Option<Vec<String>>,
  pub quat: Option<Vec<String>>,
  pub startIndex: i32,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub startLat: f64,
  pub startLon: f64,
  pub startAlt: f64,
  pub endLat: f64,
  pub endLon: f64,
  pub endAlt: f64,
  pub centerFreq: Option<Vec<String>>,
  pub ifFreq: Option<Vec<String>>,
  pub sampleRate: Option<Vec<String>>,
  pub postFourier: Option<Vec<String>>,
  pub sampleType: Option<String>,
  pub bitDepth: i32,
  pub diffCodeBias: Option<Vec<String>>,
  pub dataRate: f64,
  pub setId: Option<String>,
  pub setLength: i32,
  pub sequenceID: i32,
  pub fileName: Option<String>,
  pub srcTyps: Option<Vec<String>>,
  pub srcIds: Option<Vec<String>>,
  pub fileSize: i64,
  pub tags: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: GNSSRawIF_Ingest_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for GNSSRawIF_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      esId: None,
      receiver: None,
      boresight: None,
      quat: None,
      startIndex: 0,
      startTime: None,
      endTime: None,
      startLat: 0.0,
      startLon: 0.0,
      startAlt: 0.0,
      endLat: 0.0,
      endLon: 0.0,
      endAlt: 0.0,
      centerFreq: None,
      ifFreq: None,
      sampleRate: None,
      postFourier: None,
      sampleType: None,
      bitDepth: 0,
      diffCodeBias: None,
      dataRate: 0.0,
      setId: None,
      setLength: 0,
      sequenceID: 0,
      fileName: None,
      srcTyps: None,
      srcIds: None,
      fileSize: 0,
      tags: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: GNSSRawIF_Ingest_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl GNSSRawIF_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GNSSRawIF_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let esId = self.esId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiver = self.receiver.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let boresight = self.boresight.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let quat = self.quat.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let startIndex = self.startIndex;
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startLat = self.startLat;
    let startLon = self.startLon;
    let startAlt = self.startAlt;
    let endLat = self.endLat;
    let endLon = self.endLon;
    let endAlt = self.endAlt;
    let centerFreq = self.centerFreq.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ifFreq = self.ifFreq.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sampleRate = self.sampleRate.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let postFourier = self.postFourier.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sampleType = self.sampleType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let bitDepth = self.bitDepth;
    let diffCodeBias = self.diffCodeBias.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let dataRate = self.dataRate;
    let setId = self.setId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let setLength = self.setLength;
    let sequenceID = self.sequenceID;
    let fileName = self.fileName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let srcTyps = self.srcTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcIds = self.srcIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let fileSize = self.fileSize;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    GNSSRawIF_Ingest::create(_fbb, &GNSSRawIF_IngestArgs{
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      origObjectId,
      esId,
      receiver,
      boresight,
      quat,
      startIndex,
      startTime,
      endTime,
      startLat,
      startLon,
      startAlt,
      endLat,
      endLon,
      endAlt,
      centerFreq,
      ifFreq,
      sampleRate,
      postFourier,
      sampleType,
      bitDepth,
      diffCodeBias,
      dataRate,
      setId,
      setLength,
      sequenceID,
      fileName,
      srcTyps,
      srcIds,
      fileSize,
      tags,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `GNSSRawIF_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gnssraw_if_ingest_unchecked`.
pub fn root_as_gnssraw_if_ingest(buf: &[u8]) -> Result<GNSSRawIF_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<GNSSRawIF_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `GNSSRawIF_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_gnssraw_if_ingest_unchecked`.
pub fn size_prefixed_root_as_gnssraw_if_ingest(buf: &[u8]) -> Result<GNSSRawIF_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<GNSSRawIF_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `GNSSRawIF_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gnssraw_if_ingest_unchecked`.
pub fn root_as_gnssraw_if_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GNSSRawIF_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<GNSSRawIF_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `GNSSRawIF_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_gnssraw_if_ingest_unchecked`.
pub fn size_prefixed_root_as_gnssraw_if_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GNSSRawIF_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<GNSSRawIF_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a GNSSRawIF_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `GNSSRawIF_Ingest`.
pub unsafe fn root_as_gnssraw_if_ingest_unchecked(buf: &[u8]) -> GNSSRawIF_Ingest {
  flatbuffers::root_unchecked::<GNSSRawIF_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed GNSSRawIF_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `GNSSRawIF_Ingest`.
pub unsafe fn size_prefixed_root_as_gnssraw_if_ingest_unchecked(buf: &[u8]) -> GNSSRawIF_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<GNSSRawIF_Ingest>(buf)
}
pub const GNSSRAW_IF_INGEST_IDENTIFIER: &str = "GNSS";

#[inline]
pub fn gnssraw_if_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, GNSSRAW_IF_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn gnssraw_if_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, GNSSRAW_IF_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_gnssraw_if_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<GNSSRawIF_Ingest<'a>>) {
  fbb.finish(root, Some(GNSSRAW_IF_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_gnssraw_if_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<GNSSRawIF_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(GNSSRAW_IF_INGEST_IDENTIFIER));
}
