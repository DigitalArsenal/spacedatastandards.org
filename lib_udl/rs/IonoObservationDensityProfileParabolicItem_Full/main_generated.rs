// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationDensityProfileParabolicItem_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Describes the E, F1, and F2 layers as parabolic-shape segments.
pub struct IonoObservationDensityProfileParabolicItem_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationDensityProfileParabolicItem_Full<'a> {
  type Inner = IonoObservationDensityProfileParabolicItem_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationDensityProfileParabolicItem_Full<'a> {
  pub const VT_LAYER: flatbuffers::VOffsetT = 4;
  pub const VT_F: flatbuffers::VOffsetT = 6;
  pub const VT_Z: flatbuffers::VOffsetT = 8;
  pub const VT_Y: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationDensityProfileParabolicItem_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationDensityProfileParabolicItem_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileParabolicItem_Full<'bldr>> {
    let mut builder = IonoObservationDensityProfileParabolicItem_FullBuilder::new(_fbb);
    builder.add_y(args.y);
    builder.add_z(args.z);
    builder.add_f(args.f);
    if let Some(x) = args.layer { builder.add_layer(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationDensityProfileParabolicItem_FullT {
    let layer = self.layer().map(|x| {
      x.to_string()
    });
    let f = self.f();
    let z = self.z();
    let y = self.y();
    IonoObservationDensityProfileParabolicItem_FullT {
      layer,
      f,
      z,
      y,
    }
  }

  /// Ionospheric plasma layer (E, F1, or F2).
  /// Example: /// Example: E
  /// Constraints: No constraints specified.
  #[inline]
  pub fn layer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfileParabolicItem_Full::VT_LAYER, None)}
  }
  /// Plasma frequency at the layer peak, in MHz.
  /// Example: /// Example: 3.621
  /// Constraints: No constraints specified.
  #[inline]
  pub fn f(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileParabolicItem_Full::VT_F, Some(0.0)).unwrap()}
  }
  /// Height of the layer peak, in kilometers.
  /// Example: /// Example: 110.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn z(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileParabolicItem_Full::VT_Z, Some(0.0)).unwrap()}
  }
  /// Half-thickness of the layer, in kilometers.
  /// Example: /// Example: 11.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn y(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileParabolicItem_Full::VT_Y, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IonoObservationDensityProfileParabolicItem_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("layer", Self::VT_LAYER, false)?
     .visit_field::<f64>("f", Self::VT_F, false)?
     .visit_field::<f64>("z", Self::VT_Z, false)?
     .visit_field::<f64>("y", Self::VT_Y, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationDensityProfileParabolicItem_FullArgs<'a> {
    pub layer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub f: f64,
    pub z: f64,
    pub y: f64,
}
impl<'a> Default for IonoObservationDensityProfileParabolicItem_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationDensityProfileParabolicItem_FullArgs {
      layer: None,
      f: 0.0,
      z: 0.0,
      y: 0.0,
    }
  }
}

pub struct IonoObservationDensityProfileParabolicItem_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationDensityProfileParabolicItem_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_layer(&mut self, layer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfileParabolicItem_Full::VT_LAYER, layer);
  }
  #[inline]
  pub fn add_f(&mut self, f: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileParabolicItem_Full::VT_F, f, 0.0);
  }
  #[inline]
  pub fn add_z(&mut self, z: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileParabolicItem_Full::VT_Z, z, 0.0);
  }
  #[inline]
  pub fn add_y(&mut self, y: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileParabolicItem_Full::VT_Y, y, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationDensityProfileParabolicItem_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationDensityProfileParabolicItem_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationDensityProfileParabolicItem_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationDensityProfileParabolicItem_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationDensityProfileParabolicItem_Full");
      ds.field("layer", &self.layer());
      ds.field("f", &self.f());
      ds.field("z", &self.z());
      ds.field("y", &self.y());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationDensityProfileParabolicItem_FullT {
  pub layer: Option<String>,
  pub f: f64,
  pub z: f64,
  pub y: f64,
}
impl Default for IonoObservationDensityProfileParabolicItem_FullT {
  fn default() -> Self {
    Self {
      layer: None,
      f: 0.0,
      z: 0.0,
      y: 0.0,
    }
  }
}
impl IonoObservationDensityProfileParabolicItem_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileParabolicItem_Full<'b>> {
    let layer = self.layer.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let f = self.f;
    let z = self.z;
    let y = self.y;
    IonoObservationDensityProfileParabolicItem_Full::create(_fbb, &IonoObservationDensityProfileParabolicItem_FullArgs{
      layer,
      f,
      z,
      y,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationDensityProfileParabolicItem_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_parabolic_item_full_unchecked`.
pub fn root_as_iono_observation_density_profile_parabolic_item_full(buf: &[u8]) -> Result<IonoObservationDensityProfileParabolicItem_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationDensityProfileParabolicItem_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationDensityProfileParabolicItem_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_density_profile_parabolic_item_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_parabolic_item_full(buf: &[u8]) -> Result<IonoObservationDensityProfileParabolicItem_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationDensityProfileParabolicItem_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationDensityProfileParabolicItem_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_parabolic_item_full_unchecked`.
pub fn root_as_iono_observation_density_profile_parabolic_item_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileParabolicItem_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationDensityProfileParabolicItem_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationDensityProfileParabolicItem_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_parabolic_item_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_parabolic_item_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileParabolicItem_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationDensityProfileParabolicItem_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationDensityProfileParabolicItem_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationDensityProfileParabolicItem_Full`.
pub unsafe fn root_as_iono_observation_density_profile_parabolic_item_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileParabolicItem_Full {
  flatbuffers::root_unchecked::<IonoObservationDensityProfileParabolicItem_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationDensityProfileParabolicItem_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationDensityProfileParabolicItem_Full`.
pub unsafe fn size_prefixed_root_as_iono_observation_density_profile_parabolic_item_full_unchecked(buf: &[u8]) -> IonoObservationDensityProfileParabolicItem_Full {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationDensityProfileParabolicItem_Full>(buf)
}
pub const IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_ITEM_FULL_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_density_profile_parabolic_item_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_ITEM_FULL_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_density_profile_parabolic_item_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_ITEM_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_density_profile_parabolic_item_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationDensityProfileParabolicItem_Full<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_ITEM_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_density_profile_parabolic_item_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationDensityProfileParabolicItem_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_PARABOLIC_ITEM_FULL_IDENTIFIER));
}
