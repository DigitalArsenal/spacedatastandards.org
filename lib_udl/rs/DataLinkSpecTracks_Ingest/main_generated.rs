// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkSpecTracks_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of special track numbers used on the data links. There can be 0 to many DataLinkSpecTracks collections within the datalink service.
pub struct DataLinkSpecTracks_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkSpecTracks_Ingest<'a> {
  type Inner = DataLinkSpecTracks_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkSpecTracks_Ingest<'a> {
  pub const VT_SPECTRACKNUM: flatbuffers::VOffsetT = 4;
  pub const VT_SPECTRACKNUMDESC: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkSpecTracks_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkSpecTracks_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkSpecTracks_Ingest<'bldr>> {
    let mut builder = DataLinkSpecTracks_IngestBuilder::new(_fbb);
    if let Some(x) = args.specTrackNumDesc { builder.add_specTrackNumDesc(x); }
    if let Some(x) = args.specTrackNum { builder.add_specTrackNum(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkSpecTracks_IngestT {
    let specTrackNum = self.specTrackNum().map(|x| {
      x.to_string()
    });
    let specTrackNumDesc = self.specTrackNumDesc().map(|x| {
      x.to_string()
    });
    DataLinkSpecTracks_IngestT {
      specTrackNum,
      specTrackNumDesc,
    }
  }

  /// The special track number used on the data link entered as an octal reference number. Used to identify a particular type of platform (e.g. MPA, KRESTA) or platform name (e.g. TROMP, MOUNT WHITNEY) which is not included in assigned track blocks.
  /// Example: /// Example: 12345
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn specTrackNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkSpecTracks_Ingest::VT_SPECTRACKNUM, None)}
  }
  /// Description of the special track number.
  /// Example: /// Example: SAM SITE CHARLIE
  /// Constraints: Minimum length = 0, Maximum length = 40
  #[inline]
  pub fn specTrackNumDesc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkSpecTracks_Ingest::VT_SPECTRACKNUMDESC, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkSpecTracks_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("specTrackNum", Self::VT_SPECTRACKNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("specTrackNumDesc", Self::VT_SPECTRACKNUMDESC, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkSpecTracks_IngestArgs<'a> {
    pub specTrackNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub specTrackNumDesc: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for DataLinkSpecTracks_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkSpecTracks_IngestArgs {
      specTrackNum: None,
      specTrackNumDesc: None,
    }
  }
}

pub struct DataLinkSpecTracks_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkSpecTracks_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_specTrackNum(&mut self, specTrackNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkSpecTracks_Ingest::VT_SPECTRACKNUM, specTrackNum);
  }
  #[inline]
  pub fn add_specTrackNumDesc(&mut self, specTrackNumDesc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkSpecTracks_Ingest::VT_SPECTRACKNUMDESC, specTrackNumDesc);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkSpecTracks_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkSpecTracks_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkSpecTracks_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkSpecTracks_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkSpecTracks_Ingest");
      ds.field("specTrackNum", &self.specTrackNum());
      ds.field("specTrackNumDesc", &self.specTrackNumDesc());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkSpecTracks_IngestT {
  pub specTrackNum: Option<String>,
  pub specTrackNumDesc: Option<String>,
}
impl Default for DataLinkSpecTracks_IngestT {
  fn default() -> Self {
    Self {
      specTrackNum: None,
      specTrackNumDesc: None,
    }
  }
}
impl DataLinkSpecTracks_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkSpecTracks_Ingest<'b>> {
    let specTrackNum = self.specTrackNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let specTrackNumDesc = self.specTrackNumDesc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    DataLinkSpecTracks_Ingest::create(_fbb, &DataLinkSpecTracks_IngestArgs{
      specTrackNum,
      specTrackNumDesc,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkSpecTracks_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_spec_tracks_ingest_unchecked`.
pub fn root_as_data_link_spec_tracks_ingest(buf: &[u8]) -> Result<DataLinkSpecTracks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkSpecTracks_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkSpecTracks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_spec_tracks_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_spec_tracks_ingest(buf: &[u8]) -> Result<DataLinkSpecTracks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkSpecTracks_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkSpecTracks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_spec_tracks_ingest_unchecked`.
pub fn root_as_data_link_spec_tracks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkSpecTracks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkSpecTracks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkSpecTracks_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_spec_tracks_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_spec_tracks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkSpecTracks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkSpecTracks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkSpecTracks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkSpecTracks_Ingest`.
pub unsafe fn root_as_data_link_spec_tracks_ingest_unchecked(buf: &[u8]) -> DataLinkSpecTracks_Ingest {
  flatbuffers::root_unchecked::<DataLinkSpecTracks_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkSpecTracks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkSpecTracks_Ingest`.
pub unsafe fn size_prefixed_root_as_data_link_spec_tracks_ingest_unchecked(buf: &[u8]) -> DataLinkSpecTracks_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkSpecTracks_Ingest>(buf)
}
pub const DATA_LINK_SPEC_TRACKS_INGEST_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_spec_tracks_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_SPEC_TRACKS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn data_link_spec_tracks_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_SPEC_TRACKS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_spec_tracks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkSpecTracks_Ingest<'a>>) {
  fbb.finish(root, Some(DATA_LINK_SPEC_TRACKS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_spec_tracks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkSpecTracks_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_SPEC_TRACKS_INGEST_IDENTIFIER));
}
