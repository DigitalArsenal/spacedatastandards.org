// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ITEM_TRACKING_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ITEM_TRACKING_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ITEM_TRACKING_FULL_DATA_MODE_ENUM: [ItemTracking_Full_dataMode_Enum; 4] = [
  ItemTracking_Full_dataMode_Enum::REAL,
  ItemTracking_Full_dataMode_Enum::TEST,
  ItemTracking_Full_dataMode_Enum::SIMULATED,
  ItemTracking_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct ItemTracking_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl ItemTracking_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for ItemTracking_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for ItemTracking_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for ItemTracking_Full_dataMode_Enum {
    type Output = ItemTracking_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for ItemTracking_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for ItemTracking_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for ItemTracking_Full_dataMode_Enum {}
pub enum ItemTracking_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// No description available.
pub struct ItemTracking_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ItemTracking_Full<'a> {
  type Inner = ItemTracking_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ItemTracking_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_SCANCODE: flatbuffers::VOffsetT = 8;
  pub const VT_SCGENTOOL: flatbuffers::VOffsetT = 10;
  pub const VT_SCANNERID: flatbuffers::VOffsetT = 12;
  pub const VT_TS: flatbuffers::VOffsetT = 14;
  pub const VT_IDITEM: flatbuffers::VOffsetT = 16;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 18;
  pub const VT_LAT: flatbuffers::VOffsetT = 20;
  pub const VT_LON: flatbuffers::VOffsetT = 22;
  pub const VT_SCANTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_DVCODE: flatbuffers::VOffsetT = 26;
  pub const VT_NOTES: flatbuffers::VOffsetT = 28;
  pub const VT_KEYS: flatbuffers::VOffsetT = 30;
  pub const VT_VALUES: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 38;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 40;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 44;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 46;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ItemTracking_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ItemTracking_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<ItemTracking_Full<'bldr>> {
    let mut builder = ItemTracking_FullBuilder::new(_fbb);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.values { builder.add_values(x); }
    if let Some(x) = args.keys { builder.add_keys(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.dvCode { builder.add_dvCode(x); }
    if let Some(x) = args.scanType { builder.add_scanType(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.idItem { builder.add_idItem(x); }
    if let Some(x) = args.ts { builder.add_ts(x); }
    if let Some(x) = args.scannerId { builder.add_scannerId(x); }
    if let Some(x) = args.scGenTool { builder.add_scGenTool(x); }
    if let Some(x) = args.scanCode { builder.add_scanCode(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> ItemTracking_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let scanCode = self.scanCode().map(|x| {
      x.to_string()
    });
    let scGenTool = self.scGenTool().map(|x| {
      x.to_string()
    });
    let scannerId = self.scannerId().map(|x| {
      x.to_string()
    });
    let ts = self.ts().map(|x| {
      x.to_string()
    });
    let idItem = self.idItem().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let lat = self.lat();
    let lon = self.lon();
    let scanType = self.scanType().map(|x| {
      x.to_string()
    });
    let dvCode = self.dvCode().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let keys = self.keys().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let values = self.values().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    ItemTracking_FullT {
      id,
      classificationMarking,
      scanCode,
      scGenTool,
      scannerId,
      ts,
      idItem,
      type_,
      lat,
      lon,
      scanType,
      dvCode,
      notes,
      keys,
      values,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The tracking identifier of an item or person. May be similar in representation of a barcode or UPC.
  /// Example: /// Example: ABC1234
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn scanCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_SCANCODE, None)}
  }
  /// The algorithm name or standard that generated the scanCode (e.g. UPC-A, EAN-13, GTIN, SSCC, bID, JAN, etc.).
  /// Example: /// Example: bID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn scGenTool(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_SCGENTOOL, None)}
  }
  /// The ID of the scanner or input device.
  /// Example: /// Example: 2051M
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn scannerId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_SCANNERID, None)}
  }
  /// The timestamp of the scan, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-03-21T14:22:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ts(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_TS, None)}
  }
  /// The UDL ID of the item this record is associated with.
  /// Example: /// Example: 36054487-bcba-6e2d-4f3b-9f25738b2639
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idItem(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_IDITEM, None)}
  }
  /// The type of item that is being scanned (e.g. CARGO, PERSON, MAIL, MICAP, OTHER).
  /// Example: /// Example: CARGO
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_TYPE_, None)}
  }
  /// WGS84 latitude where the item was scanned, in degrees.
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ItemTracking_Full::VT_LAT, Some(0.0)).unwrap()}
  }
  /// WGS84 longitude where the item was scanned, in degrees.
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(ItemTracking_Full::VT_LON, Some(0.0)).unwrap()}
  }
  /// The type of scan for tracking the item within it's journey  (e.g. IN, OUT, RECEIVED, DELIVERED, TRANSIT, ABANDONDED, REFUSED, UNABLE, RETURNED, HELD, OTHER). For example, received and delivered are for when an item is received from or delivered to the end customer. In and out are for stops in between such as being loaded on an airplane or received at a warehouse.
  /// Example: /// Example: TRANSIT
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn scanType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_SCANTYPE, None)}
  }
  /// The United States distinguished visitor code of the person scanned, only applicable to people.
  /// Example: /// Example: DV-4
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn dvCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_DVCODE, None)}
  }
  /// Optional notes or comments about the tracking data.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_NOTES, None)}
  }
  /// Array of keys that may be associated with this tracked item.
  /// Example: /// Example: ['tapeColor', 'hazmat']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn keys(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ItemTracking_Full::VT_KEYS, None)}
  }
  /// Array of values for the keys that may be associated to this tracked item. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['yellow', 'false']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn values(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(ItemTracking_Full::VT_VALUES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-03-21T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ItemTracking_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> ItemTracking_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<ItemTracking_Full_dataMode_Enum>(ItemTracking_Full::VT_DATAMODE, Some(ItemTracking_Full_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ItemTracking_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scanCode", Self::VT_SCANCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scGenTool", Self::VT_SCGENTOOL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scannerId", Self::VT_SCANNERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ts", Self::VT_TS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idItem", Self::VT_IDITEM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scanType", Self::VT_SCANTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dvCode", Self::VT_DVCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("keys", Self::VT_KEYS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("values", Self::VT_VALUES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<ItemTracking_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct ItemTracking_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scanCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scGenTool: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scannerId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ts: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idItem: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lat: f64,
    pub lon: f64,
    pub scanType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dvCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub keys: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: ItemTracking_Full_dataMode_Enum,
}
impl<'a> Default for ItemTracking_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    ItemTracking_FullArgs {
      id: None,
      classificationMarking: None,
      scanCode: None,
      scGenTool: None,
      scannerId: None,
      ts: None,
      idItem: None,
      type_: None,
      lat: 0.0,
      lon: 0.0,
      scanType: None,
      dvCode: None,
      notes: None,
      keys: None,
      values: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: ItemTracking_Full_dataMode_Enum::REAL,
    }
  }
}

pub struct ItemTracking_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ItemTracking_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_scanCode(&mut self, scanCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_SCANCODE, scanCode);
  }
  #[inline]
  pub fn add_scGenTool(&mut self, scGenTool: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_SCGENTOOL, scGenTool);
  }
  #[inline]
  pub fn add_scannerId(&mut self, scannerId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_SCANNERID, scannerId);
  }
  #[inline]
  pub fn add_ts(&mut self, ts: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_TS, ts);
  }
  #[inline]
  pub fn add_idItem(&mut self, idItem: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_IDITEM, idItem);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(ItemTracking_Full::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(ItemTracking_Full::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_scanType(&mut self, scanType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_SCANTYPE, scanType);
  }
  #[inline]
  pub fn add_dvCode(&mut self, dvCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_DVCODE, dvCode);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_keys(&mut self, keys: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_KEYS, keys);
  }
  #[inline]
  pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_VALUES, values);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ItemTracking_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: ItemTracking_Full_dataMode_Enum) {
    self.fbb_.push_slot::<ItemTracking_Full_dataMode_Enum>(ItemTracking_Full::VT_DATAMODE, dataMode, ItemTracking_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ItemTracking_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ItemTracking_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ItemTracking_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ItemTracking_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ItemTracking_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("scanCode", &self.scanCode());
      ds.field("scGenTool", &self.scGenTool());
      ds.field("scannerId", &self.scannerId());
      ds.field("ts", &self.ts());
      ds.field("idItem", &self.idItem());
      ds.field("type_", &self.type_());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("scanType", &self.scanType());
      ds.field("dvCode", &self.dvCode());
      ds.field("notes", &self.notes());
      ds.field("keys", &self.keys());
      ds.field("values", &self.values());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ItemTracking_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub scanCode: Option<String>,
  pub scGenTool: Option<String>,
  pub scannerId: Option<String>,
  pub ts: Option<String>,
  pub idItem: Option<String>,
  pub type_: Option<String>,
  pub lat: f64,
  pub lon: f64,
  pub scanType: Option<String>,
  pub dvCode: Option<String>,
  pub notes: Option<String>,
  pub keys: Option<Vec<String>>,
  pub values: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: ItemTracking_Full_dataMode_Enum,
}
impl Default for ItemTracking_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      scanCode: None,
      scGenTool: None,
      scannerId: None,
      ts: None,
      idItem: None,
      type_: None,
      lat: 0.0,
      lon: 0.0,
      scanType: None,
      dvCode: None,
      notes: None,
      keys: None,
      values: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: ItemTracking_Full_dataMode_Enum::REAL,
    }
  }
}
impl ItemTracking_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ItemTracking_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let scanCode = self.scanCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let scGenTool = self.scGenTool.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let scannerId = self.scannerId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ts = self.ts.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idItem = self.idItem.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lat = self.lat;
    let lon = self.lon;
    let scanType = self.scanType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dvCode = self.dvCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let keys = self.keys.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let values = self.values.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    ItemTracking_Full::create(_fbb, &ItemTracking_FullArgs{
      id,
      classificationMarking,
      scanCode,
      scGenTool,
      scannerId,
      ts,
      idItem,
      type_,
      lat,
      lon,
      scanType,
      dvCode,
      notes,
      keys,
      values,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ItemTracking_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_tracking_full_unchecked`.
pub fn root_as_item_tracking_full(buf: &[u8]) -> Result<ItemTracking_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ItemTracking_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ItemTracking_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_item_tracking_full_unchecked`.
pub fn size_prefixed_root_as_item_tracking_full(buf: &[u8]) -> Result<ItemTracking_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ItemTracking_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ItemTracking_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_tracking_full_unchecked`.
pub fn root_as_item_tracking_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ItemTracking_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ItemTracking_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ItemTracking_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_item_tracking_full_unchecked`.
pub fn size_prefixed_root_as_item_tracking_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ItemTracking_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ItemTracking_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ItemTracking_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ItemTracking_Full`.
pub unsafe fn root_as_item_tracking_full_unchecked(buf: &[u8]) -> ItemTracking_Full {
  flatbuffers::root_unchecked::<ItemTracking_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ItemTracking_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ItemTracking_Full`.
pub unsafe fn size_prefixed_root_as_item_tracking_full_unchecked(buf: &[u8]) -> ItemTracking_Full {
  flatbuffers::size_prefixed_root_unchecked::<ItemTracking_Full>(buf)
}
pub const ITEM_TRACKING_FULL_IDENTIFIER: &str = "ITEM";

#[inline]
pub fn item_tracking_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ITEM_TRACKING_FULL_IDENTIFIER, false)
}

#[inline]
pub fn item_tracking_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ITEM_TRACKING_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_item_tracking_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ItemTracking_Full<'a>>) {
  fbb.finish(root, Some(ITEM_TRACKING_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_item_tracking_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ItemTracking_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(ITEM_TRACKING_FULL_IDENTIFIER));
}
