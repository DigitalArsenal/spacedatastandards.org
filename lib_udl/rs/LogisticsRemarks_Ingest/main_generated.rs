// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum LogisticsRemarks_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Remarks associated with this LogisticsSupport record.
pub struct LogisticsRemarks_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LogisticsRemarks_Ingest<'a> {
  type Inner = LogisticsRemarks_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LogisticsRemarks_Ingest<'a> {
  pub const VT_USERNAME: flatbuffers::VOffsetT = 4;
  pub const VT_REMARK: flatbuffers::VOffsetT = 6;
  pub const VT_LASTCHANGED: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LogisticsRemarks_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogisticsRemarks_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<LogisticsRemarks_Ingest<'bldr>> {
    let mut builder = LogisticsRemarks_IngestBuilder::new(_fbb);
    if let Some(x) = args.lastChanged { builder.add_lastChanged(x); }
    if let Some(x) = args.remark { builder.add_remark(x); }
    if let Some(x) = args.username { builder.add_username(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> LogisticsRemarks_IngestT {
    let username = self.username().map(|x| {
      x.to_string()
    });
    let remark = self.remark().map(|x| {
      x.to_string()
    });
    let lastChanged = self.lastChanged().map(|x| {
      x.to_string()
    });
    LogisticsRemarks_IngestT {
      username,
      remark,
      lastChanged,
    }
  }

  /// User who published the remark.
  /// Example: /// Example: JSMITH
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn username(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsRemarks_Ingest::VT_USERNAME, None)}
  }
  /// Text of the remark.
  /// Example: /// Example: EXAMPLE REMARK
  /// Constraints: Minimum length = 0, Maximum length = 4000
  #[inline]
  pub fn remark(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsRemarks_Ingest::VT_REMARK, None)}
  }
  /// Date the remark was published or updated, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lastChanged(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsRemarks_Ingest::VT_LASTCHANGED, None)}
  }
}

impl flatbuffers::Verifiable for LogisticsRemarks_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("username", Self::VT_USERNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("remark", Self::VT_REMARK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lastChanged", Self::VT_LASTCHANGED, false)?
     .finish();
    Ok(())
  }
}
pub struct LogisticsRemarks_IngestArgs<'a> {
    pub username: Option<flatbuffers::WIPOffset<&'a str>>,
    pub remark: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lastChanged: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LogisticsRemarks_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogisticsRemarks_IngestArgs {
      username: None,
      remark: None,
      lastChanged: None,
    }
  }
}

pub struct LogisticsRemarks_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogisticsRemarks_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_username(&mut self, username: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsRemarks_Ingest::VT_USERNAME, username);
  }
  #[inline]
  pub fn add_remark(&mut self, remark: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsRemarks_Ingest::VT_REMARK, remark);
  }
  #[inline]
  pub fn add_lastChanged(&mut self, lastChanged: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsRemarks_Ingest::VT_LASTCHANGED, lastChanged);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogisticsRemarks_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogisticsRemarks_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LogisticsRemarks_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LogisticsRemarks_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LogisticsRemarks_Ingest");
      ds.field("username", &self.username());
      ds.field("remark", &self.remark());
      ds.field("lastChanged", &self.lastChanged());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LogisticsRemarks_IngestT {
  pub username: Option<String>,
  pub remark: Option<String>,
  pub lastChanged: Option<String>,
}
impl Default for LogisticsRemarks_IngestT {
  fn default() -> Self {
    Self {
      username: None,
      remark: None,
      lastChanged: None,
    }
  }
}
impl LogisticsRemarks_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LogisticsRemarks_Ingest<'b>> {
    let username = self.username.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let remark = self.remark.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lastChanged = self.lastChanged.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LogisticsRemarks_Ingest::create(_fbb, &LogisticsRemarks_IngestArgs{
      username,
      remark,
      lastChanged,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LogisticsRemarks_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_remarks_ingest_unchecked`.
pub fn root_as_logistics_remarks_ingest(buf: &[u8]) -> Result<LogisticsRemarks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LogisticsRemarks_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LogisticsRemarks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_logistics_remarks_ingest_unchecked`.
pub fn size_prefixed_root_as_logistics_remarks_ingest(buf: &[u8]) -> Result<LogisticsRemarks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LogisticsRemarks_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LogisticsRemarks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_remarks_ingest_unchecked`.
pub fn root_as_logistics_remarks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsRemarks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LogisticsRemarks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LogisticsRemarks_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_remarks_ingest_unchecked`.
pub fn size_prefixed_root_as_logistics_remarks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsRemarks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LogisticsRemarks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LogisticsRemarks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LogisticsRemarks_Ingest`.
pub unsafe fn root_as_logistics_remarks_ingest_unchecked(buf: &[u8]) -> LogisticsRemarks_Ingest {
  flatbuffers::root_unchecked::<LogisticsRemarks_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LogisticsRemarks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LogisticsRemarks_Ingest`.
pub unsafe fn size_prefixed_root_as_logistics_remarks_ingest_unchecked(buf: &[u8]) -> LogisticsRemarks_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<LogisticsRemarks_Ingest>(buf)
}
pub const LOGISTICS_REMARKS_INGEST_IDENTIFIER: &str = "LOGI";

#[inline]
pub fn logistics_remarks_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_REMARKS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn logistics_remarks_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_REMARKS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_logistics_remarks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LogisticsRemarks_Ingest<'a>>) {
  fbb.finish(root, Some(LOGISTICS_REMARKS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_logistics_remarks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LogisticsRemarks_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(LOGISTICS_REMARKS_INGEST_IDENTIFIER));
}
