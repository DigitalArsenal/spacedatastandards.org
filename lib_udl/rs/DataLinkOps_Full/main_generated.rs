// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkOps_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of information describing the establishment and detailed operation of tactical data links. There can be 0 to many DataLinkOps collections within the datalink service.
pub struct DataLinkOps_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkOps_Full<'a> {
  type Inner = DataLinkOps_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkOps_Full<'a> {
  pub const VT_LINKNAME: flatbuffers::VOffsetT = 4;
  pub const VT_LINKSTARTTIME: flatbuffers::VOffsetT = 6;
  pub const VT_LINKSTOPTIME: flatbuffers::VOffsetT = 8;
  pub const VT_LINKSTOPTIMEMOD: flatbuffers::VOffsetT = 10;
  pub const VT_LINKDETAILS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkOps_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkOps_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkOps_Full<'bldr>> {
    let mut builder = DataLinkOps_FullBuilder::new(_fbb);
    if let Some(x) = args.linkDetails { builder.add_linkDetails(x); }
    if let Some(x) = args.linkStopTimeMod { builder.add_linkStopTimeMod(x); }
    if let Some(x) = args.linkStopTime { builder.add_linkStopTime(x); }
    if let Some(x) = args.linkStartTime { builder.add_linkStartTime(x); }
    if let Some(x) = args.linkName { builder.add_linkName(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkOps_FullT {
    let linkName = self.linkName().map(|x| {
      x.to_string()
    });
    let linkStartTime = self.linkStartTime().map(|x| {
      x.to_string()
    });
    let linkStopTime = self.linkStopTime().map(|x| {
      x.to_string()
    });
    let linkStopTimeMod = self.linkStopTimeMod().map(|x| {
      x.to_string()
    });
    let linkDetails = self.linkDetails().map(|x| {
      x.to_string()
    });
    DataLinkOps_FullT {
      linkName,
      linkStartTime,
      linkStopTime,
      linkStopTimeMod,
      linkDetails,
    }
  }

  /// Name of the data link.
  /// Example: /// Example: Link-16
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn linkName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkOps_Full::VT_LINKNAME, None)}
  }
  /// The start of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-07T13:55:43.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn linkStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkOps_Full::VT_LINKSTARTTIME, None)}
  }
  /// The end of the effective time period of the data link, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-08T13:55:43.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn linkStopTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkOps_Full::VT_LINKSTOPTIME, None)}
  }
  /// A qualifier for the end of the effective time period of this data link, such as AFTER, ASOF, NLT, etc. Used with field linkStopTimeMod to indicate a relative time.
  /// Example: /// Example: AFTER
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn linkStopTimeMod(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkOps_Full::VT_LINKSTOPTIMEMOD, None)}
  }
  /// Detailed characteristics of the data link.
  /// Example: /// Example: Link details
  /// Constraints: Minimum length = 0, Maximum length = 3000
  #[inline]
  pub fn linkDetails(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkOps_Full::VT_LINKDETAILS, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkOps_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("linkName", Self::VT_LINKNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("linkStartTime", Self::VT_LINKSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("linkStopTime", Self::VT_LINKSTOPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("linkStopTimeMod", Self::VT_LINKSTOPTIMEMOD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("linkDetails", Self::VT_LINKDETAILS, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkOps_FullArgs<'a> {
    pub linkName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub linkStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub linkStopTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub linkStopTimeMod: Option<flatbuffers::WIPOffset<&'a str>>,
    pub linkDetails: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for DataLinkOps_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkOps_FullArgs {
      linkName: None,
      linkStartTime: None,
      linkStopTime: None,
      linkStopTimeMod: None,
      linkDetails: None,
    }
  }
}

pub struct DataLinkOps_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkOps_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_linkName(&mut self, linkName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkOps_Full::VT_LINKNAME, linkName);
  }
  #[inline]
  pub fn add_linkStartTime(&mut self, linkStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkOps_Full::VT_LINKSTARTTIME, linkStartTime);
  }
  #[inline]
  pub fn add_linkStopTime(&mut self, linkStopTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkOps_Full::VT_LINKSTOPTIME, linkStopTime);
  }
  #[inline]
  pub fn add_linkStopTimeMod(&mut self, linkStopTimeMod: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkOps_Full::VT_LINKSTOPTIMEMOD, linkStopTimeMod);
  }
  #[inline]
  pub fn add_linkDetails(&mut self, linkDetails: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkOps_Full::VT_LINKDETAILS, linkDetails);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkOps_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkOps_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkOps_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkOps_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkOps_Full");
      ds.field("linkName", &self.linkName());
      ds.field("linkStartTime", &self.linkStartTime());
      ds.field("linkStopTime", &self.linkStopTime());
      ds.field("linkStopTimeMod", &self.linkStopTimeMod());
      ds.field("linkDetails", &self.linkDetails());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkOps_FullT {
  pub linkName: Option<String>,
  pub linkStartTime: Option<String>,
  pub linkStopTime: Option<String>,
  pub linkStopTimeMod: Option<String>,
  pub linkDetails: Option<String>,
}
impl Default for DataLinkOps_FullT {
  fn default() -> Self {
    Self {
      linkName: None,
      linkStartTime: None,
      linkStopTime: None,
      linkStopTimeMod: None,
      linkDetails: None,
    }
  }
}
impl DataLinkOps_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkOps_Full<'b>> {
    let linkName = self.linkName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let linkStartTime = self.linkStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let linkStopTime = self.linkStopTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let linkStopTimeMod = self.linkStopTimeMod.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let linkDetails = self.linkDetails.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    DataLinkOps_Full::create(_fbb, &DataLinkOps_FullArgs{
      linkName,
      linkStartTime,
      linkStopTime,
      linkStopTimeMod,
      linkDetails,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkOps_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_ops_full_unchecked`.
pub fn root_as_data_link_ops_full(buf: &[u8]) -> Result<DataLinkOps_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkOps_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkOps_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_ops_full_unchecked`.
pub fn size_prefixed_root_as_data_link_ops_full(buf: &[u8]) -> Result<DataLinkOps_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkOps_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkOps_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_ops_full_unchecked`.
pub fn root_as_data_link_ops_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkOps_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkOps_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkOps_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_ops_full_unchecked`.
pub fn size_prefixed_root_as_data_link_ops_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkOps_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkOps_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkOps_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkOps_Full`.
pub unsafe fn root_as_data_link_ops_full_unchecked(buf: &[u8]) -> DataLinkOps_Full {
  flatbuffers::root_unchecked::<DataLinkOps_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkOps_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkOps_Full`.
pub unsafe fn size_prefixed_root_as_data_link_ops_full_unchecked(buf: &[u8]) -> DataLinkOps_Full {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkOps_Full>(buf)
}
pub const DATA_LINK_OPS_FULL_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_ops_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_OPS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn data_link_ops_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_OPS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_ops_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkOps_Full<'a>>) {
  fbb.finish(root, Some(DATA_LINK_OPS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_ops_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkOps_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_OPS_FULL_IDENTIFIER));
}
