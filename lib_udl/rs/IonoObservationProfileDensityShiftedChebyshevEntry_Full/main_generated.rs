// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationProfileDensityShiftedChebyshevEntry_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Coefficients, using ‘shiftedChebyshev’ sub-field, to describe E, F1, and bottomside F2 profile shapes, or height uncertainty boundaries (upper and lower).
pub struct IonoObservationProfileDensityShiftedChebyshevEntry_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationProfileDensityShiftedChebyshevEntry_Full<'a> {
  type Inner = IonoObservationProfileDensityShiftedChebyshevEntry_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationProfileDensityShiftedChebyshevEntry_Full<'a> {
  pub const VT_LAYER: flatbuffers::VOffsetT = 4;
  pub const VT_FSTART: flatbuffers::VOffsetT = 6;
  pub const VT_FSTOP: flatbuffers::VOffsetT = 8;
  pub const VT_PEAKHEIGHT: flatbuffers::VOffsetT = 10;
  pub const VT_ZHALFNM: flatbuffers::VOffsetT = 12;
  pub const VT_N: flatbuffers::VOffsetT = 14;
  pub const VT_COEFFS: flatbuffers::VOffsetT = 16;
  pub const VT_ERROR: flatbuffers::VOffsetT = 18;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationProfileDensityShiftedChebyshevEntry_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationProfileDensityShiftedChebyshevEntry_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'bldr>> {
    let mut builder = IonoObservationProfileDensityShiftedChebyshevEntry_FullBuilder::new(_fbb);
    builder.add_error(args.error);
    builder.add_zhalfNm(args.zhalfNm);
    builder.add_peakheight(args.peakheight);
    builder.add_fstop(args.fstop);
    builder.add_fstart(args.fstart);
    if let Some(x) = args.coeffs { builder.add_coeffs(x); }
    builder.add_n(args.n);
    if let Some(x) = args.layer { builder.add_layer(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationProfileDensityShiftedChebyshevEntry_FullT {
    let layer = self.layer().map(|x| {
      x.to_string()
    });
    let fstart = self.fstart();
    let fstop = self.fstop();
    let peakheight = self.peakheight();
    let zhalfNm = self.zhalfNm();
    let n = self.n();
    let coeffs = self.coeffs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let error = self.error();
    IonoObservationProfileDensityShiftedChebyshevEntry_FullT {
      layer,
      fstart,
      fstop,
      peakheight,
      zhalfNm,
      n,
      coeffs,
      error,
    }
  }

  /// The ionospheric plasma layer.
  /// Example: /// Example: F2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn layer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_LAYER, None)}
  }
  /// Start frequency of the layer, in MHz.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fstart(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_FSTART, Some(0.0)).unwrap()}
  }
  /// Stop frequency of the layer, in MHz.
  /// Example: /// Example: 1.39
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fstop(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_FSTOP, Some(0.0)).unwrap()}
  }
  /// Peak height of the layer, in kilometers.
  /// Example: /// Example: 110.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn peakheight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_PEAKHEIGHT, Some(0.0)).unwrap()}
  }
  /// Height at which density is half of the peak Nm, in kilometers.
  /// Example: /// Example: 210.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zhalfNm(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_ZHALFNM, Some(0.0)).unwrap()}
  }
  /// Number of coefficients in the expansion.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn n(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_N, Some(0)).unwrap()}
  }
  /// Array of coefficients.
  /// Example: /// Example: [-11.2, -10.536, 3.357, -0.888, 0.155]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn coeffs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_COEFFS, None)}
  }
  /// Best fit error.
  /// Example: /// Example: 0.02
  /// Constraints: No constraints specified.
  #[inline]
  pub fn error(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_ERROR, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IonoObservationProfileDensityShiftedChebyshevEntry_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("layer", Self::VT_LAYER, false)?
     .visit_field::<f64>("fstart", Self::VT_FSTART, false)?
     .visit_field::<f64>("fstop", Self::VT_FSTOP, false)?
     .visit_field::<f64>("peakheight", Self::VT_PEAKHEIGHT, false)?
     .visit_field::<f64>("zhalfNm", Self::VT_ZHALFNM, false)?
     .visit_field::<i32>("n", Self::VT_N, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("coeffs", Self::VT_COEFFS, false)?
     .visit_field::<f64>("error", Self::VT_ERROR, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationProfileDensityShiftedChebyshevEntry_FullArgs<'a> {
    pub layer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fstart: f64,
    pub fstop: f64,
    pub peakheight: f64,
    pub zhalfNm: f64,
    pub n: i32,
    pub coeffs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub error: f64,
}
impl<'a> Default for IonoObservationProfileDensityShiftedChebyshevEntry_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationProfileDensityShiftedChebyshevEntry_FullArgs {
      layer: None,
      fstart: 0.0,
      fstop: 0.0,
      peakheight: 0.0,
      zhalfNm: 0.0,
      n: 0,
      coeffs: None,
      error: 0.0,
    }
  }
}

pub struct IonoObservationProfileDensityShiftedChebyshevEntry_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationProfileDensityShiftedChebyshevEntry_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_layer(&mut self, layer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_LAYER, layer);
  }
  #[inline]
  pub fn add_fstart(&mut self, fstart: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_FSTART, fstart, 0.0);
  }
  #[inline]
  pub fn add_fstop(&mut self, fstop: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_FSTOP, fstop, 0.0);
  }
  #[inline]
  pub fn add_peakheight(&mut self, peakheight: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_PEAKHEIGHT, peakheight, 0.0);
  }
  #[inline]
  pub fn add_zhalfNm(&mut self, zhalfNm: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_ZHALFNM, zhalfNm, 0.0);
  }
  #[inline]
  pub fn add_n(&mut self, n: i32) {
    self.fbb_.push_slot::<i32>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_N, n, 0);
  }
  #[inline]
  pub fn add_coeffs(&mut self, coeffs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_COEFFS, coeffs);
  }
  #[inline]
  pub fn add_error(&mut self, error: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationProfileDensityShiftedChebyshevEntry_Full::VT_ERROR, error, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationProfileDensityShiftedChebyshevEntry_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationProfileDensityShiftedChebyshevEntry_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationProfileDensityShiftedChebyshevEntry_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationProfileDensityShiftedChebyshevEntry_Full");
      ds.field("layer", &self.layer());
      ds.field("fstart", &self.fstart());
      ds.field("fstop", &self.fstop());
      ds.field("peakheight", &self.peakheight());
      ds.field("zhalfNm", &self.zhalfNm());
      ds.field("n", &self.n());
      ds.field("coeffs", &self.coeffs());
      ds.field("error", &self.error());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationProfileDensityShiftedChebyshevEntry_FullT {
  pub layer: Option<String>,
  pub fstart: f64,
  pub fstop: f64,
  pub peakheight: f64,
  pub zhalfNm: f64,
  pub n: i32,
  pub coeffs: Option<Vec<String>>,
  pub error: f64,
}
impl Default for IonoObservationProfileDensityShiftedChebyshevEntry_FullT {
  fn default() -> Self {
    Self {
      layer: None,
      fstart: 0.0,
      fstop: 0.0,
      peakheight: 0.0,
      zhalfNm: 0.0,
      n: 0,
      coeffs: None,
      error: 0.0,
    }
  }
}
impl IonoObservationProfileDensityShiftedChebyshevEntry_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'b>> {
    let layer = self.layer.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fstart = self.fstart;
    let fstop = self.fstop;
    let peakheight = self.peakheight;
    let zhalfNm = self.zhalfNm;
    let n = self.n;
    let coeffs = self.coeffs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let error = self.error;
    IonoObservationProfileDensityShiftedChebyshevEntry_Full::create(_fbb, &IonoObservationProfileDensityShiftedChebyshevEntry_FullArgs{
      layer,
      fstart,
      fstop,
      peakheight,
      zhalfNm,
      n,
      coeffs,
      error,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationProfileDensityShiftedChebyshevEntry_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_unchecked`.
pub fn root_as_iono_observation_profile_density_shifted_chebyshev_entry_full(buf: &[u8]) -> Result<IonoObservationProfileDensityShiftedChebyshevEntry_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationProfileDensityShiftedChebyshevEntry_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationProfileDensityShiftedChebyshevEntry_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_profile_density_shifted_chebyshev_entry_full(buf: &[u8]) -> Result<IonoObservationProfileDensityShiftedChebyshevEntry_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationProfileDensityShiftedChebyshevEntry_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationProfileDensityShiftedChebyshevEntry_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_unchecked`.
pub fn root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationProfileDensityShiftedChebyshevEntry_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationProfileDensityShiftedChebyshevEntry_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationProfileDensityShiftedChebyshevEntry_Full`.
pub unsafe fn root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_unchecked(buf: &[u8]) -> IonoObservationProfileDensityShiftedChebyshevEntry_Full {
  flatbuffers::root_unchecked::<IonoObservationProfileDensityShiftedChebyshevEntry_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationProfileDensityShiftedChebyshevEntry_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationProfileDensityShiftedChebyshevEntry_Full`.
pub unsafe fn size_prefixed_root_as_iono_observation_profile_density_shifted_chebyshev_entry_full_unchecked(buf: &[u8]) -> IonoObservationProfileDensityShiftedChebyshevEntry_Full {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationProfileDensityShiftedChebyshevEntry_Full>(buf)
}
pub const IONO_OBSERVATION_PROFILE_DENSITY_SHIFTED_CHEBYSHEV_ENTRY_FULL_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_profile_density_shifted_chebyshev_entry_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_PROFILE_DENSITY_SHIFTED_CHEBYSHEV_ENTRY_FULL_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_profile_density_shifted_chebyshev_entry_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_PROFILE_DENSITY_SHIFTED_CHEBYSHEV_ENTRY_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_profile_density_shifted_chebyshev_entry_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_PROFILE_DENSITY_SHIFTED_CHEBYSHEV_ENTRY_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_profile_density_shifted_chebyshev_entry_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationProfileDensityShiftedChebyshevEntry_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_PROFILE_DENSITY_SHIFTED_CHEBYSHEV_ENTRY_FULL_IDENTIFIER));
}
