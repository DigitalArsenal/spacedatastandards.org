// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_GEOSTATUS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_GEOSTATUS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_GEOSTATUS_FULL_DATA_MODE_ENUM: [GEOStatus_Full_dataMode_Enum; 4] = [
  GEOStatus_Full_dataMode_Enum::REAL,
  GEOStatus_Full_dataMode_Enum::TEST,
  GEOStatus_Full_dataMode_Enum::SIMULATED,
  GEOStatus_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct GEOStatus_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl GEOStatus_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for GEOStatus_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for GEOStatus_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for GEOStatus_Full_dataMode_Enum {
    type Output = GEOStatus_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for GEOStatus_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for GEOStatus_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for GEOStatus_Full_dataMode_Enum {}
pub enum GEOStatus_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information for the specified on-orbit GEO spacecraft, including status, expected longitude limits, and drift rates.
pub struct GEOStatus_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GEOStatus_Full<'a> {
  type Inner = GEOStatus_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GEOStatus_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 8;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 10;
  pub const VT_SS: flatbuffers::VOffsetT = 12;
  pub const VT_SC: flatbuffers::VOffsetT = 14;
  pub const VT_RELATIVEENERGY: flatbuffers::VOffsetT = 16;
  pub const VT_LONGITUDERATE: flatbuffers::VOffsetT = 18;
  pub const VT_LONGITUDEMIN: flatbuffers::VOffsetT = 20;
  pub const VT_LONGITUDEMAX: flatbuffers::VOffsetT = 22;
  pub const VT_CONFIDENCELEVEL: flatbuffers::VOffsetT = 24;
  pub const VT_PLANECHANGESTATUS: flatbuffers::VOffsetT = 26;
  pub const VT_TROUGHTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_LOSTFLAG: flatbuffers::VOffsetT = 30;
  pub const VT_SEMIANNUALCORRFLAG: flatbuffers::VOffsetT = 32;
  pub const VT_OBJECTSTATUS: flatbuffers::VOffsetT = 34;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 36;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 38;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 40;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 42;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 44;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 46;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 48;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 50;
  pub const VT_ONORBIT: flatbuffers::VOffsetT = 52;
  pub const VT_SATNO: flatbuffers::VOffsetT = 54;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 56;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GEOStatus_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args GEOStatus_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<GEOStatus_Full<'bldr>> {
    let mut builder = GEOStatus_FullBuilder::new(_fbb);
    builder.add_longitudeMax(args.longitudeMax);
    builder.add_longitudeMin(args.longitudeMin);
    builder.add_longitudeRate(args.longitudeRate);
    builder.add_relativeEnergy(args.relativeEnergy);
    builder.add_sc(args.sc);
    builder.add_ss(args.ss);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.onOrbit { builder.add_onOrbit(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    if let Some(x) = args.objectStatus { builder.add_objectStatus(x); }
    if let Some(x) = args.troughType { builder.add_troughType(x); }
    if let Some(x) = args.planeChangeStatus { builder.add_planeChangeStatus(x); }
    if let Some(x) = args.confidenceLevel { builder.add_confidenceLevel(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_semiAnnualCorrFlag(args.semiAnnualCorrFlag);
    builder.add_lostFlag(args.lostFlag);
    builder.finish()
  }

  pub fn unpack(&self) -> GEOStatus_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let ss = self.ss();
    let sc = self.sc();
    let relativeEnergy = self.relativeEnergy();
    let longitudeRate = self.longitudeRate();
    let longitudeMin = self.longitudeMin();
    let longitudeMax = self.longitudeMax();
    let confidenceLevel = self.confidenceLevel().map(|x| {
      x.to_string()
    });
    let planeChangeStatus = self.planeChangeStatus().map(|x| {
      x.to_string()
    });
    let troughType = self.troughType().map(|x| {
      x.to_string()
    });
    let lostFlag = self.lostFlag();
    let semiAnnualCorrFlag = self.semiAnnualCorrFlag();
    let objectStatus = self.objectStatus().map(|x| {
      x.to_string()
    });
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let onOrbit = self.onOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    GEOStatus_FullT {
      id,
      classificationMarking,
      idOnOrbit,
      origObjectId,
      ss,
      sc,
      relativeEnergy,
      longitudeRate,
      longitudeMin,
      longitudeMax,
      confidenceLevel,
      planeChangeStatus,
      troughType,
      lostFlag,
      semiAnnualCorrFlag,
      objectStatus,
      rawFileURI,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      dataMode,
      onOrbit,
      satNo,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: GEOSTATUS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the object on-orbit object.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_IDONORBIT, None)}
  }
  /// Optional identifier provided to indicate the target onorbit. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_ORIGOBJECTID, None)}
  }
  /// Sine of inclination times the sine of right ascension.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ss(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GEOStatus_Full::VT_SS, Some(0.0)).unwrap()}
  }
  /// Sine of inclination times the cosine of right ascension.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GEOStatus_Full::VT_SC, Some(0.0)).unwrap()}
  }
  /// Objects displacement from geostationary orbit in deg^2/day^2.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn relativeEnergy(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GEOStatus_Full::VT_RELATIVEENERGY, Some(0.0)).unwrap()}
  }
  /// Corrective or overriding long term trend for longitudinal change in degrees/day.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn longitudeRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GEOStatus_Full::VT_LONGITUDERATE, Some(0.0)).unwrap()}
  }
  /// Minimum longitude for this object.  WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  /// Example: /// Example: 180.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn longitudeMin(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GEOStatus_Full::VT_LONGITUDEMIN, Some(0.0)).unwrap()}
  }
  /// Maximum longitude for this object. WGS-84 longitude of the spacecraft position, in degrees. 0 to 360 degrees.
  /// Example: /// Example: 1.01
  /// Constraints: No constraints specified.
  #[inline]
  pub fn longitudeMax(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(GEOStatus_Full::VT_LONGITUDEMAX, Some(0.0)).unwrap()}
  }
  /// Indicates the confidence level in the entry.  (Low, Medium, High).
  /// Example: /// Example: Low
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn confidenceLevel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_CONFIDENCELEVEL, None)}
  }
  /// Geosynchronous plane changing status.  (Current, Never, Former, Future).
  /// Example: /// Example: Current
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn planeChangeStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_PLANECHANGESTATUS, None)}
  }
  /// Indicates the trough (gravity well) or drift direction of a space object:
  /// 255 - Influenced by 255° longitude trough. 
  /// 75 - Influenced by 75° longitude trough. 
  /// Both - Oscillating between both 255 and 75 troughs. 
  /// East - Drifting eastward; large relative energy and a period less than 1436.1 minutes. 
  /// West - Drifting westward; large relative energy and a period greater than 1436.2 minutes.
  /// Example: /// Example: West
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn troughType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_TROUGHTYPE, None)}
  }
  /// Lost space object indicator.  (True or False).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lostFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(GEOStatus_Full::VT_LOSTFLAG, Some(false)).unwrap()}
  }
  /// Semi-annual correction.  (True or False).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn semiAnnualCorrFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(GEOStatus_Full::VT_SEMIANNUALCORRFLAG, Some(false)).unwrap()}
  }
  /// Space object status.  (Active, Dead, Unknown).
  /// Example: /// Example: Active
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn objectStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_OBJECTSTATUS, None)}
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_RAWFILEURI, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> GEOStatus_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<GEOStatus_Full_dataMode_Enum>(GEOStatus_Full::VT_DATAMODE, Some(GEOStatus_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn onOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_ONORBIT, None)}
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 21
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(GEOStatus_Full::VT_SATNO, Some(0)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(GEOStatus_Full::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for GEOStatus_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<f64>("ss", Self::VT_SS, false)?
     .visit_field::<f64>("sc", Self::VT_SC, false)?
     .visit_field::<f64>("relativeEnergy", Self::VT_RELATIVEENERGY, false)?
     .visit_field::<f64>("longitudeRate", Self::VT_LONGITUDERATE, false)?
     .visit_field::<f64>("longitudeMin", Self::VT_LONGITUDEMIN, false)?
     .visit_field::<f64>("longitudeMax", Self::VT_LONGITUDEMAX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("confidenceLevel", Self::VT_CONFIDENCELEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("planeChangeStatus", Self::VT_PLANECHANGESTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("troughType", Self::VT_TROUGHTYPE, false)?
     .visit_field::<bool>("lostFlag", Self::VT_LOSTFLAG, false)?
     .visit_field::<bool>("semiAnnualCorrFlag", Self::VT_SEMIANNUALCORRFLAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objectStatus", Self::VT_OBJECTSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<GEOStatus_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("onOrbit", Self::VT_ONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct GEOStatus_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ss: f64,
    pub sc: f64,
    pub relativeEnergy: f64,
    pub longitudeRate: f64,
    pub longitudeMin: f64,
    pub longitudeMax: f64,
    pub confidenceLevel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub planeChangeStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub troughType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lostFlag: bool,
    pub semiAnnualCorrFlag: bool,
    pub objectStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: GEOStatus_Full_dataMode_Enum,
    pub onOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for GEOStatus_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    GEOStatus_FullArgs {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      origObjectId: None,
      ss: 0.0,
      sc: 0.0,
      relativeEnergy: 0.0,
      longitudeRate: 0.0,
      longitudeMin: 0.0,
      longitudeMax: 0.0,
      confidenceLevel: None,
      planeChangeStatus: None,
      troughType: None,
      lostFlag: false,
      semiAnnualCorrFlag: false,
      objectStatus: None,
      rawFileURI: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      dataMode: GEOStatus_Full_dataMode_Enum::REAL,
      onOrbit: None,
      satNo: 0,
      origNetwork: None,
    }
  }
}

pub struct GEOStatus_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> GEOStatus_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_ss(&mut self, ss: f64) {
    self.fbb_.push_slot::<f64>(GEOStatus_Full::VT_SS, ss, 0.0);
  }
  #[inline]
  pub fn add_sc(&mut self, sc: f64) {
    self.fbb_.push_slot::<f64>(GEOStatus_Full::VT_SC, sc, 0.0);
  }
  #[inline]
  pub fn add_relativeEnergy(&mut self, relativeEnergy: f64) {
    self.fbb_.push_slot::<f64>(GEOStatus_Full::VT_RELATIVEENERGY, relativeEnergy, 0.0);
  }
  #[inline]
  pub fn add_longitudeRate(&mut self, longitudeRate: f64) {
    self.fbb_.push_slot::<f64>(GEOStatus_Full::VT_LONGITUDERATE, longitudeRate, 0.0);
  }
  #[inline]
  pub fn add_longitudeMin(&mut self, longitudeMin: f64) {
    self.fbb_.push_slot::<f64>(GEOStatus_Full::VT_LONGITUDEMIN, longitudeMin, 0.0);
  }
  #[inline]
  pub fn add_longitudeMax(&mut self, longitudeMax: f64) {
    self.fbb_.push_slot::<f64>(GEOStatus_Full::VT_LONGITUDEMAX, longitudeMax, 0.0);
  }
  #[inline]
  pub fn add_confidenceLevel(&mut self, confidenceLevel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_CONFIDENCELEVEL, confidenceLevel);
  }
  #[inline]
  pub fn add_planeChangeStatus(&mut self, planeChangeStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_PLANECHANGESTATUS, planeChangeStatus);
  }
  #[inline]
  pub fn add_troughType(&mut self, troughType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_TROUGHTYPE, troughType);
  }
  #[inline]
  pub fn add_lostFlag(&mut self, lostFlag: bool) {
    self.fbb_.push_slot::<bool>(GEOStatus_Full::VT_LOSTFLAG, lostFlag, false);
  }
  #[inline]
  pub fn add_semiAnnualCorrFlag(&mut self, semiAnnualCorrFlag: bool) {
    self.fbb_.push_slot::<bool>(GEOStatus_Full::VT_SEMIANNUALCORRFLAG, semiAnnualCorrFlag, false);
  }
  #[inline]
  pub fn add_objectStatus(&mut self, objectStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_OBJECTSTATUS, objectStatus);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: GEOStatus_Full_dataMode_Enum) {
    self.fbb_.push_slot::<GEOStatus_Full_dataMode_Enum>(GEOStatus_Full::VT_DATAMODE, dataMode, GEOStatus_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_onOrbit(&mut self, onOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_ONORBIT, onOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(GEOStatus_Full::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(GEOStatus_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> GEOStatus_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    GEOStatus_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GEOStatus_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GEOStatus_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GEOStatus_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("ss", &self.ss());
      ds.field("sc", &self.sc());
      ds.field("relativeEnergy", &self.relativeEnergy());
      ds.field("longitudeRate", &self.longitudeRate());
      ds.field("longitudeMin", &self.longitudeMin());
      ds.field("longitudeMax", &self.longitudeMax());
      ds.field("confidenceLevel", &self.confidenceLevel());
      ds.field("planeChangeStatus", &self.planeChangeStatus());
      ds.field("troughType", &self.troughType());
      ds.field("lostFlag", &self.lostFlag());
      ds.field("semiAnnualCorrFlag", &self.semiAnnualCorrFlag());
      ds.field("objectStatus", &self.objectStatus());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("onOrbit", &self.onOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct GEOStatus_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idOnOrbit: Option<String>,
  pub origObjectId: Option<String>,
  pub ss: f64,
  pub sc: f64,
  pub relativeEnergy: f64,
  pub longitudeRate: f64,
  pub longitudeMin: f64,
  pub longitudeMax: f64,
  pub confidenceLevel: Option<String>,
  pub planeChangeStatus: Option<String>,
  pub troughType: Option<String>,
  pub lostFlag: bool,
  pub semiAnnualCorrFlag: bool,
  pub objectStatus: Option<String>,
  pub rawFileURI: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: GEOStatus_Full_dataMode_Enum,
  pub onOrbit: Option<String>,
  pub satNo: i32,
  pub origNetwork: Option<String>,
}
impl Default for GEOStatus_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      origObjectId: None,
      ss: 0.0,
      sc: 0.0,
      relativeEnergy: 0.0,
      longitudeRate: 0.0,
      longitudeMin: 0.0,
      longitudeMax: 0.0,
      confidenceLevel: None,
      planeChangeStatus: None,
      troughType: None,
      lostFlag: false,
      semiAnnualCorrFlag: false,
      objectStatus: None,
      rawFileURI: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      dataMode: GEOStatus_Full_dataMode_Enum::REAL,
      onOrbit: None,
      satNo: 0,
      origNetwork: None,
    }
  }
}
impl GEOStatus_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<GEOStatus_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ss = self.ss;
    let sc = self.sc;
    let relativeEnergy = self.relativeEnergy;
    let longitudeRate = self.longitudeRate;
    let longitudeMin = self.longitudeMin;
    let longitudeMax = self.longitudeMax;
    let confidenceLevel = self.confidenceLevel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let planeChangeStatus = self.planeChangeStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let troughType = self.troughType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lostFlag = self.lostFlag;
    let semiAnnualCorrFlag = self.semiAnnualCorrFlag;
    let objectStatus = self.objectStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let onOrbit = self.onOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    GEOStatus_Full::create(_fbb, &GEOStatus_FullArgs{
      id,
      classificationMarking,
      idOnOrbit,
      origObjectId,
      ss,
      sc,
      relativeEnergy,
      longitudeRate,
      longitudeMin,
      longitudeMax,
      confidenceLevel,
      planeChangeStatus,
      troughType,
      lostFlag,
      semiAnnualCorrFlag,
      objectStatus,
      rawFileURI,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      dataMode,
      onOrbit,
      satNo,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `GEOStatus_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_geostatus_full_unchecked`.
pub fn root_as_geostatus_full(buf: &[u8]) -> Result<GEOStatus_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<GEOStatus_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `GEOStatus_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_geostatus_full_unchecked`.
pub fn size_prefixed_root_as_geostatus_full(buf: &[u8]) -> Result<GEOStatus_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<GEOStatus_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `GEOStatus_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_geostatus_full_unchecked`.
pub fn root_as_geostatus_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GEOStatus_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<GEOStatus_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `GEOStatus_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_geostatus_full_unchecked`.
pub fn size_prefixed_root_as_geostatus_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<GEOStatus_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<GEOStatus_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a GEOStatus_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `GEOStatus_Full`.
pub unsafe fn root_as_geostatus_full_unchecked(buf: &[u8]) -> GEOStatus_Full {
  flatbuffers::root_unchecked::<GEOStatus_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed GEOStatus_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `GEOStatus_Full`.
pub unsafe fn size_prefixed_root_as_geostatus_full_unchecked(buf: &[u8]) -> GEOStatus_Full {
  flatbuffers::size_prefixed_root_unchecked::<GEOStatus_Full>(buf)
}
pub const GEOSTATUS_FULL_IDENTIFIER: &str = "GEOS";

#[inline]
pub fn geostatus_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, GEOSTATUS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn geostatus_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, GEOSTATUS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_geostatus_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<GEOStatus_Full<'a>>) {
  fbb.finish(root, Some(GEOSTATUS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_geostatus_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<GEOStatus_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(GEOSTATUS_FULL_IDENTIFIER));
}
