// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SKY_IMAGERY_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SKY_IMAGERY_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SKY_IMAGERY_FULL_DATA_MODE_ENUM: [SkyImagery_Full_dataMode_Enum; 4] = [
  SkyImagery_Full_dataMode_Enum::REAL,
  SkyImagery_Full_dataMode_Enum::TEST,
  SkyImagery_Full_dataMode_Enum::SIMULATED,
  SkyImagery_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SkyImagery_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SkyImagery_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SkyImagery_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SkyImagery_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SkyImagery_Full_dataMode_Enum {
    type Output = SkyImagery_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SkyImagery_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SkyImagery_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SkyImagery_Full_dataMode_Enum {}
pub enum SkyImagery_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of sky imagery data.  Sky imagery is ground or space based telescope imagery of RSO's and includes metadata on the image (time, source, etc) as well as binary image content (e.g. FITS, EOSSA, EOCHIP) . Binary content must be downloaded individually by ID using the 'getFile' operation.
pub struct SkyImagery_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SkyImagery_Full<'a> {
  type Inner = SkyImagery_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SkyImagery_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 8;
  pub const VT_ONORBIT: flatbuffers::VOffsetT = 10;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 12;
  pub const VT_IDATTITUDESET: flatbuffers::VOffsetT = 14;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 16;
  pub const VT_SATNO: flatbuffers::VOffsetT = 18;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 20;
  pub const VT_SENLAT: flatbuffers::VOffsetT = 22;
  pub const VT_SENLON: flatbuffers::VOffsetT = 24;
  pub const VT_SENALT: flatbuffers::VOffsetT = 26;
  pub const VT_SENX: flatbuffers::VOffsetT = 28;
  pub const VT_SENY: flatbuffers::VOffsetT = 30;
  pub const VT_SENZ: flatbuffers::VOffsetT = 32;
  pub const VT_SENQUAT: flatbuffers::VOffsetT = 34;
  pub const VT_SENQUATDOT: flatbuffers::VOffsetT = 36;
  pub const VT_IMAGETYPE: flatbuffers::VOffsetT = 38;
  pub const VT_EXPSTARTTIME: flatbuffers::VOffsetT = 40;
  pub const VT_EXPENDTIME: flatbuffers::VOffsetT = 42;
  pub const VT_IMAGESOURCEINFO: flatbuffers::VOffsetT = 44;
  pub const VT_TOPLEFTSTARTAZ: flatbuffers::VOffsetT = 46;
  pub const VT_TOPLEFTSTARTEL: flatbuffers::VOffsetT = 48;
  pub const VT_TOPLEFTSTOPAZ: flatbuffers::VOffsetT = 50;
  pub const VT_TOPLEFTSTOPEL: flatbuffers::VOffsetT = 52;
  pub const VT_IMAGESETID: flatbuffers::VOffsetT = 54;
  pub const VT_IMAGESETLENGTH: flatbuffers::VOffsetT = 56;
  pub const VT_SEQUENCEID: flatbuffers::VOffsetT = 58;
  pub const VT_FRAMEFOVWIDTH: flatbuffers::VOffsetT = 60;
  pub const VT_FRAMEFOVHEIGHT: flatbuffers::VOffsetT = 62;
  pub const VT_PIXELFOVWIDTH: flatbuffers::VOffsetT = 64;
  pub const VT_PIXELFOVHEIGHT: flatbuffers::VOffsetT = 66;
  pub const VT_FRAMEWIDTHPIXELS: flatbuffers::VOffsetT = 68;
  pub const VT_FRAMEHEIGHTPIXELS: flatbuffers::VOffsetT = 70;
  pub const VT_PIXELBITDEPTH: flatbuffers::VOffsetT = 72;
  pub const VT_ANNOTATIONKEY: flatbuffers::VOffsetT = 74;
  pub const VT_CALIBRATIONKEY: flatbuffers::VOffsetT = 76;
  pub const VT_FILENAME: flatbuffers::VOffsetT = 78;
  pub const VT_FILESIZE: flatbuffers::VOffsetT = 80;
  pub const VT_CHECKSUMVALUE: flatbuffers::VOffsetT = 82;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 84;
  pub const VT_TAGS: flatbuffers::VOffsetT = 86;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 88;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 90;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 92;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 94;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 96;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 98;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 100;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 102;
  pub const VT_EOOBSERVATIONS: flatbuffers::VOffsetT = 104;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SkyImagery_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SkyImagery_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<SkyImagery_Full<'bldr>> {
    let mut builder = SkyImagery_FullBuilder::new(_fbb);
    builder.add_filesize(args.filesize);
    builder.add_pixelFOVHeight(args.pixelFOVHeight);
    builder.add_pixelFOVWidth(args.pixelFOVWidth);
    builder.add_frameFOVHeight(args.frameFOVHeight);
    builder.add_frameFOVWidth(args.frameFOVWidth);
    builder.add_topLeftStopEl(args.topLeftStopEl);
    builder.add_topLeftStopAz(args.topLeftStopAz);
    builder.add_topLeftStartEl(args.topLeftStartEl);
    builder.add_topLeftStartAz(args.topLeftStartAz);
    builder.add_senz(args.senz);
    builder.add_seny(args.seny);
    builder.add_senx(args.senx);
    builder.add_senalt(args.senalt);
    builder.add_senlon(args.senlon);
    builder.add_senlat(args.senlat);
    if let Some(x) = args.eoObservations { builder.add_eoObservations(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.checksumValue { builder.add_checksumValue(x); }
    if let Some(x) = args.filename { builder.add_filename(x); }
    if let Some(x) = args.calibrationKey { builder.add_calibrationKey(x); }
    if let Some(x) = args.annotationKey { builder.add_annotationKey(x); }
    builder.add_pixelBitDepth(args.pixelBitDepth);
    builder.add_frameHeightPixels(args.frameHeightPixels);
    builder.add_frameWidthPixels(args.frameWidthPixels);
    builder.add_sequenceId(args.sequenceId);
    builder.add_imageSetLength(args.imageSetLength);
    if let Some(x) = args.imageSetId { builder.add_imageSetId(x); }
    if let Some(x) = args.imageSourceInfo { builder.add_imageSourceInfo(x); }
    if let Some(x) = args.expEndTime { builder.add_expEndTime(x); }
    if let Some(x) = args.expStartTime { builder.add_expStartTime(x); }
    if let Some(x) = args.imageType { builder.add_imageType(x); }
    if let Some(x) = args.senQuatDot { builder.add_senQuatDot(x); }
    if let Some(x) = args.senQuat { builder.add_senQuat(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.idAttitudeSet { builder.add_idAttitudeSet(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    if let Some(x) = args.onOrbit { builder.add_onOrbit(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> SkyImagery_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let onOrbit = self.onOrbit().map(|x| {
      x.to_string()
    });
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let idAttitudeSet = self.idAttitudeSet().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let senlat = self.senlat();
    let senlon = self.senlon();
    let senalt = self.senalt();
    let senx = self.senx();
    let seny = self.seny();
    let senz = self.senz();
    let senQuat = self.senQuat().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let senQuatDot = self.senQuatDot().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let imageType = self.imageType().map(|x| {
      x.to_string()
    });
    let expStartTime = self.expStartTime().map(|x| {
      x.to_string()
    });
    let expEndTime = self.expEndTime().map(|x| {
      x.to_string()
    });
    let imageSourceInfo = self.imageSourceInfo().map(|x| {
      x.to_string()
    });
    let topLeftStartAz = self.topLeftStartAz();
    let topLeftStartEl = self.topLeftStartEl();
    let topLeftStopAz = self.topLeftStopAz();
    let topLeftStopEl = self.topLeftStopEl();
    let imageSetId = self.imageSetId().map(|x| {
      x.to_string()
    });
    let imageSetLength = self.imageSetLength();
    let sequenceId = self.sequenceId();
    let frameFOVWidth = self.frameFOVWidth();
    let frameFOVHeight = self.frameFOVHeight();
    let pixelFOVWidth = self.pixelFOVWidth();
    let pixelFOVHeight = self.pixelFOVHeight();
    let frameWidthPixels = self.frameWidthPixels();
    let frameHeightPixels = self.frameHeightPixels();
    let pixelBitDepth = self.pixelBitDepth();
    let annotationKey = self.annotationKey().map(|x| {
      x.to_string()
    });
    let calibrationKey = self.calibrationKey().map(|x| {
      x.to_string()
    });
    let filename = self.filename().map(|x| {
      x.to_string()
    });
    let filesize = self.filesize();
    let checksumValue = self.checksumValue().map(|x| {
      x.to_string()
    });
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let eoObservations = self.eoObservations().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    SkyImagery_FullT {
      id,
      classificationMarking,
      idOnOrbit,
      onOrbit,
      origObjectId,
      idAttitudeSet,
      idSensor,
      satNo,
      origSensorId,
      senlat,
      senlon,
      senalt,
      senx,
      seny,
      senz,
      senQuat,
      senQuatDot,
      imageType,
      expStartTime,
      expEndTime,
      imageSourceInfo,
      topLeftStartAz,
      topLeftStartEl,
      topLeftStopAz,
      topLeftStopEl,
      imageSetId,
      imageSetLength,
      sequenceId,
      frameFOVWidth,
      frameFOVHeight,
      pixelFOVWidth,
      pixelFOVHeight,
      frameWidthPixels,
      frameHeightPixels,
      pixelBitDepth,
      annotationKey,
      calibrationKey,
      filename,
      filesize,
      checksumValue,
      transactionId,
      tags,
      source,
      origin,
      origNetwork,
      sourceDL,
      description,
      dataMode,
      createdAt,
      createdBy,
      eoObservations,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SKYIMAGERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Optional identifier of the target on-orbit object, if correlated.
  /// Example: /// Example: 44920
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_IDONORBIT, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn onOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_ONORBIT, None)}
  }
  /// Optional identifier provided by the imaging source to indicate the target onorbit object of this image. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: X15-23452
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_ORIGOBJECTID, None)}
  }
  /// Optional identifier of the AttitudeSet data record describing the orientation of an object body.
  /// Example: /// Example: d039ba29-52f4-4839-8a8f-e85fa416aec5
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idAttitudeSet(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_IDATTITUDESET, None)}
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: 420
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_IDSENSOR, None)}
  }
  /// Catalog number of the target on-orbit object.
  /// Example: /// Example: 25544
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkyImagery_Full::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier provided by the imaging source to indicate the sensor identifier which produced this image. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: origSensorId
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_ORIGSENSORID, None)}
  }
  /// Sensor latitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -33.283048
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senlat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_SENLAT, Some(0.0)).unwrap()}
  }
  /// Sensor longitude at exposure start epoch, in degrees. If null, can be obtained from sensor info. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 149.372549
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senlon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_SENLON, Some(0.0)).unwrap()}
  }
  /// Sensor altitude at exposure start epoch, in km. If null, can be obtained from sensor info.
  /// Example: /// Example: 14.483619321
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senalt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_SENALT, Some(0.0)).unwrap()}
  }
  /// Sensor x position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 14.52
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senx(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_SENX, Some(0.0)).unwrap()}
  }
  /// Sensor y position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 32.41
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seny(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_SENY, Some(0.0)).unwrap()}
  }
  /// Sensor z position at exposure start epoch, in km (if mobile/onorbit) in J2000 coordinate frame.
  /// Example: /// Example: 376.12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_SENZ, Some(0.0)).unwrap()}
  }
  /// The quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, at exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senQuat(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SkyImagery_Full::VT_SENQUAT, None)}
  }
  /// The derivative of the quaternion describing the rotation of the body-fixed frame used for this system into the local geodetic frame, exposure start epoch (expStartTime). The array element order convention is scalar component first, followed by the three vector components. For a vector u in the body-fixed frame, the corresponding vector u' in the geodetic frame should satisfy u' = quq*, where q is this quaternion.
  /// Example: /// Example: [0.03, 0.02, 0.01, 0.012]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senQuatDot(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SkyImagery_Full::VT_SENQUATDOT, None)}
  }
  /// The type of image associated with this record (e.g. FITS, EOSSA, EOCHIP).
  /// Example: /// Example: imageType
  /// Constraints: Minimum length = 1, Maximum length = 24
  #[inline]
  pub fn imageType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_IMAGETYPE, None)}
  }
  /// Start time of the exposure, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn expStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_EXPSTARTTIME, None)}
  }
  /// End time of the exposure, in ISO 8601 UTC format with microsecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn expEndTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_EXPENDTIME, None)}
  }
  /// String that uniquely identifies the data source.
  /// Example: /// Example: imageSourceInfo
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn imageSourceInfo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_IMAGESOURCEINFO, None)}
  }
  /// The telescope pointing azimuth, in degrees, at the exposure start epoch.
  /// Example: /// Example: 146.321
  /// Constraints: No constraints specified.
  #[inline]
  pub fn topLeftStartAz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_TOPLEFTSTARTAZ, Some(0.0)).unwrap()}
  }
  /// The telescope pointing elevation, in degrees, at the exposure start epoch.
  /// Example: /// Example: 146.321
  /// Constraints: No constraints specified.
  #[inline]
  pub fn topLeftStartEl(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_TOPLEFTSTARTEL, Some(0.0)).unwrap()}
  }
  /// The telescope pointing azimuth, in degrees, at the exposure stop epoch.
  /// Example: /// Example: 3.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn topLeftStopAz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_TOPLEFTSTOPAZ, Some(0.0)).unwrap()}
  }
  /// The telescope pointing elevation, in degrees, at the exposure stop epoch.
  /// Example: /// Example: 34.233
  /// Constraints: No constraints specified.
  #[inline]
  pub fn topLeftStopEl(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_TOPLEFTSTOPEL, Some(0.0)).unwrap()}
  }
  /// The user-defined set ID of a sequence of images.
  /// Example: /// Example: imageSetId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn imageSetId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_IMAGESETID, None)}
  }
  /// The number of images in an image set.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  #[inline]
  pub fn imageSetLength(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkyImagery_Full::VT_IMAGESETLENGTH, Some(0)).unwrap()}
  }
  /// The sequence ID of an image within an image set.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sequenceId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkyImagery_Full::VT_SEQUENCEID, Some(0)).unwrap()}
  }
  /// Field Of View frame width, in degrees.
  /// Example: /// Example: 21.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn frameFOVWidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_FRAMEFOVWIDTH, Some(0.0)).unwrap()}
  }
  /// Field Of View frame height, in degrees.
  /// Example: /// Example: 21.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn frameFOVHeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_FRAMEFOVHEIGHT, Some(0.0)).unwrap()}
  }
  /// Field Of View pixel width, in degrees.
  /// Example: /// Example: 321.123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pixelFOVWidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_PIXELFOVWIDTH, Some(0.0)).unwrap()}
  }
  /// Field Of View pixel height, in degrees.
  /// Example: /// Example: 321.123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pixelFOVHeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SkyImagery_Full::VT_PIXELFOVHEIGHT, Some(0.0)).unwrap()}
  }
  /// Frame width of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn frameWidthPixels(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkyImagery_Full::VT_FRAMEWIDTHPIXELS, Some(0)).unwrap()}
  }
  /// Frame height of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn frameHeightPixels(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkyImagery_Full::VT_FRAMEHEIGHTPIXELS, Some(0)).unwrap()}
  }
  /// Bit depth of the image, in number of pixels.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pixelBitDepth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SkyImagery_Full::VT_PIXELBITDEPTH, Some(0)).unwrap()}
  }
  /// Reference to an annotation document associated with this image.
  /// Example: /// Example: annotationKey
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn annotationKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_ANNOTATIONKEY, None)}
  }
  /// Reference to a calibration document associated with this image.
  /// Example: /// Example: calibrationKey
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn calibrationKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_CALIBRATIONKEY, None)}
  }
  /// Name of the uploaded image file.
  /// Example: /// Example: filename.jpg
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn filename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_FILENAME, None)}
  }
  /// Size of the image file, in bytes.
  /// Example: /// Example: 371945
  /// Constraints: No constraints specified.
  #[inline]
  pub fn filesize(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(SkyImagery_Full::VT_FILESIZE, Some(0)).unwrap()}
  }
  /// MD5 value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: checksumValue
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn checksumValue(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_CHECKSUMVALUE, None)}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_TRANSACTIONID, None)}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SkyImagery_Full::VT_TAGS, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_ORIGNETWORK, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_SOURCEDL, None)}
  }
  /// Optional name/description associated with this image.
  /// Example: /// Example: description
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_DESCRIPTION, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SkyImagery_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SkyImagery_Full_dataMode_Enum>(SkyImagery_Full::VT_DATAMODE, Some(SkyImagery_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SkyImagery_Full::VT_CREATEDBY, None)}
  }
  /// Collection of linked EOObservations.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eoObservations(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SkyImagery_Full::VT_EOOBSERVATIONS, None)}
  }
}

impl flatbuffers::Verifiable for SkyImagery_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("onOrbit", Self::VT_ONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idAttitudeSet", Self::VT_IDATTITUDESET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<f64>("senlat", Self::VT_SENLAT, false)?
     .visit_field::<f64>("senlon", Self::VT_SENLON, false)?
     .visit_field::<f64>("senalt", Self::VT_SENALT, false)?
     .visit_field::<f64>("senx", Self::VT_SENX, false)?
     .visit_field::<f64>("seny", Self::VT_SENY, false)?
     .visit_field::<f64>("senz", Self::VT_SENZ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("senQuat", Self::VT_SENQUAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("senQuatDot", Self::VT_SENQUATDOT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imageType", Self::VT_IMAGETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("expStartTime", Self::VT_EXPSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("expEndTime", Self::VT_EXPENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imageSourceInfo", Self::VT_IMAGESOURCEINFO, false)?
     .visit_field::<f64>("topLeftStartAz", Self::VT_TOPLEFTSTARTAZ, false)?
     .visit_field::<f64>("topLeftStartEl", Self::VT_TOPLEFTSTARTEL, false)?
     .visit_field::<f64>("topLeftStopAz", Self::VT_TOPLEFTSTOPAZ, false)?
     .visit_field::<f64>("topLeftStopEl", Self::VT_TOPLEFTSTOPEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imageSetId", Self::VT_IMAGESETID, false)?
     .visit_field::<i32>("imageSetLength", Self::VT_IMAGESETLENGTH, false)?
     .visit_field::<i32>("sequenceId", Self::VT_SEQUENCEID, false)?
     .visit_field::<f64>("frameFOVWidth", Self::VT_FRAMEFOVWIDTH, false)?
     .visit_field::<f64>("frameFOVHeight", Self::VT_FRAMEFOVHEIGHT, false)?
     .visit_field::<f64>("pixelFOVWidth", Self::VT_PIXELFOVWIDTH, false)?
     .visit_field::<f64>("pixelFOVHeight", Self::VT_PIXELFOVHEIGHT, false)?
     .visit_field::<i32>("frameWidthPixels", Self::VT_FRAMEWIDTHPIXELS, false)?
     .visit_field::<i32>("frameHeightPixels", Self::VT_FRAMEHEIGHTPIXELS, false)?
     .visit_field::<i32>("pixelBitDepth", Self::VT_PIXELBITDEPTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("annotationKey", Self::VT_ANNOTATIONKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("calibrationKey", Self::VT_CALIBRATIONKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("filename", Self::VT_FILENAME, false)?
     .visit_field::<i64>("filesize", Self::VT_FILESIZE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("checksumValue", Self::VT_CHECKSUMVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<SkyImagery_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("eoObservations", Self::VT_EOOBSERVATIONS, false)?
     .finish();
    Ok(())
  }
}
pub struct SkyImagery_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub onOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idAttitudeSet: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub senlat: f64,
    pub senlon: f64,
    pub senalt: f64,
    pub senx: f64,
    pub seny: f64,
    pub senz: f64,
    pub senQuat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub senQuatDot: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub imageType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub expStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub expEndTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imageSourceInfo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub topLeftStartAz: f64,
    pub topLeftStartEl: f64,
    pub topLeftStopAz: f64,
    pub topLeftStopEl: f64,
    pub imageSetId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imageSetLength: i32,
    pub sequenceId: i32,
    pub frameFOVWidth: f64,
    pub frameFOVHeight: f64,
    pub pixelFOVWidth: f64,
    pub pixelFOVHeight: f64,
    pub frameWidthPixels: i32,
    pub frameHeightPixels: i32,
    pub pixelBitDepth: i32,
    pub annotationKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub calibrationKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filesize: i64,
    pub checksumValue: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SkyImagery_Full_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub eoObservations: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for SkyImagery_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    SkyImagery_FullArgs {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      onOrbit: None,
      origObjectId: None,
      idAttitudeSet: None,
      idSensor: None,
      satNo: 0,
      origSensorId: None,
      senlat: 0.0,
      senlon: 0.0,
      senalt: 0.0,
      senx: 0.0,
      seny: 0.0,
      senz: 0.0,
      senQuat: None,
      senQuatDot: None,
      imageType: None,
      expStartTime: None,
      expEndTime: None,
      imageSourceInfo: None,
      topLeftStartAz: 0.0,
      topLeftStartEl: 0.0,
      topLeftStopAz: 0.0,
      topLeftStopEl: 0.0,
      imageSetId: None,
      imageSetLength: 0,
      sequenceId: 0,
      frameFOVWidth: 0.0,
      frameFOVHeight: 0.0,
      pixelFOVWidth: 0.0,
      pixelFOVHeight: 0.0,
      frameWidthPixels: 0,
      frameHeightPixels: 0,
      pixelBitDepth: 0,
      annotationKey: None,
      calibrationKey: None,
      filename: None,
      filesize: 0,
      checksumValue: None,
      transactionId: None,
      tags: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      description: None,
      dataMode: SkyImagery_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      eoObservations: None,
    }
  }
}

pub struct SkyImagery_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SkyImagery_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_onOrbit(&mut self, onOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_ONORBIT, onOrbit);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_idAttitudeSet(&mut self, idAttitudeSet: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_IDATTITUDESET, idAttitudeSet);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(SkyImagery_Full::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_senlat(&mut self, senlat: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_SENLAT, senlat, 0.0);
  }
  #[inline]
  pub fn add_senlon(&mut self, senlon: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_SENLON, senlon, 0.0);
  }
  #[inline]
  pub fn add_senalt(&mut self, senalt: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_SENALT, senalt, 0.0);
  }
  #[inline]
  pub fn add_senx(&mut self, senx: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_SENX, senx, 0.0);
  }
  #[inline]
  pub fn add_seny(&mut self, seny: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_SENY, seny, 0.0);
  }
  #[inline]
  pub fn add_senz(&mut self, senz: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_SENZ, senz, 0.0);
  }
  #[inline]
  pub fn add_senQuat(&mut self, senQuat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_SENQUAT, senQuat);
  }
  #[inline]
  pub fn add_senQuatDot(&mut self, senQuatDot: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_SENQUATDOT, senQuatDot);
  }
  #[inline]
  pub fn add_imageType(&mut self, imageType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_IMAGETYPE, imageType);
  }
  #[inline]
  pub fn add_expStartTime(&mut self, expStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_EXPSTARTTIME, expStartTime);
  }
  #[inline]
  pub fn add_expEndTime(&mut self, expEndTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_EXPENDTIME, expEndTime);
  }
  #[inline]
  pub fn add_imageSourceInfo(&mut self, imageSourceInfo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_IMAGESOURCEINFO, imageSourceInfo);
  }
  #[inline]
  pub fn add_topLeftStartAz(&mut self, topLeftStartAz: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_TOPLEFTSTARTAZ, topLeftStartAz, 0.0);
  }
  #[inline]
  pub fn add_topLeftStartEl(&mut self, topLeftStartEl: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_TOPLEFTSTARTEL, topLeftStartEl, 0.0);
  }
  #[inline]
  pub fn add_topLeftStopAz(&mut self, topLeftStopAz: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_TOPLEFTSTOPAZ, topLeftStopAz, 0.0);
  }
  #[inline]
  pub fn add_topLeftStopEl(&mut self, topLeftStopEl: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_TOPLEFTSTOPEL, topLeftStopEl, 0.0);
  }
  #[inline]
  pub fn add_imageSetId(&mut self, imageSetId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_IMAGESETID, imageSetId);
  }
  #[inline]
  pub fn add_imageSetLength(&mut self, imageSetLength: i32) {
    self.fbb_.push_slot::<i32>(SkyImagery_Full::VT_IMAGESETLENGTH, imageSetLength, 0);
  }
  #[inline]
  pub fn add_sequenceId(&mut self, sequenceId: i32) {
    self.fbb_.push_slot::<i32>(SkyImagery_Full::VT_SEQUENCEID, sequenceId, 0);
  }
  #[inline]
  pub fn add_frameFOVWidth(&mut self, frameFOVWidth: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_FRAMEFOVWIDTH, frameFOVWidth, 0.0);
  }
  #[inline]
  pub fn add_frameFOVHeight(&mut self, frameFOVHeight: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_FRAMEFOVHEIGHT, frameFOVHeight, 0.0);
  }
  #[inline]
  pub fn add_pixelFOVWidth(&mut self, pixelFOVWidth: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_PIXELFOVWIDTH, pixelFOVWidth, 0.0);
  }
  #[inline]
  pub fn add_pixelFOVHeight(&mut self, pixelFOVHeight: f64) {
    self.fbb_.push_slot::<f64>(SkyImagery_Full::VT_PIXELFOVHEIGHT, pixelFOVHeight, 0.0);
  }
  #[inline]
  pub fn add_frameWidthPixels(&mut self, frameWidthPixels: i32) {
    self.fbb_.push_slot::<i32>(SkyImagery_Full::VT_FRAMEWIDTHPIXELS, frameWidthPixels, 0);
  }
  #[inline]
  pub fn add_frameHeightPixels(&mut self, frameHeightPixels: i32) {
    self.fbb_.push_slot::<i32>(SkyImagery_Full::VT_FRAMEHEIGHTPIXELS, frameHeightPixels, 0);
  }
  #[inline]
  pub fn add_pixelBitDepth(&mut self, pixelBitDepth: i32) {
    self.fbb_.push_slot::<i32>(SkyImagery_Full::VT_PIXELBITDEPTH, pixelBitDepth, 0);
  }
  #[inline]
  pub fn add_annotationKey(&mut self, annotationKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_ANNOTATIONKEY, annotationKey);
  }
  #[inline]
  pub fn add_calibrationKey(&mut self, calibrationKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_CALIBRATIONKEY, calibrationKey);
  }
  #[inline]
  pub fn add_filename(&mut self, filename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_FILENAME, filename);
  }
  #[inline]
  pub fn add_filesize(&mut self, filesize: i64) {
    self.fbb_.push_slot::<i64>(SkyImagery_Full::VT_FILESIZE, filesize, 0);
  }
  #[inline]
  pub fn add_checksumValue(&mut self, checksumValue: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_CHECKSUMVALUE, checksumValue);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SkyImagery_Full_dataMode_Enum) {
    self.fbb_.push_slot::<SkyImagery_Full_dataMode_Enum>(SkyImagery_Full::VT_DATAMODE, dataMode, SkyImagery_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_eoObservations(&mut self, eoObservations: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SkyImagery_Full::VT_EOOBSERVATIONS, eoObservations);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SkyImagery_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SkyImagery_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SkyImagery_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SkyImagery_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SkyImagery_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("onOrbit", &self.onOrbit());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("idAttitudeSet", &self.idAttitudeSet());
      ds.field("idSensor", &self.idSensor());
      ds.field("satNo", &self.satNo());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("senlat", &self.senlat());
      ds.field("senlon", &self.senlon());
      ds.field("senalt", &self.senalt());
      ds.field("senx", &self.senx());
      ds.field("seny", &self.seny());
      ds.field("senz", &self.senz());
      ds.field("senQuat", &self.senQuat());
      ds.field("senQuatDot", &self.senQuatDot());
      ds.field("imageType", &self.imageType());
      ds.field("expStartTime", &self.expStartTime());
      ds.field("expEndTime", &self.expEndTime());
      ds.field("imageSourceInfo", &self.imageSourceInfo());
      ds.field("topLeftStartAz", &self.topLeftStartAz());
      ds.field("topLeftStartEl", &self.topLeftStartEl());
      ds.field("topLeftStopAz", &self.topLeftStopAz());
      ds.field("topLeftStopEl", &self.topLeftStopEl());
      ds.field("imageSetId", &self.imageSetId());
      ds.field("imageSetLength", &self.imageSetLength());
      ds.field("sequenceId", &self.sequenceId());
      ds.field("frameFOVWidth", &self.frameFOVWidth());
      ds.field("frameFOVHeight", &self.frameFOVHeight());
      ds.field("pixelFOVWidth", &self.pixelFOVWidth());
      ds.field("pixelFOVHeight", &self.pixelFOVHeight());
      ds.field("frameWidthPixels", &self.frameWidthPixels());
      ds.field("frameHeightPixels", &self.frameHeightPixels());
      ds.field("pixelBitDepth", &self.pixelBitDepth());
      ds.field("annotationKey", &self.annotationKey());
      ds.field("calibrationKey", &self.calibrationKey());
      ds.field("filename", &self.filename());
      ds.field("filesize", &self.filesize());
      ds.field("checksumValue", &self.checksumValue());
      ds.field("transactionId", &self.transactionId());
      ds.field("tags", &self.tags());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("description", &self.description());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("eoObservations", &self.eoObservations());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SkyImagery_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idOnOrbit: Option<String>,
  pub onOrbit: Option<String>,
  pub origObjectId: Option<String>,
  pub idAttitudeSet: Option<String>,
  pub idSensor: Option<String>,
  pub satNo: i32,
  pub origSensorId: Option<String>,
  pub senlat: f64,
  pub senlon: f64,
  pub senalt: f64,
  pub senx: f64,
  pub seny: f64,
  pub senz: f64,
  pub senQuat: Option<Vec<String>>,
  pub senQuatDot: Option<Vec<String>>,
  pub imageType: Option<String>,
  pub expStartTime: Option<String>,
  pub expEndTime: Option<String>,
  pub imageSourceInfo: Option<String>,
  pub topLeftStartAz: f64,
  pub topLeftStartEl: f64,
  pub topLeftStopAz: f64,
  pub topLeftStopEl: f64,
  pub imageSetId: Option<String>,
  pub imageSetLength: i32,
  pub sequenceId: i32,
  pub frameFOVWidth: f64,
  pub frameFOVHeight: f64,
  pub pixelFOVWidth: f64,
  pub pixelFOVHeight: f64,
  pub frameWidthPixels: i32,
  pub frameHeightPixels: i32,
  pub pixelBitDepth: i32,
  pub annotationKey: Option<String>,
  pub calibrationKey: Option<String>,
  pub filename: Option<String>,
  pub filesize: i64,
  pub checksumValue: Option<String>,
  pub transactionId: Option<String>,
  pub tags: Option<Vec<String>>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub sourceDL: Option<String>,
  pub description: Option<String>,
  pub dataMode: SkyImagery_Full_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub eoObservations: Option<Vec<String>>,
}
impl Default for SkyImagery_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      onOrbit: None,
      origObjectId: None,
      idAttitudeSet: None,
      idSensor: None,
      satNo: 0,
      origSensorId: None,
      senlat: 0.0,
      senlon: 0.0,
      senalt: 0.0,
      senx: 0.0,
      seny: 0.0,
      senz: 0.0,
      senQuat: None,
      senQuatDot: None,
      imageType: None,
      expStartTime: None,
      expEndTime: None,
      imageSourceInfo: None,
      topLeftStartAz: 0.0,
      topLeftStartEl: 0.0,
      topLeftStopAz: 0.0,
      topLeftStopEl: 0.0,
      imageSetId: None,
      imageSetLength: 0,
      sequenceId: 0,
      frameFOVWidth: 0.0,
      frameFOVHeight: 0.0,
      pixelFOVWidth: 0.0,
      pixelFOVHeight: 0.0,
      frameWidthPixels: 0,
      frameHeightPixels: 0,
      pixelBitDepth: 0,
      annotationKey: None,
      calibrationKey: None,
      filename: None,
      filesize: 0,
      checksumValue: None,
      transactionId: None,
      tags: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      description: None,
      dataMode: SkyImagery_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      eoObservations: None,
    }
  }
}
impl SkyImagery_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SkyImagery_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let onOrbit = self.onOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idAttitudeSet = self.idAttitudeSet.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let senlat = self.senlat;
    let senlon = self.senlon;
    let senalt = self.senalt;
    let senx = self.senx;
    let seny = self.seny;
    let senz = self.senz;
    let senQuat = self.senQuat.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let senQuatDot = self.senQuatDot.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let imageType = self.imageType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let expStartTime = self.expStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let expEndTime = self.expEndTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let imageSourceInfo = self.imageSourceInfo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let topLeftStartAz = self.topLeftStartAz;
    let topLeftStartEl = self.topLeftStartEl;
    let topLeftStopAz = self.topLeftStopAz;
    let topLeftStopEl = self.topLeftStopEl;
    let imageSetId = self.imageSetId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let imageSetLength = self.imageSetLength;
    let sequenceId = self.sequenceId;
    let frameFOVWidth = self.frameFOVWidth;
    let frameFOVHeight = self.frameFOVHeight;
    let pixelFOVWidth = self.pixelFOVWidth;
    let pixelFOVHeight = self.pixelFOVHeight;
    let frameWidthPixels = self.frameWidthPixels;
    let frameHeightPixels = self.frameHeightPixels;
    let pixelBitDepth = self.pixelBitDepth;
    let annotationKey = self.annotationKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let calibrationKey = self.calibrationKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filename = self.filename.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filesize = self.filesize;
    let checksumValue = self.checksumValue.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let eoObservations = self.eoObservations.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    SkyImagery_Full::create(_fbb, &SkyImagery_FullArgs{
      id,
      classificationMarking,
      idOnOrbit,
      onOrbit,
      origObjectId,
      idAttitudeSet,
      idSensor,
      satNo,
      origSensorId,
      senlat,
      senlon,
      senalt,
      senx,
      seny,
      senz,
      senQuat,
      senQuatDot,
      imageType,
      expStartTime,
      expEndTime,
      imageSourceInfo,
      topLeftStartAz,
      topLeftStartEl,
      topLeftStopAz,
      topLeftStopEl,
      imageSetId,
      imageSetLength,
      sequenceId,
      frameFOVWidth,
      frameFOVHeight,
      pixelFOVWidth,
      pixelFOVHeight,
      frameWidthPixels,
      frameHeightPixels,
      pixelBitDepth,
      annotationKey,
      calibrationKey,
      filename,
      filesize,
      checksumValue,
      transactionId,
      tags,
      source,
      origin,
      origNetwork,
      sourceDL,
      description,
      dataMode,
      createdAt,
      createdBy,
      eoObservations,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SkyImagery_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sky_imagery_full_unchecked`.
pub fn root_as_sky_imagery_full(buf: &[u8]) -> Result<SkyImagery_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SkyImagery_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SkyImagery_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_sky_imagery_full_unchecked`.
pub fn size_prefixed_root_as_sky_imagery_full(buf: &[u8]) -> Result<SkyImagery_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SkyImagery_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SkyImagery_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sky_imagery_full_unchecked`.
pub fn root_as_sky_imagery_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SkyImagery_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SkyImagery_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SkyImagery_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sky_imagery_full_unchecked`.
pub fn size_prefixed_root_as_sky_imagery_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SkyImagery_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SkyImagery_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SkyImagery_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SkyImagery_Full`.
pub unsafe fn root_as_sky_imagery_full_unchecked(buf: &[u8]) -> SkyImagery_Full {
  flatbuffers::root_unchecked::<SkyImagery_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SkyImagery_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SkyImagery_Full`.
pub unsafe fn size_prefixed_root_as_sky_imagery_full_unchecked(buf: &[u8]) -> SkyImagery_Full {
  flatbuffers::size_prefixed_root_unchecked::<SkyImagery_Full>(buf)
}
pub const SKY_IMAGERY_FULL_IDENTIFIER: &str = "SKYI";

#[inline]
pub fn sky_imagery_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SKY_IMAGERY_FULL_IDENTIFIER, false)
}

#[inline]
pub fn sky_imagery_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SKY_IMAGERY_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_sky_imagery_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SkyImagery_Full<'a>>) {
  fbb.finish(root, Some(SKY_IMAGERY_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_sky_imagery_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SkyImagery_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(SKY_IMAGERY_FULL_IDENTIFIER));
}
