// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_TRACK_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_TRACK_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_TRACK_FULL_DATA_MODE_ENUM: [Track_Full_dataMode_Enum; 4] = [
  Track_Full_dataMode_Enum::REAL,
  Track_Full_dataMode_Enum::TEST,
  Track_Full_dataMode_Enum::SIMULATED,
  Track_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Track_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Track_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Track_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Track_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Track_Full_dataMode_Enum {
    type Output = Track_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Track_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Track_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Track_Full_dataMode_Enum {}
pub enum Track_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A track is a position and optionally a heading/velocity of an object such as an aircraft at a particular timestamp. It also includes optional information regarding the identity/type of the target object, if known.
pub struct Track_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Track_Full<'a> {
  type Inner = Track_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Track_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_CNTCT: flatbuffers::VOffsetT = 8;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 10;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 12;
  pub const VT_MSGTS: flatbuffers::VOffsetT = 14;
  pub const VT_MSNID: flatbuffers::VOffsetT = 16;
  pub const VT_ASSETNAT: flatbuffers::VOffsetT = 18;
  pub const VT_ASSET: flatbuffers::VOffsetT = 20;
  pub const VT_SEN: flatbuffers::VOffsetT = 22;
  pub const VT_SENQUAL: flatbuffers::VOffsetT = 24;
  pub const VT_TRKID: flatbuffers::VOffsetT = 26;
  pub const VT_TRKNUM: flatbuffers::VOffsetT = 28;
  pub const VT_TRKSTAT: flatbuffers::VOffsetT = 30;
  pub const VT_OBJNAT: flatbuffers::VOffsetT = 32;
  pub const VT_OBJID: flatbuffers::VOffsetT = 34;
  pub const VT_OBJTYPE: flatbuffers::VOffsetT = 36;
  pub const VT_OBJSPEC: flatbuffers::VOffsetT = 38;
  pub const VT_OBJPLAT: flatbuffers::VOffsetT = 40;
  pub const VT_OBJACT: flatbuffers::VOffsetT = 42;
  pub const VT_MODTYPE: flatbuffers::VOffsetT = 44;
  pub const VT_TRKITMID: flatbuffers::VOffsetT = 46;
  pub const VT_TS: flatbuffers::VOffsetT = 48;
  pub const VT_TRKQUAL: flatbuffers::VOffsetT = 50;
  pub const VT_TRKPTTYPE: flatbuffers::VOffsetT = 52;
  pub const VT_OBJIDENT: flatbuffers::VOffsetT = 54;
  pub const VT_IDENTCRED: flatbuffers::VOffsetT = 56;
  pub const VT_IDENTREL: flatbuffers::VOffsetT = 58;
  pub const VT_IDENTAMP: flatbuffers::VOffsetT = 60;
  pub const VT_ENV: flatbuffers::VOffsetT = 62;
  pub const VT_ENVCONF: flatbuffers::VOffsetT = 64;
  pub const VT_TRKCONF: flatbuffers::VOffsetT = 66;
  pub const VT_ECEFPOS: flatbuffers::VOffsetT = 68;
  pub const VT_ECEFVEL: flatbuffers::VOffsetT = 70;
  pub const VT_ECEFACC: flatbuffers::VOffsetT = 72;
  pub const VT_LAT: flatbuffers::VOffsetT = 74;
  pub const VT_LON: flatbuffers::VOffsetT = 76;
  pub const VT_ALT: flatbuffers::VOffsetT = 78;
  pub const VT_SPD: flatbuffers::VOffsetT = 80;
  pub const VT_HDNG: flatbuffers::VOffsetT = 82;
  pub const VT_COURSE: flatbuffers::VOffsetT = 84;
  pub const VT_LCO: flatbuffers::VOffsetT = 86;
  pub const VT_LCS: flatbuffers::VOffsetT = 88;
  pub const VT_LCPOS: flatbuffers::VOffsetT = 90;
  pub const VT_LCVEL: flatbuffers::VOffsetT = 92;
  pub const VT_LCACC: flatbuffers::VOffsetT = 94;
  pub const VT_ENUVEL: flatbuffers::VOffsetT = 96;
  pub const VT_ENUPOS: flatbuffers::VOffsetT = 98;
  pub const VT_COV: flatbuffers::VOffsetT = 100;
  pub const VT_ERRELLP: flatbuffers::VOffsetT = 102;
  pub const VT_SRCTYPS: flatbuffers::VOffsetT = 104;
  pub const VT_SRCIDS: flatbuffers::VOffsetT = 106;
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 108;
  pub const VT_MULTISOURCE: flatbuffers::VOffsetT = 110;
  pub const VT_JSERIES: flatbuffers::VOffsetT = 112;
  pub const VT_STRENGTH: flatbuffers::VOffsetT = 114;
  pub const VT_M1: flatbuffers::VOffsetT = 116;
  pub const VT_M1V: flatbuffers::VOffsetT = 118;
  pub const VT_M2: flatbuffers::VOffsetT = 120;
  pub const VT_M2V: flatbuffers::VOffsetT = 122;
  pub const VT_M3A: flatbuffers::VOffsetT = 124;
  pub const VT_M3AV: flatbuffers::VOffsetT = 126;
  pub const VT_TAGS: flatbuffers::VOffsetT = 128;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 130;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 132;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 134;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 136;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 138;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Track_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Track_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<Track_Full<'bldr>> {
    let mut builder = Track_FullBuilder::new(_fbb);
    builder.add_course(args.course);
    builder.add_hdng(args.hdng);
    builder.add_spd(args.spd);
    builder.add_alt(args.alt);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    builder.add_trkConf(args.trkConf);
    builder.add_envConf(args.envConf);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    builder.add_m3av(args.m3av);
    builder.add_m3a(args.m3a);
    builder.add_m2v(args.m2v);
    builder.add_m2(args.m2);
    builder.add_m1v(args.m1v);
    builder.add_m1(args.m1);
    builder.add_strength(args.strength);
    if let Some(x) = args.jSeries { builder.add_jSeries(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    if let Some(x) = args.srcIds { builder.add_srcIds(x); }
    if let Some(x) = args.srcTyps { builder.add_srcTyps(x); }
    if let Some(x) = args.errEllp { builder.add_errEllp(x); }
    if let Some(x) = args.cov { builder.add_cov(x); }
    if let Some(x) = args.eNUPos { builder.add_eNUPos(x); }
    if let Some(x) = args.eNUVel { builder.add_eNUVel(x); }
    if let Some(x) = args.lcAcc { builder.add_lcAcc(x); }
    if let Some(x) = args.lcVel { builder.add_lcVel(x); }
    if let Some(x) = args.lcPos { builder.add_lcPos(x); }
    if let Some(x) = args.lcs { builder.add_lcs(x); }
    if let Some(x) = args.lco { builder.add_lco(x); }
    if let Some(x) = args.ecefAcc { builder.add_ecefAcc(x); }
    if let Some(x) = args.ecefVel { builder.add_ecefVel(x); }
    if let Some(x) = args.ecefPos { builder.add_ecefPos(x); }
    if let Some(x) = args.env { builder.add_env(x); }
    if let Some(x) = args.identAmp { builder.add_identAmp(x); }
    builder.add_identRel(args.identRel);
    builder.add_identCred(args.identCred);
    if let Some(x) = args.objIdent { builder.add_objIdent(x); }
    if let Some(x) = args.trkPtType { builder.add_trkPtType(x); }
    builder.add_trkQual(args.trkQual);
    if let Some(x) = args.ts { builder.add_ts(x); }
    if let Some(x) = args.trkItmId { builder.add_trkItmId(x); }
    if let Some(x) = args.modType { builder.add_modType(x); }
    if let Some(x) = args.objAct { builder.add_objAct(x); }
    if let Some(x) = args.objPlat { builder.add_objPlat(x); }
    if let Some(x) = args.objSpec { builder.add_objSpec(x); }
    if let Some(x) = args.objType { builder.add_objType(x); }
    if let Some(x) = args.objId { builder.add_objId(x); }
    if let Some(x) = args.objNat { builder.add_objNat(x); }
    if let Some(x) = args.trkStat { builder.add_trkStat(x); }
    if let Some(x) = args.trkNum { builder.add_trkNum(x); }
    if let Some(x) = args.trkId { builder.add_trkId(x); }
    if let Some(x) = args.senQual { builder.add_senQual(x); }
    if let Some(x) = args.sen { builder.add_sen(x); }
    if let Some(x) = args.asset { builder.add_asset(x); }
    if let Some(x) = args.assetNat { builder.add_assetNat(x); }
    if let Some(x) = args.msnId { builder.add_msnId(x); }
    if let Some(x) = args.msgTs { builder.add_msgTs(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.cntct { builder.add_cntct(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_multiSource(args.multiSource);
    builder.finish()
  }

  pub fn unpack(&self) -> Track_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let cntct = self.cntct().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let msgTs = self.msgTs().map(|x| {
      x.to_string()
    });
    let msnId = self.msnId().map(|x| {
      x.to_string()
    });
    let assetNat = self.assetNat().map(|x| {
      x.to_string()
    });
    let asset = self.asset().map(|x| {
      x.to_string()
    });
    let sen = self.sen().map(|x| {
      x.to_string()
    });
    let senQual = self.senQual().map(|x| {
      x.to_string()
    });
    let trkId = self.trkId().map(|x| {
      x.to_string()
    });
    let trkNum = self.trkNum().map(|x| {
      x.to_string()
    });
    let trkStat = self.trkStat().map(|x| {
      x.to_string()
    });
    let objNat = self.objNat().map(|x| {
      x.to_string()
    });
    let objId = self.objId().map(|x| {
      x.to_string()
    });
    let objType = self.objType().map(|x| {
      x.to_string()
    });
    let objSpec = self.objSpec().map(|x| {
      x.to_string()
    });
    let objPlat = self.objPlat().map(|x| {
      x.to_string()
    });
    let objAct = self.objAct().map(|x| {
      x.to_string()
    });
    let modType = self.modType().map(|x| {
      x.to_string()
    });
    let trkItmId = self.trkItmId().map(|x| {
      x.to_string()
    });
    let ts = self.ts().map(|x| {
      x.to_string()
    });
    let trkQual = self.trkQual();
    let trkPtType = self.trkPtType().map(|x| {
      x.to_string()
    });
    let objIdent = self.objIdent().map(|x| {
      x.to_string()
    });
    let identCred = self.identCred();
    let identRel = self.identRel();
    let identAmp = self.identAmp().map(|x| {
      x.to_string()
    });
    let env = self.env().map(|x| {
      x.to_string()
    });
    let envConf = self.envConf();
    let trkConf = self.trkConf();
    let ecefPos = self.ecefPos().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let ecefVel = self.ecefVel().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let ecefAcc = self.ecefAcc().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let lat = self.lat();
    let lon = self.lon();
    let alt = self.alt();
    let spd = self.spd();
    let hdng = self.hdng();
    let course = self.course();
    let lco = self.lco().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let lcs = self.lcs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let lcPos = self.lcPos().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let lcVel = self.lcVel().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let lcAcc = self.lcAcc().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let eNUVel = self.eNUVel().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let eNUPos = self.eNUPos().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let cov = self.cov().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let errEllp = self.errEllp().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcTyps = self.srcTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcIds = self.srcIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let multiSource = self.multiSource();
    let jSeries = self.jSeries().map(|x| {
      x.to_string()
    });
    let strength = self.strength();
    let m1 = self.m1();
    let m1v = self.m1v();
    let m2 = self.m2();
    let m2v = self.m2v();
    let m3a = self.m3a();
    let m3av = self.m3av();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    Track_FullT {
      id,
      classificationMarking,
      cntct,
      createdAt,
      createdBy,
      msgTs,
      msnId,
      assetNat,
      asset,
      sen,
      senQual,
      trkId,
      trkNum,
      trkStat,
      objNat,
      objId,
      objType,
      objSpec,
      objPlat,
      objAct,
      modType,
      trkItmId,
      ts,
      trkQual,
      trkPtType,
      objIdent,
      identCred,
      identRel,
      identAmp,
      env,
      envConf,
      trkConf,
      ecefPos,
      ecefVel,
      ecefAcc,
      lat,
      lon,
      alt,
      spd,
      hdng,
      course,
      lco,
      lcs,
      lcPos,
      lcVel,
      lcAcc,
      eNUVel,
      eNUPos,
      cov,
      errEllp,
      srcTyps,
      srcIds,
      callSign,
      multiSource,
      jSeries,
      strength,
      m1,
      m1v,
      m2,
      m2v,
      m3a,
      m3av,
      tags,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: TRACK-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Contact information for assets reporting PPLI (Precise Participant Location and Identification). PPLI is a Link 16 message that is used by units to transmit complete location, identification, and limited status information.
  /// Example: /// Example: Contact Info
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn cntct(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_CNTCT, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_CREATEDBY, None)}
  }
  /// Message Timestamp.
  /// Example: /// Example: 2021-01-01T01:01:01.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn msgTs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_MSGTS, None)}
  }
  /// Mission ID related to the track.
  /// Example: /// Example: msnId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn msnId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_MSNID, None)}
  }
  /// Nationality or organization of the tracking/reporting system or platform (e.g. FR, NATO, US, etc.).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn assetNat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_ASSETNAT, None)}
  }
  /// Id/name of the platform providing the track data (i.e., tail number for air platform, tower ID for tower based sensor, site id for fixed radar).
  /// Example: /// Example: asset
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn asset(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_ASSET, None)}
  }
  /// Id/name of sensor providing the track data.
  /// Example: /// Example: sen
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn sen(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_SEN, None)}
  }
  /// Sensor quality.
  /// Example: /// Example: senQual
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn senQual(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_SENQUAL, None)}
  }
  /// UUID identifying the track, which should remain the same on subsequent tracks of the same object.
  /// Example: /// Example: trkId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trkId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_TRKID, None)}
  }
  /// The track number (TN) of a surveillance entity. Intended as, but not constrained to, the J-series track number encoded as five character alpha-numeric characters. Users should refer to J-series documentation for specific TN definitions.
  /// Example: /// Example: trkNum
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn trkNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_TRKNUM, None)}
  }
  /// Status of the track (e.g., INITIATING, MAINTAINING, DROPPING, TERMINATED, etc.).
  /// Example: /// Example: INITIATING
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn trkStat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_TRKSTAT, None)}
  }
  /// Nationality or organization of the track object (e.g. FR, NATO, US, etc.).
  /// Example: /// Example: NATO
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn objNat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_OBJNAT, None)}
  }
  /// The UID or designation of the tracked object.
  /// Example: /// Example: objId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn objId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_OBJID, None)}
  }
  /// The generic classification of the track object/group (e.g., HELICOPTER, TRACKED, WATERCRAFT, WHEELED, etc.). Referenced, but not constrained to, NATO STANAG 4676 object type classifications.
  /// Example: /// Example: WATERCRAFT
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn objType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_OBJTYPE, None)}
  }
  /// The object specific type. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations. The specific type can be reported as either a combination of the code and environment (e.g. 155/SURFACE) or as the descriptive representation (e.g. AUDACE DDG), which are equivalent.
  /// Example: /// Example: LIGHT_TANK
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn objSpec(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_OBJSPEC, None)}
  }
  /// The object platform type. Intended as, but not constrained to, MIL-STD-6016 environment dependent platform type designations. The platform type can be reported as either a combination of the code and environment (e.g. 14/LAND) or as the descriptive representations (e.g. COMBAT VEHICLE), which are equivalent.
  /// Example: /// Example: COMBAT_VEHICLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn objPlat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_OBJPLAT, None)}
  }
  /// The activity in which the track object is engaged. Intended as, but not constrained to, MIL-STD-6016 environment dependent activity designations. The activity can be reported as either a combination of the code and environment (e.g. 65/AIR) or as the descriptive enumeration (e.g. DIVERTING), which are equivalent.
  /// Example: /// Example: HOLDING
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn objAct(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_OBJACT, None)}
  }
  /// The type of source information from which the track was derived. Intended as, but not constrained to, NATO STANAG 4676 modality types (AIS, BFT, BIOMETRIC, COMINT, DOPPLER, ELINT, HRR, HUMINT, IMAGE, MASINT, MIXED, OSINT, OTHER):
  /// AIS: Derived from an automated identification system source.
  /// BFT: Derived from a blue force tracking source.
  /// BIOMETRICS: Derived from a biometrics source.
  /// COMINT: Derived from a communications intelligence source.
  /// DOPPLER: Derived from a radar doppler source.
  /// ELINT: Derived from an electronics intelligence source.
  /// HRR: Derived from a radar high range resolution source.
  /// HUMINT: Derived from a human intelligence source.
  /// IMAGE: Derived from a still or motion imagery source.
  /// MASINT: Derived from a measurement and signals intelligence source.
  /// MIXED: Derived from a combination of two or more sources.
  /// OSINT: Derived from an open source intelligence source.
  /// OTHER: Derived from other types of unspecified sources.
  /// Example: /// Example: MASINT
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn modType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_MODTYPE, None)}
  }
  /// UUID of the track item object, applies to STANAG-4676 messages.
  /// Example: /// Example: trkItmId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trkItmId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_TRKITMID, None)}
  }
  /// Track timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2021-06-07T14:17:39.653Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ts(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_TS, None)}
  }
  /// Value indicating track quality (not standardized).
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn trkQual(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_TRKQUAL, Some(0)).unwrap()}
  }
  /// Means by which the track data was created (e.g., MEASURED, AUTOMATIC PREDICTED, etc.).
  /// Example: /// Example: MEASURED
  /// Constraints: No constraints specified.
  #[inline]
  pub fn trkPtType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_TRKPTTYPE, None)}
  }
  /// The estimated identity of the track object (ASSUMED FRIEND, FRIEND, HOSTILE, NEUTRAL, PENDING, SUSPECT, UNKNOWN):
  /// ASSUMED FRIEND: Track assumed to be a friend due to the object characteristics, behavior, and/or origin.
  /// FRIEND: Track object supporting friendly forces and belonging to a declared friendly nation or entity.
  /// HOSTILE: Track object belonging to an opposing nation, party, group, or entity deemed to contribute to a threat to friendly forces or their mission due to its behavior, characteristics, nationality, or origin.
  /// NEUTRAL: Track object whose characteristics, behavior, nationality, and/or origin indicate that it is neither supporting nor opposing friendly forces or their mission.
  /// PENDING: Track object which has not been evaluated.
  /// SUSPECT: Track object deemed potentially hostile due to the object characteristics, behavior, nationality, and/or origin.
  /// UNKNOWN: Track object which has been evaluated and does not meet criteria for any standard identity.
  /// Example: /// Example: FRIEND
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn objIdent(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_OBJIDENT, None)}
  }
  /// Track object identity credibility.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn identCred(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_IDENTCRED, Some(0)).unwrap()}
  }
  /// Track object identity reliability.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn identRel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_IDENTREL, Some(0)).unwrap()}
  }
  /// Additional track object identity/status information, typically used for EXERCISE identity amplification (FAKER, JOKER, KILO, TRAVELLER, ZOMBIE):
  /// FAKER: Friendly track, object, or entity acting as an exercise hostile.
  /// JOKER: Friendly track, object, or entity acting as an exercise suspect.
  /// KILO: Friendly high-value object.
  /// TRAVELLER: Suspect land or surface track following a recognized traffic route.
  /// ZOMBIE: Suspect track, object, or entity of special interest.
  /// Example: /// Example: ZOMBIE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn identAmp(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_IDENTAMP, None)}
  }
  /// The track environment type (AIR, LAND, SPACE, SUBSURFACE, SURFACE, UNKNOWN):
  /// AIR: Between sea level and the Kármán line, which has an altitude of 100 kilometers (62 miles).
  /// LAND: On the surface of dry land.
  /// SPACE: Above the Kármán line, which has an altitude of 100 kilometers (62 miles).
  /// SURFACE: On the surface of a body of water.
  /// SUBSURFACE: Below the surface of a body of water.
  /// UNKNOWN: Environment is not known.
  /// Example: /// Example: LAND
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn env(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_ENV, None)}
  }
  /// Track environment confidence estimate (not standardized).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn envConf(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_ENVCONF, Some(0.0)).unwrap()}
  }
  /// Overall track confidence estimate (not standardized, but typically a value between 0 and 1, with 0 indicating lowest confidence).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn trkConf(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_TRKCONF, Some(0.0)).unwrap()}
  }
  /// Track object location in ECEF [x, y, z], meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ecefPos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_ECEFPOS, None)}
  }
  /// Track object velocity in ECEF [x', y', z'], meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ecefVel(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_ECEFVEL, None)}
  }
  /// Track object acceleration in ECEF [x'', y'', z''], meters/sec^2.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ecefAcc(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_ECEFACC, None)}
  }
  /// WGS-84 latitude of the track object, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_LAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the track object, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_LON, Some(0.0)).unwrap()}
  }
  /// Track point altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a track object height above ellipsoid, and negative values indicate a track object below ellipsoid, applicable to the depth estimate for a subsurface track.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_ALT, Some(0.0)).unwrap()}
  }
  /// Track object spd, in meters/sec.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn spd(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_SPD, Some(0.0)).unwrap()}
  }
  /// The track object heading, in degrees clockwise from true North at the object location.
  /// Example: /// Example: 19.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hdng(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_HDNG, Some(0.0)).unwrap()}
  }
  /// The track object course-over-ground, in degrees clockwise from true North at the object location (0-360 degrees).
  /// Example: /// Example: 88.37
  /// Constraints: No constraints specified.
  #[inline]
  pub fn course(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Track_Full::VT_COURSE, Some(0.0)).unwrap()}
  }
  /// Origin of a local coordinate system [lat, lon, altitude].  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lco(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_LCO, None)}
  }
  /// x, y, and z-axis rotations about ECEF that define a local cartesian system.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lcs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_LCS, None)}
  }
  /// Estimate of the position, [x, y, z], of the track object in the defined cartesian system, in meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lcPos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_LCPOS, None)}
  }
  /// Estimate of the velocity, [x', y', z'], of the track object in the defined cartesian system, in meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lcVel(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_LCVEL, None)}
  }
  /// Estimate of the acceleration, [x'', y'', z''], of the track object in the defined cartesian system, in meters/sec^2.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lcAcc(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_LCACC, None)}
  }
  /// East, North, Up velocity components, in meters/sec.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eNUVel(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_ENUVEL, None)}
  }
  /// East, North, Up position components, in meters.  When provided, array must always contain 3 values.
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn eNUPos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_ENUPOS, None)}
  }
  /// Covariance matrix, in meter and second based units, for the defined cartesian system.
  /// The array values represent the lower triangular half of the position-velocity covariance matrix.  The size of the covariance matrix is dynamic.  The values are output as an array of values corresponding to the position-velocity covariance element positions, ordered as follows:
  /// &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;&nbsp;y&nbsp;&nbsp;z&nbsp;&nbsp;&nbsp;x'&nbsp;&nbsp;y'&nbsp;z'&nbsp;&nbsp;
  /// x&nbsp;&nbsp;&nbsp;&nbsp;1
  /// y&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3
  /// z&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;6
  /// x'&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;9&nbsp;&nbsp;10
  /// y'&nbsp;&nbsp;11&nbsp;&nbsp;12&nbsp;&nbsp;13&nbsp;&nbsp;14&nbsp;&nbsp;15
  /// z'&nbsp;&nbsp;16&nbsp;&nbsp;17&nbsp;&nbsp;18&nbsp;&nbsp;19&nbsp;&nbsp;20&nbsp;&nbsp; 21
  /// The covariance matrix will be as large as the last element needed, and with unused values zero-filled to maintain proper element positioning in the array.  For example, for a 2D (x, y) position-only covariance, the covariance matrix will be 2x2 and the array would contain the 3 elements corresponding to the x, and y position.  Another example, now for a 2D (x, y) position-velocity covariance, the covariance matrix will be 5x5 and the array would contain the 15 elements corresponding to the relevant x, y, x', and y' values (with the z-row and z-column being all zeros). The cov array should contain only the lower left triangle values from top left down to bottom right, in order.
  /// Example: /// Example: [1.1, 2.2, 3.3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cov(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_COV, None)}
  }
  /// Uncertainty ellipsoid [semi-major axis (m), semi-minor axis (m), orientation (deg)].
  /// Example: /// Example: [1.23, 2.34, 3.45]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn errEllp(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_ERRELLP, None)}
  }
  /// Array of UDL record types (POI, MTI, TRACK, GROUNDIMAGE) that contributed to the generation of this fused track.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array, used in the track fusion. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['MTI', 'POI']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_SRCTYPS, None)}
  }
  /// Array of UUIDs of the UDL data records that contributed to the generation of this fused track. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array, used in the track fusion.  The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object (e.g. /udl/poi/{uuid}).
  /// Example: /// Example: ['f7c70cc8-f9b7-4467-b4ad-3904e360e842', '1da3fab000014e3133709830937387405']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_SRCIDS, None)}
  }
  /// The call sign currently assigned to this track object.
  /// Example: /// Example: callSign
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_CALLSIGN, None)}
  }
  /// Flag indicating that this track is fused from multiple sensor sources.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn multiSource(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Track_Full::VT_MULTISOURCE, Some(false)).unwrap()}
  }
  /// The J-series message type, if this track is derived from a J-series message.
  /// Example: /// Example: J12.5
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn jSeries(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_JSERIES, None)}
  }
  /// The number of objects or units moving as a group and represented as a single entity in this track message. If null, the track is assumed to represent a single object. Note that if this track derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  #[inline]
  pub fn strength(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_STRENGTH, Some(0)).unwrap()}
  }
  /// Mode-1 interrogation response (mission code), indicating mission or aircraft type.
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m1(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_M1, Some(0)).unwrap()}
  }
  /// Mode-1 validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m1v(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_M1V, Some(0)).unwrap()}
  }
  /// Mode-2 interrogation response (military identification code).
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m2(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_M2, Some(0)).unwrap()}
  }
  /// Mode-2 validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m2v(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_M2V, Some(0)).unwrap()}
  }
  /// Mode-3/A interrogation response (aircraft identification), provides a 4-digit octal identification code for the aircraft, assigned by the air traffic controller. Mode-3/A is shared military/civilian use.
  /// Example: /// Example: 2636
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m3a(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_M3A, Some(0)).unwrap()}
  }
  /// Mode-3/A validity status.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn m3av(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Track_Full::VT_M3AV, Some(0)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Track_Full::VT_TAGS, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Track_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Track_Full_dataMode_Enum>(Track_Full::VT_DATAMODE, Some(Track_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Track_Full::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for Track_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cntct", Self::VT_CNTCT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgTs", Self::VT_MSGTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msnId", Self::VT_MSNID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("assetNat", Self::VT_ASSETNAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("asset", Self::VT_ASSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sen", Self::VT_SEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("senQual", Self::VT_SENQUAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trkId", Self::VT_TRKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trkNum", Self::VT_TRKNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trkStat", Self::VT_TRKSTAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objNat", Self::VT_OBJNAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objId", Self::VT_OBJID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objType", Self::VT_OBJTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objSpec", Self::VT_OBJSPEC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objPlat", Self::VT_OBJPLAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objAct", Self::VT_OBJACT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("modType", Self::VT_MODTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trkItmId", Self::VT_TRKITMID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ts", Self::VT_TS, false)?
     .visit_field::<i32>("trkQual", Self::VT_TRKQUAL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trkPtType", Self::VT_TRKPTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objIdent", Self::VT_OBJIDENT, false)?
     .visit_field::<i32>("identCred", Self::VT_IDENTCRED, false)?
     .visit_field::<i32>("identRel", Self::VT_IDENTREL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("identAmp", Self::VT_IDENTAMP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("env", Self::VT_ENV, false)?
     .visit_field::<f64>("envConf", Self::VT_ENVCONF, false)?
     .visit_field::<f64>("trkConf", Self::VT_TRKCONF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ecefPos", Self::VT_ECEFPOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ecefVel", Self::VT_ECEFVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ecefAcc", Self::VT_ECEFACC, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<f64>("alt", Self::VT_ALT, false)?
     .visit_field::<f64>("spd", Self::VT_SPD, false)?
     .visit_field::<f64>("hdng", Self::VT_HDNG, false)?
     .visit_field::<f64>("course", Self::VT_COURSE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("lco", Self::VT_LCO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("lcs", Self::VT_LCS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("lcPos", Self::VT_LCPOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("lcVel", Self::VT_LCVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("lcAcc", Self::VT_LCACC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("eNUVel", Self::VT_ENUVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("eNUPos", Self::VT_ENUPOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("cov", Self::VT_COV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("errEllp", Self::VT_ERRELLP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcTyps", Self::VT_SRCTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcIds", Self::VT_SRCIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<bool>("multiSource", Self::VT_MULTISOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("jSeries", Self::VT_JSERIES, false)?
     .visit_field::<i32>("strength", Self::VT_STRENGTH, false)?
     .visit_field::<i32>("m1", Self::VT_M1, false)?
     .visit_field::<i32>("m1v", Self::VT_M1V, false)?
     .visit_field::<i32>("m2", Self::VT_M2, false)?
     .visit_field::<i32>("m2v", Self::VT_M2V, false)?
     .visit_field::<i32>("m3a", Self::VT_M3A, false)?
     .visit_field::<i32>("m3av", Self::VT_M3AV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<Track_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct Track_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cntct: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgTs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msnId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub assetNat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub asset: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sen: Option<flatbuffers::WIPOffset<&'a str>>,
    pub senQual: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trkId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trkNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trkStat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objNat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objSpec: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objPlat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objAct: Option<flatbuffers::WIPOffset<&'a str>>,
    pub modType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trkItmId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ts: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trkQual: i32,
    pub trkPtType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objIdent: Option<flatbuffers::WIPOffset<&'a str>>,
    pub identCred: i32,
    pub identRel: i32,
    pub identAmp: Option<flatbuffers::WIPOffset<&'a str>>,
    pub env: Option<flatbuffers::WIPOffset<&'a str>>,
    pub envConf: f64,
    pub trkConf: f64,
    pub ecefPos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ecefVel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub ecefAcc: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub lat: f64,
    pub lon: f64,
    pub alt: f64,
    pub spd: f64,
    pub hdng: f64,
    pub course: f64,
    pub lco: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub lcs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub lcPos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub lcVel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub lcAcc: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub eNUVel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub eNUPos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub cov: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub errEllp: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub multiSource: bool,
    pub jSeries: Option<flatbuffers::WIPOffset<&'a str>>,
    pub strength: i32,
    pub m1: i32,
    pub m1v: i32,
    pub m2: i32,
    pub m2v: i32,
    pub m3a: i32,
    pub m3av: i32,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Track_Full_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Track_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    Track_FullArgs {
      id: None,
      classificationMarking: None,
      cntct: None,
      createdAt: None,
      createdBy: None,
      msgTs: None,
      msnId: None,
      assetNat: None,
      asset: None,
      sen: None,
      senQual: None,
      trkId: None,
      trkNum: None,
      trkStat: None,
      objNat: None,
      objId: None,
      objType: None,
      objSpec: None,
      objPlat: None,
      objAct: None,
      modType: None,
      trkItmId: None,
      ts: None,
      trkQual: 0,
      trkPtType: None,
      objIdent: None,
      identCred: 0,
      identRel: 0,
      identAmp: None,
      env: None,
      envConf: 0.0,
      trkConf: 0.0,
      ecefPos: None,
      ecefVel: None,
      ecefAcc: None,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      spd: 0.0,
      hdng: 0.0,
      course: 0.0,
      lco: None,
      lcs: None,
      lcPos: None,
      lcVel: None,
      lcAcc: None,
      eNUVel: None,
      eNUPos: None,
      cov: None,
      errEllp: None,
      srcTyps: None,
      srcIds: None,
      callSign: None,
      multiSource: false,
      jSeries: None,
      strength: 0,
      m1: 0,
      m1v: 0,
      m2: 0,
      m2v: 0,
      m3a: 0,
      m3av: 0,
      tags: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: Track_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct Track_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Track_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_cntct(&mut self, cntct: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_CNTCT, cntct);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_msgTs(&mut self, msgTs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_MSGTS, msgTs);
  }
  #[inline]
  pub fn add_msnId(&mut self, msnId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_MSNID, msnId);
  }
  #[inline]
  pub fn add_assetNat(&mut self, assetNat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ASSETNAT, assetNat);
  }
  #[inline]
  pub fn add_asset(&mut self, asset: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ASSET, asset);
  }
  #[inline]
  pub fn add_sen(&mut self, sen: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_SEN, sen);
  }
  #[inline]
  pub fn add_senQual(&mut self, senQual: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_SENQUAL, senQual);
  }
  #[inline]
  pub fn add_trkId(&mut self, trkId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_TRKID, trkId);
  }
  #[inline]
  pub fn add_trkNum(&mut self, trkNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_TRKNUM, trkNum);
  }
  #[inline]
  pub fn add_trkStat(&mut self, trkStat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_TRKSTAT, trkStat);
  }
  #[inline]
  pub fn add_objNat(&mut self, objNat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_OBJNAT, objNat);
  }
  #[inline]
  pub fn add_objId(&mut self, objId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_OBJID, objId);
  }
  #[inline]
  pub fn add_objType(&mut self, objType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_OBJTYPE, objType);
  }
  #[inline]
  pub fn add_objSpec(&mut self, objSpec: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_OBJSPEC, objSpec);
  }
  #[inline]
  pub fn add_objPlat(&mut self, objPlat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_OBJPLAT, objPlat);
  }
  #[inline]
  pub fn add_objAct(&mut self, objAct: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_OBJACT, objAct);
  }
  #[inline]
  pub fn add_modType(&mut self, modType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_MODTYPE, modType);
  }
  #[inline]
  pub fn add_trkItmId(&mut self, trkItmId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_TRKITMID, trkItmId);
  }
  #[inline]
  pub fn add_ts(&mut self, ts: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_TS, ts);
  }
  #[inline]
  pub fn add_trkQual(&mut self, trkQual: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_TRKQUAL, trkQual, 0);
  }
  #[inline]
  pub fn add_trkPtType(&mut self, trkPtType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_TRKPTTYPE, trkPtType);
  }
  #[inline]
  pub fn add_objIdent(&mut self, objIdent: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_OBJIDENT, objIdent);
  }
  #[inline]
  pub fn add_identCred(&mut self, identCred: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_IDENTCRED, identCred, 0);
  }
  #[inline]
  pub fn add_identRel(&mut self, identRel: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_IDENTREL, identRel, 0);
  }
  #[inline]
  pub fn add_identAmp(&mut self, identAmp: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_IDENTAMP, identAmp);
  }
  #[inline]
  pub fn add_env(&mut self, env: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ENV, env);
  }
  #[inline]
  pub fn add_envConf(&mut self, envConf: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_ENVCONF, envConf, 0.0);
  }
  #[inline]
  pub fn add_trkConf(&mut self, trkConf: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_TRKCONF, trkConf, 0.0);
  }
  #[inline]
  pub fn add_ecefPos(&mut self, ecefPos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ECEFPOS, ecefPos);
  }
  #[inline]
  pub fn add_ecefVel(&mut self, ecefVel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ECEFVEL, ecefVel);
  }
  #[inline]
  pub fn add_ecefAcc(&mut self, ecefAcc: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ECEFACC, ecefAcc);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_alt(&mut self, alt: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_ALT, alt, 0.0);
  }
  #[inline]
  pub fn add_spd(&mut self, spd: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_SPD, spd, 0.0);
  }
  #[inline]
  pub fn add_hdng(&mut self, hdng: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_HDNG, hdng, 0.0);
  }
  #[inline]
  pub fn add_course(&mut self, course: f64) {
    self.fbb_.push_slot::<f64>(Track_Full::VT_COURSE, course, 0.0);
  }
  #[inline]
  pub fn add_lco(&mut self, lco: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_LCO, lco);
  }
  #[inline]
  pub fn add_lcs(&mut self, lcs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_LCS, lcs);
  }
  #[inline]
  pub fn add_lcPos(&mut self, lcPos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_LCPOS, lcPos);
  }
  #[inline]
  pub fn add_lcVel(&mut self, lcVel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_LCVEL, lcVel);
  }
  #[inline]
  pub fn add_lcAcc(&mut self, lcAcc: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_LCACC, lcAcc);
  }
  #[inline]
  pub fn add_eNUVel(&mut self, eNUVel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ENUVEL, eNUVel);
  }
  #[inline]
  pub fn add_eNUPos(&mut self, eNUPos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ENUPOS, eNUPos);
  }
  #[inline]
  pub fn add_cov(&mut self, cov: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_COV, cov);
  }
  #[inline]
  pub fn add_errEllp(&mut self, errEllp: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ERRELLP, errEllp);
  }
  #[inline]
  pub fn add_srcTyps(&mut self, srcTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_SRCTYPS, srcTyps);
  }
  #[inline]
  pub fn add_srcIds(&mut self, srcIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_SRCIDS, srcIds);
  }
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_multiSource(&mut self, multiSource: bool) {
    self.fbb_.push_slot::<bool>(Track_Full::VT_MULTISOURCE, multiSource, false);
  }
  #[inline]
  pub fn add_jSeries(&mut self, jSeries: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_JSERIES, jSeries);
  }
  #[inline]
  pub fn add_strength(&mut self, strength: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_STRENGTH, strength, 0);
  }
  #[inline]
  pub fn add_m1(&mut self, m1: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_M1, m1, 0);
  }
  #[inline]
  pub fn add_m1v(&mut self, m1v: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_M1V, m1v, 0);
  }
  #[inline]
  pub fn add_m2(&mut self, m2: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_M2, m2, 0);
  }
  #[inline]
  pub fn add_m2v(&mut self, m2v: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_M2V, m2v, 0);
  }
  #[inline]
  pub fn add_m3a(&mut self, m3a: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_M3A, m3a, 0);
  }
  #[inline]
  pub fn add_m3av(&mut self, m3av: i32) {
    self.fbb_.push_slot::<i32>(Track_Full::VT_M3AV, m3av, 0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Track_Full_dataMode_Enum) {
    self.fbb_.push_slot::<Track_Full_dataMode_Enum>(Track_Full::VT_DATAMODE, dataMode, Track_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Track_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Track_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Track_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Track_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Track_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Track_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("cntct", &self.cntct());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("msgTs", &self.msgTs());
      ds.field("msnId", &self.msnId());
      ds.field("assetNat", &self.assetNat());
      ds.field("asset", &self.asset());
      ds.field("sen", &self.sen());
      ds.field("senQual", &self.senQual());
      ds.field("trkId", &self.trkId());
      ds.field("trkNum", &self.trkNum());
      ds.field("trkStat", &self.trkStat());
      ds.field("objNat", &self.objNat());
      ds.field("objId", &self.objId());
      ds.field("objType", &self.objType());
      ds.field("objSpec", &self.objSpec());
      ds.field("objPlat", &self.objPlat());
      ds.field("objAct", &self.objAct());
      ds.field("modType", &self.modType());
      ds.field("trkItmId", &self.trkItmId());
      ds.field("ts", &self.ts());
      ds.field("trkQual", &self.trkQual());
      ds.field("trkPtType", &self.trkPtType());
      ds.field("objIdent", &self.objIdent());
      ds.field("identCred", &self.identCred());
      ds.field("identRel", &self.identRel());
      ds.field("identAmp", &self.identAmp());
      ds.field("env", &self.env());
      ds.field("envConf", &self.envConf());
      ds.field("trkConf", &self.trkConf());
      ds.field("ecefPos", &self.ecefPos());
      ds.field("ecefVel", &self.ecefVel());
      ds.field("ecefAcc", &self.ecefAcc());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("alt", &self.alt());
      ds.field("spd", &self.spd());
      ds.field("hdng", &self.hdng());
      ds.field("course", &self.course());
      ds.field("lco", &self.lco());
      ds.field("lcs", &self.lcs());
      ds.field("lcPos", &self.lcPos());
      ds.field("lcVel", &self.lcVel());
      ds.field("lcAcc", &self.lcAcc());
      ds.field("eNUVel", &self.eNUVel());
      ds.field("eNUPos", &self.eNUPos());
      ds.field("cov", &self.cov());
      ds.field("errEllp", &self.errEllp());
      ds.field("srcTyps", &self.srcTyps());
      ds.field("srcIds", &self.srcIds());
      ds.field("callSign", &self.callSign());
      ds.field("multiSource", &self.multiSource());
      ds.field("jSeries", &self.jSeries());
      ds.field("strength", &self.strength());
      ds.field("m1", &self.m1());
      ds.field("m1v", &self.m1v());
      ds.field("m2", &self.m2());
      ds.field("m2v", &self.m2v());
      ds.field("m3a", &self.m3a());
      ds.field("m3av", &self.m3av());
      ds.field("tags", &self.tags());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Track_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub cntct: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub msgTs: Option<String>,
  pub msnId: Option<String>,
  pub assetNat: Option<String>,
  pub asset: Option<String>,
  pub sen: Option<String>,
  pub senQual: Option<String>,
  pub trkId: Option<String>,
  pub trkNum: Option<String>,
  pub trkStat: Option<String>,
  pub objNat: Option<String>,
  pub objId: Option<String>,
  pub objType: Option<String>,
  pub objSpec: Option<String>,
  pub objPlat: Option<String>,
  pub objAct: Option<String>,
  pub modType: Option<String>,
  pub trkItmId: Option<String>,
  pub ts: Option<String>,
  pub trkQual: i32,
  pub trkPtType: Option<String>,
  pub objIdent: Option<String>,
  pub identCred: i32,
  pub identRel: i32,
  pub identAmp: Option<String>,
  pub env: Option<String>,
  pub envConf: f64,
  pub trkConf: f64,
  pub ecefPos: Option<Vec<String>>,
  pub ecefVel: Option<Vec<String>>,
  pub ecefAcc: Option<Vec<String>>,
  pub lat: f64,
  pub lon: f64,
  pub alt: f64,
  pub spd: f64,
  pub hdng: f64,
  pub course: f64,
  pub lco: Option<Vec<String>>,
  pub lcs: Option<Vec<String>>,
  pub lcPos: Option<Vec<String>>,
  pub lcVel: Option<Vec<String>>,
  pub lcAcc: Option<Vec<String>>,
  pub eNUVel: Option<Vec<String>>,
  pub eNUPos: Option<Vec<String>>,
  pub cov: Option<Vec<String>>,
  pub errEllp: Option<Vec<String>>,
  pub srcTyps: Option<Vec<String>>,
  pub srcIds: Option<Vec<String>>,
  pub callSign: Option<String>,
  pub multiSource: bool,
  pub jSeries: Option<String>,
  pub strength: i32,
  pub m1: i32,
  pub m1v: i32,
  pub m2: i32,
  pub m2v: i32,
  pub m3a: i32,
  pub m3av: i32,
  pub tags: Option<Vec<String>>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: Track_Full_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for Track_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      cntct: None,
      createdAt: None,
      createdBy: None,
      msgTs: None,
      msnId: None,
      assetNat: None,
      asset: None,
      sen: None,
      senQual: None,
      trkId: None,
      trkNum: None,
      trkStat: None,
      objNat: None,
      objId: None,
      objType: None,
      objSpec: None,
      objPlat: None,
      objAct: None,
      modType: None,
      trkItmId: None,
      ts: None,
      trkQual: 0,
      trkPtType: None,
      objIdent: None,
      identCred: 0,
      identRel: 0,
      identAmp: None,
      env: None,
      envConf: 0.0,
      trkConf: 0.0,
      ecefPos: None,
      ecefVel: None,
      ecefAcc: None,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      spd: 0.0,
      hdng: 0.0,
      course: 0.0,
      lco: None,
      lcs: None,
      lcPos: None,
      lcVel: None,
      lcAcc: None,
      eNUVel: None,
      eNUPos: None,
      cov: None,
      errEllp: None,
      srcTyps: None,
      srcIds: None,
      callSign: None,
      multiSource: false,
      jSeries: None,
      strength: 0,
      m1: 0,
      m1v: 0,
      m2: 0,
      m2v: 0,
      m3a: 0,
      m3av: 0,
      tags: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: Track_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl Track_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Track_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cntct = self.cntct.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgTs = self.msgTs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msnId = self.msnId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let assetNat = self.assetNat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let asset = self.asset.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sen = self.sen.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let senQual = self.senQual.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trkId = self.trkId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trkNum = self.trkNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trkStat = self.trkStat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objNat = self.objNat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objId = self.objId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objType = self.objType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objSpec = self.objSpec.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objPlat = self.objPlat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objAct = self.objAct.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let modType = self.modType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trkItmId = self.trkItmId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ts = self.ts.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trkQual = self.trkQual;
    let trkPtType = self.trkPtType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objIdent = self.objIdent.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let identCred = self.identCred;
    let identRel = self.identRel;
    let identAmp = self.identAmp.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let env = self.env.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let envConf = self.envConf;
    let trkConf = self.trkConf;
    let ecefPos = self.ecefPos.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ecefVel = self.ecefVel.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let ecefAcc = self.ecefAcc.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let lat = self.lat;
    let lon = self.lon;
    let alt = self.alt;
    let spd = self.spd;
    let hdng = self.hdng;
    let course = self.course;
    let lco = self.lco.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let lcs = self.lcs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let lcPos = self.lcPos.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let lcVel = self.lcVel.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let lcAcc = self.lcAcc.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let eNUVel = self.eNUVel.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let eNUPos = self.eNUPos.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let cov = self.cov.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let errEllp = self.errEllp.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcTyps = self.srcTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcIds = self.srcIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let multiSource = self.multiSource;
    let jSeries = self.jSeries.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let strength = self.strength;
    let m1 = self.m1;
    let m1v = self.m1v;
    let m2 = self.m2;
    let m2v = self.m2v;
    let m3a = self.m3a;
    let m3av = self.m3av;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Track_Full::create(_fbb, &Track_FullArgs{
      id,
      classificationMarking,
      cntct,
      createdAt,
      createdBy,
      msgTs,
      msnId,
      assetNat,
      asset,
      sen,
      senQual,
      trkId,
      trkNum,
      trkStat,
      objNat,
      objId,
      objType,
      objSpec,
      objPlat,
      objAct,
      modType,
      trkItmId,
      ts,
      trkQual,
      trkPtType,
      objIdent,
      identCred,
      identRel,
      identAmp,
      env,
      envConf,
      trkConf,
      ecefPos,
      ecefVel,
      ecefAcc,
      lat,
      lon,
      alt,
      spd,
      hdng,
      course,
      lco,
      lcs,
      lcPos,
      lcVel,
      lcAcc,
      eNUVel,
      eNUPos,
      cov,
      errEllp,
      srcTyps,
      srcIds,
      callSign,
      multiSource,
      jSeries,
      strength,
      m1,
      m1v,
      m2,
      m2v,
      m3a,
      m3av,
      tags,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Track_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_track_full_unchecked`.
pub fn root_as_track_full(buf: &[u8]) -> Result<Track_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Track_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Track_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_track_full_unchecked`.
pub fn size_prefixed_root_as_track_full(buf: &[u8]) -> Result<Track_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Track_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Track_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_track_full_unchecked`.
pub fn root_as_track_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Track_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Track_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Track_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_track_full_unchecked`.
pub fn size_prefixed_root_as_track_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Track_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Track_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Track_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Track_Full`.
pub unsafe fn root_as_track_full_unchecked(buf: &[u8]) -> Track_Full {
  flatbuffers::root_unchecked::<Track_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Track_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Track_Full`.
pub unsafe fn size_prefixed_root_as_track_full_unchecked(buf: &[u8]) -> Track_Full {
  flatbuffers::size_prefixed_root_unchecked::<Track_Full>(buf)
}
pub const TRACK_FULL_IDENTIFIER: &str = "TRAC";

#[inline]
pub fn track_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, TRACK_FULL_IDENTIFIER, false)
}

#[inline]
pub fn track_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, TRACK_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_track_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Track_Full<'a>>) {
  fbb.finish(root, Some(TRACK_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_track_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Track_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(TRACK_FULL_IDENTIFIER));
}
