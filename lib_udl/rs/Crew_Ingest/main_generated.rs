// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_CREW_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_CREW_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_CREW_INGEST_DATA_MODE_ENUM: [Crew_Ingest_dataMode_Enum; 4] = [
  Crew_Ingest_dataMode_Enum::REAL,
  Crew_Ingest_dataMode_Enum::TEST,
  Crew_Ingest_dataMode_Enum::SIMULATED,
  Crew_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Crew_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Crew_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Crew_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Crew_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Crew_Ingest_dataMode_Enum {
    type Output = Crew_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Crew_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Crew_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Crew_Ingest_dataMode_Enum {}
pub enum Crew_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Crew Services.
pub struct Crew_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Crew_Ingest<'a> {
  type Inner = Crew_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Crew_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_ORIGCREWID: flatbuffers::VOffsetT = 8;
  pub const VT_CREWNAME: flatbuffers::VOffsetT = 10;
  pub const VT_STATUS: flatbuffers::VOffsetT = 12;
  pub const VT_IDSORTIE: flatbuffers::VOffsetT = 14;
  pub const VT_LEGALALERTTIME: flatbuffers::VOffsetT = 16;
  pub const VT_LEGALBRAVOTIME: flatbuffers::VOffsetT = 18;
  pub const VT_ALERTEDTIME: flatbuffers::VOffsetT = 20;
  pub const VT_RETURNTIME: flatbuffers::VOffsetT = 22;
  pub const VT_FDPELIGTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_FDPTYPE: flatbuffers::VOffsetT = 26;
  pub const VT_CREWTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_ARMSCREWUNIT: flatbuffers::VOffsetT = 30;
  pub const VT_CREWMEMBERS: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 36;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 38;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 40;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 44;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 46;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 48;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Crew_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Crew_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<Crew_Ingest<'bldr>> {
    let mut builder = Crew_IngestBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.crewMembers { builder.add_crewMembers(x); }
    if let Some(x) = args.armsCrewUnit { builder.add_armsCrewUnit(x); }
    if let Some(x) = args.crewType { builder.add_crewType(x); }
    if let Some(x) = args.fdpType { builder.add_fdpType(x); }
    if let Some(x) = args.fdpEligType { builder.add_fdpEligType(x); }
    if let Some(x) = args.returnTime { builder.add_returnTime(x); }
    if let Some(x) = args.alertedTime { builder.add_alertedTime(x); }
    if let Some(x) = args.legalBravoTime { builder.add_legalBravoTime(x); }
    if let Some(x) = args.legalAlertTime { builder.add_legalAlertTime(x); }
    if let Some(x) = args.idSortie { builder.add_idSortie(x); }
    if let Some(x) = args.status { builder.add_status(x); }
    if let Some(x) = args.crewName { builder.add_crewName(x); }
    if let Some(x) = args.origCrewId { builder.add_origCrewId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> Crew_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let origCrewId = self.origCrewId().map(|x| {
      x.to_string()
    });
    let crewName = self.crewName().map(|x| {
      x.to_string()
    });
    let status = self.status().map(|x| {
      x.to_string()
    });
    let idSortie = self.idSortie().map(|x| {
      x.to_string()
    });
    let legalAlertTime = self.legalAlertTime().map(|x| {
      x.to_string()
    });
    let legalBravoTime = self.legalBravoTime().map(|x| {
      x.to_string()
    });
    let alertedTime = self.alertedTime().map(|x| {
      x.to_string()
    });
    let returnTime = self.returnTime().map(|x| {
      x.to_string()
    });
    let fdpEligType = self.fdpEligType().map(|x| {
      x.to_string()
    });
    let fdpType = self.fdpType().map(|x| {
      x.to_string()
    });
    let crewType = self.crewType().map(|x| {
      x.to_string()
    });
    let armsCrewUnit = self.armsCrewUnit().map(|x| {
      x.to_string()
    });
    let crewMembers = self.crewMembers().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    Crew_IngestT {
      id,
      classificationMarking,
      origCrewId,
      crewName,
      status,
      idSortie,
      legalAlertTime,
      legalBravoTime,
      alertedTime,
      returnTime,
      fdpEligType,
      fdpType,
      crewType,
      armsCrewUnit,
      crewMembers,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdad6945-c9e4-b829-f7be-1ad075541921
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the formed crew provided by the originating source. Provided for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: JHJDHjhuu929o92
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn origCrewId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_ORIGCREWID, None)}
  }
  /// Name of the formed crew.
  /// Example: /// Example: falcon
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn crewName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_CREWNAME, None)}
  }
  /// Crew Status (e.g. APPROVED, PENDING).
  /// Example: /// Example: APPROVED
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn status(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_STATUS, None)}
  }
  /// Unique identifier of the Aircraft Sortie associated with this crew record.
  /// Example: /// Example: 4ef3d1e8-ab08-ab70-498f-edc479734e5c
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSortie(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_IDSORTIE, None)}
  }
  /// Time the crew is legal for alert, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legalAlertTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_LEGALALERTTIME, None)}
  }
  /// Time the crew is legal for bravo, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legalBravoTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_LEGALBRAVOTIME, None)}
  }
  /// Time the crew was alerted, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alertedTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_ALERTEDTIME, None)}
  }
  /// Scheduled return time, in ISO8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn returnTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_RETURNTIME, None)}
  }
  /// Crew Flight Duty Period (FDP) eligibility type.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn fdpEligType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_FDPELIGTYPE, None)}
  }
  /// Flight Duty Period (FDP) type.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn fdpType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_FDPTYPE, None)}
  }
  /// Crew type.
  /// Example: /// Example: AIRLAND
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn crewType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_CREWTYPE, None)}
  }
  /// The crew's Aviation Resource Management System (ARMS) unit.  If multiple units exist, use the Aircraft Commander's Unit.
  /// Example: /// Example: 00016ALSQ
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn armsCrewUnit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_ARMSCREWUNIT, None)}
  }
  /// CrewMembers Collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn crewMembers(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Crew_Ingest::VT_CREWMEMBERS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_CREATEDBY, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_UPDATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Crew_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Crew_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Crew_Ingest_dataMode_Enum>(Crew_Ingest::VT_DATAMODE, Some(Crew_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Crew_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origCrewId", Self::VT_ORIGCREWID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("crewName", Self::VT_CREWNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("status", Self::VT_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSortie", Self::VT_IDSORTIE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("legalAlertTime", Self::VT_LEGALALERTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("legalBravoTime", Self::VT_LEGALBRAVOTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("alertedTime", Self::VT_ALERTEDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("returnTime", Self::VT_RETURNTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fdpEligType", Self::VT_FDPELIGTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fdpType", Self::VT_FDPTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("crewType", Self::VT_CREWTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("armsCrewUnit", Self::VT_ARMSCREWUNIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("crewMembers", Self::VT_CREWMEMBERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<Crew_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct Crew_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origCrewId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub crewName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub status: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSortie: Option<flatbuffers::WIPOffset<&'a str>>,
    pub legalAlertTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub legalBravoTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub alertedTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub returnTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fdpEligType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fdpType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub crewType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub armsCrewUnit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub crewMembers: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Crew_Ingest_dataMode_Enum,
}
impl<'a> Default for Crew_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    Crew_IngestArgs {
      id: None,
      classificationMarking: None,
      origCrewId: None,
      crewName: None,
      status: None,
      idSortie: None,
      legalAlertTime: None,
      legalBravoTime: None,
      alertedTime: None,
      returnTime: None,
      fdpEligType: None,
      fdpType: None,
      crewType: None,
      armsCrewUnit: None,
      crewMembers: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Crew_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct Crew_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Crew_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_origCrewId(&mut self, origCrewId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_ORIGCREWID, origCrewId);
  }
  #[inline]
  pub fn add_crewName(&mut self, crewName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_CREWNAME, crewName);
  }
  #[inline]
  pub fn add_status(&mut self, status: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_STATUS, status);
  }
  #[inline]
  pub fn add_idSortie(&mut self, idSortie: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_IDSORTIE, idSortie);
  }
  #[inline]
  pub fn add_legalAlertTime(&mut self, legalAlertTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_LEGALALERTTIME, legalAlertTime);
  }
  #[inline]
  pub fn add_legalBravoTime(&mut self, legalBravoTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_LEGALBRAVOTIME, legalBravoTime);
  }
  #[inline]
  pub fn add_alertedTime(&mut self, alertedTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_ALERTEDTIME, alertedTime);
  }
  #[inline]
  pub fn add_returnTime(&mut self, returnTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_RETURNTIME, returnTime);
  }
  #[inline]
  pub fn add_fdpEligType(&mut self, fdpEligType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_FDPELIGTYPE, fdpEligType);
  }
  #[inline]
  pub fn add_fdpType(&mut self, fdpType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_FDPTYPE, fdpType);
  }
  #[inline]
  pub fn add_crewType(&mut self, crewType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_CREWTYPE, crewType);
  }
  #[inline]
  pub fn add_armsCrewUnit(&mut self, armsCrewUnit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_ARMSCREWUNIT, armsCrewUnit);
  }
  #[inline]
  pub fn add_crewMembers(&mut self, crewMembers: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_CREWMEMBERS, crewMembers);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Crew_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Crew_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<Crew_Ingest_dataMode_Enum>(Crew_Ingest::VT_DATAMODE, dataMode, Crew_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Crew_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Crew_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Crew_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Crew_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Crew_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("origCrewId", &self.origCrewId());
      ds.field("crewName", &self.crewName());
      ds.field("status", &self.status());
      ds.field("idSortie", &self.idSortie());
      ds.field("legalAlertTime", &self.legalAlertTime());
      ds.field("legalBravoTime", &self.legalBravoTime());
      ds.field("alertedTime", &self.alertedTime());
      ds.field("returnTime", &self.returnTime());
      ds.field("fdpEligType", &self.fdpEligType());
      ds.field("fdpType", &self.fdpType());
      ds.field("crewType", &self.crewType());
      ds.field("armsCrewUnit", &self.armsCrewUnit());
      ds.field("crewMembers", &self.crewMembers());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Crew_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub origCrewId: Option<String>,
  pub crewName: Option<String>,
  pub status: Option<String>,
  pub idSortie: Option<String>,
  pub legalAlertTime: Option<String>,
  pub legalBravoTime: Option<String>,
  pub alertedTime: Option<String>,
  pub returnTime: Option<String>,
  pub fdpEligType: Option<String>,
  pub fdpType: Option<String>,
  pub crewType: Option<String>,
  pub armsCrewUnit: Option<String>,
  pub crewMembers: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: Crew_Ingest_dataMode_Enum,
}
impl Default for Crew_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      origCrewId: None,
      crewName: None,
      status: None,
      idSortie: None,
      legalAlertTime: None,
      legalBravoTime: None,
      alertedTime: None,
      returnTime: None,
      fdpEligType: None,
      fdpType: None,
      crewType: None,
      armsCrewUnit: None,
      crewMembers: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Crew_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl Crew_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Crew_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origCrewId = self.origCrewId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let crewName = self.crewName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let status = self.status.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSortie = self.idSortie.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let legalAlertTime = self.legalAlertTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let legalBravoTime = self.legalBravoTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let alertedTime = self.alertedTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let returnTime = self.returnTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fdpEligType = self.fdpEligType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fdpType = self.fdpType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let crewType = self.crewType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let armsCrewUnit = self.armsCrewUnit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let crewMembers = self.crewMembers.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    Crew_Ingest::create(_fbb, &Crew_IngestArgs{
      id,
      classificationMarking,
      origCrewId,
      crewName,
      status,
      idSortie,
      legalAlertTime,
      legalBravoTime,
      alertedTime,
      returnTime,
      fdpEligType,
      fdpType,
      crewType,
      armsCrewUnit,
      crewMembers,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Crew_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_crew_ingest_unchecked`.
pub fn root_as_crew_ingest(buf: &[u8]) -> Result<Crew_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Crew_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Crew_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_crew_ingest_unchecked`.
pub fn size_prefixed_root_as_crew_ingest(buf: &[u8]) -> Result<Crew_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Crew_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Crew_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_crew_ingest_unchecked`.
pub fn root_as_crew_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Crew_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Crew_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Crew_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_crew_ingest_unchecked`.
pub fn size_prefixed_root_as_crew_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Crew_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Crew_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Crew_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Crew_Ingest`.
pub unsafe fn root_as_crew_ingest_unchecked(buf: &[u8]) -> Crew_Ingest {
  flatbuffers::root_unchecked::<Crew_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Crew_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Crew_Ingest`.
pub unsafe fn size_prefixed_root_as_crew_ingest_unchecked(buf: &[u8]) -> Crew_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<Crew_Ingest>(buf)
}
pub const CREW_INGEST_IDENTIFIER: &str = "CREW";

#[inline]
pub fn crew_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CREW_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn crew_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, CREW_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_crew_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Crew_Ingest<'a>>) {
  fbb.finish(root, Some(CREW_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_crew_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Crew_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(CREW_INGEST_IDENTIFIER));
}
