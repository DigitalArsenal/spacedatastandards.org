// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum SofDataSourceRef_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// List of data sources related to this document.
pub struct SofDataSourceRef_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SofDataSourceRef_Full<'a> {
  type Inner = SofDataSourceRef_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SofDataSourceRef_Full<'a> {
  pub const VT_DATASOURCEID: flatbuffers::VOffsetT = 4;
  pub const VT_STARTPOSITION: flatbuffers::VOffsetT = 6;
  pub const VT_ENDPOSITION: flatbuffers::VOffsetT = 8;
  pub const VT_PARAGRAPHNUMBER: flatbuffers::VOffsetT = 10;
  pub const VT_SENTENCENUMBER: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SofDataSourceRef_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SofDataSourceRef_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<SofDataSourceRef_Full<'bldr>> {
    let mut builder = SofDataSourceRef_FullBuilder::new(_fbb);
    if let Some(x) = args.sentenceNumber { builder.add_sentenceNumber(x); }
    if let Some(x) = args.paragraphNumber { builder.add_paragraphNumber(x); }
    if let Some(x) = args.endPosition { builder.add_endPosition(x); }
    if let Some(x) = args.startPosition { builder.add_startPosition(x); }
    if let Some(x) = args.dataSourceId { builder.add_dataSourceId(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> SofDataSourceRef_FullT {
    let dataSourceId = self.dataSourceId().map(|x| {
      x.to_string()
    });
    let startPosition = self.startPosition().map(|x| {
      x.to_string()
    });
    let endPosition = self.endPosition().map(|x| {
      x.to_string()
    });
    let paragraphNumber = self.paragraphNumber().map(|x| {
      x.to_string()
    });
    let sentenceNumber = self.sentenceNumber().map(|x| {
      x.to_string()
    });
    SofDataSourceRef_FullT {
      dataSourceId,
      startPosition,
      endPosition,
      paragraphNumber,
      sentenceNumber,
    }
  }

  /// Data source id.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dataSourceId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SofDataSourceRef_Full::VT_DATASOURCEID, None)}
  }
  /// start position.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startPosition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SofDataSourceRef_Full::VT_STARTPOSITION, None)}
  }
  /// end position.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endPosition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SofDataSourceRef_Full::VT_ENDPOSITION, None)}
  }
  /// paragraph number.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn paragraphNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SofDataSourceRef_Full::VT_PARAGRAPHNUMBER, None)}
  }
  /// sentence number.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sentenceNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SofDataSourceRef_Full::VT_SENTENCENUMBER, None)}
  }
}

impl flatbuffers::Verifiable for SofDataSourceRef_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dataSourceId", Self::VT_DATASOURCEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startPosition", Self::VT_STARTPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endPosition", Self::VT_ENDPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("paragraphNumber", Self::VT_PARAGRAPHNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sentenceNumber", Self::VT_SENTENCENUMBER, false)?
     .finish();
    Ok(())
  }
}
pub struct SofDataSourceRef_FullArgs<'a> {
    pub dataSourceId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startPosition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endPosition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub paragraphNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sentenceNumber: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SofDataSourceRef_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    SofDataSourceRef_FullArgs {
      dataSourceId: None,
      startPosition: None,
      endPosition: None,
      paragraphNumber: None,
      sentenceNumber: None,
    }
  }
}

pub struct SofDataSourceRef_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SofDataSourceRef_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_dataSourceId(&mut self, dataSourceId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SofDataSourceRef_Full::VT_DATASOURCEID, dataSourceId);
  }
  #[inline]
  pub fn add_startPosition(&mut self, startPosition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SofDataSourceRef_Full::VT_STARTPOSITION, startPosition);
  }
  #[inline]
  pub fn add_endPosition(&mut self, endPosition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SofDataSourceRef_Full::VT_ENDPOSITION, endPosition);
  }
  #[inline]
  pub fn add_paragraphNumber(&mut self, paragraphNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SofDataSourceRef_Full::VT_PARAGRAPHNUMBER, paragraphNumber);
  }
  #[inline]
  pub fn add_sentenceNumber(&mut self, sentenceNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SofDataSourceRef_Full::VT_SENTENCENUMBER, sentenceNumber);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SofDataSourceRef_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SofDataSourceRef_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SofDataSourceRef_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SofDataSourceRef_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SofDataSourceRef_Full");
      ds.field("dataSourceId", &self.dataSourceId());
      ds.field("startPosition", &self.startPosition());
      ds.field("endPosition", &self.endPosition());
      ds.field("paragraphNumber", &self.paragraphNumber());
      ds.field("sentenceNumber", &self.sentenceNumber());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SofDataSourceRef_FullT {
  pub dataSourceId: Option<String>,
  pub startPosition: Option<String>,
  pub endPosition: Option<String>,
  pub paragraphNumber: Option<String>,
  pub sentenceNumber: Option<String>,
}
impl Default for SofDataSourceRef_FullT {
  fn default() -> Self {
    Self {
      dataSourceId: None,
      startPosition: None,
      endPosition: None,
      paragraphNumber: None,
      sentenceNumber: None,
    }
  }
}
impl SofDataSourceRef_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SofDataSourceRef_Full<'b>> {
    let dataSourceId = self.dataSourceId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startPosition = self.startPosition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endPosition = self.endPosition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let paragraphNumber = self.paragraphNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sentenceNumber = self.sentenceNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SofDataSourceRef_Full::create(_fbb, &SofDataSourceRef_FullArgs{
      dataSourceId,
      startPosition,
      endPosition,
      paragraphNumber,
      sentenceNumber,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SofDataSourceRef_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sof_data_source_ref_full_unchecked`.
pub fn root_as_sof_data_source_ref_full(buf: &[u8]) -> Result<SofDataSourceRef_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SofDataSourceRef_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SofDataSourceRef_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_sof_data_source_ref_full_unchecked`.
pub fn size_prefixed_root_as_sof_data_source_ref_full(buf: &[u8]) -> Result<SofDataSourceRef_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SofDataSourceRef_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SofDataSourceRef_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sof_data_source_ref_full_unchecked`.
pub fn root_as_sof_data_source_ref_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SofDataSourceRef_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SofDataSourceRef_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SofDataSourceRef_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sof_data_source_ref_full_unchecked`.
pub fn size_prefixed_root_as_sof_data_source_ref_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SofDataSourceRef_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SofDataSourceRef_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SofDataSourceRef_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SofDataSourceRef_Full`.
pub unsafe fn root_as_sof_data_source_ref_full_unchecked(buf: &[u8]) -> SofDataSourceRef_Full {
  flatbuffers::root_unchecked::<SofDataSourceRef_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SofDataSourceRef_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SofDataSourceRef_Full`.
pub unsafe fn size_prefixed_root_as_sof_data_source_ref_full_unchecked(buf: &[u8]) -> SofDataSourceRef_Full {
  flatbuffers::size_prefixed_root_unchecked::<SofDataSourceRef_Full>(buf)
}
pub const SOF_DATA_SOURCE_REF_FULL_IDENTIFIER: &str = "SOFD";

#[inline]
pub fn sof_data_source_ref_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SOF_DATA_SOURCE_REF_FULL_IDENTIFIER, false)
}

#[inline]
pub fn sof_data_source_ref_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SOF_DATA_SOURCE_REF_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_sof_data_source_ref_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SofDataSourceRef_Full<'a>>) {
  fbb.finish(root, Some(SOF_DATA_SOURCE_REF_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_sof_data_source_ref_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SofDataSourceRef_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(SOF_DATA_SOURCE_REF_FULL_IDENTIFIER));
}
