// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PointOfContact_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Point of contacts for scheduling or modifying the route.
pub struct PointOfContact_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PointOfContact_Full<'a> {
  type Inner = PointOfContact_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PointOfContact_Full<'a> {
  pub const VT_POCSEQUENCEID: flatbuffers::VOffsetT = 4;
  pub const VT_POCTYPENAME: flatbuffers::VOffsetT = 6;
  pub const VT_POCNAME: flatbuffers::VOffsetT = 8;
  pub const VT_OFFICE: flatbuffers::VOffsetT = 10;
  pub const VT_USERNAME: flatbuffers::VOffsetT = 12;
  pub const VT_RANK: flatbuffers::VOffsetT = 14;
  pub const VT_POCORG: flatbuffers::VOffsetT = 16;
  pub const VT_PHONE: flatbuffers::VOffsetT = 18;
  pub const VT_REMARK: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PointOfContact_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PointOfContact_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<PointOfContact_Full<'bldr>> {
    let mut builder = PointOfContact_FullBuilder::new(_fbb);
    if let Some(x) = args.remark { builder.add_remark(x); }
    if let Some(x) = args.phone { builder.add_phone(x); }
    if let Some(x) = args.pocOrg { builder.add_pocOrg(x); }
    if let Some(x) = args.rank { builder.add_rank(x); }
    if let Some(x) = args.username { builder.add_username(x); }
    if let Some(x) = args.office { builder.add_office(x); }
    if let Some(x) = args.pocName { builder.add_pocName(x); }
    if let Some(x) = args.pocTypeName { builder.add_pocTypeName(x); }
    builder.add_pocSequenceId(args.pocSequenceId);
    builder.finish()
  }

  pub fn unpack(&self) -> PointOfContact_FullT {
    let pocSequenceId = self.pocSequenceId();
    let pocTypeName = self.pocTypeName().map(|x| {
      x.to_string()
    });
    let pocName = self.pocName().map(|x| {
      x.to_string()
    });
    let office = self.office().map(|x| {
      x.to_string()
    });
    let username = self.username().map(|x| {
      x.to_string()
    });
    let rank = self.rank().map(|x| {
      x.to_string()
    });
    let pocOrg = self.pocOrg().map(|x| {
      x.to_string()
    });
    let phone = self.phone().map(|x| {
      x.to_string()
    });
    let remark = self.remark().map(|x| {
      x.to_string()
    });
    PointOfContact_FullT {
      pocSequenceId,
      pocTypeName,
      pocName,
      office,
      username,
      rank,
      pocOrg,
      phone,
      remark,
    }
  }

  /// Sequencing field for point of contact.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pocSequenceId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PointOfContact_Full::VT_POCSEQUENCEID, Some(0)).unwrap()}
  }
  /// A code or name that represents the contact's role in association to the track route (ex. Originator, Scheduler, Maintainer, etc.).
  /// Example: /// Example: Originator
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn pocTypeName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_POCTYPENAME, None)}
  }
  /// The name of the contact.
  /// Example: /// Example: Fred Smith
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn pocName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_POCNAME, None)}
  }
  /// Office name for which the contact belongs.
  /// Example: /// Example: A34
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn office(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_OFFICE, None)}
  }
  /// The username of the contact.
  /// Example: /// Example: fgsmith
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn username(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_USERNAME, None)}
  }
  /// The rank of contact.
  /// Example: /// Example: Capt
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn rank(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_RANK, None)}
  }
  /// Organization name for which the contact belongs.
  /// Example: /// Example: HQAF
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn pocOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_POCORG, None)}
  }
  /// Phone number of the contact.
  /// Example: /// Example: 8675309
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn phone(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_PHONE, None)}
  }
  /// Text of the remark.
  /// Example: /// Example: POC remark.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn remark(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PointOfContact_Full::VT_REMARK, None)}
  }
}

impl flatbuffers::Verifiable for PointOfContact_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("pocSequenceId", Self::VT_POCSEQUENCEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pocTypeName", Self::VT_POCTYPENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pocName", Self::VT_POCNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("office", Self::VT_OFFICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("username", Self::VT_USERNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rank", Self::VT_RANK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pocOrg", Self::VT_POCORG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("phone", Self::VT_PHONE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("remark", Self::VT_REMARK, false)?
     .finish();
    Ok(())
  }
}
pub struct PointOfContact_FullArgs<'a> {
    pub pocSequenceId: i32,
    pub pocTypeName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pocName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub office: Option<flatbuffers::WIPOffset<&'a str>>,
    pub username: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rank: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pocOrg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub phone: Option<flatbuffers::WIPOffset<&'a str>>,
    pub remark: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PointOfContact_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    PointOfContact_FullArgs {
      pocSequenceId: 0,
      pocTypeName: None,
      pocName: None,
      office: None,
      username: None,
      rank: None,
      pocOrg: None,
      phone: None,
      remark: None,
    }
  }
}

pub struct PointOfContact_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PointOfContact_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_pocSequenceId(&mut self, pocSequenceId: i32) {
    self.fbb_.push_slot::<i32>(PointOfContact_Full::VT_POCSEQUENCEID, pocSequenceId, 0);
  }
  #[inline]
  pub fn add_pocTypeName(&mut self, pocTypeName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_POCTYPENAME, pocTypeName);
  }
  #[inline]
  pub fn add_pocName(&mut self, pocName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_POCNAME, pocName);
  }
  #[inline]
  pub fn add_office(&mut self, office: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_OFFICE, office);
  }
  #[inline]
  pub fn add_username(&mut self, username: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_USERNAME, username);
  }
  #[inline]
  pub fn add_rank(&mut self, rank: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_RANK, rank);
  }
  #[inline]
  pub fn add_pocOrg(&mut self, pocOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_POCORG, pocOrg);
  }
  #[inline]
  pub fn add_phone(&mut self, phone: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_PHONE, phone);
  }
  #[inline]
  pub fn add_remark(&mut self, remark: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PointOfContact_Full::VT_REMARK, remark);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PointOfContact_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PointOfContact_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PointOfContact_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PointOfContact_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PointOfContact_Full");
      ds.field("pocSequenceId", &self.pocSequenceId());
      ds.field("pocTypeName", &self.pocTypeName());
      ds.field("pocName", &self.pocName());
      ds.field("office", &self.office());
      ds.field("username", &self.username());
      ds.field("rank", &self.rank());
      ds.field("pocOrg", &self.pocOrg());
      ds.field("phone", &self.phone());
      ds.field("remark", &self.remark());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PointOfContact_FullT {
  pub pocSequenceId: i32,
  pub pocTypeName: Option<String>,
  pub pocName: Option<String>,
  pub office: Option<String>,
  pub username: Option<String>,
  pub rank: Option<String>,
  pub pocOrg: Option<String>,
  pub phone: Option<String>,
  pub remark: Option<String>,
}
impl Default for PointOfContact_FullT {
  fn default() -> Self {
    Self {
      pocSequenceId: 0,
      pocTypeName: None,
      pocName: None,
      office: None,
      username: None,
      rank: None,
      pocOrg: None,
      phone: None,
      remark: None,
    }
  }
}
impl PointOfContact_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PointOfContact_Full<'b>> {
    let pocSequenceId = self.pocSequenceId;
    let pocTypeName = self.pocTypeName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pocName = self.pocName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let office = self.office.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let username = self.username.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rank = self.rank.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pocOrg = self.pocOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let phone = self.phone.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let remark = self.remark.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    PointOfContact_Full::create(_fbb, &PointOfContact_FullArgs{
      pocSequenceId,
      pocTypeName,
      pocName,
      office,
      username,
      rank,
      pocOrg,
      phone,
      remark,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PointOfContact_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_point_of_contact_full_unchecked`.
pub fn root_as_point_of_contact_full(buf: &[u8]) -> Result<PointOfContact_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PointOfContact_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PointOfContact_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_point_of_contact_full_unchecked`.
pub fn size_prefixed_root_as_point_of_contact_full(buf: &[u8]) -> Result<PointOfContact_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PointOfContact_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PointOfContact_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_point_of_contact_full_unchecked`.
pub fn root_as_point_of_contact_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PointOfContact_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PointOfContact_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PointOfContact_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_point_of_contact_full_unchecked`.
pub fn size_prefixed_root_as_point_of_contact_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PointOfContact_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PointOfContact_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PointOfContact_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PointOfContact_Full`.
pub unsafe fn root_as_point_of_contact_full_unchecked(buf: &[u8]) -> PointOfContact_Full {
  flatbuffers::root_unchecked::<PointOfContact_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PointOfContact_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PointOfContact_Full`.
pub unsafe fn size_prefixed_root_as_point_of_contact_full_unchecked(buf: &[u8]) -> PointOfContact_Full {
  flatbuffers::size_prefixed_root_unchecked::<PointOfContact_Full>(buf)
}
pub const POINT_OF_CONTACT_FULL_IDENTIFIER: &str = "POIN";

#[inline]
pub fn point_of_contact_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, POINT_OF_CONTACT_FULL_IDENTIFIER, false)
}

#[inline]
pub fn point_of_contact_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, POINT_OF_CONTACT_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_point_of_contact_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PointOfContact_Full<'a>>) {
  fbb.finish(root, Some(POINT_OF_CONTACT_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_point_of_contact_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PointOfContact_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(POINT_OF_CONTACT_FULL_IDENTIFIER));
}
