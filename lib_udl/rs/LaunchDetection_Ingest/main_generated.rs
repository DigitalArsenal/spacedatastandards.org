// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LAUNCH_DETECTION_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LAUNCH_DETECTION_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LAUNCH_DETECTION_INGEST_DATA_MODE_ENUM: [LaunchDetection_Ingest_dataMode_Enum; 4] = [
  LaunchDetection_Ingest_dataMode_Enum::REAL,
  LaunchDetection_Ingest_dataMode_Enum::TEST,
  LaunchDetection_Ingest_dataMode_Enum::SIMULATED,
  LaunchDetection_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LaunchDetection_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl LaunchDetection_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for LaunchDetection_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LaunchDetection_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for LaunchDetection_Ingest_dataMode_Enum {
    type Output = LaunchDetection_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LaunchDetection_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LaunchDetection_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LaunchDetection_Ingest_dataMode_Enum {}
pub enum LaunchDetection_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Data to analyze launch detections.
pub struct LaunchDetection_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LaunchDetection_Ingest<'a> {
  type Inner = LaunchDetection_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LaunchDetection_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_LAUNCHTIME: flatbuffers::VOffsetT = 8;
  pub const VT_MESSAGETYPE: flatbuffers::VOffsetT = 10;
  pub const VT_LAUNCHLATITUDE: flatbuffers::VOffsetT = 12;
  pub const VT_LAUNCHLONGITUDE: flatbuffers::VOffsetT = 14;
  pub const VT_LAUNCHAZIMUTH: flatbuffers::VOffsetT = 16;
  pub const VT_RAAN: flatbuffers::VOffsetT = 18;
  pub const VT_INCLINATION: flatbuffers::VOffsetT = 20;
  pub const VT_OBSERVATIONTIME: flatbuffers::VOffsetT = 22;
  pub const VT_OBSERVATIONLATITUDE: flatbuffers::VOffsetT = 24;
  pub const VT_OBSERVATIONLONGITUDE: flatbuffers::VOffsetT = 26;
  pub const VT_OBSERVATIONALTITUDE: flatbuffers::VOffsetT = 28;
  pub const VT_STEREOFLAG: flatbuffers::VOffsetT = 30;
  pub const VT_HIGHZENITHAZIMUTH: flatbuffers::VOffsetT = 32;
  pub const VT_SEQUENCENUMBER: flatbuffers::VOffsetT = 34;
  pub const VT_EVENTID: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 38;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 40;
  pub const VT_DESCRIPTOR: flatbuffers::VOffsetT = 42;
  pub const VT_TAGS: flatbuffers::VOffsetT = 44;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 46;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 48;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 50;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 52;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 54;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 56;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LaunchDetection_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LaunchDetection_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<LaunchDetection_Ingest<'bldr>> {
    let mut builder = LaunchDetection_IngestBuilder::new(_fbb);
    builder.add_observationAltitude(args.observationAltitude);
    builder.add_observationLongitude(args.observationLongitude);
    builder.add_observationLatitude(args.observationLatitude);
    builder.add_inclination(args.inclination);
    builder.add_raan(args.raan);
    builder.add_launchAzimuth(args.launchAzimuth);
    builder.add_launchLongitude(args.launchLongitude);
    builder.add_launchLatitude(args.launchLatitude);
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.descriptor { builder.add_descriptor(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.eventId { builder.add_eventId(x); }
    builder.add_sequenceNumber(args.sequenceNumber);
    if let Some(x) = args.observationTime { builder.add_observationTime(x); }
    if let Some(x) = args.messageType { builder.add_messageType(x); }
    if let Some(x) = args.launchTime { builder.add_launchTime(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_highZenithAzimuth(args.highZenithAzimuth);
    builder.add_stereoFlag(args.stereoFlag);
    builder.finish()
  }

  pub fn unpack(&self) -> LaunchDetection_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let launchTime = self.launchTime().map(|x| {
      x.to_string()
    });
    let messageType = self.messageType().map(|x| {
      x.to_string()
    });
    let launchLatitude = self.launchLatitude();
    let launchLongitude = self.launchLongitude();
    let launchAzimuth = self.launchAzimuth();
    let raan = self.raan();
    let inclination = self.inclination();
    let observationTime = self.observationTime().map(|x| {
      x.to_string()
    });
    let observationLatitude = self.observationLatitude();
    let observationLongitude = self.observationLongitude();
    let observationAltitude = self.observationAltitude();
    let stereoFlag = self.stereoFlag();
    let highZenithAzimuth = self.highZenithAzimuth();
    let sequenceNumber = self.sequenceNumber();
    let eventId = self.eventId().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let descriptor = self.descriptor().map(|x| {
      x.to_string()
    });
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    LaunchDetection_IngestT {
      id,
      classificationMarking,
      launchTime,
      messageType,
      launchLatitude,
      launchLongitude,
      launchAzimuth,
      raan,
      inclination,
      observationTime,
      observationLatitude,
      observationLongitude,
      observationAltitude,
      stereoFlag,
      highZenithAzimuth,
      sequenceNumber,
      eventId,
      source,
      origin,
      descriptor,
      tags,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHDETECTION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Time of Launch.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_LAUNCHTIME, None)}
  }
  /// Type of message for the data.
  /// Example: /// Example: Example-Msg-Type
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn messageType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_MESSAGETYPE, None)}
  }
  /// Geodetic Latitude of launch origin (in Degrees). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchLatitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_LAUNCHLATITUDE, Some(0.0)).unwrap()}
  }
  /// Geodetic Longitude of launch origin (in Degrees). -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchLongitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_LAUNCHLONGITUDE, Some(0.0)).unwrap()}
  }
  /// Angle measured clockwise from North for the launch heading (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchAzimuth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_LAUNCHAZIMUTH, Some(0.0)).unwrap()}
  }
  /// Orbit Right Ascension of Ascending Node (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn raan(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_RAAN, Some(0.0)).unwrap()}
  }
  /// Orbit Inclination (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn inclination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_INCLINATION, Some(0.0)).unwrap()}
  }
  /// Time of observation.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn observationTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_OBSERVATIONTIME, None)}
  }
  /// Latitude of launch vehicle at observation time (in Degrees). -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn observationLatitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_OBSERVATIONLATITUDE, Some(0.0)).unwrap()}
  }
  /// Longitude of launch vehicle at observation time (in Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn observationLongitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_OBSERVATIONLONGITUDE, Some(0.0)).unwrap()}
  }
  /// Altitude of launch vehicle at observation time (in KM).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn observationAltitude(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchDetection_Ingest::VT_OBSERVATIONALTITUDE, Some(0.0)).unwrap()}
  }
  /// Flag indicating multiple observers were used.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn stereoFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LaunchDetection_Ingest::VT_STEREOFLAG, Some(false)).unwrap()}
  }
  /// Flag indicating that the Launch azimuth is uncertain due to near vertical flight path.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn highZenithAzimuth(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LaunchDetection_Ingest::VT_HIGHZENITHAZIMUTH, Some(false)).unwrap()}
  }
  /// Integer indicating how messages should be sequenced for a specific event.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sequenceNumber(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LaunchDetection_Ingest::VT_SEQUENCENUMBER, Some(0)).unwrap()}
  }
  /// Id to be able to correlate different messages to a specific event.
  /// Example: /// Example: EVENT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn eventId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_EVENTID, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_ORIGIN, None)}
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Example descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn descriptor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_DESCRIPTOR, None)}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LaunchDetection_Ingest::VT_TAGS, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> LaunchDetection_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<LaunchDetection_Ingest_dataMode_Enum>(LaunchDetection_Ingest::VT_DATAMODE, Some(LaunchDetection_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_CREATEDBY, None)}
  }
  /// Read-only time the row was updated in the database, set automatically by the system on update.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_UPDATEDAT, None)}
  }
  /// Application user who last updated the row in the database, set by the system automatically and ignored on create/edit operations.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchDetection_Ingest::VT_UPDATEDBY, None)}
  }
}

impl flatbuffers::Verifiable for LaunchDetection_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchTime", Self::VT_LAUNCHTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("messageType", Self::VT_MESSAGETYPE, false)?
     .visit_field::<f64>("launchLatitude", Self::VT_LAUNCHLATITUDE, false)?
     .visit_field::<f64>("launchLongitude", Self::VT_LAUNCHLONGITUDE, false)?
     .visit_field::<f64>("launchAzimuth", Self::VT_LAUNCHAZIMUTH, false)?
     .visit_field::<f64>("raan", Self::VT_RAAN, false)?
     .visit_field::<f64>("inclination", Self::VT_INCLINATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("observationTime", Self::VT_OBSERVATIONTIME, false)?
     .visit_field::<f64>("observationLatitude", Self::VT_OBSERVATIONLATITUDE, false)?
     .visit_field::<f64>("observationLongitude", Self::VT_OBSERVATIONLONGITUDE, false)?
     .visit_field::<f64>("observationAltitude", Self::VT_OBSERVATIONALTITUDE, false)?
     .visit_field::<bool>("stereoFlag", Self::VT_STEREOFLAG, false)?
     .visit_field::<bool>("highZenithAzimuth", Self::VT_HIGHZENITHAZIMUTH, false)?
     .visit_field::<i32>("sequenceNumber", Self::VT_SEQUENCENUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("eventId", Self::VT_EVENTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("descriptor", Self::VT_DESCRIPTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<LaunchDetection_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .finish();
    Ok(())
  }
}
pub struct LaunchDetection_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub messageType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchLatitude: f64,
    pub launchLongitude: f64,
    pub launchAzimuth: f64,
    pub raan: f64,
    pub inclination: f64,
    pub observationTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub observationLatitude: f64,
    pub observationLongitude: f64,
    pub observationAltitude: f64,
    pub stereoFlag: bool,
    pub highZenithAzimuth: bool,
    pub sequenceNumber: i32,
    pub eventId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub descriptor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: LaunchDetection_Ingest_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LaunchDetection_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    LaunchDetection_IngestArgs {
      id: None,
      classificationMarking: None,
      launchTime: None,
      messageType: None,
      launchLatitude: 0.0,
      launchLongitude: 0.0,
      launchAzimuth: 0.0,
      raan: 0.0,
      inclination: 0.0,
      observationTime: None,
      observationLatitude: 0.0,
      observationLongitude: 0.0,
      observationAltitude: 0.0,
      stereoFlag: false,
      highZenithAzimuth: false,
      sequenceNumber: 0,
      eventId: None,
      source: None,
      origin: None,
      descriptor: None,
      tags: None,
      origNetwork: None,
      dataMode: LaunchDetection_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
    }
  }
}

pub struct LaunchDetection_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LaunchDetection_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_launchTime(&mut self, launchTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_LAUNCHTIME, launchTime);
  }
  #[inline]
  pub fn add_messageType(&mut self, messageType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_MESSAGETYPE, messageType);
  }
  #[inline]
  pub fn add_launchLatitude(&mut self, launchLatitude: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_LAUNCHLATITUDE, launchLatitude, 0.0);
  }
  #[inline]
  pub fn add_launchLongitude(&mut self, launchLongitude: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_LAUNCHLONGITUDE, launchLongitude, 0.0);
  }
  #[inline]
  pub fn add_launchAzimuth(&mut self, launchAzimuth: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_LAUNCHAZIMUTH, launchAzimuth, 0.0);
  }
  #[inline]
  pub fn add_raan(&mut self, raan: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_RAAN, raan, 0.0);
  }
  #[inline]
  pub fn add_inclination(&mut self, inclination: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_INCLINATION, inclination, 0.0);
  }
  #[inline]
  pub fn add_observationTime(&mut self, observationTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_OBSERVATIONTIME, observationTime);
  }
  #[inline]
  pub fn add_observationLatitude(&mut self, observationLatitude: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_OBSERVATIONLATITUDE, observationLatitude, 0.0);
  }
  #[inline]
  pub fn add_observationLongitude(&mut self, observationLongitude: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_OBSERVATIONLONGITUDE, observationLongitude, 0.0);
  }
  #[inline]
  pub fn add_observationAltitude(&mut self, observationAltitude: f64) {
    self.fbb_.push_slot::<f64>(LaunchDetection_Ingest::VT_OBSERVATIONALTITUDE, observationAltitude, 0.0);
  }
  #[inline]
  pub fn add_stereoFlag(&mut self, stereoFlag: bool) {
    self.fbb_.push_slot::<bool>(LaunchDetection_Ingest::VT_STEREOFLAG, stereoFlag, false);
  }
  #[inline]
  pub fn add_highZenithAzimuth(&mut self, highZenithAzimuth: bool) {
    self.fbb_.push_slot::<bool>(LaunchDetection_Ingest::VT_HIGHZENITHAZIMUTH, highZenithAzimuth, false);
  }
  #[inline]
  pub fn add_sequenceNumber(&mut self, sequenceNumber: i32) {
    self.fbb_.push_slot::<i32>(LaunchDetection_Ingest::VT_SEQUENCENUMBER, sequenceNumber, 0);
  }
  #[inline]
  pub fn add_eventId(&mut self, eventId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_EVENTID, eventId);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_descriptor(&mut self, descriptor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_DESCRIPTOR, descriptor);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: LaunchDetection_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<LaunchDetection_Ingest_dataMode_Enum>(LaunchDetection_Ingest::VT_DATAMODE, dataMode, LaunchDetection_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchDetection_Ingest::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LaunchDetection_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LaunchDetection_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LaunchDetection_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LaunchDetection_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LaunchDetection_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("launchTime", &self.launchTime());
      ds.field("messageType", &self.messageType());
      ds.field("launchLatitude", &self.launchLatitude());
      ds.field("launchLongitude", &self.launchLongitude());
      ds.field("launchAzimuth", &self.launchAzimuth());
      ds.field("raan", &self.raan());
      ds.field("inclination", &self.inclination());
      ds.field("observationTime", &self.observationTime());
      ds.field("observationLatitude", &self.observationLatitude());
      ds.field("observationLongitude", &self.observationLongitude());
      ds.field("observationAltitude", &self.observationAltitude());
      ds.field("stereoFlag", &self.stereoFlag());
      ds.field("highZenithAzimuth", &self.highZenithAzimuth());
      ds.field("sequenceNumber", &self.sequenceNumber());
      ds.field("eventId", &self.eventId());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("descriptor", &self.descriptor());
      ds.field("tags", &self.tags());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LaunchDetection_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub launchTime: Option<String>,
  pub messageType: Option<String>,
  pub launchLatitude: f64,
  pub launchLongitude: f64,
  pub launchAzimuth: f64,
  pub raan: f64,
  pub inclination: f64,
  pub observationTime: Option<String>,
  pub observationLatitude: f64,
  pub observationLongitude: f64,
  pub observationAltitude: f64,
  pub stereoFlag: bool,
  pub highZenithAzimuth: bool,
  pub sequenceNumber: i32,
  pub eventId: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub descriptor: Option<String>,
  pub tags: Option<Vec<String>>,
  pub origNetwork: Option<String>,
  pub dataMode: LaunchDetection_Ingest_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
}
impl Default for LaunchDetection_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      launchTime: None,
      messageType: None,
      launchLatitude: 0.0,
      launchLongitude: 0.0,
      launchAzimuth: 0.0,
      raan: 0.0,
      inclination: 0.0,
      observationTime: None,
      observationLatitude: 0.0,
      observationLongitude: 0.0,
      observationAltitude: 0.0,
      stereoFlag: false,
      highZenithAzimuth: false,
      sequenceNumber: 0,
      eventId: None,
      source: None,
      origin: None,
      descriptor: None,
      tags: None,
      origNetwork: None,
      dataMode: LaunchDetection_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
    }
  }
}
impl LaunchDetection_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LaunchDetection_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchTime = self.launchTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let messageType = self.messageType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchLatitude = self.launchLatitude;
    let launchLongitude = self.launchLongitude;
    let launchAzimuth = self.launchAzimuth;
    let raan = self.raan;
    let inclination = self.inclination;
    let observationTime = self.observationTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let observationLatitude = self.observationLatitude;
    let observationLongitude = self.observationLongitude;
    let observationAltitude = self.observationAltitude;
    let stereoFlag = self.stereoFlag;
    let highZenithAzimuth = self.highZenithAzimuth;
    let sequenceNumber = self.sequenceNumber;
    let eventId = self.eventId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let descriptor = self.descriptor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LaunchDetection_Ingest::create(_fbb, &LaunchDetection_IngestArgs{
      id,
      classificationMarking,
      launchTime,
      messageType,
      launchLatitude,
      launchLongitude,
      launchAzimuth,
      raan,
      inclination,
      observationTime,
      observationLatitude,
      observationLongitude,
      observationAltitude,
      stereoFlag,
      highZenithAzimuth,
      sequenceNumber,
      eventId,
      source,
      origin,
      descriptor,
      tags,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LaunchDetection_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_detection_ingest_unchecked`.
pub fn root_as_launch_detection_ingest(buf: &[u8]) -> Result<LaunchDetection_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LaunchDetection_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LaunchDetection_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_launch_detection_ingest_unchecked`.
pub fn size_prefixed_root_as_launch_detection_ingest(buf: &[u8]) -> Result<LaunchDetection_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LaunchDetection_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LaunchDetection_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_detection_ingest_unchecked`.
pub fn root_as_launch_detection_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LaunchDetection_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LaunchDetection_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LaunchDetection_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_detection_ingest_unchecked`.
pub fn size_prefixed_root_as_launch_detection_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LaunchDetection_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LaunchDetection_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LaunchDetection_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LaunchDetection_Ingest`.
pub unsafe fn root_as_launch_detection_ingest_unchecked(buf: &[u8]) -> LaunchDetection_Ingest {
  flatbuffers::root_unchecked::<LaunchDetection_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LaunchDetection_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LaunchDetection_Ingest`.
pub unsafe fn size_prefixed_root_as_launch_detection_ingest_unchecked(buf: &[u8]) -> LaunchDetection_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<LaunchDetection_Ingest>(buf)
}
pub const LAUNCH_DETECTION_INGEST_IDENTIFIER: &str = "LAUN";

#[inline]
pub fn launch_detection_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LAUNCH_DETECTION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn launch_detection_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LAUNCH_DETECTION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_launch_detection_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LaunchDetection_Ingest<'a>>) {
  fbb.finish(root, Some(LAUNCH_DETECTION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_launch_detection_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LaunchDetection_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(LAUNCH_DETECTION_INGEST_IDENTIFIER));
}
