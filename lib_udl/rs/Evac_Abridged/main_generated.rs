// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EVAC_ABRIDGED_TYPE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EVAC_ABRIDGED_TYPE_ENUM: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EVAC_ABRIDGED_TYPE_ENUM: [Evac_Abridged_type_Enum; 2] = [
  Evac_Abridged_type_Enum::REQUEST,
  Evac_Abridged_type_Enum::RESPONSE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Evac_Abridged_type_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Evac_Abridged_type_Enum {
  /// No description available.
  pub const REQUEST: Self = Self(0);
  /// No description available.
  pub const RESPONSE: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REQUEST,
    Self::RESPONSE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REQUEST => Some("REQUEST"),
      Self::RESPONSE => Some("RESPONSE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Evac_Abridged_type_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Evac_Abridged_type_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Evac_Abridged_type_Enum {
    type Output = Evac_Abridged_type_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Evac_Abridged_type_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Evac_Abridged_type_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Evac_Abridged_type_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EVAC_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EVAC_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EVAC_ABRIDGED_DATA_MODE_ENUM: [Evac_Abridged_dataMode_Enum; 4] = [
  Evac_Abridged_dataMode_Enum::REAL,
  Evac_Abridged_dataMode_Enum::TEST,
  Evac_Abridged_dataMode_Enum::SIMULATED,
  Evac_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Evac_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Evac_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Evac_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Evac_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Evac_Abridged_dataMode_Enum {
    type Output = Evac_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Evac_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Evac_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Evac_Abridged_dataMode_Enum {}
pub enum Evac_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Casualty report and evacuation request. Used to report and request support to evacuate friendly and enemy casualties.
pub struct Evac_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Evac_Abridged<'a> {
  type Inner = Evac_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Evac_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_MEDEVACID: flatbuffers::VOffsetT = 8;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 10;
  pub const VT_MISSIONTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_IDWEATHERREPORT: flatbuffers::VOffsetT = 14;
  pub const VT_NUMKIA: flatbuffers::VOffsetT = 16;
  pub const VT_NUMWIA: flatbuffers::VOffsetT = 18;
  pub const VT_NUMLITTER: flatbuffers::VOffsetT = 20;
  pub const VT_NUMAMBULATORY: flatbuffers::VOffsetT = 22;
  pub const VT_MEDICREQ: flatbuffers::VOffsetT = 24;
  pub const VT_REQNUM: flatbuffers::VOffsetT = 26;
  pub const VT_REQTIME: flatbuffers::VOffsetT = 28;
  pub const VT_REQCALLSIGN: flatbuffers::VOffsetT = 30;
  pub const VT_PICKUPTIME: flatbuffers::VOffsetT = 32;
  pub const VT_PICKUPLAT: flatbuffers::VOffsetT = 34;
  pub const VT_PICKUPLON: flatbuffers::VOffsetT = 36;
  pub const VT_PICKUPALT: flatbuffers::VOffsetT = 38;
  pub const VT_CE: flatbuffers::VOffsetT = 40;
  pub const VT_LE: flatbuffers::VOffsetT = 42;
  pub const VT_TERRAIN: flatbuffers::VOffsetT = 44;
  pub const VT_OBSTACLESREMARKS: flatbuffers::VOffsetT = 46;
  pub const VT_TERRAINREMARKS: flatbuffers::VOffsetT = 48;
  pub const VT_ZONENAME: flatbuffers::VOffsetT = 50;
  pub const VT_ZONEMARKING: flatbuffers::VOffsetT = 52;
  pub const VT_ZONESECURITY: flatbuffers::VOffsetT = 54;
  pub const VT_ZONEMARKINGCOLOR: flatbuffers::VOffsetT = 56;
  pub const VT_ZONEHOT: flatbuffers::VOffsetT = 58;
  pub const VT_CNTCTFREQ: flatbuffers::VOffsetT = 60;
  pub const VT_ZONECONTRCALLSIGN: flatbuffers::VOffsetT = 62;
  pub const VT_NUMCASUALTIES: flatbuffers::VOffsetT = 64;
  pub const VT_COMMENTS: flatbuffers::VOffsetT = 66;
  pub const VT_CASUALTYINFO: flatbuffers::VOffsetT = 68;
  pub const VT_ENEMYDATA: flatbuffers::VOffsetT = 70;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 74;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 76;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 78;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 80;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 82;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Evac_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Evac_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<Evac_Abridged<'bldr>> {
    let mut builder = Evac_AbridgedBuilder::new(_fbb);
    builder.add_cntctFreq(args.cntctFreq);
    builder.add_le(args.le);
    builder.add_ce(args.ce);
    builder.add_pickupAlt(args.pickupAlt);
    builder.add_pickupLon(args.pickupLon);
    builder.add_pickupLat(args.pickupLat);
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.enemyData { builder.add_enemyData(x); }
    if let Some(x) = args.casualtyInfo { builder.add_casualtyInfo(x); }
    if let Some(x) = args.comments { builder.add_comments(x); }
    builder.add_numCasualties(args.numCasualties);
    if let Some(x) = args.zoneContrCallSign { builder.add_zoneContrCallSign(x); }
    if let Some(x) = args.zoneMarkingColor { builder.add_zoneMarkingColor(x); }
    if let Some(x) = args.zoneSecurity { builder.add_zoneSecurity(x); }
    if let Some(x) = args.zoneMarking { builder.add_zoneMarking(x); }
    if let Some(x) = args.zoneName { builder.add_zoneName(x); }
    if let Some(x) = args.terrainRemarks { builder.add_terrainRemarks(x); }
    if let Some(x) = args.obstaclesRemarks { builder.add_obstaclesRemarks(x); }
    if let Some(x) = args.terrain { builder.add_terrain(x); }
    if let Some(x) = args.pickupTime { builder.add_pickupTime(x); }
    if let Some(x) = args.reqCallSign { builder.add_reqCallSign(x); }
    if let Some(x) = args.reqTime { builder.add_reqTime(x); }
    if let Some(x) = args.reqNum { builder.add_reqNum(x); }
    builder.add_numAmbulatory(args.numAmbulatory);
    builder.add_numLitter(args.numLitter);
    builder.add_numWIA(args.numWIA);
    builder.add_numKIA(args.numKIA);
    if let Some(x) = args.idWeatherReport { builder.add_idWeatherReport(x); }
    if let Some(x) = args.missionType { builder.add_missionType(x); }
    if let Some(x) = args.medevacId { builder.add_medevacId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_zoneHot(args.zoneHot);
    builder.add_medicReq(args.medicReq);
    builder.add_type_(args.type_);
    builder.finish()
  }

  pub fn unpack(&self) -> Evac_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let medevacId = self.medevacId().map(|x| {
      x.to_string()
    });
    let type_ = self.type_();
    let missionType = self.missionType().map(|x| {
      x.to_string()
    });
    let idWeatherReport = self.idWeatherReport().map(|x| {
      x.to_string()
    });
    let numKIA = self.numKIA();
    let numWIA = self.numWIA();
    let numLitter = self.numLitter();
    let numAmbulatory = self.numAmbulatory();
    let medicReq = self.medicReq();
    let reqNum = self.reqNum().map(|x| {
      x.to_string()
    });
    let reqTime = self.reqTime().map(|x| {
      x.to_string()
    });
    let reqCallSign = self.reqCallSign().map(|x| {
      x.to_string()
    });
    let pickupTime = self.pickupTime().map(|x| {
      x.to_string()
    });
    let pickupLat = self.pickupLat();
    let pickupLon = self.pickupLon();
    let pickupAlt = self.pickupAlt();
    let ce = self.ce();
    let le = self.le();
    let terrain = self.terrain().map(|x| {
      x.to_string()
    });
    let obstaclesRemarks = self.obstaclesRemarks().map(|x| {
      x.to_string()
    });
    let terrainRemarks = self.terrainRemarks().map(|x| {
      x.to_string()
    });
    let zoneName = self.zoneName().map(|x| {
      x.to_string()
    });
    let zoneMarking = self.zoneMarking().map(|x| {
      x.to_string()
    });
    let zoneSecurity = self.zoneSecurity().map(|x| {
      x.to_string()
    });
    let zoneMarkingColor = self.zoneMarkingColor().map(|x| {
      x.to_string()
    });
    let zoneHot = self.zoneHot();
    let cntctFreq = self.cntctFreq();
    let zoneContrCallSign = self.zoneContrCallSign().map(|x| {
      x.to_string()
    });
    let numCasualties = self.numCasualties();
    let comments = self.comments().map(|x| {
      x.to_string()
    });
    let casualtyInfo = self.casualtyInfo().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let enemyData = self.enemyData().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    Evac_AbridgedT {
      id,
      classificationMarking,
      medevacId,
      type_,
      missionType,
      idWeatherReport,
      numKIA,
      numWIA,
      numLitter,
      numAmbulatory,
      medicReq,
      reqNum,
      reqTime,
      reqCallSign,
      pickupTime,
      pickupLat,
      pickupLon,
      pickupAlt,
      ce,
      le,
      terrain,
      obstaclesRemarks,
      terrainRemarks,
      zoneName,
      zoneMarking,
      zoneSecurity,
      zoneMarkingColor,
      zoneHot,
      cntctFreq,
      zoneContrCallSign,
      numCasualties,
      comments,
      casualtyInfo,
      enemyData,
      origNetwork,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MEDEVACEVENT-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// UUID identifying the medevac mission, which should remain the same on subsequent posts related to the same medevac mission.
  /// Example: /// Example: MedEvac-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn medevacId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_MEDEVACID, None)}
  }
  /// The type of this medevac record (REQUEST, RESPONSE).
  /// Example: /// Example: REQUEST
  /// Constraints: Minimum length = 1, Maximum length = 8
  #[inline]
  pub fn type_(&self) -> Evac_Abridged_type_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Evac_Abridged_type_Enum>(Evac_Abridged::VT_TYPE_, Some(Evac_Abridged_type_Enum::REQUEST)).unwrap()}
  }
  /// The operation type of the evacuation. (NOT SPECIFIED, AIR, GROUND, SURFACE).
  /// Example: /// Example: GROUND
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn missionType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_MISSIONTYPE, None)}
  }
  /// Unique identifier of a weather report associated with this evacuation.
  /// Example: /// Example: WeatherReport-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idWeatherReport(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_IDWEATHERREPORT, None)}
  }
  /// Number of people Killed In Action.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numKIA(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Evac_Abridged::VT_NUMKIA, Some(0)).unwrap()}
  }
  /// Number of people Wounded In Action.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numWIA(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Evac_Abridged::VT_NUMWIA, Some(0)).unwrap()}
  }
  /// Number of littered personnel requiring evacuation.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numLitter(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Evac_Abridged::VT_NUMLITTER, Some(0)).unwrap()}
  }
  /// Number of ambulatory personnel requiring evacuation.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numAmbulatory(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Evac_Abridged::VT_NUMAMBULATORY, Some(0)).unwrap()}
  }
  /// Flag indicating whether the mission requires medical personnel.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn medicReq(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Evac_Abridged::VT_MEDICREQ, Some(false)).unwrap()}
  }
  /// Externally provided Medevac request number (e.g. MED.1.223908).
  /// Example: /// Example: MED.1.234567
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn reqNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_REQNUM, None)}
  }
  /// The request time, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reqTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_REQTIME, None)}
  }
  /// The call sign of this medevac requestor.
  /// Example: /// Example: Bravo
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn reqCallSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_REQCALLSIGN, None)}
  }
  /// The expected pickup time, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-20T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pickupTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_PICKUPTIME, None)}
  }
  /// WGS-84 latitude of the pickup location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 75.1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pickupLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Evac_Abridged::VT_PICKUPLAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the pickup location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 175.1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pickupLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Evac_Abridged::VT_PICKUPLON, Some(0.0)).unwrap()}
  }
  /// Altitude relative to WGS-84 ellipsoid, in meters. Positive values indicate a point height above ellipsoid, and negative values indicate a point height below ellipsoid.
  /// Example: /// Example: 30.1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pickupAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Evac_Abridged::VT_PICKUPALT, Some(0.0)).unwrap()}
  }
  /// Radius of circular area about lat/lon point, in meters (1-sigma, if representing error).
  /// Example: /// Example: 10.1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ce(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Evac_Abridged::VT_CE, Some(0.0)).unwrap()}
  }
  /// Height above lat/lon point, in meters (1-sigma, if representing linear error).
  /// Example: /// Example: 5.1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn le(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Evac_Abridged::VT_LE, Some(0.0)).unwrap()}
  }
  /// Short description of the terrain features of the pickup location (WOODS, TREES, PLOWED FIELDS, FLAT, STANDING WATER, MARSH, URBAN BUILT-UP AREA, MOUNTAIN, HILL, SAND TD, ROCKY, VALLEY, METAMORPHIC ICE, UNKNOWN TD, SEA, NO STATEMENT).
  /// Example: /// Example: ROCKY
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn terrain(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_TERRAIN, None)}
  }
  /// Amplifying data for the terrain describing important obstacles in or around the zone.
  /// Example: /// Example: N/A
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn obstaclesRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_OBSTACLESREMARKS, None)}
  }
  /// Amplifying data for the terrain describing any notable additional terrain features.
  /// Example: /// Example: N/A
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn terrainRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_TERRAINREMARKS, None)}
  }
  /// The name of the zone.
  /// Example: /// Example: example-zone
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn zoneName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ZONENAME, None)}
  }
  /// The expected marker identifying the pickup site (SMOKE ZONE MARKING, FLARES, MIRROR, GLIDE ANGLE INDICATOR LIGHT, LIGHT ZONE MARKING, PANELS, FIRE, LASER DESIGNATOR,  STROBE LIGHTS, VEHICLE LIGHTS, COLORED SMOKE, WHITE PHOSPHERUS, INFRARED, ILLUMINATION, FRATRICIDE FENCE).
  /// Example: /// Example: ILLUMINATION
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn zoneMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ZONEMARKING, None)}
  }
  /// The pickup site security (UNKNOWN ZONESECURITY, NO ENEMY, POSSIBLE ENEMY, ENEMY IN AREA USE CAUTION, ENEMY IN AREA ARMED ESCORT REQUIRED).
  /// Example: /// Example: NO ENEMY
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn zoneSecurity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ZONESECURITY, None)}
  }
  /// Color used for the pickup site marking (RED, WHITE, BLUE, YELLOW, GREEN, ORANGE, BLACK, PURPLE, BROWN, TAN, GRAY, SILVER, CAMOUFLAGE, OTHER COLOR).
  /// Example: /// Example: RED
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn zoneMarkingColor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ZONEMARKINGCOLOR, None)}
  }
  /// Flag indicating that the pickup site is hot and hostiles are in the area.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zoneHot(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Evac_Abridged::VT_ZONEHOT, Some(false)).unwrap()}
  }
  /// The contact frequency, in Hz, of the agency or zone controller.
  /// Example: /// Example: 3.11
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cntctFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Evac_Abridged::VT_CNTCTFREQ, Some(0.0)).unwrap()}
  }
  /// The call sign of the zone controller.
  /// Example: /// Example: Tango
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn zoneContrCallSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ZONECONTRCALLSIGN, None)}
  }
  /// The count of people requiring medevac.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numCasualties(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Evac_Abridged::VT_NUMCASUALTIES, Some(0)).unwrap()}
  }
  /// Additional comments for the medevac mission.
  /// Example: /// Example: Comments concerning mission
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn comments(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_COMMENTS, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn casualtyInfo(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Evac_Abridged::VT_CASUALTYINFO, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn enemyData(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Evac_Abridged::VT_ENEMYDATA, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Evac_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Evac_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Evac_Abridged_dataMode_Enum>(Evac_Abridged::VT_DATAMODE, Some(Evac_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Evac_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("medevacId", Self::VT_MEDEVACID, false)?
     .visit_field::<Evac_Abridged_type_Enum>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionType", Self::VT_MISSIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idWeatherReport", Self::VT_IDWEATHERREPORT, false)?
     .visit_field::<i32>("numKIA", Self::VT_NUMKIA, false)?
     .visit_field::<i32>("numWIA", Self::VT_NUMWIA, false)?
     .visit_field::<i32>("numLitter", Self::VT_NUMLITTER, false)?
     .visit_field::<i32>("numAmbulatory", Self::VT_NUMAMBULATORY, false)?
     .visit_field::<bool>("medicReq", Self::VT_MEDICREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reqNum", Self::VT_REQNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reqTime", Self::VT_REQTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reqCallSign", Self::VT_REQCALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pickupTime", Self::VT_PICKUPTIME, false)?
     .visit_field::<f64>("pickupLat", Self::VT_PICKUPLAT, false)?
     .visit_field::<f64>("pickupLon", Self::VT_PICKUPLON, false)?
     .visit_field::<f64>("pickupAlt", Self::VT_PICKUPALT, false)?
     .visit_field::<f64>("ce", Self::VT_CE, false)?
     .visit_field::<f64>("le", Self::VT_LE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("terrain", Self::VT_TERRAIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obstaclesRemarks", Self::VT_OBSTACLESREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("terrainRemarks", Self::VT_TERRAINREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("zoneName", Self::VT_ZONENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("zoneMarking", Self::VT_ZONEMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("zoneSecurity", Self::VT_ZONESECURITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("zoneMarkingColor", Self::VT_ZONEMARKINGCOLOR, false)?
     .visit_field::<bool>("zoneHot", Self::VT_ZONEHOT, false)?
     .visit_field::<f64>("cntctFreq", Self::VT_CNTCTFREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("zoneContrCallSign", Self::VT_ZONECONTRCALLSIGN, false)?
     .visit_field::<i32>("numCasualties", Self::VT_NUMCASUALTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("comments", Self::VT_COMMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("casualtyInfo", Self::VT_CASUALTYINFO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("enemyData", Self::VT_ENEMYDATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<Evac_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct Evac_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub medevacId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Evac_Abridged_type_Enum,
    pub missionType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idWeatherReport: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numKIA: i32,
    pub numWIA: i32,
    pub numLitter: i32,
    pub numAmbulatory: i32,
    pub medicReq: bool,
    pub reqNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reqTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reqCallSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pickupTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pickupLat: f64,
    pub pickupLon: f64,
    pub pickupAlt: f64,
    pub ce: f64,
    pub le: f64,
    pub terrain: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obstaclesRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub terrainRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zoneName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zoneMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zoneSecurity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zoneMarkingColor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zoneHot: bool,
    pub cntctFreq: f64,
    pub zoneContrCallSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numCasualties: i32,
    pub comments: Option<flatbuffers::WIPOffset<&'a str>>,
    pub casualtyInfo: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub enemyData: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Evac_Abridged_dataMode_Enum,
}
impl<'a> Default for Evac_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    Evac_AbridgedArgs {
      id: None,
      classificationMarking: None,
      medevacId: None,
      type_: Evac_Abridged_type_Enum::REQUEST,
      missionType: None,
      idWeatherReport: None,
      numKIA: 0,
      numWIA: 0,
      numLitter: 0,
      numAmbulatory: 0,
      medicReq: false,
      reqNum: None,
      reqTime: None,
      reqCallSign: None,
      pickupTime: None,
      pickupLat: 0.0,
      pickupLon: 0.0,
      pickupAlt: 0.0,
      ce: 0.0,
      le: 0.0,
      terrain: None,
      obstaclesRemarks: None,
      terrainRemarks: None,
      zoneName: None,
      zoneMarking: None,
      zoneSecurity: None,
      zoneMarkingColor: None,
      zoneHot: false,
      cntctFreq: 0.0,
      zoneContrCallSign: None,
      numCasualties: 0,
      comments: None,
      casualtyInfo: None,
      enemyData: None,
      origNetwork: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: Evac_Abridged_dataMode_Enum::REAL,
    }
  }
}

pub struct Evac_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Evac_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_medevacId(&mut self, medevacId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_MEDEVACID, medevacId);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: Evac_Abridged_type_Enum) {
    self.fbb_.push_slot::<Evac_Abridged_type_Enum>(Evac_Abridged::VT_TYPE_, type_, Evac_Abridged_type_Enum::REQUEST);
  }
  #[inline]
  pub fn add_missionType(&mut self, missionType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_MISSIONTYPE, missionType);
  }
  #[inline]
  pub fn add_idWeatherReport(&mut self, idWeatherReport: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_IDWEATHERREPORT, idWeatherReport);
  }
  #[inline]
  pub fn add_numKIA(&mut self, numKIA: i32) {
    self.fbb_.push_slot::<i32>(Evac_Abridged::VT_NUMKIA, numKIA, 0);
  }
  #[inline]
  pub fn add_numWIA(&mut self, numWIA: i32) {
    self.fbb_.push_slot::<i32>(Evac_Abridged::VT_NUMWIA, numWIA, 0);
  }
  #[inline]
  pub fn add_numLitter(&mut self, numLitter: i32) {
    self.fbb_.push_slot::<i32>(Evac_Abridged::VT_NUMLITTER, numLitter, 0);
  }
  #[inline]
  pub fn add_numAmbulatory(&mut self, numAmbulatory: i32) {
    self.fbb_.push_slot::<i32>(Evac_Abridged::VT_NUMAMBULATORY, numAmbulatory, 0);
  }
  #[inline]
  pub fn add_medicReq(&mut self, medicReq: bool) {
    self.fbb_.push_slot::<bool>(Evac_Abridged::VT_MEDICREQ, medicReq, false);
  }
  #[inline]
  pub fn add_reqNum(&mut self, reqNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_REQNUM, reqNum);
  }
  #[inline]
  pub fn add_reqTime(&mut self, reqTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_REQTIME, reqTime);
  }
  #[inline]
  pub fn add_reqCallSign(&mut self, reqCallSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_REQCALLSIGN, reqCallSign);
  }
  #[inline]
  pub fn add_pickupTime(&mut self, pickupTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_PICKUPTIME, pickupTime);
  }
  #[inline]
  pub fn add_pickupLat(&mut self, pickupLat: f64) {
    self.fbb_.push_slot::<f64>(Evac_Abridged::VT_PICKUPLAT, pickupLat, 0.0);
  }
  #[inline]
  pub fn add_pickupLon(&mut self, pickupLon: f64) {
    self.fbb_.push_slot::<f64>(Evac_Abridged::VT_PICKUPLON, pickupLon, 0.0);
  }
  #[inline]
  pub fn add_pickupAlt(&mut self, pickupAlt: f64) {
    self.fbb_.push_slot::<f64>(Evac_Abridged::VT_PICKUPALT, pickupAlt, 0.0);
  }
  #[inline]
  pub fn add_ce(&mut self, ce: f64) {
    self.fbb_.push_slot::<f64>(Evac_Abridged::VT_CE, ce, 0.0);
  }
  #[inline]
  pub fn add_le(&mut self, le: f64) {
    self.fbb_.push_slot::<f64>(Evac_Abridged::VT_LE, le, 0.0);
  }
  #[inline]
  pub fn add_terrain(&mut self, terrain: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_TERRAIN, terrain);
  }
  #[inline]
  pub fn add_obstaclesRemarks(&mut self, obstaclesRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_OBSTACLESREMARKS, obstaclesRemarks);
  }
  #[inline]
  pub fn add_terrainRemarks(&mut self, terrainRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_TERRAINREMARKS, terrainRemarks);
  }
  #[inline]
  pub fn add_zoneName(&mut self, zoneName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ZONENAME, zoneName);
  }
  #[inline]
  pub fn add_zoneMarking(&mut self, zoneMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ZONEMARKING, zoneMarking);
  }
  #[inline]
  pub fn add_zoneSecurity(&mut self, zoneSecurity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ZONESECURITY, zoneSecurity);
  }
  #[inline]
  pub fn add_zoneMarkingColor(&mut self, zoneMarkingColor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ZONEMARKINGCOLOR, zoneMarkingColor);
  }
  #[inline]
  pub fn add_zoneHot(&mut self, zoneHot: bool) {
    self.fbb_.push_slot::<bool>(Evac_Abridged::VT_ZONEHOT, zoneHot, false);
  }
  #[inline]
  pub fn add_cntctFreq(&mut self, cntctFreq: f64) {
    self.fbb_.push_slot::<f64>(Evac_Abridged::VT_CNTCTFREQ, cntctFreq, 0.0);
  }
  #[inline]
  pub fn add_zoneContrCallSign(&mut self, zoneContrCallSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ZONECONTRCALLSIGN, zoneContrCallSign);
  }
  #[inline]
  pub fn add_numCasualties(&mut self, numCasualties: i32) {
    self.fbb_.push_slot::<i32>(Evac_Abridged::VT_NUMCASUALTIES, numCasualties, 0);
  }
  #[inline]
  pub fn add_comments(&mut self, comments: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_COMMENTS, comments);
  }
  #[inline]
  pub fn add_casualtyInfo(&mut self, casualtyInfo: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_CASUALTYINFO, casualtyInfo);
  }
  #[inline]
  pub fn add_enemyData(&mut self, enemyData: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ENEMYDATA, enemyData);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Evac_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Evac_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<Evac_Abridged_dataMode_Enum>(Evac_Abridged::VT_DATAMODE, dataMode, Evac_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Evac_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Evac_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Evac_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Evac_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Evac_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("medevacId", &self.medevacId());
      ds.field("type_", &self.type_());
      ds.field("missionType", &self.missionType());
      ds.field("idWeatherReport", &self.idWeatherReport());
      ds.field("numKIA", &self.numKIA());
      ds.field("numWIA", &self.numWIA());
      ds.field("numLitter", &self.numLitter());
      ds.field("numAmbulatory", &self.numAmbulatory());
      ds.field("medicReq", &self.medicReq());
      ds.field("reqNum", &self.reqNum());
      ds.field("reqTime", &self.reqTime());
      ds.field("reqCallSign", &self.reqCallSign());
      ds.field("pickupTime", &self.pickupTime());
      ds.field("pickupLat", &self.pickupLat());
      ds.field("pickupLon", &self.pickupLon());
      ds.field("pickupAlt", &self.pickupAlt());
      ds.field("ce", &self.ce());
      ds.field("le", &self.le());
      ds.field("terrain", &self.terrain());
      ds.field("obstaclesRemarks", &self.obstaclesRemarks());
      ds.field("terrainRemarks", &self.terrainRemarks());
      ds.field("zoneName", &self.zoneName());
      ds.field("zoneMarking", &self.zoneMarking());
      ds.field("zoneSecurity", &self.zoneSecurity());
      ds.field("zoneMarkingColor", &self.zoneMarkingColor());
      ds.field("zoneHot", &self.zoneHot());
      ds.field("cntctFreq", &self.cntctFreq());
      ds.field("zoneContrCallSign", &self.zoneContrCallSign());
      ds.field("numCasualties", &self.numCasualties());
      ds.field("comments", &self.comments());
      ds.field("casualtyInfo", &self.casualtyInfo());
      ds.field("enemyData", &self.enemyData());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Evac_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub medevacId: Option<String>,
  pub type_: Evac_Abridged_type_Enum,
  pub missionType: Option<String>,
  pub idWeatherReport: Option<String>,
  pub numKIA: i32,
  pub numWIA: i32,
  pub numLitter: i32,
  pub numAmbulatory: i32,
  pub medicReq: bool,
  pub reqNum: Option<String>,
  pub reqTime: Option<String>,
  pub reqCallSign: Option<String>,
  pub pickupTime: Option<String>,
  pub pickupLat: f64,
  pub pickupLon: f64,
  pub pickupAlt: f64,
  pub ce: f64,
  pub le: f64,
  pub terrain: Option<String>,
  pub obstaclesRemarks: Option<String>,
  pub terrainRemarks: Option<String>,
  pub zoneName: Option<String>,
  pub zoneMarking: Option<String>,
  pub zoneSecurity: Option<String>,
  pub zoneMarkingColor: Option<String>,
  pub zoneHot: bool,
  pub cntctFreq: f64,
  pub zoneContrCallSign: Option<String>,
  pub numCasualties: i32,
  pub comments: Option<String>,
  pub casualtyInfo: Option<Vec<String>>,
  pub enemyData: Option<Vec<String>>,
  pub origNetwork: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: Evac_Abridged_dataMode_Enum,
}
impl Default for Evac_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      medevacId: None,
      type_: Evac_Abridged_type_Enum::REQUEST,
      missionType: None,
      idWeatherReport: None,
      numKIA: 0,
      numWIA: 0,
      numLitter: 0,
      numAmbulatory: 0,
      medicReq: false,
      reqNum: None,
      reqTime: None,
      reqCallSign: None,
      pickupTime: None,
      pickupLat: 0.0,
      pickupLon: 0.0,
      pickupAlt: 0.0,
      ce: 0.0,
      le: 0.0,
      terrain: None,
      obstaclesRemarks: None,
      terrainRemarks: None,
      zoneName: None,
      zoneMarking: None,
      zoneSecurity: None,
      zoneMarkingColor: None,
      zoneHot: false,
      cntctFreq: 0.0,
      zoneContrCallSign: None,
      numCasualties: 0,
      comments: None,
      casualtyInfo: None,
      enemyData: None,
      origNetwork: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: Evac_Abridged_dataMode_Enum::REAL,
    }
  }
}
impl Evac_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Evac_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let medevacId = self.medevacId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_;
    let missionType = self.missionType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idWeatherReport = self.idWeatherReport.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numKIA = self.numKIA;
    let numWIA = self.numWIA;
    let numLitter = self.numLitter;
    let numAmbulatory = self.numAmbulatory;
    let medicReq = self.medicReq;
    let reqNum = self.reqNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reqTime = self.reqTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reqCallSign = self.reqCallSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pickupTime = self.pickupTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pickupLat = self.pickupLat;
    let pickupLon = self.pickupLon;
    let pickupAlt = self.pickupAlt;
    let ce = self.ce;
    let le = self.le;
    let terrain = self.terrain.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obstaclesRemarks = self.obstaclesRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let terrainRemarks = self.terrainRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zoneName = self.zoneName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zoneMarking = self.zoneMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zoneSecurity = self.zoneSecurity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zoneMarkingColor = self.zoneMarkingColor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zoneHot = self.zoneHot;
    let cntctFreq = self.cntctFreq;
    let zoneContrCallSign = self.zoneContrCallSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numCasualties = self.numCasualties;
    let comments = self.comments.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let casualtyInfo = self.casualtyInfo.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let enemyData = self.enemyData.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    Evac_Abridged::create(_fbb, &Evac_AbridgedArgs{
      id,
      classificationMarking,
      medevacId,
      type_,
      missionType,
      idWeatherReport,
      numKIA,
      numWIA,
      numLitter,
      numAmbulatory,
      medicReq,
      reqNum,
      reqTime,
      reqCallSign,
      pickupTime,
      pickupLat,
      pickupLon,
      pickupAlt,
      ce,
      le,
      terrain,
      obstaclesRemarks,
      terrainRemarks,
      zoneName,
      zoneMarking,
      zoneSecurity,
      zoneMarkingColor,
      zoneHot,
      cntctFreq,
      zoneContrCallSign,
      numCasualties,
      comments,
      casualtyInfo,
      enemyData,
      origNetwork,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Evac_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_abridged_unchecked`.
pub fn root_as_evac_abridged(buf: &[u8]) -> Result<Evac_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Evac_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Evac_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_evac_abridged_unchecked`.
pub fn size_prefixed_root_as_evac_abridged(buf: &[u8]) -> Result<Evac_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Evac_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Evac_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_abridged_unchecked`.
pub fn root_as_evac_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Evac_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Evac_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Evac_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_abridged_unchecked`.
pub fn size_prefixed_root_as_evac_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Evac_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Evac_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Evac_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Evac_Abridged`.
pub unsafe fn root_as_evac_abridged_unchecked(buf: &[u8]) -> Evac_Abridged {
  flatbuffers::root_unchecked::<Evac_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Evac_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Evac_Abridged`.
pub unsafe fn size_prefixed_root_as_evac_abridged_unchecked(buf: &[u8]) -> Evac_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<Evac_Abridged>(buf)
}
pub const EVAC_ABRIDGED_IDENTIFIER: &str = "EVAC";

#[inline]
pub fn evac_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EVAC_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn evac_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EVAC_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_evac_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Evac_Abridged<'a>>) {
  fbb.finish(root, Some(EVAC_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_evac_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Evac_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(EVAC_ABRIDGED_IDENTIFIER));
}
