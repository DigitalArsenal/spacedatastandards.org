// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ISRCollectionCriticalTimes_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// High priority time windows.
pub struct ISRCollectionCriticalTimes_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ISRCollectionCriticalTimes_Full<'a> {
  type Inner = ISRCollectionCriticalTimes_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ISRCollectionCriticalTimes_Full<'a> {
  pub const VT_EARLIESTIMAGINGTIME: flatbuffers::VOffsetT = 4;
  pub const VT_LATESTIMAGINGTIME: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ISRCollectionCriticalTimes_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ISRCollectionCriticalTimes_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<ISRCollectionCriticalTimes_Full<'bldr>> {
    let mut builder = ISRCollectionCriticalTimes_FullBuilder::new(_fbb);
    if let Some(x) = args.latestImagingTime { builder.add_latestImagingTime(x); }
    if let Some(x) = args.earliestImagingTime { builder.add_earliestImagingTime(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ISRCollectionCriticalTimes_FullT {
    let earliestImagingTime = self.earliestImagingTime().map(|x| {
      x.to_string()
    });
    let latestImagingTime = self.latestImagingTime().map(|x| {
      x.to_string()
    });
    ISRCollectionCriticalTimes_FullT {
      earliestImagingTime,
      latestImagingTime,
    }
  }

  /// Critical start time to collect an image for this requirement.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn earliestImagingTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionCriticalTimes_Full::VT_EARLIESTIMAGINGTIME, None)}
  }
  /// Critical stop time to collect an image for this requirement.
  /// Example: /// Example: 2021-01-19T01:11:15.001Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn latestImagingTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionCriticalTimes_Full::VT_LATESTIMAGINGTIME, None)}
  }
}

impl flatbuffers::Verifiable for ISRCollectionCriticalTimes_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("earliestImagingTime", Self::VT_EARLIESTIMAGINGTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("latestImagingTime", Self::VT_LATESTIMAGINGTIME, false)?
     .finish();
    Ok(())
  }
}
pub struct ISRCollectionCriticalTimes_FullArgs<'a> {
    pub earliestImagingTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub latestImagingTime: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ISRCollectionCriticalTimes_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    ISRCollectionCriticalTimes_FullArgs {
      earliestImagingTime: None,
      latestImagingTime: None,
    }
  }
}

pub struct ISRCollectionCriticalTimes_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ISRCollectionCriticalTimes_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_earliestImagingTime(&mut self, earliestImagingTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionCriticalTimes_Full::VT_EARLIESTIMAGINGTIME, earliestImagingTime);
  }
  #[inline]
  pub fn add_latestImagingTime(&mut self, latestImagingTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionCriticalTimes_Full::VT_LATESTIMAGINGTIME, latestImagingTime);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ISRCollectionCriticalTimes_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ISRCollectionCriticalTimes_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ISRCollectionCriticalTimes_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ISRCollectionCriticalTimes_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ISRCollectionCriticalTimes_Full");
      ds.field("earliestImagingTime", &self.earliestImagingTime());
      ds.field("latestImagingTime", &self.latestImagingTime());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ISRCollectionCriticalTimes_FullT {
  pub earliestImagingTime: Option<String>,
  pub latestImagingTime: Option<String>,
}
impl Default for ISRCollectionCriticalTimes_FullT {
  fn default() -> Self {
    Self {
      earliestImagingTime: None,
      latestImagingTime: None,
    }
  }
}
impl ISRCollectionCriticalTimes_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ISRCollectionCriticalTimes_Full<'b>> {
    let earliestImagingTime = self.earliestImagingTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let latestImagingTime = self.latestImagingTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ISRCollectionCriticalTimes_Full::create(_fbb, &ISRCollectionCriticalTimes_FullArgs{
      earliestImagingTime,
      latestImagingTime,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ISRCollectionCriticalTimes_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_critical_times_full_unchecked`.
pub fn root_as_isrcollection_critical_times_full(buf: &[u8]) -> Result<ISRCollectionCriticalTimes_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ISRCollectionCriticalTimes_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ISRCollectionCriticalTimes_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_isrcollection_critical_times_full_unchecked`.
pub fn size_prefixed_root_as_isrcollection_critical_times_full(buf: &[u8]) -> Result<ISRCollectionCriticalTimes_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ISRCollectionCriticalTimes_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ISRCollectionCriticalTimes_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_critical_times_full_unchecked`.
pub fn root_as_isrcollection_critical_times_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionCriticalTimes_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ISRCollectionCriticalTimes_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ISRCollectionCriticalTimes_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_critical_times_full_unchecked`.
pub fn size_prefixed_root_as_isrcollection_critical_times_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionCriticalTimes_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ISRCollectionCriticalTimes_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ISRCollectionCriticalTimes_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ISRCollectionCriticalTimes_Full`.
pub unsafe fn root_as_isrcollection_critical_times_full_unchecked(buf: &[u8]) -> ISRCollectionCriticalTimes_Full {
  flatbuffers::root_unchecked::<ISRCollectionCriticalTimes_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ISRCollectionCriticalTimes_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ISRCollectionCriticalTimes_Full`.
pub unsafe fn size_prefixed_root_as_isrcollection_critical_times_full_unchecked(buf: &[u8]) -> ISRCollectionCriticalTimes_Full {
  flatbuffers::size_prefixed_root_unchecked::<ISRCollectionCriticalTimes_Full>(buf)
}
pub const ISRCOLLECTION_CRITICAL_TIMES_FULL_IDENTIFIER: &str = "ISRC";

#[inline]
pub fn isrcollection_critical_times_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_CRITICAL_TIMES_FULL_IDENTIFIER, false)
}

#[inline]
pub fn isrcollection_critical_times_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_CRITICAL_TIMES_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_isrcollection_critical_times_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ISRCollectionCriticalTimes_Full<'a>>) {
  fbb.finish(root, Some(ISRCOLLECTION_CRITICAL_TIMES_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_isrcollection_critical_times_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ISRCollectionCriticalTimes_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(ISRCOLLECTION_CRITICAL_TIMES_FULL_IDENTIFIER));
}
