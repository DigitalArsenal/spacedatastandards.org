// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkRefPoints_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection that identifies points of reference used in the establishment of the data links. There can be 1 to many DataLinkRefPoints collections within the datalink service.
pub struct DataLinkRefPoints_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkRefPoints_Ingest<'a> {
  type Inner = DataLinkRefPoints_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkRefPoints_Ingest<'a> {
  pub const VT_REFPOINTTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_REFDES: flatbuffers::VOffsetT = 6;
  pub const VT_REFLOCNAME: flatbuffers::VOffsetT = 8;
  pub const VT_REFLAT: flatbuffers::VOffsetT = 10;
  pub const VT_REFLON: flatbuffers::VOffsetT = 12;
  pub const VT_EFFEVENTTIME: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkRefPoints_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkRefPoints_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkRefPoints_Ingest<'bldr>> {
    let mut builder = DataLinkRefPoints_IngestBuilder::new(_fbb);
    builder.add_refLon(args.refLon);
    builder.add_refLat(args.refLat);
    if let Some(x) = args.effEventTime { builder.add_effEventTime(x); }
    if let Some(x) = args.refLocName { builder.add_refLocName(x); }
    if let Some(x) = args.refDes { builder.add_refDes(x); }
    if let Some(x) = args.refPointType { builder.add_refPointType(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkRefPoints_IngestT {
    let refPointType = self.refPointType().map(|x| {
      x.to_string()
    });
    let refDes = self.refDes().map(|x| {
      x.to_string()
    });
    let refLocName = self.refLocName().map(|x| {
      x.to_string()
    });
    let refLat = self.refLat();
    let refLon = self.refLon();
    let effEventTime = self.effEventTime().map(|x| {
      x.to_string()
    });
    DataLinkRefPoints_IngestT {
      refPointType,
      refDes,
      refLocName,
      refLat,
      refLon,
      effEventTime,
    }
  }

  /// Type of data link reference point or grid origin.
  /// Example: /// Example: DLRP
  /// Constraints: Minimum length = 0, Maximum length = 7
  #[inline]
  pub fn refPointType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkRefPoints_Ingest::VT_REFPOINTTYPE, None)}
  }
  /// Identifier to designate a reference point.
  /// Example: /// Example: L5
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn refDes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkRefPoints_Ingest::VT_REFDES, None)}
  }
  /// The location name of the point of reference for this data link message.
  /// Example: /// Example: FORT BRAGG
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn refLocName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkRefPoints_Ingest::VT_REFLOCNAME, None)}
  }
  /// WGS84 latitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn refLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(DataLinkRefPoints_Ingest::VT_REFLAT, Some(0.0)).unwrap()}
  }
  /// WGS84 longitude of the reference point for this data link message, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn refLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(DataLinkRefPoints_Ingest::VT_REFLON, Some(0.0)).unwrap()}
  }
  /// Indicates when a particular event or nickname becomes effective or the old event or nickname is deleted, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-08T13:55:43.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn effEventTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkRefPoints_Ingest::VT_EFFEVENTTIME, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkRefPoints_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refPointType", Self::VT_REFPOINTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refDes", Self::VT_REFDES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("refLocName", Self::VT_REFLOCNAME, false)?
     .visit_field::<f64>("refLat", Self::VT_REFLAT, false)?
     .visit_field::<f64>("refLon", Self::VT_REFLON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("effEventTime", Self::VT_EFFEVENTTIME, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkRefPoints_IngestArgs<'a> {
    pub refPointType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refDes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refLocName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub refLat: f64,
    pub refLon: f64,
    pub effEventTime: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for DataLinkRefPoints_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkRefPoints_IngestArgs {
      refPointType: None,
      refDes: None,
      refLocName: None,
      refLat: 0.0,
      refLon: 0.0,
      effEventTime: None,
    }
  }
}

pub struct DataLinkRefPoints_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkRefPoints_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_refPointType(&mut self, refPointType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkRefPoints_Ingest::VT_REFPOINTTYPE, refPointType);
  }
  #[inline]
  pub fn add_refDes(&mut self, refDes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkRefPoints_Ingest::VT_REFDES, refDes);
  }
  #[inline]
  pub fn add_refLocName(&mut self, refLocName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkRefPoints_Ingest::VT_REFLOCNAME, refLocName);
  }
  #[inline]
  pub fn add_refLat(&mut self, refLat: f64) {
    self.fbb_.push_slot::<f64>(DataLinkRefPoints_Ingest::VT_REFLAT, refLat, 0.0);
  }
  #[inline]
  pub fn add_refLon(&mut self, refLon: f64) {
    self.fbb_.push_slot::<f64>(DataLinkRefPoints_Ingest::VT_REFLON, refLon, 0.0);
  }
  #[inline]
  pub fn add_effEventTime(&mut self, effEventTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkRefPoints_Ingest::VT_EFFEVENTTIME, effEventTime);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkRefPoints_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkRefPoints_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkRefPoints_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkRefPoints_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkRefPoints_Ingest");
      ds.field("refPointType", &self.refPointType());
      ds.field("refDes", &self.refDes());
      ds.field("refLocName", &self.refLocName());
      ds.field("refLat", &self.refLat());
      ds.field("refLon", &self.refLon());
      ds.field("effEventTime", &self.effEventTime());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkRefPoints_IngestT {
  pub refPointType: Option<String>,
  pub refDes: Option<String>,
  pub refLocName: Option<String>,
  pub refLat: f64,
  pub refLon: f64,
  pub effEventTime: Option<String>,
}
impl Default for DataLinkRefPoints_IngestT {
  fn default() -> Self {
    Self {
      refPointType: None,
      refDes: None,
      refLocName: None,
      refLat: 0.0,
      refLon: 0.0,
      effEventTime: None,
    }
  }
}
impl DataLinkRefPoints_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkRefPoints_Ingest<'b>> {
    let refPointType = self.refPointType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refDes = self.refDes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refLocName = self.refLocName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let refLat = self.refLat;
    let refLon = self.refLon;
    let effEventTime = self.effEventTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    DataLinkRefPoints_Ingest::create(_fbb, &DataLinkRefPoints_IngestArgs{
      refPointType,
      refDes,
      refLocName,
      refLat,
      refLon,
      effEventTime,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkRefPoints_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_ref_points_ingest_unchecked`.
pub fn root_as_data_link_ref_points_ingest(buf: &[u8]) -> Result<DataLinkRefPoints_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkRefPoints_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkRefPoints_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_ref_points_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_ref_points_ingest(buf: &[u8]) -> Result<DataLinkRefPoints_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkRefPoints_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkRefPoints_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_ref_points_ingest_unchecked`.
pub fn root_as_data_link_ref_points_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkRefPoints_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkRefPoints_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkRefPoints_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_ref_points_ingest_unchecked`.
pub fn size_prefixed_root_as_data_link_ref_points_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkRefPoints_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkRefPoints_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkRefPoints_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkRefPoints_Ingest`.
pub unsafe fn root_as_data_link_ref_points_ingest_unchecked(buf: &[u8]) -> DataLinkRefPoints_Ingest {
  flatbuffers::root_unchecked::<DataLinkRefPoints_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkRefPoints_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkRefPoints_Ingest`.
pub unsafe fn size_prefixed_root_as_data_link_ref_points_ingest_unchecked(buf: &[u8]) -> DataLinkRefPoints_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkRefPoints_Ingest>(buf)
}
pub const DATA_LINK_REF_POINTS_INGEST_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_ref_points_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_REF_POINTS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn data_link_ref_points_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_REF_POINTS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_ref_points_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkRefPoints_Ingest<'a>>) {
  fbb.finish(root, Some(DATA_LINK_REF_POINTS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_ref_points_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkRefPoints_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_REF_POINTS_INGEST_IDENTIFIER));
}
