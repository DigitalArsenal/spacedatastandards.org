// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataLinkMultiDuty_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of contact and identification information for designated multilink coordinator duty assignments. There can be 0 to many DataLinkMultiDuty collections within the datalink service.
pub struct DataLinkMultiDuty_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataLinkMultiDuty_Full<'a> {
  type Inner = DataLinkMultiDuty_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataLinkMultiDuty_Full<'a> {
  pub const VT_UNITDES: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_RANK: flatbuffers::VOffsetT = 8;
  pub const VT_DUTY: flatbuffers::VOffsetT = 10;
  pub const VT_DUTYTELEFREQNUMS: flatbuffers::VOffsetT = 12;
  pub const VT_MULTIDUTYVOICECOORD: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataLinkMultiDuty_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataLinkMultiDuty_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<DataLinkMultiDuty_Full<'bldr>> {
    let mut builder = DataLinkMultiDuty_FullBuilder::new(_fbb);
    if let Some(x) = args.multiDutyVoiceCoord { builder.add_multiDutyVoiceCoord(x); }
    if let Some(x) = args.dutyTeleFreqNums { builder.add_dutyTeleFreqNums(x); }
    if let Some(x) = args.duty { builder.add_duty(x); }
    if let Some(x) = args.rank { builder.add_rank(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.unitDes { builder.add_unitDes(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> DataLinkMultiDuty_FullT {
    let unitDes = self.unitDes().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let rank = self.rank().map(|x| {
      x.to_string()
    });
    let duty = self.duty().map(|x| {
      x.to_string()
    });
    let dutyTeleFreqNums = self.dutyTeleFreqNums().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let multiDutyVoiceCoord = self.multiDutyVoiceCoord().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    DataLinkMultiDuty_FullT {
      unitDes,
      name,
      rank,
      duty,
      dutyTeleFreqNums,
      multiDutyVoiceCoord,
    }
  }

  /// Designated force of unit specified by ship name, unit call sign, or unit designator.
  /// Example: /// Example: SHIP:STENNIS
  /// Constraints: Minimum length = 0, Maximum length = 38
  #[inline]
  pub fn unitDes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkMultiDuty_Full::VT_UNITDES, None)}
  }
  /// The name of the person to be contacted for multilink coordination.
  /// Example: /// Example: POPOVICH
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkMultiDuty_Full::VT_NAME, None)}
  }
  /// The rank or position of the person to be contacted for multilink coordination.
  /// Example: /// Example: LCDR
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn rank(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkMultiDuty_Full::VT_RANK, None)}
  }
  /// Specific duties assigned for multilink coordination (e.g. ICO, RICO, SICO).
  /// Example: /// Example: SICO
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn duty(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataLinkMultiDuty_Full::VT_DUTY, None)}
  }
  /// Array of telephone numbers or the frequency values for radio transmission of the person to be contacted for multilink coordination.
  /// Example: /// Example: ['TEL:804-555-4142', 'TEL:804-867-5309']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dutyTeleFreqNums(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DataLinkMultiDuty_Full::VT_DUTYTELEFREQNUMS, None)}
  }
  /// Collection of information regarding the function, frequency, and priority of interface control and coordination nets for multilink coordination. There can be 0 to many DataLinkMultiVoiceCoord collections within a DataLinkMultiDuty collection.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn multiDutyVoiceCoord(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DataLinkMultiDuty_Full::VT_MULTIDUTYVOICECOORD, None)}
  }
}

impl flatbuffers::Verifiable for DataLinkMultiDuty_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unitDes", Self::VT_UNITDES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rank", Self::VT_RANK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("duty", Self::VT_DUTY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("dutyTeleFreqNums", Self::VT_DUTYTELEFREQNUMS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("multiDutyVoiceCoord", Self::VT_MULTIDUTYVOICECOORD, false)?
     .finish();
    Ok(())
  }
}
pub struct DataLinkMultiDuty_FullArgs<'a> {
    pub unitDes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rank: Option<flatbuffers::WIPOffset<&'a str>>,
    pub duty: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dutyTeleFreqNums: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub multiDutyVoiceCoord: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for DataLinkMultiDuty_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataLinkMultiDuty_FullArgs {
      unitDes: None,
      name: None,
      rank: None,
      duty: None,
      dutyTeleFreqNums: None,
      multiDutyVoiceCoord: None,
    }
  }
}

pub struct DataLinkMultiDuty_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataLinkMultiDuty_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_unitDes(&mut self, unitDes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDuty_Full::VT_UNITDES, unitDes);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDuty_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_rank(&mut self, rank: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDuty_Full::VT_RANK, rank);
  }
  #[inline]
  pub fn add_duty(&mut self, duty: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDuty_Full::VT_DUTY, duty);
  }
  #[inline]
  pub fn add_dutyTeleFreqNums(&mut self, dutyTeleFreqNums: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDuty_Full::VT_DUTYTELEFREQNUMS, dutyTeleFreqNums);
  }
  #[inline]
  pub fn add_multiDutyVoiceCoord(&mut self, multiDutyVoiceCoord: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataLinkMultiDuty_Full::VT_MULTIDUTYVOICECOORD, multiDutyVoiceCoord);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataLinkMultiDuty_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataLinkMultiDuty_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataLinkMultiDuty_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataLinkMultiDuty_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataLinkMultiDuty_Full");
      ds.field("unitDes", &self.unitDes());
      ds.field("name", &self.name());
      ds.field("rank", &self.rank());
      ds.field("duty", &self.duty());
      ds.field("dutyTeleFreqNums", &self.dutyTeleFreqNums());
      ds.field("multiDutyVoiceCoord", &self.multiDutyVoiceCoord());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataLinkMultiDuty_FullT {
  pub unitDes: Option<String>,
  pub name: Option<String>,
  pub rank: Option<String>,
  pub duty: Option<String>,
  pub dutyTeleFreqNums: Option<Vec<String>>,
  pub multiDutyVoiceCoord: Option<Vec<String>>,
}
impl Default for DataLinkMultiDuty_FullT {
  fn default() -> Self {
    Self {
      unitDes: None,
      name: None,
      rank: None,
      duty: None,
      dutyTeleFreqNums: None,
      multiDutyVoiceCoord: None,
    }
  }
}
impl DataLinkMultiDuty_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataLinkMultiDuty_Full<'b>> {
    let unitDes = self.unitDes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rank = self.rank.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let duty = self.duty.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dutyTeleFreqNums = self.dutyTeleFreqNums.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let multiDutyVoiceCoord = self.multiDutyVoiceCoord.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    DataLinkMultiDuty_Full::create(_fbb, &DataLinkMultiDuty_FullArgs{
      unitDes,
      name,
      rank,
      duty,
      dutyTeleFreqNums,
      multiDutyVoiceCoord,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataLinkMultiDuty_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_multi_duty_full_unchecked`.
pub fn root_as_data_link_multi_duty_full(buf: &[u8]) -> Result<DataLinkMultiDuty_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataLinkMultiDuty_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataLinkMultiDuty_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_link_multi_duty_full_unchecked`.
pub fn size_prefixed_root_as_data_link_multi_duty_full(buf: &[u8]) -> Result<DataLinkMultiDuty_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataLinkMultiDuty_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataLinkMultiDuty_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_multi_duty_full_unchecked`.
pub fn root_as_data_link_multi_duty_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkMultiDuty_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataLinkMultiDuty_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataLinkMultiDuty_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_link_multi_duty_full_unchecked`.
pub fn size_prefixed_root_as_data_link_multi_duty_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataLinkMultiDuty_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataLinkMultiDuty_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataLinkMultiDuty_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataLinkMultiDuty_Full`.
pub unsafe fn root_as_data_link_multi_duty_full_unchecked(buf: &[u8]) -> DataLinkMultiDuty_Full {
  flatbuffers::root_unchecked::<DataLinkMultiDuty_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataLinkMultiDuty_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataLinkMultiDuty_Full`.
pub unsafe fn size_prefixed_root_as_data_link_multi_duty_full_unchecked(buf: &[u8]) -> DataLinkMultiDuty_Full {
  flatbuffers::size_prefixed_root_unchecked::<DataLinkMultiDuty_Full>(buf)
}
pub const DATA_LINK_MULTI_DUTY_FULL_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_link_multi_duty_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_MULTI_DUTY_FULL_IDENTIFIER, false)
}

#[inline]
pub fn data_link_multi_duty_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_LINK_MULTI_DUTY_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_link_multi_duty_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataLinkMultiDuty_Full<'a>>) {
  fbb.finish(root, Some(DATA_LINK_MULTI_DUTY_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_link_multi_duty_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataLinkMultiDuty_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_LINK_MULTI_DUTY_FULL_IDENTIFIER));
}
