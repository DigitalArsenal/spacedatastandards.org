// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MtiFreeText_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Provides a means of sending Basic Character Set alphanumeric text messages.
pub struct MtiFreeText_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MtiFreeText_Full<'a> {
  type Inner = MtiFreeText_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MtiFreeText_Full<'a> {
  pub const VT_F1: flatbuffers::VOffsetT = 4;
  pub const VT_F2: flatbuffers::VOffsetT = 6;
  pub const VT_F3: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MtiFreeText_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MtiFreeText_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<MtiFreeText_Full<'bldr>> {
    let mut builder = MtiFreeText_FullBuilder::new(_fbb);
    if let Some(x) = args.f3 { builder.add_f3(x); }
    if let Some(x) = args.f2 { builder.add_f2(x); }
    if let Some(x) = args.f1 { builder.add_f1(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> MtiFreeText_FullT {
    let f1 = self.f1().map(|x| {
      x.to_string()
    });
    let f2 = self.f2().map(|x| {
      x.to_string()
    });
    let f3 = self.f3().map(|x| {
      x.to_string()
    });
    MtiFreeText_FullT {
      f1,
      f2,
      f3,
    }
  }

  /// The originator of the Free Text message.
  /// Example: /// Example: ORIGINATOR
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn f1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiFreeText_Full::VT_F1, None)}
  }
  /// The recipient for which the Free Text message is intended.
  /// Example: /// Example: RECIPIENT
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn f2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiFreeText_Full::VT_F2, None)}
  }
  /// Free text data message.
  /// Example: /// Example: TEXT
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn f3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiFreeText_Full::VT_F3, None)}
  }
}

impl flatbuffers::Verifiable for MtiFreeText_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("f1", Self::VT_F1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("f2", Self::VT_F2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("f3", Self::VT_F3, false)?
     .finish();
    Ok(())
  }
}
pub struct MtiFreeText_FullArgs<'a> {
    pub f1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub f2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub f3: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MtiFreeText_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    MtiFreeText_FullArgs {
      f1: None,
      f2: None,
      f3: None,
    }
  }
}

pub struct MtiFreeText_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MtiFreeText_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_f1(&mut self, f1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiFreeText_Full::VT_F1, f1);
  }
  #[inline]
  pub fn add_f2(&mut self, f2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiFreeText_Full::VT_F2, f2);
  }
  #[inline]
  pub fn add_f3(&mut self, f3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiFreeText_Full::VT_F3, f3);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MtiFreeText_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MtiFreeText_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MtiFreeText_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MtiFreeText_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MtiFreeText_Full");
      ds.field("f1", &self.f1());
      ds.field("f2", &self.f2());
      ds.field("f3", &self.f3());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MtiFreeText_FullT {
  pub f1: Option<String>,
  pub f2: Option<String>,
  pub f3: Option<String>,
}
impl Default for MtiFreeText_FullT {
  fn default() -> Self {
    Self {
      f1: None,
      f2: None,
      f3: None,
    }
  }
}
impl MtiFreeText_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MtiFreeText_Full<'b>> {
    let f1 = self.f1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let f2 = self.f2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let f3 = self.f3.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MtiFreeText_Full::create(_fbb, &MtiFreeText_FullArgs{
      f1,
      f2,
      f3,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MtiFreeText_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_free_text_full_unchecked`.
pub fn root_as_mti_free_text_full(buf: &[u8]) -> Result<MtiFreeText_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MtiFreeText_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MtiFreeText_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mti_free_text_full_unchecked`.
pub fn size_prefixed_root_as_mti_free_text_full(buf: &[u8]) -> Result<MtiFreeText_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MtiFreeText_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MtiFreeText_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_free_text_full_unchecked`.
pub fn root_as_mti_free_text_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiFreeText_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MtiFreeText_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MtiFreeText_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_free_text_full_unchecked`.
pub fn size_prefixed_root_as_mti_free_text_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiFreeText_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MtiFreeText_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MtiFreeText_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MtiFreeText_Full`.
pub unsafe fn root_as_mti_free_text_full_unchecked(buf: &[u8]) -> MtiFreeText_Full {
  flatbuffers::root_unchecked::<MtiFreeText_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MtiFreeText_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MtiFreeText_Full`.
pub unsafe fn size_prefixed_root_as_mti_free_text_full_unchecked(buf: &[u8]) -> MtiFreeText_Full {
  flatbuffers::size_prefixed_root_unchecked::<MtiFreeText_Full>(buf)
}
pub const MTI_FREE_TEXT_FULL_IDENTIFIER: &str = "MTIF";

#[inline]
pub fn mti_free_text_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_FREE_TEXT_FULL_IDENTIFIER, false)
}

#[inline]
pub fn mti_free_text_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_FREE_TEXT_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_mti_free_text_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MtiFreeText_Full<'a>>) {
  fbb.finish(root, Some(MTI_FREE_TEXT_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mti_free_text_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MtiFreeText_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(MTI_FREE_TEXT_FULL_IDENTIFIER));
}
