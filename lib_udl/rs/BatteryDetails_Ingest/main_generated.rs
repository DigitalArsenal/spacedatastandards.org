// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_BATTERY_DETAILS_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_BATTERY_DETAILS_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_BATTERY_DETAILS_INGEST_DATA_MODE_ENUM: [BatteryDetails_Ingest_dataMode_Enum; 4] = [
  BatteryDetails_Ingest_dataMode_Enum::REAL,
  BatteryDetails_Ingest_dataMode_Enum::TEST,
  BatteryDetails_Ingest_dataMode_Enum::SIMULATED,
  BatteryDetails_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct BatteryDetails_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl BatteryDetails_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for BatteryDetails_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for BatteryDetails_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for BatteryDetails_Ingest_dataMode_Enum {
    type Output = BatteryDetails_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for BatteryDetails_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for BatteryDetails_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for BatteryDetails_Ingest_dataMode_Enum {}
pub enum BatteryDetails_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Detailed information on a spacecraft battery type compiled by a particular source. A Battery record may have multiple details records from several sources.
pub struct BatteryDetails_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BatteryDetails_Ingest<'a> {
  type Inner = BatteryDetails_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BatteryDetails_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDBATTERY: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_TECHNOLOGY: flatbuffers::VOffsetT = 10;
  pub const VT_CAPACITY: flatbuffers::VOffsetT = 12;
  pub const VT_DISCHARGEDEPTH: flatbuffers::VOffsetT = 14;
  pub const VT_MODEL: flatbuffers::VOffsetT = 16;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 18;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 20;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 22;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 24;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 26;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 28;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 30;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 32;
  pub const VT_TAGS: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BatteryDetails_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BatteryDetails_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<BatteryDetails_Ingest<'bldr>> {
    let mut builder = BatteryDetails_IngestBuilder::new(_fbb);
    builder.add_dischargeDepth(args.dischargeDepth);
    builder.add_capacity(args.capacity);
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.model { builder.add_model(x); }
    if let Some(x) = args.technology { builder.add_technology(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idBattery { builder.add_idBattery(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> BatteryDetails_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idBattery = self.idBattery().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let technology = self.technology().map(|x| {
      x.to_string()
    });
    let capacity = self.capacity();
    let dischargeDepth = self.dischargeDepth();
    let model = self.model().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    BatteryDetails_IngestT {
      id,
      idBattery,
      classificationMarking,
      technology,
      capacity,
      dischargeDepth,
      model,
      description,
      manufacturerOrgId,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: BATTERYDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_ID, None)}
  }
  /// Identifier of the parent battery type record.
  /// Example: /// Example: BATTERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idBattery(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_IDBATTERY, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Type of battery technology (e.g. Ni-Cd, Ni-H2, Li-ion, etc.).
  /// Example: /// Example: Ni-Cd
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn technology(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_TECHNOLOGY, None)}
  }
  /// Battery capacity in Ah.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn capacity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BatteryDetails_Ingest::VT_CAPACITY, Some(0.0)).unwrap()}
  }
  /// Depth of discharge as a percentage/fraction.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dischargeDepth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(BatteryDetails_Ingest::VT_DISCHARGEDEPTH, Some(0.0)).unwrap()}
  }
  /// Battery model number or name.
  /// Example: /// Example: 11212
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn model(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_MODEL, None)}
  }
  /// Battery description/notes.
  /// Example: /// Example: example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_DESCRIPTION, None)}
  }
  /// ID of the organization that manufactures the battery.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_MANUFACTURERORGID, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(BatteryDetails_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> BatteryDetails_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<BatteryDetails_Ingest_dataMode_Enum>(BatteryDetails_Ingest::VT_DATAMODE, Some(BatteryDetails_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(BatteryDetails_Ingest::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for BatteryDetails_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idBattery", Self::VT_IDBATTERY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("technology", Self::VT_TECHNOLOGY, false)?
     .visit_field::<f64>("capacity", Self::VT_CAPACITY, false)?
     .visit_field::<f64>("dischargeDepth", Self::VT_DISCHARGEDEPTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("model", Self::VT_MODEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<BatteryDetails_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct BatteryDetails_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idBattery: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub technology: Option<flatbuffers::WIPOffset<&'a str>>,
    pub capacity: f64,
    pub dischargeDepth: f64,
    pub model: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: BatteryDetails_Ingest_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for BatteryDetails_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    BatteryDetails_IngestArgs {
      id: None,
      idBattery: None,
      classificationMarking: None,
      technology: None,
      capacity: 0.0,
      dischargeDepth: 0.0,
      model: None,
      description: None,
      manufacturerOrgId: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: BatteryDetails_Ingest_dataMode_Enum::REAL,
      tags: None,
    }
  }
}

pub struct BatteryDetails_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BatteryDetails_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_idBattery(&mut self, idBattery: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_IDBATTERY, idBattery);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_technology(&mut self, technology: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_TECHNOLOGY, technology);
  }
  #[inline]
  pub fn add_capacity(&mut self, capacity: f64) {
    self.fbb_.push_slot::<f64>(BatteryDetails_Ingest::VT_CAPACITY, capacity, 0.0);
  }
  #[inline]
  pub fn add_dischargeDepth(&mut self, dischargeDepth: f64) {
    self.fbb_.push_slot::<f64>(BatteryDetails_Ingest::VT_DISCHARGEDEPTH, dischargeDepth, 0.0);
  }
  #[inline]
  pub fn add_model(&mut self, model: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_MODEL, model);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: BatteryDetails_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<BatteryDetails_Ingest_dataMode_Enum>(BatteryDetails_Ingest::VT_DATAMODE, dataMode, BatteryDetails_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BatteryDetails_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BatteryDetails_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BatteryDetails_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BatteryDetails_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BatteryDetails_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BatteryDetails_Ingest");
      ds.field("id", &self.id());
      ds.field("idBattery", &self.idBattery());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("technology", &self.technology());
      ds.field("capacity", &self.capacity());
      ds.field("dischargeDepth", &self.dischargeDepth());
      ds.field("model", &self.model());
      ds.field("description", &self.description());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct BatteryDetails_IngestT {
  pub id: Option<String>,
  pub idBattery: Option<String>,
  pub classificationMarking: Option<String>,
  pub technology: Option<String>,
  pub capacity: f64,
  pub dischargeDepth: f64,
  pub model: Option<String>,
  pub description: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: BatteryDetails_Ingest_dataMode_Enum,
  pub tags: Option<Vec<String>>,
}
impl Default for BatteryDetails_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      idBattery: None,
      classificationMarking: None,
      technology: None,
      capacity: 0.0,
      dischargeDepth: 0.0,
      model: None,
      description: None,
      manufacturerOrgId: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: BatteryDetails_Ingest_dataMode_Enum::REAL,
      tags: None,
    }
  }
}
impl BatteryDetails_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<BatteryDetails_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idBattery = self.idBattery.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let technology = self.technology.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let capacity = self.capacity;
    let dischargeDepth = self.dischargeDepth;
    let model = self.model.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    BatteryDetails_Ingest::create(_fbb, &BatteryDetails_IngestArgs{
      id,
      idBattery,
      classificationMarking,
      technology,
      capacity,
      dischargeDepth,
      model,
      description,
      manufacturerOrgId,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `BatteryDetails_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_battery_details_ingest_unchecked`.
pub fn root_as_battery_details_ingest(buf: &[u8]) -> Result<BatteryDetails_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<BatteryDetails_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `BatteryDetails_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_battery_details_ingest_unchecked`.
pub fn size_prefixed_root_as_battery_details_ingest(buf: &[u8]) -> Result<BatteryDetails_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<BatteryDetails_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `BatteryDetails_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_battery_details_ingest_unchecked`.
pub fn root_as_battery_details_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BatteryDetails_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<BatteryDetails_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `BatteryDetails_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_battery_details_ingest_unchecked`.
pub fn size_prefixed_root_as_battery_details_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<BatteryDetails_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<BatteryDetails_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a BatteryDetails_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `BatteryDetails_Ingest`.
pub unsafe fn root_as_battery_details_ingest_unchecked(buf: &[u8]) -> BatteryDetails_Ingest {
  flatbuffers::root_unchecked::<BatteryDetails_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed BatteryDetails_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `BatteryDetails_Ingest`.
pub unsafe fn size_prefixed_root_as_battery_details_ingest_unchecked(buf: &[u8]) -> BatteryDetails_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<BatteryDetails_Ingest>(buf)
}
pub const BATTERY_DETAILS_INGEST_IDENTIFIER: &str = "BATT";

#[inline]
pub fn battery_details_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, BATTERY_DETAILS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn battery_details_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, BATTERY_DETAILS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_battery_details_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<BatteryDetails_Ingest<'a>>) {
  fbb.finish(root, Some(BATTERY_DETAILS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_battery_details_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<BatteryDetails_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(BATTERY_DETAILS_INGEST_IDENTIFIER));
}
