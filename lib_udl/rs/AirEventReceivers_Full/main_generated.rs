// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AirEventReceivers_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of receiver aircraft associated with this Air Event.
pub struct AirEventReceivers_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirEventReceivers_Full<'a> {
  type Inner = AirEventReceivers_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirEventReceivers_Full<'a> {
  pub const VT_IDRECEIVERSORTIE: flatbuffers::VOffsetT = 4;
  pub const VT_IDRECEIVERMISSION: flatbuffers::VOffsetT = 6;
  pub const VT_IDRECEIVERAIRFIELD: flatbuffers::VOffsetT = 8;
  pub const VT_EXTERNALRECEIVERID: flatbuffers::VOffsetT = 10;
  pub const VT_RECEIVERCOORD: flatbuffers::VOffsetT = 12;
  pub const VT_RECEIVERMDS: flatbuffers::VOffsetT = 14;
  pub const VT_AMCRECEIVERMISSIONID: flatbuffers::VOffsetT = 16;
  pub const VT_ALTRECEIVERMISSIONID: flatbuffers::VOffsetT = 18;
  pub const VT_RECEIVERCALLSIGN: flatbuffers::VOffsetT = 20;
  pub const VT_RECEIVEROWNER: flatbuffers::VOffsetT = 22;
  pub const VT_RECEIVERPOC: flatbuffers::VOffsetT = 24;
  pub const VT_RECEIVERLEGNUM: flatbuffers::VOffsetT = 26;
  pub const VT_RECEIVERDEPLOYEDICAO: flatbuffers::VOffsetT = 28;
  pub const VT_RECEIVERDELIVERYMETHOD: flatbuffers::VOffsetT = 30;
  pub const VT_FUELON: flatbuffers::VOffsetT = 32;
  pub const VT_RECEIVERCELLPOSITION: flatbuffers::VOffsetT = 34;
  pub const VT_SEQUENCENUM: flatbuffers::VOffsetT = 36;
  pub const VT_RECORG: flatbuffers::VOffsetT = 38;
  pub const VT_NUMRECAIRCRAFT: flatbuffers::VOffsetT = 40;
  pub const VT_RECEIVERFUELTYPE: flatbuffers::VOffsetT = 42;
  pub const VT_RECEIVEREXERCISE: flatbuffers::VOffsetT = 44;
  pub const VT_PACKAGEID: flatbuffers::VOffsetT = 46;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirEventReceivers_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirEventReceivers_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<AirEventReceivers_Full<'bldr>> {
    let mut builder = AirEventReceivers_FullBuilder::new(_fbb);
    builder.add_fuelOn(args.fuelOn);
    if let Some(x) = args.packageId { builder.add_packageId(x); }
    if let Some(x) = args.receiverExercise { builder.add_receiverExercise(x); }
    if let Some(x) = args.receiverFuelType { builder.add_receiverFuelType(x); }
    builder.add_numRecAircraft(args.numRecAircraft);
    if let Some(x) = args.recOrg { builder.add_recOrg(x); }
    if let Some(x) = args.sequenceNum { builder.add_sequenceNum(x); }
    builder.add_receiverCellPosition(args.receiverCellPosition);
    if let Some(x) = args.receiverDeliveryMethod { builder.add_receiverDeliveryMethod(x); }
    if let Some(x) = args.receiverDeployedICAO { builder.add_receiverDeployedICAO(x); }
    builder.add_receiverLegNum(args.receiverLegNum);
    if let Some(x) = args.receiverPOC { builder.add_receiverPOC(x); }
    if let Some(x) = args.receiverOwner { builder.add_receiverOwner(x); }
    if let Some(x) = args.receiverCallSign { builder.add_receiverCallSign(x); }
    if let Some(x) = args.altReceiverMissionId { builder.add_altReceiverMissionId(x); }
    if let Some(x) = args.amcReceiverMissionId { builder.add_amcReceiverMissionId(x); }
    if let Some(x) = args.receiverMDS { builder.add_receiverMDS(x); }
    if let Some(x) = args.receiverCoord { builder.add_receiverCoord(x); }
    if let Some(x) = args.externalReceiverId { builder.add_externalReceiverId(x); }
    if let Some(x) = args.idReceiverAirfield { builder.add_idReceiverAirfield(x); }
    if let Some(x) = args.idReceiverMission { builder.add_idReceiverMission(x); }
    if let Some(x) = args.idReceiverSortie { builder.add_idReceiverSortie(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AirEventReceivers_FullT {
    let idReceiverSortie = self.idReceiverSortie().map(|x| {
      x.to_string()
    });
    let idReceiverMission = self.idReceiverMission().map(|x| {
      x.to_string()
    });
    let idReceiverAirfield = self.idReceiverAirfield().map(|x| {
      x.to_string()
    });
    let externalReceiverId = self.externalReceiverId().map(|x| {
      x.to_string()
    });
    let receiverCoord = self.receiverCoord().map(|x| {
      x.to_string()
    });
    let receiverMDS = self.receiverMDS().map(|x| {
      x.to_string()
    });
    let amcReceiverMissionId = self.amcReceiverMissionId().map(|x| {
      x.to_string()
    });
    let altReceiverMissionId = self.altReceiverMissionId().map(|x| {
      x.to_string()
    });
    let receiverCallSign = self.receiverCallSign().map(|x| {
      x.to_string()
    });
    let receiverOwner = self.receiverOwner().map(|x| {
      x.to_string()
    });
    let receiverPOC = self.receiverPOC().map(|x| {
      x.to_string()
    });
    let receiverLegNum = self.receiverLegNum();
    let receiverDeployedICAO = self.receiverDeployedICAO().map(|x| {
      x.to_string()
    });
    let receiverDeliveryMethod = self.receiverDeliveryMethod().map(|x| {
      x.to_string()
    });
    let fuelOn = self.fuelOn();
    let receiverCellPosition = self.receiverCellPosition();
    let sequenceNum = self.sequenceNum().map(|x| {
      x.to_string()
    });
    let recOrg = self.recOrg().map(|x| {
      x.to_string()
    });
    let numRecAircraft = self.numRecAircraft();
    let receiverFuelType = self.receiverFuelType().map(|x| {
      x.to_string()
    });
    let receiverExercise = self.receiverExercise().map(|x| {
      x.to_string()
    });
    let packageId = self.packageId().map(|x| {
      x.to_string()
    });
    AirEventReceivers_FullT {
      idReceiverSortie,
      idReceiverMission,
      idReceiverAirfield,
      externalReceiverId,
      receiverCoord,
      receiverMDS,
      amcReceiverMissionId,
      altReceiverMissionId,
      receiverCallSign,
      receiverOwner,
      receiverPOC,
      receiverLegNum,
      receiverDeployedICAO,
      receiverDeliveryMethod,
      fuelOn,
      receiverCellPosition,
      sequenceNum,
      recOrg,
      numRecAircraft,
      receiverFuelType,
      receiverExercise,
      packageId,
    }
  }

  /// The UDL ID of the aircraft sortie this receiver is associated with for this event.
  /// Example: /// Example: 1d03e85a-1fb9-4f6e-86a0-593306b6e3f0
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idReceiverSortie(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_IDRECEIVERSORTIE, None)}
  }
  /// The UDL ID of the mission this receiver is associated with for this event.
  /// Example: /// Example: ce99757d-f733-461f-8939-3939d4f05946
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idReceiverMission(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_IDRECEIVERMISSION, None)}
  }
  /// The UDL ID of the airfield this receiver is associated with for this event.
  /// Example: /// Example: 96c4c2ba-a031-4e58-9b8e-3c6fb90a7534
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idReceiverAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_IDRECEIVERAIRFIELD, None)}
  }
  /// Optional receiver identifier from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 3fb8169f-adc1-4667-acab-8415a012d766
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalReceiverId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_EXTERNALRECEIVERID, None)}
  }
  /// Coordination record identifier of this receiver.
  /// Example: /// Example: TTC601
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn receiverCoord(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVERCOORD, None)}
  }
  /// The Model Design Series designation of this receiver.
  /// Example: /// Example: KC135R
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn receiverMDS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVERMDS, None)}
  }
  /// The Air Mobility Command (AMC) mission identifier of this receiver.
  /// Example: /// Example: 8PH000B1S052
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn amcReceiverMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_AMCRECEIVERMISSIONID, None)}
  }
  /// Alternate mission identifier of this receiver provided by source.
  /// Example: /// Example: 1UN05201L121
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn altReceiverMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_ALTRECEIVERMISSIONID, None)}
  }
  /// The call sign assigned to this receiver.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn receiverCallSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVERCALLSIGN, None)}
  }
  /// The wing or unit that owns this receiver.
  /// Example: /// Example: 117ARW
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn receiverOwner(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVEROWNER, None)}
  }
  /// The name and/or number of the point of contact for this receiver.
  /// Example: /// Example: JOHN SMITH (555)555-5555
  /// Constraints: Minimum length = 0, Maximum length = 68
  #[inline]
  pub fn receiverPOC(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVERPOC, None)}
  }
  /// Identifies the itinerary point of a mission that this receiver is linked to.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  #[inline]
  pub fn receiverLegNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirEventReceivers_Full::VT_RECEIVERLEGNUM, Some(0)).unwrap()}
  }
  /// Location the receiver is deployed to for an air refueling event.
  /// Example: /// Example: KOFF
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn receiverDeployedICAO(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVERDEPLOYEDICAO, None)}
  }
  /// Type of fuel delivery method used by the receiver during an air refueling event (BOOM, DROGUE, BOTH).
  /// Example: /// Example: DROGUE
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn receiverDeliveryMethod(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVERDELIVERYMETHOD, None)}
  }
  /// Total weight of the fuel transferred to this receiver during an air refueling event, in pounds.
  /// Example: /// Example: 15000000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelOn(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AirEventReceivers_Full::VT_FUELON, Some(0.0)).unwrap()}
  }
  /// Position of this receiver within a group of receivers in an air refueling event.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn receiverCellPosition(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirEventReceivers_Full::VT_RECEIVERCELLPOSITION, Some(0)).unwrap()}
  }
  /// Indicates the unique number by Unit ID, which identifies an air refueling event.
  /// Example: /// Example: 1018
  /// Constraints: Minimum length = 0, Maximum length = 15
  #[inline]
  pub fn sequenceNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_SEQUENCENUM, None)}
  }
  /// The major command level (MAJCOM) or foreign military sales (FMS) name of the receiver's organization. The tanker flying hours used for an air refueling event are logged against the receiver MAJCOM or foreign government being supported.
  /// Example: /// Example: AMC
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn recOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECORG, None)}
  }
  /// Number of aircraft contained within one receiver coordination record for an air refueling event.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numRecAircraft(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AirEventReceivers_Full::VT_NUMRECAIRCRAFT, Some(0)).unwrap()}
  }
  /// Type of fuel being transferred to the receiver in an air refueling event.
  /// Example: /// Example: JP8
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn receiverFuelType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVERFUELTYPE, None)}
  }
  /// Name of the receiver exercise associated with an air refueling event.
  /// Example: /// Example: NATO19
  /// Constraints: Minimum length = 0, Maximum length = 12
  #[inline]
  pub fn receiverExercise(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_RECEIVEREXERCISE, None)}
  }
  /// The package identifier for the receiver in an air refueling event.
  /// Example: /// Example: 135
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn packageId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirEventReceivers_Full::VT_PACKAGEID, None)}
  }
}

impl flatbuffers::Verifiable for AirEventReceivers_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idReceiverSortie", Self::VT_IDRECEIVERSORTIE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idReceiverMission", Self::VT_IDRECEIVERMISSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idReceiverAirfield", Self::VT_IDRECEIVERAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalReceiverId", Self::VT_EXTERNALRECEIVERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverCoord", Self::VT_RECEIVERCOORD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverMDS", Self::VT_RECEIVERMDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("amcReceiverMissionId", Self::VT_AMCRECEIVERMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altReceiverMissionId", Self::VT_ALTRECEIVERMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverCallSign", Self::VT_RECEIVERCALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverOwner", Self::VT_RECEIVEROWNER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverPOC", Self::VT_RECEIVERPOC, false)?
     .visit_field::<i32>("receiverLegNum", Self::VT_RECEIVERLEGNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverDeployedICAO", Self::VT_RECEIVERDEPLOYEDICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverDeliveryMethod", Self::VT_RECEIVERDELIVERYMETHOD, false)?
     .visit_field::<f64>("fuelOn", Self::VT_FUELON, false)?
     .visit_field::<i32>("receiverCellPosition", Self::VT_RECEIVERCELLPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sequenceNum", Self::VT_SEQUENCENUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("recOrg", Self::VT_RECORG, false)?
     .visit_field::<i32>("numRecAircraft", Self::VT_NUMRECAIRCRAFT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverFuelType", Self::VT_RECEIVERFUELTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverExercise", Self::VT_RECEIVEREXERCISE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("packageId", Self::VT_PACKAGEID, false)?
     .finish();
    Ok(())
  }
}
pub struct AirEventReceivers_FullArgs<'a> {
    pub idReceiverSortie: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idReceiverMission: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idReceiverAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalReceiverId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverCoord: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverMDS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub amcReceiverMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altReceiverMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverCallSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverOwner: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverPOC: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverLegNum: i32,
    pub receiverDeployedICAO: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverDeliveryMethod: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fuelOn: f64,
    pub receiverCellPosition: i32,
    pub sequenceNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub recOrg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numRecAircraft: i32,
    pub receiverFuelType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverExercise: Option<flatbuffers::WIPOffset<&'a str>>,
    pub packageId: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AirEventReceivers_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirEventReceivers_FullArgs {
      idReceiverSortie: None,
      idReceiverMission: None,
      idReceiverAirfield: None,
      externalReceiverId: None,
      receiverCoord: None,
      receiverMDS: None,
      amcReceiverMissionId: None,
      altReceiverMissionId: None,
      receiverCallSign: None,
      receiverOwner: None,
      receiverPOC: None,
      receiverLegNum: 0,
      receiverDeployedICAO: None,
      receiverDeliveryMethod: None,
      fuelOn: 0.0,
      receiverCellPosition: 0,
      sequenceNum: None,
      recOrg: None,
      numRecAircraft: 0,
      receiverFuelType: None,
      receiverExercise: None,
      packageId: None,
    }
  }
}

pub struct AirEventReceivers_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirEventReceivers_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_idReceiverSortie(&mut self, idReceiverSortie: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_IDRECEIVERSORTIE, idReceiverSortie);
  }
  #[inline]
  pub fn add_idReceiverMission(&mut self, idReceiverMission: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_IDRECEIVERMISSION, idReceiverMission);
  }
  #[inline]
  pub fn add_idReceiverAirfield(&mut self, idReceiverAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_IDRECEIVERAIRFIELD, idReceiverAirfield);
  }
  #[inline]
  pub fn add_externalReceiverId(&mut self, externalReceiverId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_EXTERNALRECEIVERID, externalReceiverId);
  }
  #[inline]
  pub fn add_receiverCoord(&mut self, receiverCoord: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVERCOORD, receiverCoord);
  }
  #[inline]
  pub fn add_receiverMDS(&mut self, receiverMDS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVERMDS, receiverMDS);
  }
  #[inline]
  pub fn add_amcReceiverMissionId(&mut self, amcReceiverMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_AMCRECEIVERMISSIONID, amcReceiverMissionId);
  }
  #[inline]
  pub fn add_altReceiverMissionId(&mut self, altReceiverMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_ALTRECEIVERMISSIONID, altReceiverMissionId);
  }
  #[inline]
  pub fn add_receiverCallSign(&mut self, receiverCallSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVERCALLSIGN, receiverCallSign);
  }
  #[inline]
  pub fn add_receiverOwner(&mut self, receiverOwner: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVEROWNER, receiverOwner);
  }
  #[inline]
  pub fn add_receiverPOC(&mut self, receiverPOC: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVERPOC, receiverPOC);
  }
  #[inline]
  pub fn add_receiverLegNum(&mut self, receiverLegNum: i32) {
    self.fbb_.push_slot::<i32>(AirEventReceivers_Full::VT_RECEIVERLEGNUM, receiverLegNum, 0);
  }
  #[inline]
  pub fn add_receiverDeployedICAO(&mut self, receiverDeployedICAO: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVERDEPLOYEDICAO, receiverDeployedICAO);
  }
  #[inline]
  pub fn add_receiverDeliveryMethod(&mut self, receiverDeliveryMethod: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVERDELIVERYMETHOD, receiverDeliveryMethod);
  }
  #[inline]
  pub fn add_fuelOn(&mut self, fuelOn: f64) {
    self.fbb_.push_slot::<f64>(AirEventReceivers_Full::VT_FUELON, fuelOn, 0.0);
  }
  #[inline]
  pub fn add_receiverCellPosition(&mut self, receiverCellPosition: i32) {
    self.fbb_.push_slot::<i32>(AirEventReceivers_Full::VT_RECEIVERCELLPOSITION, receiverCellPosition, 0);
  }
  #[inline]
  pub fn add_sequenceNum(&mut self, sequenceNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_SEQUENCENUM, sequenceNum);
  }
  #[inline]
  pub fn add_recOrg(&mut self, recOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECORG, recOrg);
  }
  #[inline]
  pub fn add_numRecAircraft(&mut self, numRecAircraft: i32) {
    self.fbb_.push_slot::<i32>(AirEventReceivers_Full::VT_NUMRECAIRCRAFT, numRecAircraft, 0);
  }
  #[inline]
  pub fn add_receiverFuelType(&mut self, receiverFuelType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVERFUELTYPE, receiverFuelType);
  }
  #[inline]
  pub fn add_receiverExercise(&mut self, receiverExercise: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_RECEIVEREXERCISE, receiverExercise);
  }
  #[inline]
  pub fn add_packageId(&mut self, packageId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirEventReceivers_Full::VT_PACKAGEID, packageId);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirEventReceivers_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirEventReceivers_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirEventReceivers_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirEventReceivers_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirEventReceivers_Full");
      ds.field("idReceiverSortie", &self.idReceiverSortie());
      ds.field("idReceiverMission", &self.idReceiverMission());
      ds.field("idReceiverAirfield", &self.idReceiverAirfield());
      ds.field("externalReceiverId", &self.externalReceiverId());
      ds.field("receiverCoord", &self.receiverCoord());
      ds.field("receiverMDS", &self.receiverMDS());
      ds.field("amcReceiverMissionId", &self.amcReceiverMissionId());
      ds.field("altReceiverMissionId", &self.altReceiverMissionId());
      ds.field("receiverCallSign", &self.receiverCallSign());
      ds.field("receiverOwner", &self.receiverOwner());
      ds.field("receiverPOC", &self.receiverPOC());
      ds.field("receiverLegNum", &self.receiverLegNum());
      ds.field("receiverDeployedICAO", &self.receiverDeployedICAO());
      ds.field("receiverDeliveryMethod", &self.receiverDeliveryMethod());
      ds.field("fuelOn", &self.fuelOn());
      ds.field("receiverCellPosition", &self.receiverCellPosition());
      ds.field("sequenceNum", &self.sequenceNum());
      ds.field("recOrg", &self.recOrg());
      ds.field("numRecAircraft", &self.numRecAircraft());
      ds.field("receiverFuelType", &self.receiverFuelType());
      ds.field("receiverExercise", &self.receiverExercise());
      ds.field("packageId", &self.packageId());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirEventReceivers_FullT {
  pub idReceiverSortie: Option<String>,
  pub idReceiverMission: Option<String>,
  pub idReceiverAirfield: Option<String>,
  pub externalReceiverId: Option<String>,
  pub receiverCoord: Option<String>,
  pub receiverMDS: Option<String>,
  pub amcReceiverMissionId: Option<String>,
  pub altReceiverMissionId: Option<String>,
  pub receiverCallSign: Option<String>,
  pub receiverOwner: Option<String>,
  pub receiverPOC: Option<String>,
  pub receiverLegNum: i32,
  pub receiverDeployedICAO: Option<String>,
  pub receiverDeliveryMethod: Option<String>,
  pub fuelOn: f64,
  pub receiverCellPosition: i32,
  pub sequenceNum: Option<String>,
  pub recOrg: Option<String>,
  pub numRecAircraft: i32,
  pub receiverFuelType: Option<String>,
  pub receiverExercise: Option<String>,
  pub packageId: Option<String>,
}
impl Default for AirEventReceivers_FullT {
  fn default() -> Self {
    Self {
      idReceiverSortie: None,
      idReceiverMission: None,
      idReceiverAirfield: None,
      externalReceiverId: None,
      receiverCoord: None,
      receiverMDS: None,
      amcReceiverMissionId: None,
      altReceiverMissionId: None,
      receiverCallSign: None,
      receiverOwner: None,
      receiverPOC: None,
      receiverLegNum: 0,
      receiverDeployedICAO: None,
      receiverDeliveryMethod: None,
      fuelOn: 0.0,
      receiverCellPosition: 0,
      sequenceNum: None,
      recOrg: None,
      numRecAircraft: 0,
      receiverFuelType: None,
      receiverExercise: None,
      packageId: None,
    }
  }
}
impl AirEventReceivers_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirEventReceivers_Full<'b>> {
    let idReceiverSortie = self.idReceiverSortie.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idReceiverMission = self.idReceiverMission.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idReceiverAirfield = self.idReceiverAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalReceiverId = self.externalReceiverId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverCoord = self.receiverCoord.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverMDS = self.receiverMDS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let amcReceiverMissionId = self.amcReceiverMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altReceiverMissionId = self.altReceiverMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverCallSign = self.receiverCallSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverOwner = self.receiverOwner.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverPOC = self.receiverPOC.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverLegNum = self.receiverLegNum;
    let receiverDeployedICAO = self.receiverDeployedICAO.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverDeliveryMethod = self.receiverDeliveryMethod.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fuelOn = self.fuelOn;
    let receiverCellPosition = self.receiverCellPosition;
    let sequenceNum = self.sequenceNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let recOrg = self.recOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numRecAircraft = self.numRecAircraft;
    let receiverFuelType = self.receiverFuelType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverExercise = self.receiverExercise.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let packageId = self.packageId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AirEventReceivers_Full::create(_fbb, &AirEventReceivers_FullArgs{
      idReceiverSortie,
      idReceiverMission,
      idReceiverAirfield,
      externalReceiverId,
      receiverCoord,
      receiverMDS,
      amcReceiverMissionId,
      altReceiverMissionId,
      receiverCallSign,
      receiverOwner,
      receiverPOC,
      receiverLegNum,
      receiverDeployedICAO,
      receiverDeliveryMethod,
      fuelOn,
      receiverCellPosition,
      sequenceNum,
      recOrg,
      numRecAircraft,
      receiverFuelType,
      receiverExercise,
      packageId,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirEventReceivers_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_event_receivers_full_unchecked`.
pub fn root_as_air_event_receivers_full(buf: &[u8]) -> Result<AirEventReceivers_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirEventReceivers_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirEventReceivers_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_air_event_receivers_full_unchecked`.
pub fn size_prefixed_root_as_air_event_receivers_full(buf: &[u8]) -> Result<AirEventReceivers_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirEventReceivers_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirEventReceivers_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_event_receivers_full_unchecked`.
pub fn root_as_air_event_receivers_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirEventReceivers_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirEventReceivers_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirEventReceivers_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_air_event_receivers_full_unchecked`.
pub fn size_prefixed_root_as_air_event_receivers_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirEventReceivers_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirEventReceivers_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirEventReceivers_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirEventReceivers_Full`.
pub unsafe fn root_as_air_event_receivers_full_unchecked(buf: &[u8]) -> AirEventReceivers_Full {
  flatbuffers::root_unchecked::<AirEventReceivers_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirEventReceivers_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirEventReceivers_Full`.
pub unsafe fn size_prefixed_root_as_air_event_receivers_full_unchecked(buf: &[u8]) -> AirEventReceivers_Full {
  flatbuffers::size_prefixed_root_unchecked::<AirEventReceivers_Full>(buf)
}
pub const AIR_EVENT_RECEIVERS_FULL_IDENTIFIER: &str = "AIRE";

#[inline]
pub fn air_event_receivers_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_EVENT_RECEIVERS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn air_event_receivers_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIR_EVENT_RECEIVERS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_air_event_receivers_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirEventReceivers_Full<'a>>) {
  fbb.finish(root, Some(AIR_EVENT_RECEIVERS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_air_event_receivers_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirEventReceivers_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIR_EVENT_RECEIVERS_FULL_IDENTIFIER));
}
