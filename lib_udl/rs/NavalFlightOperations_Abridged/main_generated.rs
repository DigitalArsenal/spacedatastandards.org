// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum NavalFlightOperations_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection that specifies the naval flight operations for this ATO.
pub struct NavalFlightOperations_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NavalFlightOperations_Abridged<'a> {
  type Inner = NavalFlightOperations_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NavalFlightOperations_Abridged<'a> {
  pub const VT_SHIPNAME: flatbuffers::VOffsetT = 4;
  pub const VT_FLTOPSTART: flatbuffers::VOffsetT = 6;
  pub const VT_FLTOPSTOP: flatbuffers::VOffsetT = 8;
  pub const VT_SCHDLAUNCHRCVYTIME: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NavalFlightOperations_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NavalFlightOperations_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<NavalFlightOperations_Abridged<'bldr>> {
    let mut builder = NavalFlightOperations_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.schdLaunchRcvyTime { builder.add_schdLaunchRcvyTime(x); }
    if let Some(x) = args.fltOpStop { builder.add_fltOpStop(x); }
    if let Some(x) = args.fltOpStart { builder.add_fltOpStart(x); }
    if let Some(x) = args.shipName { builder.add_shipName(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> NavalFlightOperations_AbridgedT {
    let shipName = self.shipName().map(|x| {
      x.to_string()
    });
    let fltOpStart = self.fltOpStart().map(|x| {
      x.to_string()
    });
    let fltOpStop = self.fltOpStop().map(|x| {
      x.to_string()
    });
    let schdLaunchRcvyTime = self.schdLaunchRcvyTime().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    NavalFlightOperations_AbridgedT {
      shipName,
      fltOpStart,
      fltOpStop,
      schdLaunchRcvyTime,
    }
  }

  /// The name of a ship or maritime vessel. Specify UNKNOWN if name is not known.
  /// Example: /// Example: USS WASP
  /// Constraints: Minimum length = 1, Maximum length = 48
  #[inline]
  pub fn shipName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavalFlightOperations_Abridged::VT_SHIPNAME, None)}
  }
  /// The time when flight operations begin in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-02-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fltOpStart(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavalFlightOperations_Abridged::VT_FLTOPSTART, None)}
  }
  /// The time when flight operations end in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-02-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fltOpStop(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavalFlightOperations_Abridged::VT_FLTOPSTOP, None)}
  }
  /// An array of times at which an aircraft will be launched and/or recovered in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: ['2021-02-25T12:00:00.123Z']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn schdLaunchRcvyTime(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(NavalFlightOperations_Abridged::VT_SCHDLAUNCHRCVYTIME, None)}
  }
}

impl flatbuffers::Verifiable for NavalFlightOperations_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shipName", Self::VT_SHIPNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fltOpStart", Self::VT_FLTOPSTART, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fltOpStop", Self::VT_FLTOPSTOP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("schdLaunchRcvyTime", Self::VT_SCHDLAUNCHRCVYTIME, false)?
     .finish();
    Ok(())
  }
}
pub struct NavalFlightOperations_AbridgedArgs<'a> {
    pub shipName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fltOpStart: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fltOpStop: Option<flatbuffers::WIPOffset<&'a str>>,
    pub schdLaunchRcvyTime: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for NavalFlightOperations_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    NavalFlightOperations_AbridgedArgs {
      shipName: None,
      fltOpStart: None,
      fltOpStop: None,
      schdLaunchRcvyTime: None,
    }
  }
}

pub struct NavalFlightOperations_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NavalFlightOperations_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_shipName(&mut self, shipName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavalFlightOperations_Abridged::VT_SHIPNAME, shipName);
  }
  #[inline]
  pub fn add_fltOpStart(&mut self, fltOpStart: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavalFlightOperations_Abridged::VT_FLTOPSTART, fltOpStart);
  }
  #[inline]
  pub fn add_fltOpStop(&mut self, fltOpStop: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavalFlightOperations_Abridged::VT_FLTOPSTOP, fltOpStop);
  }
  #[inline]
  pub fn add_schdLaunchRcvyTime(&mut self, schdLaunchRcvyTime: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavalFlightOperations_Abridged::VT_SCHDLAUNCHRCVYTIME, schdLaunchRcvyTime);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NavalFlightOperations_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NavalFlightOperations_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NavalFlightOperations_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NavalFlightOperations_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NavalFlightOperations_Abridged");
      ds.field("shipName", &self.shipName());
      ds.field("fltOpStart", &self.fltOpStart());
      ds.field("fltOpStop", &self.fltOpStop());
      ds.field("schdLaunchRcvyTime", &self.schdLaunchRcvyTime());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct NavalFlightOperations_AbridgedT {
  pub shipName: Option<String>,
  pub fltOpStart: Option<String>,
  pub fltOpStop: Option<String>,
  pub schdLaunchRcvyTime: Option<Vec<String>>,
}
impl Default for NavalFlightOperations_AbridgedT {
  fn default() -> Self {
    Self {
      shipName: None,
      fltOpStart: None,
      fltOpStop: None,
      schdLaunchRcvyTime: None,
    }
  }
}
impl NavalFlightOperations_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<NavalFlightOperations_Abridged<'b>> {
    let shipName = self.shipName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fltOpStart = self.fltOpStart.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fltOpStop = self.fltOpStop.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let schdLaunchRcvyTime = self.schdLaunchRcvyTime.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    NavalFlightOperations_Abridged::create(_fbb, &NavalFlightOperations_AbridgedArgs{
      shipName,
      fltOpStart,
      fltOpStop,
      schdLaunchRcvyTime,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `NavalFlightOperations_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_naval_flight_operations_abridged_unchecked`.
pub fn root_as_naval_flight_operations_abridged(buf: &[u8]) -> Result<NavalFlightOperations_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<NavalFlightOperations_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `NavalFlightOperations_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_naval_flight_operations_abridged_unchecked`.
pub fn size_prefixed_root_as_naval_flight_operations_abridged(buf: &[u8]) -> Result<NavalFlightOperations_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<NavalFlightOperations_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `NavalFlightOperations_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_naval_flight_operations_abridged_unchecked`.
pub fn root_as_naval_flight_operations_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NavalFlightOperations_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<NavalFlightOperations_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `NavalFlightOperations_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_naval_flight_operations_abridged_unchecked`.
pub fn size_prefixed_root_as_naval_flight_operations_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NavalFlightOperations_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<NavalFlightOperations_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a NavalFlightOperations_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `NavalFlightOperations_Abridged`.
pub unsafe fn root_as_naval_flight_operations_abridged_unchecked(buf: &[u8]) -> NavalFlightOperations_Abridged {
  flatbuffers::root_unchecked::<NavalFlightOperations_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed NavalFlightOperations_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `NavalFlightOperations_Abridged`.
pub unsafe fn size_prefixed_root_as_naval_flight_operations_abridged_unchecked(buf: &[u8]) -> NavalFlightOperations_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<NavalFlightOperations_Abridged>(buf)
}
pub const NAVAL_FLIGHT_OPERATIONS_ABRIDGED_IDENTIFIER: &str = "NAVA";

#[inline]
pub fn naval_flight_operations_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, NAVAL_FLIGHT_OPERATIONS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn naval_flight_operations_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, NAVAL_FLIGHT_OPERATIONS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_naval_flight_operations_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<NavalFlightOperations_Abridged<'a>>) {
  fbb.finish(root, Some(NAVAL_FLIGHT_OPERATIONS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_naval_flight_operations_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<NavalFlightOperations_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(NAVAL_FLIGHT_OPERATIONS_ABRIDGED_IDENTIFIER));
}
