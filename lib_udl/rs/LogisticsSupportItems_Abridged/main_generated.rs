// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum LogisticsSupportItems_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Support items associated with this LogisticsSupport record.
pub struct LogisticsSupportItems_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LogisticsSupportItems_Abridged<'a> {
  type Inner = LogisticsSupportItems_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LogisticsSupportItems_Abridged<'a> {
  pub const VT_RECOVERYREQUESTTYPECODE: flatbuffers::VOffsetT = 4;
  pub const VT_REQUESTNUMBER: flatbuffers::VOffsetT = 6;
  pub const VT_QUANTITY: flatbuffers::VOffsetT = 8;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 10;
  pub const VT_SHIPMENTUNITID: flatbuffers::VOffsetT = 12;
  pub const VT_REDEPLOYSHIPMENTUNITID: flatbuffers::VOffsetT = 14;
  pub const VT_JOBCONTROLNUMBER: flatbuffers::VOffsetT = 16;
  pub const VT_SOURCEICAO: flatbuffers::VOffsetT = 18;
  pub const VT_DEPLOYPLANNUMBER: flatbuffers::VOffsetT = 20;
  pub const VT_REDEPLOYPLANNUMBER: flatbuffers::VOffsetT = 22;
  pub const VT_CANNIBALIZED: flatbuffers::VOffsetT = 24;
  pub const VT_SIPOC: flatbuffers::VOffsetT = 26;
  pub const VT_READYTIME: flatbuffers::VOffsetT = 28;
  pub const VT_RECEIVEDTIME: flatbuffers::VOffsetT = 30;
  pub const VT_RESUPPORTFLAG: flatbuffers::VOffsetT = 32;
  pub const VT_ITEMLASTCHANGEDDATE: flatbuffers::VOffsetT = 34;
  pub const VT_LOGISTICSPARTS: flatbuffers::VOffsetT = 36;
  pub const VT_LOGISTICSSPECIALTIES: flatbuffers::VOffsetT = 38;
  pub const VT_LOGISTICSREMARKS: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LogisticsSupportItems_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogisticsSupportItems_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<LogisticsSupportItems_Abridged<'bldr>> {
    let mut builder = LogisticsSupportItems_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.logisticsRemarks { builder.add_logisticsRemarks(x); }
    if let Some(x) = args.logisticsSpecialties { builder.add_logisticsSpecialties(x); }
    if let Some(x) = args.logisticsParts { builder.add_logisticsParts(x); }
    if let Some(x) = args.itemLastChangedDate { builder.add_itemLastChangedDate(x); }
    if let Some(x) = args.receivedTime { builder.add_receivedTime(x); }
    if let Some(x) = args.readyTime { builder.add_readyTime(x); }
    if let Some(x) = args.siPOC { builder.add_siPOC(x); }
    if let Some(x) = args.redeployPlanNumber { builder.add_redeployPlanNumber(x); }
    if let Some(x) = args.deployPlanNumber { builder.add_deployPlanNumber(x); }
    if let Some(x) = args.sourceICAO { builder.add_sourceICAO(x); }
    if let Some(x) = args.jobControlNumber { builder.add_jobControlNumber(x); }
    if let Some(x) = args.redeployShipmentUnitId { builder.add_redeployShipmentUnitId(x); }
    if let Some(x) = args.shipmentUnitId { builder.add_shipmentUnitId(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    builder.add_quantity(args.quantity);
    if let Some(x) = args.requestNumber { builder.add_requestNumber(x); }
    if let Some(x) = args.recoveryRequestTypeCode { builder.add_recoveryRequestTypeCode(x); }
    builder.add_resupportFlag(args.resupportFlag);
    builder.add_cannibalized(args.cannibalized);
    builder.finish()
  }

  pub fn unpack(&self) -> LogisticsSupportItems_AbridgedT {
    let recoveryRequestTypeCode = self.recoveryRequestTypeCode().map(|x| {
      x.to_string()
    });
    let requestNumber = self.requestNumber().map(|x| {
      x.to_string()
    });
    let quantity = self.quantity();
    let description = self.description().map(|x| {
      x.to_string()
    });
    let shipmentUnitId = self.shipmentUnitId().map(|x| {
      x.to_string()
    });
    let redeployShipmentUnitId = self.redeployShipmentUnitId().map(|x| {
      x.to_string()
    });
    let jobControlNumber = self.jobControlNumber().map(|x| {
      x.to_string()
    });
    let sourceICAO = self.sourceICAO().map(|x| {
      x.to_string()
    });
    let deployPlanNumber = self.deployPlanNumber().map(|x| {
      x.to_string()
    });
    let redeployPlanNumber = self.redeployPlanNumber().map(|x| {
      x.to_string()
    });
    let cannibalized = self.cannibalized();
    let siPOC = self.siPOC().map(|x| {
      x.to_string()
    });
    let readyTime = self.readyTime().map(|x| {
      x.to_string()
    });
    let receivedTime = self.receivedTime().map(|x| {
      x.to_string()
    });
    let resupportFlag = self.resupportFlag();
    let itemLastChangedDate = self.itemLastChangedDate().map(|x| {
      x.to_string()
    });
    let logisticsParts = self.logisticsParts().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let logisticsSpecialties = self.logisticsSpecialties().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let logisticsRemarks = self.logisticsRemarks().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    LogisticsSupportItems_AbridgedT {
      recoveryRequestTypeCode,
      requestNumber,
      quantity,
      description,
      shipmentUnitId,
      redeployShipmentUnitId,
      jobControlNumber,
      sourceICAO,
      deployPlanNumber,
      redeployPlanNumber,
      cannibalized,
      siPOC,
      readyTime,
      receivedTime,
      resupportFlag,
      itemLastChangedDate,
      logisticsParts,
      logisticsSpecialties,
      logisticsRemarks,
    }
  }

  /// The type of recovery request needed. Contact the source provider for details.
  /// Example: /// Example: E
  /// Constraints: Minimum length = 1, Maximum length = 1
  #[inline]
  pub fn recoveryRequestTypeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_RECOVERYREQUESTTYPECODE, None)}
  }
  /// The request or record number for this item type (Equipent, Part, or MRT).
  /// Example: /// Example: 89208
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn requestNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_REQUESTNUMBER, None)}
  }
  /// Military aircraft discrepancy logistics requisition ordered quantity. The quantity of equipment ordered that is required to fix the aircraft.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn quantity(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LogisticsSupportItems_Abridged::VT_QUANTITY, Some(0)).unwrap()}
  }
  /// The technical order name of the part ordered.
  /// Example: /// Example: HOIST ADAPTER KIT
  /// Constraints: Minimum length = 0, Maximum length = 150
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_DESCRIPTION, None)}
  }
  /// Shipment Unit Identifier is the Transportation Control Number (TCN) for shipping that piece of equipment being requested.
  /// Example: /// Example: FB44273196X501XXX
  /// Constraints: Minimum length = 0, Maximum length = 17
  #[inline]
  pub fn shipmentUnitId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_SHIPMENTUNITID, None)}
  }
  /// This is the Redeploy (return) Transportation Control Number/Tracking Reference Number for the selected item.
  /// Example: /// Example: X400LA31949108
  /// Constraints: Minimum length = 0, Maximum length = 17
  #[inline]
  pub fn redeployShipmentUnitId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_REDEPLOYSHIPMENTUNITID, None)}
  }
  /// A number assigned by Job Control to monitor and record maintenance actions required to correct the associated aircraft maintenance discrepancy.  It is seven, nine or twelve characters, depending on the base-specific numbering scheme.  If seven characters: characters 1-3 are Julian date, 4-7 are sequence numbers.  If nine characters: characters 1-2 are last two digits of the year, characters 3-5 are Julian date, 6-9 are sequence numbers.  If twelve characters: characters 1-2 are last two digits of the year, 3-5 are Julian date, 6-9 are sequence numbers, and 10-12 are a three-digit supplemental number.
  /// Example: /// Example: 231942400
  /// Constraints: Minimum length = 0, Maximum length = 12
  #[inline]
  pub fn jobControlNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_JOBCONTROLNUMBER, None)}
  }
  /// The code that represents the International Civil Aviation Organization (ICAO) designations of an airport.
  /// Example: /// Example: PHIK
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn sourceICAO(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_SOURCEICAO, None)}
  }
  /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  /// Example: /// Example: T89003
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn deployPlanNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_DEPLOYPLANNUMBER, None)}
  }
  /// System generated reference id for the transportation plan.  Format: TXXXXXNNNN  T - Transportation, Sequence Number, Node Id.
  /// Example: /// Example: T89003
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn redeployPlanNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_REDEPLOYPLANNUMBER, None)}
  }
  /// This element indicates whether or not the supplied item is contained within another item.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cannibalized(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LogisticsSupportItems_Abridged::VT_CANNIBALIZED, Some(false)).unwrap()}
  }
  /// The point of contact is a free text field to add information about the individual(s) with knowledge of the referenced requested or supplied item(s). The default value for this field is the last name, first name, and middle initial of the operator who created the records and/or generated the transaction.
  /// Example: /// Example: SMITH, JOHN J
  /// Constraints: Minimum length = 0, Maximum length = 68
  #[inline]
  pub fn siPOC(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_SIPOC, None)}
  }
  /// The time the item is ready, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:04:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn readyTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_READYTIME, None)}
  }
  /// The time the item is received, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:04:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn receivedTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_RECEIVEDTIME, None)}
  }
  /// This element indicates if the supplied item is characterized as additional support.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn resupportFlag(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(LogisticsSupportItems_Abridged::VT_RESUPPORTFLAG, Some(false)).unwrap()}
  }
  /// The last time this supported item was updated, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T19:04:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn itemLastChangedDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsSupportItems_Abridged::VT_ITEMLASTCHANGEDDATE, None)}
  }
  /// The parts associated with this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn logisticsParts(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LogisticsSupportItems_Abridged::VT_LOGISTICSPARTS, None)}
  }
  /// The specialties required to implement this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn logisticsSpecialties(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LogisticsSupportItems_Abridged::VT_LOGISTICSSPECIALTIES, None)}
  }
  /// Remarks associated with this support item.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn logisticsRemarks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LogisticsSupportItems_Abridged::VT_LOGISTICSREMARKS, None)}
  }
}

impl flatbuffers::Verifiable for LogisticsSupportItems_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("recoveryRequestTypeCode", Self::VT_RECOVERYREQUESTTYPECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("requestNumber", Self::VT_REQUESTNUMBER, false)?
     .visit_field::<i32>("quantity", Self::VT_QUANTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shipmentUnitId", Self::VT_SHIPMENTUNITID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("redeployShipmentUnitId", Self::VT_REDEPLOYSHIPMENTUNITID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("jobControlNumber", Self::VT_JOBCONTROLNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceICAO", Self::VT_SOURCEICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("deployPlanNumber", Self::VT_DEPLOYPLANNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("redeployPlanNumber", Self::VT_REDEPLOYPLANNUMBER, false)?
     .visit_field::<bool>("cannibalized", Self::VT_CANNIBALIZED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("siPOC", Self::VT_SIPOC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("readyTime", Self::VT_READYTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receivedTime", Self::VT_RECEIVEDTIME, false)?
     .visit_field::<bool>("resupportFlag", Self::VT_RESUPPORTFLAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("itemLastChangedDate", Self::VT_ITEMLASTCHANGEDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("logisticsParts", Self::VT_LOGISTICSPARTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("logisticsSpecialties", Self::VT_LOGISTICSSPECIALTIES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("logisticsRemarks", Self::VT_LOGISTICSREMARKS, false)?
     .finish();
    Ok(())
  }
}
pub struct LogisticsSupportItems_AbridgedArgs<'a> {
    pub recoveryRequestTypeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub requestNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub quantity: i32,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub shipmentUnitId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub redeployShipmentUnitId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub jobControlNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceICAO: Option<flatbuffers::WIPOffset<&'a str>>,
    pub deployPlanNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub redeployPlanNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cannibalized: bool,
    pub siPOC: Option<flatbuffers::WIPOffset<&'a str>>,
    pub readyTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receivedTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resupportFlag: bool,
    pub itemLastChangedDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub logisticsParts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub logisticsSpecialties: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub logisticsRemarks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for LogisticsSupportItems_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogisticsSupportItems_AbridgedArgs {
      recoveryRequestTypeCode: None,
      requestNumber: None,
      quantity: 0,
      description: None,
      shipmentUnitId: None,
      redeployShipmentUnitId: None,
      jobControlNumber: None,
      sourceICAO: None,
      deployPlanNumber: None,
      redeployPlanNumber: None,
      cannibalized: false,
      siPOC: None,
      readyTime: None,
      receivedTime: None,
      resupportFlag: false,
      itemLastChangedDate: None,
      logisticsParts: None,
      logisticsSpecialties: None,
      logisticsRemarks: None,
    }
  }
}

pub struct LogisticsSupportItems_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogisticsSupportItems_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_recoveryRequestTypeCode(&mut self, recoveryRequestTypeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_RECOVERYREQUESTTYPECODE, recoveryRequestTypeCode);
  }
  #[inline]
  pub fn add_requestNumber(&mut self, requestNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_REQUESTNUMBER, requestNumber);
  }
  #[inline]
  pub fn add_quantity(&mut self, quantity: i32) {
    self.fbb_.push_slot::<i32>(LogisticsSupportItems_Abridged::VT_QUANTITY, quantity, 0);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_shipmentUnitId(&mut self, shipmentUnitId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_SHIPMENTUNITID, shipmentUnitId);
  }
  #[inline]
  pub fn add_redeployShipmentUnitId(&mut self, redeployShipmentUnitId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_REDEPLOYSHIPMENTUNITID, redeployShipmentUnitId);
  }
  #[inline]
  pub fn add_jobControlNumber(&mut self, jobControlNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_JOBCONTROLNUMBER, jobControlNumber);
  }
  #[inline]
  pub fn add_sourceICAO(&mut self, sourceICAO: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_SOURCEICAO, sourceICAO);
  }
  #[inline]
  pub fn add_deployPlanNumber(&mut self, deployPlanNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_DEPLOYPLANNUMBER, deployPlanNumber);
  }
  #[inline]
  pub fn add_redeployPlanNumber(&mut self, redeployPlanNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_REDEPLOYPLANNUMBER, redeployPlanNumber);
  }
  #[inline]
  pub fn add_cannibalized(&mut self, cannibalized: bool) {
    self.fbb_.push_slot::<bool>(LogisticsSupportItems_Abridged::VT_CANNIBALIZED, cannibalized, false);
  }
  #[inline]
  pub fn add_siPOC(&mut self, siPOC: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_SIPOC, siPOC);
  }
  #[inline]
  pub fn add_readyTime(&mut self, readyTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_READYTIME, readyTime);
  }
  #[inline]
  pub fn add_receivedTime(&mut self, receivedTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_RECEIVEDTIME, receivedTime);
  }
  #[inline]
  pub fn add_resupportFlag(&mut self, resupportFlag: bool) {
    self.fbb_.push_slot::<bool>(LogisticsSupportItems_Abridged::VT_RESUPPORTFLAG, resupportFlag, false);
  }
  #[inline]
  pub fn add_itemLastChangedDate(&mut self, itemLastChangedDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_ITEMLASTCHANGEDDATE, itemLastChangedDate);
  }
  #[inline]
  pub fn add_logisticsParts(&mut self, logisticsParts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_LOGISTICSPARTS, logisticsParts);
  }
  #[inline]
  pub fn add_logisticsSpecialties(&mut self, logisticsSpecialties: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_LOGISTICSSPECIALTIES, logisticsSpecialties);
  }
  #[inline]
  pub fn add_logisticsRemarks(&mut self, logisticsRemarks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsSupportItems_Abridged::VT_LOGISTICSREMARKS, logisticsRemarks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogisticsSupportItems_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogisticsSupportItems_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LogisticsSupportItems_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LogisticsSupportItems_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LogisticsSupportItems_Abridged");
      ds.field("recoveryRequestTypeCode", &self.recoveryRequestTypeCode());
      ds.field("requestNumber", &self.requestNumber());
      ds.field("quantity", &self.quantity());
      ds.field("description", &self.description());
      ds.field("shipmentUnitId", &self.shipmentUnitId());
      ds.field("redeployShipmentUnitId", &self.redeployShipmentUnitId());
      ds.field("jobControlNumber", &self.jobControlNumber());
      ds.field("sourceICAO", &self.sourceICAO());
      ds.field("deployPlanNumber", &self.deployPlanNumber());
      ds.field("redeployPlanNumber", &self.redeployPlanNumber());
      ds.field("cannibalized", &self.cannibalized());
      ds.field("siPOC", &self.siPOC());
      ds.field("readyTime", &self.readyTime());
      ds.field("receivedTime", &self.receivedTime());
      ds.field("resupportFlag", &self.resupportFlag());
      ds.field("itemLastChangedDate", &self.itemLastChangedDate());
      ds.field("logisticsParts", &self.logisticsParts());
      ds.field("logisticsSpecialties", &self.logisticsSpecialties());
      ds.field("logisticsRemarks", &self.logisticsRemarks());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LogisticsSupportItems_AbridgedT {
  pub recoveryRequestTypeCode: Option<String>,
  pub requestNumber: Option<String>,
  pub quantity: i32,
  pub description: Option<String>,
  pub shipmentUnitId: Option<String>,
  pub redeployShipmentUnitId: Option<String>,
  pub jobControlNumber: Option<String>,
  pub sourceICAO: Option<String>,
  pub deployPlanNumber: Option<String>,
  pub redeployPlanNumber: Option<String>,
  pub cannibalized: bool,
  pub siPOC: Option<String>,
  pub readyTime: Option<String>,
  pub receivedTime: Option<String>,
  pub resupportFlag: bool,
  pub itemLastChangedDate: Option<String>,
  pub logisticsParts: Option<Vec<String>>,
  pub logisticsSpecialties: Option<Vec<String>>,
  pub logisticsRemarks: Option<Vec<String>>,
}
impl Default for LogisticsSupportItems_AbridgedT {
  fn default() -> Self {
    Self {
      recoveryRequestTypeCode: None,
      requestNumber: None,
      quantity: 0,
      description: None,
      shipmentUnitId: None,
      redeployShipmentUnitId: None,
      jobControlNumber: None,
      sourceICAO: None,
      deployPlanNumber: None,
      redeployPlanNumber: None,
      cannibalized: false,
      siPOC: None,
      readyTime: None,
      receivedTime: None,
      resupportFlag: false,
      itemLastChangedDate: None,
      logisticsParts: None,
      logisticsSpecialties: None,
      logisticsRemarks: None,
    }
  }
}
impl LogisticsSupportItems_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LogisticsSupportItems_Abridged<'b>> {
    let recoveryRequestTypeCode = self.recoveryRequestTypeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let requestNumber = self.requestNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let quantity = self.quantity;
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let shipmentUnitId = self.shipmentUnitId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let redeployShipmentUnitId = self.redeployShipmentUnitId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let jobControlNumber = self.jobControlNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceICAO = self.sourceICAO.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let deployPlanNumber = self.deployPlanNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let redeployPlanNumber = self.redeployPlanNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cannibalized = self.cannibalized;
    let siPOC = self.siPOC.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let readyTime = self.readyTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receivedTime = self.receivedTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let resupportFlag = self.resupportFlag;
    let itemLastChangedDate = self.itemLastChangedDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let logisticsParts = self.logisticsParts.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let logisticsSpecialties = self.logisticsSpecialties.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let logisticsRemarks = self.logisticsRemarks.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    LogisticsSupportItems_Abridged::create(_fbb, &LogisticsSupportItems_AbridgedArgs{
      recoveryRequestTypeCode,
      requestNumber,
      quantity,
      description,
      shipmentUnitId,
      redeployShipmentUnitId,
      jobControlNumber,
      sourceICAO,
      deployPlanNumber,
      redeployPlanNumber,
      cannibalized,
      siPOC,
      readyTime,
      receivedTime,
      resupportFlag,
      itemLastChangedDate,
      logisticsParts,
      logisticsSpecialties,
      logisticsRemarks,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LogisticsSupportItems_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_support_items_abridged_unchecked`.
pub fn root_as_logistics_support_items_abridged(buf: &[u8]) -> Result<LogisticsSupportItems_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LogisticsSupportItems_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LogisticsSupportItems_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_logistics_support_items_abridged_unchecked`.
pub fn size_prefixed_root_as_logistics_support_items_abridged(buf: &[u8]) -> Result<LogisticsSupportItems_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LogisticsSupportItems_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LogisticsSupportItems_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_support_items_abridged_unchecked`.
pub fn root_as_logistics_support_items_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsSupportItems_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LogisticsSupportItems_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LogisticsSupportItems_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_support_items_abridged_unchecked`.
pub fn size_prefixed_root_as_logistics_support_items_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsSupportItems_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LogisticsSupportItems_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LogisticsSupportItems_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LogisticsSupportItems_Abridged`.
pub unsafe fn root_as_logistics_support_items_abridged_unchecked(buf: &[u8]) -> LogisticsSupportItems_Abridged {
  flatbuffers::root_unchecked::<LogisticsSupportItems_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LogisticsSupportItems_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LogisticsSupportItems_Abridged`.
pub unsafe fn size_prefixed_root_as_logistics_support_items_abridged_unchecked(buf: &[u8]) -> LogisticsSupportItems_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<LogisticsSupportItems_Abridged>(buf)
}
pub const LOGISTICS_SUPPORT_ITEMS_ABRIDGED_IDENTIFIER: &str = "LOGI";

#[inline]
pub fn logistics_support_items_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_SUPPORT_ITEMS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn logistics_support_items_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_SUPPORT_ITEMS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_logistics_support_items_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LogisticsSupportItems_Abridged<'a>>) {
  fbb.finish(root, Some(LOGISTICS_SUPPORT_ITEMS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_logistics_support_items_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LogisticsSupportItems_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(LOGISTICS_SUPPORT_ITEMS_ABRIDGED_IDENTIFIER));
}
