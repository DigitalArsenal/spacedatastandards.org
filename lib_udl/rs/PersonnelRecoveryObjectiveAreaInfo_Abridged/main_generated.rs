// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PersonnelRecoveryObjectiveAreaInfo_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Objective Area Information.
pub struct PersonnelRecoveryObjectiveAreaInfo_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PersonnelRecoveryObjectiveAreaInfo_Abridged<'a> {
  type Inner = PersonnelRecoveryObjectiveAreaInfo_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PersonnelRecoveryObjectiveAreaInfo_Abridged<'a> {
  pub const VT_PZLOCATION: flatbuffers::VOffsetT = 4;
  pub const VT_PZDESC: flatbuffers::VOffsetT = 6;
  pub const VT_OSCCALLSIGN: flatbuffers::VOffsetT = 8;
  pub const VT_OSCFREQ: flatbuffers::VOffsetT = 10;
  pub const VT_ENEMYDATA: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PersonnelRecoveryObjectiveAreaInfo_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PersonnelRecoveryObjectiveAreaInfo_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryObjectiveAreaInfo_Abridged<'bldr>> {
    let mut builder = PersonnelRecoveryObjectiveAreaInfo_AbridgedBuilder::new(_fbb);
    builder.add_oscFreq(args.oscFreq);
    if let Some(x) = args.enemyData { builder.add_enemyData(x); }
    if let Some(x) = args.oscCallSign { builder.add_oscCallSign(x); }
    if let Some(x) = args.pzDesc { builder.add_pzDesc(x); }
    if let Some(x) = args.pzLocation { builder.add_pzLocation(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PersonnelRecoveryObjectiveAreaInfo_AbridgedT {
    let pzLocation = self.pzLocation().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let pzDesc = self.pzDesc().map(|x| {
      x.to_string()
    });
    let oscCallSign = self.oscCallSign().map(|x| {
      x.to_string()
    });
    let oscFreq = self.oscFreq();
    let enemyData = self.enemyData().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    PersonnelRecoveryObjectiveAreaInfo_AbridgedT {
      pzLocation,
      pzDesc,
      oscCallSign,
      oscFreq,
      enemyData,
    }
  }

  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the pz location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [103.23, 30.445]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pzLocation(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_PZLOCATION, None)}
  }
  /// Description of the pickup zone location.
  /// Example: /// Example: Near the lake.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn pzDesc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_PZDESC, None)}
  }
  /// The call sign of the on-scene commander.
  /// Example: /// Example: STARFOX
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn oscCallSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_OSCCALLSIGN, None)}
  }
  /// The radio frequency of the on-scene commander.
  /// Example: /// Example: 12.55
  /// Constraints: No constraints specified.
  #[inline]
  pub fn oscFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_OSCFREQ, Some(0.0)).unwrap()}
  }
  /// Information detailing knowledge of enemies in the area.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn enemyData(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_ENEMYDATA, None)}
  }
}

impl flatbuffers::Verifiable for PersonnelRecoveryObjectiveAreaInfo_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("pzLocation", Self::VT_PZLOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pzDesc", Self::VT_PZDESC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("oscCallSign", Self::VT_OSCCALLSIGN, false)?
     .visit_field::<f64>("oscFreq", Self::VT_OSCFREQ, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("enemyData", Self::VT_ENEMYDATA, false)?
     .finish();
    Ok(())
  }
}
pub struct PersonnelRecoveryObjectiveAreaInfo_AbridgedArgs<'a> {
    pub pzLocation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub pzDesc: Option<flatbuffers::WIPOffset<&'a str>>,
    pub oscCallSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub oscFreq: f64,
    pub enemyData: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for PersonnelRecoveryObjectiveAreaInfo_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    PersonnelRecoveryObjectiveAreaInfo_AbridgedArgs {
      pzLocation: None,
      pzDesc: None,
      oscCallSign: None,
      oscFreq: 0.0,
      enemyData: None,
    }
  }
}

pub struct PersonnelRecoveryObjectiveAreaInfo_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PersonnelRecoveryObjectiveAreaInfo_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_pzLocation(&mut self, pzLocation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_PZLOCATION, pzLocation);
  }
  #[inline]
  pub fn add_pzDesc(&mut self, pzDesc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_PZDESC, pzDesc);
  }
  #[inline]
  pub fn add_oscCallSign(&mut self, oscCallSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_OSCCALLSIGN, oscCallSign);
  }
  #[inline]
  pub fn add_oscFreq(&mut self, oscFreq: f64) {
    self.fbb_.push_slot::<f64>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_OSCFREQ, oscFreq, 0.0);
  }
  #[inline]
  pub fn add_enemyData(&mut self, enemyData: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryObjectiveAreaInfo_Abridged::VT_ENEMYDATA, enemyData);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PersonnelRecoveryObjectiveAreaInfo_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PersonnelRecoveryObjectiveAreaInfo_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PersonnelRecoveryObjectiveAreaInfo_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PersonnelRecoveryObjectiveAreaInfo_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PersonnelRecoveryObjectiveAreaInfo_Abridged");
      ds.field("pzLocation", &self.pzLocation());
      ds.field("pzDesc", &self.pzDesc());
      ds.field("oscCallSign", &self.oscCallSign());
      ds.field("oscFreq", &self.oscFreq());
      ds.field("enemyData", &self.enemyData());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PersonnelRecoveryObjectiveAreaInfo_AbridgedT {
  pub pzLocation: Option<Vec<String>>,
  pub pzDesc: Option<String>,
  pub oscCallSign: Option<String>,
  pub oscFreq: f64,
  pub enemyData: Option<Vec<String>>,
}
impl Default for PersonnelRecoveryObjectiveAreaInfo_AbridgedT {
  fn default() -> Self {
    Self {
      pzLocation: None,
      pzDesc: None,
      oscCallSign: None,
      oscFreq: 0.0,
      enemyData: None,
    }
  }
}
impl PersonnelRecoveryObjectiveAreaInfo_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryObjectiveAreaInfo_Abridged<'b>> {
    let pzLocation = self.pzLocation.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let pzDesc = self.pzDesc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let oscCallSign = self.oscCallSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let oscFreq = self.oscFreq;
    let enemyData = self.enemyData.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    PersonnelRecoveryObjectiveAreaInfo_Abridged::create(_fbb, &PersonnelRecoveryObjectiveAreaInfo_AbridgedArgs{
      pzLocation,
      pzDesc,
      oscCallSign,
      oscFreq,
      enemyData,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PersonnelRecoveryObjectiveAreaInfo_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_objective_area_info_abridged_unchecked`.
pub fn root_as_personnel_recovery_objective_area_info_abridged(buf: &[u8]) -> Result<PersonnelRecoveryObjectiveAreaInfo_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PersonnelRecoveryObjectiveAreaInfo_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PersonnelRecoveryObjectiveAreaInfo_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_personnel_recovery_objective_area_info_abridged_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_objective_area_info_abridged(buf: &[u8]) -> Result<PersonnelRecoveryObjectiveAreaInfo_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PersonnelRecoveryObjectiveAreaInfo_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PersonnelRecoveryObjectiveAreaInfo_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_objective_area_info_abridged_unchecked`.
pub fn root_as_personnel_recovery_objective_area_info_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryObjectiveAreaInfo_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PersonnelRecoveryObjectiveAreaInfo_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PersonnelRecoveryObjectiveAreaInfo_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_objective_area_info_abridged_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_objective_area_info_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryObjectiveAreaInfo_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PersonnelRecoveryObjectiveAreaInfo_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PersonnelRecoveryObjectiveAreaInfo_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PersonnelRecoveryObjectiveAreaInfo_Abridged`.
pub unsafe fn root_as_personnel_recovery_objective_area_info_abridged_unchecked(buf: &[u8]) -> PersonnelRecoveryObjectiveAreaInfo_Abridged {
  flatbuffers::root_unchecked::<PersonnelRecoveryObjectiveAreaInfo_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PersonnelRecoveryObjectiveAreaInfo_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PersonnelRecoveryObjectiveAreaInfo_Abridged`.
pub unsafe fn size_prefixed_root_as_personnel_recovery_objective_area_info_abridged_unchecked(buf: &[u8]) -> PersonnelRecoveryObjectiveAreaInfo_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<PersonnelRecoveryObjectiveAreaInfo_Abridged>(buf)
}
pub const PERSONNEL_RECOVERY_OBJECTIVE_AREA_INFO_ABRIDGED_IDENTIFIER: &str = "PERS";

#[inline]
pub fn personnel_recovery_objective_area_info_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_OBJECTIVE_AREA_INFO_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn personnel_recovery_objective_area_info_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_OBJECTIVE_AREA_INFO_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_personnel_recovery_objective_area_info_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PersonnelRecoveryObjectiveAreaInfo_Abridged<'a>>) {
  fbb.finish(root, Some(PERSONNEL_RECOVERY_OBJECTIVE_AREA_INFO_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_personnel_recovery_objective_area_info_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PersonnelRecoveryObjectiveAreaInfo_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(PERSONNEL_RECOVERY_OBJECTIVE_AREA_INFO_ABRIDGED_IDENTIFIER));
}
