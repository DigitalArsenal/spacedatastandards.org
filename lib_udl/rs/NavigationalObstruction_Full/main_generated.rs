// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_NAVIGATIONAL_OBSTRUCTION_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_NAVIGATIONAL_OBSTRUCTION_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_NAVIGATIONAL_OBSTRUCTION_FULL_DATA_MODE_ENUM: [NavigationalObstruction_Full_dataMode_Enum; 4] = [
  NavigationalObstruction_Full_dataMode_Enum::REAL,
  NavigationalObstruction_Full_dataMode_Enum::TEST,
  NavigationalObstruction_Full_dataMode_Enum::SIMULATED,
  NavigationalObstruction_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct NavigationalObstruction_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl NavigationalObstruction_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for NavigationalObstruction_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for NavigationalObstruction_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for NavigationalObstruction_Full_dataMode_Enum {
    type Output = NavigationalObstruction_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for NavigationalObstruction_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for NavigationalObstruction_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for NavigationalObstruction_Full_dataMode_Enum {}
pub enum NavigationalObstruction_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Beta Version Navigational Obstruction: Information describing navigational obstructions, such as applicable boundaries, locations, heights, data ownership, and currency.
pub struct NavigationalObstruction_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NavigationalObstruction_Full<'a> {
  type Inner = NavigationalObstruction_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NavigationalObstruction_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_CYCLEDATE: flatbuffers::VOffsetT = 8;
  pub const VT_OBSTACLETYPE: flatbuffers::VOffsetT = 10;
  pub const VT_OBSTACLEID: flatbuffers::VOffsetT = 12;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 14;
  pub const VT_ORIGID: flatbuffers::VOffsetT = 16;
  pub const VT_COUNTRYCODE: flatbuffers::VOffsetT = 18;
  pub const VT_PROVINCECODE: flatbuffers::VOffsetT = 20;
  pub const VT_POINTLAT: flatbuffers::VOffsetT = 22;
  pub const VT_POINTLON: flatbuffers::VOffsetT = 24;
  pub const VT_LINENELON: flatbuffers::VOffsetT = 26;
  pub const VT_LINENELAT: flatbuffers::VOffsetT = 28;
  pub const VT_LINESWLON: flatbuffers::VOffsetT = 30;
  pub const VT_LINESWLAT: flatbuffers::VOffsetT = 32;
  pub const VT_SEGSTARTPOINT: flatbuffers::VOffsetT = 34;
  pub const VT_SEGENDPOINT: flatbuffers::VOffsetT = 36;
  pub const VT_SEGNUM: flatbuffers::VOffsetT = 38;
  pub const VT_FACC: flatbuffers::VOffsetT = 40;
  pub const VT_FEATURECODE: flatbuffers::VOffsetT = 42;
  pub const VT_FEATURETYPE: flatbuffers::VOffsetT = 44;
  pub const VT_FEATURENAME: flatbuffers::VOffsetT = 46;
  pub const VT_FEATUREDESCRIPTION: flatbuffers::VOffsetT = 48;
  pub const VT_WAC: flatbuffers::VOffsetT = 50;
  pub const VT_WACINNR: flatbuffers::VOffsetT = 52;
  pub const VT_MULTOBS: flatbuffers::VOffsetT = 54;
  pub const VT_NUMOBS: flatbuffers::VOffsetT = 56;
  pub const VT_HORIZDATUMCODE: flatbuffers::VOffsetT = 58;
  pub const VT_HEIGHTAGL: flatbuffers::VOffsetT = 60;
  pub const VT_HEIGHTAGLACC: flatbuffers::VOffsetT = 62;
  pub const VT_HEIGHTMSL: flatbuffers::VOffsetT = 64;
  pub const VT_HEIGHTMSLACC: flatbuffers::VOffsetT = 66;
  pub const VT_ELEVATION: flatbuffers::VOffsetT = 68;
  pub const VT_ELEVATIONACC: flatbuffers::VOffsetT = 70;
  pub const VT_HORIZACC: flatbuffers::VOffsetT = 72;
  pub const VT_QUALITY: flatbuffers::VOffsetT = 74;
  pub const VT_LIGHTINGCODE: flatbuffers::VOffsetT = 76;
  pub const VT_SURFACEMATCODE: flatbuffers::VOffsetT = 78;
  pub const VT_DIRECTIVITYCODE: flatbuffers::VOffsetT = 80;
  pub const VT_VALIDATIONCODE: flatbuffers::VOffsetT = 82;
  pub const VT_TRANSACTIONCODE: flatbuffers::VOffsetT = 84;
  pub const VT_PROCESSCODE: flatbuffers::VOffsetT = 86;
  pub const VT_ACTDELCODE: flatbuffers::VOffsetT = 88;
  pub const VT_PRODUCER: flatbuffers::VOffsetT = 90;
  pub const VT_DERIVINGORG: flatbuffers::VOffsetT = 92;
  pub const VT_DELETINGORG: flatbuffers::VOffsetT = 94;
  pub const VT_SOURCEDATE: flatbuffers::VOffsetT = 96;
  pub const VT_REVDATE: flatbuffers::VOffsetT = 98;
  pub const VT_INITRECORDDATE: flatbuffers::VOffsetT = 100;
  pub const VT_KEYS: flatbuffers::VOffsetT = 102;
  pub const VT_VALUES: flatbuffers::VOffsetT = 104;
  pub const VT_OBSTACLEREMARKS: flatbuffers::VOffsetT = 106;
  pub const VT_NEXTCYCLEDATE: flatbuffers::VOffsetT = 108;
  pub const VT_BASELINECUTOFFDATE: flatbuffers::VOffsetT = 110;
  pub const VT_CUTOFFDATE: flatbuffers::VOffsetT = 112;
  pub const VT_AIRACCYCLE: flatbuffers::VOffsetT = 114;
  pub const VT_BASEAIRACCYCLE: flatbuffers::VOffsetT = 116;
  pub const VT_OWNERCOUNTRYCODE: flatbuffers::VOffsetT = 118;
  pub const VT_BOUNDNELON: flatbuffers::VOffsetT = 120;
  pub const VT_BOUNDNELAT: flatbuffers::VOffsetT = 122;
  pub const VT_BOUNDSWLON: flatbuffers::VOffsetT = 124;
  pub const VT_BOUNDSWLAT: flatbuffers::VOffsetT = 126;
  pub const VT_MINHEIGHTAGL: flatbuffers::VOffsetT = 128;
  pub const VT_NUMPOINTS: flatbuffers::VOffsetT = 130;
  pub const VT_NUMLINES: flatbuffers::VOffsetT = 132;
  pub const VT_DATASETREMARKS: flatbuffers::VOffsetT = 134;
  pub const VT_POINTSFILENAME: flatbuffers::VOffsetT = 136;
  pub const VT_LINESFILENAME: flatbuffers::VOffsetT = 138;
  pub const VT_VECTORSFILENAME: flatbuffers::VOffsetT = 140;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 142;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 144;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 146;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 148;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 150;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 152;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 154;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 156;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 158;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 160;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NavigationalObstruction_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args NavigationalObstruction_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<NavigationalObstruction_Full<'bldr>> {
    let mut builder = NavigationalObstruction_FullBuilder::new(_fbb);
    builder.add_minHeightAGL(args.minHeightAGL);
    builder.add_boundSWLat(args.boundSWLat);
    builder.add_boundSWLon(args.boundSWLon);
    builder.add_boundNELat(args.boundNELat);
    builder.add_boundNELon(args.boundNELon);
    builder.add_horizAcc(args.horizAcc);
    builder.add_elevationAcc(args.elevationAcc);
    builder.add_elevation(args.elevation);
    builder.add_heightMSLAcc(args.heightMSLAcc);
    builder.add_heightMSL(args.heightMSL);
    builder.add_heightAGLAcc(args.heightAGLAcc);
    builder.add_heightAGL(args.heightAGL);
    builder.add_lineSWLat(args.lineSWLat);
    builder.add_lineSWLon(args.lineSWLon);
    builder.add_lineNELat(args.lineNELat);
    builder.add_lineNELon(args.lineNELon);
    builder.add_pointLon(args.pointLon);
    builder.add_pointLat(args.pointLat);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    if let Some(x) = args.vectorsFilename { builder.add_vectorsFilename(x); }
    if let Some(x) = args.linesFilename { builder.add_linesFilename(x); }
    if let Some(x) = args.pointsFilename { builder.add_pointsFilename(x); }
    if let Some(x) = args.dataSetRemarks { builder.add_dataSetRemarks(x); }
    builder.add_numLines(args.numLines);
    builder.add_numPoints(args.numPoints);
    if let Some(x) = args.ownerCountryCode { builder.add_ownerCountryCode(x); }
    builder.add_baseAiracCycle(args.baseAiracCycle);
    builder.add_airacCycle(args.airacCycle);
    if let Some(x) = args.cutoffDate { builder.add_cutoffDate(x); }
    if let Some(x) = args.baselineCutoffDate { builder.add_baselineCutoffDate(x); }
    if let Some(x) = args.nextCycleDate { builder.add_nextCycleDate(x); }
    if let Some(x) = args.obstacleRemarks { builder.add_obstacleRemarks(x); }
    if let Some(x) = args.values { builder.add_values(x); }
    if let Some(x) = args.keys { builder.add_keys(x); }
    if let Some(x) = args.initRecordDate { builder.add_initRecordDate(x); }
    if let Some(x) = args.revDate { builder.add_revDate(x); }
    if let Some(x) = args.sourceDate { builder.add_sourceDate(x); }
    if let Some(x) = args.deletingOrg { builder.add_deletingOrg(x); }
    if let Some(x) = args.derivingOrg { builder.add_derivingOrg(x); }
    if let Some(x) = args.producer { builder.add_producer(x); }
    if let Some(x) = args.actDelCode { builder.add_actDelCode(x); }
    if let Some(x) = args.processCode { builder.add_processCode(x); }
    if let Some(x) = args.transactionCode { builder.add_transactionCode(x); }
    builder.add_validationCode(args.validationCode);
    builder.add_directivityCode(args.directivityCode);
    if let Some(x) = args.surfaceMatCode { builder.add_surfaceMatCode(x); }
    if let Some(x) = args.lightingCode { builder.add_lightingCode(x); }
    if let Some(x) = args.quality { builder.add_quality(x); }
    if let Some(x) = args.horizDatumCode { builder.add_horizDatumCode(x); }
    builder.add_numObs(args.numObs);
    if let Some(x) = args.multObs { builder.add_multObs(x); }
    if let Some(x) = args.wacINNR { builder.add_wacINNR(x); }
    if let Some(x) = args.wac { builder.add_wac(x); }
    if let Some(x) = args.featureDescription { builder.add_featureDescription(x); }
    if let Some(x) = args.featureName { builder.add_featureName(x); }
    if let Some(x) = args.featureType { builder.add_featureType(x); }
    if let Some(x) = args.featureCode { builder.add_featureCode(x); }
    if let Some(x) = args.facc { builder.add_facc(x); }
    builder.add_segNum(args.segNum);
    builder.add_segEndPoint(args.segEndPoint);
    builder.add_segStartPoint(args.segStartPoint);
    if let Some(x) = args.provinceCode { builder.add_provinceCode(x); }
    if let Some(x) = args.countryCode { builder.add_countryCode(x); }
    if let Some(x) = args.origId { builder.add_origId(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.obstacleId { builder.add_obstacleId(x); }
    if let Some(x) = args.obstacleType { builder.add_obstacleType(x); }
    if let Some(x) = args.cycleDate { builder.add_cycleDate(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> NavigationalObstruction_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let cycleDate = self.cycleDate().map(|x| {
      x.to_string()
    });
    let obstacleType = self.obstacleType().map(|x| {
      x.to_string()
    });
    let obstacleId = self.obstacleId().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let origId = self.origId().map(|x| {
      x.to_string()
    });
    let countryCode = self.countryCode().map(|x| {
      x.to_string()
    });
    let provinceCode = self.provinceCode().map(|x| {
      x.to_string()
    });
    let pointLat = self.pointLat();
    let pointLon = self.pointLon();
    let lineNELon = self.lineNELon();
    let lineNELat = self.lineNELat();
    let lineSWLon = self.lineSWLon();
    let lineSWLat = self.lineSWLat();
    let segStartPoint = self.segStartPoint();
    let segEndPoint = self.segEndPoint();
    let segNum = self.segNum();
    let facc = self.facc().map(|x| {
      x.to_string()
    });
    let featureCode = self.featureCode().map(|x| {
      x.to_string()
    });
    let featureType = self.featureType().map(|x| {
      x.to_string()
    });
    let featureName = self.featureName().map(|x| {
      x.to_string()
    });
    let featureDescription = self.featureDescription().map(|x| {
      x.to_string()
    });
    let wac = self.wac().map(|x| {
      x.to_string()
    });
    let wacINNR = self.wacINNR().map(|x| {
      x.to_string()
    });
    let multObs = self.multObs().map(|x| {
      x.to_string()
    });
    let numObs = self.numObs();
    let horizDatumCode = self.horizDatumCode().map(|x| {
      x.to_string()
    });
    let heightAGL = self.heightAGL();
    let heightAGLAcc = self.heightAGLAcc();
    let heightMSL = self.heightMSL();
    let heightMSLAcc = self.heightMSLAcc();
    let elevation = self.elevation();
    let elevationAcc = self.elevationAcc();
    let horizAcc = self.horizAcc();
    let quality = self.quality().map(|x| {
      x.to_string()
    });
    let lightingCode = self.lightingCode().map(|x| {
      x.to_string()
    });
    let surfaceMatCode = self.surfaceMatCode().map(|x| {
      x.to_string()
    });
    let directivityCode = self.directivityCode();
    let validationCode = self.validationCode();
    let transactionCode = self.transactionCode().map(|x| {
      x.to_string()
    });
    let processCode = self.processCode().map(|x| {
      x.to_string()
    });
    let actDelCode = self.actDelCode().map(|x| {
      x.to_string()
    });
    let producer = self.producer().map(|x| {
      x.to_string()
    });
    let derivingOrg = self.derivingOrg().map(|x| {
      x.to_string()
    });
    let deletingOrg = self.deletingOrg().map(|x| {
      x.to_string()
    });
    let sourceDate = self.sourceDate().map(|x| {
      x.to_string()
    });
    let revDate = self.revDate().map(|x| {
      x.to_string()
    });
    let initRecordDate = self.initRecordDate().map(|x| {
      x.to_string()
    });
    let keys = self.keys().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let values = self.values().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let obstacleRemarks = self.obstacleRemarks().map(|x| {
      x.to_string()
    });
    let nextCycleDate = self.nextCycleDate().map(|x| {
      x.to_string()
    });
    let baselineCutoffDate = self.baselineCutoffDate().map(|x| {
      x.to_string()
    });
    let cutoffDate = self.cutoffDate().map(|x| {
      x.to_string()
    });
    let airacCycle = self.airacCycle();
    let baseAiracCycle = self.baseAiracCycle();
    let ownerCountryCode = self.ownerCountryCode().map(|x| {
      x.to_string()
    });
    let boundNELon = self.boundNELon();
    let boundNELat = self.boundNELat();
    let boundSWLon = self.boundSWLon();
    let boundSWLat = self.boundSWLat();
    let minHeightAGL = self.minHeightAGL();
    let numPoints = self.numPoints();
    let numLines = self.numLines();
    let dataSetRemarks = self.dataSetRemarks().map(|x| {
      x.to_string()
    });
    let pointsFilename = self.pointsFilename().map(|x| {
      x.to_string()
    });
    let linesFilename = self.linesFilename().map(|x| {
      x.to_string()
    });
    let vectorsFilename = self.vectorsFilename().map(|x| {
      x.to_string()
    });
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    NavigationalObstruction_FullT {
      id,
      classificationMarking,
      cycleDate,
      obstacleType,
      obstacleId,
      externalId,
      origId,
      countryCode,
      provinceCode,
      pointLat,
      pointLon,
      lineNELon,
      lineNELat,
      lineSWLon,
      lineSWLat,
      segStartPoint,
      segEndPoint,
      segNum,
      facc,
      featureCode,
      featureType,
      featureName,
      featureDescription,
      wac,
      wacINNR,
      multObs,
      numObs,
      horizDatumCode,
      heightAGL,
      heightAGLAcc,
      heightMSL,
      heightMSLAcc,
      elevation,
      elevationAcc,
      horizAcc,
      quality,
      lightingCode,
      surfaceMatCode,
      directivityCode,
      validationCode,
      transactionCode,
      processCode,
      actDelCode,
      producer,
      derivingOrg,
      deletingOrg,
      sourceDate,
      revDate,
      initRecordDate,
      keys,
      values,
      obstacleRemarks,
      nextCycleDate,
      baselineCutoffDate,
      cutoffDate,
      airacCycle,
      baseAiracCycle,
      ownerCountryCode,
      boundNELon,
      boundNELat,
      boundSWLon,
      boundSWLat,
      minHeightAGL,
      numPoints,
      numLines,
      dataSetRemarks,
      pointsFilename,
      linesFilename,
      vectorsFilename,
      rawFileURI,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Start date of this obstruction data set's currency, in ISO 8601 date-only format.
  /// Example: /// Example: 2024-06-13
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cycleDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_CYCLEDATE, None)}
  }
  /// Type of obstacle (e.g. P for point, V for vector, L for line).
  /// Example: /// Example: V
  /// Constraints: Minimum length = 1, Maximum length = 1
  #[inline]
  pub fn obstacleType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_OBSTACLETYPE, None)}
  }
  /// The ID of this obstacle.
  /// Example: /// Example: 359655
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn obstacleId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_OBSTACLEID, None)}
  }
  /// Optional obstacle ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: OU812
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_EXTERNALID, None)}
  }
  /// The original ID for this obstacle.
  /// Example: /// Example: L0000002289
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_ORIGID, None)}
  }
  /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn countryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_COUNTRYCODE, None)}
  }
  /// The Federal Information Processing Standards (FIPS) state/province numeric code of this obstacle's location.
  /// Example: /// Example: 23
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn provinceCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_PROVINCECODE, None)}
  }
  /// WGS-84 latitude of this point obstacle, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 46.757211
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pointLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_POINTLAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of this point obstacle, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -67.759494
  /// Constraints: No constraints specified.
  #[inline]
  pub fn pointLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_POINTLON, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the northeastern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -122.197891
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lineNELon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_LINENELON, Some(0.0)).unwrap()}
  }
  /// WGS-84 latitude of the northeastern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 49.000584
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lineNELat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_LINENELAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the southwestern point of the line, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -122.722946
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lineSWLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_LINESWLON, Some(0.0)).unwrap()}
  }
  /// WGS-84 latitude of the southwestern point of the line, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 48.507027
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lineSWLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_LINESWLAT, Some(0.0)).unwrap()}
  }
  /// ID of the starting point of a line segment.
  /// Example: /// Example: 359655
  /// Constraints: No constraints specified.
  #[inline]
  pub fn segStartPoint(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_SEGSTARTPOINT, Some(0)).unwrap()}
  }
  /// ID of the end point of a line segment.
  /// Example: /// Example: 359655
  /// Constraints: No constraints specified.
  #[inline]
  pub fn segEndPoint(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_SEGENDPOINT, Some(0)).unwrap()}
  }
  /// Identifies the sequence number of a line segment.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn segNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_SEGNUM, Some(0)).unwrap()}
  }
  /// FACC (Feature and Attribute Coding Catalog) is a five-character code for encoding real-world entities and objects. The first letter of the code is an alphabetic value from "A" to "Z" which will map to a feature category. The second character will map to a subcategory. Characters three to five are numeric and range from 000 to 999. This value will provide a unit feature type identification within the categories.
  /// Example: /// Example: AT040
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn facc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_FACC, None)}
  }
  /// Identifying code for the type of this point obstacle.
  /// Example: /// Example: 540
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn featureCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_FEATURECODE, None)}
  }
  /// Identifying code for the type of this point obstacle.
  /// Example: /// Example: 540
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn featureType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_FEATURETYPE, None)}
  }
  /// Type name of point obstacle.
  /// Example: /// Example: PYLON
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn featureName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_FEATURENAME, None)}
  }
  /// Description of this obstacle, corresponding to the FACC (Feature and Attribute Coding Catalog) value.
  /// Example: /// Example: Powerline Pylon, General
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn featureDescription(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_FEATUREDESCRIPTION, None)}
  }
  /// The World Aeronautical Chart (WAC) identifier for the area in which this obstacle is located.
  /// Example: /// Example: 262
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn wac(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_WAC, None)}
  }
  /// This obstacle's World Area Code installation number (WAC-INNR).
  /// Example: /// Example: 0409-00039
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn wacINNR(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_WACINNR, None)}
  }
  /// Indicates if the feature has multiple obstructions (e.g. S = Single, M = Multiple, U = Undetermined).
  /// Example: /// Example: S
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn multObs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_MULTOBS, None)}
  }
  /// Indicates the number of obstructions associated with a feature.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numObs(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_NUMOBS, Some(0)).unwrap()}
  }
  /// Code representing the mathematical model of Earth used to calculate coordinates for this obstacle (e.g. WGS-84, U for undetermined, etc.).  US Forces use the World Geodetic System 1984 (WGS-84), but also use maps by allied countries with local datums.
  /// Example: /// Example: WGS-84
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn horizDatumCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_HORIZDATUMCODE, None)}
  }
  /// The height Above Ground Level (AGL) of the point obstacle in feet.
  /// Example: /// Example: 314.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn heightAGL(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_HEIGHTAGL, Some(0.0)).unwrap()}
  }
  /// The accuracy of the height Above Ground Level (AGL) AGL value for this point obstacle in feet.
  /// Example: /// Example: 30.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn heightAGLAcc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_HEIGHTAGLACC, Some(0.0)).unwrap()}
  }
  /// The height Above Mean Sea Level (AMSL) of the point obstacle in feet.
  /// Example: /// Example: 1154.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn heightMSL(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_HEIGHTMSL, Some(0.0)).unwrap()}
  }
  /// The accuracy of the height Above Mean Sea Level (AMSL) value for this point obstacle in feet.
  /// Example: /// Example: 34.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn heightMSLAcc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_HEIGHTMSLACC, Some(0.0)).unwrap()}
  }
  /// The elevation at the point obstacle's location in feet.
  /// Example: /// Example: 840.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_ELEVATION, Some(0.0)).unwrap()}
  }
  /// The difference between the assigned elevation of this point and its true elevation, in feet.
  /// Example: /// Example: 17.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationAcc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_ELEVATIONACC, Some(0.0)).unwrap()}
  }
  /// The difference between the recorded horizontal coordinates of this point obstacle and its true position, in feet.
  /// Example: /// Example: 8.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn horizAcc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_HORIZACC, Some(0.0)).unwrap()}
  }
  /// When horizontal and/or vertical accuracy requirements cannot be met because of inadequate source material, this code indicates the quality of the data.
  /// Example: /// Example: 0
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn quality(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_QUALITY, None)}
  }
  /// Code specifying if this obstacle is lit (e.g. Y = Yes, N = No, U = Unknown).
  /// Example: /// Example: U
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn lightingCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_LIGHTINGCODE, None)}
  }
  /// The surface material composition code of this point obstacle.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn surfaceMatCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_SURFACEMATCODE, None)}
  }
  /// The side or sides of this obstruction feature which produces the greatest reflectivity potential.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn directivityCode(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_DIRECTIVITYCODE, Some(0)).unwrap()}
  }
  /// Method used to confirm the existence of this obstacle.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn validationCode(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_VALIDATIONCODE, Some(0)).unwrap()}
  }
  /// The transaction type/code for this obstacle (e.g. "D", "N", "R", "S", "V", "X").
  /// Example: /// Example: V
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn transactionCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_TRANSACTIONCODE, None)}
  }
  /// Code denoting the action, review, or process that updated this obstacle.
  /// Example: /// Example: OT
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn processCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_PROCESSCODE, None)}
  }
  /// Indicates if this obstacle record is Active (A) or Deleted (D).
  /// Example: /// Example: A
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn actDelCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_ACTDELCODE, None)}
  }
  /// Name of the agency that produced this obstruction data set.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn producer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_PRODUCER, None)}
  }
  /// The organization that entered obstacle data other than the producer.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn derivingOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_DERIVINGORG, None)}
  }
  /// The organization that deleted this obstacle record.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn deletingOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_DELETINGORG, None)}
  }
  /// Source date of this obstacle data, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2016-04-01
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sourceDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_SOURCEDATE, None)}
  }
  /// Date this obstacle data was revised, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2020-02-26
  /// Constraints: No constraints specified.
  #[inline]
  pub fn revDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_REVDATE, None)}
  }
  /// Date this obstacle was initially added to the data set, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 1991-03-28
  /// Constraints: No constraints specified.
  #[inline]
  pub fn initRecordDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_INITRECORDDATE, None)}
  }
  /// This field provides an array of keys that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the values array. This array must be the same length as values.
  /// Example: /// Example: ['key1', 'key2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn keys(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(NavigationalObstruction_Full::VT_KEYS, None)}
  }
  /// This field provides an array of values that can be added to any obstruction feature to provide information that is not already supported. The entries in this array must correspond to the position index in the keys array. This array must be the same length as keys.
  /// Example: /// Example: ['value1', 'value2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn values(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(NavigationalObstruction_Full::VT_VALUES, None)}
  }
  /// Remarks regarding this obstacle.
  /// Example: /// Example: Obstacle remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn obstacleRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_OBSTACLEREMARKS, None)}
  }
  /// The date after which this obstruction data set’s currency is stale and should be refreshed, in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2024-07-11
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nextCycleDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_NEXTCYCLEDATE, None)}
  }
  /// Earliest record date possible in this obstruction data set (not the earliest data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD). If null, this data set is assumed to be a full data pull of holdings until the cutoffDate.  If this field is populated, this data set only contains updates since the last baseline data set.
  /// Example: /// Example: 2024-04-23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn baselineCutoffDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_BASELINECUTOFFDATE, None)}
  }
  /// Latest record date possible in this obstruction data set (not the most recent data item), in ISO 8601 date-only format (e.g. YYYY-MM-DD).
  /// Example: /// Example: 2024-05-21
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cutoffDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_CUTOFFDATE, None)}
  }
  /// The Aeronautical Information Regulation and Control (AIRAC) cycle of this obstruction data set. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  /// Example: /// Example: 2406
  /// Constraints: No constraints specified.
  #[inline]
  pub fn airacCycle(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_AIRACCYCLE, Some(0)).unwrap()}
  }
  /// The baseline Aeronautical Information Regulation and Control (AIRAC) cycle for change sets only. The format is YYNN where YY is the last two digits of the year and NN is the cycle number.
  /// Example: /// Example: 2405
  /// Constraints: No constraints specified.
  #[inline]
  pub fn baseAiracCycle(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_BASEAIRACCYCLE, Some(0)).unwrap()}
  }
  /// The DoD Standard Country Code designator for the country or political entity that owns the data set associated with this obstruction. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn ownerCountryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_OWNERCOUNTRYCODE, None)}
  }
  /// WGS-84 longitude of the northeastern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 99.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn boundNELon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_BOUNDNELON, Some(0.0)).unwrap()}
  }
  /// WGS-84 latitude of the northeastern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 29.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn boundNELat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_BOUNDNELAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the southwestern boundary for obstructions contained in this data set, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -144.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn boundSWLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_BOUNDSWLON, Some(0.0)).unwrap()}
  }
  /// WGS-84 latitude of the southwestern boundary for obstructions contained in this data set, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -44.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn boundSWLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_BOUNDSWLAT, Some(0.0)).unwrap()}
  }
  /// The minimum height Above Ground Level (AGL) of the shortest obstruction contained in this data set, in feet.
  /// Example: /// Example: 20.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn minHeightAGL(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(NavigationalObstruction_Full::VT_MINHEIGHTAGL, Some(0.0)).unwrap()}
  }
  /// The number of point features associated with this obstruction data set.
  /// Example: /// Example: 21830590
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numPoints(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_NUMPOINTS, Some(0)).unwrap()}
  }
  /// The number of line features associated with this obstruction data set.
  /// Example: /// Example: 45993
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numLines(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(NavigationalObstruction_Full::VT_NUMLINES, Some(0)).unwrap()}
  }
  /// Remarks concerning this obstruction's data set.
  /// Example: /// Example: Data set remarks
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn dataSetRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_DATASETREMARKS, None)}
  }
  /// The name of the point file associated with this obstruction data set.
  /// Example: /// Example: points.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn pointsFilename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_POINTSFILENAME, None)}
  }
  /// The name of the line file associated with this obstruction data set.
  /// Example: /// Example: lines.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn linesFilename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_LINESFILENAME, None)}
  }
  /// The name of the vector file associated with this obstruction data set.
  /// Example: /// Example: vectors.txt
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn vectorsFilename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_VECTORSFILENAME, None)}
  }
  /// Optional URI location in the document repository of the raw file parsed by the system to produce this record. To download the raw file, prepend https://udl-hostname/scs/download?id= to this value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_RAWFILEURI, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_UPDATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(NavigationalObstruction_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> NavigationalObstruction_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<NavigationalObstruction_Full_dataMode_Enum>(NavigationalObstruction_Full::VT_DATAMODE, Some(NavigationalObstruction_Full_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for NavigationalObstruction_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cycleDate", Self::VT_CYCLEDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obstacleType", Self::VT_OBSTACLETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obstacleId", Self::VT_OBSTACLEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origId", Self::VT_ORIGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryCode", Self::VT_COUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("provinceCode", Self::VT_PROVINCECODE, false)?
     .visit_field::<f64>("pointLat", Self::VT_POINTLAT, false)?
     .visit_field::<f64>("pointLon", Self::VT_POINTLON, false)?
     .visit_field::<f64>("lineNELon", Self::VT_LINENELON, false)?
     .visit_field::<f64>("lineNELat", Self::VT_LINENELAT, false)?
     .visit_field::<f64>("lineSWLon", Self::VT_LINESWLON, false)?
     .visit_field::<f64>("lineSWLat", Self::VT_LINESWLAT, false)?
     .visit_field::<i32>("segStartPoint", Self::VT_SEGSTARTPOINT, false)?
     .visit_field::<i32>("segEndPoint", Self::VT_SEGENDPOINT, false)?
     .visit_field::<i32>("segNum", Self::VT_SEGNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("facc", Self::VT_FACC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("featureCode", Self::VT_FEATURECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("featureType", Self::VT_FEATURETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("featureName", Self::VT_FEATURENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("featureDescription", Self::VT_FEATUREDESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("wac", Self::VT_WAC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("wacINNR", Self::VT_WACINNR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("multObs", Self::VT_MULTOBS, false)?
     .visit_field::<i32>("numObs", Self::VT_NUMOBS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("horizDatumCode", Self::VT_HORIZDATUMCODE, false)?
     .visit_field::<f64>("heightAGL", Self::VT_HEIGHTAGL, false)?
     .visit_field::<f64>("heightAGLAcc", Self::VT_HEIGHTAGLACC, false)?
     .visit_field::<f64>("heightMSL", Self::VT_HEIGHTMSL, false)?
     .visit_field::<f64>("heightMSLAcc", Self::VT_HEIGHTMSLACC, false)?
     .visit_field::<f64>("elevation", Self::VT_ELEVATION, false)?
     .visit_field::<f64>("elevationAcc", Self::VT_ELEVATIONACC, false)?
     .visit_field::<f64>("horizAcc", Self::VT_HORIZACC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("quality", Self::VT_QUALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("lightingCode", Self::VT_LIGHTINGCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("surfaceMatCode", Self::VT_SURFACEMATCODE, false)?
     .visit_field::<i32>("directivityCode", Self::VT_DIRECTIVITYCODE, false)?
     .visit_field::<i32>("validationCode", Self::VT_VALIDATIONCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionCode", Self::VT_TRANSACTIONCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("processCode", Self::VT_PROCESSCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actDelCode", Self::VT_ACTDELCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("producer", Self::VT_PRODUCER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("derivingOrg", Self::VT_DERIVINGORG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("deletingOrg", Self::VT_DELETINGORG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDate", Self::VT_SOURCEDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("revDate", Self::VT_REVDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("initRecordDate", Self::VT_INITRECORDDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("keys", Self::VT_KEYS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("values", Self::VT_VALUES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obstacleRemarks", Self::VT_OBSTACLEREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nextCycleDate", Self::VT_NEXTCYCLEDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("baselineCutoffDate", Self::VT_BASELINECUTOFFDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cutoffDate", Self::VT_CUTOFFDATE, false)?
     .visit_field::<i32>("airacCycle", Self::VT_AIRACCYCLE, false)?
     .visit_field::<i32>("baseAiracCycle", Self::VT_BASEAIRACCYCLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ownerCountryCode", Self::VT_OWNERCOUNTRYCODE, false)?
     .visit_field::<f64>("boundNELon", Self::VT_BOUNDNELON, false)?
     .visit_field::<f64>("boundNELat", Self::VT_BOUNDNELAT, false)?
     .visit_field::<f64>("boundSWLon", Self::VT_BOUNDSWLON, false)?
     .visit_field::<f64>("boundSWLat", Self::VT_BOUNDSWLAT, false)?
     .visit_field::<f64>("minHeightAGL", Self::VT_MINHEIGHTAGL, false)?
     .visit_field::<i32>("numPoints", Self::VT_NUMPOINTS, false)?
     .visit_field::<i32>("numLines", Self::VT_NUMLINES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dataSetRemarks", Self::VT_DATASETREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pointsFilename", Self::VT_POINTSFILENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("linesFilename", Self::VT_LINESFILENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("vectorsFilename", Self::VT_VECTORSFILENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<NavigationalObstruction_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct NavigationalObstruction_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cycleDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obstacleType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obstacleId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub countryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub provinceCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pointLat: f64,
    pub pointLon: f64,
    pub lineNELon: f64,
    pub lineNELat: f64,
    pub lineSWLon: f64,
    pub lineSWLat: f64,
    pub segStartPoint: i32,
    pub segEndPoint: i32,
    pub segNum: i32,
    pub facc: Option<flatbuffers::WIPOffset<&'a str>>,
    pub featureCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub featureType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub featureName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub featureDescription: Option<flatbuffers::WIPOffset<&'a str>>,
    pub wac: Option<flatbuffers::WIPOffset<&'a str>>,
    pub wacINNR: Option<flatbuffers::WIPOffset<&'a str>>,
    pub multObs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numObs: i32,
    pub horizDatumCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub heightAGL: f64,
    pub heightAGLAcc: f64,
    pub heightMSL: f64,
    pub heightMSLAcc: f64,
    pub elevation: f64,
    pub elevationAcc: f64,
    pub horizAcc: f64,
    pub quality: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lightingCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub surfaceMatCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub directivityCode: i32,
    pub validationCode: i32,
    pub transactionCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub processCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actDelCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub producer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub derivingOrg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub deletingOrg: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub revDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub initRecordDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub keys: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub values: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub obstacleRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nextCycleDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub baselineCutoffDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cutoffDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub airacCycle: i32,
    pub baseAiracCycle: i32,
    pub ownerCountryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub boundNELon: f64,
    pub boundNELat: f64,
    pub boundSWLon: f64,
    pub boundSWLat: f64,
    pub minHeightAGL: f64,
    pub numPoints: i32,
    pub numLines: i32,
    pub dataSetRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pointsFilename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub linesFilename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub vectorsFilename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: NavigationalObstruction_Full_dataMode_Enum,
}
impl<'a> Default for NavigationalObstruction_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    NavigationalObstruction_FullArgs {
      id: None,
      classificationMarking: None,
      cycleDate: None,
      obstacleType: None,
      obstacleId: None,
      externalId: None,
      origId: None,
      countryCode: None,
      provinceCode: None,
      pointLat: 0.0,
      pointLon: 0.0,
      lineNELon: 0.0,
      lineNELat: 0.0,
      lineSWLon: 0.0,
      lineSWLat: 0.0,
      segStartPoint: 0,
      segEndPoint: 0,
      segNum: 0,
      facc: None,
      featureCode: None,
      featureType: None,
      featureName: None,
      featureDescription: None,
      wac: None,
      wacINNR: None,
      multObs: None,
      numObs: 0,
      horizDatumCode: None,
      heightAGL: 0.0,
      heightAGLAcc: 0.0,
      heightMSL: 0.0,
      heightMSLAcc: 0.0,
      elevation: 0.0,
      elevationAcc: 0.0,
      horizAcc: 0.0,
      quality: None,
      lightingCode: None,
      surfaceMatCode: None,
      directivityCode: 0,
      validationCode: 0,
      transactionCode: None,
      processCode: None,
      actDelCode: None,
      producer: None,
      derivingOrg: None,
      deletingOrg: None,
      sourceDate: None,
      revDate: None,
      initRecordDate: None,
      keys: None,
      values: None,
      obstacleRemarks: None,
      nextCycleDate: None,
      baselineCutoffDate: None,
      cutoffDate: None,
      airacCycle: 0,
      baseAiracCycle: 0,
      ownerCountryCode: None,
      boundNELon: 0.0,
      boundNELat: 0.0,
      boundSWLon: 0.0,
      boundSWLat: 0.0,
      minHeightAGL: 0.0,
      numPoints: 0,
      numLines: 0,
      dataSetRemarks: None,
      pointsFilename: None,
      linesFilename: None,
      vectorsFilename: None,
      rawFileURI: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: NavigationalObstruction_Full_dataMode_Enum::REAL,
    }
  }
}

pub struct NavigationalObstruction_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> NavigationalObstruction_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_cycleDate(&mut self, cycleDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_CYCLEDATE, cycleDate);
  }
  #[inline]
  pub fn add_obstacleType(&mut self, obstacleType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_OBSTACLETYPE, obstacleType);
  }
  #[inline]
  pub fn add_obstacleId(&mut self, obstacleId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_OBSTACLEID, obstacleId);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_origId(&mut self, origId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_ORIGID, origId);
  }
  #[inline]
  pub fn add_countryCode(&mut self, countryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_COUNTRYCODE, countryCode);
  }
  #[inline]
  pub fn add_provinceCode(&mut self, provinceCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_PROVINCECODE, provinceCode);
  }
  #[inline]
  pub fn add_pointLat(&mut self, pointLat: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_POINTLAT, pointLat, 0.0);
  }
  #[inline]
  pub fn add_pointLon(&mut self, pointLon: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_POINTLON, pointLon, 0.0);
  }
  #[inline]
  pub fn add_lineNELon(&mut self, lineNELon: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_LINENELON, lineNELon, 0.0);
  }
  #[inline]
  pub fn add_lineNELat(&mut self, lineNELat: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_LINENELAT, lineNELat, 0.0);
  }
  #[inline]
  pub fn add_lineSWLon(&mut self, lineSWLon: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_LINESWLON, lineSWLon, 0.0);
  }
  #[inline]
  pub fn add_lineSWLat(&mut self, lineSWLat: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_LINESWLAT, lineSWLat, 0.0);
  }
  #[inline]
  pub fn add_segStartPoint(&mut self, segStartPoint: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_SEGSTARTPOINT, segStartPoint, 0);
  }
  #[inline]
  pub fn add_segEndPoint(&mut self, segEndPoint: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_SEGENDPOINT, segEndPoint, 0);
  }
  #[inline]
  pub fn add_segNum(&mut self, segNum: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_SEGNUM, segNum, 0);
  }
  #[inline]
  pub fn add_facc(&mut self, facc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_FACC, facc);
  }
  #[inline]
  pub fn add_featureCode(&mut self, featureCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_FEATURECODE, featureCode);
  }
  #[inline]
  pub fn add_featureType(&mut self, featureType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_FEATURETYPE, featureType);
  }
  #[inline]
  pub fn add_featureName(&mut self, featureName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_FEATURENAME, featureName);
  }
  #[inline]
  pub fn add_featureDescription(&mut self, featureDescription: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_FEATUREDESCRIPTION, featureDescription);
  }
  #[inline]
  pub fn add_wac(&mut self, wac: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_WAC, wac);
  }
  #[inline]
  pub fn add_wacINNR(&mut self, wacINNR: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_WACINNR, wacINNR);
  }
  #[inline]
  pub fn add_multObs(&mut self, multObs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_MULTOBS, multObs);
  }
  #[inline]
  pub fn add_numObs(&mut self, numObs: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_NUMOBS, numObs, 0);
  }
  #[inline]
  pub fn add_horizDatumCode(&mut self, horizDatumCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_HORIZDATUMCODE, horizDatumCode);
  }
  #[inline]
  pub fn add_heightAGL(&mut self, heightAGL: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_HEIGHTAGL, heightAGL, 0.0);
  }
  #[inline]
  pub fn add_heightAGLAcc(&mut self, heightAGLAcc: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_HEIGHTAGLACC, heightAGLAcc, 0.0);
  }
  #[inline]
  pub fn add_heightMSL(&mut self, heightMSL: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_HEIGHTMSL, heightMSL, 0.0);
  }
  #[inline]
  pub fn add_heightMSLAcc(&mut self, heightMSLAcc: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_HEIGHTMSLACC, heightMSLAcc, 0.0);
  }
  #[inline]
  pub fn add_elevation(&mut self, elevation: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_ELEVATION, elevation, 0.0);
  }
  #[inline]
  pub fn add_elevationAcc(&mut self, elevationAcc: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_ELEVATIONACC, elevationAcc, 0.0);
  }
  #[inline]
  pub fn add_horizAcc(&mut self, horizAcc: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_HORIZACC, horizAcc, 0.0);
  }
  #[inline]
  pub fn add_quality(&mut self, quality: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_QUALITY, quality);
  }
  #[inline]
  pub fn add_lightingCode(&mut self, lightingCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_LIGHTINGCODE, lightingCode);
  }
  #[inline]
  pub fn add_surfaceMatCode(&mut self, surfaceMatCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_SURFACEMATCODE, surfaceMatCode);
  }
  #[inline]
  pub fn add_directivityCode(&mut self, directivityCode: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_DIRECTIVITYCODE, directivityCode, 0);
  }
  #[inline]
  pub fn add_validationCode(&mut self, validationCode: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_VALIDATIONCODE, validationCode, 0);
  }
  #[inline]
  pub fn add_transactionCode(&mut self, transactionCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_TRANSACTIONCODE, transactionCode);
  }
  #[inline]
  pub fn add_processCode(&mut self, processCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_PROCESSCODE, processCode);
  }
  #[inline]
  pub fn add_actDelCode(&mut self, actDelCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_ACTDELCODE, actDelCode);
  }
  #[inline]
  pub fn add_producer(&mut self, producer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_PRODUCER, producer);
  }
  #[inline]
  pub fn add_derivingOrg(&mut self, derivingOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_DERIVINGORG, derivingOrg);
  }
  #[inline]
  pub fn add_deletingOrg(&mut self, deletingOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_DELETINGORG, deletingOrg);
  }
  #[inline]
  pub fn add_sourceDate(&mut self, sourceDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_SOURCEDATE, sourceDate);
  }
  #[inline]
  pub fn add_revDate(&mut self, revDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_REVDATE, revDate);
  }
  #[inline]
  pub fn add_initRecordDate(&mut self, initRecordDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_INITRECORDDATE, initRecordDate);
  }
  #[inline]
  pub fn add_keys(&mut self, keys: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_KEYS, keys);
  }
  #[inline]
  pub fn add_values(&mut self, values: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_VALUES, values);
  }
  #[inline]
  pub fn add_obstacleRemarks(&mut self, obstacleRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_OBSTACLEREMARKS, obstacleRemarks);
  }
  #[inline]
  pub fn add_nextCycleDate(&mut self, nextCycleDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_NEXTCYCLEDATE, nextCycleDate);
  }
  #[inline]
  pub fn add_baselineCutoffDate(&mut self, baselineCutoffDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_BASELINECUTOFFDATE, baselineCutoffDate);
  }
  #[inline]
  pub fn add_cutoffDate(&mut self, cutoffDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_CUTOFFDATE, cutoffDate);
  }
  #[inline]
  pub fn add_airacCycle(&mut self, airacCycle: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_AIRACCYCLE, airacCycle, 0);
  }
  #[inline]
  pub fn add_baseAiracCycle(&mut self, baseAiracCycle: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_BASEAIRACCYCLE, baseAiracCycle, 0);
  }
  #[inline]
  pub fn add_ownerCountryCode(&mut self, ownerCountryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_OWNERCOUNTRYCODE, ownerCountryCode);
  }
  #[inline]
  pub fn add_boundNELon(&mut self, boundNELon: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_BOUNDNELON, boundNELon, 0.0);
  }
  #[inline]
  pub fn add_boundNELat(&mut self, boundNELat: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_BOUNDNELAT, boundNELat, 0.0);
  }
  #[inline]
  pub fn add_boundSWLon(&mut self, boundSWLon: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_BOUNDSWLON, boundSWLon, 0.0);
  }
  #[inline]
  pub fn add_boundSWLat(&mut self, boundSWLat: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_BOUNDSWLAT, boundSWLat, 0.0);
  }
  #[inline]
  pub fn add_minHeightAGL(&mut self, minHeightAGL: f64) {
    self.fbb_.push_slot::<f64>(NavigationalObstruction_Full::VT_MINHEIGHTAGL, minHeightAGL, 0.0);
  }
  #[inline]
  pub fn add_numPoints(&mut self, numPoints: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_NUMPOINTS, numPoints, 0);
  }
  #[inline]
  pub fn add_numLines(&mut self, numLines: i32) {
    self.fbb_.push_slot::<i32>(NavigationalObstruction_Full::VT_NUMLINES, numLines, 0);
  }
  #[inline]
  pub fn add_dataSetRemarks(&mut self, dataSetRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_DATASETREMARKS, dataSetRemarks);
  }
  #[inline]
  pub fn add_pointsFilename(&mut self, pointsFilename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_POINTSFILENAME, pointsFilename);
  }
  #[inline]
  pub fn add_linesFilename(&mut self, linesFilename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_LINESFILENAME, linesFilename);
  }
  #[inline]
  pub fn add_vectorsFilename(&mut self, vectorsFilename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_VECTORSFILENAME, vectorsFilename);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NavigationalObstruction_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: NavigationalObstruction_Full_dataMode_Enum) {
    self.fbb_.push_slot::<NavigationalObstruction_Full_dataMode_Enum>(NavigationalObstruction_Full::VT_DATAMODE, dataMode, NavigationalObstruction_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> NavigationalObstruction_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    NavigationalObstruction_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NavigationalObstruction_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NavigationalObstruction_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NavigationalObstruction_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("cycleDate", &self.cycleDate());
      ds.field("obstacleType", &self.obstacleType());
      ds.field("obstacleId", &self.obstacleId());
      ds.field("externalId", &self.externalId());
      ds.field("origId", &self.origId());
      ds.field("countryCode", &self.countryCode());
      ds.field("provinceCode", &self.provinceCode());
      ds.field("pointLat", &self.pointLat());
      ds.field("pointLon", &self.pointLon());
      ds.field("lineNELon", &self.lineNELon());
      ds.field("lineNELat", &self.lineNELat());
      ds.field("lineSWLon", &self.lineSWLon());
      ds.field("lineSWLat", &self.lineSWLat());
      ds.field("segStartPoint", &self.segStartPoint());
      ds.field("segEndPoint", &self.segEndPoint());
      ds.field("segNum", &self.segNum());
      ds.field("facc", &self.facc());
      ds.field("featureCode", &self.featureCode());
      ds.field("featureType", &self.featureType());
      ds.field("featureName", &self.featureName());
      ds.field("featureDescription", &self.featureDescription());
      ds.field("wac", &self.wac());
      ds.field("wacINNR", &self.wacINNR());
      ds.field("multObs", &self.multObs());
      ds.field("numObs", &self.numObs());
      ds.field("horizDatumCode", &self.horizDatumCode());
      ds.field("heightAGL", &self.heightAGL());
      ds.field("heightAGLAcc", &self.heightAGLAcc());
      ds.field("heightMSL", &self.heightMSL());
      ds.field("heightMSLAcc", &self.heightMSLAcc());
      ds.field("elevation", &self.elevation());
      ds.field("elevationAcc", &self.elevationAcc());
      ds.field("horizAcc", &self.horizAcc());
      ds.field("quality", &self.quality());
      ds.field("lightingCode", &self.lightingCode());
      ds.field("surfaceMatCode", &self.surfaceMatCode());
      ds.field("directivityCode", &self.directivityCode());
      ds.field("validationCode", &self.validationCode());
      ds.field("transactionCode", &self.transactionCode());
      ds.field("processCode", &self.processCode());
      ds.field("actDelCode", &self.actDelCode());
      ds.field("producer", &self.producer());
      ds.field("derivingOrg", &self.derivingOrg());
      ds.field("deletingOrg", &self.deletingOrg());
      ds.field("sourceDate", &self.sourceDate());
      ds.field("revDate", &self.revDate());
      ds.field("initRecordDate", &self.initRecordDate());
      ds.field("keys", &self.keys());
      ds.field("values", &self.values());
      ds.field("obstacleRemarks", &self.obstacleRemarks());
      ds.field("nextCycleDate", &self.nextCycleDate());
      ds.field("baselineCutoffDate", &self.baselineCutoffDate());
      ds.field("cutoffDate", &self.cutoffDate());
      ds.field("airacCycle", &self.airacCycle());
      ds.field("baseAiracCycle", &self.baseAiracCycle());
      ds.field("ownerCountryCode", &self.ownerCountryCode());
      ds.field("boundNELon", &self.boundNELon());
      ds.field("boundNELat", &self.boundNELat());
      ds.field("boundSWLon", &self.boundSWLon());
      ds.field("boundSWLat", &self.boundSWLat());
      ds.field("minHeightAGL", &self.minHeightAGL());
      ds.field("numPoints", &self.numPoints());
      ds.field("numLines", &self.numLines());
      ds.field("dataSetRemarks", &self.dataSetRemarks());
      ds.field("pointsFilename", &self.pointsFilename());
      ds.field("linesFilename", &self.linesFilename());
      ds.field("vectorsFilename", &self.vectorsFilename());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct NavigationalObstruction_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub cycleDate: Option<String>,
  pub obstacleType: Option<String>,
  pub obstacleId: Option<String>,
  pub externalId: Option<String>,
  pub origId: Option<String>,
  pub countryCode: Option<String>,
  pub provinceCode: Option<String>,
  pub pointLat: f64,
  pub pointLon: f64,
  pub lineNELon: f64,
  pub lineNELat: f64,
  pub lineSWLon: f64,
  pub lineSWLat: f64,
  pub segStartPoint: i32,
  pub segEndPoint: i32,
  pub segNum: i32,
  pub facc: Option<String>,
  pub featureCode: Option<String>,
  pub featureType: Option<String>,
  pub featureName: Option<String>,
  pub featureDescription: Option<String>,
  pub wac: Option<String>,
  pub wacINNR: Option<String>,
  pub multObs: Option<String>,
  pub numObs: i32,
  pub horizDatumCode: Option<String>,
  pub heightAGL: f64,
  pub heightAGLAcc: f64,
  pub heightMSL: f64,
  pub heightMSLAcc: f64,
  pub elevation: f64,
  pub elevationAcc: f64,
  pub horizAcc: f64,
  pub quality: Option<String>,
  pub lightingCode: Option<String>,
  pub surfaceMatCode: Option<String>,
  pub directivityCode: i32,
  pub validationCode: i32,
  pub transactionCode: Option<String>,
  pub processCode: Option<String>,
  pub actDelCode: Option<String>,
  pub producer: Option<String>,
  pub derivingOrg: Option<String>,
  pub deletingOrg: Option<String>,
  pub sourceDate: Option<String>,
  pub revDate: Option<String>,
  pub initRecordDate: Option<String>,
  pub keys: Option<Vec<String>>,
  pub values: Option<Vec<String>>,
  pub obstacleRemarks: Option<String>,
  pub nextCycleDate: Option<String>,
  pub baselineCutoffDate: Option<String>,
  pub cutoffDate: Option<String>,
  pub airacCycle: i32,
  pub baseAiracCycle: i32,
  pub ownerCountryCode: Option<String>,
  pub boundNELon: f64,
  pub boundNELat: f64,
  pub boundSWLon: f64,
  pub boundSWLat: f64,
  pub minHeightAGL: f64,
  pub numPoints: i32,
  pub numLines: i32,
  pub dataSetRemarks: Option<String>,
  pub pointsFilename: Option<String>,
  pub linesFilename: Option<String>,
  pub vectorsFilename: Option<String>,
  pub rawFileURI: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: NavigationalObstruction_Full_dataMode_Enum,
}
impl Default for NavigationalObstruction_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      cycleDate: None,
      obstacleType: None,
      obstacleId: None,
      externalId: None,
      origId: None,
      countryCode: None,
      provinceCode: None,
      pointLat: 0.0,
      pointLon: 0.0,
      lineNELon: 0.0,
      lineNELat: 0.0,
      lineSWLon: 0.0,
      lineSWLat: 0.0,
      segStartPoint: 0,
      segEndPoint: 0,
      segNum: 0,
      facc: None,
      featureCode: None,
      featureType: None,
      featureName: None,
      featureDescription: None,
      wac: None,
      wacINNR: None,
      multObs: None,
      numObs: 0,
      horizDatumCode: None,
      heightAGL: 0.0,
      heightAGLAcc: 0.0,
      heightMSL: 0.0,
      heightMSLAcc: 0.0,
      elevation: 0.0,
      elevationAcc: 0.0,
      horizAcc: 0.0,
      quality: None,
      lightingCode: None,
      surfaceMatCode: None,
      directivityCode: 0,
      validationCode: 0,
      transactionCode: None,
      processCode: None,
      actDelCode: None,
      producer: None,
      derivingOrg: None,
      deletingOrg: None,
      sourceDate: None,
      revDate: None,
      initRecordDate: None,
      keys: None,
      values: None,
      obstacleRemarks: None,
      nextCycleDate: None,
      baselineCutoffDate: None,
      cutoffDate: None,
      airacCycle: 0,
      baseAiracCycle: 0,
      ownerCountryCode: None,
      boundNELon: 0.0,
      boundNELat: 0.0,
      boundSWLon: 0.0,
      boundSWLat: 0.0,
      minHeightAGL: 0.0,
      numPoints: 0,
      numLines: 0,
      dataSetRemarks: None,
      pointsFilename: None,
      linesFilename: None,
      vectorsFilename: None,
      rawFileURI: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: NavigationalObstruction_Full_dataMode_Enum::REAL,
    }
  }
}
impl NavigationalObstruction_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<NavigationalObstruction_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cycleDate = self.cycleDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obstacleType = self.obstacleType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obstacleId = self.obstacleId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origId = self.origId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let countryCode = self.countryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let provinceCode = self.provinceCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pointLat = self.pointLat;
    let pointLon = self.pointLon;
    let lineNELon = self.lineNELon;
    let lineNELat = self.lineNELat;
    let lineSWLon = self.lineSWLon;
    let lineSWLat = self.lineSWLat;
    let segStartPoint = self.segStartPoint;
    let segEndPoint = self.segEndPoint;
    let segNum = self.segNum;
    let facc = self.facc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let featureCode = self.featureCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let featureType = self.featureType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let featureName = self.featureName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let featureDescription = self.featureDescription.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let wac = self.wac.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let wacINNR = self.wacINNR.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let multObs = self.multObs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numObs = self.numObs;
    let horizDatumCode = self.horizDatumCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let heightAGL = self.heightAGL;
    let heightAGLAcc = self.heightAGLAcc;
    let heightMSL = self.heightMSL;
    let heightMSLAcc = self.heightMSLAcc;
    let elevation = self.elevation;
    let elevationAcc = self.elevationAcc;
    let horizAcc = self.horizAcc;
    let quality = self.quality.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lightingCode = self.lightingCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let surfaceMatCode = self.surfaceMatCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let directivityCode = self.directivityCode;
    let validationCode = self.validationCode;
    let transactionCode = self.transactionCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let processCode = self.processCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actDelCode = self.actDelCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let producer = self.producer.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let derivingOrg = self.derivingOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let deletingOrg = self.deletingOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDate = self.sourceDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let revDate = self.revDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let initRecordDate = self.initRecordDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let keys = self.keys.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let values = self.values.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let obstacleRemarks = self.obstacleRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nextCycleDate = self.nextCycleDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let baselineCutoffDate = self.baselineCutoffDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cutoffDate = self.cutoffDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let airacCycle = self.airacCycle;
    let baseAiracCycle = self.baseAiracCycle;
    let ownerCountryCode = self.ownerCountryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let boundNELon = self.boundNELon;
    let boundNELat = self.boundNELat;
    let boundSWLon = self.boundSWLon;
    let boundSWLat = self.boundSWLat;
    let minHeightAGL = self.minHeightAGL;
    let numPoints = self.numPoints;
    let numLines = self.numLines;
    let dataSetRemarks = self.dataSetRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pointsFilename = self.pointsFilename.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let linesFilename = self.linesFilename.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let vectorsFilename = self.vectorsFilename.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    NavigationalObstruction_Full::create(_fbb, &NavigationalObstruction_FullArgs{
      id,
      classificationMarking,
      cycleDate,
      obstacleType,
      obstacleId,
      externalId,
      origId,
      countryCode,
      provinceCode,
      pointLat,
      pointLon,
      lineNELon,
      lineNELat,
      lineSWLon,
      lineSWLat,
      segStartPoint,
      segEndPoint,
      segNum,
      facc,
      featureCode,
      featureType,
      featureName,
      featureDescription,
      wac,
      wacINNR,
      multObs,
      numObs,
      horizDatumCode,
      heightAGL,
      heightAGLAcc,
      heightMSL,
      heightMSLAcc,
      elevation,
      elevationAcc,
      horizAcc,
      quality,
      lightingCode,
      surfaceMatCode,
      directivityCode,
      validationCode,
      transactionCode,
      processCode,
      actDelCode,
      producer,
      derivingOrg,
      deletingOrg,
      sourceDate,
      revDate,
      initRecordDate,
      keys,
      values,
      obstacleRemarks,
      nextCycleDate,
      baselineCutoffDate,
      cutoffDate,
      airacCycle,
      baseAiracCycle,
      ownerCountryCode,
      boundNELon,
      boundNELat,
      boundSWLon,
      boundSWLat,
      minHeightAGL,
      numPoints,
      numLines,
      dataSetRemarks,
      pointsFilename,
      linesFilename,
      vectorsFilename,
      rawFileURI,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `NavigationalObstruction_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_navigational_obstruction_full_unchecked`.
pub fn root_as_navigational_obstruction_full(buf: &[u8]) -> Result<NavigationalObstruction_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<NavigationalObstruction_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `NavigationalObstruction_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_navigational_obstruction_full_unchecked`.
pub fn size_prefixed_root_as_navigational_obstruction_full(buf: &[u8]) -> Result<NavigationalObstruction_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<NavigationalObstruction_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `NavigationalObstruction_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_navigational_obstruction_full_unchecked`.
pub fn root_as_navigational_obstruction_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NavigationalObstruction_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<NavigationalObstruction_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `NavigationalObstruction_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_navigational_obstruction_full_unchecked`.
pub fn size_prefixed_root_as_navigational_obstruction_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NavigationalObstruction_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<NavigationalObstruction_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a NavigationalObstruction_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `NavigationalObstruction_Full`.
pub unsafe fn root_as_navigational_obstruction_full_unchecked(buf: &[u8]) -> NavigationalObstruction_Full {
  flatbuffers::root_unchecked::<NavigationalObstruction_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed NavigationalObstruction_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `NavigationalObstruction_Full`.
pub unsafe fn size_prefixed_root_as_navigational_obstruction_full_unchecked(buf: &[u8]) -> NavigationalObstruction_Full {
  flatbuffers::size_prefixed_root_unchecked::<NavigationalObstruction_Full>(buf)
}
pub const NAVIGATIONAL_OBSTRUCTION_FULL_IDENTIFIER: &str = "NAVI";

#[inline]
pub fn navigational_obstruction_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, NAVIGATIONAL_OBSTRUCTION_FULL_IDENTIFIER, false)
}

#[inline]
pub fn navigational_obstruction_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, NAVIGATIONAL_OBSTRUCTION_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_navigational_obstruction_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<NavigationalObstruction_Full<'a>>) {
  fbb.finish(root, Some(NAVIGATIONAL_OBSTRUCTION_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_navigational_obstruction_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<NavigationalObstruction_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(NAVIGATIONAL_OBSTRUCTION_FULL_IDENTIFIER));
}
