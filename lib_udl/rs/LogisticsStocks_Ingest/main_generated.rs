// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum LogisticsStocks_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The supply stocks for this support item.
pub struct LogisticsStocks_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LogisticsStocks_Ingest<'a> {
  type Inner = LogisticsStocks_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LogisticsStocks_Ingest<'a> {
  pub const VT_SOURCEICAO: flatbuffers::VOffsetT = 4;
  pub const VT_QUANTITY: flatbuffers::VOffsetT = 6;
  pub const VT_STOCKCHECKTIME: flatbuffers::VOffsetT = 8;
  pub const VT_STOCKPOC: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LogisticsStocks_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogisticsStocks_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<LogisticsStocks_Ingest<'bldr>> {
    let mut builder = LogisticsStocks_IngestBuilder::new(_fbb);
    if let Some(x) = args.stockPOC { builder.add_stockPOC(x); }
    if let Some(x) = args.stockCheckTime { builder.add_stockCheckTime(x); }
    builder.add_quantity(args.quantity);
    if let Some(x) = args.sourceICAO { builder.add_sourceICAO(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> LogisticsStocks_IngestT {
    let sourceICAO = self.sourceICAO().map(|x| {
      x.to_string()
    });
    let quantity = self.quantity();
    let stockCheckTime = self.stockCheckTime().map(|x| {
      x.to_string()
    });
    let stockPOC = self.stockPOC().map(|x| {
      x.to_string()
    });
    LogisticsStocks_IngestT {
      sourceICAO,
      quantity,
      stockCheckTime,
      stockPOC,
    }
  }

  /// The ICAO code for the primary location with available parts.
  /// Example: /// Example: PHIK
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn sourceICAO(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsStocks_Ingest::VT_SOURCEICAO, None)}
  }
  /// The quantity of available parts needed from sourceICAO.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn quantity(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(LogisticsStocks_Ingest::VT_QUANTITY, Some(0)).unwrap()}
  }
  /// The datetime when the parts were sourced, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-13T13:47:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn stockCheckTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsStocks_Ingest::VT_STOCKCHECKTIME, None)}
  }
  /// The point of contact at the sourced location.
  /// Example: /// Example: SMITH, JOHN J
  /// Constraints: Minimum length = 0, Maximum length = 68
  #[inline]
  pub fn stockPOC(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsStocks_Ingest::VT_STOCKPOC, None)}
  }
}

impl flatbuffers::Verifiable for LogisticsStocks_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceICAO", Self::VT_SOURCEICAO, false)?
     .visit_field::<i32>("quantity", Self::VT_QUANTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("stockCheckTime", Self::VT_STOCKCHECKTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("stockPOC", Self::VT_STOCKPOC, false)?
     .finish();
    Ok(())
  }
}
pub struct LogisticsStocks_IngestArgs<'a> {
    pub sourceICAO: Option<flatbuffers::WIPOffset<&'a str>>,
    pub quantity: i32,
    pub stockCheckTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub stockPOC: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LogisticsStocks_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogisticsStocks_IngestArgs {
      sourceICAO: None,
      quantity: 0,
      stockCheckTime: None,
      stockPOC: None,
    }
  }
}

pub struct LogisticsStocks_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogisticsStocks_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_sourceICAO(&mut self, sourceICAO: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsStocks_Ingest::VT_SOURCEICAO, sourceICAO);
  }
  #[inline]
  pub fn add_quantity(&mut self, quantity: i32) {
    self.fbb_.push_slot::<i32>(LogisticsStocks_Ingest::VT_QUANTITY, quantity, 0);
  }
  #[inline]
  pub fn add_stockCheckTime(&mut self, stockCheckTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsStocks_Ingest::VT_STOCKCHECKTIME, stockCheckTime);
  }
  #[inline]
  pub fn add_stockPOC(&mut self, stockPOC: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsStocks_Ingest::VT_STOCKPOC, stockPOC);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogisticsStocks_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogisticsStocks_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LogisticsStocks_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LogisticsStocks_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LogisticsStocks_Ingest");
      ds.field("sourceICAO", &self.sourceICAO());
      ds.field("quantity", &self.quantity());
      ds.field("stockCheckTime", &self.stockCheckTime());
      ds.field("stockPOC", &self.stockPOC());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LogisticsStocks_IngestT {
  pub sourceICAO: Option<String>,
  pub quantity: i32,
  pub stockCheckTime: Option<String>,
  pub stockPOC: Option<String>,
}
impl Default for LogisticsStocks_IngestT {
  fn default() -> Self {
    Self {
      sourceICAO: None,
      quantity: 0,
      stockCheckTime: None,
      stockPOC: None,
    }
  }
}
impl LogisticsStocks_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LogisticsStocks_Ingest<'b>> {
    let sourceICAO = self.sourceICAO.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let quantity = self.quantity;
    let stockCheckTime = self.stockCheckTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let stockPOC = self.stockPOC.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LogisticsStocks_Ingest::create(_fbb, &LogisticsStocks_IngestArgs{
      sourceICAO,
      quantity,
      stockCheckTime,
      stockPOC,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LogisticsStocks_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_stocks_ingest_unchecked`.
pub fn root_as_logistics_stocks_ingest(buf: &[u8]) -> Result<LogisticsStocks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LogisticsStocks_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LogisticsStocks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_logistics_stocks_ingest_unchecked`.
pub fn size_prefixed_root_as_logistics_stocks_ingest(buf: &[u8]) -> Result<LogisticsStocks_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LogisticsStocks_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LogisticsStocks_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_stocks_ingest_unchecked`.
pub fn root_as_logistics_stocks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsStocks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LogisticsStocks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LogisticsStocks_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_stocks_ingest_unchecked`.
pub fn size_prefixed_root_as_logistics_stocks_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsStocks_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LogisticsStocks_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LogisticsStocks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LogisticsStocks_Ingest`.
pub unsafe fn root_as_logistics_stocks_ingest_unchecked(buf: &[u8]) -> LogisticsStocks_Ingest {
  flatbuffers::root_unchecked::<LogisticsStocks_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LogisticsStocks_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LogisticsStocks_Ingest`.
pub unsafe fn size_prefixed_root_as_logistics_stocks_ingest_unchecked(buf: &[u8]) -> LogisticsStocks_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<LogisticsStocks_Ingest>(buf)
}
pub const LOGISTICS_STOCKS_INGEST_IDENTIFIER: &str = "LOGI";

#[inline]
pub fn logistics_stocks_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_STOCKS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn logistics_stocks_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_STOCKS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_logistics_stocks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LogisticsStocks_Ingest<'a>>) {
  fbb.finish(root, Some(LOGISTICS_STOCKS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_logistics_stocks_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LogisticsStocks_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(LOGISTICS_STOCKS_INGEST_IDENTIFIER));
}
