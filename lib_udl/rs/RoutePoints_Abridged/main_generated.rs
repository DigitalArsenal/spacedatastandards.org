// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum RoutePoints_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Points identified within the route.
pub struct RoutePoints_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RoutePoints_Abridged<'a> {
  type Inner = RoutePoints_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RoutePoints_Abridged<'a> {
  pub const VT_PTSEQUENCEID: flatbuffers::VOffsetT = 4;
  pub const VT_PTTYPECODE: flatbuffers::VOffsetT = 6;
  pub const VT_PTTYPENAME: flatbuffers::VOffsetT = 8;
  pub const VT_WAYPOINTNAME: flatbuffers::VOffsetT = 10;
  pub const VT_DAFIFPT: flatbuffers::VOffsetT = 12;
  pub const VT_PTLAT: flatbuffers::VOffsetT = 14;
  pub const VT_PTLON: flatbuffers::VOffsetT = 16;
  pub const VT_MAGDEC: flatbuffers::VOffsetT = 18;
  pub const VT_NAVAIDLENGTH: flatbuffers::VOffsetT = 20;
  pub const VT_NAVAID: flatbuffers::VOffsetT = 22;
  pub const VT_COUNTRYCODE: flatbuffers::VOffsetT = 24;
  pub const VT_ALTCOUNTRYCODE: flatbuffers::VOffsetT = 26;
  pub const VT_NAVAIDTYPE: flatbuffers::VOffsetT = 28;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RoutePoints_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RoutePoints_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<RoutePoints_Abridged<'bldr>> {
    let mut builder = RoutePoints_AbridgedBuilder::new(_fbb);
    builder.add_navaidLength(args.navaidLength);
    builder.add_magDec(args.magDec);
    builder.add_ptLon(args.ptLon);
    builder.add_ptLat(args.ptLat);
    if let Some(x) = args.navaidType { builder.add_navaidType(x); }
    if let Some(x) = args.altCountryCode { builder.add_altCountryCode(x); }
    if let Some(x) = args.countryCode { builder.add_countryCode(x); }
    if let Some(x) = args.navaid { builder.add_navaid(x); }
    if let Some(x) = args.waypointName { builder.add_waypointName(x); }
    if let Some(x) = args.ptTypeName { builder.add_ptTypeName(x); }
    if let Some(x) = args.ptTypeCode { builder.add_ptTypeCode(x); }
    builder.add_ptSequenceId(args.ptSequenceId);
    builder.add_dafifPt(args.dafifPt);
    builder.finish()
  }

  pub fn unpack(&self) -> RoutePoints_AbridgedT {
    let ptSequenceId = self.ptSequenceId();
    let ptTypeCode = self.ptTypeCode().map(|x| {
      x.to_string()
    });
    let ptTypeName = self.ptTypeName().map(|x| {
      x.to_string()
    });
    let waypointName = self.waypointName().map(|x| {
      x.to_string()
    });
    let dafifPt = self.dafifPt();
    let ptLat = self.ptLat();
    let ptLon = self.ptLon();
    let magDec = self.magDec();
    let navaidLength = self.navaidLength();
    let navaid = self.navaid().map(|x| {
      x.to_string()
    });
    let countryCode = self.countryCode().map(|x| {
      x.to_string()
    });
    let altCountryCode = self.altCountryCode().map(|x| {
      x.to_string()
    });
    let navaidType = self.navaidType().map(|x| {
      x.to_string()
    });
    RoutePoints_AbridgedT {
      ptSequenceId,
      ptTypeCode,
      ptTypeName,
      waypointName,
      dafifPt,
      ptLat,
      ptLon,
      magDec,
      navaidLength,
      navaid,
      countryCode,
      altCountryCode,
      navaidType,
    }
  }

  /// Sequencing field for the track route. This is the identifier representing the sequence of waypoints associated to the track route.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ptSequenceId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RoutePoints_Abridged::VT_PTSEQUENCEID, Some(0)).unwrap()}
  }
  /// Code representation of the point within the track route (ex. EP, EX, CP, IP, etc.).
  /// Example: /// Example: EP
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn ptTypeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RoutePoints_Abridged::VT_PTTYPECODE, None)}
  }
  /// The name that represents the point within the track route (ex. ENTRY POINT, EXIT POINT, CONTROL POINT, INITIAL POINT, etc.).
  /// Example: /// Example: ENTRY POINT
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn ptTypeName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RoutePoints_Abridged::VT_PTTYPENAME, None)}
  }
  /// Name of a waypoint which identifies the location of the point.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn waypointName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RoutePoints_Abridged::VT_WAYPOINTNAME, None)}
  }
  /// Flag indicating this is a Digital Aeronautical Flight Information File (DAFIF) point.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dafifPt(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(RoutePoints_Abridged::VT_DAFIFPT, Some(false)).unwrap()}
  }
  /// WGS84 latitude of the point location, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 45.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ptLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RoutePoints_Abridged::VT_PTLAT, Some(0.0)).unwrap()}
  }
  /// WGS84 longitude of the point location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 179.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ptLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RoutePoints_Abridged::VT_PTLON, Some(0.0)).unwrap()}
  }
  /// The magnetic declination/variation of the route point location from true north, in degrees. Positive values east of true north and negative values west of true north.
  /// Example: /// Example: 7.35
  /// Constraints: No constraints specified.
  #[inline]
  pub fn magDec(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RoutePoints_Abridged::VT_MAGDEC, Some(0.0)).unwrap()}
  }
  /// The length of the course from the Navigational Aid (NAVAID) in nautical miles.
  /// Example: /// Example: 100.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn navaidLength(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RoutePoints_Abridged::VT_NAVAIDLENGTH, Some(0.0)).unwrap()}
  }
  /// Navigational Aid (NAVAID) identification code.
  /// Example: /// Example: HTO
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn navaid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RoutePoints_Abridged::VT_NAVAID, None)}
  }
  /// The DoD Standard Country Code designator for the country where the route point resides. This field should be set to "OTHR" if the source value does not match a UDL country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: NL
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn countryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RoutePoints_Abridged::VT_COUNTRYCODE, None)}
  }
  /// Specifies an alternate country code if the data provider code is not part of an official NAVAID Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn altCountryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RoutePoints_Abridged::VT_ALTCOUNTRYCODE, None)}
  }
  /// The NAVAID type of this route point (ex. VOR, VORTAC, TACAN, etc.).
  /// Example: /// Example: VORTAC
  /// Constraints: Minimum length = 0, Maximum length = 12
  #[inline]
  pub fn navaidType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RoutePoints_Abridged::VT_NAVAIDTYPE, None)}
  }
}

impl flatbuffers::Verifiable for RoutePoints_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("ptSequenceId", Self::VT_PTSEQUENCEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ptTypeCode", Self::VT_PTTYPECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ptTypeName", Self::VT_PTTYPENAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("waypointName", Self::VT_WAYPOINTNAME, false)?
     .visit_field::<bool>("dafifPt", Self::VT_DAFIFPT, false)?
     .visit_field::<f64>("ptLat", Self::VT_PTLAT, false)?
     .visit_field::<f64>("ptLon", Self::VT_PTLON, false)?
     .visit_field::<f64>("magDec", Self::VT_MAGDEC, false)?
     .visit_field::<f64>("navaidLength", Self::VT_NAVAIDLENGTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("navaid", Self::VT_NAVAID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryCode", Self::VT_COUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altCountryCode", Self::VT_ALTCOUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("navaidType", Self::VT_NAVAIDTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct RoutePoints_AbridgedArgs<'a> {
    pub ptSequenceId: i32,
    pub ptTypeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ptTypeName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub waypointName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dafifPt: bool,
    pub ptLat: f64,
    pub ptLon: f64,
    pub magDec: f64,
    pub navaidLength: f64,
    pub navaid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub countryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altCountryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub navaidType: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RoutePoints_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    RoutePoints_AbridgedArgs {
      ptSequenceId: 0,
      ptTypeCode: None,
      ptTypeName: None,
      waypointName: None,
      dafifPt: false,
      ptLat: 0.0,
      ptLon: 0.0,
      magDec: 0.0,
      navaidLength: 0.0,
      navaid: None,
      countryCode: None,
      altCountryCode: None,
      navaidType: None,
    }
  }
}

pub struct RoutePoints_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RoutePoints_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ptSequenceId(&mut self, ptSequenceId: i32) {
    self.fbb_.push_slot::<i32>(RoutePoints_Abridged::VT_PTSEQUENCEID, ptSequenceId, 0);
  }
  #[inline]
  pub fn add_ptTypeCode(&mut self, ptTypeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RoutePoints_Abridged::VT_PTTYPECODE, ptTypeCode);
  }
  #[inline]
  pub fn add_ptTypeName(&mut self, ptTypeName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RoutePoints_Abridged::VT_PTTYPENAME, ptTypeName);
  }
  #[inline]
  pub fn add_waypointName(&mut self, waypointName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RoutePoints_Abridged::VT_WAYPOINTNAME, waypointName);
  }
  #[inline]
  pub fn add_dafifPt(&mut self, dafifPt: bool) {
    self.fbb_.push_slot::<bool>(RoutePoints_Abridged::VT_DAFIFPT, dafifPt, false);
  }
  #[inline]
  pub fn add_ptLat(&mut self, ptLat: f64) {
    self.fbb_.push_slot::<f64>(RoutePoints_Abridged::VT_PTLAT, ptLat, 0.0);
  }
  #[inline]
  pub fn add_ptLon(&mut self, ptLon: f64) {
    self.fbb_.push_slot::<f64>(RoutePoints_Abridged::VT_PTLON, ptLon, 0.0);
  }
  #[inline]
  pub fn add_magDec(&mut self, magDec: f64) {
    self.fbb_.push_slot::<f64>(RoutePoints_Abridged::VT_MAGDEC, magDec, 0.0);
  }
  #[inline]
  pub fn add_navaidLength(&mut self, navaidLength: f64) {
    self.fbb_.push_slot::<f64>(RoutePoints_Abridged::VT_NAVAIDLENGTH, navaidLength, 0.0);
  }
  #[inline]
  pub fn add_navaid(&mut self, navaid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RoutePoints_Abridged::VT_NAVAID, navaid);
  }
  #[inline]
  pub fn add_countryCode(&mut self, countryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RoutePoints_Abridged::VT_COUNTRYCODE, countryCode);
  }
  #[inline]
  pub fn add_altCountryCode(&mut self, altCountryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RoutePoints_Abridged::VT_ALTCOUNTRYCODE, altCountryCode);
  }
  #[inline]
  pub fn add_navaidType(&mut self, navaidType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RoutePoints_Abridged::VT_NAVAIDTYPE, navaidType);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RoutePoints_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RoutePoints_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RoutePoints_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RoutePoints_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RoutePoints_Abridged");
      ds.field("ptSequenceId", &self.ptSequenceId());
      ds.field("ptTypeCode", &self.ptTypeCode());
      ds.field("ptTypeName", &self.ptTypeName());
      ds.field("waypointName", &self.waypointName());
      ds.field("dafifPt", &self.dafifPt());
      ds.field("ptLat", &self.ptLat());
      ds.field("ptLon", &self.ptLon());
      ds.field("magDec", &self.magDec());
      ds.field("navaidLength", &self.navaidLength());
      ds.field("navaid", &self.navaid());
      ds.field("countryCode", &self.countryCode());
      ds.field("altCountryCode", &self.altCountryCode());
      ds.field("navaidType", &self.navaidType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RoutePoints_AbridgedT {
  pub ptSequenceId: i32,
  pub ptTypeCode: Option<String>,
  pub ptTypeName: Option<String>,
  pub waypointName: Option<String>,
  pub dafifPt: bool,
  pub ptLat: f64,
  pub ptLon: f64,
  pub magDec: f64,
  pub navaidLength: f64,
  pub navaid: Option<String>,
  pub countryCode: Option<String>,
  pub altCountryCode: Option<String>,
  pub navaidType: Option<String>,
}
impl Default for RoutePoints_AbridgedT {
  fn default() -> Self {
    Self {
      ptSequenceId: 0,
      ptTypeCode: None,
      ptTypeName: None,
      waypointName: None,
      dafifPt: false,
      ptLat: 0.0,
      ptLon: 0.0,
      magDec: 0.0,
      navaidLength: 0.0,
      navaid: None,
      countryCode: None,
      altCountryCode: None,
      navaidType: None,
    }
  }
}
impl RoutePoints_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RoutePoints_Abridged<'b>> {
    let ptSequenceId = self.ptSequenceId;
    let ptTypeCode = self.ptTypeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ptTypeName = self.ptTypeName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let waypointName = self.waypointName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dafifPt = self.dafifPt;
    let ptLat = self.ptLat;
    let ptLon = self.ptLon;
    let magDec = self.magDec;
    let navaidLength = self.navaidLength;
    let navaid = self.navaid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let countryCode = self.countryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altCountryCode = self.altCountryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let navaidType = self.navaidType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    RoutePoints_Abridged::create(_fbb, &RoutePoints_AbridgedArgs{
      ptSequenceId,
      ptTypeCode,
      ptTypeName,
      waypointName,
      dafifPt,
      ptLat,
      ptLon,
      magDec,
      navaidLength,
      navaid,
      countryCode,
      altCountryCode,
      navaidType,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RoutePoints_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_route_points_abridged_unchecked`.
pub fn root_as_route_points_abridged(buf: &[u8]) -> Result<RoutePoints_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RoutePoints_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RoutePoints_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_route_points_abridged_unchecked`.
pub fn size_prefixed_root_as_route_points_abridged(buf: &[u8]) -> Result<RoutePoints_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RoutePoints_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RoutePoints_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_route_points_abridged_unchecked`.
pub fn root_as_route_points_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RoutePoints_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RoutePoints_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RoutePoints_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_route_points_abridged_unchecked`.
pub fn size_prefixed_root_as_route_points_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RoutePoints_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RoutePoints_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RoutePoints_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RoutePoints_Abridged`.
pub unsafe fn root_as_route_points_abridged_unchecked(buf: &[u8]) -> RoutePoints_Abridged {
  flatbuffers::root_unchecked::<RoutePoints_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RoutePoints_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RoutePoints_Abridged`.
pub unsafe fn size_prefixed_root_as_route_points_abridged_unchecked(buf: &[u8]) -> RoutePoints_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<RoutePoints_Abridged>(buf)
}
pub const ROUTE_POINTS_ABRIDGED_IDENTIFIER: &str = "ROUT";

#[inline]
pub fn route_points_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ROUTE_POINTS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn route_points_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ROUTE_POINTS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_route_points_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RoutePoints_Abridged<'a>>) {
  fbb.finish(root, Some(ROUTE_POINTS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_route_points_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RoutePoints_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(ROUTE_POINTS_ABRIDGED_IDENTIFIER));
}
