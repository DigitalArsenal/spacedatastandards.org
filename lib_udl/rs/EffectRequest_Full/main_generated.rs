// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_EFFECT_REQUEST_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_EFFECT_REQUEST_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_EFFECT_REQUEST_FULL_DATA_MODE_ENUM: [EffectRequest_Full_dataMode_Enum; 4] = [
  EffectRequest_Full_dataMode_Enum::REAL,
  EffectRequest_Full_dataMode_Enum::TEST,
  EffectRequest_Full_dataMode_Enum::SIMULATED,
  EffectRequest_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EffectRequest_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl EffectRequest_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EffectRequest_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EffectRequest_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EffectRequest_Full_dataMode_Enum {
    type Output = EffectRequest_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EffectRequest_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EffectRequest_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EffectRequest_Full_dataMode_Enum {}
pub enum EffectRequest_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A request for various effects on a target.
pub struct EffectRequest_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EffectRequest_Full<'a> {
  type Inner = EffectRequest_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EffectRequest_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_EXTERNALREQUESTID: flatbuffers::VOffsetT = 8;
  pub const VT_EFFECTLIST: flatbuffers::VOffsetT = 10;
  pub const VT_STATE: flatbuffers::VOffsetT = 12;
  pub const VT_CONTEXT: flatbuffers::VOffsetT = 14;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 16;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 18;
  pub const VT_DEADLINETYPE: flatbuffers::VOffsetT = 20;
  pub const VT_TARGETSRCTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_TARGETSRCID: flatbuffers::VOffsetT = 24;
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 26;
  pub const VT_MODELCLASS: flatbuffers::VOffsetT = 28;
  pub const VT_METRICTYPES: flatbuffers::VOffsetT = 30;
  pub const VT_METRICWEIGHTS: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 38;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 40;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EffectRequest_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EffectRequest_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<EffectRequest_Full<'bldr>> {
    let mut builder = EffectRequest_FullBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.metricWeights { builder.add_metricWeights(x); }
    if let Some(x) = args.metricTypes { builder.add_metricTypes(x); }
    if let Some(x) = args.modelClass { builder.add_modelClass(x); }
    if let Some(x) = args.priority { builder.add_priority(x); }
    if let Some(x) = args.targetSrcId { builder.add_targetSrcId(x); }
    if let Some(x) = args.targetSrcType { builder.add_targetSrcType(x); }
    if let Some(x) = args.deadlineType { builder.add_deadlineType(x); }
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.context { builder.add_context(x); }
    if let Some(x) = args.state { builder.add_state(x); }
    if let Some(x) = args.effectList { builder.add_effectList(x); }
    if let Some(x) = args.externalRequestId { builder.add_externalRequestId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> EffectRequest_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let externalRequestId = self.externalRequestId().map(|x| {
      x.to_string()
    });
    let effectList = self.effectList().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let state = self.state().map(|x| {
      x.to_string()
    });
    let context = self.context().map(|x| {
      x.to_string()
    });
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let deadlineType = self.deadlineType().map(|x| {
      x.to_string()
    });
    let targetSrcType = self.targetSrcType().map(|x| {
      x.to_string()
    });
    let targetSrcId = self.targetSrcId().map(|x| {
      x.to_string()
    });
    let priority = self.priority().map(|x| {
      x.to_string()
    });
    let modelClass = self.modelClass().map(|x| {
      x.to_string()
    });
    let metricTypes = self.metricTypes().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let metricWeights = self.metricWeights().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    EffectRequest_FullT {
      id,
      classificationMarking,
      externalRequestId,
      effectList,
      state,
      context,
      startTime,
      endTime,
      deadlineType,
      targetSrcType,
      targetSrcId,
      priority,
      modelClass,
      metricTypes,
      metricWeights,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: EFFECTREQUEST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The extenal system identifier of this request. A human readable unique id.
  /// Example: /// Example: EXTERNALREQUEST-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalRequestId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_EXTERNALREQUESTID, None)}
  }
  /// List of effects to be achieved on the target (e.g. COVER, DECEIVE, DEGRADE, DENY, DESTROY, DISRUPT, DIVERSION, DIVERT, FIX, INSPECT, INTERCEPT, ISOLATE, MANIPULATE, NEUTRALIZE, SHADOW, SUPPRESS, etc.).  The effects included in this list are connected by implied AND.
  /// Example: /// Example: ['COVER', 'DECEIVE']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn effectList(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EffectRequest_Full::VT_EFFECTLIST, None)}
  }
  /// State of this effect request (e.g. CREATED, UPDATED, DELETED, etc.).
  /// Example: /// Example: CREATED
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn state(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_STATE, None)}
  }
  /// Specific descriptive instantiation of the effect, e.g., playbook to be used.
  /// Example: /// Example: Example Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn context(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_CONTEXT, None)}
  }
  /// The time the effect should start, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_STARTTIME, None)}
  }
  /// The time the effect should end, in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_ENDTIME, None)}
  }
  /// The indicator of deadline of the bid request (e.g. BETWEEN, IMMEDIATE, NOEARLIERTHAN, NOLATERTHAN, etc.):
  /// BETWEEN:&nbsp;Produce effect any time between the given start and end times, equal penalty for being early or late
  /// IMMEDIATE:&nbsp;Start as soon as possible, earlier is always better
  /// NOEARLIERTHAN:&nbsp;Produce effect at this time or later. Large penalty for being earlier, no reward for being later
  /// NOLATERTHAN:&nbsp;Produce effect no later than the given startTime. Large penalty for being later, no reward for being even earlier as long as the effect starts by the given time.
  /// Example: /// Example: NoLaterThan
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn deadlineType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_DEADLINETYPE, None)}
  }
  /// The source type of the targetId identifier (POI, TRACK).
  /// Example: /// Example: POI
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn targetSrcType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_TARGETSRCTYPE, None)}
  }
  /// The record ID, depending on the type identified in targetSrcType, of the requested target. This identifier corresponds to either poi.poiid or track.trkId from their respective schemas.
  /// Example: /// Example: TARGETSRC-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn targetSrcId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_TARGETSRCID, None)}
  }
  /// The priority (LOW, MEDIUM, HIGH) of this request.
  /// Example: /// Example: LOW
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn priority(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_PRIORITY, None)}
  }
  /// The type or class of the preference model used to evaluate this offer.
  /// Example: /// Example: Preference model
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn modelClass(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_MODELCLASS, None)}
  }
  /// Array of the the metric classes to be evaluated (e.g. Cost, GoalAchievement, OpportunityCost, Risk, Timeliness, Unavailable, etc.).  See the associated 'metricWeights' array for the weighting values, positionally corresponding to these types.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  /// Example: /// Example: ['COST', 'RISK']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn metricTypes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EffectRequest_Full::VT_METRICTYPES, None)}
  }
  /// Array of the weights for the metric in the final evaluation score. Normalized (0 to 1).  See the associated 'metricTypes' array for the metric classes, positionally corresponding to these values.  The 'metricTypes' and 'metricWeights' arrays must match in size.
  /// Example: /// Example: [0.5, 0.6]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn metricWeights(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EffectRequest_Full::VT_METRICWEIGHTS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> EffectRequest_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EffectRequest_Full_dataMode_Enum>(EffectRequest_Full::VT_DATAMODE, Some(EffectRequest_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectRequest_Full::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for EffectRequest_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalRequestId", Self::VT_EXTERNALREQUESTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("effectList", Self::VT_EFFECTLIST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("state", Self::VT_STATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("context", Self::VT_CONTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("deadlineType", Self::VT_DEADLINETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("targetSrcType", Self::VT_TARGETSRCTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("targetSrcId", Self::VT_TARGETSRCID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("priority", Self::VT_PRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("modelClass", Self::VT_MODELCLASS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("metricTypes", Self::VT_METRICTYPES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("metricWeights", Self::VT_METRICWEIGHTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<EffectRequest_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct EffectRequest_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalRequestId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub effectList: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub state: Option<flatbuffers::WIPOffset<&'a str>>,
    pub context: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub deadlineType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub targetSrcType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub targetSrcId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub priority: Option<flatbuffers::WIPOffset<&'a str>>,
    pub modelClass: Option<flatbuffers::WIPOffset<&'a str>>,
    pub metricTypes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub metricWeights: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: EffectRequest_Full_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EffectRequest_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    EffectRequest_FullArgs {
      id: None,
      classificationMarking: None,
      externalRequestId: None,
      effectList: None,
      state: None,
      context: None,
      startTime: None,
      endTime: None,
      deadlineType: None,
      targetSrcType: None,
      targetSrcId: None,
      priority: None,
      modelClass: None,
      metricTypes: None,
      metricWeights: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: EffectRequest_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct EffectRequest_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EffectRequest_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_externalRequestId(&mut self, externalRequestId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_EXTERNALREQUESTID, externalRequestId);
  }
  #[inline]
  pub fn add_effectList(&mut self, effectList: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_EFFECTLIST, effectList);
  }
  #[inline]
  pub fn add_state(&mut self, state: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_STATE, state);
  }
  #[inline]
  pub fn add_context(&mut self, context: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_CONTEXT, context);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_deadlineType(&mut self, deadlineType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_DEADLINETYPE, deadlineType);
  }
  #[inline]
  pub fn add_targetSrcType(&mut self, targetSrcType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_TARGETSRCTYPE, targetSrcType);
  }
  #[inline]
  pub fn add_targetSrcId(&mut self, targetSrcId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_TARGETSRCID, targetSrcId);
  }
  #[inline]
  pub fn add_priority(&mut self, priority: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_PRIORITY, priority);
  }
  #[inline]
  pub fn add_modelClass(&mut self, modelClass: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_MODELCLASS, modelClass);
  }
  #[inline]
  pub fn add_metricTypes(&mut self, metricTypes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_METRICTYPES, metricTypes);
  }
  #[inline]
  pub fn add_metricWeights(&mut self, metricWeights: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_METRICWEIGHTS, metricWeights);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: EffectRequest_Full_dataMode_Enum) {
    self.fbb_.push_slot::<EffectRequest_Full_dataMode_Enum>(EffectRequest_Full::VT_DATAMODE, dataMode, EffectRequest_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectRequest_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EffectRequest_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EffectRequest_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EffectRequest_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EffectRequest_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EffectRequest_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("externalRequestId", &self.externalRequestId());
      ds.field("effectList", &self.effectList());
      ds.field("state", &self.state());
      ds.field("context", &self.context());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("deadlineType", &self.deadlineType());
      ds.field("targetSrcType", &self.targetSrcType());
      ds.field("targetSrcId", &self.targetSrcId());
      ds.field("priority", &self.priority());
      ds.field("modelClass", &self.modelClass());
      ds.field("metricTypes", &self.metricTypes());
      ds.field("metricWeights", &self.metricWeights());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EffectRequest_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub externalRequestId: Option<String>,
  pub effectList: Option<Vec<String>>,
  pub state: Option<String>,
  pub context: Option<String>,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub deadlineType: Option<String>,
  pub targetSrcType: Option<String>,
  pub targetSrcId: Option<String>,
  pub priority: Option<String>,
  pub modelClass: Option<String>,
  pub metricTypes: Option<Vec<String>>,
  pub metricWeights: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: EffectRequest_Full_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for EffectRequest_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      externalRequestId: None,
      effectList: None,
      state: None,
      context: None,
      startTime: None,
      endTime: None,
      deadlineType: None,
      targetSrcType: None,
      targetSrcId: None,
      priority: None,
      modelClass: None,
      metricTypes: None,
      metricWeights: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: EffectRequest_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl EffectRequest_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EffectRequest_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalRequestId = self.externalRequestId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let effectList = self.effectList.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let state = self.state.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let context = self.context.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let deadlineType = self.deadlineType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let targetSrcType = self.targetSrcType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let targetSrcId = self.targetSrcId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let priority = self.priority.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let modelClass = self.modelClass.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let metricTypes = self.metricTypes.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let metricWeights = self.metricWeights.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EffectRequest_Full::create(_fbb, &EffectRequest_FullArgs{
      id,
      classificationMarking,
      externalRequestId,
      effectList,
      state,
      context,
      startTime,
      endTime,
      deadlineType,
      targetSrcType,
      targetSrcId,
      priority,
      modelClass,
      metricTypes,
      metricWeights,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EffectRequest_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_request_full_unchecked`.
pub fn root_as_effect_request_full(buf: &[u8]) -> Result<EffectRequest_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EffectRequest_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EffectRequest_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_effect_request_full_unchecked`.
pub fn size_prefixed_root_as_effect_request_full(buf: &[u8]) -> Result<EffectRequest_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EffectRequest_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EffectRequest_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_request_full_unchecked`.
pub fn root_as_effect_request_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectRequest_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EffectRequest_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EffectRequest_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_request_full_unchecked`.
pub fn size_prefixed_root_as_effect_request_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectRequest_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EffectRequest_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EffectRequest_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EffectRequest_Full`.
pub unsafe fn root_as_effect_request_full_unchecked(buf: &[u8]) -> EffectRequest_Full {
  flatbuffers::root_unchecked::<EffectRequest_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EffectRequest_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EffectRequest_Full`.
pub unsafe fn size_prefixed_root_as_effect_request_full_unchecked(buf: &[u8]) -> EffectRequest_Full {
  flatbuffers::size_prefixed_root_unchecked::<EffectRequest_Full>(buf)
}
pub const EFFECT_REQUEST_FULL_IDENTIFIER: &str = "EFFE";

#[inline]
pub fn effect_request_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_REQUEST_FULL_IDENTIFIER, false)
}

#[inline]
pub fn effect_request_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_REQUEST_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_effect_request_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EffectRequest_Full<'a>>) {
  fbb.finish(root, Some(EFFECT_REQUEST_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_effect_request_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EffectRequest_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(EFFECT_REQUEST_FULL_IDENTIFIER));
}
