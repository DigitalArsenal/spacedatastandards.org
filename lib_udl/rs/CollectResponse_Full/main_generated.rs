// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_COLLECT_RESPONSE_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_COLLECT_RESPONSE_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_COLLECT_RESPONSE_FULL_DATA_MODE_ENUM: [CollectResponse_Full_dataMode_Enum; 4] = [
  CollectResponse_Full_dataMode_Enum::REAL,
  CollectResponse_Full_dataMode_Enum::TEST,
  CollectResponse_Full_dataMode_Enum::SIMULATED,
  CollectResponse_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct CollectResponse_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl CollectResponse_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for CollectResponse_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for CollectResponse_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for CollectResponse_Full_dataMode_Enum {
    type Output = CollectResponse_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for CollectResponse_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for CollectResponse_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for CollectResponse_Full_dataMode_Enum {}
pub enum CollectResponse_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collect response supports the response and status of individual collect requests. Each response is referenced by the UUID of the request, and contains information including the status of the request, collection times and types, and reference(s) to the observations collected. There may be multiple responses associated with a request, either from multiple collectors or to relay status changes prior to completion and delivery.
pub struct CollectResponse_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CollectResponse_Full<'a> {
  type Inner = CollectResponse_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CollectResponse_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDREQUEST: flatbuffers::VOffsetT = 8;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 10;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 12;
  pub const VT_SATNO: flatbuffers::VOffsetT = 14;
  pub const VT_ONORBIT: flatbuffers::VOffsetT = 16;
  pub const VT_TASKID: flatbuffers::VOffsetT = 18;
  pub const VT_IDPLAN: flatbuffers::VOffsetT = 20;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 22;
  pub const VT_STATUS: flatbuffers::VOffsetT = 24;
  pub const VT_ACTUALSTARTTIME: flatbuffers::VOffsetT = 26;
  pub const VT_ACTUALENDTIME: flatbuffers::VOffsetT = 28;
  pub const VT_ALTSTARTTIME: flatbuffers::VOffsetT = 30;
  pub const VT_ALTENDTIME: flatbuffers::VOffsetT = 32;
  pub const VT_ERRCODE: flatbuffers::VOffsetT = 34;
  pub const VT_SRCTYPS: flatbuffers::VOffsetT = 36;
  pub const VT_SRCIDS: flatbuffers::VOffsetT = 38;
  pub const VT_NOTES: flatbuffers::VOffsetT = 40;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 42;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 44;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 46;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 48;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 50;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 52;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 54;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 56;
  pub const VT_TAGS: flatbuffers::VOffsetT = 58;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CollectResponse_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CollectResponse_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<CollectResponse_Full<'bldr>> {
    let mut builder = CollectResponse_FullBuilder::new(_fbb);
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.srcIds { builder.add_srcIds(x); }
    if let Some(x) = args.srcTyps { builder.add_srcTyps(x); }
    if let Some(x) = args.errCode { builder.add_errCode(x); }
    if let Some(x) = args.altEndTime { builder.add_altEndTime(x); }
    if let Some(x) = args.altStartTime { builder.add_altStartTime(x); }
    if let Some(x) = args.actualEndTime { builder.add_actualEndTime(x); }
    if let Some(x) = args.actualStartTime { builder.add_actualStartTime(x); }
    if let Some(x) = args.status { builder.add_status(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.idPlan { builder.add_idPlan(x); }
    if let Some(x) = args.taskId { builder.add_taskId(x); }
    if let Some(x) = args.onOrbit { builder.add_onOrbit(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.idRequest { builder.add_idRequest(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> CollectResponse_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idRequest = self.idRequest().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let onOrbit = self.onOrbit().map(|x| {
      x.to_string()
    });
    let taskId = self.taskId().map(|x| {
      x.to_string()
    });
    let idPlan = self.idPlan().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let status = self.status().map(|x| {
      x.to_string()
    });
    let actualStartTime = self.actualStartTime().map(|x| {
      x.to_string()
    });
    let actualEndTime = self.actualEndTime().map(|x| {
      x.to_string()
    });
    let altStartTime = self.altStartTime().map(|x| {
      x.to_string()
    });
    let altEndTime = self.altEndTime().map(|x| {
      x.to_string()
    });
    let errCode = self.errCode().map(|x| {
      x.to_string()
    });
    let srcTyps = self.srcTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcIds = self.srcIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    CollectResponse_FullT {
      id,
      classificationMarking,
      idRequest,
      idOnOrbit,
      origObjectId,
      satNo,
      onOrbit,
      taskId,
      idPlan,
      externalId,
      status,
      actualStartTime,
      actualEndTime,
      altStartTime,
      altEndTime,
      errCode,
      srcTyps,
      srcIds,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      idSensor,
      origSensorId,
      dataMode,
      tags,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: COLLECTRESPONSE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the request associated with this response.
  /// Example: /// Example: REF-REQUEST-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idRequest(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_IDREQUEST, None)}
  }
  /// Unique identifier of the target on-orbit object associated with this response.
  /// Example: /// Example: REF-ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_IDONORBIT, None)}
  }
  /// Optional identifier provided by data source to indicate the target object of this response. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ORIGOBJECTID, None)}
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(CollectResponse_Full::VT_SATNO, Some(0)).unwrap()}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn onOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ONORBIT, None)}
  }
  /// Optional task ID associated with the request/response.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn taskId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_TASKID, None)}
  }
  /// Unique identifier of the parent plan or schedule associated with the request/response.
  /// Example: /// Example: REF-PLAN-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idPlan(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_IDPLAN, None)}
  }
  /// UUID from external systems.  This field has no meaning within UDL and is provided as a convenience for systems that require tracking of internal system generated ID.
  /// Example: /// Example: EXTERNAL-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_EXTERNALID, None)}
  }
  /// The status of the request (ACCEPTED, CANCELLED, COLLECTED, COMPLETED, DELIVERED, FAILED, PARTIAL, PROPOSED, REJECTED, SCHEDULED):
  /// ACCEPTED: The collect or contact request has been received and accepted.
  /// CANCELLED: A previously scheduled collect or contact whose execution was cancelled.
  /// COLLECTED: The collect has been accomplished. A collected state implies that additional activity is required for delivery/completion.
  /// COMPLETED: The collect or contact has been completed. For many systems completed and delivered constitute an equivalent successful end state.
  /// DELIVERED: The collected observation(s) have been delivered to the requestor. For many systems completed and delivered constitute an equivalent successful end state. A DELIVERED state is typically used for systems that exhibit a delay between collect and delivery, such as with space-based systems which require ground contact to deliver observations.
  /// FAILED: The collect or contact was attempted and failed, or the delivery of the collected observation(s) failed. A FAILED status may be accompanied by an error code (errCode), if available.
  /// PARTIAL: A PARTIAL state indicates that a part of a multi-track request has been accomplished, but the full request is incomplete. A PARTIAL status should ultimately be resolved to an end state.
  /// PROPOSED: Indicates that the request was received and alternate collect or contact time(s) (altStartTime, altEndTime) have been proposed. If an alternate is accepted by the requestor the current request should be cancelled and a new request created.
  /// REJECTED: The request has been received and rejected by the provider. A REJECTED status may be accompanied by an explanation (notes) of the reason that the request was rejected.
  /// SCHEDULED: The request was received and has been scheduled for execution.
  /// Example: /// Example: ACCEPTED
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn status(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_STATUS, None)}
  }
  /// The actual start time of the collect or contact, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ACTUALSTARTTIME, None)}
  }
  /// The actual end time of the collect or contact, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T18:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualEndTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ACTUALENDTIME, None)}
  }
  /// Proposed alternative start time, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn altStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ALTSTARTTIME, None)}
  }
  /// Proposed alternative end time, in ISO 8601 UTC format.
  /// Example: /// Example: 2018-01-01T18:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn altEndTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ALTENDTIME, None)}
  }
  /// Error code associated with this request/response.
  /// Example: /// Example: ERROR CODE
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn errCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ERRCODE, None)}
  }
  /// Array of UDL record type(s) (DOA, ELSET, EO, RADAR, RF, SV) collected or produced in response to the associated request.  See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['DOA', 'DWELL']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CollectResponse_Full::VT_SRCTYPS, None)}
  }
  /// Array of UUIDs of the UDL data record(s) collected in response to the associated request.  See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array.  The 'srcTyps' and 'srcIds' arrays must match in size.  The appropriate API operation can be used to retrieve the specified object(s) (e.g. /udl/rfobservation/{uuid}).
  /// Example: /// Example: ['DOA_ID', 'DWELL_ID']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CollectResponse_Full::VT_SRCIDS, None)}
  }
  /// Notes or comments associated with this response.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_NOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ORIGNETWORK, None)}
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: REF-SENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_IDSENSOR, None)}
  }
  /// Optional identifier provided by the collection source to indicate the sensor identifier responding to this collect or contact. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CollectResponse_Full::VT_ORIGSENSORID, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> CollectResponse_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CollectResponse_Full_dataMode_Enum>(CollectResponse_Full::VT_DATAMODE, Some(CollectResponse_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(CollectResponse_Full::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for CollectResponse_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idRequest", Self::VT_IDREQUEST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("onOrbit", Self::VT_ONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("taskId", Self::VT_TASKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idPlan", Self::VT_IDPLAN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("status", Self::VT_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualStartTime", Self::VT_ACTUALSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualEndTime", Self::VT_ACTUALENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altStartTime", Self::VT_ALTSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altEndTime", Self::VT_ALTENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("errCode", Self::VT_ERRCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcTyps", Self::VT_SRCTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcIds", Self::VT_SRCIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<CollectResponse_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct CollectResponse_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idRequest: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub onOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub taskId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idPlan: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub status: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualEndTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altEndTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub errCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub srcTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: CollectResponse_Full_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for CollectResponse_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    CollectResponse_FullArgs {
      id: None,
      classificationMarking: None,
      idRequest: None,
      idOnOrbit: None,
      origObjectId: None,
      satNo: 0,
      onOrbit: None,
      taskId: None,
      idPlan: None,
      externalId: None,
      status: None,
      actualStartTime: None,
      actualEndTime: None,
      altStartTime: None,
      altEndTime: None,
      errCode: None,
      srcTyps: None,
      srcIds: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      idSensor: None,
      origSensorId: None,
      dataMode: CollectResponse_Full_dataMode_Enum::REAL,
      tags: None,
    }
  }
}

pub struct CollectResponse_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CollectResponse_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idRequest(&mut self, idRequest: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_IDREQUEST, idRequest);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(CollectResponse_Full::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_onOrbit(&mut self, onOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ONORBIT, onOrbit);
  }
  #[inline]
  pub fn add_taskId(&mut self, taskId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_TASKID, taskId);
  }
  #[inline]
  pub fn add_idPlan(&mut self, idPlan: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_IDPLAN, idPlan);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_status(&mut self, status: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_STATUS, status);
  }
  #[inline]
  pub fn add_actualStartTime(&mut self, actualStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ACTUALSTARTTIME, actualStartTime);
  }
  #[inline]
  pub fn add_actualEndTime(&mut self, actualEndTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ACTUALENDTIME, actualEndTime);
  }
  #[inline]
  pub fn add_altStartTime(&mut self, altStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ALTSTARTTIME, altStartTime);
  }
  #[inline]
  pub fn add_altEndTime(&mut self, altEndTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ALTENDTIME, altEndTime);
  }
  #[inline]
  pub fn add_errCode(&mut self, errCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ERRCODE, errCode);
  }
  #[inline]
  pub fn add_srcTyps(&mut self, srcTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_SRCTYPS, srcTyps);
  }
  #[inline]
  pub fn add_srcIds(&mut self, srcIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_SRCIDS, srcIds);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: CollectResponse_Full_dataMode_Enum) {
    self.fbb_.push_slot::<CollectResponse_Full_dataMode_Enum>(CollectResponse_Full::VT_DATAMODE, dataMode, CollectResponse_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CollectResponse_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CollectResponse_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CollectResponse_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CollectResponse_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CollectResponse_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CollectResponse_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idRequest", &self.idRequest());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("satNo", &self.satNo());
      ds.field("onOrbit", &self.onOrbit());
      ds.field("taskId", &self.taskId());
      ds.field("idPlan", &self.idPlan());
      ds.field("externalId", &self.externalId());
      ds.field("status", &self.status());
      ds.field("actualStartTime", &self.actualStartTime());
      ds.field("actualEndTime", &self.actualEndTime());
      ds.field("altStartTime", &self.altStartTime());
      ds.field("altEndTime", &self.altEndTime());
      ds.field("errCode", &self.errCode());
      ds.field("srcTyps", &self.srcTyps());
      ds.field("srcIds", &self.srcIds());
      ds.field("notes", &self.notes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("idSensor", &self.idSensor());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CollectResponse_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idRequest: Option<String>,
  pub idOnOrbit: Option<String>,
  pub origObjectId: Option<String>,
  pub satNo: i32,
  pub onOrbit: Option<String>,
  pub taskId: Option<String>,
  pub idPlan: Option<String>,
  pub externalId: Option<String>,
  pub status: Option<String>,
  pub actualStartTime: Option<String>,
  pub actualEndTime: Option<String>,
  pub altStartTime: Option<String>,
  pub altEndTime: Option<String>,
  pub errCode: Option<String>,
  pub srcTyps: Option<Vec<String>>,
  pub srcIds: Option<Vec<String>>,
  pub notes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub idSensor: Option<String>,
  pub origSensorId: Option<String>,
  pub dataMode: CollectResponse_Full_dataMode_Enum,
  pub tags: Option<Vec<String>>,
}
impl Default for CollectResponse_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idRequest: None,
      idOnOrbit: None,
      origObjectId: None,
      satNo: 0,
      onOrbit: None,
      taskId: None,
      idPlan: None,
      externalId: None,
      status: None,
      actualStartTime: None,
      actualEndTime: None,
      altStartTime: None,
      altEndTime: None,
      errCode: None,
      srcTyps: None,
      srcIds: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      idSensor: None,
      origSensorId: None,
      dataMode: CollectResponse_Full_dataMode_Enum::REAL,
      tags: None,
    }
  }
}
impl CollectResponse_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CollectResponse_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idRequest = self.idRequest.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let onOrbit = self.onOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let taskId = self.taskId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idPlan = self.idPlan.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let status = self.status.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualStartTime = self.actualStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualEndTime = self.actualEndTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altStartTime = self.altStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altEndTime = self.altEndTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let errCode = self.errCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let srcTyps = self.srcTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcIds = self.srcIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    CollectResponse_Full::create(_fbb, &CollectResponse_FullArgs{
      id,
      classificationMarking,
      idRequest,
      idOnOrbit,
      origObjectId,
      satNo,
      onOrbit,
      taskId,
      idPlan,
      externalId,
      status,
      actualStartTime,
      actualEndTime,
      altStartTime,
      altEndTime,
      errCode,
      srcTyps,
      srcIds,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      idSensor,
      origSensorId,
      dataMode,
      tags,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CollectResponse_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_collect_response_full_unchecked`.
pub fn root_as_collect_response_full(buf: &[u8]) -> Result<CollectResponse_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CollectResponse_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CollectResponse_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_collect_response_full_unchecked`.
pub fn size_prefixed_root_as_collect_response_full(buf: &[u8]) -> Result<CollectResponse_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CollectResponse_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CollectResponse_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_collect_response_full_unchecked`.
pub fn root_as_collect_response_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CollectResponse_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CollectResponse_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CollectResponse_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_collect_response_full_unchecked`.
pub fn size_prefixed_root_as_collect_response_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CollectResponse_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CollectResponse_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CollectResponse_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CollectResponse_Full`.
pub unsafe fn root_as_collect_response_full_unchecked(buf: &[u8]) -> CollectResponse_Full {
  flatbuffers::root_unchecked::<CollectResponse_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CollectResponse_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CollectResponse_Full`.
pub unsafe fn size_prefixed_root_as_collect_response_full_unchecked(buf: &[u8]) -> CollectResponse_Full {
  flatbuffers::size_prefixed_root_unchecked::<CollectResponse_Full>(buf)
}
pub const COLLECT_RESPONSE_FULL_IDENTIFIER: &str = "COLL";

#[inline]
pub fn collect_response_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, COLLECT_RESPONSE_FULL_IDENTIFIER, false)
}

#[inline]
pub fn collect_response_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, COLLECT_RESPONSE_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_collect_response_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<CollectResponse_Full<'a>>) {
  fbb.finish(root, Some(COLLECT_RESPONSE_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_collect_response_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<CollectResponse_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(COLLECT_RESPONSE_FULL_IDENTIFIER));
}
