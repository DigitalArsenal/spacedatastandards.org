// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_DIPLOMATIC_CLEARANCE_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_DIPLOMATIC_CLEARANCE_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_DIPLOMATIC_CLEARANCE_ABRIDGED_DATA_MODE_ENUM: [DiplomaticClearance_Abridged_dataMode_Enum; 4] = [
  DiplomaticClearance_Abridged_dataMode_Enum::REAL,
  DiplomaticClearance_Abridged_dataMode_Enum::TEST,
  DiplomaticClearance_Abridged_dataMode_Enum::SIMULATED,
  DiplomaticClearance_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct DiplomaticClearance_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl DiplomaticClearance_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for DiplomaticClearance_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for DiplomaticClearance_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for DiplomaticClearance_Abridged_dataMode_Enum {
    type Output = DiplomaticClearance_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for DiplomaticClearance_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for DiplomaticClearance_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for DiplomaticClearance_Abridged_dataMode_Enum {}
pub enum DiplomaticClearance_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A diplomatic clearance is an authorization for an aircraft to traverse or land within a specified country.
pub struct DiplomaticClearance_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DiplomaticClearance_Abridged<'a> {
  type Inner = DiplomaticClearance_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DiplomaticClearance_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDMISSION: flatbuffers::VOffsetT = 8;
  pub const VT_EXTERNALWORKSHEETID: flatbuffers::VOffsetT = 10;
  pub const VT_DIPWORKSHEETNAME: flatbuffers::VOffsetT = 12;
  pub const VT_FIRSTDEPDATE: flatbuffers::VOffsetT = 14;
  pub const VT_DOCDEADLINE: flatbuffers::VOffsetT = 16;
  pub const VT_APACSID: flatbuffers::VOffsetT = 18;
  pub const VT_DIPLOMATICCLEARANCEDETAILS: flatbuffers::VOffsetT = 20;
  pub const VT_DIPLOMATICCLEARANCEREMARKS: flatbuffers::VOffsetT = 22;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 24;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 26;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 28;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 30;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 32;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 34;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 36;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 38;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 40;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DiplomaticClearance_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DiplomaticClearance_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<DiplomaticClearance_Abridged<'bldr>> {
    let mut builder = DiplomaticClearance_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.diplomaticClearanceRemarks { builder.add_diplomaticClearanceRemarks(x); }
    if let Some(x) = args.diplomaticClearanceDetails { builder.add_diplomaticClearanceDetails(x); }
    if let Some(x) = args.apacsId { builder.add_apacsId(x); }
    if let Some(x) = args.docDeadline { builder.add_docDeadline(x); }
    if let Some(x) = args.firstDepDate { builder.add_firstDepDate(x); }
    if let Some(x) = args.dipWorksheetName { builder.add_dipWorksheetName(x); }
    if let Some(x) = args.externalWorksheetId { builder.add_externalWorksheetId(x); }
    if let Some(x) = args.idMission { builder.add_idMission(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> DiplomaticClearance_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idMission = self.idMission().map(|x| {
      x.to_string()
    });
    let externalWorksheetId = self.externalWorksheetId().map(|x| {
      x.to_string()
    });
    let dipWorksheetName = self.dipWorksheetName().map(|x| {
      x.to_string()
    });
    let firstDepDate = self.firstDepDate().map(|x| {
      x.to_string()
    });
    let docDeadline = self.docDeadline().map(|x| {
      x.to_string()
    });
    let apacsId = self.apacsId().map(|x| {
      x.to_string()
    });
    let diplomaticClearanceDetails = self.diplomaticClearanceDetails().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let diplomaticClearanceRemarks = self.diplomaticClearanceRemarks().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    DiplomaticClearance_AbridgedT {
      id,
      classificationMarking,
      idMission,
      externalWorksheetId,
      dipWorksheetName,
      firstDepDate,
      docDeadline,
      apacsId,
      diplomaticClearanceDetails,
      diplomaticClearanceRemarks,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: 25059135-4afc-45c2-b78b-d6e843dbd96d
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the Mission associated with this diplomatic clearance record.
  /// Example: /// Example: 0dba1363-2d09-49fa-a784-4bb4cbb1674a
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idMission(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_IDMISSION, None)}
  }
  /// Optional diplomatic clearance worksheet ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 990ae849089e3d6cad69655324176bb6
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalWorksheetId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_EXTERNALWORKSHEETID, None)}
  }
  /// Identifier of the Diplomatic Clearance Worksheet used to coordinate aircraft clearance requests.
  /// Example: /// Example: G2-939911-AC
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn dipWorksheetName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_DIPWORKSHEETNAME, None)}
  }
  /// The First Departure Date (FDD) the mission is scheduled for departure, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn firstDepDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_FIRSTDEPDATE, None)}
  }
  /// Suspense date for the diplomatic clearance worksheet to be worked, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn docDeadline(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_DOCDEADLINE, None)}
  }
  /// The Aircraft and Personnel Automated Clearance System (APACS) system identifier used to process and approve this clearance request.
  /// Example: /// Example: 1083034
  /// Constraints: Minimum length = 0, Maximum length = 40
  #[inline]
  pub fn apacsId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_APACSID, None)}
  }
  /// Collection of diplomatic clearance details.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn diplomaticClearanceDetails(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DiplomaticClearance_Abridged::VT_DIPLOMATICCLEARANCEDETAILS, None)}
  }
  /// Collection of diplomatic clearance remarks.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn diplomaticClearanceRemarks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(DiplomaticClearance_Abridged::VT_DIPLOMATICCLEARANCEREMARKS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_UPDATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearance_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> DiplomaticClearance_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<DiplomaticClearance_Abridged_dataMode_Enum>(DiplomaticClearance_Abridged::VT_DATAMODE, Some(DiplomaticClearance_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for DiplomaticClearance_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idMission", Self::VT_IDMISSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalWorksheetId", Self::VT_EXTERNALWORKSHEETID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dipWorksheetName", Self::VT_DIPWORKSHEETNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("firstDepDate", Self::VT_FIRSTDEPDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("docDeadline", Self::VT_DOCDEADLINE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("apacsId", Self::VT_APACSID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("diplomaticClearanceDetails", Self::VT_DIPLOMATICCLEARANCEDETAILS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("diplomaticClearanceRemarks", Self::VT_DIPLOMATICCLEARANCEREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<DiplomaticClearance_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct DiplomaticClearance_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idMission: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalWorksheetId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dipWorksheetName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub firstDepDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub docDeadline: Option<flatbuffers::WIPOffset<&'a str>>,
    pub apacsId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub diplomaticClearanceDetails: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub diplomaticClearanceRemarks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: DiplomaticClearance_Abridged_dataMode_Enum,
}
impl<'a> Default for DiplomaticClearance_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    DiplomaticClearance_AbridgedArgs {
      id: None,
      classificationMarking: None,
      idMission: None,
      externalWorksheetId: None,
      dipWorksheetName: None,
      firstDepDate: None,
      docDeadline: None,
      apacsId: None,
      diplomaticClearanceDetails: None,
      diplomaticClearanceRemarks: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: DiplomaticClearance_Abridged_dataMode_Enum::REAL,
    }
  }
}

pub struct DiplomaticClearance_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DiplomaticClearance_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idMission(&mut self, idMission: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_IDMISSION, idMission);
  }
  #[inline]
  pub fn add_externalWorksheetId(&mut self, externalWorksheetId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_EXTERNALWORKSHEETID, externalWorksheetId);
  }
  #[inline]
  pub fn add_dipWorksheetName(&mut self, dipWorksheetName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_DIPWORKSHEETNAME, dipWorksheetName);
  }
  #[inline]
  pub fn add_firstDepDate(&mut self, firstDepDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_FIRSTDEPDATE, firstDepDate);
  }
  #[inline]
  pub fn add_docDeadline(&mut self, docDeadline: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_DOCDEADLINE, docDeadline);
  }
  #[inline]
  pub fn add_apacsId(&mut self, apacsId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_APACSID, apacsId);
  }
  #[inline]
  pub fn add_diplomaticClearanceDetails(&mut self, diplomaticClearanceDetails: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_DIPLOMATICCLEARANCEDETAILS, diplomaticClearanceDetails);
  }
  #[inline]
  pub fn add_diplomaticClearanceRemarks(&mut self, diplomaticClearanceRemarks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_DIPLOMATICCLEARANCEREMARKS, diplomaticClearanceRemarks);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearance_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: DiplomaticClearance_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<DiplomaticClearance_Abridged_dataMode_Enum>(DiplomaticClearance_Abridged::VT_DATAMODE, dataMode, DiplomaticClearance_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DiplomaticClearance_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DiplomaticClearance_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DiplomaticClearance_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DiplomaticClearance_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DiplomaticClearance_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idMission", &self.idMission());
      ds.field("externalWorksheetId", &self.externalWorksheetId());
      ds.field("dipWorksheetName", &self.dipWorksheetName());
      ds.field("firstDepDate", &self.firstDepDate());
      ds.field("docDeadline", &self.docDeadline());
      ds.field("apacsId", &self.apacsId());
      ds.field("diplomaticClearanceDetails", &self.diplomaticClearanceDetails());
      ds.field("diplomaticClearanceRemarks", &self.diplomaticClearanceRemarks());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DiplomaticClearance_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idMission: Option<String>,
  pub externalWorksheetId: Option<String>,
  pub dipWorksheetName: Option<String>,
  pub firstDepDate: Option<String>,
  pub docDeadline: Option<String>,
  pub apacsId: Option<String>,
  pub diplomaticClearanceDetails: Option<Vec<String>>,
  pub diplomaticClearanceRemarks: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: DiplomaticClearance_Abridged_dataMode_Enum,
}
impl Default for DiplomaticClearance_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idMission: None,
      externalWorksheetId: None,
      dipWorksheetName: None,
      firstDepDate: None,
      docDeadline: None,
      apacsId: None,
      diplomaticClearanceDetails: None,
      diplomaticClearanceRemarks: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: DiplomaticClearance_Abridged_dataMode_Enum::REAL,
    }
  }
}
impl DiplomaticClearance_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DiplomaticClearance_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idMission = self.idMission.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalWorksheetId = self.externalWorksheetId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dipWorksheetName = self.dipWorksheetName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let firstDepDate = self.firstDepDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let docDeadline = self.docDeadline.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let apacsId = self.apacsId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let diplomaticClearanceDetails = self.diplomaticClearanceDetails.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let diplomaticClearanceRemarks = self.diplomaticClearanceRemarks.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    DiplomaticClearance_Abridged::create(_fbb, &DiplomaticClearance_AbridgedArgs{
      id,
      classificationMarking,
      idMission,
      externalWorksheetId,
      dipWorksheetName,
      firstDepDate,
      docDeadline,
      apacsId,
      diplomaticClearanceDetails,
      diplomaticClearanceRemarks,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DiplomaticClearance_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_abridged_unchecked`.
pub fn root_as_diplomatic_clearance_abridged(buf: &[u8]) -> Result<DiplomaticClearance_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DiplomaticClearance_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DiplomaticClearance_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_diplomatic_clearance_abridged_unchecked`.
pub fn size_prefixed_root_as_diplomatic_clearance_abridged(buf: &[u8]) -> Result<DiplomaticClearance_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DiplomaticClearance_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DiplomaticClearance_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_abridged_unchecked`.
pub fn root_as_diplomatic_clearance_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiplomaticClearance_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DiplomaticClearance_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DiplomaticClearance_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_abridged_unchecked`.
pub fn size_prefixed_root_as_diplomatic_clearance_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiplomaticClearance_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DiplomaticClearance_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DiplomaticClearance_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DiplomaticClearance_Abridged`.
pub unsafe fn root_as_diplomatic_clearance_abridged_unchecked(buf: &[u8]) -> DiplomaticClearance_Abridged {
  flatbuffers::root_unchecked::<DiplomaticClearance_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DiplomaticClearance_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DiplomaticClearance_Abridged`.
pub unsafe fn size_prefixed_root_as_diplomatic_clearance_abridged_unchecked(buf: &[u8]) -> DiplomaticClearance_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<DiplomaticClearance_Abridged>(buf)
}
pub const DIPLOMATIC_CLEARANCE_ABRIDGED_IDENTIFIER: &str = "DIPL";

#[inline]
pub fn diplomatic_clearance_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIPLOMATIC_CLEARANCE_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn diplomatic_clearance_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIPLOMATIC_CLEARANCE_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_diplomatic_clearance_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DiplomaticClearance_Abridged<'a>>) {
  fbb.finish(root, Some(DIPLOMATIC_CLEARANCE_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_diplomatic_clearance_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DiplomaticClearance_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(DIPLOMATIC_CLEARANCE_ABRIDGED_IDENTIFIER));
}
