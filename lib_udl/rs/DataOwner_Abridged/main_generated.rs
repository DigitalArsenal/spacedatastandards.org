// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DataOwner_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information pertaining to UDL data owners.
pub struct DataOwner_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DataOwner_Abridged<'a> {
  type Inner = DataOwner_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DataOwner_Abridged<'a> {
  pub const VT_DONAME: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_OWNERTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_DATATYPE: flatbuffers::VOffsetT = 10;
  pub const VT_PROVIDER: flatbuffers::VOffsetT = 12;
  pub const VT_COUNTRYCODE: flatbuffers::VOffsetT = 14;
  pub const VT_IDCONTACT: flatbuffers::VOffsetT = 16;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 18;
  pub const VT_CONTROL: flatbuffers::VOffsetT = 20;
  pub const VT_ENABLED: flatbuffers::VOffsetT = 22;
  pub const VT_COMINGSOON: flatbuffers::VOffsetT = 24;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 26;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DataOwner_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DataOwner_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<DataOwner_Abridged<'bldr>> {
    let mut builder = DataOwner_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.control { builder.add_control(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.idContact { builder.add_idContact(x); }
    if let Some(x) = args.countryCode { builder.add_countryCode(x); }
    if let Some(x) = args.provider { builder.add_provider(x); }
    if let Some(x) = args.dataType { builder.add_dataType(x); }
    if let Some(x) = args.ownerType { builder.add_ownerType(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.doName { builder.add_doName(x); }
    builder.add_comingSoon(args.comingSoon);
    builder.add_enabled(args.enabled);
    builder.finish()
  }

  pub fn unpack(&self) -> DataOwner_AbridgedT {
    let doName = self.doName().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let ownerType = self.ownerType().map(|x| {
      x.to_string()
    });
    let dataType = self.dataType().map(|x| {
      x.to_string()
    });
    let provider = self.provider().map(|x| {
      x.to_string()
    });
    let countryCode = self.countryCode().map(|x| {
      x.to_string()
    });
    let idContact = self.idContact().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let control = self.control().map(|x| {
      x.to_string()
    });
    let enabled = self.enabled();
    let comingSoon = self.comingSoon();
    let source = self.source().map(|x| {
      x.to_string()
    });
    DataOwner_AbridgedT {
      doName,
      classificationMarking,
      ownerType,
      dataType,
      provider,
      countryCode,
      idContact,
      description,
      control,
      enabled,
      comingSoon,
      source,
    }
  }

  /// The name of the data owner.
  /// Example: /// Example: Data owner name
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn doName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_DONAME, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Type of organization which this data owner belongs to (e.g. Commercial, Government, Academic, Consortium, etc.).
  /// Example: /// Example: Commercial
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn ownerType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_OWNERTYPE, None)}
  }
  /// Type of data this data owner owns (e.g. EPHEMERIS, IMAGERY, MANEUVER, etc.).
  /// Example: /// Example: ELSET
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn dataType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_DATATYPE, None)}
  }
  /// Organization name for the data provider.
  /// Example: /// Example: ACME
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn provider(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_PROVIDER, None)}
  }
  /// The country code. This value is typically the ISO 3166 Alpha-2 two-character country code, however it can also represent various consortiums that do not appear in the ISO document. The code must correspond to an existing country in the UDLâ€™s country API. Call udl/country/{code} to get any associated FIPS code, ISO Alpha-3 code, or alternate code values that exist for the specified country code.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 1, Maximum length = 4
  #[inline]
  pub fn countryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_COUNTRYCODE, None)}
  }
  /// Unique identifier of the contact for this data owner.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idContact(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_IDCONTACT, None)}
  }
  /// Description of this data owner.
  /// Example: /// Example: Description of this data owner.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_DESCRIPTION, None)}
  }
  /// Optional control required to access this data type from this owner.
  /// Example: /// Example: PR-ACME-ELSETS
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn control(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_CONTROL, None)}
  }
  /// Boolean indicating if the data owner is enabled (if not enabled, they should not appear on the data products screen on the storefront).
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn enabled(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DataOwner_Abridged::VT_ENABLED, Some(false)).unwrap()}
  }
  /// Boolean indicating if the data owner is coming soon or not yet available.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn comingSoon(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DataOwner_Abridged::VT_COMINGSOON, Some(false)).unwrap()}
  }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DataOwner_Abridged::VT_SOURCE, None)}
  }
}

impl flatbuffers::Verifiable for DataOwner_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("doName", Self::VT_DONAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ownerType", Self::VT_OWNERTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dataType", Self::VT_DATATYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("provider", Self::VT_PROVIDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryCode", Self::VT_COUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idContact", Self::VT_IDCONTACT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("control", Self::VT_CONTROL, false)?
     .visit_field::<bool>("enabled", Self::VT_ENABLED, false)?
     .visit_field::<bool>("comingSoon", Self::VT_COMINGSOON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .finish();
    Ok(())
  }
}
pub struct DataOwner_AbridgedArgs<'a> {
    pub doName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ownerType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub provider: Option<flatbuffers::WIPOffset<&'a str>>,
    pub countryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idContact: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub control: Option<flatbuffers::WIPOffset<&'a str>>,
    pub enabled: bool,
    pub comingSoon: bool,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for DataOwner_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    DataOwner_AbridgedArgs {
      doName: None,
      classificationMarking: None,
      ownerType: None,
      dataType: None,
      provider: None,
      countryCode: None,
      idContact: None,
      description: None,
      control: None,
      enabled: false,
      comingSoon: false,
      source: None,
    }
  }
}

pub struct DataOwner_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DataOwner_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_doName(&mut self, doName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_DONAME, doName);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_ownerType(&mut self, ownerType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_OWNERTYPE, ownerType);
  }
  #[inline]
  pub fn add_dataType(&mut self, dataType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_DATATYPE, dataType);
  }
  #[inline]
  pub fn add_provider(&mut self, provider: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_PROVIDER, provider);
  }
  #[inline]
  pub fn add_countryCode(&mut self, countryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_COUNTRYCODE, countryCode);
  }
  #[inline]
  pub fn add_idContact(&mut self, idContact: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_IDCONTACT, idContact);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_control(&mut self, control: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_CONTROL, control);
  }
  #[inline]
  pub fn add_enabled(&mut self, enabled: bool) {
    self.fbb_.push_slot::<bool>(DataOwner_Abridged::VT_ENABLED, enabled, false);
  }
  #[inline]
  pub fn add_comingSoon(&mut self, comingSoon: bool) {
    self.fbb_.push_slot::<bool>(DataOwner_Abridged::VT_COMINGSOON, comingSoon, false);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DataOwner_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DataOwner_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DataOwner_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DataOwner_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DataOwner_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DataOwner_Abridged");
      ds.field("doName", &self.doName());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("ownerType", &self.ownerType());
      ds.field("dataType", &self.dataType());
      ds.field("provider", &self.provider());
      ds.field("countryCode", &self.countryCode());
      ds.field("idContact", &self.idContact());
      ds.field("description", &self.description());
      ds.field("control", &self.control());
      ds.field("enabled", &self.enabled());
      ds.field("comingSoon", &self.comingSoon());
      ds.field("source", &self.source());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DataOwner_AbridgedT {
  pub doName: Option<String>,
  pub classificationMarking: Option<String>,
  pub ownerType: Option<String>,
  pub dataType: Option<String>,
  pub provider: Option<String>,
  pub countryCode: Option<String>,
  pub idContact: Option<String>,
  pub description: Option<String>,
  pub control: Option<String>,
  pub enabled: bool,
  pub comingSoon: bool,
  pub source: Option<String>,
}
impl Default for DataOwner_AbridgedT {
  fn default() -> Self {
    Self {
      doName: None,
      classificationMarking: None,
      ownerType: None,
      dataType: None,
      provider: None,
      countryCode: None,
      idContact: None,
      description: None,
      control: None,
      enabled: false,
      comingSoon: false,
      source: None,
    }
  }
}
impl DataOwner_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DataOwner_Abridged<'b>> {
    let doName = self.doName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ownerType = self.ownerType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataType = self.dataType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let provider = self.provider.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let countryCode = self.countryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idContact = self.idContact.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let control = self.control.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let enabled = self.enabled;
    let comingSoon = self.comingSoon;
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    DataOwner_Abridged::create(_fbb, &DataOwner_AbridgedArgs{
      doName,
      classificationMarking,
      ownerType,
      dataType,
      provider,
      countryCode,
      idContact,
      description,
      control,
      enabled,
      comingSoon,
      source,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DataOwner_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_owner_abridged_unchecked`.
pub fn root_as_data_owner_abridged(buf: &[u8]) -> Result<DataOwner_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DataOwner_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DataOwner_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_data_owner_abridged_unchecked`.
pub fn size_prefixed_root_as_data_owner_abridged(buf: &[u8]) -> Result<DataOwner_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DataOwner_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DataOwner_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_owner_abridged_unchecked`.
pub fn root_as_data_owner_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataOwner_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DataOwner_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DataOwner_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_data_owner_abridged_unchecked`.
pub fn size_prefixed_root_as_data_owner_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DataOwner_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DataOwner_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DataOwner_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DataOwner_Abridged`.
pub unsafe fn root_as_data_owner_abridged_unchecked(buf: &[u8]) -> DataOwner_Abridged {
  flatbuffers::root_unchecked::<DataOwner_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DataOwner_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DataOwner_Abridged`.
pub unsafe fn size_prefixed_root_as_data_owner_abridged_unchecked(buf: &[u8]) -> DataOwner_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<DataOwner_Abridged>(buf)
}
pub const DATA_OWNER_ABRIDGED_IDENTIFIER: &str = "DATA";

#[inline]
pub fn data_owner_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_OWNER_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn data_owner_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DATA_OWNER_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_data_owner_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DataOwner_Abridged<'a>>) {
  fbb.finish(root, Some(DATA_OWNER_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_data_owner_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DataOwner_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(DATA_OWNER_ABRIDGED_IDENTIFIER));
}
