// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationDensityProfileIRI_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Full set of the IRI formalism coefficients.
pub struct IonoObservationDensityProfileIRI_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationDensityProfileIRI_Abridged<'a> {
  type Inner = IonoObservationDensityProfileIRI_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationDensityProfileIRI_Abridged<'a> {
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 4;
  pub const VT_NMF2: flatbuffers::VOffsetT = 6;
  pub const VT_HMF2: flatbuffers::VOffsetT = 8;
  pub const VT_B0: flatbuffers::VOffsetT = 10;
  pub const VT_B1: flatbuffers::VOffsetT = 12;
  pub const VT_NMF1: flatbuffers::VOffsetT = 14;
  pub const VT_HMF1: flatbuffers::VOffsetT = 16;
  pub const VT_D1: flatbuffers::VOffsetT = 18;
  pub const VT_HZ: flatbuffers::VOffsetT = 20;
  pub const VT_HVALTOP: flatbuffers::VOffsetT = 22;
  pub const VT_NVALB: flatbuffers::VOffsetT = 24;
  pub const VT_NME: flatbuffers::VOffsetT = 26;
  pub const VT_HME: flatbuffers::VOffsetT = 28;
  pub const VT_HDX: flatbuffers::VOffsetT = 30;
  pub const VT_NMD: flatbuffers::VOffsetT = 32;
  pub const VT_HMD: flatbuffers::VOffsetT = 34;
  pub const VT_HA: flatbuffers::VOffsetT = 36;
  pub const VT_FP1: flatbuffers::VOffsetT = 38;
  pub const VT_FP2: flatbuffers::VOffsetT = 40;
  pub const VT_FP30: flatbuffers::VOffsetT = 42;
  pub const VT_FP3U: flatbuffers::VOffsetT = 44;
  pub const VT_CHI: flatbuffers::VOffsetT = 46;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationDensityProfileIRI_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationDensityProfileIRI_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileIRI_Abridged<'bldr>> {
    let mut builder = IonoObservationDensityProfileIRI_AbridgedBuilder::new(_fbb);
    builder.add_chi(args.chi);
    builder.add_fp3U(args.fp3U);
    builder.add_fp30(args.fp30);
    builder.add_fp2(args.fp2);
    builder.add_fp1(args.fp1);
    builder.add_ha(args.ha);
    builder.add_hmD(args.hmD);
    builder.add_nmD(args.nmD);
    builder.add_hdx(args.hdx);
    builder.add_hmE(args.hmE);
    builder.add_nmE(args.nmE);
    builder.add_nValB(args.nValB);
    builder.add_hValTop(args.hValTop);
    builder.add_hz(args.hz);
    builder.add_d1(args.d1);
    builder.add_hmF1(args.hmF1);
    builder.add_nmF1(args.nmF1);
    builder.add_b1(args.b1);
    builder.add_b0(args.b0);
    builder.add_hmF2(args.hmF2);
    builder.add_nmF2(args.nmF2);
    if let Some(x) = args.description { builder.add_description(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationDensityProfileIRI_AbridgedT {
    let description = self.description().map(|x| {
      x.to_string()
    });
    let nmF2 = self.nmF2();
    let hmF2 = self.hmF2();
    let b0 = self.b0();
    let b1 = self.b1();
    let nmF1 = self.nmF1();
    let hmF1 = self.hmF1();
    let d1 = self.d1();
    let hz = self.hz();
    let hValTop = self.hValTop();
    let nValB = self.nValB();
    let nmE = self.nmE();
    let hmE = self.hmE();
    let hdx = self.hdx();
    let nmD = self.nmD();
    let hmD = self.hmD();
    let ha = self.ha();
    let fp1 = self.fp1();
    let fp2 = self.fp2();
    let fp30 = self.fp30();
    let fp3U = self.fp3U();
    let chi = self.chi();
    IonoObservationDensityProfileIRI_AbridgedT {
      description,
      nmF2,
      hmF2,
      b0,
      b1,
      nmF1,
      hmF1,
      d1,
      hz,
      hValTop,
      nValB,
      nmE,
      hmE,
      hdx,
      nmD,
      hmD,
      ha,
      fp1,
      fp2,
      fp30,
      fp3U,
      chi,
    }
  }

  /// Description of IRI implementation.
  /// Example: /// Example: Full altitude range of 1D vertical plasma density profile for D, E, and F regions of the ionosphere provided by IRI, in which model parameters are replaced with observed ionogram-derived data where available.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationDensityProfileIRI_Abridged::VT_DESCRIPTION, None)}
  }
  /// Peak density of F2 layer, in grams per cubic centimeter.
  /// Example: /// Example: 313283.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nmF2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NMF2, Some(0.0)).unwrap()}
  }
  /// Peak height of F2 layer, in kilometers.
  /// Example: /// Example: 265.42
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hmF2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HMF2, Some(0.0)).unwrap()}
  }
  /// B0 parameter of the F2 layer shape.
  /// Example: /// Example: 245.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn b0(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_B0, Some(0.0)).unwrap()}
  }
  /// B1 parameter of the F2 layer shape.
  /// Example: /// Example: 3.45
  /// Constraints: No constraints specified.
  #[inline]
  pub fn b1(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_B1, Some(0.0)).unwrap()}
  }
  /// Peak density of the F1 layer, in grams per cubic centimeter.
  /// Example: /// Example: 210486
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nmF1(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NMF1, Some(0.0)).unwrap()}
  }
  /// Peak height of the F1 layer, in kilometers.
  /// Example: /// Example: 210.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hmF1(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HMF1, Some(0.0)).unwrap()}
  }
  /// D1 parameter of the F1 layer shape.
  /// Example: /// Example: 0
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d1(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_D1, Some(0.0)).unwrap()}
  }
  /// Height HZ of the interim layer, in kilometers.
  /// Example: /// Example: 142.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hz(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HZ, Some(0.0)).unwrap()}
  }
  /// The valley height, in kilometers.
  /// Example: /// Example: 116.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hValTop(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HVALTOP, Some(0.0)).unwrap()}
  }
  /// The valley depth, in grams per cubic centimeter.
  /// Example: /// Example: 147025.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nValB(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NVALB, Some(0.0)).unwrap()}
  }
  /// Peak density of the E layer, in per cubic centimeter.
  /// Example: /// Example: 154164.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nmE(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NME, Some(0.0)).unwrap()}
  }
  /// Peak height of the F2 layer, in kilometers.
  /// Example: /// Example: 99.8
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hmE(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HME, Some(0.0)).unwrap()}
  }
  /// Height of the intermediate region at the top of D region, in kilometers.
  /// Example: /// Example: 85.6
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hdx(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HDX, Some(0.0)).unwrap()}
  }
  /// Peak density of the D layer, in per cubic centimeter.
  /// Example: /// Example: 937543116.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nmD(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NMD, Some(0.0)).unwrap()}
  }
  /// Peak height of the D layer, in kilometers.
  /// Example: /// Example: 81.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hmD(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HMD, Some(0.0)).unwrap()}
  }
  /// Starting height of the D layer, in kilometers.
  /// Example: /// Example: 50.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ha(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HA, Some(0.0)).unwrap()}
  }
  /// TBD.
  /// Example: /// Example: 0.0474732023322638
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fp1(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP1, Some(0.0)).unwrap()}
  }
  /// TBD.
  /// Example: /// Example: -0.00112685246984002
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fp2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP2, Some(0.0)).unwrap()}
  }
  /// TBD.
  /// Example: /// Example: 0.00827559450035957
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fp30(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP30, Some(0.0)).unwrap()}
  }
  /// TBD.
  /// Example: /// Example: 0.000201178475411428
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fp3U(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP3U, Some(0.0)).unwrap()}
  }
  /// Peak Density Thickness (PDT) for description of the flat-nose shape, in kilometers.
  /// Example: /// Example: 35.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn chi(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_CHI, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IonoObservationDensityProfileIRI_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<f64>("nmF2", Self::VT_NMF2, false)?
     .visit_field::<f64>("hmF2", Self::VT_HMF2, false)?
     .visit_field::<f64>("b0", Self::VT_B0, false)?
     .visit_field::<f64>("b1", Self::VT_B1, false)?
     .visit_field::<f64>("nmF1", Self::VT_NMF1, false)?
     .visit_field::<f64>("hmF1", Self::VT_HMF1, false)?
     .visit_field::<f64>("d1", Self::VT_D1, false)?
     .visit_field::<f64>("hz", Self::VT_HZ, false)?
     .visit_field::<f64>("hValTop", Self::VT_HVALTOP, false)?
     .visit_field::<f64>("nValB", Self::VT_NVALB, false)?
     .visit_field::<f64>("nmE", Self::VT_NME, false)?
     .visit_field::<f64>("hmE", Self::VT_HME, false)?
     .visit_field::<f64>("hdx", Self::VT_HDX, false)?
     .visit_field::<f64>("nmD", Self::VT_NMD, false)?
     .visit_field::<f64>("hmD", Self::VT_HMD, false)?
     .visit_field::<f64>("ha", Self::VT_HA, false)?
     .visit_field::<f64>("fp1", Self::VT_FP1, false)?
     .visit_field::<f64>("fp2", Self::VT_FP2, false)?
     .visit_field::<f64>("fp30", Self::VT_FP30, false)?
     .visit_field::<f64>("fp3U", Self::VT_FP3U, false)?
     .visit_field::<f64>("chi", Self::VT_CHI, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationDensityProfileIRI_AbridgedArgs<'a> {
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nmF2: f64,
    pub hmF2: f64,
    pub b0: f64,
    pub b1: f64,
    pub nmF1: f64,
    pub hmF1: f64,
    pub d1: f64,
    pub hz: f64,
    pub hValTop: f64,
    pub nValB: f64,
    pub nmE: f64,
    pub hmE: f64,
    pub hdx: f64,
    pub nmD: f64,
    pub hmD: f64,
    pub ha: f64,
    pub fp1: f64,
    pub fp2: f64,
    pub fp30: f64,
    pub fp3U: f64,
    pub chi: f64,
}
impl<'a> Default for IonoObservationDensityProfileIRI_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationDensityProfileIRI_AbridgedArgs {
      description: None,
      nmF2: 0.0,
      hmF2: 0.0,
      b0: 0.0,
      b1: 0.0,
      nmF1: 0.0,
      hmF1: 0.0,
      d1: 0.0,
      hz: 0.0,
      hValTop: 0.0,
      nValB: 0.0,
      nmE: 0.0,
      hmE: 0.0,
      hdx: 0.0,
      nmD: 0.0,
      hmD: 0.0,
      ha: 0.0,
      fp1: 0.0,
      fp2: 0.0,
      fp30: 0.0,
      fp3U: 0.0,
      chi: 0.0,
    }
  }
}

pub struct IonoObservationDensityProfileIRI_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationDensityProfileIRI_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationDensityProfileIRI_Abridged::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_nmF2(&mut self, nmF2: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NMF2, nmF2, 0.0);
  }
  #[inline]
  pub fn add_hmF2(&mut self, hmF2: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HMF2, hmF2, 0.0);
  }
  #[inline]
  pub fn add_b0(&mut self, b0: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_B0, b0, 0.0);
  }
  #[inline]
  pub fn add_b1(&mut self, b1: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_B1, b1, 0.0);
  }
  #[inline]
  pub fn add_nmF1(&mut self, nmF1: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NMF1, nmF1, 0.0);
  }
  #[inline]
  pub fn add_hmF1(&mut self, hmF1: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HMF1, hmF1, 0.0);
  }
  #[inline]
  pub fn add_d1(&mut self, d1: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_D1, d1, 0.0);
  }
  #[inline]
  pub fn add_hz(&mut self, hz: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HZ, hz, 0.0);
  }
  #[inline]
  pub fn add_hValTop(&mut self, hValTop: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HVALTOP, hValTop, 0.0);
  }
  #[inline]
  pub fn add_nValB(&mut self, nValB: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NVALB, nValB, 0.0);
  }
  #[inline]
  pub fn add_nmE(&mut self, nmE: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NME, nmE, 0.0);
  }
  #[inline]
  pub fn add_hmE(&mut self, hmE: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HME, hmE, 0.0);
  }
  #[inline]
  pub fn add_hdx(&mut self, hdx: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HDX, hdx, 0.0);
  }
  #[inline]
  pub fn add_nmD(&mut self, nmD: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_NMD, nmD, 0.0);
  }
  #[inline]
  pub fn add_hmD(&mut self, hmD: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HMD, hmD, 0.0);
  }
  #[inline]
  pub fn add_ha(&mut self, ha: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_HA, ha, 0.0);
  }
  #[inline]
  pub fn add_fp1(&mut self, fp1: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP1, fp1, 0.0);
  }
  #[inline]
  pub fn add_fp2(&mut self, fp2: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP2, fp2, 0.0);
  }
  #[inline]
  pub fn add_fp30(&mut self, fp30: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP30, fp30, 0.0);
  }
  #[inline]
  pub fn add_fp3U(&mut self, fp3U: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_FP3U, fp3U, 0.0);
  }
  #[inline]
  pub fn add_chi(&mut self, chi: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationDensityProfileIRI_Abridged::VT_CHI, chi, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationDensityProfileIRI_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationDensityProfileIRI_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationDensityProfileIRI_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationDensityProfileIRI_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationDensityProfileIRI_Abridged");
      ds.field("description", &self.description());
      ds.field("nmF2", &self.nmF2());
      ds.field("hmF2", &self.hmF2());
      ds.field("b0", &self.b0());
      ds.field("b1", &self.b1());
      ds.field("nmF1", &self.nmF1());
      ds.field("hmF1", &self.hmF1());
      ds.field("d1", &self.d1());
      ds.field("hz", &self.hz());
      ds.field("hValTop", &self.hValTop());
      ds.field("nValB", &self.nValB());
      ds.field("nmE", &self.nmE());
      ds.field("hmE", &self.hmE());
      ds.field("hdx", &self.hdx());
      ds.field("nmD", &self.nmD());
      ds.field("hmD", &self.hmD());
      ds.field("ha", &self.ha());
      ds.field("fp1", &self.fp1());
      ds.field("fp2", &self.fp2());
      ds.field("fp30", &self.fp30());
      ds.field("fp3U", &self.fp3U());
      ds.field("chi", &self.chi());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationDensityProfileIRI_AbridgedT {
  pub description: Option<String>,
  pub nmF2: f64,
  pub hmF2: f64,
  pub b0: f64,
  pub b1: f64,
  pub nmF1: f64,
  pub hmF1: f64,
  pub d1: f64,
  pub hz: f64,
  pub hValTop: f64,
  pub nValB: f64,
  pub nmE: f64,
  pub hmE: f64,
  pub hdx: f64,
  pub nmD: f64,
  pub hmD: f64,
  pub ha: f64,
  pub fp1: f64,
  pub fp2: f64,
  pub fp30: f64,
  pub fp3U: f64,
  pub chi: f64,
}
impl Default for IonoObservationDensityProfileIRI_AbridgedT {
  fn default() -> Self {
    Self {
      description: None,
      nmF2: 0.0,
      hmF2: 0.0,
      b0: 0.0,
      b1: 0.0,
      nmF1: 0.0,
      hmF1: 0.0,
      d1: 0.0,
      hz: 0.0,
      hValTop: 0.0,
      nValB: 0.0,
      nmE: 0.0,
      hmE: 0.0,
      hdx: 0.0,
      nmD: 0.0,
      hmD: 0.0,
      ha: 0.0,
      fp1: 0.0,
      fp2: 0.0,
      fp30: 0.0,
      fp3U: 0.0,
      chi: 0.0,
    }
  }
}
impl IonoObservationDensityProfileIRI_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationDensityProfileIRI_Abridged<'b>> {
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nmF2 = self.nmF2;
    let hmF2 = self.hmF2;
    let b0 = self.b0;
    let b1 = self.b1;
    let nmF1 = self.nmF1;
    let hmF1 = self.hmF1;
    let d1 = self.d1;
    let hz = self.hz;
    let hValTop = self.hValTop;
    let nValB = self.nValB;
    let nmE = self.nmE;
    let hmE = self.hmE;
    let hdx = self.hdx;
    let nmD = self.nmD;
    let hmD = self.hmD;
    let ha = self.ha;
    let fp1 = self.fp1;
    let fp2 = self.fp2;
    let fp30 = self.fp30;
    let fp3U = self.fp3U;
    let chi = self.chi;
    IonoObservationDensityProfileIRI_Abridged::create(_fbb, &IonoObservationDensityProfileIRI_AbridgedArgs{
      description,
      nmF2,
      hmF2,
      b0,
      b1,
      nmF1,
      hmF1,
      d1,
      hz,
      hValTop,
      nValB,
      nmE,
      hmE,
      hdx,
      nmD,
      hmD,
      ha,
      fp1,
      fp2,
      fp30,
      fp3U,
      chi,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationDensityProfileIRI_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_iri_abridged_unchecked`.
pub fn root_as_iono_observation_density_profile_iri_abridged(buf: &[u8]) -> Result<IonoObservationDensityProfileIRI_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationDensityProfileIRI_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationDensityProfileIRI_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_density_profile_iri_abridged_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_iri_abridged(buf: &[u8]) -> Result<IonoObservationDensityProfileIRI_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationDensityProfileIRI_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationDensityProfileIRI_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_iri_abridged_unchecked`.
pub fn root_as_iono_observation_density_profile_iri_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileIRI_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationDensityProfileIRI_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationDensityProfileIRI_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_density_profile_iri_abridged_unchecked`.
pub fn size_prefixed_root_as_iono_observation_density_profile_iri_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationDensityProfileIRI_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationDensityProfileIRI_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationDensityProfileIRI_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationDensityProfileIRI_Abridged`.
pub unsafe fn root_as_iono_observation_density_profile_iri_abridged_unchecked(buf: &[u8]) -> IonoObservationDensityProfileIRI_Abridged {
  flatbuffers::root_unchecked::<IonoObservationDensityProfileIRI_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationDensityProfileIRI_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationDensityProfileIRI_Abridged`.
pub unsafe fn size_prefixed_root_as_iono_observation_density_profile_iri_abridged_unchecked(buf: &[u8]) -> IonoObservationDensityProfileIRI_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationDensityProfileIRI_Abridged>(buf)
}
pub const IONO_OBSERVATION_DENSITY_PROFILE_IRI_ABRIDGED_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_density_profile_iri_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_IRI_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_density_profile_iri_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_DENSITY_PROFILE_IRI_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_density_profile_iri_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationDensityProfileIRI_Abridged<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_IRI_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_density_profile_iri_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationDensityProfileIRI_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_DENSITY_PROFILE_IRI_ABRIDGED_IDENTIFIER));
}
