// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_WEATHER_DATA_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_WEATHER_DATA_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_WEATHER_DATA_ABRIDGED_DATA_MODE_ENUM: [WeatherData_Abridged_dataMode_Enum; 4] = [
  WeatherData_Abridged_dataMode_Enum::REAL,
  WeatherData_Abridged_dataMode_Enum::TEST,
  WeatherData_Abridged_dataMode_Enum::SIMULATED,
  WeatherData_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct WeatherData_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl WeatherData_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for WeatherData_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for WeatherData_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for WeatherData_Abridged_dataMode_Enum {
    type Output = WeatherData_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for WeatherData_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for WeatherData_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for WeatherData_Abridged_dataMode_Enum {}
pub enum WeatherData_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// These services provide for posting and querying Weather Data. Weather Data integrates dynamic data measured by Doppler/CG such as signal power and noise levels, to produce useful weather information.
pub struct WeatherData_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WeatherData_Abridged<'a> {
  type Inner = WeatherData_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WeatherData_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 8;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 10;
  pub const VT_OBTIME: flatbuffers::VOffsetT = 12;
  pub const VT_SIGPWRS: flatbuffers::VOffsetT = 14;
  pub const VT_NOISELVLS: flatbuffers::VOffsetT = 16;
  pub const VT_SPECWIDTHS: flatbuffers::VOffsetT = 18;
  pub const VT_FIRSTGUESSAVGS: flatbuffers::VOffsetT = 20;
  pub const VT_QCVALUE: flatbuffers::VOffsetT = 22;
  pub const VT_FILECREATION: flatbuffers::VOffsetT = 24;
  pub const VT_TERMALT: flatbuffers::VOffsetT = 26;
  pub const VT_AVGTXPWR: flatbuffers::VOffsetT = 28;
  pub const VT_AVGREFPWR: flatbuffers::VOffsetT = 30;
  pub const VT_SECTORNUM: flatbuffers::VOffsetT = 32;
  pub const VT_NUMELEMENTS: flatbuffers::VOffsetT = 34;
  pub const VT_TDAVGSAMPLENUMS: flatbuffers::VOffsetT = 36;
  pub const VT_CHECKSUM: flatbuffers::VOffsetT = 38;
  pub const VT_COINTEGS: flatbuffers::VOffsetT = 40;
  pub const VT_SPECAVGS: flatbuffers::VOffsetT = 42;
  pub const VT_INTERPULSEPERIODS: flatbuffers::VOffsetT = 44;
  pub const VT_DOPPVELS: flatbuffers::VOffsetT = 46;
  pub const VT_CONSRECS: flatbuffers::VOffsetT = 48;
  pub const VT_SNRS: flatbuffers::VOffsetT = 50;
  pub const VT_SIGSTRENGTH: flatbuffers::VOffsetT = 52;
  pub const VT_SEMIMAJORAXIS: flatbuffers::VOffsetT = 54;
  pub const VT_SEMIMINORAXIS: flatbuffers::VOffsetT = 56;
  pub const VT_ANGLEORIENTATION: flatbuffers::VOffsetT = 58;
  pub const VT_LIGHTEVENTNUM: flatbuffers::VOffsetT = 60;
  pub const VT_LIGHTDETSENSORS: flatbuffers::VOffsetT = 62;
  pub const VT_POSCONFIDENCE: flatbuffers::VOffsetT = 64;
  pub const VT_SRCTYPS: flatbuffers::VOffsetT = 66;
  pub const VT_SRCIDS: flatbuffers::VOffsetT = 68;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 70;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 74;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 76;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 78;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 80;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WeatherData_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WeatherData_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<WeatherData_Abridged<'bldr>> {
    let mut builder = WeatherData_AbridgedBuilder::new(_fbb);
    builder.add_posConfidence(args.posConfidence);
    builder.add_angleOrientation(args.angleOrientation);
    builder.add_semiMinorAxis(args.semiMinorAxis);
    builder.add_semiMajorAxis(args.semiMajorAxis);
    builder.add_sigStrength(args.sigStrength);
    builder.add_avgRefPwr(args.avgRefPwr);
    builder.add_avgTxPwr(args.avgTxPwr);
    builder.add_termAlt(args.termAlt);
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.srcIds { builder.add_srcIds(x); }
    if let Some(x) = args.srcTyps { builder.add_srcTyps(x); }
    if let Some(x) = args.lightDetSensors { builder.add_lightDetSensors(x); }
    builder.add_lightEventNum(args.lightEventNum);
    if let Some(x) = args.snrs { builder.add_snrs(x); }
    if let Some(x) = args.consRecs { builder.add_consRecs(x); }
    if let Some(x) = args.doppVels { builder.add_doppVels(x); }
    if let Some(x) = args.interpulsePeriods { builder.add_interpulsePeriods(x); }
    if let Some(x) = args.specAvgs { builder.add_specAvgs(x); }
    if let Some(x) = args.coIntegs { builder.add_coIntegs(x); }
    builder.add_checksum(args.checksum);
    if let Some(x) = args.tdAvgSampleNums { builder.add_tdAvgSampleNums(x); }
    builder.add_numElements(args.numElements);
    builder.add_sectorNum(args.sectorNum);
    if let Some(x) = args.fileCreation { builder.add_fileCreation(x); }
    builder.add_qcValue(args.qcValue);
    if let Some(x) = args.firstGuessAvgs { builder.add_firstGuessAvgs(x); }
    if let Some(x) = args.specWidths { builder.add_specWidths(x); }
    if let Some(x) = args.noiseLvls { builder.add_noiseLvls(x); }
    if let Some(x) = args.sigPwrs { builder.add_sigPwrs(x); }
    if let Some(x) = args.obTime { builder.add_obTime(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> WeatherData_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let obTime = self.obTime().map(|x| {
      x.to_string()
    });
    let sigPwrs = self.sigPwrs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let noiseLvls = self.noiseLvls().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let specWidths = self.specWidths().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let firstGuessAvgs = self.firstGuessAvgs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let qcValue = self.qcValue();
    let fileCreation = self.fileCreation().map(|x| {
      x.to_string()
    });
    let termAlt = self.termAlt();
    let avgTxPwr = self.avgTxPwr();
    let avgRefPwr = self.avgRefPwr();
    let sectorNum = self.sectorNum();
    let numElements = self.numElements();
    let tdAvgSampleNums = self.tdAvgSampleNums().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let checksum = self.checksum();
    let coIntegs = self.coIntegs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let specAvgs = self.specAvgs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let interpulsePeriods = self.interpulsePeriods().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let doppVels = self.doppVels().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let consRecs = self.consRecs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let snrs = self.snrs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sigStrength = self.sigStrength();
    let semiMajorAxis = self.semiMajorAxis();
    let semiMinorAxis = self.semiMinorAxis();
    let angleOrientation = self.angleOrientation();
    let lightEventNum = self.lightEventNum();
    let lightDetSensors = self.lightDetSensors().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let posConfidence = self.posConfidence();
    let srcTyps = self.srcTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcIds = self.srcIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    WeatherData_AbridgedT {
      id,
      classificationMarking,
      idSensor,
      origSensorId,
      obTime,
      sigPwrs,
      noiseLvls,
      specWidths,
      firstGuessAvgs,
      qcValue,
      fileCreation,
      termAlt,
      avgTxPwr,
      avgRefPwr,
      sectorNum,
      numElements,
      tdAvgSampleNums,
      checksum,
      coIntegs,
      specAvgs,
      interpulsePeriods,
      doppVels,
      consRecs,
      snrs,
      sigStrength,
      semiMajorAxis,
      semiMinorAxis,
      angleOrientation,
      lightEventNum,
      lightDetSensors,
      posConfidence,
      srcTyps,
      srcIds,
      origNetwork,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: WEATHER-DATA-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the sensor making the weather measurement.
  /// Example: /// Example: 0129f577-e04c-441e-65ca-0a04a750bed9
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_IDSENSOR, None)}
  }
  /// Optional identifier provided by the record source. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_ORIGSENSORID, None)}
  }
  /// Datetime of the weather observation in ISO 8601 UTC datetime format with microsecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_OBTIME, None)}
  }
  /// Array of signal power(s) measured by the sensor, in decibels. Users should consult the data provider for information on the signal powers array structure.
  /// Example: /// Example: [116.5, 121.6]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sigPwrs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_SIGPWRS, None)}
  }
  /// Array of noise level(s) measured by radar, in decibels. Users should consult the data provider for information on the noise levels array structure.
  /// Example: /// Example: [58.2, 58.3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn noiseLvls(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_NOISELVLS, None)}
  }
  /// Array of width(s) of the distribution in Doppler velocity measured by radar, in meters/second. Spectral width depends on the particle size distribution, the wind shear across the radar beam, and turbulence. Users should consult the data provider for information on the spectral widths array structure.
  /// Example: /// Example: [0.3, 0.6]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn specWidths(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_SPECWIDTHS, None)}
  }
  /// Array of average maximum number(s) of consecutive instances in which the same first guess velocity is used in radar data processing to estimate wind speed. Users should consult the data provider for information on the first guess averages array structure.
  /// Example: /// Example: [16, 1]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn firstGuessAvgs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_FIRSTGUESSAVGS, None)}
  }
  /// Quality control flag value, as defined by the data provider.
  /// Example: /// Example: 4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn qcValue(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(WeatherData_Abridged::VT_QCVALUE, Some(0)).unwrap()}
  }
  /// Datetime the system files were created.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fileCreation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_FILECREATION, None)}
  }
  /// Last altitude with recorded measurements in this record, in meters.
  /// Example: /// Example: 19505.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn termAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_TERMALT, Some(0.0)).unwrap()}
  }
  /// Average transmitted power of the radar, in kilowatts.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgTxPwr(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_AVGTXPWR, Some(0.0)).unwrap()}
  }
  /// Average power of the reflected signal received by the radar, in Watts.
  /// Example: /// Example: 714.9
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgRefPwr(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_AVGREFPWR, Some(0.0)).unwrap()}
  }
  /// Number of sectors within the radar coverage area, each containing a number of antennas.
  /// Example: /// Example: 20
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sectorNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(WeatherData_Abridged::VT_SECTORNUM, Some(0)).unwrap()}
  }
  /// Number of antennas across all sectors within the radar coverage area.
  /// Example: /// Example: 640
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numElements(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(WeatherData_Abridged::VT_NUMELEMENTS, Some(0)).unwrap()}
  }
  /// Array of the number(s) of radar samples used in time domain averaging for radar data processing. Time domain averaging improves the quality of the measured signal by reducing random noise and enhancing the signal-to-noise ratio. Users should consult the data provider for information on the time domain sample numbers array structure.
  /// Example: /// Example: [32, 30]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tdAvgSampleNums(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_TDAVGSAMPLENUMS, None)}
  }
  /// Checksum value for the data.
  /// Example: /// Example: 133
  /// Constraints: No constraints specified.
  #[inline]
  pub fn checksum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(WeatherData_Abridged::VT_CHECKSUM, Some(0)).unwrap()}
  }
  /// Array of the number(s) of measurements used in coherent integrations used for radar data processing. Users should consult the data provider for information on the coherent integrations array structure.
  /// Example: /// Example: [4, 3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn coIntegs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_COINTEGS, None)}
  }
  /// Array of the number(s) of spectral averages used in radar data processing. Users should consult the data provider for information on the spectral averages array structure.
  /// Example: /// Example: [4, 3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn specAvgs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_SPECAVGS, None)}
  }
  /// Array of the elapsed time(s) from the beginning of one pulse to the beginning of the next pulse for a radar beam, in microseconds. Users should consult the data provider for information on the interpulse periods array structure.
  /// Example: /// Example: [1000.3, 1000.2]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn interpulsePeriods(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_INTERPULSEPERIODS, None)}
  }
  /// Array of full scale Nyquist Doppler velocities measured by radar, in meters per second. Nyquist velocity refers to the maximum velocity magnitude that the radar system can unambiguously detect. Doppler velocities with absolute values exceeding the Nyquist threshold suffer from aliasing at the time of collection. Users should consult the data provider for information on the doppler velocities array structure.
  /// Example: /// Example: [44.4, 467.3]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn doppVels(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_DOPPVELS, None)}
  }
  /// Array of the number(s) of records in consensus for a radar beam. Users should consult the data provider for information on the consensus records array structure.
  /// Example: /// Example: [5, 2]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn consRecs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_CONSRECS, None)}
  }
  /// Array of signal to noise ratio(s) for a radar beam, in decibels. Users should consult the data provider for information on the signal to noise ratios array structure.
  /// Example: /// Example: [14.5, -16.2]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn snrs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_SNRS, None)}
  }
  /// Signal strength of the electromagnetic energy received due to a lightning event, in kiloamps.
  /// Example: /// Example: 163.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sigStrength(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_SIGSTRENGTH, Some(0.0)).unwrap()}
  }
  /// Semi-major axis of the 50% positional confidence ellipse, in kilometers.
  /// Example: /// Example: 3.4
  /// Constraints: No constraints specified.
  #[inline]
  pub fn semiMajorAxis(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_SEMIMAJORAXIS, Some(0.0)).unwrap()}
  }
  /// Semi-minor axis of the 50% positional confidence ellipse, in kilometers.
  /// Example: /// Example: 0.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn semiMinorAxis(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_SEMIMINORAXIS, Some(0.0)).unwrap()}
  }
  /// Angle of orientation of the 50% positional confidence ellipse, in degrees clockwise from true north.
  /// Example: /// Example: 75.7
  /// Constraints: No constraints specified.
  #[inline]
  pub fn angleOrientation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_ANGLEORIENTATION, Some(0.0)).unwrap()}
  }
  /// Number of sensors used in the lightning event location solution.
  /// Example: /// Example: 9
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lightEventNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(WeatherData_Abridged::VT_LIGHTEVENTNUM, Some(0)).unwrap()}
  }
  /// Array of sensor(s) that participated in the lightning event location determination.
  /// Example: /// Example: [11, 28, 190]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lightDetSensors(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_LIGHTDETSENSORS, None)}
  }
  /// The positional confidence of the calculated lightning event location using the chi-square statistical method.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn posConfidence(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(WeatherData_Abridged::VT_POSCONFIDENCE, Some(0.0)).unwrap()}
  }
  /// Array of UDL record types (SENSOR, WEATHERREPORT) that are related to this WeatherData record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SENSOR', 'WEATHERREPORT']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_SRCTYPS, None)}
  }
  /// Array of UUID(s) of the UDL data record(s) that are related to this WeatherData record. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['1b23ba93-0957-4654-b5ca-8c3703f3ec57', '32944ee4-0437-4d94-95ce-2f2823ffa001']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(WeatherData_Abridged::VT_SRCIDS, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Time the row was created in the database.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WeatherData_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> WeatherData_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<WeatherData_Abridged_dataMode_Enum>(WeatherData_Abridged::VT_DATAMODE, Some(WeatherData_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for WeatherData_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obTime", Self::VT_OBTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sigPwrs", Self::VT_SIGPWRS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("noiseLvls", Self::VT_NOISELVLS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("specWidths", Self::VT_SPECWIDTHS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("firstGuessAvgs", Self::VT_FIRSTGUESSAVGS, false)?
     .visit_field::<i32>("qcValue", Self::VT_QCVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fileCreation", Self::VT_FILECREATION, false)?
     .visit_field::<f64>("termAlt", Self::VT_TERMALT, false)?
     .visit_field::<f64>("avgTxPwr", Self::VT_AVGTXPWR, false)?
     .visit_field::<f64>("avgRefPwr", Self::VT_AVGREFPWR, false)?
     .visit_field::<i32>("sectorNum", Self::VT_SECTORNUM, false)?
     .visit_field::<i32>("numElements", Self::VT_NUMELEMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tdAvgSampleNums", Self::VT_TDAVGSAMPLENUMS, false)?
     .visit_field::<i32>("checksum", Self::VT_CHECKSUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("coIntegs", Self::VT_COINTEGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("specAvgs", Self::VT_SPECAVGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("interpulsePeriods", Self::VT_INTERPULSEPERIODS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("doppVels", Self::VT_DOPPVELS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("consRecs", Self::VT_CONSRECS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("snrs", Self::VT_SNRS, false)?
     .visit_field::<f64>("sigStrength", Self::VT_SIGSTRENGTH, false)?
     .visit_field::<f64>("semiMajorAxis", Self::VT_SEMIMAJORAXIS, false)?
     .visit_field::<f64>("semiMinorAxis", Self::VT_SEMIMINORAXIS, false)?
     .visit_field::<f64>("angleOrientation", Self::VT_ANGLEORIENTATION, false)?
     .visit_field::<i32>("lightEventNum", Self::VT_LIGHTEVENTNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("lightDetSensors", Self::VT_LIGHTDETSENSORS, false)?
     .visit_field::<f64>("posConfidence", Self::VT_POSCONFIDENCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcTyps", Self::VT_SRCTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcIds", Self::VT_SRCIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<WeatherData_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct WeatherData_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sigPwrs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub noiseLvls: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub specWidths: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub firstGuessAvgs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub qcValue: i32,
    pub fileCreation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub termAlt: f64,
    pub avgTxPwr: f64,
    pub avgRefPwr: f64,
    pub sectorNum: i32,
    pub numElements: i32,
    pub tdAvgSampleNums: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub checksum: i32,
    pub coIntegs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub specAvgs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub interpulsePeriods: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub doppVels: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub consRecs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub snrs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sigStrength: f64,
    pub semiMajorAxis: f64,
    pub semiMinorAxis: f64,
    pub angleOrientation: f64,
    pub lightEventNum: i32,
    pub lightDetSensors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub posConfidence: f64,
    pub srcTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: WeatherData_Abridged_dataMode_Enum,
}
impl<'a> Default for WeatherData_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    WeatherData_AbridgedArgs {
      id: None,
      classificationMarking: None,
      idSensor: None,
      origSensorId: None,
      obTime: None,
      sigPwrs: None,
      noiseLvls: None,
      specWidths: None,
      firstGuessAvgs: None,
      qcValue: 0,
      fileCreation: None,
      termAlt: 0.0,
      avgTxPwr: 0.0,
      avgRefPwr: 0.0,
      sectorNum: 0,
      numElements: 0,
      tdAvgSampleNums: None,
      checksum: 0,
      coIntegs: None,
      specAvgs: None,
      interpulsePeriods: None,
      doppVels: None,
      consRecs: None,
      snrs: None,
      sigStrength: 0.0,
      semiMajorAxis: 0.0,
      semiMinorAxis: 0.0,
      angleOrientation: 0.0,
      lightEventNum: 0,
      lightDetSensors: None,
      posConfidence: 0.0,
      srcTyps: None,
      srcIds: None,
      origNetwork: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: WeatherData_Abridged_dataMode_Enum::REAL,
    }
  }
}

pub struct WeatherData_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WeatherData_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_obTime(&mut self, obTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_OBTIME, obTime);
  }
  #[inline]
  pub fn add_sigPwrs(&mut self, sigPwrs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_SIGPWRS, sigPwrs);
  }
  #[inline]
  pub fn add_noiseLvls(&mut self, noiseLvls: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_NOISELVLS, noiseLvls);
  }
  #[inline]
  pub fn add_specWidths(&mut self, specWidths: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_SPECWIDTHS, specWidths);
  }
  #[inline]
  pub fn add_firstGuessAvgs(&mut self, firstGuessAvgs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_FIRSTGUESSAVGS, firstGuessAvgs);
  }
  #[inline]
  pub fn add_qcValue(&mut self, qcValue: i32) {
    self.fbb_.push_slot::<i32>(WeatherData_Abridged::VT_QCVALUE, qcValue, 0);
  }
  #[inline]
  pub fn add_fileCreation(&mut self, fileCreation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_FILECREATION, fileCreation);
  }
  #[inline]
  pub fn add_termAlt(&mut self, termAlt: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_TERMALT, termAlt, 0.0);
  }
  #[inline]
  pub fn add_avgTxPwr(&mut self, avgTxPwr: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_AVGTXPWR, avgTxPwr, 0.0);
  }
  #[inline]
  pub fn add_avgRefPwr(&mut self, avgRefPwr: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_AVGREFPWR, avgRefPwr, 0.0);
  }
  #[inline]
  pub fn add_sectorNum(&mut self, sectorNum: i32) {
    self.fbb_.push_slot::<i32>(WeatherData_Abridged::VT_SECTORNUM, sectorNum, 0);
  }
  #[inline]
  pub fn add_numElements(&mut self, numElements: i32) {
    self.fbb_.push_slot::<i32>(WeatherData_Abridged::VT_NUMELEMENTS, numElements, 0);
  }
  #[inline]
  pub fn add_tdAvgSampleNums(&mut self, tdAvgSampleNums: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_TDAVGSAMPLENUMS, tdAvgSampleNums);
  }
  #[inline]
  pub fn add_checksum(&mut self, checksum: i32) {
    self.fbb_.push_slot::<i32>(WeatherData_Abridged::VT_CHECKSUM, checksum, 0);
  }
  #[inline]
  pub fn add_coIntegs(&mut self, coIntegs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_COINTEGS, coIntegs);
  }
  #[inline]
  pub fn add_specAvgs(&mut self, specAvgs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_SPECAVGS, specAvgs);
  }
  #[inline]
  pub fn add_interpulsePeriods(&mut self, interpulsePeriods: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_INTERPULSEPERIODS, interpulsePeriods);
  }
  #[inline]
  pub fn add_doppVels(&mut self, doppVels: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_DOPPVELS, doppVels);
  }
  #[inline]
  pub fn add_consRecs(&mut self, consRecs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_CONSRECS, consRecs);
  }
  #[inline]
  pub fn add_snrs(&mut self, snrs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_SNRS, snrs);
  }
  #[inline]
  pub fn add_sigStrength(&mut self, sigStrength: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_SIGSTRENGTH, sigStrength, 0.0);
  }
  #[inline]
  pub fn add_semiMajorAxis(&mut self, semiMajorAxis: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_SEMIMAJORAXIS, semiMajorAxis, 0.0);
  }
  #[inline]
  pub fn add_semiMinorAxis(&mut self, semiMinorAxis: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_SEMIMINORAXIS, semiMinorAxis, 0.0);
  }
  #[inline]
  pub fn add_angleOrientation(&mut self, angleOrientation: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_ANGLEORIENTATION, angleOrientation, 0.0);
  }
  #[inline]
  pub fn add_lightEventNum(&mut self, lightEventNum: i32) {
    self.fbb_.push_slot::<i32>(WeatherData_Abridged::VT_LIGHTEVENTNUM, lightEventNum, 0);
  }
  #[inline]
  pub fn add_lightDetSensors(&mut self, lightDetSensors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_LIGHTDETSENSORS, lightDetSensors);
  }
  #[inline]
  pub fn add_posConfidence(&mut self, posConfidence: f64) {
    self.fbb_.push_slot::<f64>(WeatherData_Abridged::VT_POSCONFIDENCE, posConfidence, 0.0);
  }
  #[inline]
  pub fn add_srcTyps(&mut self, srcTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_SRCTYPS, srcTyps);
  }
  #[inline]
  pub fn add_srcIds(&mut self, srcIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_SRCIDS, srcIds);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WeatherData_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: WeatherData_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<WeatherData_Abridged_dataMode_Enum>(WeatherData_Abridged::VT_DATAMODE, dataMode, WeatherData_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WeatherData_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WeatherData_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WeatherData_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WeatherData_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WeatherData_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idSensor", &self.idSensor());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("obTime", &self.obTime());
      ds.field("sigPwrs", &self.sigPwrs());
      ds.field("noiseLvls", &self.noiseLvls());
      ds.field("specWidths", &self.specWidths());
      ds.field("firstGuessAvgs", &self.firstGuessAvgs());
      ds.field("qcValue", &self.qcValue());
      ds.field("fileCreation", &self.fileCreation());
      ds.field("termAlt", &self.termAlt());
      ds.field("avgTxPwr", &self.avgTxPwr());
      ds.field("avgRefPwr", &self.avgRefPwr());
      ds.field("sectorNum", &self.sectorNum());
      ds.field("numElements", &self.numElements());
      ds.field("tdAvgSampleNums", &self.tdAvgSampleNums());
      ds.field("checksum", &self.checksum());
      ds.field("coIntegs", &self.coIntegs());
      ds.field("specAvgs", &self.specAvgs());
      ds.field("interpulsePeriods", &self.interpulsePeriods());
      ds.field("doppVels", &self.doppVels());
      ds.field("consRecs", &self.consRecs());
      ds.field("snrs", &self.snrs());
      ds.field("sigStrength", &self.sigStrength());
      ds.field("semiMajorAxis", &self.semiMajorAxis());
      ds.field("semiMinorAxis", &self.semiMinorAxis());
      ds.field("angleOrientation", &self.angleOrientation());
      ds.field("lightEventNum", &self.lightEventNum());
      ds.field("lightDetSensors", &self.lightDetSensors());
      ds.field("posConfidence", &self.posConfidence());
      ds.field("srcTyps", &self.srcTyps());
      ds.field("srcIds", &self.srcIds());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct WeatherData_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idSensor: Option<String>,
  pub origSensorId: Option<String>,
  pub obTime: Option<String>,
  pub sigPwrs: Option<Vec<String>>,
  pub noiseLvls: Option<Vec<String>>,
  pub specWidths: Option<Vec<String>>,
  pub firstGuessAvgs: Option<Vec<String>>,
  pub qcValue: i32,
  pub fileCreation: Option<String>,
  pub termAlt: f64,
  pub avgTxPwr: f64,
  pub avgRefPwr: f64,
  pub sectorNum: i32,
  pub numElements: i32,
  pub tdAvgSampleNums: Option<Vec<String>>,
  pub checksum: i32,
  pub coIntegs: Option<Vec<String>>,
  pub specAvgs: Option<Vec<String>>,
  pub interpulsePeriods: Option<Vec<String>>,
  pub doppVels: Option<Vec<String>>,
  pub consRecs: Option<Vec<String>>,
  pub snrs: Option<Vec<String>>,
  pub sigStrength: f64,
  pub semiMajorAxis: f64,
  pub semiMinorAxis: f64,
  pub angleOrientation: f64,
  pub lightEventNum: i32,
  pub lightDetSensors: Option<Vec<String>>,
  pub posConfidence: f64,
  pub srcTyps: Option<Vec<String>>,
  pub srcIds: Option<Vec<String>>,
  pub origNetwork: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: WeatherData_Abridged_dataMode_Enum,
}
impl Default for WeatherData_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idSensor: None,
      origSensorId: None,
      obTime: None,
      sigPwrs: None,
      noiseLvls: None,
      specWidths: None,
      firstGuessAvgs: None,
      qcValue: 0,
      fileCreation: None,
      termAlt: 0.0,
      avgTxPwr: 0.0,
      avgRefPwr: 0.0,
      sectorNum: 0,
      numElements: 0,
      tdAvgSampleNums: None,
      checksum: 0,
      coIntegs: None,
      specAvgs: None,
      interpulsePeriods: None,
      doppVels: None,
      consRecs: None,
      snrs: None,
      sigStrength: 0.0,
      semiMajorAxis: 0.0,
      semiMinorAxis: 0.0,
      angleOrientation: 0.0,
      lightEventNum: 0,
      lightDetSensors: None,
      posConfidence: 0.0,
      srcTyps: None,
      srcIds: None,
      origNetwork: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: WeatherData_Abridged_dataMode_Enum::REAL,
    }
  }
}
impl WeatherData_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<WeatherData_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obTime = self.obTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sigPwrs = self.sigPwrs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let noiseLvls = self.noiseLvls.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let specWidths = self.specWidths.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let firstGuessAvgs = self.firstGuessAvgs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let qcValue = self.qcValue;
    let fileCreation = self.fileCreation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let termAlt = self.termAlt;
    let avgTxPwr = self.avgTxPwr;
    let avgRefPwr = self.avgRefPwr;
    let sectorNum = self.sectorNum;
    let numElements = self.numElements;
    let tdAvgSampleNums = self.tdAvgSampleNums.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let checksum = self.checksum;
    let coIntegs = self.coIntegs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let specAvgs = self.specAvgs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let interpulsePeriods = self.interpulsePeriods.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let doppVels = self.doppVels.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let consRecs = self.consRecs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let snrs = self.snrs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sigStrength = self.sigStrength;
    let semiMajorAxis = self.semiMajorAxis;
    let semiMinorAxis = self.semiMinorAxis;
    let angleOrientation = self.angleOrientation;
    let lightEventNum = self.lightEventNum;
    let lightDetSensors = self.lightDetSensors.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let posConfidence = self.posConfidence;
    let srcTyps = self.srcTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcIds = self.srcIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    WeatherData_Abridged::create(_fbb, &WeatherData_AbridgedArgs{
      id,
      classificationMarking,
      idSensor,
      origSensorId,
      obTime,
      sigPwrs,
      noiseLvls,
      specWidths,
      firstGuessAvgs,
      qcValue,
      fileCreation,
      termAlt,
      avgTxPwr,
      avgRefPwr,
      sectorNum,
      numElements,
      tdAvgSampleNums,
      checksum,
      coIntegs,
      specAvgs,
      interpulsePeriods,
      doppVels,
      consRecs,
      snrs,
      sigStrength,
      semiMajorAxis,
      semiMinorAxis,
      angleOrientation,
      lightEventNum,
      lightDetSensors,
      posConfidence,
      srcTyps,
      srcIds,
      origNetwork,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `WeatherData_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_weather_data_abridged_unchecked`.
pub fn root_as_weather_data_abridged(buf: &[u8]) -> Result<WeatherData_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<WeatherData_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `WeatherData_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_weather_data_abridged_unchecked`.
pub fn size_prefixed_root_as_weather_data_abridged(buf: &[u8]) -> Result<WeatherData_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<WeatherData_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `WeatherData_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_weather_data_abridged_unchecked`.
pub fn root_as_weather_data_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<WeatherData_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<WeatherData_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `WeatherData_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_weather_data_abridged_unchecked`.
pub fn size_prefixed_root_as_weather_data_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<WeatherData_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<WeatherData_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a WeatherData_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `WeatherData_Abridged`.
pub unsafe fn root_as_weather_data_abridged_unchecked(buf: &[u8]) -> WeatherData_Abridged {
  flatbuffers::root_unchecked::<WeatherData_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed WeatherData_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `WeatherData_Abridged`.
pub unsafe fn size_prefixed_root_as_weather_data_abridged_unchecked(buf: &[u8]) -> WeatherData_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<WeatherData_Abridged>(buf)
}
pub const WEATHER_DATA_ABRIDGED_IDENTIFIER: &str = "WEAT";

#[inline]
pub fn weather_data_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, WEATHER_DATA_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn weather_data_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, WEATHER_DATA_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_weather_data_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<WeatherData_Abridged<'a>>) {
  fbb.finish(root, Some(WEATHER_DATA_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_weather_data_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<WeatherData_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(WEATHER_DATA_ABRIDGED_IDENTIFIER));
}
