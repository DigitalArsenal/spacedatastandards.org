// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_FLIGHT_PLAN_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_FLIGHT_PLAN_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_FLIGHT_PLAN_ABRIDGED_DATA_MODE_ENUM: [FlightPlan_Abridged_dataMode_Enum; 4] = [
  FlightPlan_Abridged_dataMode_Enum::REAL,
  FlightPlan_Abridged_dataMode_Enum::TEST,
  FlightPlan_Abridged_dataMode_Enum::SIMULATED,
  FlightPlan_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct FlightPlan_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl FlightPlan_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for FlightPlan_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for FlightPlan_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for FlightPlan_Abridged_dataMode_Enum {
    type Output = FlightPlan_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for FlightPlan_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for FlightPlan_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for FlightPlan_Abridged_dataMode_Enum {}
pub enum FlightPlan_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Flight Plan contains data specifying the details of an intended flight including schedule and expected route.
pub struct FlightPlan_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FlightPlan_Abridged<'a> {
  type Inner = FlightPlan_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FlightPlan_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_AMCMISSIONID: flatbuffers::VOffsetT = 8;
  pub const VT_IDSORTIE: flatbuffers::VOffsetT = 10;
  pub const VT_IDAIRCRAFT: flatbuffers::VOffsetT = 12;
  pub const VT_LEGNUM: flatbuffers::VOffsetT = 14;
  pub const VT_IDDEPAIRFIELD: flatbuffers::VOffsetT = 16;
  pub const VT_DEPAIRFIELD: flatbuffers::VOffsetT = 18;
  pub const VT_IDARRAIRFIELD: flatbuffers::VOffsetT = 20;
  pub const VT_ARRAIRFIELD: flatbuffers::VOffsetT = 22;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 24;
  pub const VT_GENTS: flatbuffers::VOffsetT = 26;
  pub const VT_AIRCRAFTMDS: flatbuffers::VOffsetT = 28;
  pub const VT_TAILNUMBER: flatbuffers::VOffsetT = 30;
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 32;
  pub const VT_WXVALIDSTART: flatbuffers::VOffsetT = 34;
  pub const VT_WXVALIDEND: flatbuffers::VOffsetT = 36;
  pub const VT_ESTDEPTIME: flatbuffers::VOffsetT = 38;
  pub const VT_DRAGINDEX: flatbuffers::VOffsetT = 40;
  pub const VT_FUELDEGRADE: flatbuffers::VOffsetT = 42;
  pub const VT_OPWEIGHT: flatbuffers::VOffsetT = 44;
  pub const VT_MSNINDEX: flatbuffers::VOffsetT = 46;
  pub const VT_RAMPFUEL: flatbuffers::VOffsetT = 48;
  pub const VT_TAXIFUEL: flatbuffers::VOffsetT = 50;
  pub const VT_TAKEOFFFUEL: flatbuffers::VOffsetT = 52;
  pub const VT_CLIMBFUEL: flatbuffers::VOffsetT = 54;
  pub const VT_CLIMBTIME: flatbuffers::VOffsetT = 56;
  pub const VT_HOLDDOWNFUEL: flatbuffers::VOffsetT = 58;
  pub const VT_TOCICEFUEL: flatbuffers::VOffsetT = 60;
  pub const VT_TOCFUEL: flatbuffers::VOffsetT = 62;
  pub const VT_ENROUTEFUEL: flatbuffers::VOffsetT = 64;
  pub const VT_ENROUTETIME: flatbuffers::VOffsetT = 66;
  pub const VT_THUNDERAVOIDFUEL: flatbuffers::VOffsetT = 68;
  pub const VT_TODICEFUEL: flatbuffers::VOffsetT = 70;
  pub const VT_OPCONDITIONFUEL: flatbuffers::VOffsetT = 72;
  pub const VT_TODFUEL: flatbuffers::VOffsetT = 74;
  pub const VT_EARLYDESCENTFUEL: flatbuffers::VOffsetT = 76;
  pub const VT_ARRICEFUEL: flatbuffers::VOffsetT = 78;
  pub const VT_HOLDFUEL: flatbuffers::VOffsetT = 80;
  pub const VT_HOLDTIME: flatbuffers::VOffsetT = 82;
  pub const VT_APPLANDINGFUEL: flatbuffers::VOffsetT = 84;
  pub const VT_BURNEDFUEL: flatbuffers::VOffsetT = 86;
  pub const VT_LANDINGFUEL: flatbuffers::VOffsetT = 88;
  pub const VT_MINDIVERTFUEL: flatbuffers::VOffsetT = 90;
  pub const VT_ARRALTERNATE1FUEL: flatbuffers::VOffsetT = 92;
  pub const VT_ARRALTERNATE2FUEL: flatbuffers::VOffsetT = 94;
  pub const VT_CONTINGENCYFUEL: flatbuffers::VOffsetT = 96;
  pub const VT_RESERVEFUEL: flatbuffers::VOffsetT = 98;
  pub const VT_DEPRESSFUEL: flatbuffers::VOffsetT = 100;
  pub const VT_UNUSABLEFUEL: flatbuffers::VOffsetT = 102;
  pub const VT_UNIDENTEXTRAFUEL: flatbuffers::VOffsetT = 104;
  pub const VT_IDENTEXTRAFUEL: flatbuffers::VOffsetT = 106;
  pub const VT_REMALTERNATE1FUEL: flatbuffers::VOffsetT = 108;
  pub const VT_REMALTERNATE2FUEL: flatbuffers::VOffsetT = 110;
  pub const VT_ENDURANCETIME: flatbuffers::VOffsetT = 112;
  pub const VT_SID: flatbuffers::VOffsetT = 114;
  pub const VT_STAR: flatbuffers::VOffsetT = 116;
  pub const VT_GPSRAIM: flatbuffers::VOffsetT = 118;
  pub const VT_DEPRUNWAY: flatbuffers::VOffsetT = 120;
  pub const VT_ARRRUNWAY: flatbuffers::VOffsetT = 122;
  pub const VT_ROUTESTRING: flatbuffers::VOffsetT = 124;
  pub const VT_COUNTRYCODES: flatbuffers::VOffsetT = 126;
  pub const VT_ETOPSRATING: flatbuffers::VOffsetT = 128;
  pub const VT_ETOPSAIRFIELDS: flatbuffers::VOffsetT = 130;
  pub const VT_ETOPSALTAIRFIELDS: flatbuffers::VOffsetT = 132;
  pub const VT_ETOPSVALWINDOW: flatbuffers::VOffsetT = 134;
  pub const VT_PLANNERREMARK: flatbuffers::VOffsetT = 136;
  pub const VT_CARGOREMARK: flatbuffers::VOffsetT = 138;
  pub const VT_WINDFAC1: flatbuffers::VOffsetT = 140;
  pub const VT_WINDFAC2: flatbuffers::VOffsetT = 142;
  pub const VT_WINDFACAVG: flatbuffers::VOffsetT = 144;
  pub const VT_AVGTEMPDEV: flatbuffers::VOffsetT = 146;
  pub const VT_ATCADDRESSES: flatbuffers::VOffsetT = 148;
  pub const VT_ORIGINATOR: flatbuffers::VOffsetT = 150;
  pub const VT_NUMAIRCRAFT: flatbuffers::VOffsetT = 152;
  pub const VT_FLIGHTRULES: flatbuffers::VOffsetT = 154;
  pub const VT_FLIGHTTYPE: flatbuffers::VOffsetT = 156;
  pub const VT_INITIALCRUISESPEED: flatbuffers::VOffsetT = 158;
  pub const VT_INITIALFLIGHTLEVEL: flatbuffers::VOffsetT = 160;
  pub const VT_ARRALTERNATE1: flatbuffers::VOffsetT = 162;
  pub const VT_ARRALTERNATE2: flatbuffers::VOffsetT = 164;
  pub const VT_DEPALTERNATE: flatbuffers::VOffsetT = 166;
  pub const VT_WAKETURBCAT: flatbuffers::VOffsetT = 168;
  pub const VT_EQUIPMENT: flatbuffers::VOffsetT = 170;
  pub const VT_NOTES: flatbuffers::VOffsetT = 172;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 174;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 176;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 178;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 180;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 182;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 184;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 186;
  pub const VT_AIRREFUELEVENTS: flatbuffers::VOffsetT = 188;
  pub const VT_FLIGHTPLANMESSAGES: flatbuffers::VOffsetT = 190;
  pub const VT_FLIGHTPLANWAYPOINTS: flatbuffers::VOffsetT = 192;
  pub const VT_FLIGHTPLANPOINTGROUPS: flatbuffers::VOffsetT = 194;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FlightPlan_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FlightPlan_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<FlightPlan_Abridged<'bldr>> {
    let mut builder = FlightPlan_AbridgedBuilder::new(_fbb);
    builder.add_avgTempDev(args.avgTempDev);
    builder.add_windFacAvg(args.windFacAvg);
    builder.add_windFac2(args.windFac2);
    builder.add_windFac1(args.windFac1);
    builder.add_remAlternate2Fuel(args.remAlternate2Fuel);
    builder.add_remAlternate1Fuel(args.remAlternate1Fuel);
    builder.add_identExtraFuel(args.identExtraFuel);
    builder.add_unidentExtraFuel(args.unidentExtraFuel);
    builder.add_unusableFuel(args.unusableFuel);
    builder.add_depressFuel(args.depressFuel);
    builder.add_reserveFuel(args.reserveFuel);
    builder.add_contingencyFuel(args.contingencyFuel);
    builder.add_arrAlternate2Fuel(args.arrAlternate2Fuel);
    builder.add_arrAlternate1Fuel(args.arrAlternate1Fuel);
    builder.add_minDivertFuel(args.minDivertFuel);
    builder.add_landingFuel(args.landingFuel);
    builder.add_burnedFuel(args.burnedFuel);
    builder.add_appLandingFuel(args.appLandingFuel);
    builder.add_holdFuel(args.holdFuel);
    builder.add_arrIceFuel(args.arrIceFuel);
    builder.add_earlyDescentFuel(args.earlyDescentFuel);
    builder.add_todFuel(args.todFuel);
    builder.add_opConditionFuel(args.opConditionFuel);
    builder.add_todIceFuel(args.todIceFuel);
    builder.add_thunderAvoidFuel(args.thunderAvoidFuel);
    builder.add_enrouteFuel(args.enrouteFuel);
    builder.add_tocFuel(args.tocFuel);
    builder.add_tocIceFuel(args.tocIceFuel);
    builder.add_holdDownFuel(args.holdDownFuel);
    builder.add_climbFuel(args.climbFuel);
    builder.add_takeoffFuel(args.takeoffFuel);
    builder.add_taxiFuel(args.taxiFuel);
    builder.add_rampFuel(args.rampFuel);
    builder.add_msnIndex(args.msnIndex);
    builder.add_opWeight(args.opWeight);
    builder.add_fuelDegrade(args.fuelDegrade);
    builder.add_dragIndex(args.dragIndex);
    if let Some(x) = args.flightPlanPointGroups { builder.add_flightPlanPointGroups(x); }
    if let Some(x) = args.flightPlanWaypoints { builder.add_flightPlanWaypoints(x); }
    if let Some(x) = args.flightPlanMessages { builder.add_flightPlanMessages(x); }
    if let Some(x) = args.airRefuelEvents { builder.add_airRefuelEvents(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.equipment { builder.add_equipment(x); }
    if let Some(x) = args.wakeTurbCat { builder.add_wakeTurbCat(x); }
    if let Some(x) = args.depAlternate { builder.add_depAlternate(x); }
    if let Some(x) = args.arrAlternate2 { builder.add_arrAlternate2(x); }
    if let Some(x) = args.arrAlternate1 { builder.add_arrAlternate1(x); }
    if let Some(x) = args.initialFlightLevel { builder.add_initialFlightLevel(x); }
    if let Some(x) = args.initialCruiseSpeed { builder.add_initialCruiseSpeed(x); }
    if let Some(x) = args.flightType { builder.add_flightType(x); }
    if let Some(x) = args.flightRules { builder.add_flightRules(x); }
    builder.add_numAircraft(args.numAircraft);
    if let Some(x) = args.originator { builder.add_originator(x); }
    if let Some(x) = args.atcAddresses { builder.add_atcAddresses(x); }
    if let Some(x) = args.cargoRemark { builder.add_cargoRemark(x); }
    if let Some(x) = args.plannerRemark { builder.add_plannerRemark(x); }
    if let Some(x) = args.etopsValWindow { builder.add_etopsValWindow(x); }
    if let Some(x) = args.etopsAltAirfields { builder.add_etopsAltAirfields(x); }
    if let Some(x) = args.etopsAirfields { builder.add_etopsAirfields(x); }
    if let Some(x) = args.etopsRating { builder.add_etopsRating(x); }
    if let Some(x) = args.countryCodes { builder.add_countryCodes(x); }
    if let Some(x) = args.routeString { builder.add_routeString(x); }
    if let Some(x) = args.arrRunway { builder.add_arrRunway(x); }
    if let Some(x) = args.depRunway { builder.add_depRunway(x); }
    if let Some(x) = args.gpsRAIM { builder.add_gpsRAIM(x); }
    if let Some(x) = args.star { builder.add_star(x); }
    if let Some(x) = args.sid { builder.add_sid(x); }
    if let Some(x) = args.enduranceTime { builder.add_enduranceTime(x); }
    if let Some(x) = args.holdTime { builder.add_holdTime(x); }
    if let Some(x) = args.enrouteTime { builder.add_enrouteTime(x); }
    if let Some(x) = args.climbTime { builder.add_climbTime(x); }
    if let Some(x) = args.estDepTime { builder.add_estDepTime(x); }
    if let Some(x) = args.wxValidEnd { builder.add_wxValidEnd(x); }
    if let Some(x) = args.wxValidStart { builder.add_wxValidStart(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    if let Some(x) = args.tailNumber { builder.add_tailNumber(x); }
    if let Some(x) = args.aircraftMDS { builder.add_aircraftMDS(x); }
    if let Some(x) = args.genTS { builder.add_genTS(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.arrAirfield { builder.add_arrAirfield(x); }
    if let Some(x) = args.idArrAirfield { builder.add_idArrAirfield(x); }
    if let Some(x) = args.depAirfield { builder.add_depAirfield(x); }
    if let Some(x) = args.idDepAirfield { builder.add_idDepAirfield(x); }
    builder.add_legNum(args.legNum);
    if let Some(x) = args.idAircraft { builder.add_idAircraft(x); }
    if let Some(x) = args.idSortie { builder.add_idSortie(x); }
    if let Some(x) = args.amcMissionId { builder.add_amcMissionId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> FlightPlan_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let amcMissionId = self.amcMissionId().map(|x| {
      x.to_string()
    });
    let idSortie = self.idSortie().map(|x| {
      x.to_string()
    });
    let idAircraft = self.idAircraft().map(|x| {
      x.to_string()
    });
    let legNum = self.legNum();
    let idDepAirfield = self.idDepAirfield().map(|x| {
      x.to_string()
    });
    let depAirfield = self.depAirfield().map(|x| {
      x.to_string()
    });
    let idArrAirfield = self.idArrAirfield().map(|x| {
      x.to_string()
    });
    let arrAirfield = self.arrAirfield().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let genTS = self.genTS().map(|x| {
      x.to_string()
    });
    let aircraftMDS = self.aircraftMDS().map(|x| {
      x.to_string()
    });
    let tailNumber = self.tailNumber().map(|x| {
      x.to_string()
    });
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let wxValidStart = self.wxValidStart().map(|x| {
      x.to_string()
    });
    let wxValidEnd = self.wxValidEnd().map(|x| {
      x.to_string()
    });
    let estDepTime = self.estDepTime().map(|x| {
      x.to_string()
    });
    let dragIndex = self.dragIndex();
    let fuelDegrade = self.fuelDegrade();
    let opWeight = self.opWeight();
    let msnIndex = self.msnIndex();
    let rampFuel = self.rampFuel();
    let taxiFuel = self.taxiFuel();
    let takeoffFuel = self.takeoffFuel();
    let climbFuel = self.climbFuel();
    let climbTime = self.climbTime().map(|x| {
      x.to_string()
    });
    let holdDownFuel = self.holdDownFuel();
    let tocIceFuel = self.tocIceFuel();
    let tocFuel = self.tocFuel();
    let enrouteFuel = self.enrouteFuel();
    let enrouteTime = self.enrouteTime().map(|x| {
      x.to_string()
    });
    let thunderAvoidFuel = self.thunderAvoidFuel();
    let todIceFuel = self.todIceFuel();
    let opConditionFuel = self.opConditionFuel();
    let todFuel = self.todFuel();
    let earlyDescentFuel = self.earlyDescentFuel();
    let arrIceFuel = self.arrIceFuel();
    let holdFuel = self.holdFuel();
    let holdTime = self.holdTime().map(|x| {
      x.to_string()
    });
    let appLandingFuel = self.appLandingFuel();
    let burnedFuel = self.burnedFuel();
    let landingFuel = self.landingFuel();
    let minDivertFuel = self.minDivertFuel();
    let arrAlternate1Fuel = self.arrAlternate1Fuel();
    let arrAlternate2Fuel = self.arrAlternate2Fuel();
    let contingencyFuel = self.contingencyFuel();
    let reserveFuel = self.reserveFuel();
    let depressFuel = self.depressFuel();
    let unusableFuel = self.unusableFuel();
    let unidentExtraFuel = self.unidentExtraFuel();
    let identExtraFuel = self.identExtraFuel();
    let remAlternate1Fuel = self.remAlternate1Fuel();
    let remAlternate2Fuel = self.remAlternate2Fuel();
    let enduranceTime = self.enduranceTime().map(|x| {
      x.to_string()
    });
    let sid = self.sid().map(|x| {
      x.to_string()
    });
    let star = self.star().map(|x| {
      x.to_string()
    });
    let gpsRAIM = self.gpsRAIM().map(|x| {
      x.to_string()
    });
    let depRunway = self.depRunway().map(|x| {
      x.to_string()
    });
    let arrRunway = self.arrRunway().map(|x| {
      x.to_string()
    });
    let routeString = self.routeString().map(|x| {
      x.to_string()
    });
    let countryCodes = self.countryCodes().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let etopsRating = self.etopsRating().map(|x| {
      x.to_string()
    });
    let etopsAirfields = self.etopsAirfields().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let etopsAltAirfields = self.etopsAltAirfields().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let etopsValWindow = self.etopsValWindow().map(|x| {
      x.to_string()
    });
    let plannerRemark = self.plannerRemark().map(|x| {
      x.to_string()
    });
    let cargoRemark = self.cargoRemark().map(|x| {
      x.to_string()
    });
    let windFac1 = self.windFac1();
    let windFac2 = self.windFac2();
    let windFacAvg = self.windFacAvg();
    let avgTempDev = self.avgTempDev();
    let atcAddresses = self.atcAddresses().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let originator = self.originator().map(|x| {
      x.to_string()
    });
    let numAircraft = self.numAircraft();
    let flightRules = self.flightRules().map(|x| {
      x.to_string()
    });
    let flightType = self.flightType().map(|x| {
      x.to_string()
    });
    let initialCruiseSpeed = self.initialCruiseSpeed().map(|x| {
      x.to_string()
    });
    let initialFlightLevel = self.initialFlightLevel().map(|x| {
      x.to_string()
    });
    let arrAlternate1 = self.arrAlternate1().map(|x| {
      x.to_string()
    });
    let arrAlternate2 = self.arrAlternate2().map(|x| {
      x.to_string()
    });
    let depAlternate = self.depAlternate().map(|x| {
      x.to_string()
    });
    let wakeTurbCat = self.wakeTurbCat().map(|x| {
      x.to_string()
    });
    let equipment = self.equipment().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let airRefuelEvents = self.airRefuelEvents().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let flightPlanMessages = self.flightPlanMessages().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let flightPlanWaypoints = self.flightPlanWaypoints().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let flightPlanPointGroups = self.flightPlanPointGroups().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    FlightPlan_AbridgedT {
      id,
      classificationMarking,
      amcMissionId,
      idSortie,
      idAircraft,
      legNum,
      idDepAirfield,
      depAirfield,
      idArrAirfield,
      arrAirfield,
      externalId,
      genTS,
      aircraftMDS,
      tailNumber,
      callSign,
      wxValidStart,
      wxValidEnd,
      estDepTime,
      dragIndex,
      fuelDegrade,
      opWeight,
      msnIndex,
      rampFuel,
      taxiFuel,
      takeoffFuel,
      climbFuel,
      climbTime,
      holdDownFuel,
      tocIceFuel,
      tocFuel,
      enrouteFuel,
      enrouteTime,
      thunderAvoidFuel,
      todIceFuel,
      opConditionFuel,
      todFuel,
      earlyDescentFuel,
      arrIceFuel,
      holdFuel,
      holdTime,
      appLandingFuel,
      burnedFuel,
      landingFuel,
      minDivertFuel,
      arrAlternate1Fuel,
      arrAlternate2Fuel,
      contingencyFuel,
      reserveFuel,
      depressFuel,
      unusableFuel,
      unidentExtraFuel,
      identExtraFuel,
      remAlternate1Fuel,
      remAlternate2Fuel,
      enduranceTime,
      sid,
      star,
      gpsRAIM,
      depRunway,
      arrRunway,
      routeString,
      countryCodes,
      etopsRating,
      etopsAirfields,
      etopsAltAirfields,
      etopsValWindow,
      plannerRemark,
      cargoRemark,
      windFac1,
      windFac2,
      windFacAvg,
      avgTempDev,
      atcAddresses,
      originator,
      numAircraft,
      flightRules,
      flightType,
      initialCruiseSpeed,
      initialFlightLevel,
      arrAlternate1,
      arrAlternate2,
      depAlternate,
      wakeTurbCat,
      equipment,
      notes,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
      airRefuelEvents,
      flightPlanMessages,
      flightPlanWaypoints,
      flightPlanPointGroups,
    }
  }

  /// Unique identifier of the record, auto-generated by the system if not provided on create operations.
  /// Example: /// Example: c44b0a80-9fef-63d9-6267-79037fb93e4c
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Air Mobility Command (AMC) mission identifier according to Mobility Air Forces (MAF) encode/decode procedures.
  /// Example: /// Example: AJM7939B1123
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn amcMissionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_AMCMISSIONID, None)}
  }
  /// The UDL unique identifier of the aircraft sortie associated with this flight plan.
  /// Example: /// Example: 9d60c1b1-10b1-b2a7-e403-84c5d7eeb170
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSortie(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_IDSORTIE, None)}
  }
  /// The UDL unique identifier of the aircraft associated with this flight plan.
  /// Example: /// Example: 4f4a67c6-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idAircraft(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_IDAIRCRAFT, None)}
  }
  /// The leg number of this flight plan.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FlightPlan_Abridged::VT_LEGNUM, Some(0)).unwrap()}
  }
  /// The UDL unique identifier of the departure airfield associated with this flight plan.
  /// Example: /// Example: 2a9020f6-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idDepAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_IDDEPAIRFIELD, None)}
  }
  /// The airfield identifier of the departure location, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KSLV
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn depAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_DEPAIRFIELD, None)}
  }
  /// The UDL unique identifier of the arrival airfield associated with this flight plan.
  /// Example: /// Example: 363080c2-40fd-11ee-be56-0242ac120002
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idArrAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_IDARRAIRFIELD, None)}
  }
  /// The airfield identifier of the arrival location, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: KCHS
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn arrAirfield(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ARRAIRFIELD, None)}
  }
  /// The source ID of the flight plan from the generating system.
  /// Example: /// Example: AFMAPP20322347140001
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_EXTERNALID, None)}
  }
  /// The generation time of this flight plan in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn genTS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_GENTS, None)}
  }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of the aircraft associated with this flight plan. Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: KC-130 HERCULES
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn aircraftMDS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_AIRCRAFTMDS, None)}
  }
  /// The tail number of the aircraft associated with this flight plan.
  /// Example: /// Example: 77187
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tailNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_TAILNUMBER, None)}
  }
  /// The call sign assigned to the aircraft for this flight plan.
  /// Example: /// Example: HKY629
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_CALLSIGN, None)}
  }
  /// The date and time the weather valid period begins in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn wxValidStart(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_WXVALIDSTART, None)}
  }
  /// The date and time the weather valid period ends in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn wxValidEnd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_WXVALIDEND, None)}
  }
  /// The estimated time of departure for the aircraft, in ISO 8601 UTC format, with millisecond precision.
  /// Example: /// Example: 2023-05-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ESTDEPTIME, None)}
  }
  /// The percent degrade due to drag for this aircraft.
  /// Example: /// Example: 16.9
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dragIndex(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_DRAGINDEX, Some(0.0)).unwrap()}
  }
  /// The fuel degrade percentage used for this mission.
  /// Example: /// Example: 10.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelDegrade(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_FUELDEGRADE, Some(0.0)).unwrap()}
  }
  /// Operating weight of the aircraft in pounds.
  /// Example: /// Example: 251830.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn opWeight(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_OPWEIGHT, Some(0.0)).unwrap()}
  }
  /// The mission index value for this mission. The mission index is the ratio of time-related cost of aircraft operation to the cost of fuel.
  /// Example: /// Example: 44.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn msnIndex(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_MSNINDEX, Some(0.0)).unwrap()}
  }
  /// Total of all fuel required to complete the flight in pounds, including fuel to be dispensed on a refueling mission.
  /// Example: /// Example: 180000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rampFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_RAMPFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel required to start engines and taxi to the end of the runway in pounds.
  /// Example: /// Example: 1500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn taxiFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_TAXIFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel at takeoff, which is calculated as the ramp fuel minus the taxi fuel in pounds.
  /// Example: /// Example: 178500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn takeoffFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_TAKEOFFFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel required from brake release to Top of Climb in pounds.
  /// Example: /// Example: 7000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn climbFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_CLIMBFUEL, Some(0.0)).unwrap()}
  }
  /// Time required from brake release to Top of Climb expressed as HH:MM.
  /// Example: /// Example: 00:13
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn climbTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_CLIMBTIME, None)}
  }
  /// Additional fuel burned at Top of Climb in pounds.
  /// Example: /// Example: 500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn holdDownFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_HOLDDOWNFUEL, Some(0.0)).unwrap()}
  }
  /// Additional fuel burned at Top of Climb for icing in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tocIceFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_TOCICEFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel remaining at Top of Climb in pounds.
  /// Example: /// Example: 160000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tocFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_TOCFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel required to fly from Top of Climb to Top of Descent in pounds.
  /// Example: /// Example: 155000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn enrouteFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_ENROUTEFUEL, Some(0.0)).unwrap()}
  }
  /// Time required to fly from Top of Climb to Top of Descent expressed as HH:MM.
  /// Example: /// Example: 06:30
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn enrouteTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ENROUTETIME, None)}
  }
  /// Additional fuel burned at Top of Descent for thunderstorm avoidance in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn thunderAvoidFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_THUNDERAVOIDFUEL, Some(0.0)).unwrap()}
  }
  /// Additional fuel burned at Top of Descent for icing in pounds.
  /// Example: /// Example: 2000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn todIceFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_TODICEFUEL, Some(0.0)).unwrap()}
  }
  /// Additional fuel burned at Top of Descent for the operational condition in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn opConditionFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_OPCONDITIONFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel remaining at Top of Descent in pounds.
  /// Example: /// Example: 32000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn todFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_TODFUEL, Some(0.0)).unwrap()}
  }
  /// Additional fuel burned at landing/missed approach for an early descent in pounds.
  /// Example: /// Example: 500.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn earlyDescentFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_EARLYDESCENTFUEL, Some(0.0)).unwrap()}
  }
  /// Additional fuel burned at landing/missed approach for icing during arrival in pounds.
  /// Example: /// Example: 1000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn arrIceFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_ARRICEFUEL, Some(0.0)).unwrap()}
  }
  /// Additional fuel burned at the destination for holding in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn holdFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_HOLDFUEL, Some(0.0)).unwrap()}
  }
  /// Additional time for holding at the destination expressed as HH:MM.
  /// Example: /// Example: 01:00
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn holdTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_HOLDTIME, None)}
  }
  /// Fuel burned from the initial approach point to landing in pounds.
  /// Example: /// Example: 3000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn appLandingFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_APPLANDINGFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel planned to be burned during the flight in pounds.
  /// Example: /// Example: 145000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn burnedFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_BURNEDFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel planned to be remaining on the airplane at landing in pounds.
  /// Example: /// Example: 19000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn landingFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_LANDINGFUEL, Some(0.0)).unwrap()}
  }
  /// The minimum fuel on board required to divert in pounds.
  /// Example: /// Example: 25000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn minDivertFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_MINDIVERTFUEL, Some(0.0)).unwrap()}
  }
  /// Fuel required to fly to alternate landing site 1 and land in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn arrAlternate1Fuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_ARRALTERNATE1FUEL, Some(0.0)).unwrap()}
  }
  /// Fuel required to fly to alternate landing site 2 and land in pounds.
  /// Example: /// Example: 6000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn arrAlternate2Fuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_ARRALTERNATE2FUEL, Some(0.0)).unwrap()}
  }
  /// The amount of contingency fuel in pounds.
  /// Example: /// Example: 3000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn contingencyFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_CONTINGENCYFUEL, Some(0.0)).unwrap()}
  }
  /// The amount of reserve fuel in pounds.
  /// Example: /// Example: 10000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reserveFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_RESERVEFUEL, Some(0.0)).unwrap()}
  }
  /// The depressurization fuel required to fly from the Equal Time Point to the Last Suitable/First Suitable airfield at depressurization altitude in pounds.
  /// Example: /// Example: 20000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn depressFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_DEPRESSFUEL, Some(0.0)).unwrap()}
  }
  /// The amount of unusable fuel in pounds.
  /// Example: /// Example: 2300.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn unusableFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_UNUSABLEFUEL, Some(0.0)).unwrap()}
  }
  /// The amount of unidentified extra fuel required to get to min landing in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn unidentExtraFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_UNIDENTEXTRAFUEL, Some(0.0)).unwrap()}
  }
  /// The amount of identified extra fuel carried and not available in the burn plan in pounds.
  /// Example: /// Example: 5000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn identExtraFuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_IDENTEXTRAFUEL, Some(0.0)).unwrap()}
  }
  /// Total fuel remaining at alternate landing site 1 in pounds.
  /// Example: /// Example: 18000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn remAlternate1Fuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_REMALTERNATE1FUEL, Some(0.0)).unwrap()}
  }
  /// Total fuel remaining at alternate landing site 2 in pounds.
  /// Example: /// Example: 18000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn remAlternate2Fuel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_REMALTERNATE2FUEL, Some(0.0)).unwrap()}
  }
  /// Total endurance time based on the fuel on board expressed as HH:MM.
  /// Example: /// Example: 08:45
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn enduranceTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ENDURANCETIME, None)}
  }
  /// Name of the planned Standard Instrument Departure (SID) procedure.
  /// Example: /// Example: RENV3B
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn sid(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_SID, None)}
  }
  /// Name of the planned Standard Terminal Arrival (STAR) procedure.
  /// Example: /// Example: ADANA
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn star(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_STAR, None)}
  }
  /// The GPS Receiver Autonomous Integrity Monitoring (RAIM) message. A RAIM system assesses the integrity of the GPS signals. This system predicts outages for a specified geographical area. These predictions are based on the location, path, and scheduled GPS satellite outages.
  /// Example: /// Example: Failed by FAA SAPT 184022AUG2022
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn gpsRAIM(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_GPSRAIM, None)}
  }
  /// The departure runway for this flight.
  /// Example: /// Example: 05L
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn depRunway(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_DEPRUNWAY, None)}
  }
  /// The arrival runway for this flight.
  /// Example: /// Example: 05L
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn arrRunway(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ARRRUNWAY, None)}
  }
  /// The 1801 fileable route of flight string for this flight. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  /// Example: /// Example: RENV3B RENVI Y86 GOSVA/N0317F260 DCT EVLIT DCT UMUGI DCT NISIX DCT GIGOD DCT DIPEB DCT
  /// GORPI Z80 TILAV L87 RAKIT Z717 PODUS Z130 MAG/N0298F220 Z20 KENIG/N0319F220 Z20 ORTAG T177
  /// ESEGU Z20 BEBLA DCT MASEK/N0300F200 DCT GISEM/N0319F200 DCT BOMBI/N0276F060 DCT RIDSU DCT
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn routeString(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ROUTESTRING, None)}
  }
  /// Array of country codes for the countries overflown during this flight in ISO 3166-1 Alpha-2 format.
  /// Example: /// Example: ['US', 'CA', 'UK']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn countryCodes(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_COUNTRYCODES, None)}
  }
  /// The Extended Operations (ETOPS) rating used to calculate this flight plan.
  /// Example: /// Example: 85 MINUTES
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn etopsRating(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ETOPSRATING, None)}
  }
  /// Array of Extended Operations (ETOPS) adequate landing airfields that are within the mission region.
  /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn etopsAirfields(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_ETOPSAIRFIELDS, None)}
  }
  /// Array of Extended Operations (ETOPS) alternate suitable landing airfields that are within the mission region.
  /// Example: /// Example: ['KHSV', 'KISP', 'KBG', 'LTBS']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn etopsAltAirfields(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_ETOPSALTAIRFIELDS, None)}
  }
  /// The Extended Operations (ETOPS) validity window for the alternate airfield.
  /// Example: /// Example: LPLA: 0317Z-0722Z
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn etopsValWindow(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ETOPSVALWINDOW, None)}
  }
  /// Remarks from the planners concerning this flight plan.
  /// Example: /// Example: Flight plan is good for 2 days before airspace closes over the UK.
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn plannerRemark(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_PLANNERREMARK, None)}
  }
  /// Remarks about the planned cargo associated with this flight plan.
  /// Example: /// Example: Expecting 55,000 lbs. If different, call us.
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn cargoRemark(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_CARGOREMARK, None)}
  }
  /// Wind factor for the first half of the route. This is the average wind factor from first Top of Climb to the mid-time of the entire route in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: -1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn windFac1(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_WINDFAC1, Some(0.0)).unwrap()}
  }
  /// Wind factor for the second half of the route. This is the average wind factor from the mid-time of the entire route to last Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn windFac2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_WINDFAC2, Some(0.0)).unwrap()}
  }
  /// Average wind factor from Top of Climb to Top of Descent in knots. A positive value indicates a headwind, while a negative value indicates a tailwind.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn windFacAvg(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_WINDFACAVG, Some(0.0)).unwrap()}
  }
  /// Average temperature deviation of the primary, divert, and alternate path for the route between first Top of Climb and last Top of Descent in degrees Celsius.
  /// Example: /// Example: 16.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn avgTempDev(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(FlightPlan_Abridged::VT_AVGTEMPDEV, Some(0.0)).unwrap()}
  }
  /// Array of Air Traffic Control (ATC) addresses.
  /// Example: /// Example: ['EYCBZMFO', 'EUCHZMFP', 'ETARYXYX', 'EDUUZVZI']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn atcAddresses(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_ATCADDRESSES, None)}
  }
  /// Air Traffic Control address filing the flight plan.
  /// Example: /// Example: ETARYXYX
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn originator(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ORIGINATOR, None)}
  }
  /// The number of aircraft flying this flight plan.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numAircraft(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(FlightPlan_Abridged::VT_NUMAIRCRAFT, Some(0)).unwrap()}
  }
  /// The flight rules this flight plan is being filed under.
  /// Example: /// Example: l
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn flightRules(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_FLIGHTRULES, None)}
  }
  /// The type of flight (MILITARY, CIVILIAN, etc).
  /// Example: /// Example: MILITARY
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn flightType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_FLIGHTTYPE, None)}
  }
  /// A character string representation of the initial filed cruise speed for this flight (prepended values of K, N, and M represent kilometers per hour, knots, and Mach, respectively).
  /// Example: /// Example: N0305
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn initialCruiseSpeed(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_INITIALCRUISESPEED, None)}
  }
  /// A character string representation of the initial filed altitude level for this flight (prepended values of F, S, A, and M represent flight level in hundreds of feet, standard metric level in tens of meters, altitude in hundreds of feet, and altitude in tens of meters, respectively).
  /// Example: /// Example: F270
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn initialFlightLevel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_INITIALFLIGHTLEVEL, None)}
  }
  /// The first designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: EDDS
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn arrAlternate1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ARRALTERNATE1, None)}
  }
  /// The second designated alternate arrival airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: EDDM
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn arrAlternate2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ARRALTERNATE2, None)}
  }
  /// The designated alternate departure airfield, International Civil Aviation Organization (ICAO) code preferred.
  /// Example: /// Example: LFPO
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn depAlternate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_DEPALTERNATE, None)}
  }
  /// The wake turbulence category for this flight. The categories are assigned by the International Civil Aviation Organization (ICAO) and are based on maximum certified takeoff mass for the purpose of separating aircraft in flight due to wake turbulence. Valid values include LIGHT, MEDIUM, LARGE, HEAVY, and SUPER.
  /// Example: /// Example: MEDIUM
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn wakeTurbCat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_WAKETURBCAT, None)}
  }
  /// The list of equipment on the aircraft as defined in the Flight Information Publications (FLIP) General Planning (GP) manual.
  /// Example: /// Example: SDFGHIRTUWXYZ/H
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn equipment(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_EQUIPMENT, None)}
  }
  /// Additional remarks for air traffic control for this flight.
  /// Example: /// Example: STS/STATE PBN/A1B2B5C2C4D2D4 EUR/PROTECTED
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_NOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FlightPlan_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> FlightPlan_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<FlightPlan_Abridged_dataMode_Enum>(FlightPlan_Abridged::VT_DATAMODE, Some(FlightPlan_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// Collection of air refueling events occurring on this flight.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn airRefuelEvents(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_AIRREFUELEVENTS, None)}
  }
  /// Collection of messages associated with this flight plan indicating the severity, the point where the message was generated, the path (Primary, Alternate, etc.), and the text of the message.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn flightPlanMessages(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_FLIGHTPLANMESSAGES, None)}
  }
  /// Collection of waypoints associated with this flight plan.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn flightPlanWaypoints(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_FLIGHTPLANWAYPOINTS, None)}
  }
  /// Collection of point groups generated for this flight plan. Groups include point sets for Extended Operations (ETOPS), Critical Fuel Point, and Equal Time Point (ETP).
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn flightPlanPointGroups(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(FlightPlan_Abridged::VT_FLIGHTPLANPOINTGROUPS, None)}
  }
}

impl flatbuffers::Verifiable for FlightPlan_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("amcMissionId", Self::VT_AMCMISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSortie", Self::VT_IDSORTIE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idAircraft", Self::VT_IDAIRCRAFT, false)?
     .visit_field::<i32>("legNum", Self::VT_LEGNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idDepAirfield", Self::VT_IDDEPAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depAirfield", Self::VT_DEPAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idArrAirfield", Self::VT_IDARRAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrAirfield", Self::VT_ARRAIRFIELD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("genTS", Self::VT_GENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftMDS", Self::VT_AIRCRAFTMDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tailNumber", Self::VT_TAILNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("wxValidStart", Self::VT_WXVALIDSTART, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("wxValidEnd", Self::VT_WXVALIDEND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estDepTime", Self::VT_ESTDEPTIME, false)?
     .visit_field::<f64>("dragIndex", Self::VT_DRAGINDEX, false)?
     .visit_field::<f64>("fuelDegrade", Self::VT_FUELDEGRADE, false)?
     .visit_field::<f64>("opWeight", Self::VT_OPWEIGHT, false)?
     .visit_field::<f64>("msnIndex", Self::VT_MSNINDEX, false)?
     .visit_field::<f64>("rampFuel", Self::VT_RAMPFUEL, false)?
     .visit_field::<f64>("taxiFuel", Self::VT_TAXIFUEL, false)?
     .visit_field::<f64>("takeoffFuel", Self::VT_TAKEOFFFUEL, false)?
     .visit_field::<f64>("climbFuel", Self::VT_CLIMBFUEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("climbTime", Self::VT_CLIMBTIME, false)?
     .visit_field::<f64>("holdDownFuel", Self::VT_HOLDDOWNFUEL, false)?
     .visit_field::<f64>("tocIceFuel", Self::VT_TOCICEFUEL, false)?
     .visit_field::<f64>("tocFuel", Self::VT_TOCFUEL, false)?
     .visit_field::<f64>("enrouteFuel", Self::VT_ENROUTEFUEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("enrouteTime", Self::VT_ENROUTETIME, false)?
     .visit_field::<f64>("thunderAvoidFuel", Self::VT_THUNDERAVOIDFUEL, false)?
     .visit_field::<f64>("todIceFuel", Self::VT_TODICEFUEL, false)?
     .visit_field::<f64>("opConditionFuel", Self::VT_OPCONDITIONFUEL, false)?
     .visit_field::<f64>("todFuel", Self::VT_TODFUEL, false)?
     .visit_field::<f64>("earlyDescentFuel", Self::VT_EARLYDESCENTFUEL, false)?
     .visit_field::<f64>("arrIceFuel", Self::VT_ARRICEFUEL, false)?
     .visit_field::<f64>("holdFuel", Self::VT_HOLDFUEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("holdTime", Self::VT_HOLDTIME, false)?
     .visit_field::<f64>("appLandingFuel", Self::VT_APPLANDINGFUEL, false)?
     .visit_field::<f64>("burnedFuel", Self::VT_BURNEDFUEL, false)?
     .visit_field::<f64>("landingFuel", Self::VT_LANDINGFUEL, false)?
     .visit_field::<f64>("minDivertFuel", Self::VT_MINDIVERTFUEL, false)?
     .visit_field::<f64>("arrAlternate1Fuel", Self::VT_ARRALTERNATE1FUEL, false)?
     .visit_field::<f64>("arrAlternate2Fuel", Self::VT_ARRALTERNATE2FUEL, false)?
     .visit_field::<f64>("contingencyFuel", Self::VT_CONTINGENCYFUEL, false)?
     .visit_field::<f64>("reserveFuel", Self::VT_RESERVEFUEL, false)?
     .visit_field::<f64>("depressFuel", Self::VT_DEPRESSFUEL, false)?
     .visit_field::<f64>("unusableFuel", Self::VT_UNUSABLEFUEL, false)?
     .visit_field::<f64>("unidentExtraFuel", Self::VT_UNIDENTEXTRAFUEL, false)?
     .visit_field::<f64>("identExtraFuel", Self::VT_IDENTEXTRAFUEL, false)?
     .visit_field::<f64>("remAlternate1Fuel", Self::VT_REMALTERNATE1FUEL, false)?
     .visit_field::<f64>("remAlternate2Fuel", Self::VT_REMALTERNATE2FUEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("enduranceTime", Self::VT_ENDURANCETIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sid", Self::VT_SID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("star", Self::VT_STAR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("gpsRAIM", Self::VT_GPSRAIM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depRunway", Self::VT_DEPRUNWAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrRunway", Self::VT_ARRRUNWAY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("routeString", Self::VT_ROUTESTRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("countryCodes", Self::VT_COUNTRYCODES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("etopsRating", Self::VT_ETOPSRATING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("etopsAirfields", Self::VT_ETOPSAIRFIELDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("etopsAltAirfields", Self::VT_ETOPSALTAIRFIELDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("etopsValWindow", Self::VT_ETOPSVALWINDOW, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("plannerRemark", Self::VT_PLANNERREMARK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cargoRemark", Self::VT_CARGOREMARK, false)?
     .visit_field::<f64>("windFac1", Self::VT_WINDFAC1, false)?
     .visit_field::<f64>("windFac2", Self::VT_WINDFAC2, false)?
     .visit_field::<f64>("windFacAvg", Self::VT_WINDFACAVG, false)?
     .visit_field::<f64>("avgTempDev", Self::VT_AVGTEMPDEV, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("atcAddresses", Self::VT_ATCADDRESSES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("originator", Self::VT_ORIGINATOR, false)?
     .visit_field::<i32>("numAircraft", Self::VT_NUMAIRCRAFT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("flightRules", Self::VT_FLIGHTRULES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("flightType", Self::VT_FLIGHTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("initialCruiseSpeed", Self::VT_INITIALCRUISESPEED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("initialFlightLevel", Self::VT_INITIALFLIGHTLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrAlternate1", Self::VT_ARRALTERNATE1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrAlternate2", Self::VT_ARRALTERNATE2, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depAlternate", Self::VT_DEPALTERNATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("wakeTurbCat", Self::VT_WAKETURBCAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("equipment", Self::VT_EQUIPMENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<FlightPlan_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("airRefuelEvents", Self::VT_AIRREFUELEVENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("flightPlanMessages", Self::VT_FLIGHTPLANMESSAGES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("flightPlanWaypoints", Self::VT_FLIGHTPLANWAYPOINTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("flightPlanPointGroups", Self::VT_FLIGHTPLANPOINTGROUPS, false)?
     .finish();
    Ok(())
  }
}
pub struct FlightPlan_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub amcMissionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSortie: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idAircraft: Option<flatbuffers::WIPOffset<&'a str>>,
    pub legNum: i32,
    pub idDepAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idArrAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrAirfield: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub genTS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftMDS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tailNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub wxValidStart: Option<flatbuffers::WIPOffset<&'a str>>,
    pub wxValidEnd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dragIndex: f64,
    pub fuelDegrade: f64,
    pub opWeight: f64,
    pub msnIndex: f64,
    pub rampFuel: f64,
    pub taxiFuel: f64,
    pub takeoffFuel: f64,
    pub climbFuel: f64,
    pub climbTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub holdDownFuel: f64,
    pub tocIceFuel: f64,
    pub tocFuel: f64,
    pub enrouteFuel: f64,
    pub enrouteTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub thunderAvoidFuel: f64,
    pub todIceFuel: f64,
    pub opConditionFuel: f64,
    pub todFuel: f64,
    pub earlyDescentFuel: f64,
    pub arrIceFuel: f64,
    pub holdFuel: f64,
    pub holdTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub appLandingFuel: f64,
    pub burnedFuel: f64,
    pub landingFuel: f64,
    pub minDivertFuel: f64,
    pub arrAlternate1Fuel: f64,
    pub arrAlternate2Fuel: f64,
    pub contingencyFuel: f64,
    pub reserveFuel: f64,
    pub depressFuel: f64,
    pub unusableFuel: f64,
    pub unidentExtraFuel: f64,
    pub identExtraFuel: f64,
    pub remAlternate1Fuel: f64,
    pub remAlternate2Fuel: f64,
    pub enduranceTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sid: Option<flatbuffers::WIPOffset<&'a str>>,
    pub star: Option<flatbuffers::WIPOffset<&'a str>>,
    pub gpsRAIM: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depRunway: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrRunway: Option<flatbuffers::WIPOffset<&'a str>>,
    pub routeString: Option<flatbuffers::WIPOffset<&'a str>>,
    pub countryCodes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub etopsRating: Option<flatbuffers::WIPOffset<&'a str>>,
    pub etopsAirfields: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub etopsAltAirfields: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub etopsValWindow: Option<flatbuffers::WIPOffset<&'a str>>,
    pub plannerRemark: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cargoRemark: Option<flatbuffers::WIPOffset<&'a str>>,
    pub windFac1: f64,
    pub windFac2: f64,
    pub windFacAvg: f64,
    pub avgTempDev: f64,
    pub atcAddresses: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub originator: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numAircraft: i32,
    pub flightRules: Option<flatbuffers::WIPOffset<&'a str>>,
    pub flightType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub initialCruiseSpeed: Option<flatbuffers::WIPOffset<&'a str>>,
    pub initialFlightLevel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrAlternate1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrAlternate2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depAlternate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub wakeTurbCat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub equipment: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: FlightPlan_Abridged_dataMode_Enum,
    pub airRefuelEvents: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub flightPlanMessages: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub flightPlanWaypoints: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub flightPlanPointGroups: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for FlightPlan_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    FlightPlan_AbridgedArgs {
      id: None,
      classificationMarking: None,
      amcMissionId: None,
      idSortie: None,
      idAircraft: None,
      legNum: 0,
      idDepAirfield: None,
      depAirfield: None,
      idArrAirfield: None,
      arrAirfield: None,
      externalId: None,
      genTS: None,
      aircraftMDS: None,
      tailNumber: None,
      callSign: None,
      wxValidStart: None,
      wxValidEnd: None,
      estDepTime: None,
      dragIndex: 0.0,
      fuelDegrade: 0.0,
      opWeight: 0.0,
      msnIndex: 0.0,
      rampFuel: 0.0,
      taxiFuel: 0.0,
      takeoffFuel: 0.0,
      climbFuel: 0.0,
      climbTime: None,
      holdDownFuel: 0.0,
      tocIceFuel: 0.0,
      tocFuel: 0.0,
      enrouteFuel: 0.0,
      enrouteTime: None,
      thunderAvoidFuel: 0.0,
      todIceFuel: 0.0,
      opConditionFuel: 0.0,
      todFuel: 0.0,
      earlyDescentFuel: 0.0,
      arrIceFuel: 0.0,
      holdFuel: 0.0,
      holdTime: None,
      appLandingFuel: 0.0,
      burnedFuel: 0.0,
      landingFuel: 0.0,
      minDivertFuel: 0.0,
      arrAlternate1Fuel: 0.0,
      arrAlternate2Fuel: 0.0,
      contingencyFuel: 0.0,
      reserveFuel: 0.0,
      depressFuel: 0.0,
      unusableFuel: 0.0,
      unidentExtraFuel: 0.0,
      identExtraFuel: 0.0,
      remAlternate1Fuel: 0.0,
      remAlternate2Fuel: 0.0,
      enduranceTime: None,
      sid: None,
      star: None,
      gpsRAIM: None,
      depRunway: None,
      arrRunway: None,
      routeString: None,
      countryCodes: None,
      etopsRating: None,
      etopsAirfields: None,
      etopsAltAirfields: None,
      etopsValWindow: None,
      plannerRemark: None,
      cargoRemark: None,
      windFac1: 0.0,
      windFac2: 0.0,
      windFacAvg: 0.0,
      avgTempDev: 0.0,
      atcAddresses: None,
      originator: None,
      numAircraft: 0,
      flightRules: None,
      flightType: None,
      initialCruiseSpeed: None,
      initialFlightLevel: None,
      arrAlternate1: None,
      arrAlternate2: None,
      depAlternate: None,
      wakeTurbCat: None,
      equipment: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: FlightPlan_Abridged_dataMode_Enum::REAL,
      airRefuelEvents: None,
      flightPlanMessages: None,
      flightPlanWaypoints: None,
      flightPlanPointGroups: None,
    }
  }
}

pub struct FlightPlan_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FlightPlan_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_amcMissionId(&mut self, amcMissionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_AMCMISSIONID, amcMissionId);
  }
  #[inline]
  pub fn add_idSortie(&mut self, idSortie: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_IDSORTIE, idSortie);
  }
  #[inline]
  pub fn add_idAircraft(&mut self, idAircraft: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_IDAIRCRAFT, idAircraft);
  }
  #[inline]
  pub fn add_legNum(&mut self, legNum: i32) {
    self.fbb_.push_slot::<i32>(FlightPlan_Abridged::VT_LEGNUM, legNum, 0);
  }
  #[inline]
  pub fn add_idDepAirfield(&mut self, idDepAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_IDDEPAIRFIELD, idDepAirfield);
  }
  #[inline]
  pub fn add_depAirfield(&mut self, depAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_DEPAIRFIELD, depAirfield);
  }
  #[inline]
  pub fn add_idArrAirfield(&mut self, idArrAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_IDARRAIRFIELD, idArrAirfield);
  }
  #[inline]
  pub fn add_arrAirfield(&mut self, arrAirfield: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ARRAIRFIELD, arrAirfield);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_genTS(&mut self, genTS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_GENTS, genTS);
  }
  #[inline]
  pub fn add_aircraftMDS(&mut self, aircraftMDS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_AIRCRAFTMDS, aircraftMDS);
  }
  #[inline]
  pub fn add_tailNumber(&mut self, tailNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_TAILNUMBER, tailNumber);
  }
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_wxValidStart(&mut self, wxValidStart: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_WXVALIDSTART, wxValidStart);
  }
  #[inline]
  pub fn add_wxValidEnd(&mut self, wxValidEnd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_WXVALIDEND, wxValidEnd);
  }
  #[inline]
  pub fn add_estDepTime(&mut self, estDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ESTDEPTIME, estDepTime);
  }
  #[inline]
  pub fn add_dragIndex(&mut self, dragIndex: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_DRAGINDEX, dragIndex, 0.0);
  }
  #[inline]
  pub fn add_fuelDegrade(&mut self, fuelDegrade: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_FUELDEGRADE, fuelDegrade, 0.0);
  }
  #[inline]
  pub fn add_opWeight(&mut self, opWeight: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_OPWEIGHT, opWeight, 0.0);
  }
  #[inline]
  pub fn add_msnIndex(&mut self, msnIndex: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_MSNINDEX, msnIndex, 0.0);
  }
  #[inline]
  pub fn add_rampFuel(&mut self, rampFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_RAMPFUEL, rampFuel, 0.0);
  }
  #[inline]
  pub fn add_taxiFuel(&mut self, taxiFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_TAXIFUEL, taxiFuel, 0.0);
  }
  #[inline]
  pub fn add_takeoffFuel(&mut self, takeoffFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_TAKEOFFFUEL, takeoffFuel, 0.0);
  }
  #[inline]
  pub fn add_climbFuel(&mut self, climbFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_CLIMBFUEL, climbFuel, 0.0);
  }
  #[inline]
  pub fn add_climbTime(&mut self, climbTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_CLIMBTIME, climbTime);
  }
  #[inline]
  pub fn add_holdDownFuel(&mut self, holdDownFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_HOLDDOWNFUEL, holdDownFuel, 0.0);
  }
  #[inline]
  pub fn add_tocIceFuel(&mut self, tocIceFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_TOCICEFUEL, tocIceFuel, 0.0);
  }
  #[inline]
  pub fn add_tocFuel(&mut self, tocFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_TOCFUEL, tocFuel, 0.0);
  }
  #[inline]
  pub fn add_enrouteFuel(&mut self, enrouteFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_ENROUTEFUEL, enrouteFuel, 0.0);
  }
  #[inline]
  pub fn add_enrouteTime(&mut self, enrouteTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ENROUTETIME, enrouteTime);
  }
  #[inline]
  pub fn add_thunderAvoidFuel(&mut self, thunderAvoidFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_THUNDERAVOIDFUEL, thunderAvoidFuel, 0.0);
  }
  #[inline]
  pub fn add_todIceFuel(&mut self, todIceFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_TODICEFUEL, todIceFuel, 0.0);
  }
  #[inline]
  pub fn add_opConditionFuel(&mut self, opConditionFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_OPCONDITIONFUEL, opConditionFuel, 0.0);
  }
  #[inline]
  pub fn add_todFuel(&mut self, todFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_TODFUEL, todFuel, 0.0);
  }
  #[inline]
  pub fn add_earlyDescentFuel(&mut self, earlyDescentFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_EARLYDESCENTFUEL, earlyDescentFuel, 0.0);
  }
  #[inline]
  pub fn add_arrIceFuel(&mut self, arrIceFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_ARRICEFUEL, arrIceFuel, 0.0);
  }
  #[inline]
  pub fn add_holdFuel(&mut self, holdFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_HOLDFUEL, holdFuel, 0.0);
  }
  #[inline]
  pub fn add_holdTime(&mut self, holdTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_HOLDTIME, holdTime);
  }
  #[inline]
  pub fn add_appLandingFuel(&mut self, appLandingFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_APPLANDINGFUEL, appLandingFuel, 0.0);
  }
  #[inline]
  pub fn add_burnedFuel(&mut self, burnedFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_BURNEDFUEL, burnedFuel, 0.0);
  }
  #[inline]
  pub fn add_landingFuel(&mut self, landingFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_LANDINGFUEL, landingFuel, 0.0);
  }
  #[inline]
  pub fn add_minDivertFuel(&mut self, minDivertFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_MINDIVERTFUEL, minDivertFuel, 0.0);
  }
  #[inline]
  pub fn add_arrAlternate1Fuel(&mut self, arrAlternate1Fuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_ARRALTERNATE1FUEL, arrAlternate1Fuel, 0.0);
  }
  #[inline]
  pub fn add_arrAlternate2Fuel(&mut self, arrAlternate2Fuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_ARRALTERNATE2FUEL, arrAlternate2Fuel, 0.0);
  }
  #[inline]
  pub fn add_contingencyFuel(&mut self, contingencyFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_CONTINGENCYFUEL, contingencyFuel, 0.0);
  }
  #[inline]
  pub fn add_reserveFuel(&mut self, reserveFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_RESERVEFUEL, reserveFuel, 0.0);
  }
  #[inline]
  pub fn add_depressFuel(&mut self, depressFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_DEPRESSFUEL, depressFuel, 0.0);
  }
  #[inline]
  pub fn add_unusableFuel(&mut self, unusableFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_UNUSABLEFUEL, unusableFuel, 0.0);
  }
  #[inline]
  pub fn add_unidentExtraFuel(&mut self, unidentExtraFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_UNIDENTEXTRAFUEL, unidentExtraFuel, 0.0);
  }
  #[inline]
  pub fn add_identExtraFuel(&mut self, identExtraFuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_IDENTEXTRAFUEL, identExtraFuel, 0.0);
  }
  #[inline]
  pub fn add_remAlternate1Fuel(&mut self, remAlternate1Fuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_REMALTERNATE1FUEL, remAlternate1Fuel, 0.0);
  }
  #[inline]
  pub fn add_remAlternate2Fuel(&mut self, remAlternate2Fuel: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_REMALTERNATE2FUEL, remAlternate2Fuel, 0.0);
  }
  #[inline]
  pub fn add_enduranceTime(&mut self, enduranceTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ENDURANCETIME, enduranceTime);
  }
  #[inline]
  pub fn add_sid(&mut self, sid: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_SID, sid);
  }
  #[inline]
  pub fn add_star(&mut self, star: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_STAR, star);
  }
  #[inline]
  pub fn add_gpsRAIM(&mut self, gpsRAIM: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_GPSRAIM, gpsRAIM);
  }
  #[inline]
  pub fn add_depRunway(&mut self, depRunway: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_DEPRUNWAY, depRunway);
  }
  #[inline]
  pub fn add_arrRunway(&mut self, arrRunway: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ARRRUNWAY, arrRunway);
  }
  #[inline]
  pub fn add_routeString(&mut self, routeString: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ROUTESTRING, routeString);
  }
  #[inline]
  pub fn add_countryCodes(&mut self, countryCodes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_COUNTRYCODES, countryCodes);
  }
  #[inline]
  pub fn add_etopsRating(&mut self, etopsRating: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ETOPSRATING, etopsRating);
  }
  #[inline]
  pub fn add_etopsAirfields(&mut self, etopsAirfields: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ETOPSAIRFIELDS, etopsAirfields);
  }
  #[inline]
  pub fn add_etopsAltAirfields(&mut self, etopsAltAirfields: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ETOPSALTAIRFIELDS, etopsAltAirfields);
  }
  #[inline]
  pub fn add_etopsValWindow(&mut self, etopsValWindow: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ETOPSVALWINDOW, etopsValWindow);
  }
  #[inline]
  pub fn add_plannerRemark(&mut self, plannerRemark: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_PLANNERREMARK, plannerRemark);
  }
  #[inline]
  pub fn add_cargoRemark(&mut self, cargoRemark: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_CARGOREMARK, cargoRemark);
  }
  #[inline]
  pub fn add_windFac1(&mut self, windFac1: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_WINDFAC1, windFac1, 0.0);
  }
  #[inline]
  pub fn add_windFac2(&mut self, windFac2: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_WINDFAC2, windFac2, 0.0);
  }
  #[inline]
  pub fn add_windFacAvg(&mut self, windFacAvg: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_WINDFACAVG, windFacAvg, 0.0);
  }
  #[inline]
  pub fn add_avgTempDev(&mut self, avgTempDev: f64) {
    self.fbb_.push_slot::<f64>(FlightPlan_Abridged::VT_AVGTEMPDEV, avgTempDev, 0.0);
  }
  #[inline]
  pub fn add_atcAddresses(&mut self, atcAddresses: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ATCADDRESSES, atcAddresses);
  }
  #[inline]
  pub fn add_originator(&mut self, originator: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ORIGINATOR, originator);
  }
  #[inline]
  pub fn add_numAircraft(&mut self, numAircraft: i32) {
    self.fbb_.push_slot::<i32>(FlightPlan_Abridged::VT_NUMAIRCRAFT, numAircraft, 0);
  }
  #[inline]
  pub fn add_flightRules(&mut self, flightRules: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_FLIGHTRULES, flightRules);
  }
  #[inline]
  pub fn add_flightType(&mut self, flightType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_FLIGHTTYPE, flightType);
  }
  #[inline]
  pub fn add_initialCruiseSpeed(&mut self, initialCruiseSpeed: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_INITIALCRUISESPEED, initialCruiseSpeed);
  }
  #[inline]
  pub fn add_initialFlightLevel(&mut self, initialFlightLevel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_INITIALFLIGHTLEVEL, initialFlightLevel);
  }
  #[inline]
  pub fn add_arrAlternate1(&mut self, arrAlternate1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ARRALTERNATE1, arrAlternate1);
  }
  #[inline]
  pub fn add_arrAlternate2(&mut self, arrAlternate2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ARRALTERNATE2, arrAlternate2);
  }
  #[inline]
  pub fn add_depAlternate(&mut self, depAlternate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_DEPALTERNATE, depAlternate);
  }
  #[inline]
  pub fn add_wakeTurbCat(&mut self, wakeTurbCat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_WAKETURBCAT, wakeTurbCat);
  }
  #[inline]
  pub fn add_equipment(&mut self, equipment: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_EQUIPMENT, equipment);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: FlightPlan_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<FlightPlan_Abridged_dataMode_Enum>(FlightPlan_Abridged::VT_DATAMODE, dataMode, FlightPlan_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_airRefuelEvents(&mut self, airRefuelEvents: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_AIRREFUELEVENTS, airRefuelEvents);
  }
  #[inline]
  pub fn add_flightPlanMessages(&mut self, flightPlanMessages: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_FLIGHTPLANMESSAGES, flightPlanMessages);
  }
  #[inline]
  pub fn add_flightPlanWaypoints(&mut self, flightPlanWaypoints: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_FLIGHTPLANWAYPOINTS, flightPlanWaypoints);
  }
  #[inline]
  pub fn add_flightPlanPointGroups(&mut self, flightPlanPointGroups: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FlightPlan_Abridged::VT_FLIGHTPLANPOINTGROUPS, flightPlanPointGroups);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FlightPlan_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FlightPlan_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FlightPlan_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FlightPlan_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FlightPlan_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("amcMissionId", &self.amcMissionId());
      ds.field("idSortie", &self.idSortie());
      ds.field("idAircraft", &self.idAircraft());
      ds.field("legNum", &self.legNum());
      ds.field("idDepAirfield", &self.idDepAirfield());
      ds.field("depAirfield", &self.depAirfield());
      ds.field("idArrAirfield", &self.idArrAirfield());
      ds.field("arrAirfield", &self.arrAirfield());
      ds.field("externalId", &self.externalId());
      ds.field("genTS", &self.genTS());
      ds.field("aircraftMDS", &self.aircraftMDS());
      ds.field("tailNumber", &self.tailNumber());
      ds.field("callSign", &self.callSign());
      ds.field("wxValidStart", &self.wxValidStart());
      ds.field("wxValidEnd", &self.wxValidEnd());
      ds.field("estDepTime", &self.estDepTime());
      ds.field("dragIndex", &self.dragIndex());
      ds.field("fuelDegrade", &self.fuelDegrade());
      ds.field("opWeight", &self.opWeight());
      ds.field("msnIndex", &self.msnIndex());
      ds.field("rampFuel", &self.rampFuel());
      ds.field("taxiFuel", &self.taxiFuel());
      ds.field("takeoffFuel", &self.takeoffFuel());
      ds.field("climbFuel", &self.climbFuel());
      ds.field("climbTime", &self.climbTime());
      ds.field("holdDownFuel", &self.holdDownFuel());
      ds.field("tocIceFuel", &self.tocIceFuel());
      ds.field("tocFuel", &self.tocFuel());
      ds.field("enrouteFuel", &self.enrouteFuel());
      ds.field("enrouteTime", &self.enrouteTime());
      ds.field("thunderAvoidFuel", &self.thunderAvoidFuel());
      ds.field("todIceFuel", &self.todIceFuel());
      ds.field("opConditionFuel", &self.opConditionFuel());
      ds.field("todFuel", &self.todFuel());
      ds.field("earlyDescentFuel", &self.earlyDescentFuel());
      ds.field("arrIceFuel", &self.arrIceFuel());
      ds.field("holdFuel", &self.holdFuel());
      ds.field("holdTime", &self.holdTime());
      ds.field("appLandingFuel", &self.appLandingFuel());
      ds.field("burnedFuel", &self.burnedFuel());
      ds.field("landingFuel", &self.landingFuel());
      ds.field("minDivertFuel", &self.minDivertFuel());
      ds.field("arrAlternate1Fuel", &self.arrAlternate1Fuel());
      ds.field("arrAlternate2Fuel", &self.arrAlternate2Fuel());
      ds.field("contingencyFuel", &self.contingencyFuel());
      ds.field("reserveFuel", &self.reserveFuel());
      ds.field("depressFuel", &self.depressFuel());
      ds.field("unusableFuel", &self.unusableFuel());
      ds.field("unidentExtraFuel", &self.unidentExtraFuel());
      ds.field("identExtraFuel", &self.identExtraFuel());
      ds.field("remAlternate1Fuel", &self.remAlternate1Fuel());
      ds.field("remAlternate2Fuel", &self.remAlternate2Fuel());
      ds.field("enduranceTime", &self.enduranceTime());
      ds.field("sid", &self.sid());
      ds.field("star", &self.star());
      ds.field("gpsRAIM", &self.gpsRAIM());
      ds.field("depRunway", &self.depRunway());
      ds.field("arrRunway", &self.arrRunway());
      ds.field("routeString", &self.routeString());
      ds.field("countryCodes", &self.countryCodes());
      ds.field("etopsRating", &self.etopsRating());
      ds.field("etopsAirfields", &self.etopsAirfields());
      ds.field("etopsAltAirfields", &self.etopsAltAirfields());
      ds.field("etopsValWindow", &self.etopsValWindow());
      ds.field("plannerRemark", &self.plannerRemark());
      ds.field("cargoRemark", &self.cargoRemark());
      ds.field("windFac1", &self.windFac1());
      ds.field("windFac2", &self.windFac2());
      ds.field("windFacAvg", &self.windFacAvg());
      ds.field("avgTempDev", &self.avgTempDev());
      ds.field("atcAddresses", &self.atcAddresses());
      ds.field("originator", &self.originator());
      ds.field("numAircraft", &self.numAircraft());
      ds.field("flightRules", &self.flightRules());
      ds.field("flightType", &self.flightType());
      ds.field("initialCruiseSpeed", &self.initialCruiseSpeed());
      ds.field("initialFlightLevel", &self.initialFlightLevel());
      ds.field("arrAlternate1", &self.arrAlternate1());
      ds.field("arrAlternate2", &self.arrAlternate2());
      ds.field("depAlternate", &self.depAlternate());
      ds.field("wakeTurbCat", &self.wakeTurbCat());
      ds.field("equipment", &self.equipment());
      ds.field("notes", &self.notes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("airRefuelEvents", &self.airRefuelEvents());
      ds.field("flightPlanMessages", &self.flightPlanMessages());
      ds.field("flightPlanWaypoints", &self.flightPlanWaypoints());
      ds.field("flightPlanPointGroups", &self.flightPlanPointGroups());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct FlightPlan_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub amcMissionId: Option<String>,
  pub idSortie: Option<String>,
  pub idAircraft: Option<String>,
  pub legNum: i32,
  pub idDepAirfield: Option<String>,
  pub depAirfield: Option<String>,
  pub idArrAirfield: Option<String>,
  pub arrAirfield: Option<String>,
  pub externalId: Option<String>,
  pub genTS: Option<String>,
  pub aircraftMDS: Option<String>,
  pub tailNumber: Option<String>,
  pub callSign: Option<String>,
  pub wxValidStart: Option<String>,
  pub wxValidEnd: Option<String>,
  pub estDepTime: Option<String>,
  pub dragIndex: f64,
  pub fuelDegrade: f64,
  pub opWeight: f64,
  pub msnIndex: f64,
  pub rampFuel: f64,
  pub taxiFuel: f64,
  pub takeoffFuel: f64,
  pub climbFuel: f64,
  pub climbTime: Option<String>,
  pub holdDownFuel: f64,
  pub tocIceFuel: f64,
  pub tocFuel: f64,
  pub enrouteFuel: f64,
  pub enrouteTime: Option<String>,
  pub thunderAvoidFuel: f64,
  pub todIceFuel: f64,
  pub opConditionFuel: f64,
  pub todFuel: f64,
  pub earlyDescentFuel: f64,
  pub arrIceFuel: f64,
  pub holdFuel: f64,
  pub holdTime: Option<String>,
  pub appLandingFuel: f64,
  pub burnedFuel: f64,
  pub landingFuel: f64,
  pub minDivertFuel: f64,
  pub arrAlternate1Fuel: f64,
  pub arrAlternate2Fuel: f64,
  pub contingencyFuel: f64,
  pub reserveFuel: f64,
  pub depressFuel: f64,
  pub unusableFuel: f64,
  pub unidentExtraFuel: f64,
  pub identExtraFuel: f64,
  pub remAlternate1Fuel: f64,
  pub remAlternate2Fuel: f64,
  pub enduranceTime: Option<String>,
  pub sid: Option<String>,
  pub star: Option<String>,
  pub gpsRAIM: Option<String>,
  pub depRunway: Option<String>,
  pub arrRunway: Option<String>,
  pub routeString: Option<String>,
  pub countryCodes: Option<Vec<String>>,
  pub etopsRating: Option<String>,
  pub etopsAirfields: Option<Vec<String>>,
  pub etopsAltAirfields: Option<Vec<String>>,
  pub etopsValWindow: Option<String>,
  pub plannerRemark: Option<String>,
  pub cargoRemark: Option<String>,
  pub windFac1: f64,
  pub windFac2: f64,
  pub windFacAvg: f64,
  pub avgTempDev: f64,
  pub atcAddresses: Option<Vec<String>>,
  pub originator: Option<String>,
  pub numAircraft: i32,
  pub flightRules: Option<String>,
  pub flightType: Option<String>,
  pub initialCruiseSpeed: Option<String>,
  pub initialFlightLevel: Option<String>,
  pub arrAlternate1: Option<String>,
  pub arrAlternate2: Option<String>,
  pub depAlternate: Option<String>,
  pub wakeTurbCat: Option<String>,
  pub equipment: Option<String>,
  pub notes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: FlightPlan_Abridged_dataMode_Enum,
  pub airRefuelEvents: Option<Vec<String>>,
  pub flightPlanMessages: Option<Vec<String>>,
  pub flightPlanWaypoints: Option<Vec<String>>,
  pub flightPlanPointGroups: Option<Vec<String>>,
}
impl Default for FlightPlan_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      amcMissionId: None,
      idSortie: None,
      idAircraft: None,
      legNum: 0,
      idDepAirfield: None,
      depAirfield: None,
      idArrAirfield: None,
      arrAirfield: None,
      externalId: None,
      genTS: None,
      aircraftMDS: None,
      tailNumber: None,
      callSign: None,
      wxValidStart: None,
      wxValidEnd: None,
      estDepTime: None,
      dragIndex: 0.0,
      fuelDegrade: 0.0,
      opWeight: 0.0,
      msnIndex: 0.0,
      rampFuel: 0.0,
      taxiFuel: 0.0,
      takeoffFuel: 0.0,
      climbFuel: 0.0,
      climbTime: None,
      holdDownFuel: 0.0,
      tocIceFuel: 0.0,
      tocFuel: 0.0,
      enrouteFuel: 0.0,
      enrouteTime: None,
      thunderAvoidFuel: 0.0,
      todIceFuel: 0.0,
      opConditionFuel: 0.0,
      todFuel: 0.0,
      earlyDescentFuel: 0.0,
      arrIceFuel: 0.0,
      holdFuel: 0.0,
      holdTime: None,
      appLandingFuel: 0.0,
      burnedFuel: 0.0,
      landingFuel: 0.0,
      minDivertFuel: 0.0,
      arrAlternate1Fuel: 0.0,
      arrAlternate2Fuel: 0.0,
      contingencyFuel: 0.0,
      reserveFuel: 0.0,
      depressFuel: 0.0,
      unusableFuel: 0.0,
      unidentExtraFuel: 0.0,
      identExtraFuel: 0.0,
      remAlternate1Fuel: 0.0,
      remAlternate2Fuel: 0.0,
      enduranceTime: None,
      sid: None,
      star: None,
      gpsRAIM: None,
      depRunway: None,
      arrRunway: None,
      routeString: None,
      countryCodes: None,
      etopsRating: None,
      etopsAirfields: None,
      etopsAltAirfields: None,
      etopsValWindow: None,
      plannerRemark: None,
      cargoRemark: None,
      windFac1: 0.0,
      windFac2: 0.0,
      windFacAvg: 0.0,
      avgTempDev: 0.0,
      atcAddresses: None,
      originator: None,
      numAircraft: 0,
      flightRules: None,
      flightType: None,
      initialCruiseSpeed: None,
      initialFlightLevel: None,
      arrAlternate1: None,
      arrAlternate2: None,
      depAlternate: None,
      wakeTurbCat: None,
      equipment: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: FlightPlan_Abridged_dataMode_Enum::REAL,
      airRefuelEvents: None,
      flightPlanMessages: None,
      flightPlanWaypoints: None,
      flightPlanPointGroups: None,
    }
  }
}
impl FlightPlan_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<FlightPlan_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let amcMissionId = self.amcMissionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSortie = self.idSortie.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idAircraft = self.idAircraft.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let legNum = self.legNum;
    let idDepAirfield = self.idDepAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depAirfield = self.depAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idArrAirfield = self.idArrAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrAirfield = self.arrAirfield.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let genTS = self.genTS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftMDS = self.aircraftMDS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tailNumber = self.tailNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let wxValidStart = self.wxValidStart.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let wxValidEnd = self.wxValidEnd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estDepTime = self.estDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dragIndex = self.dragIndex;
    let fuelDegrade = self.fuelDegrade;
    let opWeight = self.opWeight;
    let msnIndex = self.msnIndex;
    let rampFuel = self.rampFuel;
    let taxiFuel = self.taxiFuel;
    let takeoffFuel = self.takeoffFuel;
    let climbFuel = self.climbFuel;
    let climbTime = self.climbTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let holdDownFuel = self.holdDownFuel;
    let tocIceFuel = self.tocIceFuel;
    let tocFuel = self.tocFuel;
    let enrouteFuel = self.enrouteFuel;
    let enrouteTime = self.enrouteTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let thunderAvoidFuel = self.thunderAvoidFuel;
    let todIceFuel = self.todIceFuel;
    let opConditionFuel = self.opConditionFuel;
    let todFuel = self.todFuel;
    let earlyDescentFuel = self.earlyDescentFuel;
    let arrIceFuel = self.arrIceFuel;
    let holdFuel = self.holdFuel;
    let holdTime = self.holdTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let appLandingFuel = self.appLandingFuel;
    let burnedFuel = self.burnedFuel;
    let landingFuel = self.landingFuel;
    let minDivertFuel = self.minDivertFuel;
    let arrAlternate1Fuel = self.arrAlternate1Fuel;
    let arrAlternate2Fuel = self.arrAlternate2Fuel;
    let contingencyFuel = self.contingencyFuel;
    let reserveFuel = self.reserveFuel;
    let depressFuel = self.depressFuel;
    let unusableFuel = self.unusableFuel;
    let unidentExtraFuel = self.unidentExtraFuel;
    let identExtraFuel = self.identExtraFuel;
    let remAlternate1Fuel = self.remAlternate1Fuel;
    let remAlternate2Fuel = self.remAlternate2Fuel;
    let enduranceTime = self.enduranceTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sid = self.sid.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let star = self.star.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let gpsRAIM = self.gpsRAIM.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depRunway = self.depRunway.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrRunway = self.arrRunway.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let routeString = self.routeString.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let countryCodes = self.countryCodes.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let etopsRating = self.etopsRating.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let etopsAirfields = self.etopsAirfields.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let etopsAltAirfields = self.etopsAltAirfields.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let etopsValWindow = self.etopsValWindow.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let plannerRemark = self.plannerRemark.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cargoRemark = self.cargoRemark.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let windFac1 = self.windFac1;
    let windFac2 = self.windFac2;
    let windFacAvg = self.windFacAvg;
    let avgTempDev = self.avgTempDev;
    let atcAddresses = self.atcAddresses.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let originator = self.originator.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numAircraft = self.numAircraft;
    let flightRules = self.flightRules.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let flightType = self.flightType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let initialCruiseSpeed = self.initialCruiseSpeed.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let initialFlightLevel = self.initialFlightLevel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrAlternate1 = self.arrAlternate1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrAlternate2 = self.arrAlternate2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depAlternate = self.depAlternate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let wakeTurbCat = self.wakeTurbCat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let equipment = self.equipment.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let airRefuelEvents = self.airRefuelEvents.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let flightPlanMessages = self.flightPlanMessages.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let flightPlanWaypoints = self.flightPlanWaypoints.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let flightPlanPointGroups = self.flightPlanPointGroups.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    FlightPlan_Abridged::create(_fbb, &FlightPlan_AbridgedArgs{
      id,
      classificationMarking,
      amcMissionId,
      idSortie,
      idAircraft,
      legNum,
      idDepAirfield,
      depAirfield,
      idArrAirfield,
      arrAirfield,
      externalId,
      genTS,
      aircraftMDS,
      tailNumber,
      callSign,
      wxValidStart,
      wxValidEnd,
      estDepTime,
      dragIndex,
      fuelDegrade,
      opWeight,
      msnIndex,
      rampFuel,
      taxiFuel,
      takeoffFuel,
      climbFuel,
      climbTime,
      holdDownFuel,
      tocIceFuel,
      tocFuel,
      enrouteFuel,
      enrouteTime,
      thunderAvoidFuel,
      todIceFuel,
      opConditionFuel,
      todFuel,
      earlyDescentFuel,
      arrIceFuel,
      holdFuel,
      holdTime,
      appLandingFuel,
      burnedFuel,
      landingFuel,
      minDivertFuel,
      arrAlternate1Fuel,
      arrAlternate2Fuel,
      contingencyFuel,
      reserveFuel,
      depressFuel,
      unusableFuel,
      unidentExtraFuel,
      identExtraFuel,
      remAlternate1Fuel,
      remAlternate2Fuel,
      enduranceTime,
      sid,
      star,
      gpsRAIM,
      depRunway,
      arrRunway,
      routeString,
      countryCodes,
      etopsRating,
      etopsAirfields,
      etopsAltAirfields,
      etopsValWindow,
      plannerRemark,
      cargoRemark,
      windFac1,
      windFac2,
      windFacAvg,
      avgTempDev,
      atcAddresses,
      originator,
      numAircraft,
      flightRules,
      flightType,
      initialCruiseSpeed,
      initialFlightLevel,
      arrAlternate1,
      arrAlternate2,
      depAlternate,
      wakeTurbCat,
      equipment,
      notes,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      origNetwork,
      dataMode,
      airRefuelEvents,
      flightPlanMessages,
      flightPlanWaypoints,
      flightPlanPointGroups,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `FlightPlan_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_abridged_unchecked`.
pub fn root_as_flight_plan_abridged(buf: &[u8]) -> Result<FlightPlan_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<FlightPlan_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `FlightPlan_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_flight_plan_abridged_unchecked`.
pub fn size_prefixed_root_as_flight_plan_abridged(buf: &[u8]) -> Result<FlightPlan_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<FlightPlan_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `FlightPlan_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_abridged_unchecked`.
pub fn root_as_flight_plan_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlightPlan_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<FlightPlan_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `FlightPlan_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_flight_plan_abridged_unchecked`.
pub fn size_prefixed_root_as_flight_plan_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<FlightPlan_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<FlightPlan_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a FlightPlan_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `FlightPlan_Abridged`.
pub unsafe fn root_as_flight_plan_abridged_unchecked(buf: &[u8]) -> FlightPlan_Abridged {
  flatbuffers::root_unchecked::<FlightPlan_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed FlightPlan_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `FlightPlan_Abridged`.
pub unsafe fn size_prefixed_root_as_flight_plan_abridged_unchecked(buf: &[u8]) -> FlightPlan_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<FlightPlan_Abridged>(buf)
}
pub const FLIGHT_PLAN_ABRIDGED_IDENTIFIER: &str = "FLIG";

#[inline]
pub fn flight_plan_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FLIGHT_PLAN_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn flight_plan_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, FLIGHT_PLAN_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_flight_plan_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<FlightPlan_Abridged<'a>>) {
  fbb.finish(root, Some(FLIGHT_PLAN_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_flight_plan_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<FlightPlan_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(FLIGHT_PLAN_ABRIDGED_IDENTIFIER));
}
