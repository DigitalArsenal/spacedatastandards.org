// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AircraftMissionTasking_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection that specifies the tasked country, tasked service, unit and mission level tasking for this ATO.
pub struct AircraftMissionTasking_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AircraftMissionTasking_Abridged<'a> {
  type Inner = AircraftMissionTasking_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AircraftMissionTasking_Abridged<'a> {
  pub const VT_COUNTRYCODE: flatbuffers::VOffsetT = 4;
  pub const VT_TASKEDSERVICE: flatbuffers::VOffsetT = 6;
  pub const VT_UNITDESIGNATOR: flatbuffers::VOffsetT = 8;
  pub const VT_UNITLOCNAME: flatbuffers::VOffsetT = 10;
  pub const VT_RESMSNIND: flatbuffers::VOffsetT = 12;
  pub const VT_AMCMSNNUM: flatbuffers::VOffsetT = 14;
  pub const VT_PKGID: flatbuffers::VOffsetT = 16;
  pub const VT_MSNCOMMANDER: flatbuffers::VOffsetT = 18;
  pub const VT_MSNNUM: flatbuffers::VOffsetT = 20;
  pub const VT_PRIMSNTYPE: flatbuffers::VOffsetT = 22;
  pub const VT_SECMSNTYPE: flatbuffers::VOffsetT = 24;
  pub const VT_ALERTSTATUS: flatbuffers::VOffsetT = 26;
  pub const VT_DEPLOCNAME: flatbuffers::VOffsetT = 28;
  pub const VT_DEPLOCUTM: flatbuffers::VOffsetT = 30;
  pub const VT_DEPLOCLAT: flatbuffers::VOffsetT = 32;
  pub const VT_DEPLOCLON: flatbuffers::VOffsetT = 34;
  pub const VT_DEPTIME: flatbuffers::VOffsetT = 36;
  pub const VT_RCVYLOCNAME: flatbuffers::VOffsetT = 38;
  pub const VT_RCVYLOCUTM: flatbuffers::VOffsetT = 40;
  pub const VT_RCVYLOCLAT: flatbuffers::VOffsetT = 42;
  pub const VT_RCVYLOCLON: flatbuffers::VOffsetT = 44;
  pub const VT_RCVYTIME: flatbuffers::VOffsetT = 46;
  pub const VT_INDACTASKING: flatbuffers::VOffsetT = 48;
  pub const VT_ACMSNLOCSEG: flatbuffers::VOffsetT = 50;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AircraftMissionTasking_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AircraftMissionTasking_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<AircraftMissionTasking_Abridged<'bldr>> {
    let mut builder = AircraftMissionTasking_AbridgedBuilder::new(_fbb);
    builder.add_depLocLon(args.depLocLon);
    builder.add_depLocLat(args.depLocLat);
    if let Some(x) = args.acMsnLocSeg { builder.add_acMsnLocSeg(x); }
    if let Some(x) = args.indACTasking { builder.add_indACTasking(x); }
    if let Some(x) = args.rcvyTime { builder.add_rcvyTime(x); }
    if let Some(x) = args.rcvyLocLon { builder.add_rcvyLocLon(x); }
    if let Some(x) = args.rcvyLocLat { builder.add_rcvyLocLat(x); }
    if let Some(x) = args.rcvyLocUTM { builder.add_rcvyLocUTM(x); }
    if let Some(x) = args.rcvyLocName { builder.add_rcvyLocName(x); }
    if let Some(x) = args.depTime { builder.add_depTime(x); }
    if let Some(x) = args.depLocUTM { builder.add_depLocUTM(x); }
    if let Some(x) = args.depLocName { builder.add_depLocName(x); }
    builder.add_alertStatus(args.alertStatus);
    if let Some(x) = args.secMsnType { builder.add_secMsnType(x); }
    if let Some(x) = args.priMsnType { builder.add_priMsnType(x); }
    if let Some(x) = args.msnNum { builder.add_msnNum(x); }
    if let Some(x) = args.msnCommander { builder.add_msnCommander(x); }
    if let Some(x) = args.pkgId { builder.add_pkgId(x); }
    if let Some(x) = args.amcMsnNum { builder.add_amcMsnNum(x); }
    if let Some(x) = args.resMsnInd { builder.add_resMsnInd(x); }
    if let Some(x) = args.unitLocName { builder.add_unitLocName(x); }
    if let Some(x) = args.unitDesignator { builder.add_unitDesignator(x); }
    if let Some(x) = args.taskedService { builder.add_taskedService(x); }
    if let Some(x) = args.countryCode { builder.add_countryCode(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AircraftMissionTasking_AbridgedT {
    let countryCode = self.countryCode().map(|x| {
      x.to_string()
    });
    let taskedService = self.taskedService().map(|x| {
      x.to_string()
    });
    let unitDesignator = self.unitDesignator().map(|x| {
      x.to_string()
    });
    let unitLocName = self.unitLocName().map(|x| {
      x.to_string()
    });
    let resMsnInd = self.resMsnInd().map(|x| {
      x.to_string()
    });
    let amcMsnNum = self.amcMsnNum().map(|x| {
      x.to_string()
    });
    let pkgId = self.pkgId().map(|x| {
      x.to_string()
    });
    let msnCommander = self.msnCommander().map(|x| {
      x.to_string()
    });
    let msnNum = self.msnNum().map(|x| {
      x.to_string()
    });
    let priMsnType = self.priMsnType().map(|x| {
      x.to_string()
    });
    let secMsnType = self.secMsnType().map(|x| {
      x.to_string()
    });
    let alertStatus = self.alertStatus();
    let depLocName = self.depLocName().map(|x| {
      x.to_string()
    });
    let depLocUTM = self.depLocUTM().map(|x| {
      x.to_string()
    });
    let depLocLat = self.depLocLat();
    let depLocLon = self.depLocLon();
    let depTime = self.depTime().map(|x| {
      x.to_string()
    });
    let rcvyLocName = self.rcvyLocName().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let rcvyLocUTM = self.rcvyLocUTM().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let rcvyLocLat = self.rcvyLocLat().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let rcvyLocLon = self.rcvyLocLon().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let rcvyTime = self.rcvyTime().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let indACTasking = self.indACTasking().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let acMsnLocSeg = self.acMsnLocSeg().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    AircraftMissionTasking_AbridgedT {
      countryCode,
      taskedService,
      unitDesignator,
      unitLocName,
      resMsnInd,
      amcMsnNum,
      pkgId,
      msnCommander,
      msnNum,
      priMsnType,
      secMsnType,
      alertStatus,
      depLocName,
      depLocUTM,
      depLocLat,
      depLocLon,
      depTime,
      rcvyLocName,
      rcvyLocUTM,
      rcvyLocLat,
      rcvyLocLon,
      rcvyTime,
      indACTasking,
      acMsnLocSeg,
    }
  }

  /// The country code responsible for conducting this aircraft mission tasking for the exercise or operation.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 1, Maximum length = 4
  #[inline]
  pub fn countryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_COUNTRYCODE, None)}
  }
  /// The service tasked with conducting this aircraft mission tasking for the exercise or operation.
  /// Example: /// Example: A
  /// Constraints: Minimum length = 1, Maximum length = 1
  #[inline]
  pub fn taskedService(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_TASKEDSERVICE, None)}
  }
  /// The designator of the unit that is tasked to perform this aircraft mission tasking.
  /// Example: /// Example: AMPHIB5DIV
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn unitDesignator(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_UNITDESIGNATOR, None)}
  }
  /// The tasked units location expressed as an ICAO or a place name.
  /// Example: /// Example: ICAO:KXXQ
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn unitLocName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_UNITLOCNAME, None)}
  }
  /// An indicator of whether a mission is or will be a residual mission.
  /// Example: /// Example: N
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn resMsnInd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_RESMSNIND, None)}
  }
  /// The AMC number assigned to identify one aircraft from another.
  /// Example: /// Example: AMC:JJXD123HA045
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn amcMsnNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_AMCMSNNUM, None)}
  }
  /// The identifier for the composite set of missions for this operation/exercise.
  /// Example: /// Example: ZZ
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn pkgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_PKGID, None)}
  }
  /// The commander responsible for the planning and execution of the forces necessary to achieve desired objectives.
  /// Example: /// Example: MC
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn msnCommander(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_MSNCOMMANDER, None)}
  }
  /// The mission number assigned to this mission.
  /// Example: /// Example: D123HA
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn msnNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_MSNNUM, None)}
  }
  /// The code for the preferred type or designator for a tasked air mission.
  /// Example: /// Example: CAS
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn priMsnType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_PRIMSNTYPE, None)}
  }
  /// The code for the alternative type of a tasked air mission.
  /// Example: /// Example: SEAD
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn secMsnType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_SECMSNTYPE, None)}
  }
  /// The readiness status expressed in time (minutes) for an aircraft to be airborne after the launch order is received or the time required for a missile unit to assume battle stations.
  /// Example: /// Example: 30
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alertStatus(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftMissionTasking_Abridged::VT_ALERTSTATUS, Some(0)).unwrap()}
  }
  /// The location or name specified for the departure of the tasked air mission.
  /// Example: /// Example: ICAO:KBIF
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn depLocName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_DEPLOCNAME, None)}
  }
  /// The departure location specified in UTM (100 meter) coordinates for the tasked air mission.
  /// Example: /// Example: 32WDL123123
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn depLocUTM(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_DEPLOCUTM, None)}
  }
  /// WGS-84 latitude of the departure location, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: 35.123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn depLocLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftMissionTasking_Abridged::VT_DEPLOCLAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the departure location, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: 79.2354
  /// Constraints: No constraints specified.
  #[inline]
  pub fn depLocLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftMissionTasking_Abridged::VT_DEPLOCLON, Some(0.0)).unwrap()}
  }
  /// The time of departure for the tasked air mission in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-10-25T12:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn depTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftMissionTasking_Abridged::VT_DEPTIME, None)}
  }
  /// An array of locations specified for the recovery of the tasked air mission represented by varying formats.
  /// Example: /// Example: ['ARRLOC:KBIF', 'ARRLOC:KDZ7']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcvyLocName(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AircraftMissionTasking_Abridged::VT_RCVYLOCNAME, None)}
  }
  /// An array of recovery locations specified in UTM (100 meter) coordinates for the tasked air mission.
  /// Example: /// Example: ['ARRUTMO:32WDL123123', 'ARRUTMO:32WDL321321']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcvyLocUTM(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AircraftMissionTasking_Abridged::VT_RCVYLOCUTM, None)}
  }
  /// An array of WGS-84 latitude of the recovery locations, in degrees. -90 to 90 degrees (negative values south of equator) for this tasked air mission.
  /// Example: /// Example: [48.8584, 40.7554]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcvyLocLat(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AircraftMissionTasking_Abridged::VT_RCVYLOCLAT, None)}
  }
  /// An array of WGS-84 longitude of the recovery locations, in degrees. -180 to 180 degrees (negative values west of Prime Meridian) for this tasked air mission.
  /// Example: /// Example: [2.2945, -73.9866]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcvyLocLon(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AircraftMissionTasking_Abridged::VT_RCVYLOCLON, None)}
  }
  /// An array of recovery times for the tasked air mission in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: ['2021-10-25T16:00:00.234Z', '2021-10-26T16:00:00.234Z']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcvyTime(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AircraftMissionTasking_Abridged::VT_RCVYTIME, None)}
  }
  /// A collection of the individual aircraft assigned to this aircraft mission tasking.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn indACTasking(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AircraftMissionTasking_Abridged::VT_INDACTASKING, None)}
  }
  /// A collection of aircraft mission location information for this aircraft mission tasking.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn acMsnLocSeg(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AircraftMissionTasking_Abridged::VT_ACMSNLOCSEG, None)}
  }
}

impl flatbuffers::Verifiable for AircraftMissionTasking_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryCode", Self::VT_COUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("taskedService", Self::VT_TASKEDSERVICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unitDesignator", Self::VT_UNITDESIGNATOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unitLocName", Self::VT_UNITLOCNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resMsnInd", Self::VT_RESMSNIND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("amcMsnNum", Self::VT_AMCMSNNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("pkgId", Self::VT_PKGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msnCommander", Self::VT_MSNCOMMANDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msnNum", Self::VT_MSNNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("priMsnType", Self::VT_PRIMSNTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("secMsnType", Self::VT_SECMSNTYPE, false)?
     .visit_field::<i32>("alertStatus", Self::VT_ALERTSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depLocName", Self::VT_DEPLOCNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depLocUTM", Self::VT_DEPLOCUTM, false)?
     .visit_field::<f64>("depLocLat", Self::VT_DEPLOCLAT, false)?
     .visit_field::<f64>("depLocLon", Self::VT_DEPLOCLON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depTime", Self::VT_DEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("rcvyLocName", Self::VT_RCVYLOCNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("rcvyLocUTM", Self::VT_RCVYLOCUTM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("rcvyLocLat", Self::VT_RCVYLOCLAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("rcvyLocLon", Self::VT_RCVYLOCLON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("rcvyTime", Self::VT_RCVYTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("indACTasking", Self::VT_INDACTASKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("acMsnLocSeg", Self::VT_ACMSNLOCSEG, false)?
     .finish();
    Ok(())
  }
}
pub struct AircraftMissionTasking_AbridgedArgs<'a> {
    pub countryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub taskedService: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unitDesignator: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unitLocName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resMsnInd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub amcMsnNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pkgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msnCommander: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msnNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub priMsnType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub secMsnType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub alertStatus: i32,
    pub depLocName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depLocUTM: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depLocLat: f64,
    pub depLocLon: f64,
    pub depTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rcvyLocName: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub rcvyLocUTM: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub rcvyLocLat: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub rcvyLocLon: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub rcvyTime: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub indACTasking: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub acMsnLocSeg: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for AircraftMissionTasking_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    AircraftMissionTasking_AbridgedArgs {
      countryCode: None,
      taskedService: None,
      unitDesignator: None,
      unitLocName: None,
      resMsnInd: None,
      amcMsnNum: None,
      pkgId: None,
      msnCommander: None,
      msnNum: None,
      priMsnType: None,
      secMsnType: None,
      alertStatus: 0,
      depLocName: None,
      depLocUTM: None,
      depLocLat: 0.0,
      depLocLon: 0.0,
      depTime: None,
      rcvyLocName: None,
      rcvyLocUTM: None,
      rcvyLocLat: None,
      rcvyLocLon: None,
      rcvyTime: None,
      indACTasking: None,
      acMsnLocSeg: None,
    }
  }
}

pub struct AircraftMissionTasking_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AircraftMissionTasking_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_countryCode(&mut self, countryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_COUNTRYCODE, countryCode);
  }
  #[inline]
  pub fn add_taskedService(&mut self, taskedService: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_TASKEDSERVICE, taskedService);
  }
  #[inline]
  pub fn add_unitDesignator(&mut self, unitDesignator: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_UNITDESIGNATOR, unitDesignator);
  }
  #[inline]
  pub fn add_unitLocName(&mut self, unitLocName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_UNITLOCNAME, unitLocName);
  }
  #[inline]
  pub fn add_resMsnInd(&mut self, resMsnInd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_RESMSNIND, resMsnInd);
  }
  #[inline]
  pub fn add_amcMsnNum(&mut self, amcMsnNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_AMCMSNNUM, amcMsnNum);
  }
  #[inline]
  pub fn add_pkgId(&mut self, pkgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_PKGID, pkgId);
  }
  #[inline]
  pub fn add_msnCommander(&mut self, msnCommander: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_MSNCOMMANDER, msnCommander);
  }
  #[inline]
  pub fn add_msnNum(&mut self, msnNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_MSNNUM, msnNum);
  }
  #[inline]
  pub fn add_priMsnType(&mut self, priMsnType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_PRIMSNTYPE, priMsnType);
  }
  #[inline]
  pub fn add_secMsnType(&mut self, secMsnType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_SECMSNTYPE, secMsnType);
  }
  #[inline]
  pub fn add_alertStatus(&mut self, alertStatus: i32) {
    self.fbb_.push_slot::<i32>(AircraftMissionTasking_Abridged::VT_ALERTSTATUS, alertStatus, 0);
  }
  #[inline]
  pub fn add_depLocName(&mut self, depLocName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_DEPLOCNAME, depLocName);
  }
  #[inline]
  pub fn add_depLocUTM(&mut self, depLocUTM: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_DEPLOCUTM, depLocUTM);
  }
  #[inline]
  pub fn add_depLocLat(&mut self, depLocLat: f64) {
    self.fbb_.push_slot::<f64>(AircraftMissionTasking_Abridged::VT_DEPLOCLAT, depLocLat, 0.0);
  }
  #[inline]
  pub fn add_depLocLon(&mut self, depLocLon: f64) {
    self.fbb_.push_slot::<f64>(AircraftMissionTasking_Abridged::VT_DEPLOCLON, depLocLon, 0.0);
  }
  #[inline]
  pub fn add_depTime(&mut self, depTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_DEPTIME, depTime);
  }
  #[inline]
  pub fn add_rcvyLocName(&mut self, rcvyLocName: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_RCVYLOCNAME, rcvyLocName);
  }
  #[inline]
  pub fn add_rcvyLocUTM(&mut self, rcvyLocUTM: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_RCVYLOCUTM, rcvyLocUTM);
  }
  #[inline]
  pub fn add_rcvyLocLat(&mut self, rcvyLocLat: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_RCVYLOCLAT, rcvyLocLat);
  }
  #[inline]
  pub fn add_rcvyLocLon(&mut self, rcvyLocLon: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_RCVYLOCLON, rcvyLocLon);
  }
  #[inline]
  pub fn add_rcvyTime(&mut self, rcvyTime: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_RCVYTIME, rcvyTime);
  }
  #[inline]
  pub fn add_indACTasking(&mut self, indACTasking: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_INDACTASKING, indACTasking);
  }
  #[inline]
  pub fn add_acMsnLocSeg(&mut self, acMsnLocSeg: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftMissionTasking_Abridged::VT_ACMSNLOCSEG, acMsnLocSeg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AircraftMissionTasking_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AircraftMissionTasking_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AircraftMissionTasking_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AircraftMissionTasking_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AircraftMissionTasking_Abridged");
      ds.field("countryCode", &self.countryCode());
      ds.field("taskedService", &self.taskedService());
      ds.field("unitDesignator", &self.unitDesignator());
      ds.field("unitLocName", &self.unitLocName());
      ds.field("resMsnInd", &self.resMsnInd());
      ds.field("amcMsnNum", &self.amcMsnNum());
      ds.field("pkgId", &self.pkgId());
      ds.field("msnCommander", &self.msnCommander());
      ds.field("msnNum", &self.msnNum());
      ds.field("priMsnType", &self.priMsnType());
      ds.field("secMsnType", &self.secMsnType());
      ds.field("alertStatus", &self.alertStatus());
      ds.field("depLocName", &self.depLocName());
      ds.field("depLocUTM", &self.depLocUTM());
      ds.field("depLocLat", &self.depLocLat());
      ds.field("depLocLon", &self.depLocLon());
      ds.field("depTime", &self.depTime());
      ds.field("rcvyLocName", &self.rcvyLocName());
      ds.field("rcvyLocUTM", &self.rcvyLocUTM());
      ds.field("rcvyLocLat", &self.rcvyLocLat());
      ds.field("rcvyLocLon", &self.rcvyLocLon());
      ds.field("rcvyTime", &self.rcvyTime());
      ds.field("indACTasking", &self.indACTasking());
      ds.field("acMsnLocSeg", &self.acMsnLocSeg());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AircraftMissionTasking_AbridgedT {
  pub countryCode: Option<String>,
  pub taskedService: Option<String>,
  pub unitDesignator: Option<String>,
  pub unitLocName: Option<String>,
  pub resMsnInd: Option<String>,
  pub amcMsnNum: Option<String>,
  pub pkgId: Option<String>,
  pub msnCommander: Option<String>,
  pub msnNum: Option<String>,
  pub priMsnType: Option<String>,
  pub secMsnType: Option<String>,
  pub alertStatus: i32,
  pub depLocName: Option<String>,
  pub depLocUTM: Option<String>,
  pub depLocLat: f64,
  pub depLocLon: f64,
  pub depTime: Option<String>,
  pub rcvyLocName: Option<Vec<String>>,
  pub rcvyLocUTM: Option<Vec<String>>,
  pub rcvyLocLat: Option<Vec<String>>,
  pub rcvyLocLon: Option<Vec<String>>,
  pub rcvyTime: Option<Vec<String>>,
  pub indACTasking: Option<Vec<String>>,
  pub acMsnLocSeg: Option<Vec<String>>,
}
impl Default for AircraftMissionTasking_AbridgedT {
  fn default() -> Self {
    Self {
      countryCode: None,
      taskedService: None,
      unitDesignator: None,
      unitLocName: None,
      resMsnInd: None,
      amcMsnNum: None,
      pkgId: None,
      msnCommander: None,
      msnNum: None,
      priMsnType: None,
      secMsnType: None,
      alertStatus: 0,
      depLocName: None,
      depLocUTM: None,
      depLocLat: 0.0,
      depLocLon: 0.0,
      depTime: None,
      rcvyLocName: None,
      rcvyLocUTM: None,
      rcvyLocLat: None,
      rcvyLocLon: None,
      rcvyTime: None,
      indACTasking: None,
      acMsnLocSeg: None,
    }
  }
}
impl AircraftMissionTasking_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AircraftMissionTasking_Abridged<'b>> {
    let countryCode = self.countryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let taskedService = self.taskedService.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let unitDesignator = self.unitDesignator.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let unitLocName = self.unitLocName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let resMsnInd = self.resMsnInd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let amcMsnNum = self.amcMsnNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let pkgId = self.pkgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msnCommander = self.msnCommander.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msnNum = self.msnNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let priMsnType = self.priMsnType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let secMsnType = self.secMsnType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let alertStatus = self.alertStatus;
    let depLocName = self.depLocName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depLocUTM = self.depLocUTM.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depLocLat = self.depLocLat;
    let depLocLon = self.depLocLon;
    let depTime = self.depTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rcvyLocName = self.rcvyLocName.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let rcvyLocUTM = self.rcvyLocUTM.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let rcvyLocLat = self.rcvyLocLat.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let rcvyLocLon = self.rcvyLocLon.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let rcvyTime = self.rcvyTime.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let indACTasking = self.indACTasking.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let acMsnLocSeg = self.acMsnLocSeg.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    AircraftMissionTasking_Abridged::create(_fbb, &AircraftMissionTasking_AbridgedArgs{
      countryCode,
      taskedService,
      unitDesignator,
      unitLocName,
      resMsnInd,
      amcMsnNum,
      pkgId,
      msnCommander,
      msnNum,
      priMsnType,
      secMsnType,
      alertStatus,
      depLocName,
      depLocUTM,
      depLocLat,
      depLocLon,
      depTime,
      rcvyLocName,
      rcvyLocUTM,
      rcvyLocLat,
      rcvyLocLon,
      rcvyTime,
      indACTasking,
      acMsnLocSeg,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AircraftMissionTasking_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_mission_tasking_abridged_unchecked`.
pub fn root_as_aircraft_mission_tasking_abridged(buf: &[u8]) -> Result<AircraftMissionTasking_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AircraftMissionTasking_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AircraftMissionTasking_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_aircraft_mission_tasking_abridged_unchecked`.
pub fn size_prefixed_root_as_aircraft_mission_tasking_abridged(buf: &[u8]) -> Result<AircraftMissionTasking_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AircraftMissionTasking_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AircraftMissionTasking_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_mission_tasking_abridged_unchecked`.
pub fn root_as_aircraft_mission_tasking_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AircraftMissionTasking_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AircraftMissionTasking_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AircraftMissionTasking_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_mission_tasking_abridged_unchecked`.
pub fn size_prefixed_root_as_aircraft_mission_tasking_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AircraftMissionTasking_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AircraftMissionTasking_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AircraftMissionTasking_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AircraftMissionTasking_Abridged`.
pub unsafe fn root_as_aircraft_mission_tasking_abridged_unchecked(buf: &[u8]) -> AircraftMissionTasking_Abridged {
  flatbuffers::root_unchecked::<AircraftMissionTasking_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AircraftMissionTasking_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AircraftMissionTasking_Abridged`.
pub unsafe fn size_prefixed_root_as_aircraft_mission_tasking_abridged_unchecked(buf: &[u8]) -> AircraftMissionTasking_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<AircraftMissionTasking_Abridged>(buf)
}
pub const AIRCRAFT_MISSION_TASKING_ABRIDGED_IDENTIFIER: &str = "AIRC";

#[inline]
pub fn aircraft_mission_tasking_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_MISSION_TASKING_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn aircraft_mission_tasking_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_MISSION_TASKING_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_aircraft_mission_tasking_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AircraftMissionTasking_Abridged<'a>>) {
  fbb.finish(root, Some(AIRCRAFT_MISSION_TASKING_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_aircraft_mission_tasking_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AircraftMissionTasking_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRCRAFT_MISSION_TASKING_ABRIDGED_IDENTIFIER));
}
