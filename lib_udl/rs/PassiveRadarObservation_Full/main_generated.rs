// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_PASSIVE_RADAR_OBSERVATION_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_PASSIVE_RADAR_OBSERVATION_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_PASSIVE_RADAR_OBSERVATION_FULL_DATA_MODE_ENUM: [PassiveRadarObservation_Full_dataMode_Enum; 4] = [
  PassiveRadarObservation_Full_dataMode_Enum::REAL,
  PassiveRadarObservation_Full_dataMode_Enum::TEST,
  PassiveRadarObservation_Full_dataMode_Enum::SIMULATED,
  PassiveRadarObservation_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct PassiveRadarObservation_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl PassiveRadarObservation_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for PassiveRadarObservation_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for PassiveRadarObservation_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for PassiveRadarObservation_Full_dataMode_Enum {
    type Output = PassiveRadarObservation_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for PassiveRadarObservation_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for PassiveRadarObservation_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for PassiveRadarObservation_Full_dataMode_Enum {}
pub enum PassiveRadarObservation_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of observation data for passive radar based sensor phenomenologies. Passive radar is a form of radar that instead of using a dedicated transmitter, as is the case for traditional radar, utilizes radio frequency (RF) energy already in the environment. With an abundance of existing energy available from geographically diverse sources, passive radar offers wide field of view coverage and long observation times. A passive radar system is comprised of separately located transmitter (for example, FM radio stations), a reference receiver, and a surveillance sensor. The transmitted signal illuminates multiple targets over a broad angular extent as well as providing a signal at the reference site. The reflected energy is received at the surveillance site for processing with the reference signal. The long observation durations that are possible with this technology enables an accurate orbit to be determined within a single pass.
pub struct PassiveRadarObservation_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PassiveRadarObservation_Full<'a> {
  type Inner = PassiveRadarObservation_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PassiveRadarObservation_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_OBTIME: flatbuffers::VOffsetT = 8;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 10;
  pub const VT_SATNO: flatbuffers::VOffsetT = 12;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 14;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 16;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 18;
  pub const VT_IDRFEMITTER: flatbuffers::VOffsetT = 20;
  pub const VT_IDSENSORREFRECEIVER: flatbuffers::VOffsetT = 22;
  pub const VT_EXTOBSERVATIONID: flatbuffers::VOffsetT = 24;
  pub const VT_TASKID: flatbuffers::VOffsetT = 26;
  pub const VT_TRACKID: flatbuffers::VOffsetT = 28;
  pub const VT_OBPOSITION: flatbuffers::VOffsetT = 30;
  pub const VT_UCT: flatbuffers::VOffsetT = 32;
  pub const VT_AZIMUTH: flatbuffers::VOffsetT = 34;
  pub const VT_AZIMUTHUNC: flatbuffers::VOffsetT = 36;
  pub const VT_AZIMUTHBIAS: flatbuffers::VOffsetT = 38;
  pub const VT_AZIMUTHRATE: flatbuffers::VOffsetT = 40;
  pub const VT_ELEVATION: flatbuffers::VOffsetT = 42;
  pub const VT_ELEVATIONUNC: flatbuffers::VOffsetT = 44;
  pub const VT_ELEVATIONBIAS: flatbuffers::VOffsetT = 46;
  pub const VT_ELEVATIONRATE: flatbuffers::VOffsetT = 48;
  pub const VT_DELAY: flatbuffers::VOffsetT = 50;
  pub const VT_DELAYUNC: flatbuffers::VOffsetT = 52;
  pub const VT_DELAYBIAS: flatbuffers::VOffsetT = 54;
  pub const VT_BISTATICRANGE: flatbuffers::VOffsetT = 56;
  pub const VT_BISTATICRANGEUNC: flatbuffers::VOffsetT = 58;
  pub const VT_BISTATICRANGEBIAS: flatbuffers::VOffsetT = 60;
  pub const VT_BISTATICRANGERATE: flatbuffers::VOffsetT = 62;
  pub const VT_BISTATICRANGERATEUNC: flatbuffers::VOffsetT = 64;
  pub const VT_BISTATICRANGEACCEL: flatbuffers::VOffsetT = 66;
  pub const VT_BISTATICRANGEACCELUNC: flatbuffers::VOffsetT = 68;
  pub const VT_DOPPLER: flatbuffers::VOffsetT = 70;
  pub const VT_DOPPLERUNC: flatbuffers::VOffsetT = 72;
  pub const VT_CONING: flatbuffers::VOffsetT = 74;
  pub const VT_CONINGUNC: flatbuffers::VOffsetT = 76;
  pub const VT_TOF: flatbuffers::VOffsetT = 78;
  pub const VT_TOFUNC: flatbuffers::VOffsetT = 80;
  pub const VT_TOFBIAS: flatbuffers::VOffsetT = 82;
  pub const VT_ACCEL: flatbuffers::VOffsetT = 84;
  pub const VT_ACCELUNC: flatbuffers::VOffsetT = 86;
  pub const VT_RA: flatbuffers::VOffsetT = 88;
  pub const VT_DECLINATION: flatbuffers::VOffsetT = 90;
  pub const VT_LAT: flatbuffers::VOffsetT = 92;
  pub const VT_LON: flatbuffers::VOffsetT = 94;
  pub const VT_ALT: flatbuffers::VOffsetT = 96;
  pub const VT_XVEL: flatbuffers::VOffsetT = 98;
  pub const VT_YVEL: flatbuffers::VOffsetT = 100;
  pub const VT_ZVEL: flatbuffers::VOffsetT = 102;
  pub const VT_RCS: flatbuffers::VOffsetT = 104;
  pub const VT_RCSUNC: flatbuffers::VOffsetT = 106;
  pub const VT_ORTHOGONALRCS: flatbuffers::VOffsetT = 108;
  pub const VT_ORTHOGONALRCSUNC: flatbuffers::VOffsetT = 110;
  pub const VT_SNR: flatbuffers::VOffsetT = 112;
  pub const VT_TIMINGBIAS: flatbuffers::VOffsetT = 114;
  pub const VT_TAGS: flatbuffers::VOffsetT = 116;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 118;
  pub const VT_DESCRIPTOR: flatbuffers::VOffsetT = 120;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 122;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 124;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 126;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 128;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 130;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 132;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 134;
  pub const VT_ONORBIT: flatbuffers::VOffsetT = 136;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 138;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PassiveRadarObservation_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PassiveRadarObservation_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<PassiveRadarObservation_Full<'bldr>> {
    let mut builder = PassiveRadarObservation_FullBuilder::new(_fbb);
    builder.add_timingBias(args.timingBias);
    builder.add_snr(args.snr);
    builder.add_orthogonalRcsUnc(args.orthogonalRcsUnc);
    builder.add_orthogonalRcs(args.orthogonalRcs);
    builder.add_rcsUnc(args.rcsUnc);
    builder.add_rcs(args.rcs);
    builder.add_zvel(args.zvel);
    builder.add_yvel(args.yvel);
    builder.add_xvel(args.xvel);
    builder.add_alt(args.alt);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    builder.add_declination(args.declination);
    builder.add_ra(args.ra);
    builder.add_accelUnc(args.accelUnc);
    builder.add_accel(args.accel);
    builder.add_tofBias(args.tofBias);
    builder.add_tofUnc(args.tofUnc);
    builder.add_tof(args.tof);
    builder.add_coningUnc(args.coningUnc);
    builder.add_coning(args.coning);
    builder.add_dopplerUnc(args.dopplerUnc);
    builder.add_doppler(args.doppler);
    builder.add_bistaticRangeAccelUnc(args.bistaticRangeAccelUnc);
    builder.add_bistaticRangeAccel(args.bistaticRangeAccel);
    builder.add_bistaticRangeRateUnc(args.bistaticRangeRateUnc);
    builder.add_bistaticRangeRate(args.bistaticRangeRate);
    builder.add_bistaticRangeBias(args.bistaticRangeBias);
    builder.add_bistaticRangeUnc(args.bistaticRangeUnc);
    builder.add_bistaticRange(args.bistaticRange);
    builder.add_delayBias(args.delayBias);
    builder.add_delayUnc(args.delayUnc);
    builder.add_delay(args.delay);
    builder.add_elevationRate(args.elevationRate);
    builder.add_elevationBias(args.elevationBias);
    builder.add_elevationUnc(args.elevationUnc);
    builder.add_elevation(args.elevation);
    builder.add_azimuthRate(args.azimuthRate);
    builder.add_azimuthBias(args.azimuthBias);
    builder.add_azimuthUnc(args.azimuthUnc);
    builder.add_azimuth(args.azimuth);
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.onOrbit { builder.add_onOrbit(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.descriptor { builder.add_descriptor(x); }
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.obPosition { builder.add_obPosition(x); }
    if let Some(x) = args.trackId { builder.add_trackId(x); }
    if let Some(x) = args.taskId { builder.add_taskId(x); }
    if let Some(x) = args.extObservationId { builder.add_extObservationId(x); }
    if let Some(x) = args.idSensorRefReceiver { builder.add_idSensorRefReceiver(x); }
    if let Some(x) = args.idRFEmitter { builder.add_idRFEmitter(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.obTime { builder.add_obTime(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_uct(args.uct);
    builder.finish()
  }

  pub fn unpack(&self) -> PassiveRadarObservation_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let obTime = self.obTime().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let idRFEmitter = self.idRFEmitter().map(|x| {
      x.to_string()
    });
    let idSensorRefReceiver = self.idSensorRefReceiver().map(|x| {
      x.to_string()
    });
    let extObservationId = self.extObservationId().map(|x| {
      x.to_string()
    });
    let taskId = self.taskId().map(|x| {
      x.to_string()
    });
    let trackId = self.trackId().map(|x| {
      x.to_string()
    });
    let obPosition = self.obPosition().map(|x| {
      x.to_string()
    });
    let uct = self.uct();
    let azimuth = self.azimuth();
    let azimuthUnc = self.azimuthUnc();
    let azimuthBias = self.azimuthBias();
    let azimuthRate = self.azimuthRate();
    let elevation = self.elevation();
    let elevationUnc = self.elevationUnc();
    let elevationBias = self.elevationBias();
    let elevationRate = self.elevationRate();
    let delay = self.delay();
    let delayUnc = self.delayUnc();
    let delayBias = self.delayBias();
    let bistaticRange = self.bistaticRange();
    let bistaticRangeUnc = self.bistaticRangeUnc();
    let bistaticRangeBias = self.bistaticRangeBias();
    let bistaticRangeRate = self.bistaticRangeRate();
    let bistaticRangeRateUnc = self.bistaticRangeRateUnc();
    let bistaticRangeAccel = self.bistaticRangeAccel();
    let bistaticRangeAccelUnc = self.bistaticRangeAccelUnc();
    let doppler = self.doppler();
    let dopplerUnc = self.dopplerUnc();
    let coning = self.coning();
    let coningUnc = self.coningUnc();
    let tof = self.tof();
    let tofUnc = self.tofUnc();
    let tofBias = self.tofBias();
    let accel = self.accel();
    let accelUnc = self.accelUnc();
    let ra = self.ra();
    let declination = self.declination();
    let lat = self.lat();
    let lon = self.lon();
    let alt = self.alt();
    let xvel = self.xvel();
    let yvel = self.yvel();
    let zvel = self.zvel();
    let rcs = self.rcs();
    let rcsUnc = self.rcsUnc();
    let orthogonalRcs = self.orthogonalRcs();
    let orthogonalRcsUnc = self.orthogonalRcsUnc();
    let snr = self.snr();
    let timingBias = self.timingBias();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    let descriptor = self.descriptor().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let onOrbit = self.onOrbit().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    PassiveRadarObservation_FullT {
      id,
      classificationMarking,
      obTime,
      idOnOrbit,
      satNo,
      origObjectId,
      idSensor,
      origSensorId,
      idRFEmitter,
      idSensorRefReceiver,
      extObservationId,
      taskId,
      trackId,
      obPosition,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      delay,
      delayUnc,
      delayBias,
      bistaticRange,
      bistaticRangeUnc,
      bistaticRangeBias,
      bistaticRangeRate,
      bistaticRangeRateUnc,
      bistaticRangeAccel,
      bistaticRangeAccelUnc,
      doppler,
      dopplerUnc,
      coning,
      coningUnc,
      tof,
      tofUnc,
      tofBias,
      accel,
      accelUnc,
      ra,
      declination,
      lat,
      lon,
      alt,
      xvel,
      yvel,
      zvel,
      rcs,
      rcsUnc,
      orthogonalRcs,
      orthogonalRcsUnc,
      snr,
      timingBias,
      tags,
      transactionId,
      descriptor,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
      onOrbit,
      type_,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: bdcacfb0-3c47-4bd0-9d6c-9fa7d2c4fbb0
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Ob detection time in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2023-01-24T23:35:26.518152Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_OBTIME, None)}
  }
  /// Unique identifier of the target satellite on-orbit object. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the OnOrbit with idOnOrbit = 25544 would be queried as /udl/onorbit/25544.
  /// Example: /// Example: 40699
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_IDONORBIT, None)}
  }
  /// Satellite/Catalog number of the target on-orbit object.
  /// Example: /// Example: 40699
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PassiveRadarObservation_Full::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier provided by observation source to indicate the target onorbit object of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_ORIGOBJECTID, None)}
  }
  /// Unique identifier of the reporting surveillance sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  /// Example: /// Example: OCULUSA
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_IDSENSOR, None)}
  }
  /// Optional identifier provided by observation source to indicate the sensor identifier which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ORIGSENSOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_ORIGSENSORID, None)}
  }
  /// Unique identifier of the transmitter. This ID can be used to obtain additional information on an RFEmitter using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the RFEmitter with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  /// Example: /// Example: RED_CLIFFS_3ABCRN
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idRFEmitter(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_IDRFEMITTER, None)}
  }
  /// Unique identifier of the reference receiver sensor. This ID can be used to obtain additional information on a sensor using the 'get by ID' operation (e.g. /udl/sensor/{id}). For example, the sensor with idSensor = abc would be queried as /udl/sensor/abc.
  /// Example: /// Example: OculusRef1
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensorRefReceiver(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_IDSENSORREFRECEIVER, None)}
  }
  /// Optional external observation identifier provided by the source.
  /// Example: /// Example: 26892
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn extObservationId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_EXTOBSERVATIONID, None)}
  }
  /// Optional identifier to indicate the specific tasking which produced this observation.
  /// Example: /// Example: TASK-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn taskId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_TASKID, None)}
  }
  /// Unique identifier of a track that represents a tracklet for this observation.
  /// Example: /// Example: 12212
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn trackId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_TRACKID, None)}
  }
  /// The position of this observation within a track (FENCE, FIRST, IN, LAST, SINGLE).  This identifier is optional and, if null, no assumption should be made regarding whether other observations may or may not exist to compose a track.
  /// Example: /// Example: FIRST
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn obPosition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_OBPOSITION, None)}
  }
  /// Boolean indicating this observation is part of an uncorrelated track or was unable to be correlated to a known object. This flag should only be set to true by data providers after an attempt to correlate to an on-orbit object was made and failed. If unable to correlate, the 'origObjectId' field may be populated with an internal data provider specific identifier.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn uct(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(PassiveRadarObservation_Full::VT_UCT, Some(false)).unwrap()}
  }
  /// Line of sight azimuth angle in degrees and topocentric frame.
  /// Example: /// Example: 134.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_AZIMUTH, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight azimuth angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_AZIMUTHUNC, Some(0.0)).unwrap()}
  }
  /// Sensor azimuth angle bias in degrees.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_AZIMUTHBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight azimuth in degrees per second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn azimuthRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_AZIMUTHRATE, Some(0.0)).unwrap()}
  }
  /// Line of sight elevation in degrees and topocentric frame.
  /// Example: /// Example: 76.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ELEVATION, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the line of sight elevation angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ELEVATIONUNC, Some(0.0)).unwrap()}
  }
  /// Sensor elevation bias in degrees.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ELEVATIONBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the line of sight elevation in degrees per second.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn elevationRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ELEVATIONRATE, Some(0.0)).unwrap()}
  }
  /// The time difference, in seconds, between the signal collected at the surveillance site (after being reflected from the target) and the reference site (direct path line-of-sight signal).
  /// Example: /// Example: 0.00505820232809312
  /// Constraints: No constraints specified.
  #[inline]
  pub fn delay(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_DELAY, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the delay measurement, in seconds.
  /// Example: /// Example: 3.1e-06
  /// Constraints: No constraints specified.
  #[inline]
  pub fn delayUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_DELAYUNC, Some(0.0)).unwrap()}
  }
  /// Delay bias in seconds.
  /// Example: /// Example: 1.23e-06
  /// Constraints: No constraints specified.
  #[inline]
  pub fn delayBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_DELAYBIAS, Some(0.0)).unwrap()}
  }
  /// Target bistatic path distance in kilometers. This is the transmitter-to-target-to-surveillance site distance.
  /// Example: /// Example: 754.8212
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bistaticRange(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGE, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in bistatic range in kilometers.
  /// Example: /// Example: 5.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bistaticRangeUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEUNC, Some(0.0)).unwrap()}
  }
  /// Sensor bistatic range bias in kilometers.
  /// Example: /// Example: 2.34
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bistaticRangeBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEBIAS, Some(0.0)).unwrap()}
  }
  /// Rate of change of the bistatic path in kilometers/sec.
  /// Example: /// Example: -0.30222
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bistaticRangeRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGERATE, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in rate of change of the bistatic path in kilometers/sec.
  /// Example: /// Example: 0.123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bistaticRangeRateUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGERATEUNC, Some(0.0)).unwrap()}
  }
  /// Bistatic range acceleration in kilometers/sec^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bistaticRangeAccel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEACCEL, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the bistatic range acceleration measurement, in kilometers/sec^2.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn bistaticRangeAccelUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEACCELUNC, Some(0.0)).unwrap()}
  }
  /// Doppler measurement in hertz.
  /// Example: /// Example: -101.781641000597
  /// Constraints: No constraints specified.
  #[inline]
  pub fn doppler(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_DOPPLER, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the Doppler measurement in hertz.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dopplerUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_DOPPLERUNC, Some(0.0)).unwrap()}
  }
  /// Coning angle in degrees.
  /// Example: /// Example: 60.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn coning(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_CONING, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in the coning angle measurement, in degrees.
  /// Example: /// Example: 0.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn coningUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_CONINGUNC, Some(0.0)).unwrap()}
  }
  /// Time of flight (TOF) in seconds. This is the calculated propagation time from transmitter-to-target-to-surveillance site.
  /// Example: /// Example: 0.00592856674135648
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tof(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_TOF, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in time of flight in seconds.
  /// Example: /// Example: 3.1e-06
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tofUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_TOFUNC, Some(0.0)).unwrap()}
  }
  /// The Time of Flight (TOF) bias in seconds.
  /// Example: /// Example: 1.23e-06
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tofBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_TOFBIAS, Some(0.0)).unwrap()}
  }
  /// The target Acceleration measurement in kilometers/sec^2 for this observation.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn accel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ACCEL, Some(0.0)).unwrap()}
  }
  /// The target Acceleration uncertainty measurement in kilometers/sec^2 for this observation.
  /// Example: /// Example: 0.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn accelUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ACCELUNC, Some(0.0)).unwrap()}
  }
  /// Line of sight right ascension in degrees and J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ra(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_RA, Some(0.0)).unwrap()}
  }
  /// Line of sight declination angle in degrees and J2000 coordinate frame.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn declination(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_DECLINATION, Some(0.0)).unwrap()}
  }
  /// WGS-84 target latitude sub-point at observation time (obTime), represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: -35.1181763996856
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_LAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 target longitude sub-point at observation time (obTime), represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 139.613567052763
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_LON, Some(0.0)).unwrap()}
  }
  /// The target altitude relative to WGS-84 ellipsoid, in kilometers for this observation.
  /// Example: /// Example: 478.056378
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ALT, Some(0.0)).unwrap()}
  }
  /// X velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn xvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_XVEL, Some(0.0)).unwrap()}
  }
  /// Y velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 3.21
  /// Constraints: No constraints specified.
  #[inline]
  pub fn yvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_YVEL, Some(0.0)).unwrap()}
  }
  /// Z velocity of target in kilometers/sec in J2000 coordinate frame.
  /// Example: /// Example: 3.12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn zvel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ZVEL, Some(0.0)).unwrap()}
  }
  /// Radar cross section in meters squared for polarization principal.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcs(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_RCS, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in principal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn rcsUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_RCSUNC, Some(0.0)).unwrap()}
  }
  /// Radar cross section in meters squared for orthogonal polarization.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn orthogonalRcs(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ORTHOGONALRCS, Some(0.0)).unwrap()}
  }
  /// One sigma uncertainty in orthogonal polarization Radar Cross Section, in meters^2.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn orthogonalRcsUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_ORTHOGONALRCSUNC, Some(0.0)).unwrap()}
  }
  /// Signal to noise ratio, in dB.
  /// Example: /// Example: 17.292053
  /// Constraints: No constraints specified.
  #[inline]
  pub fn snr(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_SNR, Some(0.0)).unwrap()}
  }
  /// Sensor timing bias in seconds.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn timingBias(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PassiveRadarObservation_Full::VT_TIMINGBIAS, Some(0.0)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(PassiveRadarObservation_Full::VT_TAGS, None)}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: TRANSACTION-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_TRANSACTIONID, None)}
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: Descriptor
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn descriptor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_DESCRIPTOR, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_ORIGNETWORK, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_SOURCEDL, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> PassiveRadarObservation_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<PassiveRadarObservation_Full_dataMode_Enum>(PassiveRadarObservation_Full::VT_DATAMODE, Some(PassiveRadarObservation_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn onOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_ONORBIT, None)}
  }
  /// Read only enumeration specifying the type of observation (e.g. OPTICAL, RADAR, RF, etc).
  /// Example: /// Example: RADAR
  /// Constraints: No constraints specified.
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PassiveRadarObservation_Full::VT_TYPE_, None)}
  }
}

impl flatbuffers::Verifiable for PassiveRadarObservation_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obTime", Self::VT_OBTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idRFEmitter", Self::VT_IDRFEMITTER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensorRefReceiver", Self::VT_IDSENSORREFRECEIVER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("extObservationId", Self::VT_EXTOBSERVATIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("taskId", Self::VT_TASKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("trackId", Self::VT_TRACKID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obPosition", Self::VT_OBPOSITION, false)?
     .visit_field::<bool>("uct", Self::VT_UCT, false)?
     .visit_field::<f64>("azimuth", Self::VT_AZIMUTH, false)?
     .visit_field::<f64>("azimuthUnc", Self::VT_AZIMUTHUNC, false)?
     .visit_field::<f64>("azimuthBias", Self::VT_AZIMUTHBIAS, false)?
     .visit_field::<f64>("azimuthRate", Self::VT_AZIMUTHRATE, false)?
     .visit_field::<f64>("elevation", Self::VT_ELEVATION, false)?
     .visit_field::<f64>("elevationUnc", Self::VT_ELEVATIONUNC, false)?
     .visit_field::<f64>("elevationBias", Self::VT_ELEVATIONBIAS, false)?
     .visit_field::<f64>("elevationRate", Self::VT_ELEVATIONRATE, false)?
     .visit_field::<f64>("delay", Self::VT_DELAY, false)?
     .visit_field::<f64>("delayUnc", Self::VT_DELAYUNC, false)?
     .visit_field::<f64>("delayBias", Self::VT_DELAYBIAS, false)?
     .visit_field::<f64>("bistaticRange", Self::VT_BISTATICRANGE, false)?
     .visit_field::<f64>("bistaticRangeUnc", Self::VT_BISTATICRANGEUNC, false)?
     .visit_field::<f64>("bistaticRangeBias", Self::VT_BISTATICRANGEBIAS, false)?
     .visit_field::<f64>("bistaticRangeRate", Self::VT_BISTATICRANGERATE, false)?
     .visit_field::<f64>("bistaticRangeRateUnc", Self::VT_BISTATICRANGERATEUNC, false)?
     .visit_field::<f64>("bistaticRangeAccel", Self::VT_BISTATICRANGEACCEL, false)?
     .visit_field::<f64>("bistaticRangeAccelUnc", Self::VT_BISTATICRANGEACCELUNC, false)?
     .visit_field::<f64>("doppler", Self::VT_DOPPLER, false)?
     .visit_field::<f64>("dopplerUnc", Self::VT_DOPPLERUNC, false)?
     .visit_field::<f64>("coning", Self::VT_CONING, false)?
     .visit_field::<f64>("coningUnc", Self::VT_CONINGUNC, false)?
     .visit_field::<f64>("tof", Self::VT_TOF, false)?
     .visit_field::<f64>("tofUnc", Self::VT_TOFUNC, false)?
     .visit_field::<f64>("tofBias", Self::VT_TOFBIAS, false)?
     .visit_field::<f64>("accel", Self::VT_ACCEL, false)?
     .visit_field::<f64>("accelUnc", Self::VT_ACCELUNC, false)?
     .visit_field::<f64>("ra", Self::VT_RA, false)?
     .visit_field::<f64>("declination", Self::VT_DECLINATION, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<f64>("alt", Self::VT_ALT, false)?
     .visit_field::<f64>("xvel", Self::VT_XVEL, false)?
     .visit_field::<f64>("yvel", Self::VT_YVEL, false)?
     .visit_field::<f64>("zvel", Self::VT_ZVEL, false)?
     .visit_field::<f64>("rcs", Self::VT_RCS, false)?
     .visit_field::<f64>("rcsUnc", Self::VT_RCSUNC, false)?
     .visit_field::<f64>("orthogonalRcs", Self::VT_ORTHOGONALRCS, false)?
     .visit_field::<f64>("orthogonalRcsUnc", Self::VT_ORTHOGONALRCSUNC, false)?
     .visit_field::<f64>("snr", Self::VT_SNR, false)?
     .visit_field::<f64>("timingBias", Self::VT_TIMINGBIAS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("descriptor", Self::VT_DESCRIPTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<PassiveRadarObservation_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("onOrbit", Self::VT_ONORBIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .finish();
    Ok(())
  }
}
pub struct PassiveRadarObservation_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idRFEmitter: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensorRefReceiver: Option<flatbuffers::WIPOffset<&'a str>>,
    pub extObservationId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub taskId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub trackId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obPosition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub uct: bool,
    pub azimuth: f64,
    pub azimuthUnc: f64,
    pub azimuthBias: f64,
    pub azimuthRate: f64,
    pub elevation: f64,
    pub elevationUnc: f64,
    pub elevationBias: f64,
    pub elevationRate: f64,
    pub delay: f64,
    pub delayUnc: f64,
    pub delayBias: f64,
    pub bistaticRange: f64,
    pub bistaticRangeUnc: f64,
    pub bistaticRangeBias: f64,
    pub bistaticRangeRate: f64,
    pub bistaticRangeRateUnc: f64,
    pub bistaticRangeAccel: f64,
    pub bistaticRangeAccelUnc: f64,
    pub doppler: f64,
    pub dopplerUnc: f64,
    pub coning: f64,
    pub coningUnc: f64,
    pub tof: f64,
    pub tofUnc: f64,
    pub tofBias: f64,
    pub accel: f64,
    pub accelUnc: f64,
    pub ra: f64,
    pub declination: f64,
    pub lat: f64,
    pub lon: f64,
    pub alt: f64,
    pub xvel: f64,
    pub yvel: f64,
    pub zvel: f64,
    pub rcs: f64,
    pub rcsUnc: f64,
    pub orthogonalRcs: f64,
    pub orthogonalRcsUnc: f64,
    pub snr: f64,
    pub timingBias: f64,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub descriptor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: PassiveRadarObservation_Full_dataMode_Enum,
    pub onOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PassiveRadarObservation_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    PassiveRadarObservation_FullArgs {
      id: None,
      classificationMarking: None,
      obTime: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      idSensor: None,
      origSensorId: None,
      idRFEmitter: None,
      idSensorRefReceiver: None,
      extObservationId: None,
      taskId: None,
      trackId: None,
      obPosition: None,
      uct: false,
      azimuth: 0.0,
      azimuthUnc: 0.0,
      azimuthBias: 0.0,
      azimuthRate: 0.0,
      elevation: 0.0,
      elevationUnc: 0.0,
      elevationBias: 0.0,
      elevationRate: 0.0,
      delay: 0.0,
      delayUnc: 0.0,
      delayBias: 0.0,
      bistaticRange: 0.0,
      bistaticRangeUnc: 0.0,
      bistaticRangeBias: 0.0,
      bistaticRangeRate: 0.0,
      bistaticRangeRateUnc: 0.0,
      bistaticRangeAccel: 0.0,
      bistaticRangeAccelUnc: 0.0,
      doppler: 0.0,
      dopplerUnc: 0.0,
      coning: 0.0,
      coningUnc: 0.0,
      tof: 0.0,
      tofUnc: 0.0,
      tofBias: 0.0,
      accel: 0.0,
      accelUnc: 0.0,
      ra: 0.0,
      declination: 0.0,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      xvel: 0.0,
      yvel: 0.0,
      zvel: 0.0,
      rcs: 0.0,
      rcsUnc: 0.0,
      orthogonalRcs: 0.0,
      orthogonalRcsUnc: 0.0,
      snr: 0.0,
      timingBias: 0.0,
      tags: None,
      transactionId: None,
      descriptor: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: PassiveRadarObservation_Full_dataMode_Enum::REAL,
      onOrbit: None,
      type_: None,
    }
  }
}

pub struct PassiveRadarObservation_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PassiveRadarObservation_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_obTime(&mut self, obTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_OBTIME, obTime);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(PassiveRadarObservation_Full::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_idRFEmitter(&mut self, idRFEmitter: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_IDRFEMITTER, idRFEmitter);
  }
  #[inline]
  pub fn add_idSensorRefReceiver(&mut self, idSensorRefReceiver: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_IDSENSORREFRECEIVER, idSensorRefReceiver);
  }
  #[inline]
  pub fn add_extObservationId(&mut self, extObservationId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_EXTOBSERVATIONID, extObservationId);
  }
  #[inline]
  pub fn add_taskId(&mut self, taskId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_TASKID, taskId);
  }
  #[inline]
  pub fn add_trackId(&mut self, trackId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_TRACKID, trackId);
  }
  #[inline]
  pub fn add_obPosition(&mut self, obPosition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_OBPOSITION, obPosition);
  }
  #[inline]
  pub fn add_uct(&mut self, uct: bool) {
    self.fbb_.push_slot::<bool>(PassiveRadarObservation_Full::VT_UCT, uct, false);
  }
  #[inline]
  pub fn add_azimuth(&mut self, azimuth: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_AZIMUTH, azimuth, 0.0);
  }
  #[inline]
  pub fn add_azimuthUnc(&mut self, azimuthUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_AZIMUTHUNC, azimuthUnc, 0.0);
  }
  #[inline]
  pub fn add_azimuthBias(&mut self, azimuthBias: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_AZIMUTHBIAS, azimuthBias, 0.0);
  }
  #[inline]
  pub fn add_azimuthRate(&mut self, azimuthRate: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_AZIMUTHRATE, azimuthRate, 0.0);
  }
  #[inline]
  pub fn add_elevation(&mut self, elevation: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ELEVATION, elevation, 0.0);
  }
  #[inline]
  pub fn add_elevationUnc(&mut self, elevationUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ELEVATIONUNC, elevationUnc, 0.0);
  }
  #[inline]
  pub fn add_elevationBias(&mut self, elevationBias: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ELEVATIONBIAS, elevationBias, 0.0);
  }
  #[inline]
  pub fn add_elevationRate(&mut self, elevationRate: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ELEVATIONRATE, elevationRate, 0.0);
  }
  #[inline]
  pub fn add_delay(&mut self, delay: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_DELAY, delay, 0.0);
  }
  #[inline]
  pub fn add_delayUnc(&mut self, delayUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_DELAYUNC, delayUnc, 0.0);
  }
  #[inline]
  pub fn add_delayBias(&mut self, delayBias: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_DELAYBIAS, delayBias, 0.0);
  }
  #[inline]
  pub fn add_bistaticRange(&mut self, bistaticRange: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGE, bistaticRange, 0.0);
  }
  #[inline]
  pub fn add_bistaticRangeUnc(&mut self, bistaticRangeUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEUNC, bistaticRangeUnc, 0.0);
  }
  #[inline]
  pub fn add_bistaticRangeBias(&mut self, bistaticRangeBias: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEBIAS, bistaticRangeBias, 0.0);
  }
  #[inline]
  pub fn add_bistaticRangeRate(&mut self, bistaticRangeRate: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGERATE, bistaticRangeRate, 0.0);
  }
  #[inline]
  pub fn add_bistaticRangeRateUnc(&mut self, bistaticRangeRateUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGERATEUNC, bistaticRangeRateUnc, 0.0);
  }
  #[inline]
  pub fn add_bistaticRangeAccel(&mut self, bistaticRangeAccel: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEACCEL, bistaticRangeAccel, 0.0);
  }
  #[inline]
  pub fn add_bistaticRangeAccelUnc(&mut self, bistaticRangeAccelUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_BISTATICRANGEACCELUNC, bistaticRangeAccelUnc, 0.0);
  }
  #[inline]
  pub fn add_doppler(&mut self, doppler: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_DOPPLER, doppler, 0.0);
  }
  #[inline]
  pub fn add_dopplerUnc(&mut self, dopplerUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_DOPPLERUNC, dopplerUnc, 0.0);
  }
  #[inline]
  pub fn add_coning(&mut self, coning: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_CONING, coning, 0.0);
  }
  #[inline]
  pub fn add_coningUnc(&mut self, coningUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_CONINGUNC, coningUnc, 0.0);
  }
  #[inline]
  pub fn add_tof(&mut self, tof: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_TOF, tof, 0.0);
  }
  #[inline]
  pub fn add_tofUnc(&mut self, tofUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_TOFUNC, tofUnc, 0.0);
  }
  #[inline]
  pub fn add_tofBias(&mut self, tofBias: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_TOFBIAS, tofBias, 0.0);
  }
  #[inline]
  pub fn add_accel(&mut self, accel: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ACCEL, accel, 0.0);
  }
  #[inline]
  pub fn add_accelUnc(&mut self, accelUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ACCELUNC, accelUnc, 0.0);
  }
  #[inline]
  pub fn add_ra(&mut self, ra: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_RA, ra, 0.0);
  }
  #[inline]
  pub fn add_declination(&mut self, declination: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_DECLINATION, declination, 0.0);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_alt(&mut self, alt: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ALT, alt, 0.0);
  }
  #[inline]
  pub fn add_xvel(&mut self, xvel: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_XVEL, xvel, 0.0);
  }
  #[inline]
  pub fn add_yvel(&mut self, yvel: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_YVEL, yvel, 0.0);
  }
  #[inline]
  pub fn add_zvel(&mut self, zvel: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ZVEL, zvel, 0.0);
  }
  #[inline]
  pub fn add_rcs(&mut self, rcs: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_RCS, rcs, 0.0);
  }
  #[inline]
  pub fn add_rcsUnc(&mut self, rcsUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_RCSUNC, rcsUnc, 0.0);
  }
  #[inline]
  pub fn add_orthogonalRcs(&mut self, orthogonalRcs: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ORTHOGONALRCS, orthogonalRcs, 0.0);
  }
  #[inline]
  pub fn add_orthogonalRcsUnc(&mut self, orthogonalRcsUnc: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_ORTHOGONALRCSUNC, orthogonalRcsUnc, 0.0);
  }
  #[inline]
  pub fn add_snr(&mut self, snr: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_SNR, snr, 0.0);
  }
  #[inline]
  pub fn add_timingBias(&mut self, timingBias: f64) {
    self.fbb_.push_slot::<f64>(PassiveRadarObservation_Full::VT_TIMINGBIAS, timingBias, 0.0);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn add_descriptor(&mut self, descriptor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_DESCRIPTOR, descriptor);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: PassiveRadarObservation_Full_dataMode_Enum) {
    self.fbb_.push_slot::<PassiveRadarObservation_Full_dataMode_Enum>(PassiveRadarObservation_Full::VT_DATAMODE, dataMode, PassiveRadarObservation_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_onOrbit(&mut self, onOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_ONORBIT, onOrbit);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PassiveRadarObservation_Full::VT_TYPE_, type_);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PassiveRadarObservation_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PassiveRadarObservation_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PassiveRadarObservation_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PassiveRadarObservation_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PassiveRadarObservation_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("obTime", &self.obTime());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("idSensor", &self.idSensor());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("idRFEmitter", &self.idRFEmitter());
      ds.field("idSensorRefReceiver", &self.idSensorRefReceiver());
      ds.field("extObservationId", &self.extObservationId());
      ds.field("taskId", &self.taskId());
      ds.field("trackId", &self.trackId());
      ds.field("obPosition", &self.obPosition());
      ds.field("uct", &self.uct());
      ds.field("azimuth", &self.azimuth());
      ds.field("azimuthUnc", &self.azimuthUnc());
      ds.field("azimuthBias", &self.azimuthBias());
      ds.field("azimuthRate", &self.azimuthRate());
      ds.field("elevation", &self.elevation());
      ds.field("elevationUnc", &self.elevationUnc());
      ds.field("elevationBias", &self.elevationBias());
      ds.field("elevationRate", &self.elevationRate());
      ds.field("delay", &self.delay());
      ds.field("delayUnc", &self.delayUnc());
      ds.field("delayBias", &self.delayBias());
      ds.field("bistaticRange", &self.bistaticRange());
      ds.field("bistaticRangeUnc", &self.bistaticRangeUnc());
      ds.field("bistaticRangeBias", &self.bistaticRangeBias());
      ds.field("bistaticRangeRate", &self.bistaticRangeRate());
      ds.field("bistaticRangeRateUnc", &self.bistaticRangeRateUnc());
      ds.field("bistaticRangeAccel", &self.bistaticRangeAccel());
      ds.field("bistaticRangeAccelUnc", &self.bistaticRangeAccelUnc());
      ds.field("doppler", &self.doppler());
      ds.field("dopplerUnc", &self.dopplerUnc());
      ds.field("coning", &self.coning());
      ds.field("coningUnc", &self.coningUnc());
      ds.field("tof", &self.tof());
      ds.field("tofUnc", &self.tofUnc());
      ds.field("tofBias", &self.tofBias());
      ds.field("accel", &self.accel());
      ds.field("accelUnc", &self.accelUnc());
      ds.field("ra", &self.ra());
      ds.field("declination", &self.declination());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("alt", &self.alt());
      ds.field("xvel", &self.xvel());
      ds.field("yvel", &self.yvel());
      ds.field("zvel", &self.zvel());
      ds.field("rcs", &self.rcs());
      ds.field("rcsUnc", &self.rcsUnc());
      ds.field("orthogonalRcs", &self.orthogonalRcs());
      ds.field("orthogonalRcsUnc", &self.orthogonalRcsUnc());
      ds.field("snr", &self.snr());
      ds.field("timingBias", &self.timingBias());
      ds.field("tags", &self.tags());
      ds.field("transactionId", &self.transactionId());
      ds.field("descriptor", &self.descriptor());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("dataMode", &self.dataMode());
      ds.field("onOrbit", &self.onOrbit());
      ds.field("type_", &self.type_());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PassiveRadarObservation_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub obTime: Option<String>,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub origObjectId: Option<String>,
  pub idSensor: Option<String>,
  pub origSensorId: Option<String>,
  pub idRFEmitter: Option<String>,
  pub idSensorRefReceiver: Option<String>,
  pub extObservationId: Option<String>,
  pub taskId: Option<String>,
  pub trackId: Option<String>,
  pub obPosition: Option<String>,
  pub uct: bool,
  pub azimuth: f64,
  pub azimuthUnc: f64,
  pub azimuthBias: f64,
  pub azimuthRate: f64,
  pub elevation: f64,
  pub elevationUnc: f64,
  pub elevationBias: f64,
  pub elevationRate: f64,
  pub delay: f64,
  pub delayUnc: f64,
  pub delayBias: f64,
  pub bistaticRange: f64,
  pub bistaticRangeUnc: f64,
  pub bistaticRangeBias: f64,
  pub bistaticRangeRate: f64,
  pub bistaticRangeRateUnc: f64,
  pub bistaticRangeAccel: f64,
  pub bistaticRangeAccelUnc: f64,
  pub doppler: f64,
  pub dopplerUnc: f64,
  pub coning: f64,
  pub coningUnc: f64,
  pub tof: f64,
  pub tofUnc: f64,
  pub tofBias: f64,
  pub accel: f64,
  pub accelUnc: f64,
  pub ra: f64,
  pub declination: f64,
  pub lat: f64,
  pub lon: f64,
  pub alt: f64,
  pub xvel: f64,
  pub yvel: f64,
  pub zvel: f64,
  pub rcs: f64,
  pub rcsUnc: f64,
  pub orthogonalRcs: f64,
  pub orthogonalRcsUnc: f64,
  pub snr: f64,
  pub timingBias: f64,
  pub tags: Option<Vec<String>>,
  pub transactionId: Option<String>,
  pub descriptor: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub sourceDL: Option<String>,
  pub dataMode: PassiveRadarObservation_Full_dataMode_Enum,
  pub onOrbit: Option<String>,
  pub type_: Option<String>,
}
impl Default for PassiveRadarObservation_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      obTime: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      idSensor: None,
      origSensorId: None,
      idRFEmitter: None,
      idSensorRefReceiver: None,
      extObservationId: None,
      taskId: None,
      trackId: None,
      obPosition: None,
      uct: false,
      azimuth: 0.0,
      azimuthUnc: 0.0,
      azimuthBias: 0.0,
      azimuthRate: 0.0,
      elevation: 0.0,
      elevationUnc: 0.0,
      elevationBias: 0.0,
      elevationRate: 0.0,
      delay: 0.0,
      delayUnc: 0.0,
      delayBias: 0.0,
      bistaticRange: 0.0,
      bistaticRangeUnc: 0.0,
      bistaticRangeBias: 0.0,
      bistaticRangeRate: 0.0,
      bistaticRangeRateUnc: 0.0,
      bistaticRangeAccel: 0.0,
      bistaticRangeAccelUnc: 0.0,
      doppler: 0.0,
      dopplerUnc: 0.0,
      coning: 0.0,
      coningUnc: 0.0,
      tof: 0.0,
      tofUnc: 0.0,
      tofBias: 0.0,
      accel: 0.0,
      accelUnc: 0.0,
      ra: 0.0,
      declination: 0.0,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      xvel: 0.0,
      yvel: 0.0,
      zvel: 0.0,
      rcs: 0.0,
      rcsUnc: 0.0,
      orthogonalRcs: 0.0,
      orthogonalRcsUnc: 0.0,
      snr: 0.0,
      timingBias: 0.0,
      tags: None,
      transactionId: None,
      descriptor: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: PassiveRadarObservation_Full_dataMode_Enum::REAL,
      onOrbit: None,
      type_: None,
    }
  }
}
impl PassiveRadarObservation_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PassiveRadarObservation_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obTime = self.obTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idRFEmitter = self.idRFEmitter.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensorRefReceiver = self.idSensorRefReceiver.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let extObservationId = self.extObservationId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let taskId = self.taskId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let trackId = self.trackId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obPosition = self.obPosition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let uct = self.uct;
    let azimuth = self.azimuth;
    let azimuthUnc = self.azimuthUnc;
    let azimuthBias = self.azimuthBias;
    let azimuthRate = self.azimuthRate;
    let elevation = self.elevation;
    let elevationUnc = self.elevationUnc;
    let elevationBias = self.elevationBias;
    let elevationRate = self.elevationRate;
    let delay = self.delay;
    let delayUnc = self.delayUnc;
    let delayBias = self.delayBias;
    let bistaticRange = self.bistaticRange;
    let bistaticRangeUnc = self.bistaticRangeUnc;
    let bistaticRangeBias = self.bistaticRangeBias;
    let bistaticRangeRate = self.bistaticRangeRate;
    let bistaticRangeRateUnc = self.bistaticRangeRateUnc;
    let bistaticRangeAccel = self.bistaticRangeAccel;
    let bistaticRangeAccelUnc = self.bistaticRangeAccelUnc;
    let doppler = self.doppler;
    let dopplerUnc = self.dopplerUnc;
    let coning = self.coning;
    let coningUnc = self.coningUnc;
    let tof = self.tof;
    let tofUnc = self.tofUnc;
    let tofBias = self.tofBias;
    let accel = self.accel;
    let accelUnc = self.accelUnc;
    let ra = self.ra;
    let declination = self.declination;
    let lat = self.lat;
    let lon = self.lon;
    let alt = self.alt;
    let xvel = self.xvel;
    let yvel = self.yvel;
    let zvel = self.zvel;
    let rcs = self.rcs;
    let rcsUnc = self.rcsUnc;
    let orthogonalRcs = self.orthogonalRcs;
    let orthogonalRcsUnc = self.orthogonalRcsUnc;
    let snr = self.snr;
    let timingBias = self.timingBias;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let descriptor = self.descriptor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let onOrbit = self.onOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    PassiveRadarObservation_Full::create(_fbb, &PassiveRadarObservation_FullArgs{
      id,
      classificationMarking,
      obTime,
      idOnOrbit,
      satNo,
      origObjectId,
      idSensor,
      origSensorId,
      idRFEmitter,
      idSensorRefReceiver,
      extObservationId,
      taskId,
      trackId,
      obPosition,
      uct,
      azimuth,
      azimuthUnc,
      azimuthBias,
      azimuthRate,
      elevation,
      elevationUnc,
      elevationBias,
      elevationRate,
      delay,
      delayUnc,
      delayBias,
      bistaticRange,
      bistaticRangeUnc,
      bistaticRangeBias,
      bistaticRangeRate,
      bistaticRangeRateUnc,
      bistaticRangeAccel,
      bistaticRangeAccelUnc,
      doppler,
      dopplerUnc,
      coning,
      coningUnc,
      tof,
      tofUnc,
      tofBias,
      accel,
      accelUnc,
      ra,
      declination,
      lat,
      lon,
      alt,
      xvel,
      yvel,
      zvel,
      rcs,
      rcsUnc,
      orthogonalRcs,
      orthogonalRcsUnc,
      snr,
      timingBias,
      tags,
      transactionId,
      descriptor,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
      onOrbit,
      type_,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PassiveRadarObservation_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_passive_radar_observation_full_unchecked`.
pub fn root_as_passive_radar_observation_full(buf: &[u8]) -> Result<PassiveRadarObservation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PassiveRadarObservation_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PassiveRadarObservation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_passive_radar_observation_full_unchecked`.
pub fn size_prefixed_root_as_passive_radar_observation_full(buf: &[u8]) -> Result<PassiveRadarObservation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PassiveRadarObservation_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PassiveRadarObservation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_passive_radar_observation_full_unchecked`.
pub fn root_as_passive_radar_observation_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PassiveRadarObservation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PassiveRadarObservation_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PassiveRadarObservation_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_passive_radar_observation_full_unchecked`.
pub fn size_prefixed_root_as_passive_radar_observation_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PassiveRadarObservation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PassiveRadarObservation_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PassiveRadarObservation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PassiveRadarObservation_Full`.
pub unsafe fn root_as_passive_radar_observation_full_unchecked(buf: &[u8]) -> PassiveRadarObservation_Full {
  flatbuffers::root_unchecked::<PassiveRadarObservation_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PassiveRadarObservation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PassiveRadarObservation_Full`.
pub unsafe fn size_prefixed_root_as_passive_radar_observation_full_unchecked(buf: &[u8]) -> PassiveRadarObservation_Full {
  flatbuffers::size_prefixed_root_unchecked::<PassiveRadarObservation_Full>(buf)
}
pub const PASSIVE_RADAR_OBSERVATION_FULL_IDENTIFIER: &str = "PASS";

#[inline]
pub fn passive_radar_observation_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PASSIVE_RADAR_OBSERVATION_FULL_IDENTIFIER, false)
}

#[inline]
pub fn passive_radar_observation_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PASSIVE_RADAR_OBSERVATION_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_passive_radar_observation_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PassiveRadarObservation_Full<'a>>) {
  fbb.finish(root, Some(PASSIVE_RADAR_OBSERVATION_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_passive_radar_observation_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PassiveRadarObservation_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(PASSIVE_RADAR_OBSERVATION_FULL_IDENTIFIER));
}
