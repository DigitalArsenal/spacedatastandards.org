// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PersonnelRecoveryEnemyData_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information detailing knowledge of enemies in the area.
pub struct PersonnelRecoveryEnemyData_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PersonnelRecoveryEnemyData_Ingest<'a> {
  type Inner = PersonnelRecoveryEnemyData_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PersonnelRecoveryEnemyData_Ingest<'a> {
  pub const VT_DIRTOENEMY: flatbuffers::VOffsetT = 4;
  pub const VT_HOSTILEFIRETYPE: flatbuffers::VOffsetT = 6;
  pub const VT_FRIENDLIESREMARKS: flatbuffers::VOffsetT = 8;
  pub const VT_HLZREMARKS: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PersonnelRecoveryEnemyData_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PersonnelRecoveryEnemyData_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryEnemyData_Ingest<'bldr>> {
    let mut builder = PersonnelRecoveryEnemyData_IngestBuilder::new(_fbb);
    if let Some(x) = args.hlzRemarks { builder.add_hlzRemarks(x); }
    if let Some(x) = args.friendliesRemarks { builder.add_friendliesRemarks(x); }
    if let Some(x) = args.hostileFireType { builder.add_hostileFireType(x); }
    if let Some(x) = args.dirToEnemy { builder.add_dirToEnemy(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PersonnelRecoveryEnemyData_IngestT {
    let dirToEnemy = self.dirToEnemy().map(|x| {
      x.to_string()
    });
    let hostileFireType = self.hostileFireType().map(|x| {
      x.to_string()
    });
    let friendliesRemarks = self.friendliesRemarks().map(|x| {
      x.to_string()
    });
    let hlzRemarks = self.hlzRemarks().map(|x| {
      x.to_string()
    });
    PersonnelRecoveryEnemyData_IngestT {
      dirToEnemy,
      hostileFireType,
      friendliesRemarks,
      hlzRemarks,
    }
  }

  /// Directions to known enemies in the operation area (NORTH, NORTHEAST, EAST, SOUTHEAST, SOUTH, SOUTHWEST, WEST, NORTHWEST, SURROUNDED).
  /// Example: /// Example: NORTHWEST
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn dirToEnemy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryEnemyData_Ingest::VT_DIRTOENEMY, None)}
  }
  /// The type of hostile fire received (SMALL ARMS, MORTAR, ARTILLERY, ROCKETS).
  /// Example: /// Example: SMALL ARMS
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn hostileFireType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryEnemyData_Ingest::VT_HOSTILEFIRETYPE, None)}
  }
  /// Comments provided by friendlies about the evac zone.
  /// Example: /// Example: Comments from friendlies.
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn friendliesRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryEnemyData_Ingest::VT_FRIENDLIESREMARKS, None)}
  }
  /// Hot Landing Zone remarks.
  /// Example: /// Example: Hot Landing Zone remarks.
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn hlzRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryEnemyData_Ingest::VT_HLZREMARKS, None)}
  }
}

impl flatbuffers::Verifiable for PersonnelRecoveryEnemyData_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dirToEnemy", Self::VT_DIRTOENEMY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostileFireType", Self::VT_HOSTILEFIRETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("friendliesRemarks", Self::VT_FRIENDLIESREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hlzRemarks", Self::VT_HLZREMARKS, false)?
     .finish();
    Ok(())
  }
}
pub struct PersonnelRecoveryEnemyData_IngestArgs<'a> {
    pub dirToEnemy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostileFireType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub friendliesRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hlzRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for PersonnelRecoveryEnemyData_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    PersonnelRecoveryEnemyData_IngestArgs {
      dirToEnemy: None,
      hostileFireType: None,
      friendliesRemarks: None,
      hlzRemarks: None,
    }
  }
}

pub struct PersonnelRecoveryEnemyData_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PersonnelRecoveryEnemyData_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_dirToEnemy(&mut self, dirToEnemy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryEnemyData_Ingest::VT_DIRTOENEMY, dirToEnemy);
  }
  #[inline]
  pub fn add_hostileFireType(&mut self, hostileFireType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryEnemyData_Ingest::VT_HOSTILEFIRETYPE, hostileFireType);
  }
  #[inline]
  pub fn add_friendliesRemarks(&mut self, friendliesRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryEnemyData_Ingest::VT_FRIENDLIESREMARKS, friendliesRemarks);
  }
  #[inline]
  pub fn add_hlzRemarks(&mut self, hlzRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryEnemyData_Ingest::VT_HLZREMARKS, hlzRemarks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PersonnelRecoveryEnemyData_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PersonnelRecoveryEnemyData_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PersonnelRecoveryEnemyData_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PersonnelRecoveryEnemyData_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PersonnelRecoveryEnemyData_Ingest");
      ds.field("dirToEnemy", &self.dirToEnemy());
      ds.field("hostileFireType", &self.hostileFireType());
      ds.field("friendliesRemarks", &self.friendliesRemarks());
      ds.field("hlzRemarks", &self.hlzRemarks());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PersonnelRecoveryEnemyData_IngestT {
  pub dirToEnemy: Option<String>,
  pub hostileFireType: Option<String>,
  pub friendliesRemarks: Option<String>,
  pub hlzRemarks: Option<String>,
}
impl Default for PersonnelRecoveryEnemyData_IngestT {
  fn default() -> Self {
    Self {
      dirToEnemy: None,
      hostileFireType: None,
      friendliesRemarks: None,
      hlzRemarks: None,
    }
  }
}
impl PersonnelRecoveryEnemyData_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryEnemyData_Ingest<'b>> {
    let dirToEnemy = self.dirToEnemy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let hostileFireType = self.hostileFireType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let friendliesRemarks = self.friendliesRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let hlzRemarks = self.hlzRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    PersonnelRecoveryEnemyData_Ingest::create(_fbb, &PersonnelRecoveryEnemyData_IngestArgs{
      dirToEnemy,
      hostileFireType,
      friendliesRemarks,
      hlzRemarks,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PersonnelRecoveryEnemyData_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_enemy_data_ingest_unchecked`.
pub fn root_as_personnel_recovery_enemy_data_ingest(buf: &[u8]) -> Result<PersonnelRecoveryEnemyData_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PersonnelRecoveryEnemyData_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PersonnelRecoveryEnemyData_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_personnel_recovery_enemy_data_ingest_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_enemy_data_ingest(buf: &[u8]) -> Result<PersonnelRecoveryEnemyData_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PersonnelRecoveryEnemyData_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PersonnelRecoveryEnemyData_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_enemy_data_ingest_unchecked`.
pub fn root_as_personnel_recovery_enemy_data_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryEnemyData_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PersonnelRecoveryEnemyData_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PersonnelRecoveryEnemyData_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_enemy_data_ingest_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_enemy_data_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryEnemyData_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PersonnelRecoveryEnemyData_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PersonnelRecoveryEnemyData_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PersonnelRecoveryEnemyData_Ingest`.
pub unsafe fn root_as_personnel_recovery_enemy_data_ingest_unchecked(buf: &[u8]) -> PersonnelRecoveryEnemyData_Ingest {
  flatbuffers::root_unchecked::<PersonnelRecoveryEnemyData_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PersonnelRecoveryEnemyData_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PersonnelRecoveryEnemyData_Ingest`.
pub unsafe fn size_prefixed_root_as_personnel_recovery_enemy_data_ingest_unchecked(buf: &[u8]) -> PersonnelRecoveryEnemyData_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<PersonnelRecoveryEnemyData_Ingest>(buf)
}
pub const PERSONNEL_RECOVERY_ENEMY_DATA_INGEST_IDENTIFIER: &str = "PERS";

#[inline]
pub fn personnel_recovery_enemy_data_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_ENEMY_DATA_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn personnel_recovery_enemy_data_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_ENEMY_DATA_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_personnel_recovery_enemy_data_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PersonnelRecoveryEnemyData_Ingest<'a>>) {
  fbb.finish(root, Some(PERSONNEL_RECOVERY_ENEMY_DATA_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_personnel_recovery_enemy_data_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PersonnelRecoveryEnemyData_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(PERSONNEL_RECOVERY_ENEMY_DATA_INGEST_IDENTIFIER));
}
