// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MtiJobRequest_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
pub struct MtiJobRequest_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MtiJobRequest_Full<'a> {
  type Inner = MtiJobRequest_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MtiJobRequest_Full<'a> {
  pub const VT_R1: flatbuffers::VOffsetT = 4;
  pub const VT_R2: flatbuffers::VOffsetT = 6;
  pub const VT_R3: flatbuffers::VOffsetT = 8;
  pub const VT_R4: flatbuffers::VOffsetT = 10;
  pub const VT_R5: flatbuffers::VOffsetT = 12;
  pub const VT_R6: flatbuffers::VOffsetT = 14;
  pub const VT_R7: flatbuffers::VOffsetT = 16;
  pub const VT_R8: flatbuffers::VOffsetT = 18;
  pub const VT_R9: flatbuffers::VOffsetT = 20;
  pub const VT_R10: flatbuffers::VOffsetT = 22;
  pub const VT_R11: flatbuffers::VOffsetT = 24;
  pub const VT_R12: flatbuffers::VOffsetT = 26;
  pub const VT_R13: flatbuffers::VOffsetT = 28;
  pub const VT_R14: flatbuffers::VOffsetT = 30;
  pub const VT_JOBREQEST: flatbuffers::VOffsetT = 32;
  pub const VT_R21: flatbuffers::VOffsetT = 34;
  pub const VT_R22: flatbuffers::VOffsetT = 36;
  pub const VT_R23: flatbuffers::VOffsetT = 38;
  pub const VT_R24: flatbuffers::VOffsetT = 40;
  pub const VT_R25: flatbuffers::VOffsetT = 42;
  pub const VT_R26: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MtiJobRequest_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MtiJobRequest_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<MtiJobRequest_Full<'bldr>> {
    let mut builder = MtiJobRequest_FullBuilder::new(_fbb);
    builder.add_r11(args.r11);
    builder.add_r10(args.r10);
    builder.add_r9(args.r9);
    builder.add_r8(args.r8);
    builder.add_r7(args.r7);
    builder.add_r6(args.r6);
    builder.add_r5(args.r5);
    builder.add_r4(args.r4);
    if let Some(x) = args.r25 { builder.add_r25(x); }
    if let Some(x) = args.r24 { builder.add_r24(x); }
    builder.add_r23(args.r23);
    builder.add_r22(args.r22);
    builder.add_r21(args.r21);
    if let Some(x) = args.jobReqEst { builder.add_jobReqEst(x); }
    builder.add_r14(args.r14);
    builder.add_r13(args.r13);
    if let Some(x) = args.r12 { builder.add_r12(x); }
    builder.add_r3(args.r3);
    if let Some(x) = args.r2 { builder.add_r2(x); }
    if let Some(x) = args.r1 { builder.add_r1(x); }
    builder.add_r26(args.r26);
    builder.finish()
  }

  pub fn unpack(&self) -> MtiJobRequest_FullT {
    let r1 = self.r1().map(|x| {
      x.to_string()
    });
    let r2 = self.r2().map(|x| {
      x.to_string()
    });
    let r3 = self.r3();
    let r4 = self.r4();
    let r5 = self.r5();
    let r6 = self.r6();
    let r7 = self.r7();
    let r8 = self.r8();
    let r9 = self.r9();
    let r10 = self.r10();
    let r11 = self.r11();
    let r12 = self.r12().map(|x| {
      x.to_string()
    });
    let r13 = self.r13();
    let r14 = self.r14();
    let jobReqEst = self.jobReqEst().map(|x| {
      x.to_string()
    });
    let r21 = self.r21();
    let r22 = self.r22();
    let r23 = self.r23();
    let r24 = self.r24().map(|x| {
      x.to_string()
    });
    let r25 = self.r25().map(|x| {
      x.to_string()
    });
    let r26 = self.r26();
    MtiJobRequest_FullT {
      r1,
      r2,
      r3,
      r4,
      r5,
      r6,
      r7,
      r8,
      r9,
      r10,
      r11,
      r12,
      r13,
      r14,
      jobReqEst,
      r21,
      r22,
      r23,
      r24,
      r25,
      r26,
    }
  }

  /// The requestor of the sensor service.
  /// Example: /// Example: REQUESTER
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn r1(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobRequest_Full::VT_R1, None)}
  }
  /// Identifier for the tasking message sent by the requesting station.
  /// Example: /// Example: IDENTIFIER
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn r2(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobRequest_Full::VT_R2, None)}
  }
  /// The priority of the request relative to other requests originated by the requesting station.
  /// Example: /// Example: 15
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r3(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobRequest_Full::VT_R3, Some(0)).unwrap()}
  }
  /// North-South position of the first corner (Point A) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r4(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R4, Some(0.0)).unwrap()}
  }
  /// East-West position of the first corner (Point A) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r5(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R5, Some(0.0)).unwrap()}
  }
  /// North-South position of the second corner (Point B) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r6(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R6, Some(0.0)).unwrap()}
  }
  /// East-West position of the second corner (Point B) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r7(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R7, Some(0.0)).unwrap()}
  }
  /// North-South position of the third corner (Point C) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r8(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R8, Some(0.0)).unwrap()}
  }
  /// East-West position of the third corner (Point C) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r9(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R9, Some(0.0)).unwrap()}
  }
  /// North-South position of the fourth corner (Point D) defining the requested area for service, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r10(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R10, Some(0.0)).unwrap()}
  }
  /// East-West position of the fourth corner (Point D) defining the requested area for service, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r11(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiJobRequest_Full::VT_R11, Some(0.0)).unwrap()}
  }
  /// Identifies the radar mode requested by the requestor.
  /// Example: /// Example: MODE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn r12(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobRequest_Full::VT_R12, None)}
  }
  /// Specifies the radar range resolution requested by the requestor, expressed in centimeters.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r13(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobRequest_Full::VT_R13, Some(0)).unwrap()}
  }
  /// Specifies the radar cross-range resolution requested by the requestor, expressed in decimeters.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r14(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobRequest_Full::VT_R14, Some(0)).unwrap()}
  }
  /// Specifies the Earliest Start Time for which the service is requested.  Composite of fields R15-R20.
  /// Example: /// Example: 2018-01-01T16:00:00.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn jobReqEst(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobRequest_Full::VT_JOBREQEST, None)}
  }
  /// Specifies the maximum time from the requested start time after which the request is to be abandoned, expressed in seconds.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r21(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobRequest_Full::VT_R21, Some(0)).unwrap()}
  }
  /// Specifies the time duration for the radar job, measured from the actual start of the job, expressed in seconds.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r22(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobRequest_Full::VT_R22, Some(0)).unwrap()}
  }
  /// Specifies the revisit interval for the radar job, expressed in deciseconds.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r23(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiJobRequest_Full::VT_R23, Some(0)).unwrap()}
  }
  /// the type of sensor or the platform.
  /// Example: /// Example: TYPE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn r24(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobRequest_Full::VT_R24, None)}
  }
  /// The particular variant of the sensor type.
  /// Example: /// Example: VARIANT
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn r25(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiJobRequest_Full::VT_R25, None)}
  }
  /// Flag field indicating that it is an initial request (flag = 0) or the desire of the requestor to cancel (flag = 1) the requested job.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn r26(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MtiJobRequest_Full::VT_R26, Some(false)).unwrap()}
  }
}

impl flatbuffers::Verifiable for MtiJobRequest_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("r1", Self::VT_R1, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("r2", Self::VT_R2, false)?
     .visit_field::<i32>("r3", Self::VT_R3, false)?
     .visit_field::<f64>("r4", Self::VT_R4, false)?
     .visit_field::<f64>("r5", Self::VT_R5, false)?
     .visit_field::<f64>("r6", Self::VT_R6, false)?
     .visit_field::<f64>("r7", Self::VT_R7, false)?
     .visit_field::<f64>("r8", Self::VT_R8, false)?
     .visit_field::<f64>("r9", Self::VT_R9, false)?
     .visit_field::<f64>("r10", Self::VT_R10, false)?
     .visit_field::<f64>("r11", Self::VT_R11, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("r12", Self::VT_R12, false)?
     .visit_field::<i32>("r13", Self::VT_R13, false)?
     .visit_field::<i32>("r14", Self::VT_R14, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("jobReqEst", Self::VT_JOBREQEST, false)?
     .visit_field::<i32>("r21", Self::VT_R21, false)?
     .visit_field::<i32>("r22", Self::VT_R22, false)?
     .visit_field::<i32>("r23", Self::VT_R23, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("r24", Self::VT_R24, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("r25", Self::VT_R25, false)?
     .visit_field::<bool>("r26", Self::VT_R26, false)?
     .finish();
    Ok(())
  }
}
pub struct MtiJobRequest_FullArgs<'a> {
    pub r1: Option<flatbuffers::WIPOffset<&'a str>>,
    pub r2: Option<flatbuffers::WIPOffset<&'a str>>,
    pub r3: i32,
    pub r4: f64,
    pub r5: f64,
    pub r6: f64,
    pub r7: f64,
    pub r8: f64,
    pub r9: f64,
    pub r10: f64,
    pub r11: f64,
    pub r12: Option<flatbuffers::WIPOffset<&'a str>>,
    pub r13: i32,
    pub r14: i32,
    pub jobReqEst: Option<flatbuffers::WIPOffset<&'a str>>,
    pub r21: i32,
    pub r22: i32,
    pub r23: i32,
    pub r24: Option<flatbuffers::WIPOffset<&'a str>>,
    pub r25: Option<flatbuffers::WIPOffset<&'a str>>,
    pub r26: bool,
}
impl<'a> Default for MtiJobRequest_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    MtiJobRequest_FullArgs {
      r1: None,
      r2: None,
      r3: 0,
      r4: 0.0,
      r5: 0.0,
      r6: 0.0,
      r7: 0.0,
      r8: 0.0,
      r9: 0.0,
      r10: 0.0,
      r11: 0.0,
      r12: None,
      r13: 0,
      r14: 0,
      jobReqEst: None,
      r21: 0,
      r22: 0,
      r23: 0,
      r24: None,
      r25: None,
      r26: false,
    }
  }
}

pub struct MtiJobRequest_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MtiJobRequest_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_r1(&mut self, r1: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobRequest_Full::VT_R1, r1);
  }
  #[inline]
  pub fn add_r2(&mut self, r2: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobRequest_Full::VT_R2, r2);
  }
  #[inline]
  pub fn add_r3(&mut self, r3: i32) {
    self.fbb_.push_slot::<i32>(MtiJobRequest_Full::VT_R3, r3, 0);
  }
  #[inline]
  pub fn add_r4(&mut self, r4: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R4, r4, 0.0);
  }
  #[inline]
  pub fn add_r5(&mut self, r5: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R5, r5, 0.0);
  }
  #[inline]
  pub fn add_r6(&mut self, r6: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R6, r6, 0.0);
  }
  #[inline]
  pub fn add_r7(&mut self, r7: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R7, r7, 0.0);
  }
  #[inline]
  pub fn add_r8(&mut self, r8: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R8, r8, 0.0);
  }
  #[inline]
  pub fn add_r9(&mut self, r9: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R9, r9, 0.0);
  }
  #[inline]
  pub fn add_r10(&mut self, r10: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R10, r10, 0.0);
  }
  #[inline]
  pub fn add_r11(&mut self, r11: f64) {
    self.fbb_.push_slot::<f64>(MtiJobRequest_Full::VT_R11, r11, 0.0);
  }
  #[inline]
  pub fn add_r12(&mut self, r12: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobRequest_Full::VT_R12, r12);
  }
  #[inline]
  pub fn add_r13(&mut self, r13: i32) {
    self.fbb_.push_slot::<i32>(MtiJobRequest_Full::VT_R13, r13, 0);
  }
  #[inline]
  pub fn add_r14(&mut self, r14: i32) {
    self.fbb_.push_slot::<i32>(MtiJobRequest_Full::VT_R14, r14, 0);
  }
  #[inline]
  pub fn add_jobReqEst(&mut self, jobReqEst: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobRequest_Full::VT_JOBREQEST, jobReqEst);
  }
  #[inline]
  pub fn add_r21(&mut self, r21: i32) {
    self.fbb_.push_slot::<i32>(MtiJobRequest_Full::VT_R21, r21, 0);
  }
  #[inline]
  pub fn add_r22(&mut self, r22: i32) {
    self.fbb_.push_slot::<i32>(MtiJobRequest_Full::VT_R22, r22, 0);
  }
  #[inline]
  pub fn add_r23(&mut self, r23: i32) {
    self.fbb_.push_slot::<i32>(MtiJobRequest_Full::VT_R23, r23, 0);
  }
  #[inline]
  pub fn add_r24(&mut self, r24: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobRequest_Full::VT_R24, r24);
  }
  #[inline]
  pub fn add_r25(&mut self, r25: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiJobRequest_Full::VT_R25, r25);
  }
  #[inline]
  pub fn add_r26(&mut self, r26: bool) {
    self.fbb_.push_slot::<bool>(MtiJobRequest_Full::VT_R26, r26, false);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MtiJobRequest_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MtiJobRequest_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MtiJobRequest_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MtiJobRequest_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MtiJobRequest_Full");
      ds.field("r1", &self.r1());
      ds.field("r2", &self.r2());
      ds.field("r3", &self.r3());
      ds.field("r4", &self.r4());
      ds.field("r5", &self.r5());
      ds.field("r6", &self.r6());
      ds.field("r7", &self.r7());
      ds.field("r8", &self.r8());
      ds.field("r9", &self.r9());
      ds.field("r10", &self.r10());
      ds.field("r11", &self.r11());
      ds.field("r12", &self.r12());
      ds.field("r13", &self.r13());
      ds.field("r14", &self.r14());
      ds.field("jobReqEst", &self.jobReqEst());
      ds.field("r21", &self.r21());
      ds.field("r22", &self.r22());
      ds.field("r23", &self.r23());
      ds.field("r24", &self.r24());
      ds.field("r25", &self.r25());
      ds.field("r26", &self.r26());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MtiJobRequest_FullT {
  pub r1: Option<String>,
  pub r2: Option<String>,
  pub r3: i32,
  pub r4: f64,
  pub r5: f64,
  pub r6: f64,
  pub r7: f64,
  pub r8: f64,
  pub r9: f64,
  pub r10: f64,
  pub r11: f64,
  pub r12: Option<String>,
  pub r13: i32,
  pub r14: i32,
  pub jobReqEst: Option<String>,
  pub r21: i32,
  pub r22: i32,
  pub r23: i32,
  pub r24: Option<String>,
  pub r25: Option<String>,
  pub r26: bool,
}
impl Default for MtiJobRequest_FullT {
  fn default() -> Self {
    Self {
      r1: None,
      r2: None,
      r3: 0,
      r4: 0.0,
      r5: 0.0,
      r6: 0.0,
      r7: 0.0,
      r8: 0.0,
      r9: 0.0,
      r10: 0.0,
      r11: 0.0,
      r12: None,
      r13: 0,
      r14: 0,
      jobReqEst: None,
      r21: 0,
      r22: 0,
      r23: 0,
      r24: None,
      r25: None,
      r26: false,
    }
  }
}
impl MtiJobRequest_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MtiJobRequest_Full<'b>> {
    let r1 = self.r1.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let r2 = self.r2.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let r3 = self.r3;
    let r4 = self.r4;
    let r5 = self.r5;
    let r6 = self.r6;
    let r7 = self.r7;
    let r8 = self.r8;
    let r9 = self.r9;
    let r10 = self.r10;
    let r11 = self.r11;
    let r12 = self.r12.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let r13 = self.r13;
    let r14 = self.r14;
    let jobReqEst = self.jobReqEst.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let r21 = self.r21;
    let r22 = self.r22;
    let r23 = self.r23;
    let r24 = self.r24.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let r25 = self.r25.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let r26 = self.r26;
    MtiJobRequest_Full::create(_fbb, &MtiJobRequest_FullArgs{
      r1,
      r2,
      r3,
      r4,
      r5,
      r6,
      r7,
      r8,
      r9,
      r10,
      r11,
      r12,
      r13,
      r14,
      jobReqEst,
      r21,
      r22,
      r23,
      r24,
      r25,
      r26,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MtiJobRequest_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_job_request_full_unchecked`.
pub fn root_as_mti_job_request_full(buf: &[u8]) -> Result<MtiJobRequest_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MtiJobRequest_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MtiJobRequest_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mti_job_request_full_unchecked`.
pub fn size_prefixed_root_as_mti_job_request_full(buf: &[u8]) -> Result<MtiJobRequest_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MtiJobRequest_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MtiJobRequest_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_job_request_full_unchecked`.
pub fn root_as_mti_job_request_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiJobRequest_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MtiJobRequest_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MtiJobRequest_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_job_request_full_unchecked`.
pub fn size_prefixed_root_as_mti_job_request_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiJobRequest_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MtiJobRequest_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MtiJobRequest_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MtiJobRequest_Full`.
pub unsafe fn root_as_mti_job_request_full_unchecked(buf: &[u8]) -> MtiJobRequest_Full {
  flatbuffers::root_unchecked::<MtiJobRequest_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MtiJobRequest_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MtiJobRequest_Full`.
pub unsafe fn size_prefixed_root_as_mti_job_request_full_unchecked(buf: &[u8]) -> MtiJobRequest_Full {
  flatbuffers::size_prefixed_root_unchecked::<MtiJobRequest_Full>(buf)
}
pub const MTI_JOB_REQUEST_FULL_IDENTIFIER: &str = "MTIJ";

#[inline]
pub fn mti_job_request_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_JOB_REQUEST_FULL_IDENTIFIER, false)
}

#[inline]
pub fn mti_job_request_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_JOB_REQUEST_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_mti_job_request_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MtiJobRequest_Full<'a>>) {
  fbb.finish(root, Some(MTI_JOB_REQUEST_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mti_job_request_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MtiJobRequest_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(MTI_JOB_REQUEST_FULL_IDENTIFIER));
}
