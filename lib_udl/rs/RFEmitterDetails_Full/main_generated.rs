// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RFEMITTER_DETAILS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RFEMITTER_DETAILS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RFEMITTER_DETAILS_FULL_DATA_MODE_ENUM: [RFEmitterDetails_Full_dataMode_Enum; 4] = [
  RFEmitterDetails_Full_dataMode_Enum::REAL,
  RFEmitterDetails_Full_dataMode_Enum::TEST,
  RFEmitterDetails_Full_dataMode_Enum::SIMULATED,
  RFEmitterDetails_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RFEmitterDetails_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RFEmitterDetails_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RFEmitterDetails_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RFEmitterDetails_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RFEmitterDetails_Full_dataMode_Enum {
    type Output = RFEmitterDetails_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RFEmitterDetails_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RFEmitterDetails_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RFEmitterDetails_Full_dataMode_Enum {}
pub enum RFEmitterDetails_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Details for a particular RF Emitter, collected by a particular source. An RF Emitter may have multiple details records from various sources.
pub struct RFEmitterDetails_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RFEmitterDetails_Full<'a> {
  type Inner = RFEmitterDetails_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RFEmitterDetails_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDRFEMITTER: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_DESIGNATOR: flatbuffers::VOffsetT = 10;
  pub const VT_ALTNAME: flatbuffers::VOffsetT = 12;
  pub const VT_FAMILY: flatbuffers::VOffsetT = 14;
  pub const VT_PRODUCTIONFACILITYNAME: flatbuffers::VOffsetT = 16;
  pub const VT_ALTERNATEFACILITYNAME: flatbuffers::VOffsetT = 18;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 20;
  pub const VT_PRODUCTIONFACILITYLOCATIONID: flatbuffers::VOffsetT = 22;
  pub const VT_SYSTEMSENSITIVITYSTART: flatbuffers::VOffsetT = 24;
  pub const VT_SYSTEMSENSITIVITYEND: flatbuffers::VOffsetT = 26;
  pub const VT_RECEIVERTYPE: flatbuffers::VOffsetT = 28;
  pub const VT_RECEIVERSENSITIVITY: flatbuffers::VOffsetT = 30;
  pub const VT_RECEIVERBANDWIDTH: flatbuffers::VOffsetT = 32;
  pub const VT_TRANSMITTERFREQUENCY: flatbuffers::VOffsetT = 34;
  pub const VT_TRANSMITTERBANDWIDTH: flatbuffers::VOffsetT = 36;
  pub const VT_TRANSMITPOWER: flatbuffers::VOffsetT = 38;
  pub const VT_BARRAGENOISEBANDWIDTH: flatbuffers::VOffsetT = 40;
  pub const VT_DOPPLERNOISE: flatbuffers::VOffsetT = 42;
  pub const VT_DRFMINSTANTANEOUSBANDWIDTH: flatbuffers::VOffsetT = 44;
  pub const VT_NUMCHANNELS: flatbuffers::VOffsetT = 46;
  pub const VT_NUMBITS: flatbuffers::VOffsetT = 48;
  pub const VT_ANTENNASIZE: flatbuffers::VOffsetT = 50;
  pub const VT_ANTENNADIAMETER: flatbuffers::VOffsetT = 52;
  pub const VT_NOTES: flatbuffers::VOffsetT = 54;
  pub const VT_SECONDARYNOTES: flatbuffers::VOffsetT = 56;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 58;
  pub const VT_URLS: flatbuffers::VOffsetT = 60;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 62;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 64;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 66;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 68;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 70;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 72;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 74;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 76;
  pub const VT_PRODUCTIONFACILITYLOCATION: flatbuffers::VOffsetT = 78;
  pub const VT_MANUFACTURERORG: flatbuffers::VOffsetT = 80;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RFEmitterDetails_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RFEmitterDetails_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<RFEmitterDetails_Full<'bldr>> {
    let mut builder = RFEmitterDetails_FullBuilder::new(_fbb);
    builder.add_antennaDiameter(args.antennaDiameter);
    builder.add_drfmInstantaneousBandwidth(args.drfmInstantaneousBandwidth);
    builder.add_dopplerNoise(args.dopplerNoise);
    builder.add_barrageNoiseBandwidth(args.barrageNoiseBandwidth);
    builder.add_transmitPower(args.transmitPower);
    builder.add_transmitterBandwidth(args.transmitterBandwidth);
    builder.add_transmitterFrequency(args.transmitterFrequency);
    builder.add_receiverBandwidth(args.receiverBandwidth);
    builder.add_receiverSensitivity(args.receiverSensitivity);
    builder.add_systemSensitivityEnd(args.systemSensitivityEnd);
    builder.add_systemSensitivityStart(args.systemSensitivityStart);
    if let Some(x) = args.manufacturerOrg { builder.add_manufacturerOrg(x); }
    if let Some(x) = args.productionFacilityLocation { builder.add_productionFacilityLocation(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.urls { builder.add_urls(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.secondaryNotes { builder.add_secondaryNotes(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.antennaSize { builder.add_antennaSize(x); }
    builder.add_numBits(args.numBits);
    builder.add_numChannels(args.numChannels);
    if let Some(x) = args.receiverType { builder.add_receiverType(x); }
    if let Some(x) = args.productionFacilityLocationId { builder.add_productionFacilityLocationId(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.alternateFacilityName { builder.add_alternateFacilityName(x); }
    if let Some(x) = args.productionFacilityName { builder.add_productionFacilityName(x); }
    if let Some(x) = args.family { builder.add_family(x); }
    if let Some(x) = args.altName { builder.add_altName(x); }
    if let Some(x) = args.designator { builder.add_designator(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idRFEmitter { builder.add_idRFEmitter(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> RFEmitterDetails_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idRFEmitter = self.idRFEmitter().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let designator = self.designator().map(|x| {
      x.to_string()
    });
    let altName = self.altName().map(|x| {
      x.to_string()
    });
    let family = self.family().map(|x| {
      x.to_string()
    });
    let productionFacilityName = self.productionFacilityName().map(|x| {
      x.to_string()
    });
    let alternateFacilityName = self.alternateFacilityName().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let productionFacilityLocationId = self.productionFacilityLocationId().map(|x| {
      x.to_string()
    });
    let systemSensitivityStart = self.systemSensitivityStart();
    let systemSensitivityEnd = self.systemSensitivityEnd();
    let receiverType = self.receiverType().map(|x| {
      x.to_string()
    });
    let receiverSensitivity = self.receiverSensitivity();
    let receiverBandwidth = self.receiverBandwidth();
    let transmitterFrequency = self.transmitterFrequency();
    let transmitterBandwidth = self.transmitterBandwidth();
    let transmitPower = self.transmitPower();
    let barrageNoiseBandwidth = self.barrageNoiseBandwidth();
    let dopplerNoise = self.dopplerNoise();
    let drfmInstantaneousBandwidth = self.drfmInstantaneousBandwidth();
    let numChannels = self.numChannels();
    let numBits = self.numBits();
    let antennaSize = self.antennaSize().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let antennaDiameter = self.antennaDiameter();
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let secondaryNotes = self.secondaryNotes().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let urls = self.urls().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let productionFacilityLocation = self.productionFacilityLocation().map(|x| {
      x.to_string()
    });
    let manufacturerOrg = self.manufacturerOrg().map(|x| {
      x.to_string()
    });
    RFEmitterDetails_FullT {
      id,
      idRFEmitter,
      classificationMarking,
      designator,
      altName,
      family,
      productionFacilityName,
      alternateFacilityName,
      manufacturerOrgId,
      productionFacilityLocationId,
      systemSensitivityStart,
      systemSensitivityEnd,
      receiverType,
      receiverSensitivity,
      receiverBandwidth,
      transmitterFrequency,
      transmitterBandwidth,
      transmitPower,
      barrageNoiseBandwidth,
      dopplerNoise,
      drfmInstantaneousBandwidth,
      numChannels,
      numBits,
      antennaSize,
      antennaDiameter,
      notes,
      secondaryNotes,
      description,
      urls,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      productionFacilityLocation,
      manufacturerOrg,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: RFEMITTERDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_ID, None)}
  }
  /// Unique identifier of the parent RF Emitter.
  /// Example: /// Example: RFEMITTER-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idRFEmitter(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_IDRFEMITTER, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Designator of this RF Emitter.
  /// Example: /// Example: DESIGNATOR
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn designator(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_DESIGNATOR, None)}
  }
  /// Optional alternate name or alias for this RF Emitter.
  /// Example: /// Example: ALTERNATE_NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn altName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_ALTNAME, None)}
  }
  /// Family of this RF Emitter type.
  /// Example: /// Example: FAMILY
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn family(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_FAMILY, None)}
  }
  /// Name of the production facility for this RF Emitter.
  /// Example: /// Example: PRODUCTION_FACILITY
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn productionFacilityName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYNAME, None)}
  }
  /// Alternate facility name for this RF Emitter.
  /// Example: /// Example: ALTERNATE_FACILITY_NAME
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn alternateFacilityName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_ALTERNATEFACILITYNAME, None)}
  }
  /// Unique identifier of the organization which manufactures this RF Emitter.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_MANUFACTURERORGID, None)}
  }
  /// Unique identifier of the location of the production facility for this RF Emitter.
  /// Example: /// Example: PRODUCTIONFACILITYLOCATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn productionFacilityLocationId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYLOCATIONID, None)}
  }
  /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. Start sensitivity range, in dBm.
  /// Example: /// Example: 50.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn systemSensitivityStart(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_SYSTEMSENSITIVITYSTART, Some(0.0)).unwrap()}
  }
  /// Receiver sensitivity is the lowest power level at which the receiver can detect an RF signal and demodulate data. Sensitivity is purely a receiver specification and is independent of the transmitter. End sensitivity range, in dBm.
  /// Example: /// Example: 150.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn systemSensitivityEnd(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_SYSTEMSENSITIVITYEND, Some(0.0)).unwrap()}
  }
  /// Type or name of receiver.
  /// Example: /// Example: RECEIVER_TYPE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn receiverType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_RECEIVERTYPE, None)}
  }
  /// Receiver sensitivity in dBm.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn receiverSensitivity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_RECEIVERSENSITIVITY, Some(0.0)).unwrap()}
  }
  /// Receiver bandwidth in Mhz.
  /// Example: /// Example: 15.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn receiverBandwidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_RECEIVERBANDWIDTH, Some(0.0)).unwrap()}
  }
  /// Transmitter frequency in Mhz.
  /// Example: /// Example: 105.9
  /// Constraints: No constraints specified.
  #[inline]
  pub fn transmitterFrequency(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_TRANSMITTERFREQUENCY, Some(0.0)).unwrap()}
  }
  /// Transmitter bandwidth in Mhz.
  /// Example: /// Example: 0.125
  /// Constraints: No constraints specified.
  #[inline]
  pub fn transmitterBandwidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_TRANSMITTERBANDWIDTH, Some(0.0)).unwrap()}
  }
  /// Transmit power in Watts.
  /// Example: /// Example: 100.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn transmitPower(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_TRANSMITPOWER, Some(0.0)).unwrap()}
  }
  /// Barrage noise bandwidth in Mhz.
  /// Example: /// Example: 5.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn barrageNoiseBandwidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_BARRAGENOISEBANDWIDTH, Some(0.0)).unwrap()}
  }
  /// Doppler noise value in Mhz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dopplerNoise(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_DOPPLERNOISE, Some(0.0)).unwrap()}
  }
  /// Digital Form Radio Memory instantaneous bandwidth in Mhz.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn drfmInstantaneousBandwidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_DRFMINSTANTANEOUSBANDWIDTH, Some(0.0)).unwrap()}
  }
  /// Number of channels.
  /// Example: /// Example: 10
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numChannels(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RFEmitterDetails_Full::VT_NUMCHANNELS, Some(0)).unwrap()}
  }
  /// Number of bits.
  /// Example: /// Example: 256
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numBits(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RFEmitterDetails_Full::VT_NUMBITS, Some(0)).unwrap()}
  }
  /// Array with 1-2 values specifying the length and width (for rectangular) and just length for dipole antennas in meters.
  /// Example: /// Example: [1.1, 2.2]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn antennaSize(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(RFEmitterDetails_Full::VT_ANTENNASIZE, None)}
  }
  /// For parabolic/dish antennas, the diameter of the antenna in meters.
  /// Example: /// Example: 20.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn antennaDiameter(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFEmitterDetails_Full::VT_ANTENNADIAMETER, Some(0.0)).unwrap()}
  }
  /// Notes on the RF Emitter.
  /// Example: /// Example: NOTES
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_NOTES, None)}
  }
  /// Secondary notes on the RF Emitter.
  /// Example: /// Example: MORE_NOTES
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn secondaryNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_SECONDARYNOTES, None)}
  }
  /// Detailed description of the RF Emitter.
  /// Example: /// Example: DESCRIPTION
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_DESCRIPTION, None)}
  }
  /// Array of URLs containing additional information on this RF Emitter.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn urls(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(RFEmitterDetails_Full::VT_URLS, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> RFEmitterDetails_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RFEmitterDetails_Full_dataMode_Enum>(RFEmitterDetails_Full::VT_DATAMODE, Some(RFEmitterDetails_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_UPDATEDBY, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn productionFacilityLocation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYLOCATION, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn manufacturerOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFEmitterDetails_Full::VT_MANUFACTURERORG, None)}
  }
}

impl flatbuffers::Verifiable for RFEmitterDetails_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idRFEmitter", Self::VT_IDRFEMITTER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("designator", Self::VT_DESIGNATOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altName", Self::VT_ALTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("family", Self::VT_FAMILY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("productionFacilityName", Self::VT_PRODUCTIONFACILITYNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("alternateFacilityName", Self::VT_ALTERNATEFACILITYNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("productionFacilityLocationId", Self::VT_PRODUCTIONFACILITYLOCATIONID, false)?
     .visit_field::<f64>("systemSensitivityStart", Self::VT_SYSTEMSENSITIVITYSTART, false)?
     .visit_field::<f64>("systemSensitivityEnd", Self::VT_SYSTEMSENSITIVITYEND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receiverType", Self::VT_RECEIVERTYPE, false)?
     .visit_field::<f64>("receiverSensitivity", Self::VT_RECEIVERSENSITIVITY, false)?
     .visit_field::<f64>("receiverBandwidth", Self::VT_RECEIVERBANDWIDTH, false)?
     .visit_field::<f64>("transmitterFrequency", Self::VT_TRANSMITTERFREQUENCY, false)?
     .visit_field::<f64>("transmitterBandwidth", Self::VT_TRANSMITTERBANDWIDTH, false)?
     .visit_field::<f64>("transmitPower", Self::VT_TRANSMITPOWER, false)?
     .visit_field::<f64>("barrageNoiseBandwidth", Self::VT_BARRAGENOISEBANDWIDTH, false)?
     .visit_field::<f64>("dopplerNoise", Self::VT_DOPPLERNOISE, false)?
     .visit_field::<f64>("drfmInstantaneousBandwidth", Self::VT_DRFMINSTANTANEOUSBANDWIDTH, false)?
     .visit_field::<i32>("numChannels", Self::VT_NUMCHANNELS, false)?
     .visit_field::<i32>("numBits", Self::VT_NUMBITS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("antennaSize", Self::VT_ANTENNASIZE, false)?
     .visit_field::<f64>("antennaDiameter", Self::VT_ANTENNADIAMETER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("secondaryNotes", Self::VT_SECONDARYNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("urls", Self::VT_URLS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<RFEmitterDetails_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("productionFacilityLocation", Self::VT_PRODUCTIONFACILITYLOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrg", Self::VT_MANUFACTURERORG, false)?
     .finish();
    Ok(())
  }
}
pub struct RFEmitterDetails_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idRFEmitter: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub designator: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub family: Option<flatbuffers::WIPOffset<&'a str>>,
    pub productionFacilityName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub alternateFacilityName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub productionFacilityLocationId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub systemSensitivityStart: f64,
    pub systemSensitivityEnd: f64,
    pub receiverType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receiverSensitivity: f64,
    pub receiverBandwidth: f64,
    pub transmitterFrequency: f64,
    pub transmitterBandwidth: f64,
    pub transmitPower: f64,
    pub barrageNoiseBandwidth: f64,
    pub dopplerNoise: f64,
    pub drfmInstantaneousBandwidth: f64,
    pub numChannels: i32,
    pub numBits: i32,
    pub antennaSize: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub antennaDiameter: f64,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub secondaryNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub urls: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: RFEmitterDetails_Full_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub productionFacilityLocation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrg: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RFEmitterDetails_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    RFEmitterDetails_FullArgs {
      id: None,
      idRFEmitter: None,
      classificationMarking: None,
      designator: None,
      altName: None,
      family: None,
      productionFacilityName: None,
      alternateFacilityName: None,
      manufacturerOrgId: None,
      productionFacilityLocationId: None,
      systemSensitivityStart: 0.0,
      systemSensitivityEnd: 0.0,
      receiverType: None,
      receiverSensitivity: 0.0,
      receiverBandwidth: 0.0,
      transmitterFrequency: 0.0,
      transmitterBandwidth: 0.0,
      transmitPower: 0.0,
      barrageNoiseBandwidth: 0.0,
      dopplerNoise: 0.0,
      drfmInstantaneousBandwidth: 0.0,
      numChannels: 0,
      numBits: 0,
      antennaSize: None,
      antennaDiameter: 0.0,
      notes: None,
      secondaryNotes: None,
      description: None,
      urls: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: RFEmitterDetails_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      productionFacilityLocation: None,
      manufacturerOrg: None,
    }
  }
}

pub struct RFEmitterDetails_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RFEmitterDetails_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_idRFEmitter(&mut self, idRFEmitter: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_IDRFEMITTER, idRFEmitter);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_designator(&mut self, designator: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_DESIGNATOR, designator);
  }
  #[inline]
  pub fn add_altName(&mut self, altName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_ALTNAME, altName);
  }
  #[inline]
  pub fn add_family(&mut self, family: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_FAMILY, family);
  }
  #[inline]
  pub fn add_productionFacilityName(&mut self, productionFacilityName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYNAME, productionFacilityName);
  }
  #[inline]
  pub fn add_alternateFacilityName(&mut self, alternateFacilityName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_ALTERNATEFACILITYNAME, alternateFacilityName);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_productionFacilityLocationId(&mut self, productionFacilityLocationId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYLOCATIONID, productionFacilityLocationId);
  }
  #[inline]
  pub fn add_systemSensitivityStart(&mut self, systemSensitivityStart: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_SYSTEMSENSITIVITYSTART, systemSensitivityStart, 0.0);
  }
  #[inline]
  pub fn add_systemSensitivityEnd(&mut self, systemSensitivityEnd: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_SYSTEMSENSITIVITYEND, systemSensitivityEnd, 0.0);
  }
  #[inline]
  pub fn add_receiverType(&mut self, receiverType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_RECEIVERTYPE, receiverType);
  }
  #[inline]
  pub fn add_receiverSensitivity(&mut self, receiverSensitivity: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_RECEIVERSENSITIVITY, receiverSensitivity, 0.0);
  }
  #[inline]
  pub fn add_receiverBandwidth(&mut self, receiverBandwidth: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_RECEIVERBANDWIDTH, receiverBandwidth, 0.0);
  }
  #[inline]
  pub fn add_transmitterFrequency(&mut self, transmitterFrequency: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_TRANSMITTERFREQUENCY, transmitterFrequency, 0.0);
  }
  #[inline]
  pub fn add_transmitterBandwidth(&mut self, transmitterBandwidth: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_TRANSMITTERBANDWIDTH, transmitterBandwidth, 0.0);
  }
  #[inline]
  pub fn add_transmitPower(&mut self, transmitPower: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_TRANSMITPOWER, transmitPower, 0.0);
  }
  #[inline]
  pub fn add_barrageNoiseBandwidth(&mut self, barrageNoiseBandwidth: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_BARRAGENOISEBANDWIDTH, barrageNoiseBandwidth, 0.0);
  }
  #[inline]
  pub fn add_dopplerNoise(&mut self, dopplerNoise: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_DOPPLERNOISE, dopplerNoise, 0.0);
  }
  #[inline]
  pub fn add_drfmInstantaneousBandwidth(&mut self, drfmInstantaneousBandwidth: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_DRFMINSTANTANEOUSBANDWIDTH, drfmInstantaneousBandwidth, 0.0);
  }
  #[inline]
  pub fn add_numChannels(&mut self, numChannels: i32) {
    self.fbb_.push_slot::<i32>(RFEmitterDetails_Full::VT_NUMCHANNELS, numChannels, 0);
  }
  #[inline]
  pub fn add_numBits(&mut self, numBits: i32) {
    self.fbb_.push_slot::<i32>(RFEmitterDetails_Full::VT_NUMBITS, numBits, 0);
  }
  #[inline]
  pub fn add_antennaSize(&mut self, antennaSize: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_ANTENNASIZE, antennaSize);
  }
  #[inline]
  pub fn add_antennaDiameter(&mut self, antennaDiameter: f64) {
    self.fbb_.push_slot::<f64>(RFEmitterDetails_Full::VT_ANTENNADIAMETER, antennaDiameter, 0.0);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_secondaryNotes(&mut self, secondaryNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_SECONDARYNOTES, secondaryNotes);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_urls(&mut self, urls: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_URLS, urls);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: RFEmitterDetails_Full_dataMode_Enum) {
    self.fbb_.push_slot::<RFEmitterDetails_Full_dataMode_Enum>(RFEmitterDetails_Full::VT_DATAMODE, dataMode, RFEmitterDetails_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_productionFacilityLocation(&mut self, productionFacilityLocation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_PRODUCTIONFACILITYLOCATION, productionFacilityLocation);
  }
  #[inline]
  pub fn add_manufacturerOrg(&mut self, manufacturerOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFEmitterDetails_Full::VT_MANUFACTURERORG, manufacturerOrg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RFEmitterDetails_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RFEmitterDetails_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RFEmitterDetails_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RFEmitterDetails_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RFEmitterDetails_Full");
      ds.field("id", &self.id());
      ds.field("idRFEmitter", &self.idRFEmitter());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("designator", &self.designator());
      ds.field("altName", &self.altName());
      ds.field("family", &self.family());
      ds.field("productionFacilityName", &self.productionFacilityName());
      ds.field("alternateFacilityName", &self.alternateFacilityName());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("productionFacilityLocationId", &self.productionFacilityLocationId());
      ds.field("systemSensitivityStart", &self.systemSensitivityStart());
      ds.field("systemSensitivityEnd", &self.systemSensitivityEnd());
      ds.field("receiverType", &self.receiverType());
      ds.field("receiverSensitivity", &self.receiverSensitivity());
      ds.field("receiverBandwidth", &self.receiverBandwidth());
      ds.field("transmitterFrequency", &self.transmitterFrequency());
      ds.field("transmitterBandwidth", &self.transmitterBandwidth());
      ds.field("transmitPower", &self.transmitPower());
      ds.field("barrageNoiseBandwidth", &self.barrageNoiseBandwidth());
      ds.field("dopplerNoise", &self.dopplerNoise());
      ds.field("drfmInstantaneousBandwidth", &self.drfmInstantaneousBandwidth());
      ds.field("numChannels", &self.numChannels());
      ds.field("numBits", &self.numBits());
      ds.field("antennaSize", &self.antennaSize());
      ds.field("antennaDiameter", &self.antennaDiameter());
      ds.field("notes", &self.notes());
      ds.field("secondaryNotes", &self.secondaryNotes());
      ds.field("description", &self.description());
      ds.field("urls", &self.urls());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("productionFacilityLocation", &self.productionFacilityLocation());
      ds.field("manufacturerOrg", &self.manufacturerOrg());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RFEmitterDetails_FullT {
  pub id: Option<String>,
  pub idRFEmitter: Option<String>,
  pub classificationMarking: Option<String>,
  pub designator: Option<String>,
  pub altName: Option<String>,
  pub family: Option<String>,
  pub productionFacilityName: Option<String>,
  pub alternateFacilityName: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub productionFacilityLocationId: Option<String>,
  pub systemSensitivityStart: f64,
  pub systemSensitivityEnd: f64,
  pub receiverType: Option<String>,
  pub receiverSensitivity: f64,
  pub receiverBandwidth: f64,
  pub transmitterFrequency: f64,
  pub transmitterBandwidth: f64,
  pub transmitPower: f64,
  pub barrageNoiseBandwidth: f64,
  pub dopplerNoise: f64,
  pub drfmInstantaneousBandwidth: f64,
  pub numChannels: i32,
  pub numBits: i32,
  pub antennaSize: Option<Vec<String>>,
  pub antennaDiameter: f64,
  pub notes: Option<String>,
  pub secondaryNotes: Option<String>,
  pub description: Option<String>,
  pub urls: Option<Vec<String>>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: RFEmitterDetails_Full_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub productionFacilityLocation: Option<String>,
  pub manufacturerOrg: Option<String>,
}
impl Default for RFEmitterDetails_FullT {
  fn default() -> Self {
    Self {
      id: None,
      idRFEmitter: None,
      classificationMarking: None,
      designator: None,
      altName: None,
      family: None,
      productionFacilityName: None,
      alternateFacilityName: None,
      manufacturerOrgId: None,
      productionFacilityLocationId: None,
      systemSensitivityStart: 0.0,
      systemSensitivityEnd: 0.0,
      receiverType: None,
      receiverSensitivity: 0.0,
      receiverBandwidth: 0.0,
      transmitterFrequency: 0.0,
      transmitterBandwidth: 0.0,
      transmitPower: 0.0,
      barrageNoiseBandwidth: 0.0,
      dopplerNoise: 0.0,
      drfmInstantaneousBandwidth: 0.0,
      numChannels: 0,
      numBits: 0,
      antennaSize: None,
      antennaDiameter: 0.0,
      notes: None,
      secondaryNotes: None,
      description: None,
      urls: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: RFEmitterDetails_Full_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      productionFacilityLocation: None,
      manufacturerOrg: None,
    }
  }
}
impl RFEmitterDetails_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RFEmitterDetails_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idRFEmitter = self.idRFEmitter.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let designator = self.designator.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altName = self.altName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let family = self.family.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let productionFacilityName = self.productionFacilityName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let alternateFacilityName = self.alternateFacilityName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let productionFacilityLocationId = self.productionFacilityLocationId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let systemSensitivityStart = self.systemSensitivityStart;
    let systemSensitivityEnd = self.systemSensitivityEnd;
    let receiverType = self.receiverType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receiverSensitivity = self.receiverSensitivity;
    let receiverBandwidth = self.receiverBandwidth;
    let transmitterFrequency = self.transmitterFrequency;
    let transmitterBandwidth = self.transmitterBandwidth;
    let transmitPower = self.transmitPower;
    let barrageNoiseBandwidth = self.barrageNoiseBandwidth;
    let dopplerNoise = self.dopplerNoise;
    let drfmInstantaneousBandwidth = self.drfmInstantaneousBandwidth;
    let numChannels = self.numChannels;
    let numBits = self.numBits;
    let antennaSize = self.antennaSize.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let antennaDiameter = self.antennaDiameter;
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let secondaryNotes = self.secondaryNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let urls = self.urls.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let productionFacilityLocation = self.productionFacilityLocation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrg = self.manufacturerOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    RFEmitterDetails_Full::create(_fbb, &RFEmitterDetails_FullArgs{
      id,
      idRFEmitter,
      classificationMarking,
      designator,
      altName,
      family,
      productionFacilityName,
      alternateFacilityName,
      manufacturerOrgId,
      productionFacilityLocationId,
      systemSensitivityStart,
      systemSensitivityEnd,
      receiverType,
      receiverSensitivity,
      receiverBandwidth,
      transmitterFrequency,
      transmitterBandwidth,
      transmitPower,
      barrageNoiseBandwidth,
      dopplerNoise,
      drfmInstantaneousBandwidth,
      numChannels,
      numBits,
      antennaSize,
      antennaDiameter,
      notes,
      secondaryNotes,
      description,
      urls,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      productionFacilityLocation,
      manufacturerOrg,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RFEmitterDetails_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfemitter_details_full_unchecked`.
pub fn root_as_rfemitter_details_full(buf: &[u8]) -> Result<RFEmitterDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RFEmitterDetails_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RFEmitterDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_rfemitter_details_full_unchecked`.
pub fn size_prefixed_root_as_rfemitter_details_full(buf: &[u8]) -> Result<RFEmitterDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RFEmitterDetails_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RFEmitterDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfemitter_details_full_unchecked`.
pub fn root_as_rfemitter_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFEmitterDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RFEmitterDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RFEmitterDetails_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfemitter_details_full_unchecked`.
pub fn size_prefixed_root_as_rfemitter_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFEmitterDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RFEmitterDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RFEmitterDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RFEmitterDetails_Full`.
pub unsafe fn root_as_rfemitter_details_full_unchecked(buf: &[u8]) -> RFEmitterDetails_Full {
  flatbuffers::root_unchecked::<RFEmitterDetails_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RFEmitterDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RFEmitterDetails_Full`.
pub unsafe fn size_prefixed_root_as_rfemitter_details_full_unchecked(buf: &[u8]) -> RFEmitterDetails_Full {
  flatbuffers::size_prefixed_root_unchecked::<RFEmitterDetails_Full>(buf)
}
pub const RFEMITTER_DETAILS_FULL_IDENTIFIER: &str = "RFEM";

#[inline]
pub fn rfemitter_details_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFEMITTER_DETAILS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn rfemitter_details_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFEMITTER_DETAILS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_rfemitter_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RFEmitterDetails_Full<'a>>) {
  fbb.finish(root, Some(RFEMITTER_DETAILS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_rfemitter_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RFEmitterDetails_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(RFEMITTER_DETAILS_FULL_IDENTIFIER));
}
