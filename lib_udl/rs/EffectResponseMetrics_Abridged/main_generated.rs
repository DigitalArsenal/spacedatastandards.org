// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum EffectResponseMetrics_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// List of COA metrics associated with this effect response.
pub struct EffectResponseMetrics_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EffectResponseMetrics_Abridged<'a> {
  type Inner = EffectResponseMetrics_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EffectResponseMetrics_Abridged<'a> {
  pub const VT_METRICTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_DOMAINVALUE: flatbuffers::VOffsetT = 6;
  pub const VT_RELATIVEVALUE: flatbuffers::VOffsetT = 8;
  pub const VT_PROVENANCE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EffectResponseMetrics_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EffectResponseMetrics_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<EffectResponseMetrics_Abridged<'bldr>> {
    let mut builder = EffectResponseMetrics_AbridgedBuilder::new(_fbb);
    builder.add_relativeValue(args.relativeValue);
    builder.add_domainValue(args.domainValue);
    if let Some(x) = args.provenance { builder.add_provenance(x); }
    if let Some(x) = args.metricType { builder.add_metricType(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> EffectResponseMetrics_AbridgedT {
    let metricType = self.metricType().map(|x| {
      x.to_string()
    });
    let domainValue = self.domainValue();
    let relativeValue = self.relativeValue();
    let provenance = self.provenance().map(|x| {
      x.to_string()
    });
    EffectResponseMetrics_AbridgedT {
      metricType,
      domainValue,
      relativeValue,
      provenance,
    }
  }

  /// The type of the metric (e.g. CollateralDamage, GoalAchievement, OpportunityCost, Timeliness, Unavailable, etc.).
  /// Example: /// Example: GoalAchievement
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn metricType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseMetrics_Abridged::VT_METRICTYPE, None)}
  }
  /// The metric score specific to its domain.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn domainValue(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseMetrics_Abridged::VT_DOMAINVALUE, Some(0.0)).unwrap()}
  }
  /// The metric score adjusted to be relative and comparable to other domains.
  /// Example: /// Example: 10.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn relativeValue(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EffectResponseMetrics_Abridged::VT_RELATIVEVALUE, Some(0.0)).unwrap()}
  }
  /// The metric that was used to score this task.
  /// Example: /// Example: Example metric
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn provenance(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EffectResponseMetrics_Abridged::VT_PROVENANCE, None)}
  }
}

impl flatbuffers::Verifiable for EffectResponseMetrics_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("metricType", Self::VT_METRICTYPE, false)?
     .visit_field::<f64>("domainValue", Self::VT_DOMAINVALUE, false)?
     .visit_field::<f64>("relativeValue", Self::VT_RELATIVEVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("provenance", Self::VT_PROVENANCE, false)?
     .finish();
    Ok(())
  }
}
pub struct EffectResponseMetrics_AbridgedArgs<'a> {
    pub metricType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub domainValue: f64,
    pub relativeValue: f64,
    pub provenance: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EffectResponseMetrics_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    EffectResponseMetrics_AbridgedArgs {
      metricType: None,
      domainValue: 0.0,
      relativeValue: 0.0,
      provenance: None,
    }
  }
}

pub struct EffectResponseMetrics_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EffectResponseMetrics_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_metricType(&mut self, metricType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseMetrics_Abridged::VT_METRICTYPE, metricType);
  }
  #[inline]
  pub fn add_domainValue(&mut self, domainValue: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseMetrics_Abridged::VT_DOMAINVALUE, domainValue, 0.0);
  }
  #[inline]
  pub fn add_relativeValue(&mut self, relativeValue: f64) {
    self.fbb_.push_slot::<f64>(EffectResponseMetrics_Abridged::VT_RELATIVEVALUE, relativeValue, 0.0);
  }
  #[inline]
  pub fn add_provenance(&mut self, provenance: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EffectResponseMetrics_Abridged::VT_PROVENANCE, provenance);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EffectResponseMetrics_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EffectResponseMetrics_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EffectResponseMetrics_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EffectResponseMetrics_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EffectResponseMetrics_Abridged");
      ds.field("metricType", &self.metricType());
      ds.field("domainValue", &self.domainValue());
      ds.field("relativeValue", &self.relativeValue());
      ds.field("provenance", &self.provenance());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EffectResponseMetrics_AbridgedT {
  pub metricType: Option<String>,
  pub domainValue: f64,
  pub relativeValue: f64,
  pub provenance: Option<String>,
}
impl Default for EffectResponseMetrics_AbridgedT {
  fn default() -> Self {
    Self {
      metricType: None,
      domainValue: 0.0,
      relativeValue: 0.0,
      provenance: None,
    }
  }
}
impl EffectResponseMetrics_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EffectResponseMetrics_Abridged<'b>> {
    let metricType = self.metricType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let domainValue = self.domainValue;
    let relativeValue = self.relativeValue;
    let provenance = self.provenance.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EffectResponseMetrics_Abridged::create(_fbb, &EffectResponseMetrics_AbridgedArgs{
      metricType,
      domainValue,
      relativeValue,
      provenance,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EffectResponseMetrics_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_metrics_abridged_unchecked`.
pub fn root_as_effect_response_metrics_abridged(buf: &[u8]) -> Result<EffectResponseMetrics_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EffectResponseMetrics_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EffectResponseMetrics_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_effect_response_metrics_abridged_unchecked`.
pub fn size_prefixed_root_as_effect_response_metrics_abridged(buf: &[u8]) -> Result<EffectResponseMetrics_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EffectResponseMetrics_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EffectResponseMetrics_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_metrics_abridged_unchecked`.
pub fn root_as_effect_response_metrics_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectResponseMetrics_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EffectResponseMetrics_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EffectResponseMetrics_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_effect_response_metrics_abridged_unchecked`.
pub fn size_prefixed_root_as_effect_response_metrics_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EffectResponseMetrics_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EffectResponseMetrics_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EffectResponseMetrics_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EffectResponseMetrics_Abridged`.
pub unsafe fn root_as_effect_response_metrics_abridged_unchecked(buf: &[u8]) -> EffectResponseMetrics_Abridged {
  flatbuffers::root_unchecked::<EffectResponseMetrics_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EffectResponseMetrics_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EffectResponseMetrics_Abridged`.
pub unsafe fn size_prefixed_root_as_effect_response_metrics_abridged_unchecked(buf: &[u8]) -> EffectResponseMetrics_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<EffectResponseMetrics_Abridged>(buf)
}
pub const EFFECT_RESPONSE_METRICS_ABRIDGED_IDENTIFIER: &str = "EFFE";

#[inline]
pub fn effect_response_metrics_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_RESPONSE_METRICS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn effect_response_metrics_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EFFECT_RESPONSE_METRICS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_effect_response_metrics_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EffectResponseMetrics_Abridged<'a>>) {
  fbb.finish(root, Some(EFFECT_RESPONSE_METRICS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_effect_response_metrics_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EffectResponseMetrics_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(EFFECT_RESPONSE_METRICS_ABRIDGED_IDENTIFIER));
}
