// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SPACE_ENV_OBSERVATION_ABRIDGED_SEN_REFERENCE_FRAME_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SPACE_ENV_OBSERVATION_ABRIDGED_SEN_REFERENCE_FRAME_ENUM: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SPACE_ENV_OBSERVATION_ABRIDGED_SEN_REFERENCE_FRAME_ENUM: [SpaceEnvObservation_Abridged_senReferenceFrame_Enum; 6] = [
  SpaceEnvObservation_Abridged_senReferenceFrame_Enum::J2000,
  SpaceEnvObservation_Abridged_senReferenceFrame_Enum::EFG_TDR,
  SpaceEnvObservation_Abridged_senReferenceFrame_Enum::ECR_ECEF,
  SpaceEnvObservation_Abridged_senReferenceFrame_Enum::TEME,
  SpaceEnvObservation_Abridged_senReferenceFrame_Enum::ITRF,
  SpaceEnvObservation_Abridged_senReferenceFrame_Enum::GCRF,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SpaceEnvObservation_Abridged_senReferenceFrame_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SpaceEnvObservation_Abridged_senReferenceFrame_Enum {
  /// No description available.
  pub const J2000: Self = Self(0);
  /// No description available.
  pub const EFG_TDR: Self = Self(1);
  /// No description available.
  pub const ECR_ECEF: Self = Self(2);
  /// No description available.
  pub const TEME: Self = Self(3);
  /// No description available.
  pub const ITRF: Self = Self(4);
  /// No description available.
  pub const GCRF: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::J2000,
    Self::EFG_TDR,
    Self::ECR_ECEF,
    Self::TEME,
    Self::ITRF,
    Self::GCRF,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::J2000 => Some("J2000"),
      Self::EFG_TDR => Some("EFG_TDR"),
      Self::ECR_ECEF => Some("ECR_ECEF"),
      Self::TEME => Some("TEME"),
      Self::ITRF => Some("ITRF"),
      Self::GCRF => Some("GCRF"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SpaceEnvObservation_Abridged_senReferenceFrame_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SpaceEnvObservation_Abridged_senReferenceFrame_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SpaceEnvObservation_Abridged_senReferenceFrame_Enum {
    type Output = SpaceEnvObservation_Abridged_senReferenceFrame_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SpaceEnvObservation_Abridged_senReferenceFrame_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SpaceEnvObservation_Abridged_senReferenceFrame_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SpaceEnvObservation_Abridged_senReferenceFrame_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SPACE_ENV_OBSERVATION_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SPACE_ENV_OBSERVATION_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SPACE_ENV_OBSERVATION_ABRIDGED_DATA_MODE_ENUM: [SpaceEnvObservation_Abridged_dataMode_Enum; 4] = [
  SpaceEnvObservation_Abridged_dataMode_Enum::REAL,
  SpaceEnvObservation_Abridged_dataMode_Enum::TEST,
  SpaceEnvObservation_Abridged_dataMode_Enum::SIMULATED,
  SpaceEnvObservation_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SpaceEnvObservation_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SpaceEnvObservation_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SpaceEnvObservation_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SpaceEnvObservation_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SpaceEnvObservation_Abridged_dataMode_Enum {
    type Output = SpaceEnvObservation_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SpaceEnvObservation_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SpaceEnvObservation_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SpaceEnvObservation_Abridged_dataMode_Enum {}
pub enum SpaceEnvObservation_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// SpaceEnvObservation data.
pub struct SpaceEnvObservation_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SpaceEnvObservation_Abridged<'a> {
  type Inner = SpaceEnvObservation_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SpaceEnvObservation_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_MSGTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_GENSYSTEM: flatbuffers::VOffsetT = 10;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 12;
  pub const VT_DATATYPE: flatbuffers::VOffsetT = 14;
  pub const VT_GENTIME: flatbuffers::VOffsetT = 16;
  pub const VT_FORECAST: flatbuffers::VOffsetT = 18;
  pub const VT_DERIVED: flatbuffers::VOffsetT = 20;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 22;
  pub const VT_SATNO: flatbuffers::VOffsetT = 24;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 26;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 28;
  pub const VT_ORIGSENSORID: flatbuffers::VOffsetT = 30;
  pub const VT_OBSERVATORYTYPE: flatbuffers::VOffsetT = 32;
  pub const VT_OBSERVATORYNAME: flatbuffers::VOffsetT = 34;
  pub const VT_OBSERVATORYNOTES: flatbuffers::VOffsetT = 36;
  pub const VT_INSTRUMENTTYPE: flatbuffers::VOffsetT = 38;
  pub const VT_LAT: flatbuffers::VOffsetT = 40;
  pub const VT_LON: flatbuffers::VOffsetT = 42;
  pub const VT_ALT: flatbuffers::VOffsetT = 44;
  pub const VT_SENREFERENCEFRAME: flatbuffers::VOffsetT = 46;
  pub const VT_SENPOS: flatbuffers::VOffsetT = 48;
  pub const VT_SENVEL: flatbuffers::VOffsetT = 50;
  pub const VT_MEASTYPE: flatbuffers::VOffsetT = 52;
  pub const VT_SENENERGYLEVEL: flatbuffers::VOffsetT = 54;
  pub const VT_OBSETID: flatbuffers::VOffsetT = 56;
  pub const VT_PARTICLETYPE: flatbuffers::VOffsetT = 58;
  pub const VT_OBTIME: flatbuffers::VOffsetT = 60;
  pub const VT_SEOLIST: flatbuffers::VOffsetT = 62;
  pub const VT_QUALITY: flatbuffers::VOffsetT = 64;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 66;
  pub const VT_DESCRIPTOR: flatbuffers::VOffsetT = 68;
  pub const VT_SRCTYPS: flatbuffers::VOffsetT = 70;
  pub const VT_SRCIDS: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 74;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 76;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 78;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 80;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 82;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 84;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SpaceEnvObservation_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SpaceEnvObservation_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<SpaceEnvObservation_Abridged<'bldr>> {
    let mut builder = SpaceEnvObservation_AbridgedBuilder::new(_fbb);
    builder.add_alt(args.alt);
    builder.add_lon(args.lon);
    builder.add_lat(args.lat);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.srcIds { builder.add_srcIds(x); }
    if let Some(x) = args.srcTyps { builder.add_srcTyps(x); }
    if let Some(x) = args.descriptor { builder.add_descriptor(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    if let Some(x) = args.quality { builder.add_quality(x); }
    if let Some(x) = args.seoList { builder.add_seoList(x); }
    if let Some(x) = args.obTime { builder.add_obTime(x); }
    if let Some(x) = args.particleType { builder.add_particleType(x); }
    if let Some(x) = args.obSetId { builder.add_obSetId(x); }
    if let Some(x) = args.senEnergyLevel { builder.add_senEnergyLevel(x); }
    if let Some(x) = args.measType { builder.add_measType(x); }
    if let Some(x) = args.senVel { builder.add_senVel(x); }
    if let Some(x) = args.senPos { builder.add_senPos(x); }
    if let Some(x) = args.instrumentType { builder.add_instrumentType(x); }
    if let Some(x) = args.observatoryNotes { builder.add_observatoryNotes(x); }
    if let Some(x) = args.observatoryName { builder.add_observatoryName(x); }
    if let Some(x) = args.observatoryType { builder.add_observatoryType(x); }
    if let Some(x) = args.origSensorId { builder.add_origSensorId(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.genTime { builder.add_genTime(x); }
    if let Some(x) = args.dataType { builder.add_dataType(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.genSystem { builder.add_genSystem(x); }
    if let Some(x) = args.msgType { builder.add_msgType(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_senReferenceFrame(args.senReferenceFrame);
    builder.add_derived(args.derived);
    builder.add_forecast(args.forecast);
    builder.finish()
  }

  pub fn unpack(&self) -> SpaceEnvObservation_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let msgType = self.msgType().map(|x| {
      x.to_string()
    });
    let genSystem = self.genSystem().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let dataType = self.dataType().map(|x| {
      x.to_string()
    });
    let genTime = self.genTime().map(|x| {
      x.to_string()
    });
    let forecast = self.forecast();
    let derived = self.derived();
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let origSensorId = self.origSensorId().map(|x| {
      x.to_string()
    });
    let observatoryType = self.observatoryType().map(|x| {
      x.to_string()
    });
    let observatoryName = self.observatoryName().map(|x| {
      x.to_string()
    });
    let observatoryNotes = self.observatoryNotes().map(|x| {
      x.to_string()
    });
    let instrumentType = self.instrumentType().map(|x| {
      x.to_string()
    });
    let lat = self.lat();
    let lon = self.lon();
    let alt = self.alt();
    let senReferenceFrame = self.senReferenceFrame();
    let senPos = self.senPos().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let senVel = self.senVel().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let measType = self.measType().map(|x| {
      x.to_string()
    });
    let senEnergyLevel = self.senEnergyLevel().map(|x| {
      x.to_string()
    });
    let obSetId = self.obSetId().map(|x| {
      x.to_string()
    });
    let particleType = self.particleType().map(|x| {
      x.to_string()
    });
    let obTime = self.obTime().map(|x| {
      x.to_string()
    });
    let seoList = self.seoList().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let quality = self.quality().map(|x| {
      x.to_string()
    });
    let description = self.description().map(|x| {
      x.to_string()
    });
    let descriptor = self.descriptor().map(|x| {
      x.to_string()
    });
    let srcTyps = self.srcTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcIds = self.srcIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    SpaceEnvObservation_AbridgedT {
      id,
      classificationMarking,
      msgType,
      genSystem,
      externalId,
      dataType,
      genTime,
      forecast,
      derived,
      idOnOrbit,
      satNo,
      origObjectId,
      idSensor,
      origSensorId,
      observatoryType,
      observatoryName,
      observatoryNotes,
      instrumentType,
      lat,
      lon,
      alt,
      senReferenceFrame,
      senPos,
      senVel,
      measType,
      senEnergyLevel,
      obSetId,
      particleType,
      obTime,
      seoList,
      quality,
      description,
      descriptor,
      srcTyps,
      srcIds,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: f13f82b8-5d2a-407a-b3f3-1fe30ca79eae
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The type of message associated with this record.
  /// Example: /// Example: SODM
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn msgType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_MSGTYPE, None)}
  }
  /// The external system which generated the message, if applicable.
  /// Example: /// Example: System Name
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn genSystem(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_GENSYSTEM, None)}
  }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: fe4ad5dc-0128-4ce8-b09c-0b404322025e
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_EXTERNALID, None)}
  }
  /// The data type (e.g. AP, AURORAL FLUX, ECP, KINDEX, PROPAGATED SOLAR WIND, XRAY FLUX, etc.) of observations in this record.
  /// Example: /// Example: ECP
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn dataType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_DATATYPE, None)}
  }
  /// The time at which the associated data message was generated, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-02-10T19:48:09.934Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn genTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_GENTIME, None)}
  }
  /// Flag indicating that this record contains forecast data.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn forecast(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SpaceEnvObservation_Abridged::VT_FORECAST, Some(false)).unwrap()}
  }
  /// Flag indicating that this record contains derived data.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn derived(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(SpaceEnvObservation_Abridged::VT_DERIVED, Some(false)).unwrap()}
  }
  /// Unique identifier of the on-orbit satellite hosting the sensor which produced this data.
  /// Example: /// Example: 41866
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_IDONORBIT, None)}
  }
  /// Satellite/catalog number of the on-orbit satellite hosting the sensor which produced this data.
  /// Example: /// Example: 41866
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SpaceEnvObservation_Abridged::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier provided by the record source to indicate the satellite hosting the sensor which produced this data. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: 41866
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_ORIGOBJECTID, None)}
  }
  /// Unique identifier of the reporting sensor.
  /// Example: /// Example: ECP-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_IDSENSOR, None)}
  }
  /// Optional identifier provided by the observation source to indicate the sensor which produced this observation. This may be an internal identifier and not necessarily a valid sensor ID.
  /// Example: /// Example: ECP-1
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origSensorId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_ORIGSENSORID, None)}
  }
  /// The type of observatory from which this data was collected (e.g. FACILITY, ONORBIT, NETWORK, etc.).
  /// Example: /// Example: ONORBIT
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn observatoryType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_OBSERVATORYTYPE, None)}
  }
  /// The name of the observatory from which this data was collected.
  /// Example: /// Example: GOES-16
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn observatoryName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_OBSERVATORYNAME, None)}
  }
  /// Additional notes concerning the observatory.
  /// Example: /// Example: Notes
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn observatoryNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_OBSERVATORYNOTES, None)}
  }
  /// The type of instrument from which this data was collected (e.g. ANTENNA, CHANNELTRON, INTERFEROMETER, MAGNETOMETER, RADIOMETER, etc.).
  /// Example: /// Example: MAGNETOMETER
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn instrumentType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_INSTRUMENTTYPE, None)}
  }
  /// WGS-84 spacecraft/sensor latitude sub-point at observation time, represented as -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 38.8339
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SpaceEnvObservation_Abridged::VT_LAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 spacecraft/sensor longitude sub-point at observation time, represented as -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: -104.8214
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SpaceEnvObservation_Abridged::VT_LON, Some(0.0)).unwrap()}
  }
  /// Spacecraft/sensor altitude at observation time, expressed in kilometers above WGS-84 ellipsoid.
  /// Example: /// Example: 35785.3732
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SpaceEnvObservation_Abridged::VT_ALT, Some(0.0)).unwrap()}
  }
  /// The reference frame of the observing spacecraft/sensor state. If the senReferenceFrame is null it is assumed to be J2000.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn senReferenceFrame(&self) -> SpaceEnvObservation_Abridged_senReferenceFrame_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SpaceEnvObservation_Abridged_senReferenceFrame_Enum>(SpaceEnvObservation_Abridged::VT_SENREFERENCEFRAME, Some(SpaceEnvObservation_Abridged_senReferenceFrame_Enum::J2000)).unwrap()}
  }
  /// Three element array, expressing the observing spacecraft/sensor position vector components at observation time, in kilometers, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xpos, ypos, zpos].
  /// Example: /// Example: [4174.78541785946, -9969.69867853067, 40733.9284531208]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senPos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SpaceEnvObservation_Abridged::VT_SENPOS, None)}
  }
  /// Three element array, expressing the observing spacecraft/sensor velocity vector components at observation time, in kilometers/second, in the specified senReferenceFrame. If senReferenceFrame is null then J2000 should be assumed. The array element order is [xvel, yvel, zvel].
  /// Example: /// Example: [0.727059797295872, 0.298037087322647, 0.00157064850994095]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn senVel(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SpaceEnvObservation_Abridged::VT_SENVEL, None)}
  }
  /// The sensor measurement type of the observation data contained in this record.
  /// Example: /// Example: ENERGETIC PARTICLES
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn measType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_MEASTYPE, None)}
  }
  /// The energy level bin of the sensor associated with this measurement.
  /// Example: /// Example: 0500-700 keV
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn senEnergyLevel(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_SENENERGYLEVEL, None)}
  }
  /// A user-defined name or ID of a set of observations, if applicable. Used for identifying multiple observation records as part of one observation set.
  /// Example: /// Example: ECPOBSET-478125
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn obSetId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_OBSETID, None)}
  }
  /// The particle type (AEROSOL, ALPHA PARTICLE, ATOM, DUST, ELECTRON, ION, MOLECULE, NEUTRON, POSITRON, PROTON) associated with this measurement.
  /// Example: /// Example: PROTON
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn particleType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_PARTICLETYPE, None)}
  }
  /// Time of the observation, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-06-07T14:17:39.653Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn obTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_OBTIME, None)}
  }
  /// A collection of individual space environment observations.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seoList(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SpaceEnvObservation_Abridged::VT_SEOLIST, None)}
  }
  /// The quality of the overall data contained in this record. The quality indicator value may vary among providers and may be a generalized statement (BAD, GOOD, UNCERTAIN, UNKNOWN) or a numeric value. Users should consult the data provider to verify the usage of the quality indicator.
  /// Example: /// Example: GOOD
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn quality(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_QUALITY, None)}
  }
  /// Descriptive or additional information associated with this observation record.
  /// Example: /// Example: Observation Data Description Text
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_DESCRIPTION, None)}
  }
  /// Optional source-provided and searchable metadata or descriptor of the data.
  /// Example: /// Example: energetic charged particle
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn descriptor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_DESCRIPTOR, None)}
  }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SGI, SIGACT, SKYIMAGE, SPACEENVOB, SV, TRACK) that are related to this observation record. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['SPACEENVOB', 'SGI']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SpaceEnvObservation_Abridged::VT_SRCTYPS, None)}
  }
  /// Array of UUIDs of the UDL data records that are related to this observation record. See the associated 'srcTyps' array for specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element of the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['615236d7-d464-4b8c-9b0b-45994e017d80', '8a38e3d6-35fd-4bda-b883-e3724e6bc6b9']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(SpaceEnvObservation_Abridged::VT_SRCIDS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2023-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SpaceEnvObservation_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SpaceEnvObservation_Abridged_dataMode_Enum>(SpaceEnvObservation_Abridged::VT_DATAMODE, Some(SpaceEnvObservation_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SpaceEnvObservation_Abridged::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for SpaceEnvObservation_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgType", Self::VT_MSGTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("genSystem", Self::VT_GENSYSTEM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dataType", Self::VT_DATATYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("genTime", Self::VT_GENTIME, false)?
     .visit_field::<bool>("forecast", Self::VT_FORECAST, false)?
     .visit_field::<bool>("derived", Self::VT_DERIVED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSensorId", Self::VT_ORIGSENSORID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("observatoryType", Self::VT_OBSERVATORYTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("observatoryName", Self::VT_OBSERVATORYNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("observatoryNotes", Self::VT_OBSERVATORYNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("instrumentType", Self::VT_INSTRUMENTTYPE, false)?
     .visit_field::<f64>("lat", Self::VT_LAT, false)?
     .visit_field::<f64>("lon", Self::VT_LON, false)?
     .visit_field::<f64>("alt", Self::VT_ALT, false)?
     .visit_field::<SpaceEnvObservation_Abridged_senReferenceFrame_Enum>("senReferenceFrame", Self::VT_SENREFERENCEFRAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("senPos", Self::VT_SENPOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("senVel", Self::VT_SENVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("measType", Self::VT_MEASTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("senEnergyLevel", Self::VT_SENENERGYLEVEL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obSetId", Self::VT_OBSETID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("particleType", Self::VT_PARTICLETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("obTime", Self::VT_OBTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("seoList", Self::VT_SEOLIST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("quality", Self::VT_QUALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("descriptor", Self::VT_DESCRIPTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcTyps", Self::VT_SRCTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcIds", Self::VT_SRCIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<SpaceEnvObservation_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct SpaceEnvObservation_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub genSystem: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub genTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub forecast: bool,
    pub derived: bool,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSensorId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub observatoryType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub observatoryName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub observatoryNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub instrumentType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lat: f64,
    pub lon: f64,
    pub alt: f64,
    pub senReferenceFrame: SpaceEnvObservation_Abridged_senReferenceFrame_Enum,
    pub senPos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub senVel: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub measType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub senEnergyLevel: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obSetId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub particleType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub obTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub seoList: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub quality: Option<flatbuffers::WIPOffset<&'a str>>,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub descriptor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub srcTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SpaceEnvObservation_Abridged_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SpaceEnvObservation_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    SpaceEnvObservation_AbridgedArgs {
      id: None,
      classificationMarking: None,
      msgType: None,
      genSystem: None,
      externalId: None,
      dataType: None,
      genTime: None,
      forecast: false,
      derived: false,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      idSensor: None,
      origSensorId: None,
      observatoryType: None,
      observatoryName: None,
      observatoryNotes: None,
      instrumentType: None,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      senReferenceFrame: SpaceEnvObservation_Abridged_senReferenceFrame_Enum::J2000,
      senPos: None,
      senVel: None,
      measType: None,
      senEnergyLevel: None,
      obSetId: None,
      particleType: None,
      obTime: None,
      seoList: None,
      quality: None,
      description: None,
      descriptor: None,
      srcTyps: None,
      srcIds: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: SpaceEnvObservation_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct SpaceEnvObservation_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SpaceEnvObservation_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_msgType(&mut self, msgType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_MSGTYPE, msgType);
  }
  #[inline]
  pub fn add_genSystem(&mut self, genSystem: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_GENSYSTEM, genSystem);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_dataType(&mut self, dataType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_DATATYPE, dataType);
  }
  #[inline]
  pub fn add_genTime(&mut self, genTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_GENTIME, genTime);
  }
  #[inline]
  pub fn add_forecast(&mut self, forecast: bool) {
    self.fbb_.push_slot::<bool>(SpaceEnvObservation_Abridged::VT_FORECAST, forecast, false);
  }
  #[inline]
  pub fn add_derived(&mut self, derived: bool) {
    self.fbb_.push_slot::<bool>(SpaceEnvObservation_Abridged::VT_DERIVED, derived, false);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(SpaceEnvObservation_Abridged::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_origSensorId(&mut self, origSensorId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_ORIGSENSORID, origSensorId);
  }
  #[inline]
  pub fn add_observatoryType(&mut self, observatoryType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_OBSERVATORYTYPE, observatoryType);
  }
  #[inline]
  pub fn add_observatoryName(&mut self, observatoryName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_OBSERVATORYNAME, observatoryName);
  }
  #[inline]
  pub fn add_observatoryNotes(&mut self, observatoryNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_OBSERVATORYNOTES, observatoryNotes);
  }
  #[inline]
  pub fn add_instrumentType(&mut self, instrumentType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_INSTRUMENTTYPE, instrumentType);
  }
  #[inline]
  pub fn add_lat(&mut self, lat: f64) {
    self.fbb_.push_slot::<f64>(SpaceEnvObservation_Abridged::VT_LAT, lat, 0.0);
  }
  #[inline]
  pub fn add_lon(&mut self, lon: f64) {
    self.fbb_.push_slot::<f64>(SpaceEnvObservation_Abridged::VT_LON, lon, 0.0);
  }
  #[inline]
  pub fn add_alt(&mut self, alt: f64) {
    self.fbb_.push_slot::<f64>(SpaceEnvObservation_Abridged::VT_ALT, alt, 0.0);
  }
  #[inline]
  pub fn add_senReferenceFrame(&mut self, senReferenceFrame: SpaceEnvObservation_Abridged_senReferenceFrame_Enum) {
    self.fbb_.push_slot::<SpaceEnvObservation_Abridged_senReferenceFrame_Enum>(SpaceEnvObservation_Abridged::VT_SENREFERENCEFRAME, senReferenceFrame, SpaceEnvObservation_Abridged_senReferenceFrame_Enum::J2000);
  }
  #[inline]
  pub fn add_senPos(&mut self, senPos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_SENPOS, senPos);
  }
  #[inline]
  pub fn add_senVel(&mut self, senVel: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_SENVEL, senVel);
  }
  #[inline]
  pub fn add_measType(&mut self, measType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_MEASTYPE, measType);
  }
  #[inline]
  pub fn add_senEnergyLevel(&mut self, senEnergyLevel: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_SENENERGYLEVEL, senEnergyLevel);
  }
  #[inline]
  pub fn add_obSetId(&mut self, obSetId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_OBSETID, obSetId);
  }
  #[inline]
  pub fn add_particleType(&mut self, particleType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_PARTICLETYPE, particleType);
  }
  #[inline]
  pub fn add_obTime(&mut self, obTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_OBTIME, obTime);
  }
  #[inline]
  pub fn add_seoList(&mut self, seoList: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_SEOLIST, seoList);
  }
  #[inline]
  pub fn add_quality(&mut self, quality: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_QUALITY, quality);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_descriptor(&mut self, descriptor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_DESCRIPTOR, descriptor);
  }
  #[inline]
  pub fn add_srcTyps(&mut self, srcTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_SRCTYPS, srcTyps);
  }
  #[inline]
  pub fn add_srcIds(&mut self, srcIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_SRCIDS, srcIds);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SpaceEnvObservation_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<SpaceEnvObservation_Abridged_dataMode_Enum>(SpaceEnvObservation_Abridged::VT_DATAMODE, dataMode, SpaceEnvObservation_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SpaceEnvObservation_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SpaceEnvObservation_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SpaceEnvObservation_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SpaceEnvObservation_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SpaceEnvObservation_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SpaceEnvObservation_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("msgType", &self.msgType());
      ds.field("genSystem", &self.genSystem());
      ds.field("externalId", &self.externalId());
      ds.field("dataType", &self.dataType());
      ds.field("genTime", &self.genTime());
      ds.field("forecast", &self.forecast());
      ds.field("derived", &self.derived());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("idSensor", &self.idSensor());
      ds.field("origSensorId", &self.origSensorId());
      ds.field("observatoryType", &self.observatoryType());
      ds.field("observatoryName", &self.observatoryName());
      ds.field("observatoryNotes", &self.observatoryNotes());
      ds.field("instrumentType", &self.instrumentType());
      ds.field("lat", &self.lat());
      ds.field("lon", &self.lon());
      ds.field("alt", &self.alt());
      ds.field("senReferenceFrame", &self.senReferenceFrame());
      ds.field("senPos", &self.senPos());
      ds.field("senVel", &self.senVel());
      ds.field("measType", &self.measType());
      ds.field("senEnergyLevel", &self.senEnergyLevel());
      ds.field("obSetId", &self.obSetId());
      ds.field("particleType", &self.particleType());
      ds.field("obTime", &self.obTime());
      ds.field("seoList", &self.seoList());
      ds.field("quality", &self.quality());
      ds.field("description", &self.description());
      ds.field("descriptor", &self.descriptor());
      ds.field("srcTyps", &self.srcTyps());
      ds.field("srcIds", &self.srcIds());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SpaceEnvObservation_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub msgType: Option<String>,
  pub genSystem: Option<String>,
  pub externalId: Option<String>,
  pub dataType: Option<String>,
  pub genTime: Option<String>,
  pub forecast: bool,
  pub derived: bool,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub origObjectId: Option<String>,
  pub idSensor: Option<String>,
  pub origSensorId: Option<String>,
  pub observatoryType: Option<String>,
  pub observatoryName: Option<String>,
  pub observatoryNotes: Option<String>,
  pub instrumentType: Option<String>,
  pub lat: f64,
  pub lon: f64,
  pub alt: f64,
  pub senReferenceFrame: SpaceEnvObservation_Abridged_senReferenceFrame_Enum,
  pub senPos: Option<Vec<String>>,
  pub senVel: Option<Vec<String>>,
  pub measType: Option<String>,
  pub senEnergyLevel: Option<String>,
  pub obSetId: Option<String>,
  pub particleType: Option<String>,
  pub obTime: Option<String>,
  pub seoList: Option<Vec<String>>,
  pub quality: Option<String>,
  pub description: Option<String>,
  pub descriptor: Option<String>,
  pub srcTyps: Option<Vec<String>>,
  pub srcIds: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: SpaceEnvObservation_Abridged_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for SpaceEnvObservation_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      msgType: None,
      genSystem: None,
      externalId: None,
      dataType: None,
      genTime: None,
      forecast: false,
      derived: false,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      idSensor: None,
      origSensorId: None,
      observatoryType: None,
      observatoryName: None,
      observatoryNotes: None,
      instrumentType: None,
      lat: 0.0,
      lon: 0.0,
      alt: 0.0,
      senReferenceFrame: SpaceEnvObservation_Abridged_senReferenceFrame_Enum::J2000,
      senPos: None,
      senVel: None,
      measType: None,
      senEnergyLevel: None,
      obSetId: None,
      particleType: None,
      obTime: None,
      seoList: None,
      quality: None,
      description: None,
      descriptor: None,
      srcTyps: None,
      srcIds: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      dataMode: SpaceEnvObservation_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl SpaceEnvObservation_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SpaceEnvObservation_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgType = self.msgType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let genSystem = self.genSystem.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataType = self.dataType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let genTime = self.genTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let forecast = self.forecast;
    let derived = self.derived;
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSensorId = self.origSensorId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let observatoryType = self.observatoryType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let observatoryName = self.observatoryName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let observatoryNotes = self.observatoryNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let instrumentType = self.instrumentType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lat = self.lat;
    let lon = self.lon;
    let alt = self.alt;
    let senReferenceFrame = self.senReferenceFrame;
    let senPos = self.senPos.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let senVel = self.senVel.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let measType = self.measType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let senEnergyLevel = self.senEnergyLevel.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obSetId = self.obSetId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let particleType = self.particleType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let obTime = self.obTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let seoList = self.seoList.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let quality = self.quality.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let descriptor = self.descriptor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let srcTyps = self.srcTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcIds = self.srcIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SpaceEnvObservation_Abridged::create(_fbb, &SpaceEnvObservation_AbridgedArgs{
      id,
      classificationMarking,
      msgType,
      genSystem,
      externalId,
      dataType,
      genTime,
      forecast,
      derived,
      idOnOrbit,
      satNo,
      origObjectId,
      idSensor,
      origSensorId,
      observatoryType,
      observatoryName,
      observatoryNotes,
      instrumentType,
      lat,
      lon,
      alt,
      senReferenceFrame,
      senPos,
      senVel,
      measType,
      senEnergyLevel,
      obSetId,
      particleType,
      obTime,
      seoList,
      quality,
      description,
      descriptor,
      srcTyps,
      srcIds,
      createdAt,
      createdBy,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SpaceEnvObservation_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_space_env_observation_abridged_unchecked`.
pub fn root_as_space_env_observation_abridged(buf: &[u8]) -> Result<SpaceEnvObservation_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SpaceEnvObservation_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SpaceEnvObservation_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_space_env_observation_abridged_unchecked`.
pub fn size_prefixed_root_as_space_env_observation_abridged(buf: &[u8]) -> Result<SpaceEnvObservation_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SpaceEnvObservation_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SpaceEnvObservation_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_space_env_observation_abridged_unchecked`.
pub fn root_as_space_env_observation_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpaceEnvObservation_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SpaceEnvObservation_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SpaceEnvObservation_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_space_env_observation_abridged_unchecked`.
pub fn size_prefixed_root_as_space_env_observation_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SpaceEnvObservation_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SpaceEnvObservation_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SpaceEnvObservation_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SpaceEnvObservation_Abridged`.
pub unsafe fn root_as_space_env_observation_abridged_unchecked(buf: &[u8]) -> SpaceEnvObservation_Abridged {
  flatbuffers::root_unchecked::<SpaceEnvObservation_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SpaceEnvObservation_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SpaceEnvObservation_Abridged`.
pub unsafe fn size_prefixed_root_as_space_env_observation_abridged_unchecked(buf: &[u8]) -> SpaceEnvObservation_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<SpaceEnvObservation_Abridged>(buf)
}
pub const SPACE_ENV_OBSERVATION_ABRIDGED_IDENTIFIER: &str = "SPAC";

#[inline]
pub fn space_env_observation_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SPACE_ENV_OBSERVATION_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn space_env_observation_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SPACE_ENV_OBSERVATION_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_space_env_observation_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SpaceEnvObservation_Abridged<'a>>) {
  fbb.finish(root, Some(SPACE_ENV_OBSERVATION_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_space_env_observation_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SpaceEnvObservation_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(SPACE_ENV_OBSERVATION_ABRIDGED_IDENTIFIER));
}
