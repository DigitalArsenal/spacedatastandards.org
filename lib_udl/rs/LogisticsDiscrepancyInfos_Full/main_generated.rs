// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum LogisticsDiscrepancyInfos_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Discrepancy information associated with this LogisticsSupport record.
pub struct LogisticsDiscrepancyInfos_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LogisticsDiscrepancyInfos_Full<'a> {
  type Inner = LogisticsDiscrepancyInfos_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LogisticsDiscrepancyInfos_Full<'a> {
  pub const VT_JCN: flatbuffers::VOffsetT = 4;
  pub const VT_DISCREPANCYINFO: flatbuffers::VOffsetT = 6;
  pub const VT_JOBSTTIME: flatbuffers::VOffsetT = 8;
  pub const VT_CLOSURETIME: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LogisticsDiscrepancyInfos_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LogisticsDiscrepancyInfos_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<LogisticsDiscrepancyInfos_Full<'bldr>> {
    let mut builder = LogisticsDiscrepancyInfos_FullBuilder::new(_fbb);
    if let Some(x) = args.closureTime { builder.add_closureTime(x); }
    if let Some(x) = args.jobStTime { builder.add_jobStTime(x); }
    if let Some(x) = args.discrepancyInfo { builder.add_discrepancyInfo(x); }
    if let Some(x) = args.jcn { builder.add_jcn(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> LogisticsDiscrepancyInfos_FullT {
    let jcn = self.jcn().map(|x| {
      x.to_string()
    });
    let discrepancyInfo = self.discrepancyInfo().map(|x| {
      x.to_string()
    });
    let jobStTime = self.jobStTime().map(|x| {
      x.to_string()
    });
    let closureTime = self.closureTime().map(|x| {
      x.to_string()
    });
    LogisticsDiscrepancyInfos_FullT {
      jcn,
      discrepancyInfo,
      jobStTime,
      closureTime,
    }
  }

  /// Job Control Number of the discrepancy.
  /// Example: /// Example: 231942400
  /// Constraints: Minimum length = 0, Maximum length = 12
  #[inline]
  pub fn jcn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsDiscrepancyInfos_Full::VT_JCN, None)}
  }
  /// The aircraft discrepancy description.
  /// Example: /// Example: PILOT WINDSHIELD PANEL ASSY CRACKED, AND ARCING REQ R2 IAW 56.11.10
  /// Constraints: Minimum length = 0, Maximum length = 680
  #[inline]
  pub fn discrepancyInfo(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsDiscrepancyInfos_Full::VT_DISCREPANCYINFO, None)}
  }
  /// The job start time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn jobStTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsDiscrepancyInfos_Full::VT_JOBSTTIME, None)}
  }
  /// The discrepancy closure time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2023-07-17T10:30:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn closureTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LogisticsDiscrepancyInfos_Full::VT_CLOSURETIME, None)}
  }
}

impl flatbuffers::Verifiable for LogisticsDiscrepancyInfos_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("jcn", Self::VT_JCN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("discrepancyInfo", Self::VT_DISCREPANCYINFO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("jobStTime", Self::VT_JOBSTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("closureTime", Self::VT_CLOSURETIME, false)?
     .finish();
    Ok(())
  }
}
pub struct LogisticsDiscrepancyInfos_FullArgs<'a> {
    pub jcn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub discrepancyInfo: Option<flatbuffers::WIPOffset<&'a str>>,
    pub jobStTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub closureTime: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LogisticsDiscrepancyInfos_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    LogisticsDiscrepancyInfos_FullArgs {
      jcn: None,
      discrepancyInfo: None,
      jobStTime: None,
      closureTime: None,
    }
  }
}

pub struct LogisticsDiscrepancyInfos_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LogisticsDiscrepancyInfos_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_jcn(&mut self, jcn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsDiscrepancyInfos_Full::VT_JCN, jcn);
  }
  #[inline]
  pub fn add_discrepancyInfo(&mut self, discrepancyInfo: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsDiscrepancyInfos_Full::VT_DISCREPANCYINFO, discrepancyInfo);
  }
  #[inline]
  pub fn add_jobStTime(&mut self, jobStTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsDiscrepancyInfos_Full::VT_JOBSTTIME, jobStTime);
  }
  #[inline]
  pub fn add_closureTime(&mut self, closureTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LogisticsDiscrepancyInfos_Full::VT_CLOSURETIME, closureTime);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LogisticsDiscrepancyInfos_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LogisticsDiscrepancyInfos_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LogisticsDiscrepancyInfos_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LogisticsDiscrepancyInfos_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LogisticsDiscrepancyInfos_Full");
      ds.field("jcn", &self.jcn());
      ds.field("discrepancyInfo", &self.discrepancyInfo());
      ds.field("jobStTime", &self.jobStTime());
      ds.field("closureTime", &self.closureTime());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LogisticsDiscrepancyInfos_FullT {
  pub jcn: Option<String>,
  pub discrepancyInfo: Option<String>,
  pub jobStTime: Option<String>,
  pub closureTime: Option<String>,
}
impl Default for LogisticsDiscrepancyInfos_FullT {
  fn default() -> Self {
    Self {
      jcn: None,
      discrepancyInfo: None,
      jobStTime: None,
      closureTime: None,
    }
  }
}
impl LogisticsDiscrepancyInfos_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LogisticsDiscrepancyInfos_Full<'b>> {
    let jcn = self.jcn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let discrepancyInfo = self.discrepancyInfo.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let jobStTime = self.jobStTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let closureTime = self.closureTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LogisticsDiscrepancyInfos_Full::create(_fbb, &LogisticsDiscrepancyInfos_FullArgs{
      jcn,
      discrepancyInfo,
      jobStTime,
      closureTime,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LogisticsDiscrepancyInfos_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_discrepancy_infos_full_unchecked`.
pub fn root_as_logistics_discrepancy_infos_full(buf: &[u8]) -> Result<LogisticsDiscrepancyInfos_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LogisticsDiscrepancyInfos_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LogisticsDiscrepancyInfos_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_logistics_discrepancy_infos_full_unchecked`.
pub fn size_prefixed_root_as_logistics_discrepancy_infos_full(buf: &[u8]) -> Result<LogisticsDiscrepancyInfos_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LogisticsDiscrepancyInfos_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LogisticsDiscrepancyInfos_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_discrepancy_infos_full_unchecked`.
pub fn root_as_logistics_discrepancy_infos_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsDiscrepancyInfos_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LogisticsDiscrepancyInfos_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LogisticsDiscrepancyInfos_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_logistics_discrepancy_infos_full_unchecked`.
pub fn size_prefixed_root_as_logistics_discrepancy_infos_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LogisticsDiscrepancyInfos_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LogisticsDiscrepancyInfos_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LogisticsDiscrepancyInfos_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LogisticsDiscrepancyInfos_Full`.
pub unsafe fn root_as_logistics_discrepancy_infos_full_unchecked(buf: &[u8]) -> LogisticsDiscrepancyInfos_Full {
  flatbuffers::root_unchecked::<LogisticsDiscrepancyInfos_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LogisticsDiscrepancyInfos_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LogisticsDiscrepancyInfos_Full`.
pub unsafe fn size_prefixed_root_as_logistics_discrepancy_infos_full_unchecked(buf: &[u8]) -> LogisticsDiscrepancyInfos_Full {
  flatbuffers::size_prefixed_root_unchecked::<LogisticsDiscrepancyInfos_Full>(buf)
}
pub const LOGISTICS_DISCREPANCY_INFOS_FULL_IDENTIFIER: &str = "LOGI";

#[inline]
pub fn logistics_discrepancy_infos_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_DISCREPANCY_INFOS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn logistics_discrepancy_infos_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LOGISTICS_DISCREPANCY_INFOS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_logistics_discrepancy_infos_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LogisticsDiscrepancyInfos_Full<'a>>) {
  fbb.finish(root, Some(LOGISTICS_DISCREPANCY_INFOS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_logistics_discrepancy_infos_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LogisticsDiscrepancyInfos_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(LOGISTICS_DISCREPANCY_INFOS_FULL_IDENTIFIER));
}
