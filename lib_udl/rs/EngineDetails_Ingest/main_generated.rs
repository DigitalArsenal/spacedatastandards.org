// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ENGINE_DETAILS_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ENGINE_DETAILS_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ENGINE_DETAILS_INGEST_DATA_MODE_ENUM: [EngineDetails_Ingest_dataMode_Enum; 4] = [
  EngineDetails_Ingest_dataMode_Enum::REAL,
  EngineDetails_Ingest_dataMode_Enum::TEST,
  EngineDetails_Ingest_dataMode_Enum::SIMULATED,
  EngineDetails_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct EngineDetails_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl EngineDetails_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for EngineDetails_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for EngineDetails_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for EngineDetails_Ingest_dataMode_Enum {
    type Output = EngineDetails_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for EngineDetails_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for EngineDetails_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for EngineDetails_Ingest_dataMode_Enum {}
pub enum EngineDetails_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Known launch vehicle engine details and performance characteristics and limits compiled by a particular source.  A launch vehicle engine may have several details records from multiple sources.
pub struct EngineDetails_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EngineDetails_Ingest<'a> {
  type Inner = EngineDetails_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EngineDetails_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDENGINE: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_FAMILY: flatbuffers::VOffsetT = 10;
  pub const VT_CYCLETYPE: flatbuffers::VOffsetT = 12;
  pub const VT_CHARACTERISTICTYPE: flatbuffers::VOffsetT = 14;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 16;
  pub const VT_SPECIFICIMPULSE: flatbuffers::VOffsetT = 18;
  pub const VT_BURNTIME: flatbuffers::VOffsetT = 20;
  pub const VT_SEALEVELTHRUST: flatbuffers::VOffsetT = 22;
  pub const VT_VACUUMTHRUST: flatbuffers::VOffsetT = 24;
  pub const VT_CHAMBERPRESSURE: flatbuffers::VOffsetT = 26;
  pub const VT_NOZZLEEXPANSIONRATIO: flatbuffers::VOffsetT = 28;
  pub const VT_MAXFIRINGS: flatbuffers::VOffsetT = 30;
  pub const VT_PROPELLANT: flatbuffers::VOffsetT = 32;
  pub const VT_OXIDIZER: flatbuffers::VOffsetT = 34;
  pub const VT_NOTES: flatbuffers::VOffsetT = 36;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 38;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 40;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 44;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 46;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 48;
  pub const VT_TAGS: flatbuffers::VOffsetT = 50;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EngineDetails_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EngineDetails_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<EngineDetails_Ingest<'bldr>> {
    let mut builder = EngineDetails_IngestBuilder::new(_fbb);
    builder.add_nozzleExpansionRatio(args.nozzleExpansionRatio);
    builder.add_chamberPressure(args.chamberPressure);
    builder.add_vacuumThrust(args.vacuumThrust);
    builder.add_seaLevelThrust(args.seaLevelThrust);
    builder.add_burnTime(args.burnTime);
    builder.add_specificImpulse(args.specificImpulse);
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.oxidizer { builder.add_oxidizer(x); }
    if let Some(x) = args.propellant { builder.add_propellant(x); }
    builder.add_maxFirings(args.maxFirings);
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.characteristicType { builder.add_characteristicType(x); }
    if let Some(x) = args.cycleType { builder.add_cycleType(x); }
    if let Some(x) = args.family { builder.add_family(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idEngine { builder.add_idEngine(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> EngineDetails_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idEngine = self.idEngine().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let family = self.family().map(|x| {
      x.to_string()
    });
    let cycleType = self.cycleType().map(|x| {
      x.to_string()
    });
    let characteristicType = self.characteristicType().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let specificImpulse = self.specificImpulse();
    let burnTime = self.burnTime();
    let seaLevelThrust = self.seaLevelThrust();
    let vacuumThrust = self.vacuumThrust();
    let chamberPressure = self.chamberPressure();
    let nozzleExpansionRatio = self.nozzleExpansionRatio();
    let maxFirings = self.maxFirings();
    let propellant = self.propellant().map(|x| {
      x.to_string()
    });
    let oxidizer = self.oxidizer().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    EngineDetails_IngestT {
      id,
      idEngine,
      classificationMarking,
      family,
      cycleType,
      characteristicType,
      manufacturerOrgId,
      specificImpulse,
      burnTime,
      seaLevelThrust,
      vacuumThrust,
      chamberPressure,
      nozzleExpansionRatio,
      maxFirings,
      propellant,
      oxidizer,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ENGINEDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_ID, None)}
  }
  /// Identifier of the parent engine record.
  /// Example: /// Example: ENGINE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idEngine(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_IDENGINE, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Engine type or family.
  /// Example: /// Example: ENGINE_TYPE1
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn family(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_FAMILY, None)}
  }
  /// Engine cycle type (e.g. Electrostatic Ion, Pressure Fed, Hall, Catalytic Decomposition, etc.).
  /// Example: /// Example: Pressure Fed
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn cycleType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_CYCLETYPE, None)}
  }
  /// Engine characteristic type (e.g. Electric, Mono-propellant, Bi-propellant, etc.).
  /// Example: /// Example: Electric
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn characteristicType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_CHARACTERISTICTYPE, None)}
  }
  /// Organization ID of the engine manufacturer.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_MANUFACTURERORGID, None)}
  }
  /// Launch engine specific impulse in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn specificImpulse(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EngineDetails_Ingest::VT_SPECIFICIMPULSE, Some(0.0)).unwrap()}
  }
  /// Launch engine maximum burn time in seconds.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn burnTime(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EngineDetails_Ingest::VT_BURNTIME, Some(0.0)).unwrap()}
  }
  /// Engine maximum thrust at sea level in Kilo-Newtons.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn seaLevelThrust(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EngineDetails_Ingest::VT_SEALEVELTHRUST, Some(0.0)).unwrap()}
  }
  /// Engine maximum thrust in a vacuum in Kilo-Newtons.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vacuumThrust(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EngineDetails_Ingest::VT_VACUUMTHRUST, Some(0.0)).unwrap()}
  }
  /// Engine chamber pressure in bars.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn chamberPressure(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EngineDetails_Ingest::VT_CHAMBERPRESSURE, Some(0.0)).unwrap()}
  }
  /// Engine nozzle expansion ratio.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nozzleExpansionRatio(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EngineDetails_Ingest::VT_NOZZLEEXPANSIONRATIO, Some(0.0)).unwrap()}
  }
  /// Engine maximum number of firings.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxFirings(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EngineDetails_Ingest::VT_MAXFIRINGS, Some(0)).unwrap()}
  }
  /// Propellant/fuel type of the engine (e.g. Liquid Hydrogen, Kerosene, Aerozine, etc).
  /// Example: /// Example: Liquid
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn propellant(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_PROPELLANT, None)}
  }
  /// Oxidizer type (e.g. Nitrogen Tetroxide, Liquid Oxygen, etc).
  /// Example: /// Example: Liquid Oxygen
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn oxidizer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_OXIDIZER, None)}
  }
  /// Notes/Description of the engine.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_NOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EngineDetails_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> EngineDetails_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<EngineDetails_Ingest_dataMode_Enum>(EngineDetails_Ingest::VT_DATAMODE, Some(EngineDetails_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EngineDetails_Ingest::VT_TAGS, None)}
  }
}

impl flatbuffers::Verifiable for EngineDetails_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idEngine", Self::VT_IDENGINE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("family", Self::VT_FAMILY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cycleType", Self::VT_CYCLETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("characteristicType", Self::VT_CHARACTERISTICTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<f64>("specificImpulse", Self::VT_SPECIFICIMPULSE, false)?
     .visit_field::<f64>("burnTime", Self::VT_BURNTIME, false)?
     .visit_field::<f64>("seaLevelThrust", Self::VT_SEALEVELTHRUST, false)?
     .visit_field::<f64>("vacuumThrust", Self::VT_VACUUMTHRUST, false)?
     .visit_field::<f64>("chamberPressure", Self::VT_CHAMBERPRESSURE, false)?
     .visit_field::<f64>("nozzleExpansionRatio", Self::VT_NOZZLEEXPANSIONRATIO, false)?
     .visit_field::<i32>("maxFirings", Self::VT_MAXFIRINGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("propellant", Self::VT_PROPELLANT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("oxidizer", Self::VT_OXIDIZER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<EngineDetails_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .finish();
    Ok(())
  }
}
pub struct EngineDetails_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idEngine: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub family: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cycleType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub characteristicType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub specificImpulse: f64,
    pub burnTime: f64,
    pub seaLevelThrust: f64,
    pub vacuumThrust: f64,
    pub chamberPressure: f64,
    pub nozzleExpansionRatio: f64,
    pub maxFirings: i32,
    pub propellant: Option<flatbuffers::WIPOffset<&'a str>>,
    pub oxidizer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: EngineDetails_Ingest_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for EngineDetails_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    EngineDetails_IngestArgs {
      id: None,
      idEngine: None,
      classificationMarking: None,
      family: None,
      cycleType: None,
      characteristicType: None,
      manufacturerOrgId: None,
      specificImpulse: 0.0,
      burnTime: 0.0,
      seaLevelThrust: 0.0,
      vacuumThrust: 0.0,
      chamberPressure: 0.0,
      nozzleExpansionRatio: 0.0,
      maxFirings: 0,
      propellant: None,
      oxidizer: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: EngineDetails_Ingest_dataMode_Enum::REAL,
      tags: None,
    }
  }
}

pub struct EngineDetails_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EngineDetails_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_idEngine(&mut self, idEngine: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_IDENGINE, idEngine);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_family(&mut self, family: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_FAMILY, family);
  }
  #[inline]
  pub fn add_cycleType(&mut self, cycleType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_CYCLETYPE, cycleType);
  }
  #[inline]
  pub fn add_characteristicType(&mut self, characteristicType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_CHARACTERISTICTYPE, characteristicType);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_specificImpulse(&mut self, specificImpulse: f64) {
    self.fbb_.push_slot::<f64>(EngineDetails_Ingest::VT_SPECIFICIMPULSE, specificImpulse, 0.0);
  }
  #[inline]
  pub fn add_burnTime(&mut self, burnTime: f64) {
    self.fbb_.push_slot::<f64>(EngineDetails_Ingest::VT_BURNTIME, burnTime, 0.0);
  }
  #[inline]
  pub fn add_seaLevelThrust(&mut self, seaLevelThrust: f64) {
    self.fbb_.push_slot::<f64>(EngineDetails_Ingest::VT_SEALEVELTHRUST, seaLevelThrust, 0.0);
  }
  #[inline]
  pub fn add_vacuumThrust(&mut self, vacuumThrust: f64) {
    self.fbb_.push_slot::<f64>(EngineDetails_Ingest::VT_VACUUMTHRUST, vacuumThrust, 0.0);
  }
  #[inline]
  pub fn add_chamberPressure(&mut self, chamberPressure: f64) {
    self.fbb_.push_slot::<f64>(EngineDetails_Ingest::VT_CHAMBERPRESSURE, chamberPressure, 0.0);
  }
  #[inline]
  pub fn add_nozzleExpansionRatio(&mut self, nozzleExpansionRatio: f64) {
    self.fbb_.push_slot::<f64>(EngineDetails_Ingest::VT_NOZZLEEXPANSIONRATIO, nozzleExpansionRatio, 0.0);
  }
  #[inline]
  pub fn add_maxFirings(&mut self, maxFirings: i32) {
    self.fbb_.push_slot::<i32>(EngineDetails_Ingest::VT_MAXFIRINGS, maxFirings, 0);
  }
  #[inline]
  pub fn add_propellant(&mut self, propellant: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_PROPELLANT, propellant);
  }
  #[inline]
  pub fn add_oxidizer(&mut self, oxidizer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_OXIDIZER, oxidizer);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: EngineDetails_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<EngineDetails_Ingest_dataMode_Enum>(EngineDetails_Ingest::VT_DATAMODE, dataMode, EngineDetails_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EngineDetails_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EngineDetails_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EngineDetails_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EngineDetails_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EngineDetails_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EngineDetails_Ingest");
      ds.field("id", &self.id());
      ds.field("idEngine", &self.idEngine());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("family", &self.family());
      ds.field("cycleType", &self.cycleType());
      ds.field("characteristicType", &self.characteristicType());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("specificImpulse", &self.specificImpulse());
      ds.field("burnTime", &self.burnTime());
      ds.field("seaLevelThrust", &self.seaLevelThrust());
      ds.field("vacuumThrust", &self.vacuumThrust());
      ds.field("chamberPressure", &self.chamberPressure());
      ds.field("nozzleExpansionRatio", &self.nozzleExpansionRatio());
      ds.field("maxFirings", &self.maxFirings());
      ds.field("propellant", &self.propellant());
      ds.field("oxidizer", &self.oxidizer());
      ds.field("notes", &self.notes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EngineDetails_IngestT {
  pub id: Option<String>,
  pub idEngine: Option<String>,
  pub classificationMarking: Option<String>,
  pub family: Option<String>,
  pub cycleType: Option<String>,
  pub characteristicType: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub specificImpulse: f64,
  pub burnTime: f64,
  pub seaLevelThrust: f64,
  pub vacuumThrust: f64,
  pub chamberPressure: f64,
  pub nozzleExpansionRatio: f64,
  pub maxFirings: i32,
  pub propellant: Option<String>,
  pub oxidizer: Option<String>,
  pub notes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: EngineDetails_Ingest_dataMode_Enum,
  pub tags: Option<Vec<String>>,
}
impl Default for EngineDetails_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      idEngine: None,
      classificationMarking: None,
      family: None,
      cycleType: None,
      characteristicType: None,
      manufacturerOrgId: None,
      specificImpulse: 0.0,
      burnTime: 0.0,
      seaLevelThrust: 0.0,
      vacuumThrust: 0.0,
      chamberPressure: 0.0,
      nozzleExpansionRatio: 0.0,
      maxFirings: 0,
      propellant: None,
      oxidizer: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: EngineDetails_Ingest_dataMode_Enum::REAL,
      tags: None,
    }
  }
}
impl EngineDetails_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EngineDetails_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idEngine = self.idEngine.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let family = self.family.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cycleType = self.cycleType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let characteristicType = self.characteristicType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let specificImpulse = self.specificImpulse;
    let burnTime = self.burnTime;
    let seaLevelThrust = self.seaLevelThrust;
    let vacuumThrust = self.vacuumThrust;
    let chamberPressure = self.chamberPressure;
    let nozzleExpansionRatio = self.nozzleExpansionRatio;
    let maxFirings = self.maxFirings;
    let propellant = self.propellant.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let oxidizer = self.oxidizer.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    EngineDetails_Ingest::create(_fbb, &EngineDetails_IngestArgs{
      id,
      idEngine,
      classificationMarking,
      family,
      cycleType,
      characteristicType,
      manufacturerOrgId,
      specificImpulse,
      burnTime,
      seaLevelThrust,
      vacuumThrust,
      chamberPressure,
      nozzleExpansionRatio,
      maxFirings,
      propellant,
      oxidizer,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EngineDetails_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_engine_details_ingest_unchecked`.
pub fn root_as_engine_details_ingest(buf: &[u8]) -> Result<EngineDetails_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EngineDetails_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EngineDetails_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_engine_details_ingest_unchecked`.
pub fn size_prefixed_root_as_engine_details_ingest(buf: &[u8]) -> Result<EngineDetails_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EngineDetails_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EngineDetails_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_engine_details_ingest_unchecked`.
pub fn root_as_engine_details_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EngineDetails_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EngineDetails_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EngineDetails_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_engine_details_ingest_unchecked`.
pub fn size_prefixed_root_as_engine_details_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EngineDetails_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EngineDetails_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EngineDetails_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EngineDetails_Ingest`.
pub unsafe fn root_as_engine_details_ingest_unchecked(buf: &[u8]) -> EngineDetails_Ingest {
  flatbuffers::root_unchecked::<EngineDetails_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EngineDetails_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EngineDetails_Ingest`.
pub unsafe fn size_prefixed_root_as_engine_details_ingest_unchecked(buf: &[u8]) -> EngineDetails_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<EngineDetails_Ingest>(buf)
}
pub const ENGINE_DETAILS_INGEST_IDENTIFIER: &str = "ENGI";

#[inline]
pub fn engine_details_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ENGINE_DETAILS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn engine_details_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ENGINE_DETAILS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_engine_details_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EngineDetails_Ingest<'a>>) {
  fbb.finish(root, Some(ENGINE_DETAILS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_engine_details_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EngineDetails_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ENGINE_DETAILS_INGEST_IDENTIFIER));
}
