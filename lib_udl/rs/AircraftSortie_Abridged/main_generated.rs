// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRCRAFT_SORTIE_ABRIDGED_PAPER_STATUS_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRCRAFT_SORTIE_ABRIDGED_PAPER_STATUS_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRCRAFT_SORTIE_ABRIDGED_PAPER_STATUS_ENUM: [AircraftSortie_Abridged_paperStatus_Enum; 4] = [
  AircraftSortie_Abridged_paperStatus_Enum::PUBLISHED,
  AircraftSortie_Abridged_paperStatus_Enum::DELETED,
  AircraftSortie_Abridged_paperStatus_Enum::UPDATED,
  AircraftSortie_Abridged_paperStatus_Enum::READ,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AircraftSortie_Abridged_paperStatus_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AircraftSortie_Abridged_paperStatus_Enum {
  /// No description available.
  pub const PUBLISHED: Self = Self(0);
  /// No description available.
  pub const DELETED: Self = Self(1);
  /// No description available.
  pub const UPDATED: Self = Self(2);
  /// No description available.
  pub const READ: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::PUBLISHED,
    Self::DELETED,
    Self::UPDATED,
    Self::READ,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::PUBLISHED => Some("PUBLISHED"),
      Self::DELETED => Some("DELETED"),
      Self::UPDATED => Some("UPDATED"),
      Self::READ => Some("READ"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AircraftSortie_Abridged_paperStatus_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AircraftSortie_Abridged_paperStatus_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AircraftSortie_Abridged_paperStatus_Enum {
    type Output = AircraftSortie_Abridged_paperStatus_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AircraftSortie_Abridged_paperStatus_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AircraftSortie_Abridged_paperStatus_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AircraftSortie_Abridged_paperStatus_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRCRAFT_SORTIE_ABRIDGED_PPR_STATUS_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRCRAFT_SORTIE_ABRIDGED_PPR_STATUS_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRCRAFT_SORTIE_ABRIDGED_PPR_STATUS_ENUM: [AircraftSortie_Abridged_pprStatus_Enum; 4] = [
  AircraftSortie_Abridged_pprStatus_Enum::NOT_REQUIRED,
  AircraftSortie_Abridged_pprStatus_Enum::REQUIRED_NOT_REQUESTED,
  AircraftSortie_Abridged_pprStatus_Enum::GRANTED,
  AircraftSortie_Abridged_pprStatus_Enum::PENDING,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AircraftSortie_Abridged_pprStatus_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AircraftSortie_Abridged_pprStatus_Enum {
  /// No description available.
  pub const NOT_REQUIRED: Self = Self(0);
  /// No description available.
  pub const REQUIRED_NOT_REQUESTED: Self = Self(1);
  /// No description available.
  pub const GRANTED: Self = Self(2);
  /// No description available.
  pub const PENDING: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::NOT_REQUIRED,
    Self::REQUIRED_NOT_REQUESTED,
    Self::GRANTED,
    Self::PENDING,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::NOT_REQUIRED => Some("NOT_REQUIRED"),
      Self::REQUIRED_NOT_REQUESTED => Some("REQUIRED_NOT_REQUESTED"),
      Self::GRANTED => Some("GRANTED"),
      Self::PENDING => Some("PENDING"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AircraftSortie_Abridged_pprStatus_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AircraftSortie_Abridged_pprStatus_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AircraftSortie_Abridged_pprStatus_Enum {
    type Output = AircraftSortie_Abridged_pprStatus_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AircraftSortie_Abridged_pprStatus_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AircraftSortie_Abridged_pprStatus_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AircraftSortie_Abridged_pprStatus_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRCRAFT_SORTIE_ABRIDGED_RVN_REQ_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRCRAFT_SORTIE_ABRIDGED_RVN_REQ_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRCRAFT_SORTIE_ABRIDGED_RVN_REQ_ENUM: [AircraftSortie_Abridged_rvnReq_Enum; 4] = [
  AircraftSortie_Abridged_rvnReq_Enum::N,
  AircraftSortie_Abridged_rvnReq_Enum::R,
  AircraftSortie_Abridged_rvnReq_Enum::C6,
  AircraftSortie_Abridged_rvnReq_Enum::R6,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AircraftSortie_Abridged_rvnReq_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AircraftSortie_Abridged_rvnReq_Enum {
  /// No description available.
  pub const N: Self = Self(0);
  /// No description available.
  pub const R: Self = Self(1);
  /// No description available.
  pub const C6: Self = Self(2);
  /// No description available.
  pub const R6: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::N,
    Self::R,
    Self::C6,
    Self::R6,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::N => Some("N"),
      Self::R => Some("R"),
      Self::C6 => Some("C6"),
      Self::R6 => Some("R6"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AircraftSortie_Abridged_rvnReq_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AircraftSortie_Abridged_rvnReq_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AircraftSortie_Abridged_rvnReq_Enum {
    type Output = AircraftSortie_Abridged_rvnReq_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AircraftSortie_Abridged_rvnReq_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AircraftSortie_Abridged_rvnReq_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AircraftSortie_Abridged_rvnReq_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRCRAFT_SORTIE_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRCRAFT_SORTIE_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRCRAFT_SORTIE_ABRIDGED_DATA_MODE_ENUM: [AircraftSortie_Abridged_dataMode_Enum; 4] = [
  AircraftSortie_Abridged_dataMode_Enum::REAL,
  AircraftSortie_Abridged_dataMode_Enum::TEST,
  AircraftSortie_Abridged_dataMode_Enum::SIMULATED,
  AircraftSortie_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AircraftSortie_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AircraftSortie_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AircraftSortie_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AircraftSortie_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AircraftSortie_Abridged_dataMode_Enum {
    type Output = AircraftSortie_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AircraftSortie_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AircraftSortie_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AircraftSortie_Abridged_dataMode_Enum {}
pub enum AircraftSortie_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information related to the planning, load, status, and deployment or dispatch of one aircraft to carry out a mission.
pub struct AircraftSortie_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AircraftSortie_Abridged<'a> {
  type Inner = AircraftSortie_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AircraftSortie_Abridged<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_ORIGSORTIEID: flatbuffers::VOffsetT = 8;
  pub const VT_IDAIRCRAFT: flatbuffers::VOffsetT = 10;
  pub const VT_AIRCRAFTALTID: flatbuffers::VOffsetT = 12;
  pub const VT_TAILNUMBER: flatbuffers::VOffsetT = 14;
  pub const VT_AIRCRAFTMDS: flatbuffers::VOffsetT = 16;
  pub const VT_AIRCRAFTADSB: flatbuffers::VOffsetT = 18;
  pub const VT_SORTIEDATE: flatbuffers::VOffsetT = 20;
  pub const VT_LINENUMBER: flatbuffers::VOffsetT = 22;
  pub const VT_IDMISSION: flatbuffers::VOffsetT = 24;
  pub const VT_MISSIONID: flatbuffers::VOffsetT = 26;
  pub const VT_AMCMSNNUM: flatbuffers::VOffsetT = 28;
  pub const VT_AMCMSNTYPE: flatbuffers::VOffsetT = 30;
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 32;
  pub const VT_JCSPRIORITY: flatbuffers::VOffsetT = 34;
  pub const VT_PRIMARYSCL: flatbuffers::VOffsetT = 36;
  pub const VT_SECONDARYSCL: flatbuffers::VOffsetT = 38;
  pub const VT_REQCONFIG: flatbuffers::VOffsetT = 40;
  pub const VT_CARGOCONFIG: flatbuffers::VOffsetT = 42;
  pub const VT_FUELREQ: flatbuffers::VOffsetT = 44;
  pub const VT_OXYREQCREW: flatbuffers::VOffsetT = 46;
  pub const VT_OXYONCREW: flatbuffers::VOffsetT = 48;
  pub const VT_OXYREQPAX: flatbuffers::VOffsetT = 50;
  pub const VT_OXYONPAX: flatbuffers::VOffsetT = 52;
  pub const VT_ALERTSTATUSCODE: flatbuffers::VOffsetT = 54;
  pub const VT_ALERTSTATUS: flatbuffers::VOffsetT = 56;
  pub const VT_CURRENTSTATE: flatbuffers::VOffsetT = 58;
  pub const VT_DEPITINERARY: flatbuffers::VOffsetT = 60;
  pub const VT_DEPICAO: flatbuffers::VOffsetT = 62;
  pub const VT_DEPIATA: flatbuffers::VOffsetT = 64;
  pub const VT_DEPFAA: flatbuffers::VOffsetT = 66;
  pub const VT_PLANNEDDEPTIME: flatbuffers::VOffsetT = 68;
  pub const VT_ESTDEPTIME: flatbuffers::VOffsetT = 70;
  pub const VT_ACTUALDEPTIME: flatbuffers::VOffsetT = 72;
  pub const VT_ESTBLOCKOUTTIME: flatbuffers::VOffsetT = 74;
  pub const VT_ACTUALBLOCKOUTTIME: flatbuffers::VOffsetT = 76;
  pub const VT_DEPPURPOSECODE: flatbuffers::VOffsetT = 78;
  pub const VT_ARRITINERARY: flatbuffers::VOffsetT = 80;
  pub const VT_ARRICAO: flatbuffers::VOffsetT = 82;
  pub const VT_ARRIATA: flatbuffers::VOffsetT = 84;
  pub const VT_ARRFAA: flatbuffers::VOffsetT = 86;
  pub const VT_PLANNEDARRTIME: flatbuffers::VOffsetT = 88;
  pub const VT_ESTARRTIME: flatbuffers::VOffsetT = 90;
  pub const VT_ACTUALARRTIME: flatbuffers::VOffsetT = 92;
  pub const VT_ESTBLOCKINTIME: flatbuffers::VOffsetT = 94;
  pub const VT_ACTUALBLOCKINTIME: flatbuffers::VOffsetT = 96;
  pub const VT_ARRPURPOSECODE: flatbuffers::VOffsetT = 98;
  pub const VT_DHD: flatbuffers::VOffsetT = 100;
  pub const VT_DHDREASON: flatbuffers::VOffsetT = 102;
  pub const VT_AIRCRAFTEVENT: flatbuffers::VOffsetT = 104;
  pub const VT_SOE: flatbuffers::VOffsetT = 106;
  pub const VT_LEGNUM: flatbuffers::VOffsetT = 108;
  pub const VT_FLIGHTTIME: flatbuffers::VOffsetT = 110;
  pub const VT_GNDTIME: flatbuffers::VOffsetT = 112;
  pub const VT_RAWFILEURI: flatbuffers::VOffsetT = 114;
  pub const VT_PAPERSVERSION: flatbuffers::VOffsetT = 116;
  pub const VT_FILENAME: flatbuffers::VOffsetT = 118;
  pub const VT_FILESIZE: flatbuffers::VOffsetT = 120;
  pub const VT_PAPERSTATUS: flatbuffers::VOffsetT = 122;
  pub const VT_PPRSTATUS: flatbuffers::VOffsetT = 124;
  pub const VT_MISSIONUPDATE: flatbuffers::VOffsetT = 126;
  pub const VT_DELAYCODE: flatbuffers::VOffsetT = 128;
  pub const VT_COMMANDERNAME: flatbuffers::VOffsetT = 130;
  pub const VT_FMDESKNUM: flatbuffers::VOffsetT = 132;
  pub const VT_FMNAME: flatbuffers::VOffsetT = 134;
  pub const VT_RVNREQ: flatbuffers::VOffsetT = 136;
  pub const VT_PASSENGERS: flatbuffers::VOffsetT = 138;
  pub const VT_PARKINGLOC: flatbuffers::VOffsetT = 140;
  pub const VT_OBJECTIVEREMARKS: flatbuffers::VOffsetT = 142;
  pub const VT_AIRCRAFTREMARKS: flatbuffers::VOffsetT = 144;
  pub const VT_SCHEDULEREMARKS: flatbuffers::VOffsetT = 146;
  pub const VT_RESULTREMARKS: flatbuffers::VOffsetT = 148;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 150;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 152;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 154;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 156;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 158;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 160;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 162;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AircraftSortie_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AircraftSortie_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<AircraftSortie_Abridged<'bldr>> {
    let mut builder = AircraftSortie_AbridgedBuilder::new(_fbb);
    builder.add_gndTime(args.gndTime);
    builder.add_flightTime(args.flightTime);
    builder.add_oxyOnPax(args.oxyOnPax);
    builder.add_oxyReqPax(args.oxyReqPax);
    builder.add_oxyOnCrew(args.oxyOnCrew);
    builder.add_oxyReqCrew(args.oxyReqCrew);
    builder.add_fuelReq(args.fuelReq);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.resultRemarks { builder.add_resultRemarks(x); }
    if let Some(x) = args.scheduleRemarks { builder.add_scheduleRemarks(x); }
    if let Some(x) = args.aircraftRemarks { builder.add_aircraftRemarks(x); }
    if let Some(x) = args.objectiveRemarks { builder.add_objectiveRemarks(x); }
    if let Some(x) = args.parkingLoc { builder.add_parkingLoc(x); }
    builder.add_passengers(args.passengers);
    if let Some(x) = args.fmName { builder.add_fmName(x); }
    if let Some(x) = args.fmDeskNum { builder.add_fmDeskNum(x); }
    if let Some(x) = args.commanderName { builder.add_commanderName(x); }
    if let Some(x) = args.delayCode { builder.add_delayCode(x); }
    if let Some(x) = args.missionUpdate { builder.add_missionUpdate(x); }
    builder.add_filesize(args.filesize);
    if let Some(x) = args.filename { builder.add_filename(x); }
    if let Some(x) = args.papersVersion { builder.add_papersVersion(x); }
    if let Some(x) = args.rawFileURI { builder.add_rawFileURI(x); }
    builder.add_legNum(args.legNum);
    if let Some(x) = args.soe { builder.add_soe(x); }
    if let Some(x) = args.aircraftEvent { builder.add_aircraftEvent(x); }
    if let Some(x) = args.dhdReason { builder.add_dhdReason(x); }
    if let Some(x) = args.dhd { builder.add_dhd(x); }
    if let Some(x) = args.arrPurposeCode { builder.add_arrPurposeCode(x); }
    if let Some(x) = args.actualBlockInTime { builder.add_actualBlockInTime(x); }
    if let Some(x) = args.estBlockInTime { builder.add_estBlockInTime(x); }
    if let Some(x) = args.actualArrTime { builder.add_actualArrTime(x); }
    if let Some(x) = args.estArrTime { builder.add_estArrTime(x); }
    if let Some(x) = args.plannedArrTime { builder.add_plannedArrTime(x); }
    if let Some(x) = args.arrFAA { builder.add_arrFAA(x); }
    if let Some(x) = args.arrIATA { builder.add_arrIATA(x); }
    if let Some(x) = args.arrICAO { builder.add_arrICAO(x); }
    builder.add_arrItinerary(args.arrItinerary);
    if let Some(x) = args.depPurposeCode { builder.add_depPurposeCode(x); }
    if let Some(x) = args.actualBlockOutTime { builder.add_actualBlockOutTime(x); }
    if let Some(x) = args.estBlockOutTime { builder.add_estBlockOutTime(x); }
    if let Some(x) = args.actualDepTime { builder.add_actualDepTime(x); }
    if let Some(x) = args.estDepTime { builder.add_estDepTime(x); }
    if let Some(x) = args.plannedDepTime { builder.add_plannedDepTime(x); }
    if let Some(x) = args.depFAA { builder.add_depFAA(x); }
    if let Some(x) = args.depIATA { builder.add_depIATA(x); }
    if let Some(x) = args.depICAO { builder.add_depICAO(x); }
    builder.add_depItinerary(args.depItinerary);
    if let Some(x) = args.currentState { builder.add_currentState(x); }
    builder.add_alertStatus(args.alertStatus);
    if let Some(x) = args.alertStatusCode { builder.add_alertStatusCode(x); }
    if let Some(x) = args.cargoConfig { builder.add_cargoConfig(x); }
    if let Some(x) = args.reqConfig { builder.add_reqConfig(x); }
    if let Some(x) = args.secondarySCL { builder.add_secondarySCL(x); }
    if let Some(x) = args.primarySCL { builder.add_primarySCL(x); }
    if let Some(x) = args.jcsPriority { builder.add_jcsPriority(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    if let Some(x) = args.amcMsnType { builder.add_amcMsnType(x); }
    if let Some(x) = args.amcMsnNum { builder.add_amcMsnNum(x); }
    if let Some(x) = args.missionId { builder.add_missionId(x); }
    if let Some(x) = args.idMission { builder.add_idMission(x); }
    builder.add_lineNumber(args.lineNumber);
    if let Some(x) = args.sortieDate { builder.add_sortieDate(x); }
    if let Some(x) = args.aircraftADSB { builder.add_aircraftADSB(x); }
    if let Some(x) = args.aircraftMDS { builder.add_aircraftMDS(x); }
    if let Some(x) = args.tailNumber { builder.add_tailNumber(x); }
    if let Some(x) = args.aircraftAltId { builder.add_aircraftAltId(x); }
    if let Some(x) = args.idAircraft { builder.add_idAircraft(x); }
    if let Some(x) = args.origSortieId { builder.add_origSortieId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_rvnReq(args.rvnReq);
    builder.add_pprStatus(args.pprStatus);
    builder.add_paperStatus(args.paperStatus);
    builder.finish()
  }

  pub fn unpack(&self) -> AircraftSortie_AbridgedT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let origSortieId = self.origSortieId().map(|x| {
      x.to_string()
    });
    let idAircraft = self.idAircraft().map(|x| {
      x.to_string()
    });
    let aircraftAltId = self.aircraftAltId().map(|x| {
      x.to_string()
    });
    let tailNumber = self.tailNumber().map(|x| {
      x.to_string()
    });
    let aircraftMDS = self.aircraftMDS().map(|x| {
      x.to_string()
    });
    let aircraftADSB = self.aircraftADSB().map(|x| {
      x.to_string()
    });
    let sortieDate = self.sortieDate().map(|x| {
      x.to_string()
    });
    let lineNumber = self.lineNumber();
    let idMission = self.idMission().map(|x| {
      x.to_string()
    });
    let missionId = self.missionId().map(|x| {
      x.to_string()
    });
    let amcMsnNum = self.amcMsnNum().map(|x| {
      x.to_string()
    });
    let amcMsnType = self.amcMsnType().map(|x| {
      x.to_string()
    });
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let jcsPriority = self.jcsPriority().map(|x| {
      x.to_string()
    });
    let primarySCL = self.primarySCL().map(|x| {
      x.to_string()
    });
    let secondarySCL = self.secondarySCL().map(|x| {
      x.to_string()
    });
    let reqConfig = self.reqConfig().map(|x| {
      x.to_string()
    });
    let cargoConfig = self.cargoConfig().map(|x| {
      x.to_string()
    });
    let fuelReq = self.fuelReq();
    let oxyReqCrew = self.oxyReqCrew();
    let oxyOnCrew = self.oxyOnCrew();
    let oxyReqPax = self.oxyReqPax();
    let oxyOnPax = self.oxyOnPax();
    let alertStatusCode = self.alertStatusCode().map(|x| {
      x.to_string()
    });
    let alertStatus = self.alertStatus();
    let currentState = self.currentState().map(|x| {
      x.to_string()
    });
    let depItinerary = self.depItinerary();
    let depICAO = self.depICAO().map(|x| {
      x.to_string()
    });
    let depIATA = self.depIATA().map(|x| {
      x.to_string()
    });
    let depFAA = self.depFAA().map(|x| {
      x.to_string()
    });
    let plannedDepTime = self.plannedDepTime().map(|x| {
      x.to_string()
    });
    let estDepTime = self.estDepTime().map(|x| {
      x.to_string()
    });
    let actualDepTime = self.actualDepTime().map(|x| {
      x.to_string()
    });
    let estBlockOutTime = self.estBlockOutTime().map(|x| {
      x.to_string()
    });
    let actualBlockOutTime = self.actualBlockOutTime().map(|x| {
      x.to_string()
    });
    let depPurposeCode = self.depPurposeCode().map(|x| {
      x.to_string()
    });
    let arrItinerary = self.arrItinerary();
    let arrICAO = self.arrICAO().map(|x| {
      x.to_string()
    });
    let arrIATA = self.arrIATA().map(|x| {
      x.to_string()
    });
    let arrFAA = self.arrFAA().map(|x| {
      x.to_string()
    });
    let plannedArrTime = self.plannedArrTime().map(|x| {
      x.to_string()
    });
    let estArrTime = self.estArrTime().map(|x| {
      x.to_string()
    });
    let actualArrTime = self.actualArrTime().map(|x| {
      x.to_string()
    });
    let estBlockInTime = self.estBlockInTime().map(|x| {
      x.to_string()
    });
    let actualBlockInTime = self.actualBlockInTime().map(|x| {
      x.to_string()
    });
    let arrPurposeCode = self.arrPurposeCode().map(|x| {
      x.to_string()
    });
    let dhd = self.dhd().map(|x| {
      x.to_string()
    });
    let dhdReason = self.dhdReason().map(|x| {
      x.to_string()
    });
    let aircraftEvent = self.aircraftEvent().map(|x| {
      x.to_string()
    });
    let soe = self.soe().map(|x| {
      x.to_string()
    });
    let legNum = self.legNum();
    let flightTime = self.flightTime();
    let gndTime = self.gndTime();
    let rawFileURI = self.rawFileURI().map(|x| {
      x.to_string()
    });
    let papersVersion = self.papersVersion().map(|x| {
      x.to_string()
    });
    let filename = self.filename().map(|x| {
      x.to_string()
    });
    let filesize = self.filesize();
    let paperStatus = self.paperStatus();
    let pprStatus = self.pprStatus();
    let missionUpdate = self.missionUpdate().map(|x| {
      x.to_string()
    });
    let delayCode = self.delayCode().map(|x| {
      x.to_string()
    });
    let commanderName = self.commanderName().map(|x| {
      x.to_string()
    });
    let fmDeskNum = self.fmDeskNum().map(|x| {
      x.to_string()
    });
    let fmName = self.fmName().map(|x| {
      x.to_string()
    });
    let rvnReq = self.rvnReq();
    let passengers = self.passengers();
    let parkingLoc = self.parkingLoc().map(|x| {
      x.to_string()
    });
    let objectiveRemarks = self.objectiveRemarks().map(|x| {
      x.to_string()
    });
    let aircraftRemarks = self.aircraftRemarks().map(|x| {
      x.to_string()
    });
    let scheduleRemarks = self.scheduleRemarks().map(|x| {
      x.to_string()
    });
    let resultRemarks = self.resultRemarks().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    AircraftSortie_AbridgedT {
      id,
      classificationMarking,
      origSortieId,
      idAircraft,
      aircraftAltId,
      tailNumber,
      aircraftMDS,
      aircraftADSB,
      sortieDate,
      lineNumber,
      idMission,
      missionId,
      amcMsnNum,
      amcMsnType,
      callSign,
      jcsPriority,
      primarySCL,
      secondarySCL,
      reqConfig,
      cargoConfig,
      fuelReq,
      oxyReqCrew,
      oxyOnCrew,
      oxyReqPax,
      oxyOnPax,
      alertStatusCode,
      alertStatus,
      currentState,
      depItinerary,
      depICAO,
      depIATA,
      depFAA,
      plannedDepTime,
      estDepTime,
      actualDepTime,
      estBlockOutTime,
      actualBlockOutTime,
      depPurposeCode,
      arrItinerary,
      arrICAO,
      arrIATA,
      arrFAA,
      plannedArrTime,
      estArrTime,
      actualArrTime,
      estBlockInTime,
      actualBlockInTime,
      arrPurposeCode,
      dhd,
      dhdReason,
      aircraftEvent,
      soe,
      legNum,
      flightTime,
      gndTime,
      rawFileURI,
      papersVersion,
      filename,
      filesize,
      paperStatus,
      pprStatus,
      missionUpdate,
      delayCode,
      commanderName,
      fmDeskNum,
      fmName,
      rvnReq,
      passengers,
      parkingLoc,
      objectiveRemarks,
      aircraftRemarks,
      scheduleRemarks,
      resultRemarks,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: AIRCRAFTSORTIE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The sortie identifier provided by the originating source.
  /// Example: /// Example: A0640
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origSortieId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ORIGSORTIEID, None)}
  }
  /// Unique identifier of the aircraft.
  /// Example: /// Example: REF-AIRCRAFT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idAircraft(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_IDAIRCRAFT, None)}
  }
  /// Alternate Aircraft Identifier provided by source.
  /// Example: /// Example: ALT-AIRCRAFT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn aircraftAltId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_AIRCRAFTALTID, None)}
  }
  /// The tail number of the aircraft assigned to this sortie.
  /// Example: /// Example: Tail_1
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tailNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_TAILNUMBER, None)}
  }
  /// The aircraft Model Design Series designation assigned to this sortie.
  /// Example: /// Example: C017A
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn aircraftMDS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_AIRCRAFTMDS, None)}
  }
  /// The Automatic Dependent Surveillance-Broadcast (ADS-B) device identifier.
  /// Example: /// Example: AE123C
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn aircraftADSB(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_AIRCRAFTADSB, None)}
  }
  /// The scheduled UTC date for this sortie, in ISO 8601 date-only format (ex. YYYY-MM-DD).
  /// Example: /// Example: 2021-01-01
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sortieDate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_SORTIEDATE, None)}
  }
  /// The external system line number of this sortie.
  /// Example: /// Example: 99
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lineNumber(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftSortie_Abridged::VT_LINENUMBER, Some(0)).unwrap()}
  }
  /// The unique identifier of the mission to which this sortie is assigned.
  /// Example: /// Example: fa18d96e-91ea-60da-a7a8-1af6500066c8
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idMission(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_IDMISSION, None)}
  }
  /// The mission ID according to the source system.
  /// Example: /// Example: ABLE
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn missionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_MISSIONID, None)}
  }
  /// The Air Mobility Command (AMC) mission number of the sortie.
  /// Example: /// Example: AJM512571333
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn amcMsnNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_AMCMSNNUM, None)}
  }
  /// The type of mission (e.g. SAAM, CHNL, etc.).
  /// Example: /// Example: SAAM
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn amcMsnType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_AMCMSNTYPE, None)}
  }
  /// The call sign assigned to the aircraft on this sortie.
  /// Example: /// Example: BAKER
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_CALLSIGN, None)}
  }
  /// Joint Chiefs of Staff priority of this sortie.
  /// Example: /// Example: 1A3
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn jcsPriority(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_JCSPRIORITY, None)}
  }
  /// The planned primary Standard Conventional Load of the aircraft for this sortie.
  /// Example: /// Example: ABC
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn primarySCL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_PRIMARYSCL, None)}
  }
  /// The planned secondary Standard Conventional Load of the aircraft for this sortie.
  /// Example: /// Example: ABC
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn secondarySCL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_SECONDARYSCL, None)}
  }
  /// Aircraft configuration required for the mission.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn reqConfig(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_REQCONFIG, None)}
  }
  /// Description of the cargo configuration (e.g. C-1, C-2, C-3, DV-1, DV-2, AE-1, etc.) currently on board the aircraft. Configuration meanings are determined by the data source.
  /// Example: /// Example: C-1
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn cargoConfig(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_CARGOCONFIG, None)}
  }
  /// Mass of fuel required for this leg of the sortie, in kilograms.
  /// Example: /// Example: 20000.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fuelReq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftSortie_Abridged::VT_FUELREQ, Some(0.0)).unwrap()}
  }
  /// Liquid oxygen required on the aircraft for the crew compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn oxyReqCrew(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftSortie_Abridged::VT_OXYREQCREW, Some(0.0)).unwrap()}
  }
  /// Liquid oxygen onboard the aircraft for the crew compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn oxyOnCrew(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftSortie_Abridged::VT_OXYONCREW, Some(0.0)).unwrap()}
  }
  /// Liquid oxygen required on the aircraft for the troop compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn oxyReqPax(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftSortie_Abridged::VT_OXYREQPAX, Some(0.0)).unwrap()}
  }
  /// Liquid oxygen onboard the aircraft for the troop compartment, in liters.
  /// Example: /// Example: 12.3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn oxyOnPax(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftSortie_Abridged::VT_OXYONPAX, Some(0.0)).unwrap()}
  }
  /// The Alert Status code.
  /// Example: /// Example: C1
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn alertStatusCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ALERTSTATUSCODE, None)}
  }
  /// The amount of time allowed between launch order and takeoff, in seconds.
  /// Example: /// Example: 22
  /// Constraints: No constraints specified.
  #[inline]
  pub fn alertStatus(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftSortie_Abridged::VT_ALERTSTATUS, Some(0)).unwrap()}
  }
  /// The current state of this sortie.
  /// Example: /// Example: Park
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn currentState(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_CURRENTSTATE, None)}
  }
  /// The itinerary identifier of the departure location.
  /// Example: /// Example: 100
  /// Constraints: No constraints specified.
  #[inline]
  pub fn depItinerary(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftSortie_Abridged::VT_DEPITINERARY, Some(0)).unwrap()}
  }
  /// The departure International Civil Aviation Organization (ICAO) of this sortie.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn depICAO(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_DEPICAO, None)}
  }
  /// The departure International Aviation Transport Association (IATA) code of this sortie.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn depIATA(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_DEPIATA, None)}
  }
  /// The departure Federal Aviation Administration (FAA) code of this sortie.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn depFAA(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_DEPFAA, None)}
  }
  /// The scheduled time that the Aircraft sortie is planned to depart, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn plannedDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_PLANNEDDEPTIME, None)}
  }
  /// The current estimated time that the Aircraft is planned to depart, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ESTDEPTIME, None)}
  }
  /// The actual departure time, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualDepTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ACTUALDEPTIME, None)}
  }
  /// The estimated time the Aircraft will begin to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T00:55:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estBlockOutTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ESTBLOCKOUTTIME, None)}
  }
  /// The actual time the Aircraft begins to taxi from its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T00:55:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualBlockOutTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ACTUALBLOCKOUTTIME, None)}
  }
  /// Purpose code at the departure location of this sortie.
  /// Example: /// Example: P
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn depPurposeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_DEPPURPOSECODE, None)}
  }
  /// The itinerary identifier of the arrival location.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  #[inline]
  pub fn arrItinerary(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftSortie_Abridged::VT_ARRITINERARY, Some(0)).unwrap()}
  }
  /// The arrival International Civil Aviation Organization (ICAO) of this sortie.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn arrICAO(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ARRICAO, None)}
  }
  /// The arrival International Aviation Transport Association (IATA) code of this sortie.
  /// Example: /// Example: AAA
  /// Constraints: Minimum length = 0, Maximum length = 3
  #[inline]
  pub fn arrIATA(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ARRIATA, None)}
  }
  /// The arrival Federal Aviation Administration (FAA) code of this sortie.
  /// Example: /// Example: FAA1
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn arrFAA(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ARRFAA, None)}
  }
  /// The scheduled time that the Aircraft sortie is planned to arrive,  in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn plannedArrTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_PLANNEDARRTIME, None)}
  }
  /// The current estimated time that the Aircraft is planned to arrive, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estArrTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ESTARRTIME, None)}
  }
  /// The actual arrival time, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualArrTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ACTUALARRTIME, None)}
  }
  /// The estimated time the Aircraft will come to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:06:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estBlockInTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ESTBLOCKINTIME, None)}
  }
  /// The actual time the Aircraft comes to a complete stop in its parking position, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-01T01:06:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn actualBlockInTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ACTUALBLOCKINTIME, None)}
  }
  /// Purpose code at the arrival location of this sortie.
  /// Example: /// Example: O
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn arrPurposeCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ARRPURPOSECODE, None)}
  }
  /// Due home date by which the aircraft must return to its home station, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2021-01-03T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dhd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_DHD, None)}
  }
  /// Reason the aircraft must return to home station by its due home date.
  /// Example: /// Example: Due for maintenance
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn dhdReason(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_DHDREASON, None)}
  }
  /// Aircraft event text.
  /// Example: /// Example: Example event
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn aircraftEvent(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_AIRCRAFTEVENT, None)}
  }
  /// Indicates the group responsible for recording the completion time of the next event in the sequence of events assigned to this sortie (e.g. OPS - Operations, MX - Maintenance, TR - Transportation, etc.).
  /// Example: /// Example: OPS
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn soe(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_SOE, None)}
  }
  /// The leg number of this sortie.
  /// Example: /// Example: 14
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftSortie_Abridged::VT_LEGNUM, Some(0)).unwrap()}
  }
  /// The planned flight time for this sortie, in minutes.
  /// Example: /// Example: 104.5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn flightTime(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftSortie_Abridged::VT_FLIGHTTIME, Some(0.0)).unwrap()}
  }
  /// Scheduled ground time, in minutes.
  /// Example: /// Example: 387.8
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gndTime(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(AircraftSortie_Abridged::VT_GNDTIME, Some(0.0)).unwrap()}
  }
  /// When crew papers are associated to this sortie, the system updates this value. This field is the URI location in the document repository of that raw file. To download the raw file, prepend https://udl-hostname/scs/download?id= to this field's value.
  /// Example: /// Example: Example URI
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn rawFileURI(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_RAWFILEURI, None)}
  }
  /// The version number of the crew paper.
  /// Example: /// Example: 1.1
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn papersVersion(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_PAPERSVERSION, None)}
  }
  /// Name of the uploaded PDF.
  /// Example: /// Example: ExampleFileName
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn filename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_FILENAME, None)}
  }
  /// Size of the supporting PDF, in bytes.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn filesize(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftSortie_Abridged::VT_FILESIZE, Some(0)).unwrap()}
  }
  /// The status of the supporting document.
  /// Example: /// Example: PUBLISHED
  /// Constraints: Minimum length = 0, Maximum length = 9
  #[inline]
  pub fn paperStatus(&self) -> AircraftSortie_Abridged_paperStatus_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AircraftSortie_Abridged_paperStatus_Enum>(AircraftSortie_Abridged::VT_PAPERSTATUS, Some(AircraftSortie_Abridged_paperStatus_Enum::PUBLISHED)).unwrap()}
  }
  /// The prior permission required (PPR) status.
  /// Example: /// Example: PENDING
  /// Constraints: Minimum length = 0, Maximum length = 22
  #[inline]
  pub fn pprStatus(&self) -> AircraftSortie_Abridged_pprStatus_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AircraftSortie_Abridged_pprStatus_Enum>(AircraftSortie_Abridged::VT_PPRSTATUS, Some(AircraftSortie_Abridged_pprStatus_Enum::NOT_REQUIRED)).unwrap()}
  }
  /// Time the associated mission data was last updated in relation to the aircraft assignment, in ISO 8601 UTC format with millisecond precision. If this time is coming from an external system, it may not sync with the latest mission time associated to this record.
  /// Example: /// Example: 2024-09-09T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missionUpdate(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_MISSIONUPDATE, None)}
  }
  /// The primary delay code.
  /// Example: /// Example: 500
  /// Constraints: Minimum length = 0, Maximum length = 10
  #[inline]
  pub fn delayCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_DELAYCODE, None)}
  }
  /// The last name of the aircraft commander.
  /// Example: /// Example: Smith
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn commanderName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_COMMANDERNAME, None)}
  }
  /// Desk phone number of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  /// Example: /// Example: 7198675309
  /// Constraints: Minimum length = 0, Maximum length = 45
  #[inline]
  pub fn fmDeskNum(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_FMDESKNUM, None)}
  }
  /// Last name of the flight manager assigned to the sortie. Null when no flight manager is assigned.
  /// Example: /// Example: Smith
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn fmName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_FMNAME, None)}
  }
  /// Type of Ravens required for this sortie (N - None, R - Raven (Security Team) required, C6 - Consider ravens (Ground time over 6 hours), R6 - Ravens required (Ground time over 6 hours)).
  /// Example: /// Example: R
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn rvnReq(&self) -> AircraftSortie_Abridged_rvnReq_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AircraftSortie_Abridged_rvnReq_Enum>(AircraftSortie_Abridged::VT_RVNREQ, Some(AircraftSortie_Abridged_rvnReq_Enum::N)).unwrap()}
  }
  /// The number of passengers tasked for this sortie.
  /// Example: /// Example: 17
  /// Constraints: No constraints specified.
  #[inline]
  pub fn passengers(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AircraftSortie_Abridged::VT_PASSENGERS, Some(0)).unwrap()}
  }
  /// The POI parking location.
  /// Example: /// Example: KCOS
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn parkingLoc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_PARKINGLOC, None)}
  }
  /// Remarks concerning the sortie objective.
  /// Example: /// Example: Some objective remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn objectiveRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_OBJECTIVEREMARKS, None)}
  }
  /// Remarks concerning the aircraft.
  /// Example: /// Example: Some remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn aircraftRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_AIRCRAFTREMARKS, None)}
  }
  /// Remarks concerning the schedule.
  /// Example: /// Example: Some schedule remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn scheduleRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_SCHEDULEREMARKS, None)}
  }
  /// Remarks concerning the results of this sortie.
  /// Example: /// Example: Some remark about aircraft A
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn resultRemarks(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_RESULTREMARKS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2022-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_CREATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AircraftSortie_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AircraftSortie_Abridged_dataMode_Enum>(AircraftSortie_Abridged::VT_DATAMODE, Some(AircraftSortie_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AircraftSortie_Abridged::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for AircraftSortie_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origSortieId", Self::VT_ORIGSORTIEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idAircraft", Self::VT_IDAIRCRAFT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftAltId", Self::VT_AIRCRAFTALTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tailNumber", Self::VT_TAILNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftMDS", Self::VT_AIRCRAFTMDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftADSB", Self::VT_AIRCRAFTADSB, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sortieDate", Self::VT_SORTIEDATE, false)?
     .visit_field::<i32>("lineNumber", Self::VT_LINENUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idMission", Self::VT_IDMISSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionId", Self::VT_MISSIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("amcMsnNum", Self::VT_AMCMSNNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("amcMsnType", Self::VT_AMCMSNTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("jcsPriority", Self::VT_JCSPRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("primarySCL", Self::VT_PRIMARYSCL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("secondarySCL", Self::VT_SECONDARYSCL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reqConfig", Self::VT_REQCONFIG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cargoConfig", Self::VT_CARGOCONFIG, false)?
     .visit_field::<f64>("fuelReq", Self::VT_FUELREQ, false)?
     .visit_field::<f64>("oxyReqCrew", Self::VT_OXYREQCREW, false)?
     .visit_field::<f64>("oxyOnCrew", Self::VT_OXYONCREW, false)?
     .visit_field::<f64>("oxyReqPax", Self::VT_OXYREQPAX, false)?
     .visit_field::<f64>("oxyOnPax", Self::VT_OXYONPAX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("alertStatusCode", Self::VT_ALERTSTATUSCODE, false)?
     .visit_field::<i32>("alertStatus", Self::VT_ALERTSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("currentState", Self::VT_CURRENTSTATE, false)?
     .visit_field::<i32>("depItinerary", Self::VT_DEPITINERARY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depICAO", Self::VT_DEPICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depIATA", Self::VT_DEPIATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depFAA", Self::VT_DEPFAA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("plannedDepTime", Self::VT_PLANNEDDEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estDepTime", Self::VT_ESTDEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualDepTime", Self::VT_ACTUALDEPTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estBlockOutTime", Self::VT_ESTBLOCKOUTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualBlockOutTime", Self::VT_ACTUALBLOCKOUTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("depPurposeCode", Self::VT_DEPPURPOSECODE, false)?
     .visit_field::<i32>("arrItinerary", Self::VT_ARRITINERARY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrICAO", Self::VT_ARRICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrIATA", Self::VT_ARRIATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrFAA", Self::VT_ARRFAA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("plannedArrTime", Self::VT_PLANNEDARRTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estArrTime", Self::VT_ESTARRTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualArrTime", Self::VT_ACTUALARRTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("estBlockInTime", Self::VT_ESTBLOCKINTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("actualBlockInTime", Self::VT_ACTUALBLOCKINTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("arrPurposeCode", Self::VT_ARRPURPOSECODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dhd", Self::VT_DHD, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dhdReason", Self::VT_DHDREASON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftEvent", Self::VT_AIRCRAFTEVENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("soe", Self::VT_SOE, false)?
     .visit_field::<i32>("legNum", Self::VT_LEGNUM, false)?
     .visit_field::<f64>("flightTime", Self::VT_FLIGHTTIME, false)?
     .visit_field::<f64>("gndTime", Self::VT_GNDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("rawFileURI", Self::VT_RAWFILEURI, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("papersVersion", Self::VT_PAPERSVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("filename", Self::VT_FILENAME, false)?
     .visit_field::<i32>("filesize", Self::VT_FILESIZE, false)?
     .visit_field::<AircraftSortie_Abridged_paperStatus_Enum>("paperStatus", Self::VT_PAPERSTATUS, false)?
     .visit_field::<AircraftSortie_Abridged_pprStatus_Enum>("pprStatus", Self::VT_PPRSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("missionUpdate", Self::VT_MISSIONUPDATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("delayCode", Self::VT_DELAYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("commanderName", Self::VT_COMMANDERNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fmDeskNum", Self::VT_FMDESKNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fmName", Self::VT_FMNAME, false)?
     .visit_field::<AircraftSortie_Abridged_rvnReq_Enum>("rvnReq", Self::VT_RVNREQ, false)?
     .visit_field::<i32>("passengers", Self::VT_PASSENGERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("parkingLoc", Self::VT_PARKINGLOC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("objectiveRemarks", Self::VT_OBJECTIVEREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftRemarks", Self::VT_AIRCRAFTREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("scheduleRemarks", Self::VT_SCHEDULEREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("resultRemarks", Self::VT_RESULTREMARKS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<AircraftSortie_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct AircraftSortie_AbridgedArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origSortieId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idAircraft: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftAltId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tailNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftMDS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftADSB: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sortieDate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub lineNumber: i32,
    pub idMission: Option<flatbuffers::WIPOffset<&'a str>>,
    pub missionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub amcMsnNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub amcMsnType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub jcsPriority: Option<flatbuffers::WIPOffset<&'a str>>,
    pub primarySCL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub secondarySCL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reqConfig: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cargoConfig: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fuelReq: f64,
    pub oxyReqCrew: f64,
    pub oxyOnCrew: f64,
    pub oxyReqPax: f64,
    pub oxyOnPax: f64,
    pub alertStatusCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub alertStatus: i32,
    pub currentState: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depItinerary: i32,
    pub depICAO: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depIATA: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depFAA: Option<flatbuffers::WIPOffset<&'a str>>,
    pub plannedDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualDepTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estBlockOutTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualBlockOutTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub depPurposeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrItinerary: i32,
    pub arrICAO: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrIATA: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrFAA: Option<flatbuffers::WIPOffset<&'a str>>,
    pub plannedArrTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estArrTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualArrTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub estBlockInTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub actualBlockInTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub arrPurposeCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dhd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dhdReason: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftEvent: Option<flatbuffers::WIPOffset<&'a str>>,
    pub soe: Option<flatbuffers::WIPOffset<&'a str>>,
    pub legNum: i32,
    pub flightTime: f64,
    pub gndTime: f64,
    pub rawFileURI: Option<flatbuffers::WIPOffset<&'a str>>,
    pub papersVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filesize: i32,
    pub paperStatus: AircraftSortie_Abridged_paperStatus_Enum,
    pub pprStatus: AircraftSortie_Abridged_pprStatus_Enum,
    pub missionUpdate: Option<flatbuffers::WIPOffset<&'a str>>,
    pub delayCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub commanderName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fmDeskNum: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fmName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub rvnReq: AircraftSortie_Abridged_rvnReq_Enum,
    pub passengers: i32,
    pub parkingLoc: Option<flatbuffers::WIPOffset<&'a str>>,
    pub objectiveRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub scheduleRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub resultRemarks: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AircraftSortie_Abridged_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AircraftSortie_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    AircraftSortie_AbridgedArgs {
      id: None,
      classificationMarking: None,
      origSortieId: None,
      idAircraft: None,
      aircraftAltId: None,
      tailNumber: None,
      aircraftMDS: None,
      aircraftADSB: None,
      sortieDate: None,
      lineNumber: 0,
      idMission: None,
      missionId: None,
      amcMsnNum: None,
      amcMsnType: None,
      callSign: None,
      jcsPriority: None,
      primarySCL: None,
      secondarySCL: None,
      reqConfig: None,
      cargoConfig: None,
      fuelReq: 0.0,
      oxyReqCrew: 0.0,
      oxyOnCrew: 0.0,
      oxyReqPax: 0.0,
      oxyOnPax: 0.0,
      alertStatusCode: None,
      alertStatus: 0,
      currentState: None,
      depItinerary: 0,
      depICAO: None,
      depIATA: None,
      depFAA: None,
      plannedDepTime: None,
      estDepTime: None,
      actualDepTime: None,
      estBlockOutTime: None,
      actualBlockOutTime: None,
      depPurposeCode: None,
      arrItinerary: 0,
      arrICAO: None,
      arrIATA: None,
      arrFAA: None,
      plannedArrTime: None,
      estArrTime: None,
      actualArrTime: None,
      estBlockInTime: None,
      actualBlockInTime: None,
      arrPurposeCode: None,
      dhd: None,
      dhdReason: None,
      aircraftEvent: None,
      soe: None,
      legNum: 0,
      flightTime: 0.0,
      gndTime: 0.0,
      rawFileURI: None,
      papersVersion: None,
      filename: None,
      filesize: 0,
      paperStatus: AircraftSortie_Abridged_paperStatus_Enum::PUBLISHED,
      pprStatus: AircraftSortie_Abridged_pprStatus_Enum::NOT_REQUIRED,
      missionUpdate: None,
      delayCode: None,
      commanderName: None,
      fmDeskNum: None,
      fmName: None,
      rvnReq: AircraftSortie_Abridged_rvnReq_Enum::N,
      passengers: 0,
      parkingLoc: None,
      objectiveRemarks: None,
      aircraftRemarks: None,
      scheduleRemarks: None,
      resultRemarks: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: AircraftSortie_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct AircraftSortie_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AircraftSortie_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_origSortieId(&mut self, origSortieId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ORIGSORTIEID, origSortieId);
  }
  #[inline]
  pub fn add_idAircraft(&mut self, idAircraft: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_IDAIRCRAFT, idAircraft);
  }
  #[inline]
  pub fn add_aircraftAltId(&mut self, aircraftAltId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_AIRCRAFTALTID, aircraftAltId);
  }
  #[inline]
  pub fn add_tailNumber(&mut self, tailNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_TAILNUMBER, tailNumber);
  }
  #[inline]
  pub fn add_aircraftMDS(&mut self, aircraftMDS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_AIRCRAFTMDS, aircraftMDS);
  }
  #[inline]
  pub fn add_aircraftADSB(&mut self, aircraftADSB: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_AIRCRAFTADSB, aircraftADSB);
  }
  #[inline]
  pub fn add_sortieDate(&mut self, sortieDate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_SORTIEDATE, sortieDate);
  }
  #[inline]
  pub fn add_lineNumber(&mut self, lineNumber: i32) {
    self.fbb_.push_slot::<i32>(AircraftSortie_Abridged::VT_LINENUMBER, lineNumber, 0);
  }
  #[inline]
  pub fn add_idMission(&mut self, idMission: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_IDMISSION, idMission);
  }
  #[inline]
  pub fn add_missionId(&mut self, missionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_MISSIONID, missionId);
  }
  #[inline]
  pub fn add_amcMsnNum(&mut self, amcMsnNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_AMCMSNNUM, amcMsnNum);
  }
  #[inline]
  pub fn add_amcMsnType(&mut self, amcMsnType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_AMCMSNTYPE, amcMsnType);
  }
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_jcsPriority(&mut self, jcsPriority: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_JCSPRIORITY, jcsPriority);
  }
  #[inline]
  pub fn add_primarySCL(&mut self, primarySCL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_PRIMARYSCL, primarySCL);
  }
  #[inline]
  pub fn add_secondarySCL(&mut self, secondarySCL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_SECONDARYSCL, secondarySCL);
  }
  #[inline]
  pub fn add_reqConfig(&mut self, reqConfig: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_REQCONFIG, reqConfig);
  }
  #[inline]
  pub fn add_cargoConfig(&mut self, cargoConfig: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_CARGOCONFIG, cargoConfig);
  }
  #[inline]
  pub fn add_fuelReq(&mut self, fuelReq: f64) {
    self.fbb_.push_slot::<f64>(AircraftSortie_Abridged::VT_FUELREQ, fuelReq, 0.0);
  }
  #[inline]
  pub fn add_oxyReqCrew(&mut self, oxyReqCrew: f64) {
    self.fbb_.push_slot::<f64>(AircraftSortie_Abridged::VT_OXYREQCREW, oxyReqCrew, 0.0);
  }
  #[inline]
  pub fn add_oxyOnCrew(&mut self, oxyOnCrew: f64) {
    self.fbb_.push_slot::<f64>(AircraftSortie_Abridged::VT_OXYONCREW, oxyOnCrew, 0.0);
  }
  #[inline]
  pub fn add_oxyReqPax(&mut self, oxyReqPax: f64) {
    self.fbb_.push_slot::<f64>(AircraftSortie_Abridged::VT_OXYREQPAX, oxyReqPax, 0.0);
  }
  #[inline]
  pub fn add_oxyOnPax(&mut self, oxyOnPax: f64) {
    self.fbb_.push_slot::<f64>(AircraftSortie_Abridged::VT_OXYONPAX, oxyOnPax, 0.0);
  }
  #[inline]
  pub fn add_alertStatusCode(&mut self, alertStatusCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ALERTSTATUSCODE, alertStatusCode);
  }
  #[inline]
  pub fn add_alertStatus(&mut self, alertStatus: i32) {
    self.fbb_.push_slot::<i32>(AircraftSortie_Abridged::VT_ALERTSTATUS, alertStatus, 0);
  }
  #[inline]
  pub fn add_currentState(&mut self, currentState: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_CURRENTSTATE, currentState);
  }
  #[inline]
  pub fn add_depItinerary(&mut self, depItinerary: i32) {
    self.fbb_.push_slot::<i32>(AircraftSortie_Abridged::VT_DEPITINERARY, depItinerary, 0);
  }
  #[inline]
  pub fn add_depICAO(&mut self, depICAO: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_DEPICAO, depICAO);
  }
  #[inline]
  pub fn add_depIATA(&mut self, depIATA: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_DEPIATA, depIATA);
  }
  #[inline]
  pub fn add_depFAA(&mut self, depFAA: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_DEPFAA, depFAA);
  }
  #[inline]
  pub fn add_plannedDepTime(&mut self, plannedDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_PLANNEDDEPTIME, plannedDepTime);
  }
  #[inline]
  pub fn add_estDepTime(&mut self, estDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ESTDEPTIME, estDepTime);
  }
  #[inline]
  pub fn add_actualDepTime(&mut self, actualDepTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ACTUALDEPTIME, actualDepTime);
  }
  #[inline]
  pub fn add_estBlockOutTime(&mut self, estBlockOutTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ESTBLOCKOUTTIME, estBlockOutTime);
  }
  #[inline]
  pub fn add_actualBlockOutTime(&mut self, actualBlockOutTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ACTUALBLOCKOUTTIME, actualBlockOutTime);
  }
  #[inline]
  pub fn add_depPurposeCode(&mut self, depPurposeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_DEPPURPOSECODE, depPurposeCode);
  }
  #[inline]
  pub fn add_arrItinerary(&mut self, arrItinerary: i32) {
    self.fbb_.push_slot::<i32>(AircraftSortie_Abridged::VT_ARRITINERARY, arrItinerary, 0);
  }
  #[inline]
  pub fn add_arrICAO(&mut self, arrICAO: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ARRICAO, arrICAO);
  }
  #[inline]
  pub fn add_arrIATA(&mut self, arrIATA: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ARRIATA, arrIATA);
  }
  #[inline]
  pub fn add_arrFAA(&mut self, arrFAA: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ARRFAA, arrFAA);
  }
  #[inline]
  pub fn add_plannedArrTime(&mut self, plannedArrTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_PLANNEDARRTIME, plannedArrTime);
  }
  #[inline]
  pub fn add_estArrTime(&mut self, estArrTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ESTARRTIME, estArrTime);
  }
  #[inline]
  pub fn add_actualArrTime(&mut self, actualArrTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ACTUALARRTIME, actualArrTime);
  }
  #[inline]
  pub fn add_estBlockInTime(&mut self, estBlockInTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ESTBLOCKINTIME, estBlockInTime);
  }
  #[inline]
  pub fn add_actualBlockInTime(&mut self, actualBlockInTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ACTUALBLOCKINTIME, actualBlockInTime);
  }
  #[inline]
  pub fn add_arrPurposeCode(&mut self, arrPurposeCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ARRPURPOSECODE, arrPurposeCode);
  }
  #[inline]
  pub fn add_dhd(&mut self, dhd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_DHD, dhd);
  }
  #[inline]
  pub fn add_dhdReason(&mut self, dhdReason: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_DHDREASON, dhdReason);
  }
  #[inline]
  pub fn add_aircraftEvent(&mut self, aircraftEvent: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_AIRCRAFTEVENT, aircraftEvent);
  }
  #[inline]
  pub fn add_soe(&mut self, soe: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_SOE, soe);
  }
  #[inline]
  pub fn add_legNum(&mut self, legNum: i32) {
    self.fbb_.push_slot::<i32>(AircraftSortie_Abridged::VT_LEGNUM, legNum, 0);
  }
  #[inline]
  pub fn add_flightTime(&mut self, flightTime: f64) {
    self.fbb_.push_slot::<f64>(AircraftSortie_Abridged::VT_FLIGHTTIME, flightTime, 0.0);
  }
  #[inline]
  pub fn add_gndTime(&mut self, gndTime: f64) {
    self.fbb_.push_slot::<f64>(AircraftSortie_Abridged::VT_GNDTIME, gndTime, 0.0);
  }
  #[inline]
  pub fn add_rawFileURI(&mut self, rawFileURI: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_RAWFILEURI, rawFileURI);
  }
  #[inline]
  pub fn add_papersVersion(&mut self, papersVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_PAPERSVERSION, papersVersion);
  }
  #[inline]
  pub fn add_filename(&mut self, filename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_FILENAME, filename);
  }
  #[inline]
  pub fn add_filesize(&mut self, filesize: i32) {
    self.fbb_.push_slot::<i32>(AircraftSortie_Abridged::VT_FILESIZE, filesize, 0);
  }
  #[inline]
  pub fn add_paperStatus(&mut self, paperStatus: AircraftSortie_Abridged_paperStatus_Enum) {
    self.fbb_.push_slot::<AircraftSortie_Abridged_paperStatus_Enum>(AircraftSortie_Abridged::VT_PAPERSTATUS, paperStatus, AircraftSortie_Abridged_paperStatus_Enum::PUBLISHED);
  }
  #[inline]
  pub fn add_pprStatus(&mut self, pprStatus: AircraftSortie_Abridged_pprStatus_Enum) {
    self.fbb_.push_slot::<AircraftSortie_Abridged_pprStatus_Enum>(AircraftSortie_Abridged::VT_PPRSTATUS, pprStatus, AircraftSortie_Abridged_pprStatus_Enum::NOT_REQUIRED);
  }
  #[inline]
  pub fn add_missionUpdate(&mut self, missionUpdate: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_MISSIONUPDATE, missionUpdate);
  }
  #[inline]
  pub fn add_delayCode(&mut self, delayCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_DELAYCODE, delayCode);
  }
  #[inline]
  pub fn add_commanderName(&mut self, commanderName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_COMMANDERNAME, commanderName);
  }
  #[inline]
  pub fn add_fmDeskNum(&mut self, fmDeskNum: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_FMDESKNUM, fmDeskNum);
  }
  #[inline]
  pub fn add_fmName(&mut self, fmName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_FMNAME, fmName);
  }
  #[inline]
  pub fn add_rvnReq(&mut self, rvnReq: AircraftSortie_Abridged_rvnReq_Enum) {
    self.fbb_.push_slot::<AircraftSortie_Abridged_rvnReq_Enum>(AircraftSortie_Abridged::VT_RVNREQ, rvnReq, AircraftSortie_Abridged_rvnReq_Enum::N);
  }
  #[inline]
  pub fn add_passengers(&mut self, passengers: i32) {
    self.fbb_.push_slot::<i32>(AircraftSortie_Abridged::VT_PASSENGERS, passengers, 0);
  }
  #[inline]
  pub fn add_parkingLoc(&mut self, parkingLoc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_PARKINGLOC, parkingLoc);
  }
  #[inline]
  pub fn add_objectiveRemarks(&mut self, objectiveRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_OBJECTIVEREMARKS, objectiveRemarks);
  }
  #[inline]
  pub fn add_aircraftRemarks(&mut self, aircraftRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_AIRCRAFTREMARKS, aircraftRemarks);
  }
  #[inline]
  pub fn add_scheduleRemarks(&mut self, scheduleRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_SCHEDULEREMARKS, scheduleRemarks);
  }
  #[inline]
  pub fn add_resultRemarks(&mut self, resultRemarks: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_RESULTREMARKS, resultRemarks);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AircraftSortie_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<AircraftSortie_Abridged_dataMode_Enum>(AircraftSortie_Abridged::VT_DATAMODE, dataMode, AircraftSortie_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AircraftSortie_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AircraftSortie_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AircraftSortie_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AircraftSortie_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AircraftSortie_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AircraftSortie_Abridged");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("origSortieId", &self.origSortieId());
      ds.field("idAircraft", &self.idAircraft());
      ds.field("aircraftAltId", &self.aircraftAltId());
      ds.field("tailNumber", &self.tailNumber());
      ds.field("aircraftMDS", &self.aircraftMDS());
      ds.field("aircraftADSB", &self.aircraftADSB());
      ds.field("sortieDate", &self.sortieDate());
      ds.field("lineNumber", &self.lineNumber());
      ds.field("idMission", &self.idMission());
      ds.field("missionId", &self.missionId());
      ds.field("amcMsnNum", &self.amcMsnNum());
      ds.field("amcMsnType", &self.amcMsnType());
      ds.field("callSign", &self.callSign());
      ds.field("jcsPriority", &self.jcsPriority());
      ds.field("primarySCL", &self.primarySCL());
      ds.field("secondarySCL", &self.secondarySCL());
      ds.field("reqConfig", &self.reqConfig());
      ds.field("cargoConfig", &self.cargoConfig());
      ds.field("fuelReq", &self.fuelReq());
      ds.field("oxyReqCrew", &self.oxyReqCrew());
      ds.field("oxyOnCrew", &self.oxyOnCrew());
      ds.field("oxyReqPax", &self.oxyReqPax());
      ds.field("oxyOnPax", &self.oxyOnPax());
      ds.field("alertStatusCode", &self.alertStatusCode());
      ds.field("alertStatus", &self.alertStatus());
      ds.field("currentState", &self.currentState());
      ds.field("depItinerary", &self.depItinerary());
      ds.field("depICAO", &self.depICAO());
      ds.field("depIATA", &self.depIATA());
      ds.field("depFAA", &self.depFAA());
      ds.field("plannedDepTime", &self.plannedDepTime());
      ds.field("estDepTime", &self.estDepTime());
      ds.field("actualDepTime", &self.actualDepTime());
      ds.field("estBlockOutTime", &self.estBlockOutTime());
      ds.field("actualBlockOutTime", &self.actualBlockOutTime());
      ds.field("depPurposeCode", &self.depPurposeCode());
      ds.field("arrItinerary", &self.arrItinerary());
      ds.field("arrICAO", &self.arrICAO());
      ds.field("arrIATA", &self.arrIATA());
      ds.field("arrFAA", &self.arrFAA());
      ds.field("plannedArrTime", &self.plannedArrTime());
      ds.field("estArrTime", &self.estArrTime());
      ds.field("actualArrTime", &self.actualArrTime());
      ds.field("estBlockInTime", &self.estBlockInTime());
      ds.field("actualBlockInTime", &self.actualBlockInTime());
      ds.field("arrPurposeCode", &self.arrPurposeCode());
      ds.field("dhd", &self.dhd());
      ds.field("dhdReason", &self.dhdReason());
      ds.field("aircraftEvent", &self.aircraftEvent());
      ds.field("soe", &self.soe());
      ds.field("legNum", &self.legNum());
      ds.field("flightTime", &self.flightTime());
      ds.field("gndTime", &self.gndTime());
      ds.field("rawFileURI", &self.rawFileURI());
      ds.field("papersVersion", &self.papersVersion());
      ds.field("filename", &self.filename());
      ds.field("filesize", &self.filesize());
      ds.field("paperStatus", &self.paperStatus());
      ds.field("pprStatus", &self.pprStatus());
      ds.field("missionUpdate", &self.missionUpdate());
      ds.field("delayCode", &self.delayCode());
      ds.field("commanderName", &self.commanderName());
      ds.field("fmDeskNum", &self.fmDeskNum());
      ds.field("fmName", &self.fmName());
      ds.field("rvnReq", &self.rvnReq());
      ds.field("passengers", &self.passengers());
      ds.field("parkingLoc", &self.parkingLoc());
      ds.field("objectiveRemarks", &self.objectiveRemarks());
      ds.field("aircraftRemarks", &self.aircraftRemarks());
      ds.field("scheduleRemarks", &self.scheduleRemarks());
      ds.field("resultRemarks", &self.resultRemarks());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AircraftSortie_AbridgedT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub origSortieId: Option<String>,
  pub idAircraft: Option<String>,
  pub aircraftAltId: Option<String>,
  pub tailNumber: Option<String>,
  pub aircraftMDS: Option<String>,
  pub aircraftADSB: Option<String>,
  pub sortieDate: Option<String>,
  pub lineNumber: i32,
  pub idMission: Option<String>,
  pub missionId: Option<String>,
  pub amcMsnNum: Option<String>,
  pub amcMsnType: Option<String>,
  pub callSign: Option<String>,
  pub jcsPriority: Option<String>,
  pub primarySCL: Option<String>,
  pub secondarySCL: Option<String>,
  pub reqConfig: Option<String>,
  pub cargoConfig: Option<String>,
  pub fuelReq: f64,
  pub oxyReqCrew: f64,
  pub oxyOnCrew: f64,
  pub oxyReqPax: f64,
  pub oxyOnPax: f64,
  pub alertStatusCode: Option<String>,
  pub alertStatus: i32,
  pub currentState: Option<String>,
  pub depItinerary: i32,
  pub depICAO: Option<String>,
  pub depIATA: Option<String>,
  pub depFAA: Option<String>,
  pub plannedDepTime: Option<String>,
  pub estDepTime: Option<String>,
  pub actualDepTime: Option<String>,
  pub estBlockOutTime: Option<String>,
  pub actualBlockOutTime: Option<String>,
  pub depPurposeCode: Option<String>,
  pub arrItinerary: i32,
  pub arrICAO: Option<String>,
  pub arrIATA: Option<String>,
  pub arrFAA: Option<String>,
  pub plannedArrTime: Option<String>,
  pub estArrTime: Option<String>,
  pub actualArrTime: Option<String>,
  pub estBlockInTime: Option<String>,
  pub actualBlockInTime: Option<String>,
  pub arrPurposeCode: Option<String>,
  pub dhd: Option<String>,
  pub dhdReason: Option<String>,
  pub aircraftEvent: Option<String>,
  pub soe: Option<String>,
  pub legNum: i32,
  pub flightTime: f64,
  pub gndTime: f64,
  pub rawFileURI: Option<String>,
  pub papersVersion: Option<String>,
  pub filename: Option<String>,
  pub filesize: i32,
  pub paperStatus: AircraftSortie_Abridged_paperStatus_Enum,
  pub pprStatus: AircraftSortie_Abridged_pprStatus_Enum,
  pub missionUpdate: Option<String>,
  pub delayCode: Option<String>,
  pub commanderName: Option<String>,
  pub fmDeskNum: Option<String>,
  pub fmName: Option<String>,
  pub rvnReq: AircraftSortie_Abridged_rvnReq_Enum,
  pub passengers: i32,
  pub parkingLoc: Option<String>,
  pub objectiveRemarks: Option<String>,
  pub aircraftRemarks: Option<String>,
  pub scheduleRemarks: Option<String>,
  pub resultRemarks: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: AircraftSortie_Abridged_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for AircraftSortie_AbridgedT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      origSortieId: None,
      idAircraft: None,
      aircraftAltId: None,
      tailNumber: None,
      aircraftMDS: None,
      aircraftADSB: None,
      sortieDate: None,
      lineNumber: 0,
      idMission: None,
      missionId: None,
      amcMsnNum: None,
      amcMsnType: None,
      callSign: None,
      jcsPriority: None,
      primarySCL: None,
      secondarySCL: None,
      reqConfig: None,
      cargoConfig: None,
      fuelReq: 0.0,
      oxyReqCrew: 0.0,
      oxyOnCrew: 0.0,
      oxyReqPax: 0.0,
      oxyOnPax: 0.0,
      alertStatusCode: None,
      alertStatus: 0,
      currentState: None,
      depItinerary: 0,
      depICAO: None,
      depIATA: None,
      depFAA: None,
      plannedDepTime: None,
      estDepTime: None,
      actualDepTime: None,
      estBlockOutTime: None,
      actualBlockOutTime: None,
      depPurposeCode: None,
      arrItinerary: 0,
      arrICAO: None,
      arrIATA: None,
      arrFAA: None,
      plannedArrTime: None,
      estArrTime: None,
      actualArrTime: None,
      estBlockInTime: None,
      actualBlockInTime: None,
      arrPurposeCode: None,
      dhd: None,
      dhdReason: None,
      aircraftEvent: None,
      soe: None,
      legNum: 0,
      flightTime: 0.0,
      gndTime: 0.0,
      rawFileURI: None,
      papersVersion: None,
      filename: None,
      filesize: 0,
      paperStatus: AircraftSortie_Abridged_paperStatus_Enum::PUBLISHED,
      pprStatus: AircraftSortie_Abridged_pprStatus_Enum::NOT_REQUIRED,
      missionUpdate: None,
      delayCode: None,
      commanderName: None,
      fmDeskNum: None,
      fmName: None,
      rvnReq: AircraftSortie_Abridged_rvnReq_Enum::N,
      passengers: 0,
      parkingLoc: None,
      objectiveRemarks: None,
      aircraftRemarks: None,
      scheduleRemarks: None,
      resultRemarks: None,
      createdAt: None,
      createdBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: AircraftSortie_Abridged_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl AircraftSortie_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AircraftSortie_Abridged<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origSortieId = self.origSortieId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idAircraft = self.idAircraft.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftAltId = self.aircraftAltId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tailNumber = self.tailNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftMDS = self.aircraftMDS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftADSB = self.aircraftADSB.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sortieDate = self.sortieDate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let lineNumber = self.lineNumber;
    let idMission = self.idMission.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let missionId = self.missionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let amcMsnNum = self.amcMsnNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let amcMsnType = self.amcMsnType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let jcsPriority = self.jcsPriority.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let primarySCL = self.primarySCL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let secondarySCL = self.secondarySCL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reqConfig = self.reqConfig.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cargoConfig = self.cargoConfig.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fuelReq = self.fuelReq;
    let oxyReqCrew = self.oxyReqCrew;
    let oxyOnCrew = self.oxyOnCrew;
    let oxyReqPax = self.oxyReqPax;
    let oxyOnPax = self.oxyOnPax;
    let alertStatusCode = self.alertStatusCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let alertStatus = self.alertStatus;
    let currentState = self.currentState.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depItinerary = self.depItinerary;
    let depICAO = self.depICAO.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depIATA = self.depIATA.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depFAA = self.depFAA.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let plannedDepTime = self.plannedDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estDepTime = self.estDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualDepTime = self.actualDepTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estBlockOutTime = self.estBlockOutTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualBlockOutTime = self.actualBlockOutTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let depPurposeCode = self.depPurposeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrItinerary = self.arrItinerary;
    let arrICAO = self.arrICAO.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrIATA = self.arrIATA.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrFAA = self.arrFAA.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let plannedArrTime = self.plannedArrTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estArrTime = self.estArrTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualArrTime = self.actualArrTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let estBlockInTime = self.estBlockInTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let actualBlockInTime = self.actualBlockInTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let arrPurposeCode = self.arrPurposeCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dhd = self.dhd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dhdReason = self.dhdReason.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftEvent = self.aircraftEvent.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let soe = self.soe.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let legNum = self.legNum;
    let flightTime = self.flightTime;
    let gndTime = self.gndTime;
    let rawFileURI = self.rawFileURI.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let papersVersion = self.papersVersion.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filename = self.filename.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filesize = self.filesize;
    let paperStatus = self.paperStatus;
    let pprStatus = self.pprStatus;
    let missionUpdate = self.missionUpdate.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let delayCode = self.delayCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let commanderName = self.commanderName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fmDeskNum = self.fmDeskNum.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fmName = self.fmName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let rvnReq = self.rvnReq;
    let passengers = self.passengers;
    let parkingLoc = self.parkingLoc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let objectiveRemarks = self.objectiveRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftRemarks = self.aircraftRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let scheduleRemarks = self.scheduleRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let resultRemarks = self.resultRemarks.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AircraftSortie_Abridged::create(_fbb, &AircraftSortie_AbridgedArgs{
      id,
      classificationMarking,
      origSortieId,
      idAircraft,
      aircraftAltId,
      tailNumber,
      aircraftMDS,
      aircraftADSB,
      sortieDate,
      lineNumber,
      idMission,
      missionId,
      amcMsnNum,
      amcMsnType,
      callSign,
      jcsPriority,
      primarySCL,
      secondarySCL,
      reqConfig,
      cargoConfig,
      fuelReq,
      oxyReqCrew,
      oxyOnCrew,
      oxyReqPax,
      oxyOnPax,
      alertStatusCode,
      alertStatus,
      currentState,
      depItinerary,
      depICAO,
      depIATA,
      depFAA,
      plannedDepTime,
      estDepTime,
      actualDepTime,
      estBlockOutTime,
      actualBlockOutTime,
      depPurposeCode,
      arrItinerary,
      arrICAO,
      arrIATA,
      arrFAA,
      plannedArrTime,
      estArrTime,
      actualArrTime,
      estBlockInTime,
      actualBlockInTime,
      arrPurposeCode,
      dhd,
      dhdReason,
      aircraftEvent,
      soe,
      legNum,
      flightTime,
      gndTime,
      rawFileURI,
      papersVersion,
      filename,
      filesize,
      paperStatus,
      pprStatus,
      missionUpdate,
      delayCode,
      commanderName,
      fmDeskNum,
      fmName,
      rvnReq,
      passengers,
      parkingLoc,
      objectiveRemarks,
      aircraftRemarks,
      scheduleRemarks,
      resultRemarks,
      createdAt,
      createdBy,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AircraftSortie_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_sortie_abridged_unchecked`.
pub fn root_as_aircraft_sortie_abridged(buf: &[u8]) -> Result<AircraftSortie_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AircraftSortie_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AircraftSortie_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_aircraft_sortie_abridged_unchecked`.
pub fn size_prefixed_root_as_aircraft_sortie_abridged(buf: &[u8]) -> Result<AircraftSortie_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AircraftSortie_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AircraftSortie_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_sortie_abridged_unchecked`.
pub fn root_as_aircraft_sortie_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AircraftSortie_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AircraftSortie_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AircraftSortie_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_sortie_abridged_unchecked`.
pub fn size_prefixed_root_as_aircraft_sortie_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AircraftSortie_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AircraftSortie_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AircraftSortie_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AircraftSortie_Abridged`.
pub unsafe fn root_as_aircraft_sortie_abridged_unchecked(buf: &[u8]) -> AircraftSortie_Abridged {
  flatbuffers::root_unchecked::<AircraftSortie_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AircraftSortie_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AircraftSortie_Abridged`.
pub unsafe fn size_prefixed_root_as_aircraft_sortie_abridged_unchecked(buf: &[u8]) -> AircraftSortie_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<AircraftSortie_Abridged>(buf)
}
pub const AIRCRAFT_SORTIE_ABRIDGED_IDENTIFIER: &str = "AIRC";

#[inline]
pub fn aircraft_sortie_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_SORTIE_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn aircraft_sortie_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_SORTIE_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_aircraft_sortie_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AircraftSortie_Abridged<'a>>) {
  fbb.finish(root, Some(AIRCRAFT_SORTIE_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_aircraft_sortie_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AircraftSortie_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRCRAFT_SORTIE_ABRIDGED_IDENTIFIER));
}
