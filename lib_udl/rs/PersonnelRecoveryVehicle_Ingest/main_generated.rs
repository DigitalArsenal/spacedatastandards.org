// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum PersonnelRecoveryVehicle_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information regarding the recovery vehicle.
pub struct PersonnelRecoveryVehicle_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for PersonnelRecoveryVehicle_Ingest<'a> {
  type Inner = PersonnelRecoveryVehicle_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> PersonnelRecoveryVehicle_Ingest<'a> {
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 4;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 6;
  pub const VT_PRIMARYFREQ: flatbuffers::VOffsetT = 8;
  pub const VT_STRENGTH: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    PersonnelRecoveryVehicle_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args PersonnelRecoveryVehicle_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryVehicle_Ingest<'bldr>> {
    let mut builder = PersonnelRecoveryVehicle_IngestBuilder::new(_fbb);
    builder.add_primaryFreq(args.primaryFreq);
    builder.add_strength(args.strength);
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> PersonnelRecoveryVehicle_IngestT {
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let primaryFreq = self.primaryFreq();
    let strength = self.strength();
    PersonnelRecoveryVehicle_IngestT {
      callSign,
      type_,
      primaryFreq,
      strength,
    }
  }

  /// The call sign of the recovery vehicle.
  /// Example: /// Example: FALCO
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryVehicle_Ingest::VT_CALLSIGN, None)}
  }
  /// The particular type of recovery vehicle to be used.
  /// Example: /// Example: C17
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(PersonnelRecoveryVehicle_Ingest::VT_TYPE_, None)}
  }
  /// Primary contact frequency of the recovery vehicle.
  /// Example: /// Example: 34.55
  /// Constraints: No constraints specified.
  #[inline]
  pub fn primaryFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(PersonnelRecoveryVehicle_Ingest::VT_PRIMARYFREQ, Some(0.0)).unwrap()}
  }
  /// The number of objects or units moving as a group and represented as a single entity in this recovery vehicle message. If null, the strength is assumed to represent a single object.  Note that if this recovery derives from a J-series message then special definitions apply for the following values: 13 indicates an estimated 2-7 units, 14 indicates an estimated more than 7 units, and 15 indicates an estimated more than 12 units.
  /// Example: /// Example: 5
  /// Constraints: No constraints specified.
  #[inline]
  pub fn strength(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(PersonnelRecoveryVehicle_Ingest::VT_STRENGTH, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for PersonnelRecoveryVehicle_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<f64>("primaryFreq", Self::VT_PRIMARYFREQ, false)?
     .visit_field::<i32>("strength", Self::VT_STRENGTH, false)?
     .finish();
    Ok(())
  }
}
pub struct PersonnelRecoveryVehicle_IngestArgs<'a> {
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub primaryFreq: f64,
    pub strength: i32,
}
impl<'a> Default for PersonnelRecoveryVehicle_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    PersonnelRecoveryVehicle_IngestArgs {
      callSign: None,
      type_: None,
      primaryFreq: 0.0,
      strength: 0,
    }
  }
}

pub struct PersonnelRecoveryVehicle_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> PersonnelRecoveryVehicle_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryVehicle_Ingest::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(PersonnelRecoveryVehicle_Ingest::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_primaryFreq(&mut self, primaryFreq: f64) {
    self.fbb_.push_slot::<f64>(PersonnelRecoveryVehicle_Ingest::VT_PRIMARYFREQ, primaryFreq, 0.0);
  }
  #[inline]
  pub fn add_strength(&mut self, strength: i32) {
    self.fbb_.push_slot::<i32>(PersonnelRecoveryVehicle_Ingest::VT_STRENGTH, strength, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> PersonnelRecoveryVehicle_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    PersonnelRecoveryVehicle_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<PersonnelRecoveryVehicle_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for PersonnelRecoveryVehicle_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("PersonnelRecoveryVehicle_Ingest");
      ds.field("callSign", &self.callSign());
      ds.field("type_", &self.type_());
      ds.field("primaryFreq", &self.primaryFreq());
      ds.field("strength", &self.strength());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct PersonnelRecoveryVehicle_IngestT {
  pub callSign: Option<String>,
  pub type_: Option<String>,
  pub primaryFreq: f64,
  pub strength: i32,
}
impl Default for PersonnelRecoveryVehicle_IngestT {
  fn default() -> Self {
    Self {
      callSign: None,
      type_: None,
      primaryFreq: 0.0,
      strength: 0,
    }
  }
}
impl PersonnelRecoveryVehicle_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<PersonnelRecoveryVehicle_Ingest<'b>> {
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let primaryFreq = self.primaryFreq;
    let strength = self.strength;
    PersonnelRecoveryVehicle_Ingest::create(_fbb, &PersonnelRecoveryVehicle_IngestArgs{
      callSign,
      type_,
      primaryFreq,
      strength,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `PersonnelRecoveryVehicle_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_vehicle_ingest_unchecked`.
pub fn root_as_personnel_recovery_vehicle_ingest(buf: &[u8]) -> Result<PersonnelRecoveryVehicle_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<PersonnelRecoveryVehicle_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `PersonnelRecoveryVehicle_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_personnel_recovery_vehicle_ingest_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_vehicle_ingest(buf: &[u8]) -> Result<PersonnelRecoveryVehicle_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<PersonnelRecoveryVehicle_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `PersonnelRecoveryVehicle_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_vehicle_ingest_unchecked`.
pub fn root_as_personnel_recovery_vehicle_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryVehicle_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<PersonnelRecoveryVehicle_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `PersonnelRecoveryVehicle_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_personnel_recovery_vehicle_ingest_unchecked`.
pub fn size_prefixed_root_as_personnel_recovery_vehicle_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<PersonnelRecoveryVehicle_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<PersonnelRecoveryVehicle_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a PersonnelRecoveryVehicle_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `PersonnelRecoveryVehicle_Ingest`.
pub unsafe fn root_as_personnel_recovery_vehicle_ingest_unchecked(buf: &[u8]) -> PersonnelRecoveryVehicle_Ingest {
  flatbuffers::root_unchecked::<PersonnelRecoveryVehicle_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed PersonnelRecoveryVehicle_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `PersonnelRecoveryVehicle_Ingest`.
pub unsafe fn size_prefixed_root_as_personnel_recovery_vehicle_ingest_unchecked(buf: &[u8]) -> PersonnelRecoveryVehicle_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<PersonnelRecoveryVehicle_Ingest>(buf)
}
pub const PERSONNEL_RECOVERY_VEHICLE_INGEST_IDENTIFIER: &str = "PERS";

#[inline]
pub fn personnel_recovery_vehicle_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_VEHICLE_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn personnel_recovery_vehicle_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, PERSONNEL_RECOVERY_VEHICLE_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_personnel_recovery_vehicle_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<PersonnelRecoveryVehicle_Ingest<'a>>) {
  fbb.finish(root, Some(PERSONNEL_RECOVERY_VEHICLE_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_personnel_recovery_vehicle_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<PersonnelRecoveryVehicle_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(PERSONNEL_RECOVERY_VEHICLE_INGEST_IDENTIFIER));
}
