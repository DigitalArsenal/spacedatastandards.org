// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum EvacCasualtyInfo_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Identity and medical information on the patient to be evacuated.
pub struct EvacCasualtyInfo_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EvacCasualtyInfo_Full<'a> {
  type Inner = EvacCasualtyInfo_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EvacCasualtyInfo_Full<'a> {
  pub const VT_PRIORITY: flatbuffers::VOffsetT = 4;
  pub const VT_EVACTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_CASUALTYTYPE: flatbuffers::VOffsetT = 8;
  pub const VT_BODYPART: flatbuffers::VOffsetT = 10;
  pub const VT_CONTAMTYPE: flatbuffers::VOffsetT = 12;
  pub const VT_SPECMEDEQUIP: flatbuffers::VOffsetT = 14;
  pub const VT_CASUALTYKEY: flatbuffers::VOffsetT = 16;
  pub const VT_PATIENTSTATUS: flatbuffers::VOffsetT = 18;
  pub const VT_PATIENTIDENTITY: flatbuffers::VOffsetT = 20;
  pub const VT_NATIONALITY: flatbuffers::VOffsetT = 22;
  pub const VT_PAYGRADE: flatbuffers::VOffsetT = 24;
  pub const VT_NAME: flatbuffers::VOffsetT = 26;
  pub const VT_AGE: flatbuffers::VOffsetT = 28;
  pub const VT_GENDER: flatbuffers::VOffsetT = 30;
  pub const VT_LAST4SSN: flatbuffers::VOffsetT = 32;
  pub const VT_BLOODTYPE: flatbuffers::VOffsetT = 34;
  pub const VT_SERVICE: flatbuffers::VOffsetT = 36;
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 38;
  pub const VT_OCCSPECIALITY: flatbuffers::VOffsetT = 40;
  pub const VT_BURIALLOCATION: flatbuffers::VOffsetT = 42;
  pub const VT_COLLECTIONPOINT: flatbuffers::VOffsetT = 44;
  pub const VT_CAREPROVIDERURN: flatbuffers::VOffsetT = 46;
  pub const VT_DISPOSITIONTYPE: flatbuffers::VOffsetT = 48;
  pub const VT_DISPOSITION: flatbuffers::VOffsetT = 50;
  pub const VT_REPORTGEN: flatbuffers::VOffsetT = 52;
  pub const VT_REPORTTIME: flatbuffers::VOffsetT = 54;
  pub const VT_COMMENTS: flatbuffers::VOffsetT = 56;
  pub const VT_ETIOLOGY: flatbuffers::VOffsetT = 58;
  pub const VT_TREATMENT: flatbuffers::VOffsetT = 60;
  pub const VT_VITALSIGNDATA: flatbuffers::VOffsetT = 62;
  pub const VT_HEALTHSTATE: flatbuffers::VOffsetT = 64;
  pub const VT_CONDITION: flatbuffers::VOffsetT = 66;
  pub const VT_MEDICATION: flatbuffers::VOffsetT = 68;
  pub const VT_INJURY: flatbuffers::VOffsetT = 70;
  pub const VT_ALLERGY: flatbuffers::VOffsetT = 72;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EvacCasualtyInfo_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EvacCasualtyInfo_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<EvacCasualtyInfo_Full<'bldr>> {
    let mut builder = EvacCasualtyInfo_FullBuilder::new(_fbb);
    if let Some(x) = args.allergy { builder.add_allergy(x); }
    if let Some(x) = args.injury { builder.add_injury(x); }
    if let Some(x) = args.medication { builder.add_medication(x); }
    if let Some(x) = args.condition { builder.add_condition(x); }
    if let Some(x) = args.healthState { builder.add_healthState(x); }
    if let Some(x) = args.vitalSignData { builder.add_vitalSignData(x); }
    if let Some(x) = args.treatment { builder.add_treatment(x); }
    if let Some(x) = args.etiology { builder.add_etiology(x); }
    if let Some(x) = args.comments { builder.add_comments(x); }
    if let Some(x) = args.reportTime { builder.add_reportTime(x); }
    if let Some(x) = args.reportGen { builder.add_reportGen(x); }
    if let Some(x) = args.disposition { builder.add_disposition(x); }
    if let Some(x) = args.dispositionType { builder.add_dispositionType(x); }
    if let Some(x) = args.careProviderUrn { builder.add_careProviderUrn(x); }
    if let Some(x) = args.collectionPoint { builder.add_collectionPoint(x); }
    if let Some(x) = args.burialLocation { builder.add_burialLocation(x); }
    if let Some(x) = args.occSpeciality { builder.add_occSpeciality(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    if let Some(x) = args.service { builder.add_service(x); }
    if let Some(x) = args.bloodType { builder.add_bloodType(x); }
    if let Some(x) = args.last4SSN { builder.add_last4SSN(x); }
    if let Some(x) = args.gender { builder.add_gender(x); }
    builder.add_age(args.age);
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.payGrade { builder.add_payGrade(x); }
    if let Some(x) = args.nationality { builder.add_nationality(x); }
    if let Some(x) = args.patientIdentity { builder.add_patientIdentity(x); }
    if let Some(x) = args.patientStatus { builder.add_patientStatus(x); }
    if let Some(x) = args.casualtyKey { builder.add_casualtyKey(x); }
    if let Some(x) = args.specMedEquip { builder.add_specMedEquip(x); }
    if let Some(x) = args.contamType { builder.add_contamType(x); }
    if let Some(x) = args.bodyPart { builder.add_bodyPart(x); }
    if let Some(x) = args.casualtyType { builder.add_casualtyType(x); }
    if let Some(x) = args.evacType { builder.add_evacType(x); }
    if let Some(x) = args.priority { builder.add_priority(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> EvacCasualtyInfo_FullT {
    let priority = self.priority().map(|x| {
      x.to_string()
    });
    let evacType = self.evacType().map(|x| {
      x.to_string()
    });
    let casualtyType = self.casualtyType().map(|x| {
      x.to_string()
    });
    let bodyPart = self.bodyPart().map(|x| {
      x.to_string()
    });
    let contamType = self.contamType().map(|x| {
      x.to_string()
    });
    let specMedEquip = self.specMedEquip().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let casualtyKey = self.casualtyKey().map(|x| {
      x.to_string()
    });
    let patientStatus = self.patientStatus().map(|x| {
      x.to_string()
    });
    let patientIdentity = self.patientIdentity().map(|x| {
      x.to_string()
    });
    let nationality = self.nationality().map(|x| {
      x.to_string()
    });
    let payGrade = self.payGrade().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let age = self.age();
    let gender = self.gender().map(|x| {
      x.to_string()
    });
    let last4SSN = self.last4SSN().map(|x| {
      x.to_string()
    });
    let bloodType = self.bloodType().map(|x| {
      x.to_string()
    });
    let service = self.service().map(|x| {
      x.to_string()
    });
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let occSpeciality = self.occSpeciality().map(|x| {
      x.to_string()
    });
    let burialLocation = self.burialLocation().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let collectionPoint = self.collectionPoint().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let careProviderUrn = self.careProviderUrn().map(|x| {
      x.to_string()
    });
    let dispositionType = self.dispositionType().map(|x| {
      x.to_string()
    });
    let disposition = self.disposition().map(|x| {
      x.to_string()
    });
    let reportGen = self.reportGen().map(|x| {
      x.to_string()
    });
    let reportTime = self.reportTime().map(|x| {
      x.to_string()
    });
    let comments = self.comments().map(|x| {
      x.to_string()
    });
    let etiology = self.etiology().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let treatment = self.treatment().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let vitalSignData = self.vitalSignData().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let healthState = self.healthState().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let condition = self.condition().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let medication = self.medication().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let injury = self.injury().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let allergy = self.allergy().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    EvacCasualtyInfo_FullT {
      priority,
      evacType,
      casualtyType,
      bodyPart,
      contamType,
      specMedEquip,
      casualtyKey,
      patientStatus,
      patientIdentity,
      nationality,
      payGrade,
      name,
      age,
      gender,
      last4SSN,
      bloodType,
      service,
      callSign,
      occSpeciality,
      burialLocation,
      collectionPoint,
      careProviderUrn,
      dispositionType,
      disposition,
      reportGen,
      reportTime,
      comments,
      etiology,
      treatment,
      vitalSignData,
      healthState,
      condition,
      medication,
      injury,
      allergy,
    }
  }

  /// The priority of the medevac mission for this patient (URGENT, PRIORITY, ROUTINE, URGENT SURGERY, CONVENIENCE).
  /// Example: /// Example: ROUTINE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn priority(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_PRIORITY, None)}
  }
  /// The required evacuation method for this patient (AIR, GROUND, NOT EVACUATED).
  /// Example: /// Example: GROUND
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn evacType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_EVACTYPE, None)}
  }
  /// The type of medical issue resulting in the need to evacuate the patient (NON BATTLE, CUT, BURN, SICK, FRACTURE, AMPUTATION, PERFORATION, NUCLEAR, EXHAUSTION, BIOLOGICAL, CHEMICAL, SHOCK, PUNCTURE WOUND, OTHER CUT, WOUNDED IN ACTION, DENIAL, COMBAT STRESS).
  /// Example: /// Example: DENTAL
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn casualtyType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_CASUALTYTYPE, None)}
  }
  /// The body part involved for the patient (HEAD, NECK, ABDOMEN, UPPER EXTREMITIES, BACK, FACE, LOWER EXTREMITIES, FRONT, OBSTETRICAL GYNECOLOGICAL, OTHER BODY PART).
  /// Example: /// Example: FACE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn bodyPart(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_BODYPART, None)}
  }
  /// The contamination specified for the patient (NONE, RADIATION, BIOLOGICAL, CHEMICAL).
  /// Example: /// Example: NONE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn contamType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_CONTAMTYPE, None)}
  }
  /// Array specifying if any special equipment is need for each of the evacuation of this patient  (EXTRACTION EQUIPMENT, SEMI RIGID LITTER, BACKBOARD, CERVICAL COLLAR ,JUNGLE PENETRATOR, OXYGEN, WHOLE BLOOD, VENTILATOR, HOIST, NONE).
  /// Example: /// Example: ['OXYGEN', 'HOIST']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn specMedEquip(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_SPECMEDEQUIP, None)}
  }
  /// Optional casualty key.
  /// Example: /// Example: casualty-007
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn casualtyKey(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_CASUALTYKEY, None)}
  }
  /// The patient service status (US MILITARY, US CIVILIAN, NON US MILITARY, NON US CIVILIAN, ENEMY POW).
  /// Example: /// Example: US CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn patientStatus(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_PATIENTSTATUS, None)}
  }
  /// The patient service identity (UNKNOWN MILITARY, UNKNOWN CIVILIAN, FRIEND MILITARY, FRIEND CIVILIAN, NEUTRAL MILITARY, NEUTRAL CIVILIAN, HOSTILE MILITARY, HOSTILE CIVILIAN).
  /// Example: /// Example: FRIEND CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn patientIdentity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_PATIENTIDENTITY, None)}
  }
  /// The country code indicating the citizenship of the patient.
  /// Example: /// Example: US
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn nationality(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_NATIONALITY, None)}
  }
  /// The patient pay grade or rank designation (O-10, O-9, O-8, O-7, O-6, O-5, O-4, O-3, O-2, O-1, CWO-5, CWO-4, CWO-2, CWO-1, E -9, E-8, E-7, E-6, E-5, E-4, E-3, E-2, E-1, NONE, CIVILIAN).
  /// Example: /// Example: CIVILIAN
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn payGrade(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_PAYGRADE, None)}
  }
  /// The patient common or legal name.
  /// Example: /// Example: John Smith
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_NAME, None)}
  }
  /// The patient age, in years.
  /// Example: /// Example: 35
  /// Constraints: No constraints specified.
  #[inline]
  pub fn age(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EvacCasualtyInfo_Full::VT_AGE, Some(0)).unwrap()}
  }
  /// The patient sex (MALE, FEMALE).
  /// Example: /// Example: MALE
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn gender(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_GENDER, None)}
  }
  /// Last 4 characters of the patient social security code, or equivalent.
  /// Example: /// Example: 1234
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn last4SSN(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_LAST4SSN, None)}
  }
  /// The patient blood type (A POS, B POS, AB POS, O POS, A NEG, B NEG, AB NEG, O NEG).
  /// Example: /// Example: O NEG
  /// Constraints: Minimum length = 0, Maximum length = 6
  #[inline]
  pub fn bloodType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_BLOODTYPE, None)}
  }
  /// The patient branch of service (AIR FORCE, ARMY, NAVY, MARINES, CIV, CONTR, UNKNOWN SERVICE).
  /// Example: /// Example: CIV
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn service(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_SERVICE, None)}
  }
  /// The call sign of this patient.
  /// Example: /// Example: SHARK
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_CALLSIGN, None)}
  }
  /// The career field of this patient.
  /// Example: /// Example: Healthcare
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn occSpeciality(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_OCCSPECIALITY, None)}
  }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the burial location.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [-33.123, 150.33, 0.24]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn burialLocation(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_BURIALLOCATION, None)}
  }
  /// Array of the WGS-84 latitude (-90 to 90, negative values south of the equator) in degrees, longitude (-180 to 180, negative values west of Prime Meridian) in degrees, and altitude, in meters, of the collection point.  This array must contain a minimum of 2 elements (latitude and longitude), and may contain an optional 3rd element (altitude).
  /// Example: /// Example: [12.44, 122.55, 0.98]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn collectionPoint(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_COLLECTIONPOINT, None)}
  }
  /// Unique identifier for the patient care provider.
  /// Example: /// Example: CARE_PROVIDER-1
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn careProviderUrn(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_CAREPROVIDERURN, None)}
  }
  /// The expected disposition of this patient (R T D, EVACUATE, EVACUATE TO FORWARD SURGICAL TEAM, EVACUATE TO COMBAT SUPPORT HOSPITAL, EVACUATE TO AERO MEDICAL STAGING FACILITY, EVACUATE TO SUSTAINING BASE MEDICAL TREATMENT FACILITY).
  /// Example: /// Example: EVACUATE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn dispositionType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_DISPOSITIONTYPE, None)}
  }
  /// The patient's general medical state (SICK IN QUARTERS, RETURN TO DUTY, EVACUATE WOUNDED, EVACUATE DECEASED, INTERRED).
  /// Example: /// Example: EVACUATE WOUNDED
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn disposition(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_DISPOSITION, None)}
  }
  /// The method used to generate this medevac report (DEVICE, GROUND COMBAT PERSONNEL, EVACUATION PERSONNEL, ECHELON1 PERSONNEL, ECHELON2 PERSONNEL).
  /// Example: /// Example: DEVICE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn reportGen(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_REPORTGEN, None)}
  }
  /// Datetime of the compiling of the patients casualty report, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reportTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_REPORTTIME, None)}
  }
  /// Additional comments on the  patient's casualty information.
  /// Example: /// Example: Comments relating to this casualty info.
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn comments(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacCasualtyInfo_Full::VT_COMMENTS, None)}
  }
  /// Medical condition causation information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn etiology(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_ETIOLOGY, None)}
  }
  /// Treatment information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn treatment(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_TREATMENT, None)}
  }
  /// Information obtained for vital signs.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vitalSignData(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_VITALSIGNDATA, None)}
  }
  /// Health state information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn healthState(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_HEALTHSTATE, None)}
  }
  /// Health condition information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn condition(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_CONDITION, None)}
  }
  /// Medication specifics.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn medication(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_MEDICATION, None)}
  }
  /// Injury specifics.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn injury(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_INJURY, None)}
  }
  /// Allergy information.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn allergy(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(EvacCasualtyInfo_Full::VT_ALLERGY, None)}
  }
}

impl flatbuffers::Verifiable for EvacCasualtyInfo_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("priority", Self::VT_PRIORITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("evacType", Self::VT_EVACTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("casualtyType", Self::VT_CASUALTYTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("bodyPart", Self::VT_BODYPART, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("contamType", Self::VT_CONTAMTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("specMedEquip", Self::VT_SPECMEDEQUIP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("casualtyKey", Self::VT_CASUALTYKEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("patientStatus", Self::VT_PATIENTSTATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("patientIdentity", Self::VT_PATIENTIDENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("nationality", Self::VT_NATIONALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payGrade", Self::VT_PAYGRADE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<i32>("age", Self::VT_AGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("gender", Self::VT_GENDER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("last4SSN", Self::VT_LAST4SSN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("bloodType", Self::VT_BLOODTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("service", Self::VT_SERVICE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("occSpeciality", Self::VT_OCCSPECIALITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("burialLocation", Self::VT_BURIALLOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("collectionPoint", Self::VT_COLLECTIONPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("careProviderUrn", Self::VT_CAREPROVIDERURN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dispositionType", Self::VT_DISPOSITIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("disposition", Self::VT_DISPOSITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportGen", Self::VT_REPORTGEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("reportTime", Self::VT_REPORTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("comments", Self::VT_COMMENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("etiology", Self::VT_ETIOLOGY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("treatment", Self::VT_TREATMENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("vitalSignData", Self::VT_VITALSIGNDATA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("healthState", Self::VT_HEALTHSTATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("condition", Self::VT_CONDITION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("medication", Self::VT_MEDICATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("injury", Self::VT_INJURY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("allergy", Self::VT_ALLERGY, false)?
     .finish();
    Ok(())
  }
}
pub struct EvacCasualtyInfo_FullArgs<'a> {
    pub priority: Option<flatbuffers::WIPOffset<&'a str>>,
    pub evacType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub casualtyType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bodyPart: Option<flatbuffers::WIPOffset<&'a str>>,
    pub contamType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub specMedEquip: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub casualtyKey: Option<flatbuffers::WIPOffset<&'a str>>,
    pub patientStatus: Option<flatbuffers::WIPOffset<&'a str>>,
    pub patientIdentity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub nationality: Option<flatbuffers::WIPOffset<&'a str>>,
    pub payGrade: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub age: i32,
    pub gender: Option<flatbuffers::WIPOffset<&'a str>>,
    pub last4SSN: Option<flatbuffers::WIPOffset<&'a str>>,
    pub bloodType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub service: Option<flatbuffers::WIPOffset<&'a str>>,
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub occSpeciality: Option<flatbuffers::WIPOffset<&'a str>>,
    pub burialLocation: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub collectionPoint: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub careProviderUrn: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dispositionType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub disposition: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reportGen: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reportTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub comments: Option<flatbuffers::WIPOffset<&'a str>>,
    pub etiology: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub treatment: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub vitalSignData: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub healthState: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub condition: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub medication: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub injury: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub allergy: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for EvacCasualtyInfo_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    EvacCasualtyInfo_FullArgs {
      priority: None,
      evacType: None,
      casualtyType: None,
      bodyPart: None,
      contamType: None,
      specMedEquip: None,
      casualtyKey: None,
      patientStatus: None,
      patientIdentity: None,
      nationality: None,
      payGrade: None,
      name: None,
      age: 0,
      gender: None,
      last4SSN: None,
      bloodType: None,
      service: None,
      callSign: None,
      occSpeciality: None,
      burialLocation: None,
      collectionPoint: None,
      careProviderUrn: None,
      dispositionType: None,
      disposition: None,
      reportGen: None,
      reportTime: None,
      comments: None,
      etiology: None,
      treatment: None,
      vitalSignData: None,
      healthState: None,
      condition: None,
      medication: None,
      injury: None,
      allergy: None,
    }
  }
}

pub struct EvacCasualtyInfo_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EvacCasualtyInfo_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_priority(&mut self, priority: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_PRIORITY, priority);
  }
  #[inline]
  pub fn add_evacType(&mut self, evacType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_EVACTYPE, evacType);
  }
  #[inline]
  pub fn add_casualtyType(&mut self, casualtyType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_CASUALTYTYPE, casualtyType);
  }
  #[inline]
  pub fn add_bodyPart(&mut self, bodyPart: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_BODYPART, bodyPart);
  }
  #[inline]
  pub fn add_contamType(&mut self, contamType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_CONTAMTYPE, contamType);
  }
  #[inline]
  pub fn add_specMedEquip(&mut self, specMedEquip: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_SPECMEDEQUIP, specMedEquip);
  }
  #[inline]
  pub fn add_casualtyKey(&mut self, casualtyKey: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_CASUALTYKEY, casualtyKey);
  }
  #[inline]
  pub fn add_patientStatus(&mut self, patientStatus: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_PATIENTSTATUS, patientStatus);
  }
  #[inline]
  pub fn add_patientIdentity(&mut self, patientIdentity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_PATIENTIDENTITY, patientIdentity);
  }
  #[inline]
  pub fn add_nationality(&mut self, nationality: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_NATIONALITY, nationality);
  }
  #[inline]
  pub fn add_payGrade(&mut self, payGrade: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_PAYGRADE, payGrade);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_age(&mut self, age: i32) {
    self.fbb_.push_slot::<i32>(EvacCasualtyInfo_Full::VT_AGE, age, 0);
  }
  #[inline]
  pub fn add_gender(&mut self, gender: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_GENDER, gender);
  }
  #[inline]
  pub fn add_last4SSN(&mut self, last4SSN: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_LAST4SSN, last4SSN);
  }
  #[inline]
  pub fn add_bloodType(&mut self, bloodType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_BLOODTYPE, bloodType);
  }
  #[inline]
  pub fn add_service(&mut self, service: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_SERVICE, service);
  }
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_occSpeciality(&mut self, occSpeciality: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_OCCSPECIALITY, occSpeciality);
  }
  #[inline]
  pub fn add_burialLocation(&mut self, burialLocation: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_BURIALLOCATION, burialLocation);
  }
  #[inline]
  pub fn add_collectionPoint(&mut self, collectionPoint: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_COLLECTIONPOINT, collectionPoint);
  }
  #[inline]
  pub fn add_careProviderUrn(&mut self, careProviderUrn: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_CAREPROVIDERURN, careProviderUrn);
  }
  #[inline]
  pub fn add_dispositionType(&mut self, dispositionType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_DISPOSITIONTYPE, dispositionType);
  }
  #[inline]
  pub fn add_disposition(&mut self, disposition: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_DISPOSITION, disposition);
  }
  #[inline]
  pub fn add_reportGen(&mut self, reportGen: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_REPORTGEN, reportGen);
  }
  #[inline]
  pub fn add_reportTime(&mut self, reportTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_REPORTTIME, reportTime);
  }
  #[inline]
  pub fn add_comments(&mut self, comments: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_COMMENTS, comments);
  }
  #[inline]
  pub fn add_etiology(&mut self, etiology: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_ETIOLOGY, etiology);
  }
  #[inline]
  pub fn add_treatment(&mut self, treatment: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_TREATMENT, treatment);
  }
  #[inline]
  pub fn add_vitalSignData(&mut self, vitalSignData: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_VITALSIGNDATA, vitalSignData);
  }
  #[inline]
  pub fn add_healthState(&mut self, healthState: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_HEALTHSTATE, healthState);
  }
  #[inline]
  pub fn add_condition(&mut self, condition: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_CONDITION, condition);
  }
  #[inline]
  pub fn add_medication(&mut self, medication: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_MEDICATION, medication);
  }
  #[inline]
  pub fn add_injury(&mut self, injury: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_INJURY, injury);
  }
  #[inline]
  pub fn add_allergy(&mut self, allergy: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacCasualtyInfo_Full::VT_ALLERGY, allergy);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EvacCasualtyInfo_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EvacCasualtyInfo_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EvacCasualtyInfo_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EvacCasualtyInfo_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EvacCasualtyInfo_Full");
      ds.field("priority", &self.priority());
      ds.field("evacType", &self.evacType());
      ds.field("casualtyType", &self.casualtyType());
      ds.field("bodyPart", &self.bodyPart());
      ds.field("contamType", &self.contamType());
      ds.field("specMedEquip", &self.specMedEquip());
      ds.field("casualtyKey", &self.casualtyKey());
      ds.field("patientStatus", &self.patientStatus());
      ds.field("patientIdentity", &self.patientIdentity());
      ds.field("nationality", &self.nationality());
      ds.field("payGrade", &self.payGrade());
      ds.field("name", &self.name());
      ds.field("age", &self.age());
      ds.field("gender", &self.gender());
      ds.field("last4SSN", &self.last4SSN());
      ds.field("bloodType", &self.bloodType());
      ds.field("service", &self.service());
      ds.field("callSign", &self.callSign());
      ds.field("occSpeciality", &self.occSpeciality());
      ds.field("burialLocation", &self.burialLocation());
      ds.field("collectionPoint", &self.collectionPoint());
      ds.field("careProviderUrn", &self.careProviderUrn());
      ds.field("dispositionType", &self.dispositionType());
      ds.field("disposition", &self.disposition());
      ds.field("reportGen", &self.reportGen());
      ds.field("reportTime", &self.reportTime());
      ds.field("comments", &self.comments());
      ds.field("etiology", &self.etiology());
      ds.field("treatment", &self.treatment());
      ds.field("vitalSignData", &self.vitalSignData());
      ds.field("healthState", &self.healthState());
      ds.field("condition", &self.condition());
      ds.field("medication", &self.medication());
      ds.field("injury", &self.injury());
      ds.field("allergy", &self.allergy());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EvacCasualtyInfo_FullT {
  pub priority: Option<String>,
  pub evacType: Option<String>,
  pub casualtyType: Option<String>,
  pub bodyPart: Option<String>,
  pub contamType: Option<String>,
  pub specMedEquip: Option<Vec<String>>,
  pub casualtyKey: Option<String>,
  pub patientStatus: Option<String>,
  pub patientIdentity: Option<String>,
  pub nationality: Option<String>,
  pub payGrade: Option<String>,
  pub name: Option<String>,
  pub age: i32,
  pub gender: Option<String>,
  pub last4SSN: Option<String>,
  pub bloodType: Option<String>,
  pub service: Option<String>,
  pub callSign: Option<String>,
  pub occSpeciality: Option<String>,
  pub burialLocation: Option<Vec<String>>,
  pub collectionPoint: Option<Vec<String>>,
  pub careProviderUrn: Option<String>,
  pub dispositionType: Option<String>,
  pub disposition: Option<String>,
  pub reportGen: Option<String>,
  pub reportTime: Option<String>,
  pub comments: Option<String>,
  pub etiology: Option<Vec<String>>,
  pub treatment: Option<Vec<String>>,
  pub vitalSignData: Option<Vec<String>>,
  pub healthState: Option<Vec<String>>,
  pub condition: Option<Vec<String>>,
  pub medication: Option<Vec<String>>,
  pub injury: Option<Vec<String>>,
  pub allergy: Option<Vec<String>>,
}
impl Default for EvacCasualtyInfo_FullT {
  fn default() -> Self {
    Self {
      priority: None,
      evacType: None,
      casualtyType: None,
      bodyPart: None,
      contamType: None,
      specMedEquip: None,
      casualtyKey: None,
      patientStatus: None,
      patientIdentity: None,
      nationality: None,
      payGrade: None,
      name: None,
      age: 0,
      gender: None,
      last4SSN: None,
      bloodType: None,
      service: None,
      callSign: None,
      occSpeciality: None,
      burialLocation: None,
      collectionPoint: None,
      careProviderUrn: None,
      dispositionType: None,
      disposition: None,
      reportGen: None,
      reportTime: None,
      comments: None,
      etiology: None,
      treatment: None,
      vitalSignData: None,
      healthState: None,
      condition: None,
      medication: None,
      injury: None,
      allergy: None,
    }
  }
}
impl EvacCasualtyInfo_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EvacCasualtyInfo_Full<'b>> {
    let priority = self.priority.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let evacType = self.evacType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let casualtyType = self.casualtyType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let bodyPart = self.bodyPart.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let contamType = self.contamType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let specMedEquip = self.specMedEquip.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let casualtyKey = self.casualtyKey.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let patientStatus = self.patientStatus.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let patientIdentity = self.patientIdentity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let nationality = self.nationality.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let payGrade = self.payGrade.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let age = self.age;
    let gender = self.gender.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let last4SSN = self.last4SSN.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let bloodType = self.bloodType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let service = self.service.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let occSpeciality = self.occSpeciality.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let burialLocation = self.burialLocation.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let collectionPoint = self.collectionPoint.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let careProviderUrn = self.careProviderUrn.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dispositionType = self.dispositionType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let disposition = self.disposition.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reportGen = self.reportGen.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reportTime = self.reportTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let comments = self.comments.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let etiology = self.etiology.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let treatment = self.treatment.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let vitalSignData = self.vitalSignData.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let healthState = self.healthState.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let condition = self.condition.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let medication = self.medication.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let injury = self.injury.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let allergy = self.allergy.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    EvacCasualtyInfo_Full::create(_fbb, &EvacCasualtyInfo_FullArgs{
      priority,
      evacType,
      casualtyType,
      bodyPart,
      contamType,
      specMedEquip,
      casualtyKey,
      patientStatus,
      patientIdentity,
      nationality,
      payGrade,
      name,
      age,
      gender,
      last4SSN,
      bloodType,
      service,
      callSign,
      occSpeciality,
      burialLocation,
      collectionPoint,
      careProviderUrn,
      dispositionType,
      disposition,
      reportGen,
      reportTime,
      comments,
      etiology,
      treatment,
      vitalSignData,
      healthState,
      condition,
      medication,
      injury,
      allergy,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EvacCasualtyInfo_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_casualty_info_full_unchecked`.
pub fn root_as_evac_casualty_info_full(buf: &[u8]) -> Result<EvacCasualtyInfo_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EvacCasualtyInfo_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EvacCasualtyInfo_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_evac_casualty_info_full_unchecked`.
pub fn size_prefixed_root_as_evac_casualty_info_full(buf: &[u8]) -> Result<EvacCasualtyInfo_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EvacCasualtyInfo_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EvacCasualtyInfo_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_casualty_info_full_unchecked`.
pub fn root_as_evac_casualty_info_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EvacCasualtyInfo_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EvacCasualtyInfo_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EvacCasualtyInfo_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_casualty_info_full_unchecked`.
pub fn size_prefixed_root_as_evac_casualty_info_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EvacCasualtyInfo_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EvacCasualtyInfo_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EvacCasualtyInfo_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EvacCasualtyInfo_Full`.
pub unsafe fn root_as_evac_casualty_info_full_unchecked(buf: &[u8]) -> EvacCasualtyInfo_Full {
  flatbuffers::root_unchecked::<EvacCasualtyInfo_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EvacCasualtyInfo_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EvacCasualtyInfo_Full`.
pub unsafe fn size_prefixed_root_as_evac_casualty_info_full_unchecked(buf: &[u8]) -> EvacCasualtyInfo_Full {
  flatbuffers::size_prefixed_root_unchecked::<EvacCasualtyInfo_Full>(buf)
}
pub const EVAC_CASUALTY_INFO_FULL_IDENTIFIER: &str = "EVAC";

#[inline]
pub fn evac_casualty_info_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EVAC_CASUALTY_INFO_FULL_IDENTIFIER, false)
}

#[inline]
pub fn evac_casualty_info_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EVAC_CASUALTY_INFO_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_evac_casualty_info_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EvacCasualtyInfo_Full<'a>>) {
  fbb.finish(root, Some(EVAC_CASUALTY_INFO_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_evac_casualty_info_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EvacCasualtyInfo_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(EVAC_CASUALTY_INFO_FULL_IDENTIFIER));
}
