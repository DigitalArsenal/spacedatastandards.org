// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_AIRCRAFT_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_AIRCRAFT_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_AIRCRAFT_FULL_DATA_MODE_ENUM: [Aircraft_Full_dataMode_Enum; 4] = [
  Aircraft_Full_dataMode_Enum::REAL,
  Aircraft_Full_dataMode_Enum::TEST,
  Aircraft_Full_dataMode_Enum::SIMULATED,
  Aircraft_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Aircraft_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Aircraft_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Aircraft_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Aircraft_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Aircraft_Full_dataMode_Enum {
    type Output = Aircraft_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Aircraft_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Aircraft_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Aircraft_Full_dataMode_Enum {}
pub enum Aircraft_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// General aircraft designation, characteristics, and capabilities. The aircraft schema contains static data of specific aircraft, including tail number, cruise speed, max speed, and minimum required runway length, etc.
pub struct Aircraft_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Aircraft_Full<'a> {
  type Inner = Aircraft_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Aircraft_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_ENTITY: flatbuffers::VOffsetT = 8;
  pub const VT_IDENTITY: flatbuffers::VOffsetT = 10;
  pub const VT_AIRCRAFTMDS: flatbuffers::VOffsetT = 12;
  pub const VT_TAILNUMBER: flatbuffers::VOffsetT = 14;
  pub const VT_SERIALNUMBER: flatbuffers::VOffsetT = 16;
  pub const VT_OWNER: flatbuffers::VOffsetT = 18;
  pub const VT_COMMAND: flatbuffers::VOffsetT = 20;
  pub const VT_CATEGORY: flatbuffers::VOffsetT = 22;
  pub const VT_DTD: flatbuffers::VOffsetT = 24;
  pub const VT_CRUISESPEED: flatbuffers::VOffsetT = 26;
  pub const VT_MAXSPEED: flatbuffers::VOffsetT = 28;
  pub const VT_MINREQRUNWAYM: flatbuffers::VOffsetT = 30;
  pub const VT_MINREQRUNWAYFT: flatbuffers::VOffsetT = 32;
  pub const VT_NOMINALTATIME: flatbuffers::VOffsetT = 34;
  pub const VT_NOTES: flatbuffers::VOffsetT = 36;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 38;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 40;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 42;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 44;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 46;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 48;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 50;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 52;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 54;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Aircraft_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Aircraft_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<Aircraft_Full<'bldr>> {
    let mut builder = Aircraft_FullBuilder::new(_fbb);
    builder.add_maxSpeed(args.maxSpeed);
    builder.add_cruiseSpeed(args.cruiseSpeed);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    builder.add_nominalTATime(args.nominalTATime);
    builder.add_minReqRunwayFt(args.minReqRunwayFt);
    builder.add_minReqRunwayM(args.minReqRunwayM);
    if let Some(x) = args.dtd { builder.add_dtd(x); }
    if let Some(x) = args.category { builder.add_category(x); }
    if let Some(x) = args.command { builder.add_command(x); }
    if let Some(x) = args.owner { builder.add_owner(x); }
    if let Some(x) = args.serialNumber { builder.add_serialNumber(x); }
    if let Some(x) = args.tailNumber { builder.add_tailNumber(x); }
    if let Some(x) = args.aircraftMDS { builder.add_aircraftMDS(x); }
    if let Some(x) = args.idEntity { builder.add_idEntity(x); }
    if let Some(x) = args.entity { builder.add_entity(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> Aircraft_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let entity = self.entity().map(|x| {
      x.to_string()
    });
    let idEntity = self.idEntity().map(|x| {
      x.to_string()
    });
    let aircraftMDS = self.aircraftMDS().map(|x| {
      x.to_string()
    });
    let tailNumber = self.tailNumber().map(|x| {
      x.to_string()
    });
    let serialNumber = self.serialNumber().map(|x| {
      x.to_string()
    });
    let owner = self.owner().map(|x| {
      x.to_string()
    });
    let command = self.command().map(|x| {
      x.to_string()
    });
    let category = self.category().map(|x| {
      x.to_string()
    });
    let dtd = self.dtd().map(|x| {
      x.to_string()
    });
    let cruiseSpeed = self.cruiseSpeed();
    let maxSpeed = self.maxSpeed();
    let minReqRunwayM = self.minReqRunwayM();
    let minReqRunwayFt = self.minReqRunwayFt();
    let nominalTATime = self.nominalTATime();
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    Aircraft_FullT {
      id,
      classificationMarking,
      entity,
      idEntity,
      aircraftMDS,
      tailNumber,
      serialNumber,
      owner,
      command,
      category,
      dtd,
      cruiseSpeed,
      maxSpeed,
      minReqRunwayM,
      minReqRunwayFt,
      nominalTATime,
      notes,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn entity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_ENTITY, None)}
  }
  /// ID of the parent entity for this aircraft.
  /// Example: /// Example: 0167f577-e06c-358e-85aa-0a07a730bdd0
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idEntity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_IDENTITY, None)}
  }
  /// The aircraft Model Design Series (MDS) designation (e.g. E-2C HAWKEYE, F-15 EAGLE, KC-130 HERCULES, etc.) of this aircraft.  Intended as, but not constrained to, MIL-STD-6016 environment dependent specific type designations.
  /// Example: /// Example: E-2C HAWKEYE
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn aircraftMDS(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_AIRCRAFTMDS, None)}
  }
  /// The tail number of this aircraft.
  /// Example: /// Example: N702JG
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn tailNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_TAILNUMBER, None)}
  }
  /// Full serial number of the aircraft.
  /// Example: /// Example: 7007187
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn serialNumber(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_SERIALNUMBER, None)}
  }
  /// The wing or unit that owns the aircraft.
  /// Example: /// Example: 437AW
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn owner(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_OWNER, None)}
  }
  /// The Air Force major command (MAJCOM) overseeing the aircraft.
  /// Example: /// Example: HQACC
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn command(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_COMMAND, None)}
  }
  /// The category of aircraft (e.g. M = Military, C = Commercial).
  /// Example: /// Example: M
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn category(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_CATEGORY, None)}
  }
  /// Military data network data transfer device ID for this aircraft.
  /// Example: /// Example: 005
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn dtd(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_DTD, None)}
  }
  /// The cruise speed of the aircraft, in kilometers/hour.
  /// Example: /// Example: 915
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cruiseSpeed(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Aircraft_Full::VT_CRUISESPEED, Some(0.0)).unwrap()}
  }
  /// The maximum air speed of the aircraft, in kilometers/hour.
  /// Example: /// Example: 2655.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxSpeed(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Aircraft_Full::VT_MAXSPEED, Some(0.0)).unwrap()}
  }
  /// The minimum length of runway required to land this aircraft, in meters. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 1000
  /// Constraints: No constraints specified.
  #[inline]
  pub fn minReqRunwayM(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Aircraft_Full::VT_MINREQRUNWAYM, Some(0)).unwrap()}
  }
  /// The minimum length of runway required to land this aircraft, in feet. Note: The corresponding equivalent field is not converted by the UDL and may or may not be supplied by the provider. The provider/consumer is responsible for all unit conversions.
  /// Example: /// Example: 3000
  /// Constraints: No constraints specified.
  #[inline]
  pub fn minReqRunwayFt(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Aircraft_Full::VT_MINREQRUNWAYFT, Some(0)).unwrap()}
  }
  /// The nominal turnaround time for this aircraft, in minutes.
  /// Example: /// Example: 500
  /// Constraints: No constraints specified.
  #[inline]
  pub fn nominalTATime(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Aircraft_Full::VT_NOMINALTATIME, Some(0)).unwrap()}
  }
  /// Optional notes/comments for this aircraft.
  /// Example: /// Example: Notes for this aircraft
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_NOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_UPDATEDBY, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_SOURCEDL, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_ORIGIN, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn dataMode(&self) -> Aircraft_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Aircraft_Full_dataMode_Enum>(Aircraft_Full::VT_DATAMODE, Some(Aircraft_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Aircraft_Full::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for Aircraft_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("entity", Self::VT_ENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idEntity", Self::VT_IDENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("aircraftMDS", Self::VT_AIRCRAFTMDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("tailNumber", Self::VT_TAILNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("serialNumber", Self::VT_SERIALNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("owner", Self::VT_OWNER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("command", Self::VT_COMMAND, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("category", Self::VT_CATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dtd", Self::VT_DTD, false)?
     .visit_field::<f64>("cruiseSpeed", Self::VT_CRUISESPEED, false)?
     .visit_field::<f64>("maxSpeed", Self::VT_MAXSPEED, false)?
     .visit_field::<i32>("minReqRunwayM", Self::VT_MINREQRUNWAYM, false)?
     .visit_field::<i32>("minReqRunwayFt", Self::VT_MINREQRUNWAYFT, false)?
     .visit_field::<i32>("nominalTATime", Self::VT_NOMINALTATIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<Aircraft_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct Aircraft_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub entity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idEntity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub aircraftMDS: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tailNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub serialNumber: Option<flatbuffers::WIPOffset<&'a str>>,
    pub owner: Option<flatbuffers::WIPOffset<&'a str>>,
    pub command: Option<flatbuffers::WIPOffset<&'a str>>,
    pub category: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dtd: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cruiseSpeed: f64,
    pub maxSpeed: f64,
    pub minReqRunwayM: i32,
    pub minReqRunwayFt: i32,
    pub nominalTATime: i32,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Aircraft_Full_dataMode_Enum,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Aircraft_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    Aircraft_FullArgs {
      id: None,
      classificationMarking: None,
      entity: None,
      idEntity: None,
      aircraftMDS: None,
      tailNumber: None,
      serialNumber: None,
      owner: None,
      command: None,
      category: None,
      dtd: None,
      cruiseSpeed: 0.0,
      maxSpeed: 0.0,
      minReqRunwayM: 0,
      minReqRunwayFt: 0,
      nominalTATime: 0,
      notes: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: Aircraft_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}

pub struct Aircraft_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Aircraft_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_entity(&mut self, entity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_ENTITY, entity);
  }
  #[inline]
  pub fn add_idEntity(&mut self, idEntity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_IDENTITY, idEntity);
  }
  #[inline]
  pub fn add_aircraftMDS(&mut self, aircraftMDS: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_AIRCRAFTMDS, aircraftMDS);
  }
  #[inline]
  pub fn add_tailNumber(&mut self, tailNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_TAILNUMBER, tailNumber);
  }
  #[inline]
  pub fn add_serialNumber(&mut self, serialNumber: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_SERIALNUMBER, serialNumber);
  }
  #[inline]
  pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_OWNER, owner);
  }
  #[inline]
  pub fn add_command(&mut self, command: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_COMMAND, command);
  }
  #[inline]
  pub fn add_category(&mut self, category: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_CATEGORY, category);
  }
  #[inline]
  pub fn add_dtd(&mut self, dtd: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_DTD, dtd);
  }
  #[inline]
  pub fn add_cruiseSpeed(&mut self, cruiseSpeed: f64) {
    self.fbb_.push_slot::<f64>(Aircraft_Full::VT_CRUISESPEED, cruiseSpeed, 0.0);
  }
  #[inline]
  pub fn add_maxSpeed(&mut self, maxSpeed: f64) {
    self.fbb_.push_slot::<f64>(Aircraft_Full::VT_MAXSPEED, maxSpeed, 0.0);
  }
  #[inline]
  pub fn add_minReqRunwayM(&mut self, minReqRunwayM: i32) {
    self.fbb_.push_slot::<i32>(Aircraft_Full::VT_MINREQRUNWAYM, minReqRunwayM, 0);
  }
  #[inline]
  pub fn add_minReqRunwayFt(&mut self, minReqRunwayFt: i32) {
    self.fbb_.push_slot::<i32>(Aircraft_Full::VT_MINREQRUNWAYFT, minReqRunwayFt, 0);
  }
  #[inline]
  pub fn add_nominalTATime(&mut self, nominalTATime: i32) {
    self.fbb_.push_slot::<i32>(Aircraft_Full::VT_NOMINALTATIME, nominalTATime, 0);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Aircraft_Full_dataMode_Enum) {
    self.fbb_.push_slot::<Aircraft_Full_dataMode_Enum>(Aircraft_Full::VT_DATAMODE, dataMode, Aircraft_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Aircraft_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Aircraft_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Aircraft_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Aircraft_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Aircraft_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Aircraft_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("entity", &self.entity());
      ds.field("idEntity", &self.idEntity());
      ds.field("aircraftMDS", &self.aircraftMDS());
      ds.field("tailNumber", &self.tailNumber());
      ds.field("serialNumber", &self.serialNumber());
      ds.field("owner", &self.owner());
      ds.field("command", &self.command());
      ds.field("category", &self.category());
      ds.field("dtd", &self.dtd());
      ds.field("cruiseSpeed", &self.cruiseSpeed());
      ds.field("maxSpeed", &self.maxSpeed());
      ds.field("minReqRunwayM", &self.minReqRunwayM());
      ds.field("minReqRunwayFt", &self.minReqRunwayFt());
      ds.field("nominalTATime", &self.nominalTATime());
      ds.field("notes", &self.notes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("dataMode", &self.dataMode());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Aircraft_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub entity: Option<String>,
  pub idEntity: Option<String>,
  pub aircraftMDS: Option<String>,
  pub tailNumber: Option<String>,
  pub serialNumber: Option<String>,
  pub owner: Option<String>,
  pub command: Option<String>,
  pub category: Option<String>,
  pub dtd: Option<String>,
  pub cruiseSpeed: f64,
  pub maxSpeed: f64,
  pub minReqRunwayM: i32,
  pub minReqRunwayFt: i32,
  pub nominalTATime: i32,
  pub notes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub sourceDL: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub dataMode: Aircraft_Full_dataMode_Enum,
  pub origNetwork: Option<String>,
}
impl Default for Aircraft_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      entity: None,
      idEntity: None,
      aircraftMDS: None,
      tailNumber: None,
      serialNumber: None,
      owner: None,
      command: None,
      category: None,
      dtd: None,
      cruiseSpeed: 0.0,
      maxSpeed: 0.0,
      minReqRunwayM: 0,
      minReqRunwayFt: 0,
      nominalTATime: 0,
      notes: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      sourceDL: None,
      source: None,
      origin: None,
      dataMode: Aircraft_Full_dataMode_Enum::REAL,
      origNetwork: None,
    }
  }
}
impl Aircraft_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Aircraft_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let entity = self.entity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idEntity = self.idEntity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let aircraftMDS = self.aircraftMDS.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tailNumber = self.tailNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let serialNumber = self.serialNumber.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let owner = self.owner.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let command = self.command.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let category = self.category.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dtd = self.dtd.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cruiseSpeed = self.cruiseSpeed;
    let maxSpeed = self.maxSpeed;
    let minReqRunwayM = self.minReqRunwayM;
    let minReqRunwayFt = self.minReqRunwayFt;
    let nominalTATime = self.nominalTATime;
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Aircraft_Full::create(_fbb, &Aircraft_FullArgs{
      id,
      classificationMarking,
      entity,
      idEntity,
      aircraftMDS,
      tailNumber,
      serialNumber,
      owner,
      command,
      category,
      dtd,
      cruiseSpeed,
      maxSpeed,
      minReqRunwayM,
      minReqRunwayFt,
      nominalTATime,
      notes,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      sourceDL,
      source,
      origin,
      dataMode,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Aircraft_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_full_unchecked`.
pub fn root_as_aircraft_full(buf: &[u8]) -> Result<Aircraft_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Aircraft_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Aircraft_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_aircraft_full_unchecked`.
pub fn size_prefixed_root_as_aircraft_full(buf: &[u8]) -> Result<Aircraft_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Aircraft_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Aircraft_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_full_unchecked`.
pub fn root_as_aircraft_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Aircraft_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Aircraft_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Aircraft_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aircraft_full_unchecked`.
pub fn size_prefixed_root_as_aircraft_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Aircraft_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Aircraft_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Aircraft_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Aircraft_Full`.
pub unsafe fn root_as_aircraft_full_unchecked(buf: &[u8]) -> Aircraft_Full {
  flatbuffers::root_unchecked::<Aircraft_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Aircraft_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Aircraft_Full`.
pub unsafe fn size_prefixed_root_as_aircraft_full_unchecked(buf: &[u8]) -> Aircraft_Full {
  flatbuffers::size_prefixed_root_unchecked::<Aircraft_Full>(buf)
}
pub const AIRCRAFT_FULL_IDENTIFIER: &str = "AIRC";

#[inline]
pub fn aircraft_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_FULL_IDENTIFIER, false)
}

#[inline]
pub fn aircraft_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRCRAFT_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_aircraft_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Aircraft_Full<'a>>) {
  fbb.finish(root, Some(AIRCRAFT_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_aircraft_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Aircraft_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRCRAFT_FULL_IDENTIFIER));
}
