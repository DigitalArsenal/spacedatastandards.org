// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum MtiDwell_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// A grouping of zero or more target reports for which the sensor provides a single time, sensor position, reference position on the ground with simple estimates for the observed area at the reported time, and other pertinent data.
pub struct MtiDwell_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for MtiDwell_Abridged<'a> {
  type Inner = MtiDwell_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> MtiDwell_Abridged<'a> {
  pub const VT_D2: flatbuffers::VOffsetT = 4;
  pub const VT_D3: flatbuffers::VOffsetT = 6;
  pub const VT_D4: flatbuffers::VOffsetT = 8;
  pub const VT_D5: flatbuffers::VOffsetT = 10;
  pub const VT_D6: flatbuffers::VOffsetT = 12;
  pub const VT_D7: flatbuffers::VOffsetT = 14;
  pub const VT_D8: flatbuffers::VOffsetT = 16;
  pub const VT_D9: flatbuffers::VOffsetT = 18;
  pub const VT_D10: flatbuffers::VOffsetT = 20;
  pub const VT_D11: flatbuffers::VOffsetT = 22;
  pub const VT_D12: flatbuffers::VOffsetT = 24;
  pub const VT_D13: flatbuffers::VOffsetT = 26;
  pub const VT_D14: flatbuffers::VOffsetT = 28;
  pub const VT_D15: flatbuffers::VOffsetT = 30;
  pub const VT_D16: flatbuffers::VOffsetT = 32;
  pub const VT_D17: flatbuffers::VOffsetT = 34;
  pub const VT_D18: flatbuffers::VOffsetT = 36;
  pub const VT_D19: flatbuffers::VOffsetT = 38;
  pub const VT_D20: flatbuffers::VOffsetT = 40;
  pub const VT_D21: flatbuffers::VOffsetT = 42;
  pub const VT_D22: flatbuffers::VOffsetT = 44;
  pub const VT_D23: flatbuffers::VOffsetT = 46;
  pub const VT_D24: flatbuffers::VOffsetT = 48;
  pub const VT_D25: flatbuffers::VOffsetT = 50;
  pub const VT_D26: flatbuffers::VOffsetT = 52;
  pub const VT_D27: flatbuffers::VOffsetT = 54;
  pub const VT_D28: flatbuffers::VOffsetT = 56;
  pub const VT_D29: flatbuffers::VOffsetT = 58;
  pub const VT_D30: flatbuffers::VOffsetT = 60;
  pub const VT_D31: flatbuffers::VOffsetT = 62;
  pub const VT_D32: flatbuffers::VOffsetT = 64;
  pub const VT_DWELLTS: flatbuffers::VOffsetT = 66;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    MtiDwell_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args MtiDwell_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<MtiDwell_Abridged<'bldr>> {
    let mut builder = MtiDwell_AbridgedBuilder::new(_fbb);
    builder.add_d30(args.d30);
    builder.add_d29(args.d29);
    builder.add_d28(args.d28);
    builder.add_d27(args.d27);
    builder.add_d26(args.d26);
    builder.add_d25(args.d25);
    builder.add_d24(args.d24);
    builder.add_d23(args.d23);
    builder.add_d22(args.d22);
    builder.add_d21(args.d21);
    builder.add_d15(args.d15);
    builder.add_d11(args.d11);
    builder.add_d10(args.d10);
    builder.add_d8(args.d8);
    builder.add_d7(args.d7);
    builder.add_d6(args.d6);
    if let Some(x) = args.dwellts { builder.add_dwellts(x); }
    if let Some(x) = args.d32 { builder.add_d32(x); }
    builder.add_d31(args.d31);
    builder.add_d20(args.d20);
    builder.add_d19(args.d19);
    builder.add_d18(args.d18);
    builder.add_d17(args.d17);
    builder.add_d16(args.d16);
    builder.add_d14(args.d14);
    builder.add_d13(args.d13);
    builder.add_d12(args.d12);
    builder.add_d9(args.d9);
    builder.add_d5(args.d5);
    builder.add_d3(args.d3);
    builder.add_d2(args.d2);
    builder.add_d4(args.d4);
    builder.finish()
  }

  pub fn unpack(&self) -> MtiDwell_AbridgedT {
    let d2 = self.d2();
    let d3 = self.d3();
    let d4 = self.d4();
    let d5 = self.d5();
    let d6 = self.d6();
    let d7 = self.d7();
    let d8 = self.d8();
    let d9 = self.d9();
    let d10 = self.d10();
    let d11 = self.d11();
    let d12 = self.d12();
    let d13 = self.d13();
    let d14 = self.d14();
    let d15 = self.d15();
    let d16 = self.d16();
    let d17 = self.d17();
    let d18 = self.d18();
    let d19 = self.d19();
    let d20 = self.d20();
    let d21 = self.d21();
    let d22 = self.d22();
    let d23 = self.d23();
    let d24 = self.d24();
    let d25 = self.d25();
    let d26 = self.d26();
    let d27 = self.d27();
    let d28 = self.d28();
    let d29 = self.d29();
    let d30 = self.d30();
    let d31 = self.d31();
    let d32 = self.d32().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let dwellts = self.dwellts().map(|x| {
      x.to_string()
    });
    MtiDwell_AbridgedT {
      d2,
      d3,
      d4,
      d5,
      d6,
      d7,
      d8,
      d9,
      d10,
      d11,
      d12,
      d13,
      d14,
      d15,
      d16,
      d17,
      d18,
      d19,
      d20,
      d21,
      d22,
      d23,
      d24,
      d25,
      d26,
      d27,
      d28,
      d29,
      d30,
      d31,
      d32,
      dwellts,
    }
  }

  /// Sequential count of a revisit of the bounding area in the last sent Job Definition Segment, where a Revisit Index of '0' indicates the first revisit.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d2(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D2, Some(0)).unwrap()}
  }
  /// Temporally sequential count of a dwell within the revisit of a particular bounding area for a given job ID.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d3(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D3, Some(0)).unwrap()}
  }
  /// Flag indicating the last dwell of the revisit.
  /// Example: /// Example: False
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d4(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(MtiDwell_Abridged::VT_D4, Some(false)).unwrap()}
  }
  /// Count of the total number of targets reported during this dwell and sent in this Dwell Segment.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d5(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D5, Some(0)).unwrap()}
  }
  /// Elapsed time, expressed in milliseconds, from midnight at the beginning of the day specified in the Reference Time fields (missionRefTime) of the Mission Segment.
  /// Example: /// Example: 1234567890
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d6(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(MtiDwell_Abridged::VT_D6, Some(0)).unwrap()}
  }
  /// North-South position of the sensor at the temporal center of the dwell, in degrees.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d7(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D7, Some(0.0)).unwrap()}
  }
  /// The East-West position of the sensor at the temporal center of the dwell, in degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d8(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D8, Some(0.0)).unwrap()}
  }
  /// The altitude of the sensor at temporal center of the dwell, above the WGS 84 ellipsoid, expressed in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d9(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D9, Some(0)).unwrap()}
  }
  /// Factor which modifies the value of the reported target latitude (Delta Latitude, field D32.4).
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d10(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D10, Some(0.0)).unwrap()}
  }
  /// Factor which modifies the value of the reported target longitude (Delta Longitude, field D32.5).
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d11(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D11, Some(0.0)).unwrap()}
  }
  /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured along the sensor track direction (field D15), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d12(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D12, Some(0)).unwrap()}
  }
  /// Standard deviation in the estimated horizontal sensor location at the time of the dwell, measured orthogonal to the sensor track direction (field D15), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d13(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D13, Some(0)).unwrap()}
  }
  /// Standard deviation of the sensor altitude estimate (field D9), in centimeters.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d14(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D14, Some(0)).unwrap()}
  }
  /// Ground track of the sensor at the time of the dwell, as the angle in degrees (clockwise) from True North.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d15(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D15, Some(0.0)).unwrap()}
  }
  /// Ground speed of the sensor at the time of the dwell, in millimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d16(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D16, Some(0)).unwrap()}
  }
  /// Velocity of the sensor in the vertical direction, in decimeters per second.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d17(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D17, Some(0)).unwrap()}
  }
  /// Standard deviation of the estimate of the sensor track, in degrees.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d18(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D18, Some(0)).unwrap()}
  }
  /// Standard deviation of estimate of the sensor speed, in millimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d19(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D19, Some(0)).unwrap()}
  }
  /// Standard deviation of estimate of the sensor vertical velocity, expressed in centimeters per second.
  /// Example: /// Example: 12
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d20(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D20, Some(0)).unwrap()}
  }
  /// Heading of the platform at the time of the dwell, as the angle in degrees (clockwise) from True North to the roll axis of the platform.
  /// Example: /// Example: 1.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d21(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D21, Some(0.0)).unwrap()}
  }
  /// Pitch angle of the platform at the time of the dwell, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d22(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D22, Some(0.0)).unwrap()}
  }
  /// Roll angle of the platform at the time of the dwell, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d23(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D23, Some(0.0)).unwrap()}
  }
  /// The North-South position of the center of the dwell area, expressed as degrees North (positive) or South (negative) of the Equator.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d24(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D24, Some(0.0)).unwrap()}
  }
  /// The East-West position of the center of the dwell area, expressed as degrees East (positive, 0 to 180) or West (negative, 0 to -180) of the Prime Meridian.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d25(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D25, Some(0.0)).unwrap()}
  }
  /// Distance on the earth surface, expressed in kilometers, from the near edge to the center of the dwell area.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d26(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D26, Some(0.0)).unwrap()}
  }
  /// For dwell based radars, one-half of the 3-dB beamwidth.  For non-dwell based radars, the angle between the beginning of the dwell to the center of the dwell.  Measured in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d27(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D27, Some(0.0)).unwrap()}
  }
  /// Rotation of the sensor broadside face about the local vertical axis of the platform, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d28(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D28, Some(0.0)).unwrap()}
  }
  /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d29(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D29, Some(0.0)).unwrap()}
  }
  /// Rotation angle of the sensor about the transverse axis of the sensor broadside, in degrees.
  /// Example: /// Example: 12.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d30(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(MtiDwell_Abridged::VT_D30, Some(0.0)).unwrap()}
  }
  /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d31(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(MtiDwell_Abridged::VT_D31, Some(0)).unwrap()}
  }
  /// Minimum velocity component, along the line of sight, which can be detected by the sensor, in decimeters per second.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn d32(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(MtiDwell_Abridged::VT_D32, None)}
  }
  /// Dwell timestamp in ISO8601 UTC format.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dwellts(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(MtiDwell_Abridged::VT_DWELLTS, None)}
  }
}

impl flatbuffers::Verifiable for MtiDwell_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("d2", Self::VT_D2, false)?
     .visit_field::<i32>("d3", Self::VT_D3, false)?
     .visit_field::<bool>("d4", Self::VT_D4, false)?
     .visit_field::<i32>("d5", Self::VT_D5, false)?
     .visit_field::<i64>("d6", Self::VT_D6, false)?
     .visit_field::<f64>("d7", Self::VT_D7, false)?
     .visit_field::<f64>("d8", Self::VT_D8, false)?
     .visit_field::<i32>("d9", Self::VT_D9, false)?
     .visit_field::<f64>("d10", Self::VT_D10, false)?
     .visit_field::<f64>("d11", Self::VT_D11, false)?
     .visit_field::<i32>("d12", Self::VT_D12, false)?
     .visit_field::<i32>("d13", Self::VT_D13, false)?
     .visit_field::<i32>("d14", Self::VT_D14, false)?
     .visit_field::<f64>("d15", Self::VT_D15, false)?
     .visit_field::<i32>("d16", Self::VT_D16, false)?
     .visit_field::<i32>("d17", Self::VT_D17, false)?
     .visit_field::<i32>("d18", Self::VT_D18, false)?
     .visit_field::<i32>("d19", Self::VT_D19, false)?
     .visit_field::<i32>("d20", Self::VT_D20, false)?
     .visit_field::<f64>("d21", Self::VT_D21, false)?
     .visit_field::<f64>("d22", Self::VT_D22, false)?
     .visit_field::<f64>("d23", Self::VT_D23, false)?
     .visit_field::<f64>("d24", Self::VT_D24, false)?
     .visit_field::<f64>("d25", Self::VT_D25, false)?
     .visit_field::<f64>("d26", Self::VT_D26, false)?
     .visit_field::<f64>("d27", Self::VT_D27, false)?
     .visit_field::<f64>("d28", Self::VT_D28, false)?
     .visit_field::<f64>("d29", Self::VT_D29, false)?
     .visit_field::<f64>("d30", Self::VT_D30, false)?
     .visit_field::<i32>("d31", Self::VT_D31, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("d32", Self::VT_D32, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dwellts", Self::VT_DWELLTS, false)?
     .finish();
    Ok(())
  }
}
pub struct MtiDwell_AbridgedArgs<'a> {
    pub d2: i32,
    pub d3: i32,
    pub d4: bool,
    pub d5: i32,
    pub d6: i64,
    pub d7: f64,
    pub d8: f64,
    pub d9: i32,
    pub d10: f64,
    pub d11: f64,
    pub d12: i32,
    pub d13: i32,
    pub d14: i32,
    pub d15: f64,
    pub d16: i32,
    pub d17: i32,
    pub d18: i32,
    pub d19: i32,
    pub d20: i32,
    pub d21: f64,
    pub d22: f64,
    pub d23: f64,
    pub d24: f64,
    pub d25: f64,
    pub d26: f64,
    pub d27: f64,
    pub d28: f64,
    pub d29: f64,
    pub d30: f64,
    pub d31: i32,
    pub d32: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub dwellts: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for MtiDwell_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    MtiDwell_AbridgedArgs {
      d2: 0,
      d3: 0,
      d4: false,
      d5: 0,
      d6: 0,
      d7: 0.0,
      d8: 0.0,
      d9: 0,
      d10: 0.0,
      d11: 0.0,
      d12: 0,
      d13: 0,
      d14: 0,
      d15: 0.0,
      d16: 0,
      d17: 0,
      d18: 0,
      d19: 0,
      d20: 0,
      d21: 0.0,
      d22: 0.0,
      d23: 0.0,
      d24: 0.0,
      d25: 0.0,
      d26: 0.0,
      d27: 0.0,
      d28: 0.0,
      d29: 0.0,
      d30: 0.0,
      d31: 0,
      d32: None,
      dwellts: None,
    }
  }
}

pub struct MtiDwell_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> MtiDwell_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_d2(&mut self, d2: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D2, d2, 0);
  }
  #[inline]
  pub fn add_d3(&mut self, d3: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D3, d3, 0);
  }
  #[inline]
  pub fn add_d4(&mut self, d4: bool) {
    self.fbb_.push_slot::<bool>(MtiDwell_Abridged::VT_D4, d4, false);
  }
  #[inline]
  pub fn add_d5(&mut self, d5: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D5, d5, 0);
  }
  #[inline]
  pub fn add_d6(&mut self, d6: i64) {
    self.fbb_.push_slot::<i64>(MtiDwell_Abridged::VT_D6, d6, 0);
  }
  #[inline]
  pub fn add_d7(&mut self, d7: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D7, d7, 0.0);
  }
  #[inline]
  pub fn add_d8(&mut self, d8: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D8, d8, 0.0);
  }
  #[inline]
  pub fn add_d9(&mut self, d9: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D9, d9, 0);
  }
  #[inline]
  pub fn add_d10(&mut self, d10: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D10, d10, 0.0);
  }
  #[inline]
  pub fn add_d11(&mut self, d11: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D11, d11, 0.0);
  }
  #[inline]
  pub fn add_d12(&mut self, d12: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D12, d12, 0);
  }
  #[inline]
  pub fn add_d13(&mut self, d13: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D13, d13, 0);
  }
  #[inline]
  pub fn add_d14(&mut self, d14: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D14, d14, 0);
  }
  #[inline]
  pub fn add_d15(&mut self, d15: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D15, d15, 0.0);
  }
  #[inline]
  pub fn add_d16(&mut self, d16: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D16, d16, 0);
  }
  #[inline]
  pub fn add_d17(&mut self, d17: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D17, d17, 0);
  }
  #[inline]
  pub fn add_d18(&mut self, d18: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D18, d18, 0);
  }
  #[inline]
  pub fn add_d19(&mut self, d19: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D19, d19, 0);
  }
  #[inline]
  pub fn add_d20(&mut self, d20: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D20, d20, 0);
  }
  #[inline]
  pub fn add_d21(&mut self, d21: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D21, d21, 0.0);
  }
  #[inline]
  pub fn add_d22(&mut self, d22: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D22, d22, 0.0);
  }
  #[inline]
  pub fn add_d23(&mut self, d23: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D23, d23, 0.0);
  }
  #[inline]
  pub fn add_d24(&mut self, d24: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D24, d24, 0.0);
  }
  #[inline]
  pub fn add_d25(&mut self, d25: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D25, d25, 0.0);
  }
  #[inline]
  pub fn add_d26(&mut self, d26: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D26, d26, 0.0);
  }
  #[inline]
  pub fn add_d27(&mut self, d27: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D27, d27, 0.0);
  }
  #[inline]
  pub fn add_d28(&mut self, d28: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D28, d28, 0.0);
  }
  #[inline]
  pub fn add_d29(&mut self, d29: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D29, d29, 0.0);
  }
  #[inline]
  pub fn add_d30(&mut self, d30: f64) {
    self.fbb_.push_slot::<f64>(MtiDwell_Abridged::VT_D30, d30, 0.0);
  }
  #[inline]
  pub fn add_d31(&mut self, d31: i32) {
    self.fbb_.push_slot::<i32>(MtiDwell_Abridged::VT_D31, d31, 0);
  }
  #[inline]
  pub fn add_d32(&mut self, d32: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiDwell_Abridged::VT_D32, d32);
  }
  #[inline]
  pub fn add_dwellts(&mut self, dwellts: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(MtiDwell_Abridged::VT_DWELLTS, dwellts);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> MtiDwell_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    MtiDwell_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<MtiDwell_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for MtiDwell_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("MtiDwell_Abridged");
      ds.field("d2", &self.d2());
      ds.field("d3", &self.d3());
      ds.field("d4", &self.d4());
      ds.field("d5", &self.d5());
      ds.field("d6", &self.d6());
      ds.field("d7", &self.d7());
      ds.field("d8", &self.d8());
      ds.field("d9", &self.d9());
      ds.field("d10", &self.d10());
      ds.field("d11", &self.d11());
      ds.field("d12", &self.d12());
      ds.field("d13", &self.d13());
      ds.field("d14", &self.d14());
      ds.field("d15", &self.d15());
      ds.field("d16", &self.d16());
      ds.field("d17", &self.d17());
      ds.field("d18", &self.d18());
      ds.field("d19", &self.d19());
      ds.field("d20", &self.d20());
      ds.field("d21", &self.d21());
      ds.field("d22", &self.d22());
      ds.field("d23", &self.d23());
      ds.field("d24", &self.d24());
      ds.field("d25", &self.d25());
      ds.field("d26", &self.d26());
      ds.field("d27", &self.d27());
      ds.field("d28", &self.d28());
      ds.field("d29", &self.d29());
      ds.field("d30", &self.d30());
      ds.field("d31", &self.d31());
      ds.field("d32", &self.d32());
      ds.field("dwellts", &self.dwellts());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct MtiDwell_AbridgedT {
  pub d2: i32,
  pub d3: i32,
  pub d4: bool,
  pub d5: i32,
  pub d6: i64,
  pub d7: f64,
  pub d8: f64,
  pub d9: i32,
  pub d10: f64,
  pub d11: f64,
  pub d12: i32,
  pub d13: i32,
  pub d14: i32,
  pub d15: f64,
  pub d16: i32,
  pub d17: i32,
  pub d18: i32,
  pub d19: i32,
  pub d20: i32,
  pub d21: f64,
  pub d22: f64,
  pub d23: f64,
  pub d24: f64,
  pub d25: f64,
  pub d26: f64,
  pub d27: f64,
  pub d28: f64,
  pub d29: f64,
  pub d30: f64,
  pub d31: i32,
  pub d32: Option<Vec<String>>,
  pub dwellts: Option<String>,
}
impl Default for MtiDwell_AbridgedT {
  fn default() -> Self {
    Self {
      d2: 0,
      d3: 0,
      d4: false,
      d5: 0,
      d6: 0,
      d7: 0.0,
      d8: 0.0,
      d9: 0,
      d10: 0.0,
      d11: 0.0,
      d12: 0,
      d13: 0,
      d14: 0,
      d15: 0.0,
      d16: 0,
      d17: 0,
      d18: 0,
      d19: 0,
      d20: 0,
      d21: 0.0,
      d22: 0.0,
      d23: 0.0,
      d24: 0.0,
      d25: 0.0,
      d26: 0.0,
      d27: 0.0,
      d28: 0.0,
      d29: 0.0,
      d30: 0.0,
      d31: 0,
      d32: None,
      dwellts: None,
    }
  }
}
impl MtiDwell_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<MtiDwell_Abridged<'b>> {
    let d2 = self.d2;
    let d3 = self.d3;
    let d4 = self.d4;
    let d5 = self.d5;
    let d6 = self.d6;
    let d7 = self.d7;
    let d8 = self.d8;
    let d9 = self.d9;
    let d10 = self.d10;
    let d11 = self.d11;
    let d12 = self.d12;
    let d13 = self.d13;
    let d14 = self.d14;
    let d15 = self.d15;
    let d16 = self.d16;
    let d17 = self.d17;
    let d18 = self.d18;
    let d19 = self.d19;
    let d20 = self.d20;
    let d21 = self.d21;
    let d22 = self.d22;
    let d23 = self.d23;
    let d24 = self.d24;
    let d25 = self.d25;
    let d26 = self.d26;
    let d27 = self.d27;
    let d28 = self.d28;
    let d29 = self.d29;
    let d30 = self.d30;
    let d31 = self.d31;
    let d32 = self.d32.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let dwellts = self.dwellts.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    MtiDwell_Abridged::create(_fbb, &MtiDwell_AbridgedArgs{
      d2,
      d3,
      d4,
      d5,
      d6,
      d7,
      d8,
      d9,
      d10,
      d11,
      d12,
      d13,
      d14,
      d15,
      d16,
      d17,
      d18,
      d19,
      d20,
      d21,
      d22,
      d23,
      d24,
      d25,
      d26,
      d27,
      d28,
      d29,
      d30,
      d31,
      d32,
      dwellts,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `MtiDwell_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_dwell_abridged_unchecked`.
pub fn root_as_mti_dwell_abridged(buf: &[u8]) -> Result<MtiDwell_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<MtiDwell_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `MtiDwell_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mti_dwell_abridged_unchecked`.
pub fn size_prefixed_root_as_mti_dwell_abridged(buf: &[u8]) -> Result<MtiDwell_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<MtiDwell_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `MtiDwell_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_dwell_abridged_unchecked`.
pub fn root_as_mti_dwell_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiDwell_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<MtiDwell_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `MtiDwell_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_dwell_abridged_unchecked`.
pub fn size_prefixed_root_as_mti_dwell_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<MtiDwell_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<MtiDwell_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a MtiDwell_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `MtiDwell_Abridged`.
pub unsafe fn root_as_mti_dwell_abridged_unchecked(buf: &[u8]) -> MtiDwell_Abridged {
  flatbuffers::root_unchecked::<MtiDwell_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed MtiDwell_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `MtiDwell_Abridged`.
pub unsafe fn size_prefixed_root_as_mti_dwell_abridged_unchecked(buf: &[u8]) -> MtiDwell_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<MtiDwell_Abridged>(buf)
}
pub const MTI_DWELL_ABRIDGED_IDENTIFIER: &str = "MTID";

#[inline]
pub fn mti_dwell_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_DWELL_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn mti_dwell_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_DWELL_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_mti_dwell_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<MtiDwell_Abridged<'a>>) {
  fbb.finish(root, Some(MTI_DWELL_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mti_dwell_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<MtiDwell_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(MTI_DWELL_ABRIDGED_IDENTIFIER));
}
