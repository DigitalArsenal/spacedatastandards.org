// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AirspaceControlPoint_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The controlPoint set describes any reference/controlling/rendevous point for a given airspace control means.
pub struct AirspaceControlPoint_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirspaceControlPoint_Ingest<'a> {
  type Inner = AirspaceControlPoint_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirspaceControlPoint_Ingest<'a> {
  pub const VT_CTRLPTTYPE: flatbuffers::VOffsetT = 4;
  pub const VT_CTRLPTNAME: flatbuffers::VOffsetT = 6;
  pub const VT_CTRLPTLOCATION: flatbuffers::VOffsetT = 8;
  pub const VT_CTRLPTALTITUDE: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirspaceControlPoint_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirspaceControlPoint_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<AirspaceControlPoint_Ingest<'bldr>> {
    let mut builder = AirspaceControlPoint_IngestBuilder::new(_fbb);
    if let Some(x) = args.ctrlPtAltitude { builder.add_ctrlPtAltitude(x); }
    if let Some(x) = args.ctrlPtLocation { builder.add_ctrlPtLocation(x); }
    if let Some(x) = args.ctrlPtName { builder.add_ctrlPtName(x); }
    if let Some(x) = args.ctrlPtType { builder.add_ctrlPtType(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AirspaceControlPoint_IngestT {
    let ctrlPtType = self.ctrlPtType().map(|x| {
      x.to_string()
    });
    let ctrlPtName = self.ctrlPtName().map(|x| {
      x.to_string()
    });
    let ctrlPtLocation = self.ctrlPtLocation().map(|x| {
      x.to_string()
    });
    let ctrlPtAltitude = self.ctrlPtAltitude().map(|x| {
      x.to_string()
    });
    AirspaceControlPoint_IngestT {
      ctrlPtType,
      ctrlPtName,
      ctrlPtLocation,
      ctrlPtAltitude,
    }
  }

  /// One of possible control point type codes, such as CP, ER, OT, etc.
  /// Example: /// Example: CP
  /// Constraints: Minimum length = 0, Maximum length = 2
  #[inline]
  pub fn ctrlPtType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceControlPoint_Ingest::VT_CTRLPTTYPE, None)}
  }
  /// The name applied to the control point, used as a reference.
  /// Example: /// Example: APPLE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn ctrlPtName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceControlPoint_Ingest::VT_CTRLPTNAME, None)}
  }
  /// A geospatial point coordinate specified in DMS (Degrees, Minutes, Seconds) format that represents the location of the control point.
  /// Example: /// Example: 203632N0594256E
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn ctrlPtLocation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceControlPoint_Ingest::VT_CTRLPTLOCATION, None)}
  }
  /// The altitude of the control point.
  /// Example: /// Example: BRFL:MSL-FL230
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn ctrlPtAltitude(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceControlPoint_Ingest::VT_CTRLPTALTITUDE, None)}
  }
}

impl flatbuffers::Verifiable for AirspaceControlPoint_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ctrlPtType", Self::VT_CTRLPTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ctrlPtName", Self::VT_CTRLPTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ctrlPtLocation", Self::VT_CTRLPTLOCATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("ctrlPtAltitude", Self::VT_CTRLPTALTITUDE, false)?
     .finish();
    Ok(())
  }
}
pub struct AirspaceControlPoint_IngestArgs<'a> {
    pub ctrlPtType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ctrlPtName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ctrlPtLocation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ctrlPtAltitude: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for AirspaceControlPoint_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirspaceControlPoint_IngestArgs {
      ctrlPtType: None,
      ctrlPtName: None,
      ctrlPtLocation: None,
      ctrlPtAltitude: None,
    }
  }
}

pub struct AirspaceControlPoint_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirspaceControlPoint_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_ctrlPtType(&mut self, ctrlPtType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceControlPoint_Ingest::VT_CTRLPTTYPE, ctrlPtType);
  }
  #[inline]
  pub fn add_ctrlPtName(&mut self, ctrlPtName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceControlPoint_Ingest::VT_CTRLPTNAME, ctrlPtName);
  }
  #[inline]
  pub fn add_ctrlPtLocation(&mut self, ctrlPtLocation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceControlPoint_Ingest::VT_CTRLPTLOCATION, ctrlPtLocation);
  }
  #[inline]
  pub fn add_ctrlPtAltitude(&mut self, ctrlPtAltitude: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceControlPoint_Ingest::VT_CTRLPTALTITUDE, ctrlPtAltitude);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirspaceControlPoint_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirspaceControlPoint_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirspaceControlPoint_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirspaceControlPoint_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirspaceControlPoint_Ingest");
      ds.field("ctrlPtType", &self.ctrlPtType());
      ds.field("ctrlPtName", &self.ctrlPtName());
      ds.field("ctrlPtLocation", &self.ctrlPtLocation());
      ds.field("ctrlPtAltitude", &self.ctrlPtAltitude());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirspaceControlPoint_IngestT {
  pub ctrlPtType: Option<String>,
  pub ctrlPtName: Option<String>,
  pub ctrlPtLocation: Option<String>,
  pub ctrlPtAltitude: Option<String>,
}
impl Default for AirspaceControlPoint_IngestT {
  fn default() -> Self {
    Self {
      ctrlPtType: None,
      ctrlPtName: None,
      ctrlPtLocation: None,
      ctrlPtAltitude: None,
    }
  }
}
impl AirspaceControlPoint_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirspaceControlPoint_Ingest<'b>> {
    let ctrlPtType = self.ctrlPtType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ctrlPtName = self.ctrlPtName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ctrlPtLocation = self.ctrlPtLocation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ctrlPtAltitude = self.ctrlPtAltitude.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    AirspaceControlPoint_Ingest::create(_fbb, &AirspaceControlPoint_IngestArgs{
      ctrlPtType,
      ctrlPtName,
      ctrlPtLocation,
      ctrlPtAltitude,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirspaceControlPoint_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_control_point_ingest_unchecked`.
pub fn root_as_airspace_control_point_ingest(buf: &[u8]) -> Result<AirspaceControlPoint_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirspaceControlPoint_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirspaceControlPoint_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_airspace_control_point_ingest_unchecked`.
pub fn size_prefixed_root_as_airspace_control_point_ingest(buf: &[u8]) -> Result<AirspaceControlPoint_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirspaceControlPoint_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirspaceControlPoint_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_control_point_ingest_unchecked`.
pub fn root_as_airspace_control_point_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirspaceControlPoint_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirspaceControlPoint_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirspaceControlPoint_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_control_point_ingest_unchecked`.
pub fn size_prefixed_root_as_airspace_control_point_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirspaceControlPoint_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirspaceControlPoint_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirspaceControlPoint_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirspaceControlPoint_Ingest`.
pub unsafe fn root_as_airspace_control_point_ingest_unchecked(buf: &[u8]) -> AirspaceControlPoint_Ingest {
  flatbuffers::root_unchecked::<AirspaceControlPoint_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirspaceControlPoint_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirspaceControlPoint_Ingest`.
pub unsafe fn size_prefixed_root_as_airspace_control_point_ingest_unchecked(buf: &[u8]) -> AirspaceControlPoint_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<AirspaceControlPoint_Ingest>(buf)
}
pub const AIRSPACE_CONTROL_POINT_INGEST_IDENTIFIER: &str = "AIRS";

#[inline]
pub fn airspace_control_point_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRSPACE_CONTROL_POINT_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn airspace_control_point_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRSPACE_CONTROL_POINT_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_airspace_control_point_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirspaceControlPoint_Ingest<'a>>) {
  fbb.finish(root, Some(AIRSPACE_CONTROL_POINT_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_airspace_control_point_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirspaceControlPoint_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRSPACE_CONTROL_POINT_INGEST_IDENTIFIER));
}
