// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ANALYTIC_IMAGERY_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ANALYTIC_IMAGERY_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ANALYTIC_IMAGERY_INGEST_DATA_MODE_ENUM: [AnalyticImagery_Ingest_dataMode_Enum; 4] = [
  AnalyticImagery_Ingest_dataMode_Enum::REAL,
  AnalyticImagery_Ingest_dataMode_Enum::TEST,
  AnalyticImagery_Ingest_dataMode_Enum::SIMULATED,
  AnalyticImagery_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct AnalyticImagery_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl AnalyticImagery_Ingest_dataMode_Enum {
  /// No description available.
  pub const REAL: Self = Self(0);
  /// No description available.
  pub const TEST: Self = Self(1);
  /// No description available.
  pub const SIMULATED: Self = Self(2);
  /// No description available.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for AnalyticImagery_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for AnalyticImagery_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for AnalyticImagery_Ingest_dataMode_Enum {
    type Output = AnalyticImagery_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for AnalyticImagery_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for AnalyticImagery_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for AnalyticImagery_Ingest_dataMode_Enum {}
pub enum AnalyticImagery_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The analytic imagery schema supports data plots and graphics of various types. The records contain general file information, allows for annotations to user-defined areas of interest on the graphics, and supports keyword searching.
pub struct AnalyticImagery_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AnalyticImagery_Ingest<'a> {
  type Inner = AnalyticImagery_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AnalyticImagery_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_CONTENT: flatbuffers::VOffsetT = 8;
  pub const VT_MSGTIME: flatbuffers::VOffsetT = 10;
  pub const VT_IMAGETYPE: flatbuffers::VOffsetT = 12;
  pub const VT_FILENAME: flatbuffers::VOffsetT = 14;
  pub const VT_FILESIZE: flatbuffers::VOffsetT = 16;
  pub const VT_IMGWIDTH: flatbuffers::VOffsetT = 18;
  pub const VT_IMGHEIGHT: flatbuffers::VOffsetT = 20;
  pub const VT_XUNITS: flatbuffers::VOffsetT = 22;
  pub const VT_YUNITS: flatbuffers::VOffsetT = 24;
  pub const VT_ZUNITS: flatbuffers::VOffsetT = 26;
  pub const VT_IMAGESETID: flatbuffers::VOffsetT = 28;
  pub const VT_IMAGESETLENGTH: flatbuffers::VOffsetT = 30;
  pub const VT_SEQUENCEID: flatbuffers::VOffsetT = 32;
  pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 34;
  pub const VT_DATASTART: flatbuffers::VOffsetT = 36;
  pub const VT_DATASTOP: flatbuffers::VOffsetT = 38;
  pub const VT_ANNLIMS: flatbuffers::VOffsetT = 40;
  pub const VT_ANNTEXT: flatbuffers::VOffsetT = 42;
  pub const VT_KEYWORDS: flatbuffers::VOffsetT = 44;
  pub const VT_AREA: flatbuffers::VOffsetT = 46;
  pub const VT_ATEXT: flatbuffers::VOffsetT = 48;
  pub const VT_AGJSON: flatbuffers::VOffsetT = 50;
  pub const VT_ATYPE: flatbuffers::VOffsetT = 52;
  pub const VT_ANDIMS: flatbuffers::VOffsetT = 54;
  pub const VT_ASRID: flatbuffers::VOffsetT = 56;
  pub const VT_SATID: flatbuffers::VOffsetT = 58;
  pub const VT_SATIDCONF: flatbuffers::VOffsetT = 60;
  pub const VT_SRCTYPS: flatbuffers::VOffsetT = 62;
  pub const VT_SRCIDS: flatbuffers::VOffsetT = 64;
  pub const VT_TAGS: flatbuffers::VOffsetT = 66;
  pub const VT_CHECKSUMVALUE: flatbuffers::VOffsetT = 68;
  pub const VT_TRANSACTIONID: flatbuffers::VOffsetT = 70;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 74;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 76;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 78;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 80;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 82;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 84;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AnalyticImagery_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AnalyticImagery_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<AnalyticImagery_Ingest<'bldr>> {
    let mut builder = AnalyticImagery_IngestBuilder::new(_fbb);
    builder.add_filesize(args.filesize);
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.transactionId { builder.add_transactionId(x); }
    if let Some(x) = args.checksumValue { builder.add_checksumValue(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.srcIds { builder.add_srcIds(x); }
    if let Some(x) = args.srcTyps { builder.add_srcTyps(x); }
    if let Some(x) = args.satIdConf { builder.add_satIdConf(x); }
    if let Some(x) = args.satId { builder.add_satId(x); }
    builder.add_asrid(args.asrid);
    builder.add_andims(args.andims);
    if let Some(x) = args.atype { builder.add_atype(x); }
    if let Some(x) = args.agjson { builder.add_agjson(x); }
    if let Some(x) = args.atext { builder.add_atext(x); }
    if let Some(x) = args.area { builder.add_area(x); }
    if let Some(x) = args.keywords { builder.add_keywords(x); }
    if let Some(x) = args.annText { builder.add_annText(x); }
    if let Some(x) = args.annLims { builder.add_annLims(x); }
    if let Some(x) = args.dataStop { builder.add_dataStop(x); }
    if let Some(x) = args.dataStart { builder.add_dataStart(x); }
    if let Some(x) = args.description { builder.add_description(x); }
    builder.add_sequenceId(args.sequenceId);
    builder.add_imageSetLength(args.imageSetLength);
    if let Some(x) = args.imageSetId { builder.add_imageSetId(x); }
    if let Some(x) = args.zUnits { builder.add_zUnits(x); }
    if let Some(x) = args.yUnits { builder.add_yUnits(x); }
    if let Some(x) = args.xUnits { builder.add_xUnits(x); }
    builder.add_imgHeight(args.imgHeight);
    builder.add_imgWidth(args.imgWidth);
    if let Some(x) = args.filename { builder.add_filename(x); }
    if let Some(x) = args.imageType { builder.add_imageType(x); }
    if let Some(x) = args.msgTime { builder.add_msgTime(x); }
    if let Some(x) = args.content { builder.add_content(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> AnalyticImagery_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let content = self.content().map(|x| {
      x.to_string()
    });
    let msgTime = self.msgTime().map(|x| {
      x.to_string()
    });
    let imageType = self.imageType().map(|x| {
      x.to_string()
    });
    let filename = self.filename().map(|x| {
      x.to_string()
    });
    let filesize = self.filesize();
    let imgWidth = self.imgWidth();
    let imgHeight = self.imgHeight();
    let xUnits = self.xUnits().map(|x| {
      x.to_string()
    });
    let yUnits = self.yUnits().map(|x| {
      x.to_string()
    });
    let zUnits = self.zUnits().map(|x| {
      x.to_string()
    });
    let imageSetId = self.imageSetId().map(|x| {
      x.to_string()
    });
    let imageSetLength = self.imageSetLength();
    let sequenceId = self.sequenceId();
    let description = self.description().map(|x| {
      x.to_string()
    });
    let dataStart = self.dataStart().map(|x| {
      x.to_string()
    });
    let dataStop = self.dataStop().map(|x| {
      x.to_string()
    });
    let annLims = self.annLims().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let annText = self.annText().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let keywords = self.keywords().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let area = self.area().map(|x| {
      x.to_string()
    });
    let atext = self.atext().map(|x| {
      x.to_string()
    });
    let agjson = self.agjson().map(|x| {
      x.to_string()
    });
    let atype = self.atype().map(|x| {
      x.to_string()
    });
    let andims = self.andims();
    let asrid = self.asrid();
    let satId = self.satId().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let satIdConf = self.satIdConf().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcTyps = self.srcTyps().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let srcIds = self.srcIds().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let checksumValue = self.checksumValue().map(|x| {
      x.to_string()
    });
    let transactionId = self.transactionId().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    AnalyticImagery_IngestT {
      id,
      classificationMarking,
      content,
      msgTime,
      imageType,
      filename,
      filesize,
      imgWidth,
      imgHeight,
      xUnits,
      yUnits,
      zUnits,
      imageSetId,
      imageSetLength,
      sequenceId,
      description,
      dataStart,
      dataStop,
      annLims,
      annText,
      keywords,
      area,
      atext,
      agjson,
      atype,
      andims,
      asrid,
      satId,
      satIdConf,
      srcTyps,
      srcIds,
      tags,
      checksumValue,
      transactionId,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ANALYTIC-IMAGERY-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// General type of content of this image (CONTOUR, DIAGRAM, HEATMAP, HISTOGRAM, PLOT, SCREENSHOT).
  /// Example: /// Example: CONTOUR
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn content(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_CONTENT, None)}
  }
  /// The message time of this image record, in ISO8601 UTC format with millisecond precision.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn msgTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_MSGTIME, None)}
  }
  /// The type of image associated with this record (GIF, JPG, PNG, TIF).
  /// Example: /// Example: JPG
  /// Constraints: Minimum length = 1, Maximum length = 16
  #[inline]
  pub fn imageType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_IMAGETYPE, None)}
  }
  /// The image file name.
  /// Example: /// Example: IMAGE-NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn filename(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_FILENAME, None)}
  }
  /// The image file size, in bytes.  The maximum file size for this service is 40,000,000 bytes (40MB). Files exceeding the maximum size will be rejected.
  /// Example: /// Example: 7654321
  /// Constraints: No constraints specified.
  #[inline]
  pub fn filesize(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(AnalyticImagery_Ingest::VT_FILESIZE, Some(0)).unwrap()}
  }
  /// The image width (horizontal), in pixels.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn imgWidth(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AnalyticImagery_Ingest::VT_IMGWIDTH, Some(0)).unwrap()}
  }
  /// The image height (vertical), in pixels.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn imgHeight(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AnalyticImagery_Ingest::VT_IMGHEIGHT, Some(0)).unwrap()}
  }
  /// Optional field indicating the units that apply to the x-axis of the attached image, when applicable.
  /// Example: /// Example: pixels
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn xUnits(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_XUNITS, None)}
  }
  /// Optional field indicating the units that apply to the y-axis of the attached image, when applicable.
  /// Example: /// Example: pixels
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn yUnits(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_YUNITS, None)}
  }
  /// Optional field indicating the units that apply to the z-axis of the attached image, when applicable.
  /// Example: /// Example: pixels
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn zUnits(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_ZUNITS, None)}
  }
  /// User-defined set ID of a sequence of images.  Used to associate related analytic image records.
  /// Example: /// Example: IMAGE-IDS
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn imageSetId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_IMAGESETID, None)}
  }
  /// The number of images in an image set.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn imageSetLength(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AnalyticImagery_Ingest::VT_IMAGESETLENGTH, Some(0)).unwrap()}
  }
  /// The sequence number of an image within an image set.  If null, then it is assumed that the order of images in an imageSet is not relevant.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sequenceId(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AnalyticImagery_Ingest::VT_SEQUENCEID, Some(0)).unwrap()}
  }
  /// Description of the image content and utility.
  /// Example: /// Example: Image description
  /// Constraints: Minimum length = 1, Maximum length = 512
  #[inline]
  pub fn description(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_DESCRIPTION, None)}
  }
  /// The start time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dataStart(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_DATASTART, None)}
  }
  /// The stop time, in ISO8601 UTC format with millisecond precision, of the data used in the analysis or composition of the image content, when applicable.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dataStop(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_DATASTOP, None)}
  }
  /// Rectangular annotation limits, specified in pixels, as an array of arrays of the coordinates [ [UL1x, UL1y], [UR1x, UR1y], [LR1x, LR1y], [LL1x, LL1y] ], indicating the corners of a rectangle beginning with the Upper Left (UL) and moving clockwise. Allows the image provider to highlight one or more rectangular area(s) of interest. The array must contain Nx4 two-element arrays, where N is the number of rectangles of interest.  The associated annotation(s) should be included in the annText array.
  /// Example: /// Example: [[1, 1], [1, 2], [1, 3], [1, 4]]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn annLims(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_ANNLIMS, None)}
  }
  /// Annotation text, a string array of annotation(s) corresponding to the rectangular areas specified in annLims.  This array contains the annotation text associated with the areas of interest indicated in annLims, in order.  This array should contain one annotation per four values of the area (annLims) array.
  /// Example: /// Example: ['rec1', 'rec2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn annText(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_ANNTEXT, None)}
  }
  /// Array of searchable keywords for this analytic imagery record.
  /// Example: /// Example: ['Key1', 'Key2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn keywords(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_KEYWORDS, None)}
  }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the point of interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn area(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_AREA, None)}
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn atext(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_ATEXT, None)}
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  #[inline]
  pub fn agjson(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_AGJSON, None)}
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: POLYGON
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn atype(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_ATYPE, None)}
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn andims(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AnalyticImagery_Ingest::VT_ANDIMS, Some(0)).unwrap()}
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 4326
  /// Constraints: No constraints specified.
  #[inline]
  pub fn asrid(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(AnalyticImagery_Ingest::VT_ASRID, Some(0)).unwrap()}
  }
  /// Assessed satellite ID (NORAD RSO object number).  The 'satId' and 'satIdConf' arrays must match in size.
  /// Example: /// Example: [12004, 12005]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_SATID, None)}
  }
  /// Assessed satellite confidence corresponding to an assessment ID.  Values are between 0.0 and 1.0.  The 'satId' and 'satIdConf' arrays must match in size.
  /// Example: /// Example: [0.98, 0.22]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satIdConf(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_SATIDCONF, None)}
  }
  /// Array of UDL record types (AIS, CONJUNCTION, DOA, ELSET, EO, ESID, GROUNDIMAGE, POI, MANEUVER, MTI, NOTIFICATION, RADAR, RF, SIGACT, SKYIMAGE, SV, TRACK) that are related to this image. See the associated 'srcIds' array for the record UUIDs, positionally corresponding to the record types in this array. The 'srcTyps' and 'srcIds' arrays must match in size.
  /// Example: /// Example: ['MTI', 'POI']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcTyps(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_SRCTYPS, None)}
  }
  /// Array of UUIDs of the UDL data records that are related to this image. See the associated 'srcTyps' array for the specific types of data, positionally corresponding to the UUIDs in this array. The 'srcTyps' and 'srcIds' arrays must match in size. See the corresponding srcTyps array element for the data type of the UUID and use the appropriate API operation to retrieve that object.
  /// Example: /// Example: ['DOA_ID', 'DWELL_ID']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn srcIds(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_SRCIDS, None)}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AnalyticImagery_Ingest::VT_TAGS, None)}
  }
  /// MD5 checksum value of the file. The ingest/create operation will automatically generate the value.
  /// Example: /// Example: 123
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn checksumValue(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_CHECKSUMVALUE, None)}
  }
  /// Optional identifier to track a commercial or marketplace transaction executed to produce this data.
  /// Example: /// Example: a7bdef1f-5a4f-4716-bee4-7a1e0ec7d35a
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn transactionId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_TRANSACTIONID, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: ORIGIN
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: TST1
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_ORIGNETWORK, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AnalyticImagery_Ingest::VT_SOURCEDL, None)}
  }
  /// Indicator of whether the data is REAL, TEST, SIMULATED, or EXERCISE data.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> AnalyticImagery_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<AnalyticImagery_Ingest_dataMode_Enum>(AnalyticImagery_Ingest::VT_DATAMODE, Some(AnalyticImagery_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for AnalyticImagery_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("content", Self::VT_CONTENT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("msgTime", Self::VT_MSGTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imageType", Self::VT_IMAGETYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("filename", Self::VT_FILENAME, false)?
     .visit_field::<i64>("filesize", Self::VT_FILESIZE, false)?
     .visit_field::<i32>("imgWidth", Self::VT_IMGWIDTH, false)?
     .visit_field::<i32>("imgHeight", Self::VT_IMGHEIGHT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("xUnits", Self::VT_XUNITS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("yUnits", Self::VT_YUNITS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("zUnits", Self::VT_ZUNITS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("imageSetId", Self::VT_IMAGESETID, false)?
     .visit_field::<i32>("imageSetLength", Self::VT_IMAGESETLENGTH, false)?
     .visit_field::<i32>("sequenceId", Self::VT_SEQUENCEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("description", Self::VT_DESCRIPTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dataStart", Self::VT_DATASTART, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dataStop", Self::VT_DATASTOP, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("annLims", Self::VT_ANNLIMS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("annText", Self::VT_ANNTEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("keywords", Self::VT_KEYWORDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("area", Self::VT_AREA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("atext", Self::VT_ATEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("agjson", Self::VT_AGJSON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("atype", Self::VT_ATYPE, false)?
     .visit_field::<i32>("andims", Self::VT_ANDIMS, false)?
     .visit_field::<i32>("asrid", Self::VT_ASRID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("satId", Self::VT_SATID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("satIdConf", Self::VT_SATIDCONF, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcTyps", Self::VT_SRCTYPS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("srcIds", Self::VT_SRCIDS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("checksumValue", Self::VT_CHECKSUMVALUE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("transactionId", Self::VT_TRANSACTIONID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<AnalyticImagery_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct AnalyticImagery_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub content: Option<flatbuffers::WIPOffset<&'a str>>,
    pub msgTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imageType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filename: Option<flatbuffers::WIPOffset<&'a str>>,
    pub filesize: i64,
    pub imgWidth: i32,
    pub imgHeight: i32,
    pub xUnits: Option<flatbuffers::WIPOffset<&'a str>>,
    pub yUnits: Option<flatbuffers::WIPOffset<&'a str>>,
    pub zUnits: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imageSetId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub imageSetLength: i32,
    pub sequenceId: i32,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataStart: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataStop: Option<flatbuffers::WIPOffset<&'a str>>,
    pub annLims: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub annText: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub keywords: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub area: Option<flatbuffers::WIPOffset<&'a str>>,
    pub atext: Option<flatbuffers::WIPOffset<&'a str>>,
    pub agjson: Option<flatbuffers::WIPOffset<&'a str>>,
    pub atype: Option<flatbuffers::WIPOffset<&'a str>>,
    pub andims: i32,
    pub asrid: i32,
    pub satId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub satIdConf: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcTyps: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub srcIds: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub checksumValue: Option<flatbuffers::WIPOffset<&'a str>>,
    pub transactionId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: AnalyticImagery_Ingest_dataMode_Enum,
}
impl<'a> Default for AnalyticImagery_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    AnalyticImagery_IngestArgs {
      id: None,
      classificationMarking: None,
      content: None,
      msgTime: None,
      imageType: None,
      filename: None,
      filesize: 0,
      imgWidth: 0,
      imgHeight: 0,
      xUnits: None,
      yUnits: None,
      zUnits: None,
      imageSetId: None,
      imageSetLength: 0,
      sequenceId: 0,
      description: None,
      dataStart: None,
      dataStop: None,
      annLims: None,
      annText: None,
      keywords: None,
      area: None,
      atext: None,
      agjson: None,
      atype: None,
      andims: 0,
      asrid: 0,
      satId: None,
      satIdConf: None,
      srcTyps: None,
      srcIds: None,
      tags: None,
      checksumValue: None,
      transactionId: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: AnalyticImagery_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct AnalyticImagery_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AnalyticImagery_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_content(&mut self, content: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_CONTENT, content);
  }
  #[inline]
  pub fn add_msgTime(&mut self, msgTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_MSGTIME, msgTime);
  }
  #[inline]
  pub fn add_imageType(&mut self, imageType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_IMAGETYPE, imageType);
  }
  #[inline]
  pub fn add_filename(&mut self, filename: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_FILENAME, filename);
  }
  #[inline]
  pub fn add_filesize(&mut self, filesize: i64) {
    self.fbb_.push_slot::<i64>(AnalyticImagery_Ingest::VT_FILESIZE, filesize, 0);
  }
  #[inline]
  pub fn add_imgWidth(&mut self, imgWidth: i32) {
    self.fbb_.push_slot::<i32>(AnalyticImagery_Ingest::VT_IMGWIDTH, imgWidth, 0);
  }
  #[inline]
  pub fn add_imgHeight(&mut self, imgHeight: i32) {
    self.fbb_.push_slot::<i32>(AnalyticImagery_Ingest::VT_IMGHEIGHT, imgHeight, 0);
  }
  #[inline]
  pub fn add_xUnits(&mut self, xUnits: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_XUNITS, xUnits);
  }
  #[inline]
  pub fn add_yUnits(&mut self, yUnits: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_YUNITS, yUnits);
  }
  #[inline]
  pub fn add_zUnits(&mut self, zUnits: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ZUNITS, zUnits);
  }
  #[inline]
  pub fn add_imageSetId(&mut self, imageSetId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_IMAGESETID, imageSetId);
  }
  #[inline]
  pub fn add_imageSetLength(&mut self, imageSetLength: i32) {
    self.fbb_.push_slot::<i32>(AnalyticImagery_Ingest::VT_IMAGESETLENGTH, imageSetLength, 0);
  }
  #[inline]
  pub fn add_sequenceId(&mut self, sequenceId: i32) {
    self.fbb_.push_slot::<i32>(AnalyticImagery_Ingest::VT_SEQUENCEID, sequenceId, 0);
  }
  #[inline]
  pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_DESCRIPTION, description);
  }
  #[inline]
  pub fn add_dataStart(&mut self, dataStart: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_DATASTART, dataStart);
  }
  #[inline]
  pub fn add_dataStop(&mut self, dataStop: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_DATASTOP, dataStop);
  }
  #[inline]
  pub fn add_annLims(&mut self, annLims: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ANNLIMS, annLims);
  }
  #[inline]
  pub fn add_annText(&mut self, annText: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ANNTEXT, annText);
  }
  #[inline]
  pub fn add_keywords(&mut self, keywords: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_KEYWORDS, keywords);
  }
  #[inline]
  pub fn add_area(&mut self, area: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_AREA, area);
  }
  #[inline]
  pub fn add_atext(&mut self, atext: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ATEXT, atext);
  }
  #[inline]
  pub fn add_agjson(&mut self, agjson: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_AGJSON, agjson);
  }
  #[inline]
  pub fn add_atype(&mut self, atype: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ATYPE, atype);
  }
  #[inline]
  pub fn add_andims(&mut self, andims: i32) {
    self.fbb_.push_slot::<i32>(AnalyticImagery_Ingest::VT_ANDIMS, andims, 0);
  }
  #[inline]
  pub fn add_asrid(&mut self, asrid: i32) {
    self.fbb_.push_slot::<i32>(AnalyticImagery_Ingest::VT_ASRID, asrid, 0);
  }
  #[inline]
  pub fn add_satId(&mut self, satId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_SATID, satId);
  }
  #[inline]
  pub fn add_satIdConf(&mut self, satIdConf: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_SATIDCONF, satIdConf);
  }
  #[inline]
  pub fn add_srcTyps(&mut self, srcTyps: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_SRCTYPS, srcTyps);
  }
  #[inline]
  pub fn add_srcIds(&mut self, srcIds: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_SRCIDS, srcIds);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_checksumValue(&mut self, checksumValue: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_CHECKSUMVALUE, checksumValue);
  }
  #[inline]
  pub fn add_transactionId(&mut self, transactionId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_TRANSACTIONID, transactionId);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AnalyticImagery_Ingest::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: AnalyticImagery_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<AnalyticImagery_Ingest_dataMode_Enum>(AnalyticImagery_Ingest::VT_DATAMODE, dataMode, AnalyticImagery_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AnalyticImagery_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AnalyticImagery_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AnalyticImagery_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AnalyticImagery_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AnalyticImagery_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("content", &self.content());
      ds.field("msgTime", &self.msgTime());
      ds.field("imageType", &self.imageType());
      ds.field("filename", &self.filename());
      ds.field("filesize", &self.filesize());
      ds.field("imgWidth", &self.imgWidth());
      ds.field("imgHeight", &self.imgHeight());
      ds.field("xUnits", &self.xUnits());
      ds.field("yUnits", &self.yUnits());
      ds.field("zUnits", &self.zUnits());
      ds.field("imageSetId", &self.imageSetId());
      ds.field("imageSetLength", &self.imageSetLength());
      ds.field("sequenceId", &self.sequenceId());
      ds.field("description", &self.description());
      ds.field("dataStart", &self.dataStart());
      ds.field("dataStop", &self.dataStop());
      ds.field("annLims", &self.annLims());
      ds.field("annText", &self.annText());
      ds.field("keywords", &self.keywords());
      ds.field("area", &self.area());
      ds.field("atext", &self.atext());
      ds.field("agjson", &self.agjson());
      ds.field("atype", &self.atype());
      ds.field("andims", &self.andims());
      ds.field("asrid", &self.asrid());
      ds.field("satId", &self.satId());
      ds.field("satIdConf", &self.satIdConf());
      ds.field("srcTyps", &self.srcTyps());
      ds.field("srcIds", &self.srcIds());
      ds.field("tags", &self.tags());
      ds.field("checksumValue", &self.checksumValue());
      ds.field("transactionId", &self.transactionId());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AnalyticImagery_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub content: Option<String>,
  pub msgTime: Option<String>,
  pub imageType: Option<String>,
  pub filename: Option<String>,
  pub filesize: i64,
  pub imgWidth: i32,
  pub imgHeight: i32,
  pub xUnits: Option<String>,
  pub yUnits: Option<String>,
  pub zUnits: Option<String>,
  pub imageSetId: Option<String>,
  pub imageSetLength: i32,
  pub sequenceId: i32,
  pub description: Option<String>,
  pub dataStart: Option<String>,
  pub dataStop: Option<String>,
  pub annLims: Option<Vec<String>>,
  pub annText: Option<Vec<String>>,
  pub keywords: Option<Vec<String>>,
  pub area: Option<String>,
  pub atext: Option<String>,
  pub agjson: Option<String>,
  pub atype: Option<String>,
  pub andims: i32,
  pub asrid: i32,
  pub satId: Option<Vec<String>>,
  pub satIdConf: Option<Vec<String>>,
  pub srcTyps: Option<Vec<String>>,
  pub srcIds: Option<Vec<String>>,
  pub tags: Option<Vec<String>>,
  pub checksumValue: Option<String>,
  pub transactionId: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub sourceDL: Option<String>,
  pub dataMode: AnalyticImagery_Ingest_dataMode_Enum,
}
impl Default for AnalyticImagery_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      content: None,
      msgTime: None,
      imageType: None,
      filename: None,
      filesize: 0,
      imgWidth: 0,
      imgHeight: 0,
      xUnits: None,
      yUnits: None,
      zUnits: None,
      imageSetId: None,
      imageSetLength: 0,
      sequenceId: 0,
      description: None,
      dataStart: None,
      dataStop: None,
      annLims: None,
      annText: None,
      keywords: None,
      area: None,
      atext: None,
      agjson: None,
      atype: None,
      andims: 0,
      asrid: 0,
      satId: None,
      satIdConf: None,
      srcTyps: None,
      srcIds: None,
      tags: None,
      checksumValue: None,
      transactionId: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: AnalyticImagery_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl AnalyticImagery_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AnalyticImagery_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let content = self.content.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let msgTime = self.msgTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let imageType = self.imageType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filename = self.filename.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let filesize = self.filesize;
    let imgWidth = self.imgWidth;
    let imgHeight = self.imgHeight;
    let xUnits = self.xUnits.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let yUnits = self.yUnits.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let zUnits = self.zUnits.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let imageSetId = self.imageSetId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let imageSetLength = self.imageSetLength;
    let sequenceId = self.sequenceId;
    let description = self.description.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataStart = self.dataStart.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataStop = self.dataStop.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let annLims = self.annLims.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let annText = self.annText.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let keywords = self.keywords.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let area = self.area.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let atext = self.atext.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let agjson = self.agjson.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let atype = self.atype.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let andims = self.andims;
    let asrid = self.asrid;
    let satId = self.satId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let satIdConf = self.satIdConf.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcTyps = self.srcTyps.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let srcIds = self.srcIds.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let checksumValue = self.checksumValue.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let transactionId = self.transactionId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    AnalyticImagery_Ingest::create(_fbb, &AnalyticImagery_IngestArgs{
      id,
      classificationMarking,
      content,
      msgTime,
      imageType,
      filename,
      filesize,
      imgWidth,
      imgHeight,
      xUnits,
      yUnits,
      zUnits,
      imageSetId,
      imageSetLength,
      sequenceId,
      description,
      dataStart,
      dataStop,
      annLims,
      annText,
      keywords,
      area,
      atext,
      agjson,
      atype,
      andims,
      asrid,
      satId,
      satIdConf,
      srcTyps,
      srcIds,
      tags,
      checksumValue,
      transactionId,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AnalyticImagery_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_analytic_imagery_ingest_unchecked`.
pub fn root_as_analytic_imagery_ingest(buf: &[u8]) -> Result<AnalyticImagery_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AnalyticImagery_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AnalyticImagery_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_analytic_imagery_ingest_unchecked`.
pub fn size_prefixed_root_as_analytic_imagery_ingest(buf: &[u8]) -> Result<AnalyticImagery_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AnalyticImagery_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AnalyticImagery_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_analytic_imagery_ingest_unchecked`.
pub fn root_as_analytic_imagery_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AnalyticImagery_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AnalyticImagery_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AnalyticImagery_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_analytic_imagery_ingest_unchecked`.
pub fn size_prefixed_root_as_analytic_imagery_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AnalyticImagery_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AnalyticImagery_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AnalyticImagery_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AnalyticImagery_Ingest`.
pub unsafe fn root_as_analytic_imagery_ingest_unchecked(buf: &[u8]) -> AnalyticImagery_Ingest {
  flatbuffers::root_unchecked::<AnalyticImagery_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AnalyticImagery_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AnalyticImagery_Ingest`.
pub unsafe fn size_prefixed_root_as_analytic_imagery_ingest_unchecked(buf: &[u8]) -> AnalyticImagery_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<AnalyticImagery_Ingest>(buf)
}
pub const ANALYTIC_IMAGERY_INGEST_IDENTIFIER: &str = "ANAL";

#[inline]
pub fn analytic_imagery_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ANALYTIC_IMAGERY_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn analytic_imagery_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ANALYTIC_IMAGERY_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_analytic_imagery_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AnalyticImagery_Ingest<'a>>) {
  fbb.finish(root, Some(ANALYTIC_IMAGERY_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_analytic_imagery_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AnalyticImagery_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ANALYTIC_IMAGERY_INGEST_IDENTIFIER));
}
