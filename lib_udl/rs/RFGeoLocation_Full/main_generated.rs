// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_RFGEO_LOCATION_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_RFGEO_LOCATION_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_RFGEO_LOCATION_FULL_DATA_MODE_ENUM: [RFGeoLocation_Full_dataMode_Enum; 4] = [
  RFGeoLocation_Full_dataMode_Enum::REAL,
  RFGeoLocation_Full_dataMode_Enum::TEST,
  RFGeoLocation_Full_dataMode_Enum::SIMULATED,
  RFGeoLocation_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct RFGeoLocation_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl RFGeoLocation_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for RFGeoLocation_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for RFGeoLocation_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for RFGeoLocation_Full_dataMode_Enum {
    type Output = RFGeoLocation_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for RFGeoLocation_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for RFGeoLocation_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for RFGeoLocation_Full_dataMode_Enum {}
pub enum RFGeoLocation_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of geolocation data for a radio frequency (RF) signal or emitter.
pub struct RFGeoLocation_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for RFGeoLocation_Full<'a> {
  type Inner = RFGeoLocation_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> RFGeoLocation_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_ORDERID: flatbuffers::VOffsetT = 8;
  pub const VT_CREATEDTS: flatbuffers::VOffsetT = 10;
  pub const VT_RECEIVEDTS: flatbuffers::VOffsetT = 12;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 14;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 16;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 18;
  pub const VT_SATNO: flatbuffers::VOffsetT = 20;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 22;
  pub const VT_CONSTELLATION: flatbuffers::VOffsetT = 24;
  pub const VT_SIGNALOFINTEREST: flatbuffers::VOffsetT = 26;
  pub const VT_IDRFEMITTER: flatbuffers::VOffsetT = 28;
  pub const VT_ORIGRFEMITTERID: flatbuffers::VOffsetT = 30;
  pub const VT_NUMBURSTS: flatbuffers::VOffsetT = 32;
  pub const VT_MINFREQ: flatbuffers::VOffsetT = 34;
  pub const VT_MAXFREQ: flatbuffers::VOffsetT = 36;
  pub const VT_CENTERFREQ: flatbuffers::VOffsetT = 38;
  pub const VT_DETECTLAT: flatbuffers::VOffsetT = 40;
  pub const VT_DETECTLON: flatbuffers::VOffsetT = 42;
  pub const VT_DETECTALT: flatbuffers::VOffsetT = 44;
  pub const VT_CONFSEMIMAJOR: flatbuffers::VOffsetT = 46;
  pub const VT_CONFSEMIMINOR: flatbuffers::VOffsetT = 48;
  pub const VT_CONFORIENTATION: flatbuffers::VOffsetT = 50;
  pub const VT_CONFAREA: flatbuffers::VOffsetT = 52;
  pub const VT_ATYPE: flatbuffers::VOffsetT = 54;
  pub const VT_AGJSON: flatbuffers::VOffsetT = 56;
  pub const VT_ATEXT: flatbuffers::VOffsetT = 58;
  pub const VT_AREA: flatbuffers::VOffsetT = 60;
  pub const VT_ANDIMS: flatbuffers::VOffsetT = 62;
  pub const VT_ASRID: flatbuffers::VOffsetT = 64;
  pub const VT_PASSGROUPID: flatbuffers::VOffsetT = 66;
  pub const VT_ALGVERSION: flatbuffers::VOffsetT = 68;
  pub const VT_EXTERNALID: flatbuffers::VOffsetT = 70;
  pub const VT_TAGS: flatbuffers::VOffsetT = 72;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 74;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 76;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 78;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 80;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 82;
  pub const VT_SOURCEDL: flatbuffers::VOffsetT = 84;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 86;
  pub const VT_ONORBIT: flatbuffers::VOffsetT = 88;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    RFGeoLocation_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args RFGeoLocation_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<RFGeoLocation_Full<'bldr>> {
    let mut builder = RFGeoLocation_FullBuilder::new(_fbb);
    builder.add_confArea(args.confArea);
    builder.add_confOrientation(args.confOrientation);
    builder.add_confSemiMinor(args.confSemiMinor);
    builder.add_confSemiMajor(args.confSemiMajor);
    builder.add_detectAlt(args.detectAlt);
    builder.add_detectLon(args.detectLon);
    builder.add_detectLat(args.detectLat);
    builder.add_centerFreq(args.centerFreq);
    builder.add_maxFreq(args.maxFreq);
    builder.add_minFreq(args.minFreq);
    if let Some(x) = args.onOrbit { builder.add_onOrbit(x); }
    if let Some(x) = args.sourceDL { builder.add_sourceDL(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.externalId { builder.add_externalId(x); }
    if let Some(x) = args.algVersion { builder.add_algVersion(x); }
    if let Some(x) = args.passGroupId { builder.add_passGroupId(x); }
    builder.add_asrid(args.asrid);
    builder.add_andims(args.andims);
    if let Some(x) = args.area { builder.add_area(x); }
    if let Some(x) = args.atext { builder.add_atext(x); }
    if let Some(x) = args.agjson { builder.add_agjson(x); }
    if let Some(x) = args.atype { builder.add_atype(x); }
    builder.add_numBursts(args.numBursts);
    if let Some(x) = args.origRFEmitterId { builder.add_origRFEmitterId(x); }
    if let Some(x) = args.idRFEmitter { builder.add_idRFEmitter(x); }
    if let Some(x) = args.signalOfInterest { builder.add_signalOfInterest(x); }
    if let Some(x) = args.constellation { builder.add_constellation(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.receivedTs { builder.add_receivedTs(x); }
    if let Some(x) = args.createdTs { builder.add_createdTs(x); }
    if let Some(x) = args.orderId { builder.add_orderId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> RFGeoLocation_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let orderId = self.orderId().map(|x| {
      x.to_string()
    });
    let createdTs = self.createdTs().map(|x| {
      x.to_string()
    });
    let receivedTs = self.receivedTs().map(|x| {
      x.to_string()
    });
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let constellation = self.constellation().map(|x| {
      x.to_string()
    });
    let signalOfInterest = self.signalOfInterest().map(|x| {
      x.to_string()
    });
    let idRFEmitter = self.idRFEmitter().map(|x| {
      x.to_string()
    });
    let origRFEmitterId = self.origRFEmitterId().map(|x| {
      x.to_string()
    });
    let numBursts = self.numBursts();
    let minFreq = self.minFreq();
    let maxFreq = self.maxFreq();
    let centerFreq = self.centerFreq();
    let detectLat = self.detectLat();
    let detectLon = self.detectLon();
    let detectAlt = self.detectAlt();
    let confSemiMajor = self.confSemiMajor();
    let confSemiMinor = self.confSemiMinor();
    let confOrientation = self.confOrientation();
    let confArea = self.confArea();
    let atype = self.atype().map(|x| {
      x.to_string()
    });
    let agjson = self.agjson().map(|x| {
      x.to_string()
    });
    let atext = self.atext().map(|x| {
      x.to_string()
    });
    let area = self.area().map(|x| {
      x.to_string()
    });
    let andims = self.andims();
    let asrid = self.asrid();
    let passGroupId = self.passGroupId().map(|x| {
      x.to_string()
    });
    let algVersion = self.algVersion().map(|x| {
      x.to_string()
    });
    let externalId = self.externalId().map(|x| {
      x.to_string()
    });
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let sourceDL = self.sourceDL().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let onOrbit = self.onOrbit().map(|x| {
      x.to_string()
    });
    RFGeoLocation_FullT {
      id,
      classificationMarking,
      orderId,
      createdTs,
      receivedTs,
      startTime,
      endTime,
      idOnOrbit,
      satNo,
      origObjectId,
      constellation,
      signalOfInterest,
      idRFEmitter,
      origRFEmitterId,
      numBursts,
      minFreq,
      maxFreq,
      centerFreq,
      detectLat,
      detectLon,
      detectAlt,
      confSemiMajor,
      confSemiMinor,
      confOrientation,
      confArea,
      atype,
      agjson,
      atext,
      area,
      andims,
      asrid,
      passGroupId,
      algVersion,
      externalId,
      tags,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
      onOrbit,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: 026dd511-8ba5-47d3-9909-836149f87686
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The order identifier for this RF Geo Location data set.
  /// Example: /// Example: 155240
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn orderId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ORDERID, None)}
  }
  /// Specifies the creation time associated with the order in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T23:06:18.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdTs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_CREATEDTS, None)}
  }
  /// The time representing the mean of the constituent single-burst observations in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:16:58.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn receivedTs(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_RECEIVEDTS, None)}
  }
  /// The order start time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:12:12.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_STARTTIME, None)}
  }
  /// The order end time for this RF Geo Location data set in ISO 8601 UTC with microsecond precision.
  /// Example: /// Example: 2024-05-31T21:16:15.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ENDTIME, None)}
  }
  /// Unique identifier of the satellite used to identify and geolocate RF signals of interest. This ID can be used to obtain additional information on an OnOrbit object using the 'get by ID' operation (e.g. /udl/onorbit/{id}). For example, the onorbit object with idOnOrbit = abc would be queried as /udl/onorbit/abc.
  /// Example: /// Example: HawkEye360-7
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_IDONORBIT, None)}
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RFGeoLocation_Full::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier of the satellite used to identify and geolocate RF signals of interest of this observation. This may be an internal identifier and not necessarily a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ORIGOBJECTID, None)}
  }
  /// The name of the satellite constellation.
  /// Example: /// Example: HawkEye360
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn constellation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_CONSTELLATION, None)}
  }
  /// The name of the signal of interest.
  /// Example: /// Example: GPS
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn signalOfInterest(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_SIGNALOFINTEREST, None)}
  }
  /// Optional identifier of the geolocated signal of interest RF Emitter for this observation. This ID can be used to obtain additional information on an RF Emitter object using the 'get by ID' operation (e.g. /udl/rfemitter/{id}). For example, the rfemitter object with idRFEmitter = abc would be queried as /udl/rfemitter/abc.
  /// Example: /// Example: RFEMITTER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idRFEmitter(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_IDRFEMITTER, None)}
  }
  /// Optional identifier of the emitter of interest for this observation. This may be an internal identifier and not necessarily a valid emitter Id.
  /// Example: /// Example: ORIGRFEMITTER-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origRFEmitterId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ORIGRFEMITTERID, None)}
  }
  /// The count of single-burst observations used for this geolocation observation.
  /// Example: /// Example: 17
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numBursts(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RFGeoLocation_Full::VT_NUMBURSTS, Some(0)).unwrap()}
  }
  /// The minimum detected frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  #[inline]
  pub fn minFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_MINFREQ, Some(0.0)).unwrap()}
  }
  /// The maximum detected frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_MAXFREQ, Some(0.0)).unwrap()}
  }
  /// The detected signal frequency in megahertz.
  /// Example: /// Example: 1575.42
  /// Constraints: No constraints specified.
  #[inline]
  pub fn centerFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_CENTERFREQ, Some(0.0)).unwrap()}
  }
  /// WGS-84 latitude of the most likely emitter location coordinate point, in degrees. -90 to 90 degrees (negative values south of equator).
  /// Example: /// Example: 41.172
  /// Constraints: No constraints specified.
  #[inline]
  pub fn detectLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_DETECTLAT, Some(0.0)).unwrap()}
  }
  /// WGS-84 longitude of the most likely emitter location coordinate point, in degrees. -180 to 180 degrees (negative values west of Prime Meridian).
  /// Example: /// Example: 37.019
  /// Constraints: No constraints specified.
  #[inline]
  pub fn detectLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_DETECTLON, Some(0.0)).unwrap()}
  }
  /// The altitude relative to WGS-84 ellipsoid, in meters.
  /// Example: /// Example: 123.456
  /// Constraints: No constraints specified.
  #[inline]
  pub fn detectAlt(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_DETECTALT, Some(0.0)).unwrap()}
  }
  /// Confidence ellipse semi-major axis about the detection location lat/lon point measured in meters.
  /// Example: /// Example: 9435.896
  /// Constraints: No constraints specified.
  #[inline]
  pub fn confSemiMajor(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_CONFSEMIMAJOR, Some(0.0)).unwrap()}
  }
  /// Confidence ellipse semi-minor axis about the detection location lat/lon point measured in meters.
  /// Example: /// Example: 2751.929
  /// Constraints: No constraints specified.
  #[inline]
  pub fn confSemiMinor(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_CONFSEMIMINOR, Some(0.0)).unwrap()}
  }
  /// Confidence ellipse orientation of semi-major axis about the detection location lat/lon point measured in degrees.
  /// Example: /// Example: 89.852
  /// Constraints: No constraints specified.
  #[inline]
  pub fn confOrientation(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_CONFORIENTATION, Some(0.0)).unwrap()}
  }
  /// The area of the confidence ellipse specified in meters squared to contain the emitter with a 95% probability.
  /// Example: /// Example: 81577480.056
  /// Constraints: No constraints specified.
  #[inline]
  pub fn confArea(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(RFGeoLocation_Full::VT_CONFAREA, Some(0.0)).unwrap()}
  }
  /// Type of region as projected on the ground.
  /// Example: /// Example: MultiPolygon
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn atype(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ATYPE, None)}
  }
  /// Geographical region or polygon (lat/lon pairs), as depicted by the GeoJSON representation of the geometry/geography, of the image as projected on the ground. GeoJSON Reference: https://geojson.org/. Ignored if included with a POST or PUT request that also specifies a valid 'area' or 'atext' field.
  /// Example: /// Example: {"type":"Polygon","coordinates":[[[67.3291113966927,26.156175339112],[67.2580009640721,26.091022064271],[67.1795862381682,26.6637992964562],[67.2501237475598,26.730115808233],[67.3291113966927,26.156175339112]]]}
  /// Constraints: No constraints specified.
  #[inline]
  pub fn agjson(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_AGJSON, None)}
  }
  /// Geographical region or polygon (lon/lat pairs), as depicted by the Well-Known Text representation of the geometry/geography, of the image as projected on the ground. WKT reference: https://www.opengeospatial.org/standards/wkt-crs. Ignored if included with a POST or PUT request that also specifies a valid 'area' field.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn atext(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ATEXT, None)}
  }
  /// Optional geographical region or polygon (lat/lon pairs) of the area surrounding the Point of Interest as projected on the ground.
  /// Example: /// Example: POLYGON((67.3291113966927 26.156175339112,67.2580009640721 26.091022064271,67.1795862381682 26.6637992964562,67.2501237475598 26.730115808233,67.3291113966927 26.156175339112))
  /// Constraints: No constraints specified.
  #[inline]
  pub fn area(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_AREA, None)}
  }
  /// Number of dimensions of the geometry depicted by region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn andims(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RFGeoLocation_Full::VT_ANDIMS, Some(0)).unwrap()}
  }
  /// Geographical spatial_ref_sys for region.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn asrid(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(RFGeoLocation_Full::VT_ASRID, Some(0)).unwrap()}
  }
  /// Optional external identifier referencing the entity used in the calculation of the geolocation.
  /// Example: /// Example: 80fd25a8-8b41-448d-888a-91c9dfcd940b
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn passGroupId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_PASSGROUPID, None)}
  }
  /// The RFGeo algorithm type and version used in geolocation calculations.
  /// Example: /// Example: v1.0-3-gps_nb_3ball
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn algVersion(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ALGVERSION, None)}
  }
  /// Optional ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: 780180925
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_EXTERNALID, None)}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['TAG1', 'TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(RFGeoLocation_Full::VT_TAGS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: OPS1
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ORIGNETWORK, None)}
  }
  /// The source data library from which this record was received. This could be a remote or tactical UDL or another data library. If null, the record should be assumed to have originated from the primary Enterprise UDL.
  /// Example: /// Example: AXE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn sourceDL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_SOURCEDL, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> RFGeoLocation_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<RFGeoLocation_Full_dataMode_Enum>(RFGeoLocation_Full::VT_DATAMODE, Some(RFGeoLocation_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn onOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(RFGeoLocation_Full::VT_ONORBIT, None)}
  }
}

impl flatbuffers::Verifiable for RFGeoLocation_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("orderId", Self::VT_ORDERID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdTs", Self::VT_CREATEDTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("receivedTs", Self::VT_RECEIVEDTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("constellation", Self::VT_CONSTELLATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("signalOfInterest", Self::VT_SIGNALOFINTEREST, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idRFEmitter", Self::VT_IDRFEMITTER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origRFEmitterId", Self::VT_ORIGRFEMITTERID, false)?
     .visit_field::<i32>("numBursts", Self::VT_NUMBURSTS, false)?
     .visit_field::<f64>("minFreq", Self::VT_MINFREQ, false)?
     .visit_field::<f64>("maxFreq", Self::VT_MAXFREQ, false)?
     .visit_field::<f64>("centerFreq", Self::VT_CENTERFREQ, false)?
     .visit_field::<f64>("detectLat", Self::VT_DETECTLAT, false)?
     .visit_field::<f64>("detectLon", Self::VT_DETECTLON, false)?
     .visit_field::<f64>("detectAlt", Self::VT_DETECTALT, false)?
     .visit_field::<f64>("confSemiMajor", Self::VT_CONFSEMIMAJOR, false)?
     .visit_field::<f64>("confSemiMinor", Self::VT_CONFSEMIMINOR, false)?
     .visit_field::<f64>("confOrientation", Self::VT_CONFORIENTATION, false)?
     .visit_field::<f64>("confArea", Self::VT_CONFAREA, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("atype", Self::VT_ATYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("agjson", Self::VT_AGJSON, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("atext", Self::VT_ATEXT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("area", Self::VT_AREA, false)?
     .visit_field::<i32>("andims", Self::VT_ANDIMS, false)?
     .visit_field::<i32>("asrid", Self::VT_ASRID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("passGroupId", Self::VT_PASSGROUPID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("algVersion", Self::VT_ALGVERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalId", Self::VT_EXTERNALID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceDL", Self::VT_SOURCEDL, false)?
     .visit_field::<RFGeoLocation_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("onOrbit", Self::VT_ONORBIT, false)?
     .finish();
    Ok(())
  }
}
pub struct RFGeoLocation_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub orderId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdTs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub receivedTs: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub constellation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub signalOfInterest: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idRFEmitter: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origRFEmitterId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub numBursts: i32,
    pub minFreq: f64,
    pub maxFreq: f64,
    pub centerFreq: f64,
    pub detectLat: f64,
    pub detectLon: f64,
    pub detectAlt: f64,
    pub confSemiMajor: f64,
    pub confSemiMinor: f64,
    pub confOrientation: f64,
    pub confArea: f64,
    pub atype: Option<flatbuffers::WIPOffset<&'a str>>,
    pub agjson: Option<flatbuffers::WIPOffset<&'a str>>,
    pub atext: Option<flatbuffers::WIPOffset<&'a str>>,
    pub area: Option<flatbuffers::WIPOffset<&'a str>>,
    pub andims: i32,
    pub asrid: i32,
    pub passGroupId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub algVersion: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sourceDL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: RFGeoLocation_Full_dataMode_Enum,
    pub onOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for RFGeoLocation_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    RFGeoLocation_FullArgs {
      id: None,
      classificationMarking: None,
      orderId: None,
      createdTs: None,
      receivedTs: None,
      startTime: None,
      endTime: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      constellation: None,
      signalOfInterest: None,
      idRFEmitter: None,
      origRFEmitterId: None,
      numBursts: 0,
      minFreq: 0.0,
      maxFreq: 0.0,
      centerFreq: 0.0,
      detectLat: 0.0,
      detectLon: 0.0,
      detectAlt: 0.0,
      confSemiMajor: 0.0,
      confSemiMinor: 0.0,
      confOrientation: 0.0,
      confArea: 0.0,
      atype: None,
      agjson: None,
      atext: None,
      area: None,
      andims: 0,
      asrid: 0,
      passGroupId: None,
      algVersion: None,
      externalId: None,
      tags: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: RFGeoLocation_Full_dataMode_Enum::REAL,
      onOrbit: None,
    }
  }
}

pub struct RFGeoLocation_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RFGeoLocation_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_orderId(&mut self, orderId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ORDERID, orderId);
  }
  #[inline]
  pub fn add_createdTs(&mut self, createdTs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_CREATEDTS, createdTs);
  }
  #[inline]
  pub fn add_receivedTs(&mut self, receivedTs: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_RECEIVEDTS, receivedTs);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(RFGeoLocation_Full::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_constellation(&mut self, constellation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_CONSTELLATION, constellation);
  }
  #[inline]
  pub fn add_signalOfInterest(&mut self, signalOfInterest: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_SIGNALOFINTEREST, signalOfInterest);
  }
  #[inline]
  pub fn add_idRFEmitter(&mut self, idRFEmitter: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_IDRFEMITTER, idRFEmitter);
  }
  #[inline]
  pub fn add_origRFEmitterId(&mut self, origRFEmitterId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ORIGRFEMITTERID, origRFEmitterId);
  }
  #[inline]
  pub fn add_numBursts(&mut self, numBursts: i32) {
    self.fbb_.push_slot::<i32>(RFGeoLocation_Full::VT_NUMBURSTS, numBursts, 0);
  }
  #[inline]
  pub fn add_minFreq(&mut self, minFreq: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_MINFREQ, minFreq, 0.0);
  }
  #[inline]
  pub fn add_maxFreq(&mut self, maxFreq: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_MAXFREQ, maxFreq, 0.0);
  }
  #[inline]
  pub fn add_centerFreq(&mut self, centerFreq: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_CENTERFREQ, centerFreq, 0.0);
  }
  #[inline]
  pub fn add_detectLat(&mut self, detectLat: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_DETECTLAT, detectLat, 0.0);
  }
  #[inline]
  pub fn add_detectLon(&mut self, detectLon: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_DETECTLON, detectLon, 0.0);
  }
  #[inline]
  pub fn add_detectAlt(&mut self, detectAlt: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_DETECTALT, detectAlt, 0.0);
  }
  #[inline]
  pub fn add_confSemiMajor(&mut self, confSemiMajor: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_CONFSEMIMAJOR, confSemiMajor, 0.0);
  }
  #[inline]
  pub fn add_confSemiMinor(&mut self, confSemiMinor: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_CONFSEMIMINOR, confSemiMinor, 0.0);
  }
  #[inline]
  pub fn add_confOrientation(&mut self, confOrientation: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_CONFORIENTATION, confOrientation, 0.0);
  }
  #[inline]
  pub fn add_confArea(&mut self, confArea: f64) {
    self.fbb_.push_slot::<f64>(RFGeoLocation_Full::VT_CONFAREA, confArea, 0.0);
  }
  #[inline]
  pub fn add_atype(&mut self, atype: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ATYPE, atype);
  }
  #[inline]
  pub fn add_agjson(&mut self, agjson: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_AGJSON, agjson);
  }
  #[inline]
  pub fn add_atext(&mut self, atext: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ATEXT, atext);
  }
  #[inline]
  pub fn add_area(&mut self, area: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_AREA, area);
  }
  #[inline]
  pub fn add_andims(&mut self, andims: i32) {
    self.fbb_.push_slot::<i32>(RFGeoLocation_Full::VT_ANDIMS, andims, 0);
  }
  #[inline]
  pub fn add_asrid(&mut self, asrid: i32) {
    self.fbb_.push_slot::<i32>(RFGeoLocation_Full::VT_ASRID, asrid, 0);
  }
  #[inline]
  pub fn add_passGroupId(&mut self, passGroupId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_PASSGROUPID, passGroupId);
  }
  #[inline]
  pub fn add_algVersion(&mut self, algVersion: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ALGVERSION, algVersion);
  }
  #[inline]
  pub fn add_externalId(&mut self, externalId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_EXTERNALID, externalId);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_sourceDL(&mut self, sourceDL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_SOURCEDL, sourceDL);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: RFGeoLocation_Full_dataMode_Enum) {
    self.fbb_.push_slot::<RFGeoLocation_Full_dataMode_Enum>(RFGeoLocation_Full::VT_DATAMODE, dataMode, RFGeoLocation_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_onOrbit(&mut self, onOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RFGeoLocation_Full::VT_ONORBIT, onOrbit);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RFGeoLocation_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    RFGeoLocation_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<RFGeoLocation_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for RFGeoLocation_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("RFGeoLocation_Full");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("orderId", &self.orderId());
      ds.field("createdTs", &self.createdTs());
      ds.field("receivedTs", &self.receivedTs());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("constellation", &self.constellation());
      ds.field("signalOfInterest", &self.signalOfInterest());
      ds.field("idRFEmitter", &self.idRFEmitter());
      ds.field("origRFEmitterId", &self.origRFEmitterId());
      ds.field("numBursts", &self.numBursts());
      ds.field("minFreq", &self.minFreq());
      ds.field("maxFreq", &self.maxFreq());
      ds.field("centerFreq", &self.centerFreq());
      ds.field("detectLat", &self.detectLat());
      ds.field("detectLon", &self.detectLon());
      ds.field("detectAlt", &self.detectAlt());
      ds.field("confSemiMajor", &self.confSemiMajor());
      ds.field("confSemiMinor", &self.confSemiMinor());
      ds.field("confOrientation", &self.confOrientation());
      ds.field("confArea", &self.confArea());
      ds.field("atype", &self.atype());
      ds.field("agjson", &self.agjson());
      ds.field("atext", &self.atext());
      ds.field("area", &self.area());
      ds.field("andims", &self.andims());
      ds.field("asrid", &self.asrid());
      ds.field("passGroupId", &self.passGroupId());
      ds.field("algVersion", &self.algVersion());
      ds.field("externalId", &self.externalId());
      ds.field("tags", &self.tags());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("sourceDL", &self.sourceDL());
      ds.field("dataMode", &self.dataMode());
      ds.field("onOrbit", &self.onOrbit());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct RFGeoLocation_FullT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub orderId: Option<String>,
  pub createdTs: Option<String>,
  pub receivedTs: Option<String>,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub origObjectId: Option<String>,
  pub constellation: Option<String>,
  pub signalOfInterest: Option<String>,
  pub idRFEmitter: Option<String>,
  pub origRFEmitterId: Option<String>,
  pub numBursts: i32,
  pub minFreq: f64,
  pub maxFreq: f64,
  pub centerFreq: f64,
  pub detectLat: f64,
  pub detectLon: f64,
  pub detectAlt: f64,
  pub confSemiMajor: f64,
  pub confSemiMinor: f64,
  pub confOrientation: f64,
  pub confArea: f64,
  pub atype: Option<String>,
  pub agjson: Option<String>,
  pub atext: Option<String>,
  pub area: Option<String>,
  pub andims: i32,
  pub asrid: i32,
  pub passGroupId: Option<String>,
  pub algVersion: Option<String>,
  pub externalId: Option<String>,
  pub tags: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub sourceDL: Option<String>,
  pub dataMode: RFGeoLocation_Full_dataMode_Enum,
  pub onOrbit: Option<String>,
}
impl Default for RFGeoLocation_FullT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      orderId: None,
      createdTs: None,
      receivedTs: None,
      startTime: None,
      endTime: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      constellation: None,
      signalOfInterest: None,
      idRFEmitter: None,
      origRFEmitterId: None,
      numBursts: 0,
      minFreq: 0.0,
      maxFreq: 0.0,
      centerFreq: 0.0,
      detectLat: 0.0,
      detectLon: 0.0,
      detectAlt: 0.0,
      confSemiMajor: 0.0,
      confSemiMinor: 0.0,
      confOrientation: 0.0,
      confArea: 0.0,
      atype: None,
      agjson: None,
      atext: None,
      area: None,
      andims: 0,
      asrid: 0,
      passGroupId: None,
      algVersion: None,
      externalId: None,
      tags: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      sourceDL: None,
      dataMode: RFGeoLocation_Full_dataMode_Enum::REAL,
      onOrbit: None,
    }
  }
}
impl RFGeoLocation_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<RFGeoLocation_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let orderId = self.orderId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdTs = self.createdTs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let receivedTs = self.receivedTs.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let constellation = self.constellation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let signalOfInterest = self.signalOfInterest.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idRFEmitter = self.idRFEmitter.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origRFEmitterId = self.origRFEmitterId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let numBursts = self.numBursts;
    let minFreq = self.minFreq;
    let maxFreq = self.maxFreq;
    let centerFreq = self.centerFreq;
    let detectLat = self.detectLat;
    let detectLon = self.detectLon;
    let detectAlt = self.detectAlt;
    let confSemiMajor = self.confSemiMajor;
    let confSemiMinor = self.confSemiMinor;
    let confOrientation = self.confOrientation;
    let confArea = self.confArea;
    let atype = self.atype.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let agjson = self.agjson.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let atext = self.atext.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let area = self.area.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let andims = self.andims;
    let asrid = self.asrid;
    let passGroupId = self.passGroupId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let algVersion = self.algVersion.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalId = self.externalId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sourceDL = self.sourceDL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let onOrbit = self.onOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    RFGeoLocation_Full::create(_fbb, &RFGeoLocation_FullArgs{
      id,
      classificationMarking,
      orderId,
      createdTs,
      receivedTs,
      startTime,
      endTime,
      idOnOrbit,
      satNo,
      origObjectId,
      constellation,
      signalOfInterest,
      idRFEmitter,
      origRFEmitterId,
      numBursts,
      minFreq,
      maxFreq,
      centerFreq,
      detectLat,
      detectLon,
      detectAlt,
      confSemiMajor,
      confSemiMinor,
      confOrientation,
      confArea,
      atype,
      agjson,
      atext,
      area,
      andims,
      asrid,
      passGroupId,
      algVersion,
      externalId,
      tags,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      sourceDL,
      dataMode,
      onOrbit,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `RFGeoLocation_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfgeo_location_full_unchecked`.
pub fn root_as_rfgeo_location_full(buf: &[u8]) -> Result<RFGeoLocation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<RFGeoLocation_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `RFGeoLocation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_rfgeo_location_full_unchecked`.
pub fn size_prefixed_root_as_rfgeo_location_full(buf: &[u8]) -> Result<RFGeoLocation_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<RFGeoLocation_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `RFGeoLocation_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfgeo_location_full_unchecked`.
pub fn root_as_rfgeo_location_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFGeoLocation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<RFGeoLocation_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `RFGeoLocation_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_rfgeo_location_full_unchecked`.
pub fn size_prefixed_root_as_rfgeo_location_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<RFGeoLocation_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<RFGeoLocation_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a RFGeoLocation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `RFGeoLocation_Full`.
pub unsafe fn root_as_rfgeo_location_full_unchecked(buf: &[u8]) -> RFGeoLocation_Full {
  flatbuffers::root_unchecked::<RFGeoLocation_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed RFGeoLocation_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `RFGeoLocation_Full`.
pub unsafe fn size_prefixed_root_as_rfgeo_location_full_unchecked(buf: &[u8]) -> RFGeoLocation_Full {
  flatbuffers::size_prefixed_root_unchecked::<RFGeoLocation_Full>(buf)
}
pub const RFGEO_LOCATION_FULL_IDENTIFIER: &str = "RFGE";

#[inline]
pub fn rfgeo_location_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFGEO_LOCATION_FULL_IDENTIFIER, false)
}

#[inline]
pub fn rfgeo_location_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, RFGEO_LOCATION_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_rfgeo_location_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<RFGeoLocation_Full<'a>>) {
  fbb.finish(root, Some(RFGEO_LOCATION_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_rfgeo_location_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<RFGeoLocation_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(RFGEO_LOCATION_FULL_IDENTIFIER));
}
