// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_LAUNCH_VEHICLE_DETAILS_FULL_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_LAUNCH_VEHICLE_DETAILS_FULL_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_LAUNCH_VEHICLE_DETAILS_FULL_DATA_MODE_ENUM: [LaunchVehicleDetails_Full_dataMode_Enum; 4] = [
  LaunchVehicleDetails_Full_dataMode_Enum::REAL,
  LaunchVehicleDetails_Full_dataMode_Enum::TEST,
  LaunchVehicleDetails_Full_dataMode_Enum::SIMULATED,
  LaunchVehicleDetails_Full_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct LaunchVehicleDetails_Full_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl LaunchVehicleDetails_Full_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for LaunchVehicleDetails_Full_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for LaunchVehicleDetails_Full_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for LaunchVehicleDetails_Full_dataMode_Enum {
    type Output = LaunchVehicleDetails_Full_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for LaunchVehicleDetails_Full_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for LaunchVehicleDetails_Full_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for LaunchVehicleDetails_Full_dataMode_Enum {}
pub enum LaunchVehicleDetails_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of launch vehicle details and characteristics, compiled by a particular source. A vehicle may have multiple details records from various sources.
pub struct LaunchVehicleDetails_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for LaunchVehicleDetails_Full<'a> {
  type Inner = LaunchVehicleDetails_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> LaunchVehicleDetails_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_IDLAUNCHVEHICLE: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_VARIANT: flatbuffers::VOffsetT = 10;
  pub const VT_MINORVARIANT: flatbuffers::VOffsetT = 12;
  pub const VT_CATEGORY: flatbuffers::VOffsetT = 14;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 16;
  pub const VT_LAUNCHPREFIX: flatbuffers::VOffsetT = 18;
  pub const VT_FAMILY: flatbuffers::VOffsetT = 20;
  pub const VT_PROPELLANT: flatbuffers::VOffsetT = 22;
  pub const VT_OXIDIZER: flatbuffers::VOffsetT = 24;
  pub const VT_LENGTH: flatbuffers::VOffsetT = 26;
  pub const VT_DIAMETER: flatbuffers::VOffsetT = 28;
  pub const VT_LAUNCHMASS: flatbuffers::VOffsetT = 30;
  pub const VT_GEOPAYLOADMASS: flatbuffers::VOffsetT = 32;
  pub const VT_GTOPAYLOADMASS: flatbuffers::VOffsetT = 34;
  pub const VT_LEOPAYLOADMASS: flatbuffers::VOffsetT = 36;
  pub const VT_SSOPAYLOADMASS: flatbuffers::VOffsetT = 38;
  pub const VT_FAIRINGLENGTH: flatbuffers::VOffsetT = 40;
  pub const VT_FAIRINGNAME: flatbuffers::VOffsetT = 42;
  pub const VT_FAIRINGEXTERNALDIAMETER: flatbuffers::VOffsetT = 44;
  pub const VT_FAIRINGINTERNALDIAMETER: flatbuffers::VOffsetT = 46;
  pub const VT_FAIRINGMASS: flatbuffers::VOffsetT = 48;
  pub const VT_FAIRINGMATERIAL: flatbuffers::VOffsetT = 50;
  pub const VT_MAXACCELLOAD: flatbuffers::VOffsetT = 52;
  pub const VT_MAXPAYLOADFREQLAT: flatbuffers::VOffsetT = 54;
  pub const VT_MAXPAYLOADFREQLON: flatbuffers::VOffsetT = 56;
  pub const VT_MAXACOUSTICLEVEL: flatbuffers::VOffsetT = 58;
  pub const VT_MAXACOUSTICLEVELRANGE: flatbuffers::VOffsetT = 60;
  pub const VT_SOUNDPRESSURELEVEL: flatbuffers::VOffsetT = 62;
  pub const VT_MAXFLIGHTSHOCKFORCE: flatbuffers::VOffsetT = 64;
  pub const VT_MAXFLIGHTSHOCKFREQ: flatbuffers::VOffsetT = 66;
  pub const VT_MAXFAIRINGPRESSURECHANGE: flatbuffers::VOffsetT = 68;
  pub const VT_ESTLAUNCHPRICE: flatbuffers::VOffsetT = 70;
  pub const VT_ESTLAUNCHPRICETYPICAL: flatbuffers::VOffsetT = 72;
  pub const VT_GTOINJ3SIGACCURACYAPOGEETARGET: flatbuffers::VOffsetT = 74;
  pub const VT_GTOINJ3SIGACCURACYAPOGEEMARGIN: flatbuffers::VOffsetT = 76;
  pub const VT_GTOINJ3SIGACCURACYPERIGEETARGET: flatbuffers::VOffsetT = 78;
  pub const VT_GTOINJ3SIGACCURACYPERIGEEMARGIN: flatbuffers::VOffsetT = 80;
  pub const VT_GTOINJ3SIGACCURACYINCLINATIONTARGET: flatbuffers::VOffsetT = 82;
  pub const VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN: flatbuffers::VOffsetT = 84;
  pub const VT_ATTITUDEACCURACY: flatbuffers::VOffsetT = 86;
  pub const VT_PAYLOADSEPARATIONRATE: flatbuffers::VOffsetT = 88;
  pub const VT_DEPLOYMENTROTATIONRATE: flatbuffers::VOffsetT = 90;
  pub const VT_SOURCEURL: flatbuffers::VOffsetT = 92;
  pub const VT_NOTES: flatbuffers::VOffsetT = 94;
  pub const VT_FAIRINGNOTES: flatbuffers::VOffsetT = 96;
  pub const VT_PAYLOADNOTES: flatbuffers::VOffsetT = 98;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 100;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 102;
  pub const VT_UPDATEDAT: flatbuffers::VOffsetT = 104;
  pub const VT_UPDATEDBY: flatbuffers::VOffsetT = 106;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 108;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 110;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 112;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 114;
  pub const VT_TAGS: flatbuffers::VOffsetT = 116;
  pub const VT_MANUFACTURERORG: flatbuffers::VOffsetT = 118;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    LaunchVehicleDetails_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args LaunchVehicleDetails_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<LaunchVehicleDetails_Full<'bldr>> {
    let mut builder = LaunchVehicleDetails_FullBuilder::new(_fbb);
    builder.add_deploymentRotationRate(args.deploymentRotationRate);
    builder.add_payloadSeparationRate(args.payloadSeparationRate);
    builder.add_attitudeAccuracy(args.attitudeAccuracy);
    builder.add_gtoInj3SigAccuracyInclinationMargin(args.gtoInj3SigAccuracyInclinationMargin);
    builder.add_gtoInj3SigAccuracyInclinationTarget(args.gtoInj3SigAccuracyInclinationTarget);
    builder.add_gtoInj3SigAccuracyPerigeeMargin(args.gtoInj3SigAccuracyPerigeeMargin);
    builder.add_gtoInj3SigAccuracyPerigeeTarget(args.gtoInj3SigAccuracyPerigeeTarget);
    builder.add_gtoInj3SigAccuracyApogeeMargin(args.gtoInj3SigAccuracyApogeeMargin);
    builder.add_gtoInj3SigAccuracyApogeeTarget(args.gtoInj3SigAccuracyApogeeTarget);
    builder.add_estLaunchPriceTypical(args.estLaunchPriceTypical);
    builder.add_estLaunchPrice(args.estLaunchPrice);
    builder.add_maxFairingPressureChange(args.maxFairingPressureChange);
    builder.add_maxFlightShockFreq(args.maxFlightShockFreq);
    builder.add_maxFlightShockForce(args.maxFlightShockForce);
    builder.add_soundPressureLevel(args.soundPressureLevel);
    builder.add_maxAcousticLevelRange(args.maxAcousticLevelRange);
    builder.add_maxAcousticLevel(args.maxAcousticLevel);
    builder.add_maxPayloadFreqLon(args.maxPayloadFreqLon);
    builder.add_maxPayloadFreqLat(args.maxPayloadFreqLat);
    builder.add_maxAccelLoad(args.maxAccelLoad);
    builder.add_fairingMass(args.fairingMass);
    builder.add_fairingInternalDiameter(args.fairingInternalDiameter);
    builder.add_fairingExternalDiameter(args.fairingExternalDiameter);
    builder.add_fairingLength(args.fairingLength);
    builder.add_ssoPayloadMass(args.ssoPayloadMass);
    builder.add_leoPayloadMass(args.leoPayloadMass);
    builder.add_gtoPayloadMass(args.gtoPayloadMass);
    builder.add_geoPayloadMass(args.geoPayloadMass);
    builder.add_launchMass(args.launchMass);
    builder.add_diameter(args.diameter);
    builder.add_length(args.length);
    if let Some(x) = args.manufacturerOrg { builder.add_manufacturerOrg(x); }
    if let Some(x) = args.tags { builder.add_tags(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.updatedBy { builder.add_updatedBy(x); }
    if let Some(x) = args.updatedAt { builder.add_updatedAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.payloadNotes { builder.add_payloadNotes(x); }
    if let Some(x) = args.fairingNotes { builder.add_fairingNotes(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.sourceURL { builder.add_sourceURL(x); }
    if let Some(x) = args.fairingMaterial { builder.add_fairingMaterial(x); }
    if let Some(x) = args.fairingName { builder.add_fairingName(x); }
    if let Some(x) = args.oxidizer { builder.add_oxidizer(x); }
    if let Some(x) = args.propellant { builder.add_propellant(x); }
    if let Some(x) = args.family { builder.add_family(x); }
    if let Some(x) = args.launchPrefix { builder.add_launchPrefix(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.category { builder.add_category(x); }
    if let Some(x) = args.minorVariant { builder.add_minorVariant(x); }
    if let Some(x) = args.variant { builder.add_variant(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idLaunchVehicle { builder.add_idLaunchVehicle(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> LaunchVehicleDetails_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let idLaunchVehicle = self.idLaunchVehicle().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let variant = self.variant().map(|x| {
      x.to_string()
    });
    let minorVariant = self.minorVariant().map(|x| {
      x.to_string()
    });
    let category = self.category().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let launchPrefix = self.launchPrefix().map(|x| {
      x.to_string()
    });
    let family = self.family().map(|x| {
      x.to_string()
    });
    let propellant = self.propellant().map(|x| {
      x.to_string()
    });
    let oxidizer = self.oxidizer().map(|x| {
      x.to_string()
    });
    let length = self.length();
    let diameter = self.diameter();
    let launchMass = self.launchMass();
    let geoPayloadMass = self.geoPayloadMass();
    let gtoPayloadMass = self.gtoPayloadMass();
    let leoPayloadMass = self.leoPayloadMass();
    let ssoPayloadMass = self.ssoPayloadMass();
    let fairingLength = self.fairingLength();
    let fairingName = self.fairingName().map(|x| {
      x.to_string()
    });
    let fairingExternalDiameter = self.fairingExternalDiameter();
    let fairingInternalDiameter = self.fairingInternalDiameter();
    let fairingMass = self.fairingMass();
    let fairingMaterial = self.fairingMaterial().map(|x| {
      x.to_string()
    });
    let maxAccelLoad = self.maxAccelLoad();
    let maxPayloadFreqLat = self.maxPayloadFreqLat();
    let maxPayloadFreqLon = self.maxPayloadFreqLon();
    let maxAcousticLevel = self.maxAcousticLevel();
    let maxAcousticLevelRange = self.maxAcousticLevelRange();
    let soundPressureLevel = self.soundPressureLevel();
    let maxFlightShockForce = self.maxFlightShockForce();
    let maxFlightShockFreq = self.maxFlightShockFreq();
    let maxFairingPressureChange = self.maxFairingPressureChange();
    let estLaunchPrice = self.estLaunchPrice();
    let estLaunchPriceTypical = self.estLaunchPriceTypical();
    let gtoInj3SigAccuracyApogeeTarget = self.gtoInj3SigAccuracyApogeeTarget();
    let gtoInj3SigAccuracyApogeeMargin = self.gtoInj3SigAccuracyApogeeMargin();
    let gtoInj3SigAccuracyPerigeeTarget = self.gtoInj3SigAccuracyPerigeeTarget();
    let gtoInj3SigAccuracyPerigeeMargin = self.gtoInj3SigAccuracyPerigeeMargin();
    let gtoInj3SigAccuracyInclinationTarget = self.gtoInj3SigAccuracyInclinationTarget();
    let gtoInj3SigAccuracyInclinationMargin = self.gtoInj3SigAccuracyInclinationMargin();
    let attitudeAccuracy = self.attitudeAccuracy();
    let payloadSeparationRate = self.payloadSeparationRate();
    let deploymentRotationRate = self.deploymentRotationRate();
    let sourceURL = self.sourceURL().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let fairingNotes = self.fairingNotes().map(|x| {
      x.to_string()
    });
    let payloadNotes = self.payloadNotes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let updatedAt = self.updatedAt().map(|x| {
      x.to_string()
    });
    let updatedBy = self.updatedBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let tags = self.tags().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let manufacturerOrg = self.manufacturerOrg().map(|x| {
      x.to_string()
    });
    LaunchVehicleDetails_FullT {
      id,
      idLaunchVehicle,
      classificationMarking,
      variant,
      minorVariant,
      category,
      manufacturerOrgId,
      launchPrefix,
      family,
      propellant,
      oxidizer,
      length,
      diameter,
      launchMass,
      geoPayloadMass,
      gtoPayloadMass,
      leoPayloadMass,
      ssoPayloadMass,
      fairingLength,
      fairingName,
      fairingExternalDiameter,
      fairingInternalDiameter,
      fairingMass,
      fairingMaterial,
      maxAccelLoad,
      maxPayloadFreqLat,
      maxPayloadFreqLon,
      maxAcousticLevel,
      maxAcousticLevelRange,
      soundPressureLevel,
      maxFlightShockForce,
      maxFlightShockFreq,
      maxFairingPressureChange,
      estLaunchPrice,
      estLaunchPriceTypical,
      gtoInj3SigAccuracyApogeeTarget,
      gtoInj3SigAccuracyApogeeMargin,
      gtoInj3SigAccuracyPerigeeTarget,
      gtoInj3SigAccuracyPerigeeMargin,
      gtoInj3SigAccuracyInclinationTarget,
      gtoInj3SigAccuracyInclinationMargin,
      attitudeAccuracy,
      payloadSeparationRate,
      deploymentRotationRate,
      sourceURL,
      notes,
      fairingNotes,
      payloadNotes,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
      manufacturerOrg,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: LAUNCHVEHICLEDETAILS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_ID, None)}
  }
  /// Identifier of the parent launch vehicle record.
  /// Example: /// Example: LAUNCHVEHICLE-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idLaunchVehicle(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_IDLAUNCHVEHICLE, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Vehicle variant.
  /// Example: /// Example: Example-variant
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn variant(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_VARIANT, None)}
  }
  /// Vehicle minor variant.
  /// Example: /// Example: Example-minor-variant
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn minorVariant(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_MINORVARIANT, None)}
  }
  /// Vehicle category.
  /// Example: /// Example: Example-category
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn category(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_CATEGORY, None)}
  }
  /// ID of the organization that manufactures the launch vehicle.
  /// Example: /// Example: MANUFACTURERORG-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_MANUFACTURERORGID, None)}
  }
  /// Vehicle launch prefix.
  /// Example: /// Example: AX011
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn launchPrefix(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_LAUNCHPREFIX, None)}
  }
  /// Vehicle family.
  /// Example: /// Example: Example-family
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn family(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_FAMILY, None)}
  }
  /// Propellant type.
  /// Example: /// Example: Nitrogen
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn propellant(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_PROPELLANT, None)}
  }
  /// Oxidizer type.
  /// Example: /// Example: Bromine
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn oxidizer(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_OXIDIZER, None)}
  }
  /// Vehicle length in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn length(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_LENGTH, Some(0.0)).unwrap()}
  }
  /// Vehicle diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn diameter(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_DIAMETER, Some(0.0)).unwrap()}
  }
  /// Vehicle total mass at launch time in kg (including all boosters).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn launchMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_LAUNCHMASS, Some(0.0)).unwrap()}
  }
  /// Maximum vehicle payload mass to GEO orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn geoPayloadMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GEOPAYLOADMASS, Some(0.0)).unwrap()}
  }
  /// Max vehicle payload mass to Geo-Transfer Orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gtoPayloadMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GTOPAYLOADMASS, Some(0.0)).unwrap()}
  }
  /// Max vehicle payload mass to LEO orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn leoPayloadMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_LEOPAYLOADMASS, Some(0.0)).unwrap()}
  }
  /// Max vehicle payload mass to Sun-Synchronous Orbit in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ssoPayloadMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_SSOPAYLOADMASS, Some(0.0)).unwrap()}
  }
  /// Vehicle fairing length in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fairingLength(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGLENGTH, Some(0.0)).unwrap()}
  }
  /// Name of the fairing.
  /// Example: /// Example: Example-fairing-name
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn fairingName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_FAIRINGNAME, None)}
  }
  /// Vehicle fairing maximum external diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fairingExternalDiameter(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGEXTERNALDIAMETER, Some(0.0)).unwrap()}
  }
  /// Vehicle fairing maximum internal diameter in meters.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fairingInternalDiameter(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGINTERNALDIAMETER, Some(0.0)).unwrap()}
  }
  /// Vehicle fairing mass in kg.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn fairingMass(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGMASS, Some(0.0)).unwrap()}
  }
  /// Fairing material.
  /// Example: /// Example: Example-fairing-material
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn fairingMaterial(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_FAIRINGMATERIAL, None)}
  }
  /// Vehicle maximum acceleration load in g.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxAccelLoad(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXACCELLOAD, Some(0.0)).unwrap()}
  }
  /// Vehicle maximum payload lateral frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxPayloadFreqLat(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXPAYLOADFREQLAT, Some(0.0)).unwrap()}
  }
  /// Vehicle maximum payload longitudinal frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxPayloadFreqLon(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXPAYLOADFREQLON, Some(0.0)).unwrap()}
  }
  /// Vehicle maximum acoustic level in dB.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxAcousticLevel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXACOUSTICLEVEL, Some(0.0)).unwrap()}
  }
  /// Vehicle maximum acoustic level range in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxAcousticLevelRange(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXACOUSTICLEVELRANGE, Some(0.0)).unwrap()}
  }
  /// Vehicle overall sound pressure level in dB.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn soundPressureLevel(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_SOUNDPRESSURELEVEL, Some(0.0)).unwrap()}
  }
  /// Vehicle maximum flight shock force in g.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxFlightShockForce(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXFLIGHTSHOCKFORCE, Some(0.0)).unwrap()}
  }
  /// Vehicle maximum flight shock frequency in Hz.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxFlightShockFreq(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXFLIGHTSHOCKFREQ, Some(0.0)).unwrap()}
  }
  /// Vehicle fairing maximum pressure change in kPa/sec.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn maxFairingPressureChange(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_MAXFAIRINGPRESSURECHANGE, Some(0.0)).unwrap()}
  }
  /// Launch vehicle estimated launch price in US dollars.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estLaunchPrice(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_ESTLAUNCHPRICE, Some(0.0)).unwrap()}
  }
  /// Launch vehicle typical estimated launch price in US dollars.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn estLaunchPriceTypical(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_ESTLAUNCHPRICETYPICAL, Some(0.0)).unwrap()}
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gtoInj3SigAccuracyApogeeTarget(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYAPOGEETARGET, Some(0.0)).unwrap()}
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Apogee Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gtoInj3SigAccuracyApogeeMargin(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYAPOGEEMARGIN, Some(0.0)).unwrap()}
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gtoInj3SigAccuracyPerigeeTarget(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYPERIGEETARGET, Some(0.0)).unwrap()}
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Perigee Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gtoInj3SigAccuracyPerigeeMargin(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYPERIGEEMARGIN, Some(0.0)).unwrap()}
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Target (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gtoInj3SigAccuracyInclinationTarget(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYINCLINATIONTARGET, Some(0.0)).unwrap()}
  }
  /// Launch vehicle GTO Injection 3 Sigma Accuracy Inclination Margin (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn gtoInj3SigAccuracyInclinationMargin(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN, Some(0.0)).unwrap()}
  }
  /// Launch vehicle attitude accuracy (degrees).
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn attitudeAccuracy(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_ATTITUDEACCURACY, Some(0.0)).unwrap()}
  }
  /// Launch vehicle payload separation rate in m/s.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn payloadSeparationRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_PAYLOADSEPARATIONRATE, Some(0.0)).unwrap()}
  }
  /// Launch vehicle deployment rotation rate in RPM.
  /// Example: /// Example: 10.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn deploymentRotationRate(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(LaunchVehicleDetails_Full::VT_DEPLOYMENTROTATIONRATE, Some(0.0)).unwrap()}
  }
  /// Optional URL for additional information on the vehicle.
  /// Example: /// Example: Example URL
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn sourceURL(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_SOURCEURL, None)}
  }
  /// Notes/Description of the launch vehicle.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_NOTES, None)}
  }
  /// Notes/Description of the launch vehicle fairing.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn fairingNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_FAIRINGNOTES, None)}
  }
  /// Notes/Description of the launch vehicle payload.
  /// Example: /// Example: Example notes
  /// Constraints: Minimum length = 0, Maximum length = 512
  #[inline]
  pub fn payloadNotes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_PAYLOADNOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_CREATEDBY, None)}
  }
  /// Time the row was last updated in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn updatedAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_UPDATEDAT, None)}
  }
  /// Application user who updated the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn updatedBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_UPDATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> LaunchVehicleDetails_Full_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<LaunchVehicleDetails_Full_dataMode_Enum>(LaunchVehicleDetails_Full::VT_DATAMODE, Some(LaunchVehicleDetails_Full_dataMode_Enum::REAL)).unwrap()}
  }
  /// Optional array of provider/source specific tags for this data, where each element is no longer than 32 characters, used for implementing data owner conditional access controls to restrict access to the data. Should be left null by data providers unless conditional access controls are coordinated with the UDL team.
  /// Example: /// Example: ['PROVIDER_TAG1', 'PROVIDER_TAG2']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tags(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(LaunchVehicleDetails_Full::VT_TAGS, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn manufacturerOrg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(LaunchVehicleDetails_Full::VT_MANUFACTURERORG, None)}
  }
}

impl flatbuffers::Verifiable for LaunchVehicleDetails_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idLaunchVehicle", Self::VT_IDLAUNCHVEHICLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("variant", Self::VT_VARIANT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("minorVariant", Self::VT_MINORVARIANT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("category", Self::VT_CATEGORY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("launchPrefix", Self::VT_LAUNCHPREFIX, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("family", Self::VT_FAMILY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("propellant", Self::VT_PROPELLANT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("oxidizer", Self::VT_OXIDIZER, false)?
     .visit_field::<f64>("length", Self::VT_LENGTH, false)?
     .visit_field::<f64>("diameter", Self::VT_DIAMETER, false)?
     .visit_field::<f64>("launchMass", Self::VT_LAUNCHMASS, false)?
     .visit_field::<f64>("geoPayloadMass", Self::VT_GEOPAYLOADMASS, false)?
     .visit_field::<f64>("gtoPayloadMass", Self::VT_GTOPAYLOADMASS, false)?
     .visit_field::<f64>("leoPayloadMass", Self::VT_LEOPAYLOADMASS, false)?
     .visit_field::<f64>("ssoPayloadMass", Self::VT_SSOPAYLOADMASS, false)?
     .visit_field::<f64>("fairingLength", Self::VT_FAIRINGLENGTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fairingName", Self::VT_FAIRINGNAME, false)?
     .visit_field::<f64>("fairingExternalDiameter", Self::VT_FAIRINGEXTERNALDIAMETER, false)?
     .visit_field::<f64>("fairingInternalDiameter", Self::VT_FAIRINGINTERNALDIAMETER, false)?
     .visit_field::<f64>("fairingMass", Self::VT_FAIRINGMASS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fairingMaterial", Self::VT_FAIRINGMATERIAL, false)?
     .visit_field::<f64>("maxAccelLoad", Self::VT_MAXACCELLOAD, false)?
     .visit_field::<f64>("maxPayloadFreqLat", Self::VT_MAXPAYLOADFREQLAT, false)?
     .visit_field::<f64>("maxPayloadFreqLon", Self::VT_MAXPAYLOADFREQLON, false)?
     .visit_field::<f64>("maxAcousticLevel", Self::VT_MAXACOUSTICLEVEL, false)?
     .visit_field::<f64>("maxAcousticLevelRange", Self::VT_MAXACOUSTICLEVELRANGE, false)?
     .visit_field::<f64>("soundPressureLevel", Self::VT_SOUNDPRESSURELEVEL, false)?
     .visit_field::<f64>("maxFlightShockForce", Self::VT_MAXFLIGHTSHOCKFORCE, false)?
     .visit_field::<f64>("maxFlightShockFreq", Self::VT_MAXFLIGHTSHOCKFREQ, false)?
     .visit_field::<f64>("maxFairingPressureChange", Self::VT_MAXFAIRINGPRESSURECHANGE, false)?
     .visit_field::<f64>("estLaunchPrice", Self::VT_ESTLAUNCHPRICE, false)?
     .visit_field::<f64>("estLaunchPriceTypical", Self::VT_ESTLAUNCHPRICETYPICAL, false)?
     .visit_field::<f64>("gtoInj3SigAccuracyApogeeTarget", Self::VT_GTOINJ3SIGACCURACYAPOGEETARGET, false)?
     .visit_field::<f64>("gtoInj3SigAccuracyApogeeMargin", Self::VT_GTOINJ3SIGACCURACYAPOGEEMARGIN, false)?
     .visit_field::<f64>("gtoInj3SigAccuracyPerigeeTarget", Self::VT_GTOINJ3SIGACCURACYPERIGEETARGET, false)?
     .visit_field::<f64>("gtoInj3SigAccuracyPerigeeMargin", Self::VT_GTOINJ3SIGACCURACYPERIGEEMARGIN, false)?
     .visit_field::<f64>("gtoInj3SigAccuracyInclinationTarget", Self::VT_GTOINJ3SIGACCURACYINCLINATIONTARGET, false)?
     .visit_field::<f64>("gtoInj3SigAccuracyInclinationMargin", Self::VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN, false)?
     .visit_field::<f64>("attitudeAccuracy", Self::VT_ATTITUDEACCURACY, false)?
     .visit_field::<f64>("payloadSeparationRate", Self::VT_PAYLOADSEPARATIONRATE, false)?
     .visit_field::<f64>("deploymentRotationRate", Self::VT_DEPLOYMENTROTATIONRATE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sourceURL", Self::VT_SOURCEURL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("fairingNotes", Self::VT_FAIRINGNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payloadNotes", Self::VT_PAYLOADNOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedAt", Self::VT_UPDATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("updatedBy", Self::VT_UPDATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<LaunchVehicleDetails_Full_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("tags", Self::VT_TAGS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrg", Self::VT_MANUFACTURERORG, false)?
     .finish();
    Ok(())
  }
}
pub struct LaunchVehicleDetails_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idLaunchVehicle: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub variant: Option<flatbuffers::WIPOffset<&'a str>>,
    pub minorVariant: Option<flatbuffers::WIPOffset<&'a str>>,
    pub category: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub launchPrefix: Option<flatbuffers::WIPOffset<&'a str>>,
    pub family: Option<flatbuffers::WIPOffset<&'a str>>,
    pub propellant: Option<flatbuffers::WIPOffset<&'a str>>,
    pub oxidizer: Option<flatbuffers::WIPOffset<&'a str>>,
    pub length: f64,
    pub diameter: f64,
    pub launchMass: f64,
    pub geoPayloadMass: f64,
    pub gtoPayloadMass: f64,
    pub leoPayloadMass: f64,
    pub ssoPayloadMass: f64,
    pub fairingLength: f64,
    pub fairingName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fairingExternalDiameter: f64,
    pub fairingInternalDiameter: f64,
    pub fairingMass: f64,
    pub fairingMaterial: Option<flatbuffers::WIPOffset<&'a str>>,
    pub maxAccelLoad: f64,
    pub maxPayloadFreqLat: f64,
    pub maxPayloadFreqLon: f64,
    pub maxAcousticLevel: f64,
    pub maxAcousticLevelRange: f64,
    pub soundPressureLevel: f64,
    pub maxFlightShockForce: f64,
    pub maxFlightShockFreq: f64,
    pub maxFairingPressureChange: f64,
    pub estLaunchPrice: f64,
    pub estLaunchPriceTypical: f64,
    pub gtoInj3SigAccuracyApogeeTarget: f64,
    pub gtoInj3SigAccuracyApogeeMargin: f64,
    pub gtoInj3SigAccuracyPerigeeTarget: f64,
    pub gtoInj3SigAccuracyPerigeeMargin: f64,
    pub gtoInj3SigAccuracyInclinationTarget: f64,
    pub gtoInj3SigAccuracyInclinationMargin: f64,
    pub attitudeAccuracy: f64,
    pub payloadSeparationRate: f64,
    pub deploymentRotationRate: f64,
    pub sourceURL: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub fairingNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub payloadNotes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub updatedBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: LaunchVehicleDetails_Full_dataMode_Enum,
    pub tags: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub manufacturerOrg: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for LaunchVehicleDetails_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    LaunchVehicleDetails_FullArgs {
      id: None,
      idLaunchVehicle: None,
      classificationMarking: None,
      variant: None,
      minorVariant: None,
      category: None,
      manufacturerOrgId: None,
      launchPrefix: None,
      family: None,
      propellant: None,
      oxidizer: None,
      length: 0.0,
      diameter: 0.0,
      launchMass: 0.0,
      geoPayloadMass: 0.0,
      gtoPayloadMass: 0.0,
      leoPayloadMass: 0.0,
      ssoPayloadMass: 0.0,
      fairingLength: 0.0,
      fairingName: None,
      fairingExternalDiameter: 0.0,
      fairingInternalDiameter: 0.0,
      fairingMass: 0.0,
      fairingMaterial: None,
      maxAccelLoad: 0.0,
      maxPayloadFreqLat: 0.0,
      maxPayloadFreqLon: 0.0,
      maxAcousticLevel: 0.0,
      maxAcousticLevelRange: 0.0,
      soundPressureLevel: 0.0,
      maxFlightShockForce: 0.0,
      maxFlightShockFreq: 0.0,
      maxFairingPressureChange: 0.0,
      estLaunchPrice: 0.0,
      estLaunchPriceTypical: 0.0,
      gtoInj3SigAccuracyApogeeTarget: 0.0,
      gtoInj3SigAccuracyApogeeMargin: 0.0,
      gtoInj3SigAccuracyPerigeeTarget: 0.0,
      gtoInj3SigAccuracyPerigeeMargin: 0.0,
      gtoInj3SigAccuracyInclinationTarget: 0.0,
      gtoInj3SigAccuracyInclinationMargin: 0.0,
      attitudeAccuracy: 0.0,
      payloadSeparationRate: 0.0,
      deploymentRotationRate: 0.0,
      sourceURL: None,
      notes: None,
      fairingNotes: None,
      payloadNotes: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: LaunchVehicleDetails_Full_dataMode_Enum::REAL,
      tags: None,
      manufacturerOrg: None,
    }
  }
}

pub struct LaunchVehicleDetails_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> LaunchVehicleDetails_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_idLaunchVehicle(&mut self, idLaunchVehicle: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_IDLAUNCHVEHICLE, idLaunchVehicle);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_variant(&mut self, variant: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_VARIANT, variant);
  }
  #[inline]
  pub fn add_minorVariant(&mut self, minorVariant: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_MINORVARIANT, minorVariant);
  }
  #[inline]
  pub fn add_category(&mut self, category: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_CATEGORY, category);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_launchPrefix(&mut self, launchPrefix: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_LAUNCHPREFIX, launchPrefix);
  }
  #[inline]
  pub fn add_family(&mut self, family: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_FAMILY, family);
  }
  #[inline]
  pub fn add_propellant(&mut self, propellant: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_PROPELLANT, propellant);
  }
  #[inline]
  pub fn add_oxidizer(&mut self, oxidizer: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_OXIDIZER, oxidizer);
  }
  #[inline]
  pub fn add_length(&mut self, length: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_LENGTH, length, 0.0);
  }
  #[inline]
  pub fn add_diameter(&mut self, diameter: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_DIAMETER, diameter, 0.0);
  }
  #[inline]
  pub fn add_launchMass(&mut self, launchMass: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_LAUNCHMASS, launchMass, 0.0);
  }
  #[inline]
  pub fn add_geoPayloadMass(&mut self, geoPayloadMass: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GEOPAYLOADMASS, geoPayloadMass, 0.0);
  }
  #[inline]
  pub fn add_gtoPayloadMass(&mut self, gtoPayloadMass: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GTOPAYLOADMASS, gtoPayloadMass, 0.0);
  }
  #[inline]
  pub fn add_leoPayloadMass(&mut self, leoPayloadMass: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_LEOPAYLOADMASS, leoPayloadMass, 0.0);
  }
  #[inline]
  pub fn add_ssoPayloadMass(&mut self, ssoPayloadMass: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_SSOPAYLOADMASS, ssoPayloadMass, 0.0);
  }
  #[inline]
  pub fn add_fairingLength(&mut self, fairingLength: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGLENGTH, fairingLength, 0.0);
  }
  #[inline]
  pub fn add_fairingName(&mut self, fairingName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_FAIRINGNAME, fairingName);
  }
  #[inline]
  pub fn add_fairingExternalDiameter(&mut self, fairingExternalDiameter: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGEXTERNALDIAMETER, fairingExternalDiameter, 0.0);
  }
  #[inline]
  pub fn add_fairingInternalDiameter(&mut self, fairingInternalDiameter: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGINTERNALDIAMETER, fairingInternalDiameter, 0.0);
  }
  #[inline]
  pub fn add_fairingMass(&mut self, fairingMass: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_FAIRINGMASS, fairingMass, 0.0);
  }
  #[inline]
  pub fn add_fairingMaterial(&mut self, fairingMaterial: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_FAIRINGMATERIAL, fairingMaterial);
  }
  #[inline]
  pub fn add_maxAccelLoad(&mut self, maxAccelLoad: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXACCELLOAD, maxAccelLoad, 0.0);
  }
  #[inline]
  pub fn add_maxPayloadFreqLat(&mut self, maxPayloadFreqLat: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXPAYLOADFREQLAT, maxPayloadFreqLat, 0.0);
  }
  #[inline]
  pub fn add_maxPayloadFreqLon(&mut self, maxPayloadFreqLon: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXPAYLOADFREQLON, maxPayloadFreqLon, 0.0);
  }
  #[inline]
  pub fn add_maxAcousticLevel(&mut self, maxAcousticLevel: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXACOUSTICLEVEL, maxAcousticLevel, 0.0);
  }
  #[inline]
  pub fn add_maxAcousticLevelRange(&mut self, maxAcousticLevelRange: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXACOUSTICLEVELRANGE, maxAcousticLevelRange, 0.0);
  }
  #[inline]
  pub fn add_soundPressureLevel(&mut self, soundPressureLevel: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_SOUNDPRESSURELEVEL, soundPressureLevel, 0.0);
  }
  #[inline]
  pub fn add_maxFlightShockForce(&mut self, maxFlightShockForce: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXFLIGHTSHOCKFORCE, maxFlightShockForce, 0.0);
  }
  #[inline]
  pub fn add_maxFlightShockFreq(&mut self, maxFlightShockFreq: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXFLIGHTSHOCKFREQ, maxFlightShockFreq, 0.0);
  }
  #[inline]
  pub fn add_maxFairingPressureChange(&mut self, maxFairingPressureChange: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_MAXFAIRINGPRESSURECHANGE, maxFairingPressureChange, 0.0);
  }
  #[inline]
  pub fn add_estLaunchPrice(&mut self, estLaunchPrice: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_ESTLAUNCHPRICE, estLaunchPrice, 0.0);
  }
  #[inline]
  pub fn add_estLaunchPriceTypical(&mut self, estLaunchPriceTypical: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_ESTLAUNCHPRICETYPICAL, estLaunchPriceTypical, 0.0);
  }
  #[inline]
  pub fn add_gtoInj3SigAccuracyApogeeTarget(&mut self, gtoInj3SigAccuracyApogeeTarget: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYAPOGEETARGET, gtoInj3SigAccuracyApogeeTarget, 0.0);
  }
  #[inline]
  pub fn add_gtoInj3SigAccuracyApogeeMargin(&mut self, gtoInj3SigAccuracyApogeeMargin: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYAPOGEEMARGIN, gtoInj3SigAccuracyApogeeMargin, 0.0);
  }
  #[inline]
  pub fn add_gtoInj3SigAccuracyPerigeeTarget(&mut self, gtoInj3SigAccuracyPerigeeTarget: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYPERIGEETARGET, gtoInj3SigAccuracyPerigeeTarget, 0.0);
  }
  #[inline]
  pub fn add_gtoInj3SigAccuracyPerigeeMargin(&mut self, gtoInj3SigAccuracyPerigeeMargin: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYPERIGEEMARGIN, gtoInj3SigAccuracyPerigeeMargin, 0.0);
  }
  #[inline]
  pub fn add_gtoInj3SigAccuracyInclinationTarget(&mut self, gtoInj3SigAccuracyInclinationTarget: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYINCLINATIONTARGET, gtoInj3SigAccuracyInclinationTarget, 0.0);
  }
  #[inline]
  pub fn add_gtoInj3SigAccuracyInclinationMargin(&mut self, gtoInj3SigAccuracyInclinationMargin: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_GTOINJ3SIGACCURACYINCLINATIONMARGIN, gtoInj3SigAccuracyInclinationMargin, 0.0);
  }
  #[inline]
  pub fn add_attitudeAccuracy(&mut self, attitudeAccuracy: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_ATTITUDEACCURACY, attitudeAccuracy, 0.0);
  }
  #[inline]
  pub fn add_payloadSeparationRate(&mut self, payloadSeparationRate: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_PAYLOADSEPARATIONRATE, payloadSeparationRate, 0.0);
  }
  #[inline]
  pub fn add_deploymentRotationRate(&mut self, deploymentRotationRate: f64) {
    self.fbb_.push_slot::<f64>(LaunchVehicleDetails_Full::VT_DEPLOYMENTROTATIONRATE, deploymentRotationRate, 0.0);
  }
  #[inline]
  pub fn add_sourceURL(&mut self, sourceURL: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_SOURCEURL, sourceURL);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_fairingNotes(&mut self, fairingNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_FAIRINGNOTES, fairingNotes);
  }
  #[inline]
  pub fn add_payloadNotes(&mut self, payloadNotes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_PAYLOADNOTES, payloadNotes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_updatedAt(&mut self, updatedAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_UPDATEDAT, updatedAt);
  }
  #[inline]
  pub fn add_updatedBy(&mut self, updatedBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_UPDATEDBY, updatedBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: LaunchVehicleDetails_Full_dataMode_Enum) {
    self.fbb_.push_slot::<LaunchVehicleDetails_Full_dataMode_Enum>(LaunchVehicleDetails_Full::VT_DATAMODE, dataMode, LaunchVehicleDetails_Full_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_tags(&mut self, tags: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_TAGS, tags);
  }
  #[inline]
  pub fn add_manufacturerOrg(&mut self, manufacturerOrg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(LaunchVehicleDetails_Full::VT_MANUFACTURERORG, manufacturerOrg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> LaunchVehicleDetails_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    LaunchVehicleDetails_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<LaunchVehicleDetails_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for LaunchVehicleDetails_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("LaunchVehicleDetails_Full");
      ds.field("id", &self.id());
      ds.field("idLaunchVehicle", &self.idLaunchVehicle());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("variant", &self.variant());
      ds.field("minorVariant", &self.minorVariant());
      ds.field("category", &self.category());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("launchPrefix", &self.launchPrefix());
      ds.field("family", &self.family());
      ds.field("propellant", &self.propellant());
      ds.field("oxidizer", &self.oxidizer());
      ds.field("length", &self.length());
      ds.field("diameter", &self.diameter());
      ds.field("launchMass", &self.launchMass());
      ds.field("geoPayloadMass", &self.geoPayloadMass());
      ds.field("gtoPayloadMass", &self.gtoPayloadMass());
      ds.field("leoPayloadMass", &self.leoPayloadMass());
      ds.field("ssoPayloadMass", &self.ssoPayloadMass());
      ds.field("fairingLength", &self.fairingLength());
      ds.field("fairingName", &self.fairingName());
      ds.field("fairingExternalDiameter", &self.fairingExternalDiameter());
      ds.field("fairingInternalDiameter", &self.fairingInternalDiameter());
      ds.field("fairingMass", &self.fairingMass());
      ds.field("fairingMaterial", &self.fairingMaterial());
      ds.field("maxAccelLoad", &self.maxAccelLoad());
      ds.field("maxPayloadFreqLat", &self.maxPayloadFreqLat());
      ds.field("maxPayloadFreqLon", &self.maxPayloadFreqLon());
      ds.field("maxAcousticLevel", &self.maxAcousticLevel());
      ds.field("maxAcousticLevelRange", &self.maxAcousticLevelRange());
      ds.field("soundPressureLevel", &self.soundPressureLevel());
      ds.field("maxFlightShockForce", &self.maxFlightShockForce());
      ds.field("maxFlightShockFreq", &self.maxFlightShockFreq());
      ds.field("maxFairingPressureChange", &self.maxFairingPressureChange());
      ds.field("estLaunchPrice", &self.estLaunchPrice());
      ds.field("estLaunchPriceTypical", &self.estLaunchPriceTypical());
      ds.field("gtoInj3SigAccuracyApogeeTarget", &self.gtoInj3SigAccuracyApogeeTarget());
      ds.field("gtoInj3SigAccuracyApogeeMargin", &self.gtoInj3SigAccuracyApogeeMargin());
      ds.field("gtoInj3SigAccuracyPerigeeTarget", &self.gtoInj3SigAccuracyPerigeeTarget());
      ds.field("gtoInj3SigAccuracyPerigeeMargin", &self.gtoInj3SigAccuracyPerigeeMargin());
      ds.field("gtoInj3SigAccuracyInclinationTarget", &self.gtoInj3SigAccuracyInclinationTarget());
      ds.field("gtoInj3SigAccuracyInclinationMargin", &self.gtoInj3SigAccuracyInclinationMargin());
      ds.field("attitudeAccuracy", &self.attitudeAccuracy());
      ds.field("payloadSeparationRate", &self.payloadSeparationRate());
      ds.field("deploymentRotationRate", &self.deploymentRotationRate());
      ds.field("sourceURL", &self.sourceURL());
      ds.field("notes", &self.notes());
      ds.field("fairingNotes", &self.fairingNotes());
      ds.field("payloadNotes", &self.payloadNotes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("updatedAt", &self.updatedAt());
      ds.field("updatedBy", &self.updatedBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("tags", &self.tags());
      ds.field("manufacturerOrg", &self.manufacturerOrg());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct LaunchVehicleDetails_FullT {
  pub id: Option<String>,
  pub idLaunchVehicle: Option<String>,
  pub classificationMarking: Option<String>,
  pub variant: Option<String>,
  pub minorVariant: Option<String>,
  pub category: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub launchPrefix: Option<String>,
  pub family: Option<String>,
  pub propellant: Option<String>,
  pub oxidizer: Option<String>,
  pub length: f64,
  pub diameter: f64,
  pub launchMass: f64,
  pub geoPayloadMass: f64,
  pub gtoPayloadMass: f64,
  pub leoPayloadMass: f64,
  pub ssoPayloadMass: f64,
  pub fairingLength: f64,
  pub fairingName: Option<String>,
  pub fairingExternalDiameter: f64,
  pub fairingInternalDiameter: f64,
  pub fairingMass: f64,
  pub fairingMaterial: Option<String>,
  pub maxAccelLoad: f64,
  pub maxPayloadFreqLat: f64,
  pub maxPayloadFreqLon: f64,
  pub maxAcousticLevel: f64,
  pub maxAcousticLevelRange: f64,
  pub soundPressureLevel: f64,
  pub maxFlightShockForce: f64,
  pub maxFlightShockFreq: f64,
  pub maxFairingPressureChange: f64,
  pub estLaunchPrice: f64,
  pub estLaunchPriceTypical: f64,
  pub gtoInj3SigAccuracyApogeeTarget: f64,
  pub gtoInj3SigAccuracyApogeeMargin: f64,
  pub gtoInj3SigAccuracyPerigeeTarget: f64,
  pub gtoInj3SigAccuracyPerigeeMargin: f64,
  pub gtoInj3SigAccuracyInclinationTarget: f64,
  pub gtoInj3SigAccuracyInclinationMargin: f64,
  pub attitudeAccuracy: f64,
  pub payloadSeparationRate: f64,
  pub deploymentRotationRate: f64,
  pub sourceURL: Option<String>,
  pub notes: Option<String>,
  pub fairingNotes: Option<String>,
  pub payloadNotes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub updatedAt: Option<String>,
  pub updatedBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: LaunchVehicleDetails_Full_dataMode_Enum,
  pub tags: Option<Vec<String>>,
  pub manufacturerOrg: Option<String>,
}
impl Default for LaunchVehicleDetails_FullT {
  fn default() -> Self {
    Self {
      id: None,
      idLaunchVehicle: None,
      classificationMarking: None,
      variant: None,
      minorVariant: None,
      category: None,
      manufacturerOrgId: None,
      launchPrefix: None,
      family: None,
      propellant: None,
      oxidizer: None,
      length: 0.0,
      diameter: 0.0,
      launchMass: 0.0,
      geoPayloadMass: 0.0,
      gtoPayloadMass: 0.0,
      leoPayloadMass: 0.0,
      ssoPayloadMass: 0.0,
      fairingLength: 0.0,
      fairingName: None,
      fairingExternalDiameter: 0.0,
      fairingInternalDiameter: 0.0,
      fairingMass: 0.0,
      fairingMaterial: None,
      maxAccelLoad: 0.0,
      maxPayloadFreqLat: 0.0,
      maxPayloadFreqLon: 0.0,
      maxAcousticLevel: 0.0,
      maxAcousticLevelRange: 0.0,
      soundPressureLevel: 0.0,
      maxFlightShockForce: 0.0,
      maxFlightShockFreq: 0.0,
      maxFairingPressureChange: 0.0,
      estLaunchPrice: 0.0,
      estLaunchPriceTypical: 0.0,
      gtoInj3SigAccuracyApogeeTarget: 0.0,
      gtoInj3SigAccuracyApogeeMargin: 0.0,
      gtoInj3SigAccuracyPerigeeTarget: 0.0,
      gtoInj3SigAccuracyPerigeeMargin: 0.0,
      gtoInj3SigAccuracyInclinationTarget: 0.0,
      gtoInj3SigAccuracyInclinationMargin: 0.0,
      attitudeAccuracy: 0.0,
      payloadSeparationRate: 0.0,
      deploymentRotationRate: 0.0,
      sourceURL: None,
      notes: None,
      fairingNotes: None,
      payloadNotes: None,
      createdAt: None,
      createdBy: None,
      updatedAt: None,
      updatedBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: LaunchVehicleDetails_Full_dataMode_Enum::REAL,
      tags: None,
      manufacturerOrg: None,
    }
  }
}
impl LaunchVehicleDetails_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<LaunchVehicleDetails_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idLaunchVehicle = self.idLaunchVehicle.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let variant = self.variant.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let minorVariant = self.minorVariant.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let category = self.category.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let launchPrefix = self.launchPrefix.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let family = self.family.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let propellant = self.propellant.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let oxidizer = self.oxidizer.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let length = self.length;
    let diameter = self.diameter;
    let launchMass = self.launchMass;
    let geoPayloadMass = self.geoPayloadMass;
    let gtoPayloadMass = self.gtoPayloadMass;
    let leoPayloadMass = self.leoPayloadMass;
    let ssoPayloadMass = self.ssoPayloadMass;
    let fairingLength = self.fairingLength;
    let fairingName = self.fairingName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fairingExternalDiameter = self.fairingExternalDiameter;
    let fairingInternalDiameter = self.fairingInternalDiameter;
    let fairingMass = self.fairingMass;
    let fairingMaterial = self.fairingMaterial.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let maxAccelLoad = self.maxAccelLoad;
    let maxPayloadFreqLat = self.maxPayloadFreqLat;
    let maxPayloadFreqLon = self.maxPayloadFreqLon;
    let maxAcousticLevel = self.maxAcousticLevel;
    let maxAcousticLevelRange = self.maxAcousticLevelRange;
    let soundPressureLevel = self.soundPressureLevel;
    let maxFlightShockForce = self.maxFlightShockForce;
    let maxFlightShockFreq = self.maxFlightShockFreq;
    let maxFairingPressureChange = self.maxFairingPressureChange;
    let estLaunchPrice = self.estLaunchPrice;
    let estLaunchPriceTypical = self.estLaunchPriceTypical;
    let gtoInj3SigAccuracyApogeeTarget = self.gtoInj3SigAccuracyApogeeTarget;
    let gtoInj3SigAccuracyApogeeMargin = self.gtoInj3SigAccuracyApogeeMargin;
    let gtoInj3SigAccuracyPerigeeTarget = self.gtoInj3SigAccuracyPerigeeTarget;
    let gtoInj3SigAccuracyPerigeeMargin = self.gtoInj3SigAccuracyPerigeeMargin;
    let gtoInj3SigAccuracyInclinationTarget = self.gtoInj3SigAccuracyInclinationTarget;
    let gtoInj3SigAccuracyInclinationMargin = self.gtoInj3SigAccuracyInclinationMargin;
    let attitudeAccuracy = self.attitudeAccuracy;
    let payloadSeparationRate = self.payloadSeparationRate;
    let deploymentRotationRate = self.deploymentRotationRate;
    let sourceURL = self.sourceURL.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let fairingNotes = self.fairingNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let payloadNotes = self.payloadNotes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedAt = self.updatedAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let updatedBy = self.updatedBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let tags = self.tags.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let manufacturerOrg = self.manufacturerOrg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    LaunchVehicleDetails_Full::create(_fbb, &LaunchVehicleDetails_FullArgs{
      id,
      idLaunchVehicle,
      classificationMarking,
      variant,
      minorVariant,
      category,
      manufacturerOrgId,
      launchPrefix,
      family,
      propellant,
      oxidizer,
      length,
      diameter,
      launchMass,
      geoPayloadMass,
      gtoPayloadMass,
      leoPayloadMass,
      ssoPayloadMass,
      fairingLength,
      fairingName,
      fairingExternalDiameter,
      fairingInternalDiameter,
      fairingMass,
      fairingMaterial,
      maxAccelLoad,
      maxPayloadFreqLat,
      maxPayloadFreqLon,
      maxAcousticLevel,
      maxAcousticLevelRange,
      soundPressureLevel,
      maxFlightShockForce,
      maxFlightShockFreq,
      maxFairingPressureChange,
      estLaunchPrice,
      estLaunchPriceTypical,
      gtoInj3SigAccuracyApogeeTarget,
      gtoInj3SigAccuracyApogeeMargin,
      gtoInj3SigAccuracyPerigeeTarget,
      gtoInj3SigAccuracyPerigeeMargin,
      gtoInj3SigAccuracyInclinationTarget,
      gtoInj3SigAccuracyInclinationMargin,
      attitudeAccuracy,
      payloadSeparationRate,
      deploymentRotationRate,
      sourceURL,
      notes,
      fairingNotes,
      payloadNotes,
      createdAt,
      createdBy,
      updatedAt,
      updatedBy,
      source,
      origin,
      origNetwork,
      dataMode,
      tags,
      manufacturerOrg,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `LaunchVehicleDetails_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_vehicle_details_full_unchecked`.
pub fn root_as_launch_vehicle_details_full(buf: &[u8]) -> Result<LaunchVehicleDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<LaunchVehicleDetails_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `LaunchVehicleDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_launch_vehicle_details_full_unchecked`.
pub fn size_prefixed_root_as_launch_vehicle_details_full(buf: &[u8]) -> Result<LaunchVehicleDetails_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<LaunchVehicleDetails_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `LaunchVehicleDetails_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_vehicle_details_full_unchecked`.
pub fn root_as_launch_vehicle_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LaunchVehicleDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<LaunchVehicleDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `LaunchVehicleDetails_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_launch_vehicle_details_full_unchecked`.
pub fn size_prefixed_root_as_launch_vehicle_details_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<LaunchVehicleDetails_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<LaunchVehicleDetails_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a LaunchVehicleDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `LaunchVehicleDetails_Full`.
pub unsafe fn root_as_launch_vehicle_details_full_unchecked(buf: &[u8]) -> LaunchVehicleDetails_Full {
  flatbuffers::root_unchecked::<LaunchVehicleDetails_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed LaunchVehicleDetails_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `LaunchVehicleDetails_Full`.
pub unsafe fn size_prefixed_root_as_launch_vehicle_details_full_unchecked(buf: &[u8]) -> LaunchVehicleDetails_Full {
  flatbuffers::size_prefixed_root_unchecked::<LaunchVehicleDetails_Full>(buf)
}
pub const LAUNCH_VEHICLE_DETAILS_FULL_IDENTIFIER: &str = "LAUN";

#[inline]
pub fn launch_vehicle_details_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LAUNCH_VEHICLE_DETAILS_FULL_IDENTIFIER, false)
}

#[inline]
pub fn launch_vehicle_details_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, LAUNCH_VEHICLE_DETAILS_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_launch_vehicle_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<LaunchVehicleDetails_Full<'a>>) {
  fbb.finish(root, Some(LAUNCH_VEHICLE_DETAILS_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_launch_vehicle_details_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<LaunchVehicleDetails_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(LAUNCH_VEHICLE_DETAILS_FULL_IDENTIFIER));
}
