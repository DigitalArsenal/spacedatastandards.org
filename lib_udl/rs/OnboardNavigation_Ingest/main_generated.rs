// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ONBOARD_NAVIGATION_INGEST_REFERENCE_FRAME_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ONBOARD_NAVIGATION_INGEST_REFERENCE_FRAME_ENUM: i8 = 5;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ONBOARD_NAVIGATION_INGEST_REFERENCE_FRAME_ENUM: [OnboardNavigation_Ingest_referenceFrame_Enum; 6] = [
  OnboardNavigation_Ingest_referenceFrame_Enum::J2000,
  OnboardNavigation_Ingest_referenceFrame_Enum::EFG_TDR,
  OnboardNavigation_Ingest_referenceFrame_Enum::ECR_ECEF,
  OnboardNavigation_Ingest_referenceFrame_Enum::TEME,
  OnboardNavigation_Ingest_referenceFrame_Enum::ITRF,
  OnboardNavigation_Ingest_referenceFrame_Enum::GCRF,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OnboardNavigation_Ingest_referenceFrame_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl OnboardNavigation_Ingest_referenceFrame_Enum {
  /// No description available.
  pub const J2000: Self = Self(0);
  /// No description available.
  pub const EFG_TDR: Self = Self(1);
  /// No description available.
  pub const ECR_ECEF: Self = Self(2);
  /// No description available.
  pub const TEME: Self = Self(3);
  /// No description available.
  pub const ITRF: Self = Self(4);
  /// No description available.
  pub const GCRF: Self = Self(5);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 5;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::J2000,
    Self::EFG_TDR,
    Self::ECR_ECEF,
    Self::TEME,
    Self::ITRF,
    Self::GCRF,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::J2000 => Some("J2000"),
      Self::EFG_TDR => Some("EFG_TDR"),
      Self::ECR_ECEF => Some("ECR_ECEF"),
      Self::TEME => Some("TEME"),
      Self::ITRF => Some("ITRF"),
      Self::GCRF => Some("GCRF"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OnboardNavigation_Ingest_referenceFrame_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OnboardNavigation_Ingest_referenceFrame_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OnboardNavigation_Ingest_referenceFrame_Enum {
    type Output = OnboardNavigation_Ingest_referenceFrame_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OnboardNavigation_Ingest_referenceFrame_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OnboardNavigation_Ingest_referenceFrame_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OnboardNavigation_Ingest_referenceFrame_Enum {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_ONBOARD_NAVIGATION_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_ONBOARD_NAVIGATION_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_ONBOARD_NAVIGATION_INGEST_DATA_MODE_ENUM: [OnboardNavigation_Ingest_dataMode_Enum; 4] = [
  OnboardNavigation_Ingest_dataMode_Enum::REAL,
  OnboardNavigation_Ingest_dataMode_Enum::TEST,
  OnboardNavigation_Ingest_dataMode_Enum::SIMULATED,
  OnboardNavigation_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct OnboardNavigation_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl OnboardNavigation_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for OnboardNavigation_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for OnboardNavigation_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for OnboardNavigation_Ingest_dataMode_Enum {
    type Output = OnboardNavigation_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for OnboardNavigation_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for OnboardNavigation_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for OnboardNavigation_Ingest_dataMode_Enum {}
pub enum OnboardNavigation_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// These services provide spacecraft positional data derived from on-board navigational sensors.  Navigational points are provided in kilometers and in a user specified reference frame, with ECI J2K being preferred.
pub struct OnboardNavigation_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for OnboardNavigation_Ingest<'a> {
  type Inner = OnboardNavigation_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> OnboardNavigation_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDONORBIT: flatbuffers::VOffsetT = 8;
  pub const VT_SATNO: flatbuffers::VOffsetT = 10;
  pub const VT_ORIGOBJECTID: flatbuffers::VOffsetT = 12;
  pub const VT_STARTTIME: flatbuffers::VOffsetT = 14;
  pub const VT_ENDTIME: flatbuffers::VOffsetT = 16;
  pub const VT_ESID: flatbuffers::VOffsetT = 18;
  pub const VT_STARCATNAME: flatbuffers::VOffsetT = 20;
  pub const VT_STARCATLOADTIME: flatbuffers::VOffsetT = 22;
  pub const VT_IDSTATEVECTOR: flatbuffers::VOffsetT = 24;
  pub const VT_TS: flatbuffers::VOffsetT = 26;
  pub const VT_REFERENCEFRAME: flatbuffers::VOffsetT = 28;
  pub const VT_SUNSENSOR: flatbuffers::VOffsetT = 30;
  pub const VT_MAG: flatbuffers::VOffsetT = 32;
  pub const VT_STARTRACKER: flatbuffers::VOffsetT = 34;
  pub const VT_DELTAPOS: flatbuffers::VOffsetT = 36;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 38;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 40;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 44;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 46;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 48;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    OnboardNavigation_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args OnboardNavigation_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<OnboardNavigation_Ingest<'bldr>> {
    let mut builder = OnboardNavigation_IngestBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.deltaPos { builder.add_deltaPos(x); }
    if let Some(x) = args.starTracker { builder.add_starTracker(x); }
    if let Some(x) = args.mag { builder.add_mag(x); }
    if let Some(x) = args.sunSensor { builder.add_sunSensor(x); }
    if let Some(x) = args.ts { builder.add_ts(x); }
    if let Some(x) = args.idStateVector { builder.add_idStateVector(x); }
    if let Some(x) = args.starCatLoadTime { builder.add_starCatLoadTime(x); }
    if let Some(x) = args.starCatName { builder.add_starCatName(x); }
    if let Some(x) = args.esId { builder.add_esId(x); }
    if let Some(x) = args.endTime { builder.add_endTime(x); }
    if let Some(x) = args.startTime { builder.add_startTime(x); }
    if let Some(x) = args.origObjectId { builder.add_origObjectId(x); }
    builder.add_satNo(args.satNo);
    if let Some(x) = args.idOnOrbit { builder.add_idOnOrbit(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.add_referenceFrame(args.referenceFrame);
    builder.finish()
  }

  pub fn unpack(&self) -> OnboardNavigation_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idOnOrbit = self.idOnOrbit().map(|x| {
      x.to_string()
    });
    let satNo = self.satNo();
    let origObjectId = self.origObjectId().map(|x| {
      x.to_string()
    });
    let startTime = self.startTime().map(|x| {
      x.to_string()
    });
    let endTime = self.endTime().map(|x| {
      x.to_string()
    });
    let esId = self.esId().map(|x| {
      x.to_string()
    });
    let starCatName = self.starCatName().map(|x| {
      x.to_string()
    });
    let starCatLoadTime = self.starCatLoadTime().map(|x| {
      x.to_string()
    });
    let idStateVector = self.idStateVector().map(|x| {
      x.to_string()
    });
    let ts = self.ts().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let referenceFrame = self.referenceFrame();
    let sunSensor = self.sunSensor().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let mag = self.mag().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let starTracker = self.starTracker().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let deltaPos = self.deltaPos().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    OnboardNavigation_IngestT {
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      origObjectId,
      startTime,
      endTime,
      esId,
      starCatName,
      starCatLoadTime,
      idStateVector,
      ts,
      referenceFrame,
      sunSensor,
      mag,
      starTracker,
      deltaPos,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: ONBOARD-NAVIGATION-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Unique identifier of the primary satellite on-orbit object.
  /// Example: /// Example: ONORBIT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idOnOrbit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_IDONORBIT, None)}
  }
  /// Satellite/catalog number of the target on-orbit object.
  /// Example: /// Example: 101
  /// Constraints: No constraints specified.
  #[inline]
  pub fn satNo(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(OnboardNavigation_Ingest::VT_SATNO, Some(0)).unwrap()}
  }
  /// Optional identifier provided by the data source to indicate the target object of this record. This may be an internal identifier and not necessarily map to a valid satellite number.
  /// Example: /// Example: ORIGOBJECT-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn origObjectId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_ORIGOBJECTID, None)}
  }
  /// Start time of the sensor data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-07-20T01:02:03.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn startTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_STARTTIME, None)}
  }
  /// End time of the sensor data, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-07-20T01:02:03.123456Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn endTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_ENDTIME, None)}
  }
  /// Unique identifier of the parent EphemerisSet, if this data is correlated with an Ephemeris.  If multiple nav sensor records are required, this ID may be associated with each of those records if each is synced to the ephemeris points.
  /// Example: /// Example: EPHEMERISSET-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn esId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_ESID, None)}
  }
  /// The name or identifier the star catalog in use.
  /// Example: /// Example: STAR-CAT-NAME
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn starCatName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_STARCATNAME, None)}
  }
  /// The last load time of the current star catalog onboard this spacecraft.
  /// Example: /// Example: 2021-07-21T01:02:03.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn starCatLoadTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_STARCATLOADTIME, None)}
  }
  /// Unique identifier of the last onboard state vector.
  /// Example: /// Example: STATE-VECTOR-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idStateVector(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_IDSTATEVECTOR, None)}
  }
  /// Array of epochs of the observations, in ISO 8601 UTC format.  The epochs are assumed to correspond to all sensor data in this record.  If sensors do not share a common epoch then separate records should be generated.
  /// Example: /// Example: ['2021-07-21T01:02:03.120003Z']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn ts(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OnboardNavigation_Ingest::VT_TS, None)}
  }
  /// The reference frame in which the sensor derived positions are provided. If the referenceFrame is null it is assumed to be J2000.  Note that this frame is assumed to apply to all of the sensor data in this record.  If onboard sensors process positional estimates in different frames then separate records should be generated.
  /// Example: /// Example: J2000
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn referenceFrame(&self) -> OnboardNavigation_Ingest_referenceFrame_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OnboardNavigation_Ingest_referenceFrame_Enum>(OnboardNavigation_Ingest::VT_REFERENCEFRAME, Some(OnboardNavigation_Ingest_referenceFrame_Enum::J2000)).unwrap()}
  }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard sun sensor, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sunSensor(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OnboardNavigation_Ingest::VT_SUNSENSOR, None)}
  }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard magnetometer, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn mag(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OnboardNavigation_Ingest::VT_MAG, None)}
  }
  /// Arrays of spacecraft position (X, Y, Z), in km, in the specified referenceFrame, based on the onboard star tracker, at each epoch.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn starTracker(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OnboardNavigation_Ingest::VT_STARTRACKER, None)}
  }
  /// Arrays of spacecraft delta position (X, Y, Z), in km, in the specified referenceFrame, between the onboard state and the last accepted sensor position.
  /// Example: /// Example: [[1.1, 2.2, 3.3]]
  /// Constraints: No constraints specified.
  #[inline]
  pub fn deltaPos(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(OnboardNavigation_Ingest::VT_DELTAPOS, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(OnboardNavigation_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn dataMode(&self) -> OnboardNavigation_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<OnboardNavigation_Ingest_dataMode_Enum>(OnboardNavigation_Ingest::VT_DATAMODE, Some(OnboardNavigation_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for OnboardNavigation_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idOnOrbit", Self::VT_IDONORBIT, false)?
     .visit_field::<i32>("satNo", Self::VT_SATNO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origObjectId", Self::VT_ORIGOBJECTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("startTime", Self::VT_STARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("endTime", Self::VT_ENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("esId", Self::VT_ESID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("starCatName", Self::VT_STARCATNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("starCatLoadTime", Self::VT_STARCATLOADTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idStateVector", Self::VT_IDSTATEVECTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("ts", Self::VT_TS, false)?
     .visit_field::<OnboardNavigation_Ingest_referenceFrame_Enum>("referenceFrame", Self::VT_REFERENCEFRAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sunSensor", Self::VT_SUNSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("mag", Self::VT_MAG, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("starTracker", Self::VT_STARTRACKER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("deltaPos", Self::VT_DELTAPOS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<OnboardNavigation_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct OnboardNavigation_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idOnOrbit: Option<flatbuffers::WIPOffset<&'a str>>,
    pub satNo: i32,
    pub origObjectId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub startTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub endTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub esId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub starCatName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub starCatLoadTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idStateVector: Option<flatbuffers::WIPOffset<&'a str>>,
    pub ts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub referenceFrame: OnboardNavigation_Ingest_referenceFrame_Enum,
    pub sunSensor: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub mag: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub starTracker: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub deltaPos: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: OnboardNavigation_Ingest_dataMode_Enum,
}
impl<'a> Default for OnboardNavigation_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    OnboardNavigation_IngestArgs {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      startTime: None,
      endTime: None,
      esId: None,
      starCatName: None,
      starCatLoadTime: None,
      idStateVector: None,
      ts: None,
      referenceFrame: OnboardNavigation_Ingest_referenceFrame_Enum::J2000,
      sunSensor: None,
      mag: None,
      starTracker: None,
      deltaPos: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: OnboardNavigation_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct OnboardNavigation_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> OnboardNavigation_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idOnOrbit(&mut self, idOnOrbit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_IDONORBIT, idOnOrbit);
  }
  #[inline]
  pub fn add_satNo(&mut self, satNo: i32) {
    self.fbb_.push_slot::<i32>(OnboardNavigation_Ingest::VT_SATNO, satNo, 0);
  }
  #[inline]
  pub fn add_origObjectId(&mut self, origObjectId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_ORIGOBJECTID, origObjectId);
  }
  #[inline]
  pub fn add_startTime(&mut self, startTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_STARTTIME, startTime);
  }
  #[inline]
  pub fn add_endTime(&mut self, endTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_ENDTIME, endTime);
  }
  #[inline]
  pub fn add_esId(&mut self, esId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_ESID, esId);
  }
  #[inline]
  pub fn add_starCatName(&mut self, starCatName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_STARCATNAME, starCatName);
  }
  #[inline]
  pub fn add_starCatLoadTime(&mut self, starCatLoadTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_STARCATLOADTIME, starCatLoadTime);
  }
  #[inline]
  pub fn add_idStateVector(&mut self, idStateVector: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_IDSTATEVECTOR, idStateVector);
  }
  #[inline]
  pub fn add_ts(&mut self, ts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_TS, ts);
  }
  #[inline]
  pub fn add_referenceFrame(&mut self, referenceFrame: OnboardNavigation_Ingest_referenceFrame_Enum) {
    self.fbb_.push_slot::<OnboardNavigation_Ingest_referenceFrame_Enum>(OnboardNavigation_Ingest::VT_REFERENCEFRAME, referenceFrame, OnboardNavigation_Ingest_referenceFrame_Enum::J2000);
  }
  #[inline]
  pub fn add_sunSensor(&mut self, sunSensor: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_SUNSENSOR, sunSensor);
  }
  #[inline]
  pub fn add_mag(&mut self, mag: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_MAG, mag);
  }
  #[inline]
  pub fn add_starTracker(&mut self, starTracker: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_STARTRACKER, starTracker);
  }
  #[inline]
  pub fn add_deltaPos(&mut self, deltaPos: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_DELTAPOS, deltaPos);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(OnboardNavigation_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: OnboardNavigation_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<OnboardNavigation_Ingest_dataMode_Enum>(OnboardNavigation_Ingest::VT_DATAMODE, dataMode, OnboardNavigation_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> OnboardNavigation_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    OnboardNavigation_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<OnboardNavigation_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for OnboardNavigation_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("OnboardNavigation_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idOnOrbit", &self.idOnOrbit());
      ds.field("satNo", &self.satNo());
      ds.field("origObjectId", &self.origObjectId());
      ds.field("startTime", &self.startTime());
      ds.field("endTime", &self.endTime());
      ds.field("esId", &self.esId());
      ds.field("starCatName", &self.starCatName());
      ds.field("starCatLoadTime", &self.starCatLoadTime());
      ds.field("idStateVector", &self.idStateVector());
      ds.field("ts", &self.ts());
      ds.field("referenceFrame", &self.referenceFrame());
      ds.field("sunSensor", &self.sunSensor());
      ds.field("mag", &self.mag());
      ds.field("starTracker", &self.starTracker());
      ds.field("deltaPos", &self.deltaPos());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct OnboardNavigation_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idOnOrbit: Option<String>,
  pub satNo: i32,
  pub origObjectId: Option<String>,
  pub startTime: Option<String>,
  pub endTime: Option<String>,
  pub esId: Option<String>,
  pub starCatName: Option<String>,
  pub starCatLoadTime: Option<String>,
  pub idStateVector: Option<String>,
  pub ts: Option<Vec<String>>,
  pub referenceFrame: OnboardNavigation_Ingest_referenceFrame_Enum,
  pub sunSensor: Option<Vec<String>>,
  pub mag: Option<Vec<String>>,
  pub starTracker: Option<Vec<String>>,
  pub deltaPos: Option<Vec<String>>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: OnboardNavigation_Ingest_dataMode_Enum,
}
impl Default for OnboardNavigation_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idOnOrbit: None,
      satNo: 0,
      origObjectId: None,
      startTime: None,
      endTime: None,
      esId: None,
      starCatName: None,
      starCatLoadTime: None,
      idStateVector: None,
      ts: None,
      referenceFrame: OnboardNavigation_Ingest_referenceFrame_Enum::J2000,
      sunSensor: None,
      mag: None,
      starTracker: None,
      deltaPos: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: OnboardNavigation_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl OnboardNavigation_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<OnboardNavigation_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idOnOrbit = self.idOnOrbit.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let satNo = self.satNo;
    let origObjectId = self.origObjectId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let startTime = self.startTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let endTime = self.endTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let esId = self.esId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let starCatName = self.starCatName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let starCatLoadTime = self.starCatLoadTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idStateVector = self.idStateVector.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let ts = self.ts.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let referenceFrame = self.referenceFrame;
    let sunSensor = self.sunSensor.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let mag = self.mag.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let starTracker = self.starTracker.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let deltaPos = self.deltaPos.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    OnboardNavigation_Ingest::create(_fbb, &OnboardNavigation_IngestArgs{
      id,
      classificationMarking,
      idOnOrbit,
      satNo,
      origObjectId,
      startTime,
      endTime,
      esId,
      starCatName,
      starCatLoadTime,
      idStateVector,
      ts,
      referenceFrame,
      sunSensor,
      mag,
      starTracker,
      deltaPos,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `OnboardNavigation_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onboard_navigation_ingest_unchecked`.
pub fn root_as_onboard_navigation_ingest(buf: &[u8]) -> Result<OnboardNavigation_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<OnboardNavigation_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `OnboardNavigation_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_onboard_navigation_ingest_unchecked`.
pub fn size_prefixed_root_as_onboard_navigation_ingest(buf: &[u8]) -> Result<OnboardNavigation_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<OnboardNavigation_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `OnboardNavigation_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onboard_navigation_ingest_unchecked`.
pub fn root_as_onboard_navigation_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnboardNavigation_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<OnboardNavigation_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `OnboardNavigation_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_onboard_navigation_ingest_unchecked`.
pub fn size_prefixed_root_as_onboard_navigation_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<OnboardNavigation_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<OnboardNavigation_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a OnboardNavigation_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `OnboardNavigation_Ingest`.
pub unsafe fn root_as_onboard_navigation_ingest_unchecked(buf: &[u8]) -> OnboardNavigation_Ingest {
  flatbuffers::root_unchecked::<OnboardNavigation_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed OnboardNavigation_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `OnboardNavigation_Ingest`.
pub unsafe fn size_prefixed_root_as_onboard_navigation_ingest_unchecked(buf: &[u8]) -> OnboardNavigation_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<OnboardNavigation_Ingest>(buf)
}
pub const ONBOARD_NAVIGATION_INGEST_IDENTIFIER: &str = "ONBO";

#[inline]
pub fn onboard_navigation_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONBOARD_NAVIGATION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn onboard_navigation_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ONBOARD_NAVIGATION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_onboard_navigation_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<OnboardNavigation_Ingest<'a>>) {
  fbb.finish(root, Some(ONBOARD_NAVIGATION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_onboard_navigation_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<OnboardNavigation_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(ONBOARD_NAVIGATION_INGEST_IDENTIFIER));
}
