// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum EvacVitalSignData_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information obtained for vital signs.
pub struct EvacVitalSignData_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EvacVitalSignData_Full<'a> {
  type Inner = EvacVitalSignData_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EvacVitalSignData_Full<'a> {
  pub const VT_VITALSIGN: flatbuffers::VOffsetT = 4;
  pub const VT_VITALSIGN1: flatbuffers::VOffsetT = 6;
  pub const VT_VITALSIGN2: flatbuffers::VOffsetT = 8;
  pub const VT_MEDCONFFACTOR: flatbuffers::VOffsetT = 10;
  pub const VT_TIME: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EvacVitalSignData_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EvacVitalSignData_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<EvacVitalSignData_Full<'bldr>> {
    let mut builder = EvacVitalSignData_FullBuilder::new(_fbb);
    builder.add_vitalSign2(args.vitalSign2);
    builder.add_vitalSign1(args.vitalSign1);
    if let Some(x) = args.time { builder.add_time(x); }
    builder.add_medConfFactor(args.medConfFactor);
    if let Some(x) = args.vitalSign { builder.add_vitalSign(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> EvacVitalSignData_FullT {
    let vitalSign = self.vitalSign().map(|x| {
      x.to_string()
    });
    let vitalSign1 = self.vitalSign1();
    let vitalSign2 = self.vitalSign2();
    let medConfFactor = self.medConfFactor();
    let time = self.time().map(|x| {
      x.to_string()
    });
    EvacVitalSignData_FullT {
      vitalSign,
      vitalSign1,
      vitalSign2,
      medConfFactor,
      time,
    }
  }

  /// Patient vital sign measured (e.g. HEART RATE, PULSE RATE, RESPIRATION RATE, TEMPERATURE CORE, etc.).
  /// Example: /// Example: HEART RATE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn vitalSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacVitalSignData_Full::VT_VITALSIGN, None)}
  }
  /// Vital sign value 1.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  /// Example: /// Example: 120
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vitalSign1(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EvacVitalSignData_Full::VT_VITALSIGN1, Some(0.0)).unwrap()}
  }
  /// Vital sign value 2.  The content of this field is dependent on the type of vital sign being measured (see the vitalSign field).
  /// Example: /// Example: 80
  /// Constraints: No constraints specified.
  #[inline]
  pub fn vitalSign2(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(EvacVitalSignData_Full::VT_VITALSIGN2, Some(0.0)).unwrap()}
  }
  /// Medical confidence factor.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn medConfFactor(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(EvacVitalSignData_Full::VT_MEDCONFFACTOR, Some(0)).unwrap()}
  }
  /// Datetime of the vital sign measurement in ISO 8601 UTC datetime format.
  /// Example: /// Example: 2021-10-15T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn time(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EvacVitalSignData_Full::VT_TIME, None)}
  }
}

impl flatbuffers::Verifiable for EvacVitalSignData_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("vitalSign", Self::VT_VITALSIGN, false)?
     .visit_field::<f64>("vitalSign1", Self::VT_VITALSIGN1, false)?
     .visit_field::<f64>("vitalSign2", Self::VT_VITALSIGN2, false)?
     .visit_field::<i32>("medConfFactor", Self::VT_MEDCONFFACTOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("time", Self::VT_TIME, false)?
     .finish();
    Ok(())
  }
}
pub struct EvacVitalSignData_FullArgs<'a> {
    pub vitalSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub vitalSign1: f64,
    pub vitalSign2: f64,
    pub medConfFactor: i32,
    pub time: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for EvacVitalSignData_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    EvacVitalSignData_FullArgs {
      vitalSign: None,
      vitalSign1: 0.0,
      vitalSign2: 0.0,
      medConfFactor: 0,
      time: None,
    }
  }
}

pub struct EvacVitalSignData_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EvacVitalSignData_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_vitalSign(&mut self, vitalSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacVitalSignData_Full::VT_VITALSIGN, vitalSign);
  }
  #[inline]
  pub fn add_vitalSign1(&mut self, vitalSign1: f64) {
    self.fbb_.push_slot::<f64>(EvacVitalSignData_Full::VT_VITALSIGN1, vitalSign1, 0.0);
  }
  #[inline]
  pub fn add_vitalSign2(&mut self, vitalSign2: f64) {
    self.fbb_.push_slot::<f64>(EvacVitalSignData_Full::VT_VITALSIGN2, vitalSign2, 0.0);
  }
  #[inline]
  pub fn add_medConfFactor(&mut self, medConfFactor: i32) {
    self.fbb_.push_slot::<i32>(EvacVitalSignData_Full::VT_MEDCONFFACTOR, medConfFactor, 0);
  }
  #[inline]
  pub fn add_time(&mut self, time: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EvacVitalSignData_Full::VT_TIME, time);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EvacVitalSignData_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EvacVitalSignData_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EvacVitalSignData_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EvacVitalSignData_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EvacVitalSignData_Full");
      ds.field("vitalSign", &self.vitalSign());
      ds.field("vitalSign1", &self.vitalSign1());
      ds.field("vitalSign2", &self.vitalSign2());
      ds.field("medConfFactor", &self.medConfFactor());
      ds.field("time", &self.time());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct EvacVitalSignData_FullT {
  pub vitalSign: Option<String>,
  pub vitalSign1: f64,
  pub vitalSign2: f64,
  pub medConfFactor: i32,
  pub time: Option<String>,
}
impl Default for EvacVitalSignData_FullT {
  fn default() -> Self {
    Self {
      vitalSign: None,
      vitalSign1: 0.0,
      vitalSign2: 0.0,
      medConfFactor: 0,
      time: None,
    }
  }
}
impl EvacVitalSignData_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<EvacVitalSignData_Full<'b>> {
    let vitalSign = self.vitalSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let vitalSign1 = self.vitalSign1;
    let vitalSign2 = self.vitalSign2;
    let medConfFactor = self.medConfFactor;
    let time = self.time.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    EvacVitalSignData_Full::create(_fbb, &EvacVitalSignData_FullArgs{
      vitalSign,
      vitalSign1,
      vitalSign2,
      medConfFactor,
      time,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EvacVitalSignData_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_vital_sign_data_full_unchecked`.
pub fn root_as_evac_vital_sign_data_full(buf: &[u8]) -> Result<EvacVitalSignData_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EvacVitalSignData_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EvacVitalSignData_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_evac_vital_sign_data_full_unchecked`.
pub fn size_prefixed_root_as_evac_vital_sign_data_full(buf: &[u8]) -> Result<EvacVitalSignData_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EvacVitalSignData_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EvacVitalSignData_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_vital_sign_data_full_unchecked`.
pub fn root_as_evac_vital_sign_data_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EvacVitalSignData_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EvacVitalSignData_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EvacVitalSignData_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_evac_vital_sign_data_full_unchecked`.
pub fn size_prefixed_root_as_evac_vital_sign_data_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EvacVitalSignData_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EvacVitalSignData_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EvacVitalSignData_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EvacVitalSignData_Full`.
pub unsafe fn root_as_evac_vital_sign_data_full_unchecked(buf: &[u8]) -> EvacVitalSignData_Full {
  flatbuffers::root_unchecked::<EvacVitalSignData_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EvacVitalSignData_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EvacVitalSignData_Full`.
pub unsafe fn size_prefixed_root_as_evac_vital_sign_data_full_unchecked(buf: &[u8]) -> EvacVitalSignData_Full {
  flatbuffers::size_prefixed_root_unchecked::<EvacVitalSignData_Full>(buf)
}
pub const EVAC_VITAL_SIGN_DATA_FULL_IDENTIFIER: &str = "EVAC";

#[inline]
pub fn evac_vital_sign_data_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EVAC_VITAL_SIGN_DATA_FULL_IDENTIFIER, false)
}

#[inline]
pub fn evac_vital_sign_data_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, EVAC_VITAL_SIGN_DATA_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_evac_vital_sign_data_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EvacVitalSignData_Full<'a>>) {
  fbb.finish(root, Some(EVAC_VITAL_SIGN_DATA_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_evac_vital_sign_data_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EvacVitalSignData_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(EVAC_VITAL_SIGN_DATA_FULL_IDENTIFIER));
}
