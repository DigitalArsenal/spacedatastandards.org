// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SENSOR_ABRIDGED_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SENSOR_ABRIDGED_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SENSOR_ABRIDGED_DATA_MODE_ENUM: [Sensor_Abridged_dataMode_Enum; 4] = [
  Sensor_Abridged_dataMode_Enum::REAL,
  Sensor_Abridged_dataMode_Enum::TEST,
  Sensor_Abridged_dataMode_Enum::SIMULATED,
  Sensor_Abridged_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Sensor_Abridged_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Sensor_Abridged_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Sensor_Abridged_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Sensor_Abridged_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Sensor_Abridged_dataMode_Enum {
    type Output = Sensor_Abridged_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Sensor_Abridged_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Sensor_Abridged_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Sensor_Abridged_dataMode_Enum {}
pub enum Sensor_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Model representation of observation data for electro-optical based sensor phenomenologies.
pub struct Sensor_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Sensor_Abridged<'a> {
  type Inner = Sensor_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Sensor_Abridged<'a> {
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 4;
  pub const VT_SENSORNAME: flatbuffers::VOffsetT = 6;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 8;
  pub const VT_SENSORNUMBER: flatbuffers::VOffsetT = 10;
  pub const VT_SHORTNAME: flatbuffers::VOffsetT = 12;
  pub const VT_DATACONTROL: flatbuffers::VOffsetT = 14;
  pub const VT_AFID: flatbuffers::VOffsetT = 16;
  pub const VT_ASRTYPE: flatbuffers::VOffsetT = 18;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 20;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 22;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 24;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 26;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 28;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 30;
  pub const VT_ACTIVE: flatbuffers::VOffsetT = 32;
  pub const VT_SENSORCHARACTERISTICS: flatbuffers::VOffsetT = 34;
  pub const VT_SENSORSTATS: flatbuffers::VOffsetT = 36;
  pub const VT_SENSORLIMITSCOLLECTION: flatbuffers::VOffsetT = 38;
  pub const VT_ENTITY: flatbuffers::VOffsetT = 40;
  pub const VT_IDENTITY: flatbuffers::VOffsetT = 42;
  pub const VT_SENSOROBSERVATIONTYPE: flatbuffers::VOffsetT = 44;
  pub const VT_SENSORTYPE: flatbuffers::VOffsetT = 46;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Sensor_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Sensor_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<Sensor_Abridged<'bldr>> {
    let mut builder = Sensor_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.sensorType { builder.add_sensorType(x); }
    if let Some(x) = args.sensorObservationType { builder.add_sensorObservationType(x); }
    if let Some(x) = args.idEntity { builder.add_idEntity(x); }
    if let Some(x) = args.entity { builder.add_entity(x); }
    if let Some(x) = args.sensorlimitsCollection { builder.add_sensorlimitsCollection(x); }
    if let Some(x) = args.sensorStats { builder.add_sensorStats(x); }
    if let Some(x) = args.sensorcharacteristics { builder.add_sensorcharacteristics(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.asrType { builder.add_asrType(x); }
    if let Some(x) = args.afId { builder.add_afId(x); }
    if let Some(x) = args.dataControl { builder.add_dataControl(x); }
    if let Some(x) = args.shortName { builder.add_shortName(x); }
    builder.add_sensorNumber(args.sensorNumber);
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.sensorName { builder.add_sensorName(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    builder.add_active(args.active);
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> Sensor_AbridgedT {
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let sensorName = self.sensorName().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let sensorNumber = self.sensorNumber();
    let shortName = self.shortName().map(|x| {
      x.to_string()
    });
    let dataControl = self.dataControl().map(|x| {
      x.to_string()
    });
    let afId = self.afId().map(|x| {
      x.to_string()
    });
    let asrType = self.asrType().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let active = self.active();
    let sensorcharacteristics = self.sensorcharacteristics().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sensorStats = self.sensorStats().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let sensorlimitsCollection = self.sensorlimitsCollection().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let entity = self.entity().map(|x| {
      x.to_string()
    });
    let idEntity = self.idEntity().map(|x| {
      x.to_string()
    });
    let sensorObservationType = self.sensorObservationType().map(|x| {
      x.to_string()
    });
    let sensorType = self.sensorType().map(|x| {
      x.to_string()
    });
    Sensor_AbridgedT {
      idSensor,
      sensorName,
      classificationMarking,
      sensorNumber,
      shortName,
      dataControl,
      afId,
      asrType,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      active,
      sensorcharacteristics,
      sensorStats,
      sensorlimitsCollection,
      entity,
      idEntity,
      sensorObservationType,
      sensorType,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSOR-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_IDSENSOR, None)}
  }
  /// Unique name of this sensor.
  /// Example: /// Example: SENSOR_NAME
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn sensorName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_SENSORNAME, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Number assigned to this sensor. Since there is no authoritative numbering scheme, these numbers sometimes collide across sensors (especially commercial sensors). It is therefore not a unique identifier.
  /// Example: /// Example: 1234
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorNumber(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Sensor_Abridged::VT_SENSORNUMBER, Some(0)).unwrap()}
  }
  /// Optional short name for the sensor.
  /// Example: /// Example: SNR-1
  /// Constraints: Minimum length = 0, Maximum length = 5
  #[inline]
  pub fn shortName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_SHORTNAME, None)}
  }
  /// Optional dissemination control required for accessing data (e.g observations) produced by this sensor. This is typically a proprietary data owner control for commercial sensors.
  /// Example: /// Example: observations
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn dataControl(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_DATACONTROL, None)}
  }
  /// Optional US Air Force identifier for the sensor/ASR site, typically for air surveillance radar (ASR) sensors.
  /// Example: /// Example: AF-ID
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn afId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_AFID, None)}
  }
  /// The sensor type at the site. Optional field, intended primarily for ASRs.
  /// Example: /// Example: SENSOR_TYPE
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn asrType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_ASRTYPE, None)}
  }
  /// Source of the data.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Sensor_Abridged_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Sensor_Abridged_dataMode_Enum>(Sensor_Abridged::VT_DATAMODE, Some(Sensor_Abridged_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_CREATEDBY, None)}
  }
  /// Optional flag indicating if the sensor is active.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn active(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(Sensor_Abridged::VT_ACTIVE, Some(false)).unwrap()}
  }
  /// Collection of Sensorcharacteristics which define characteristics and capabilities of a sensor.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorcharacteristics(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Sensor_Abridged::VT_SENSORCHARACTERISTICS, None)}
  }
  /// Collection of SensorStats which contain statistics of a sensor.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorStats(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Sensor_Abridged::VT_SENSORSTATS, None)}
  }
  /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorlimitsCollection(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Sensor_Abridged::VT_SENSORLIMITSCOLLECTION, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn entity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_ENTITY, None)}
  }
  /// Unique identifier of the parent entity. idEntity is required for Put.
  /// Example: /// Example: ENTITY-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idEntity(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_IDENTITY, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorObservationType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_SENSOROBSERVATIONTYPE, None)}
  }
  /// No description provided.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sensorType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensor_Abridged::VT_SENSORTYPE, None)}
  }
}

impl flatbuffers::Verifiable for Sensor_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sensorName", Self::VT_SENSORNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<i32>("sensorNumber", Self::VT_SENSORNUMBER, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("shortName", Self::VT_SHORTNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("dataControl", Self::VT_DATACONTROL, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("afId", Self::VT_AFID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("asrType", Self::VT_ASRTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<Sensor_Abridged_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<bool>("active", Self::VT_ACTIVE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sensorcharacteristics", Self::VT_SENSORCHARACTERISTICS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sensorStats", Self::VT_SENSORSTATS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("sensorlimitsCollection", Self::VT_SENSORLIMITSCOLLECTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("entity", Self::VT_ENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idEntity", Self::VT_IDENTITY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sensorObservationType", Self::VT_SENSOROBSERVATIONTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("sensorType", Self::VT_SENSORTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct Sensor_AbridgedArgs<'a> {
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sensorName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sensorNumber: i32,
    pub shortName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataControl: Option<flatbuffers::WIPOffset<&'a str>>,
    pub afId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub asrType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Sensor_Abridged_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub active: bool,
    pub sensorcharacteristics: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sensorStats: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub sensorlimitsCollection: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub entity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idEntity: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sensorObservationType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sensorType: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Sensor_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    Sensor_AbridgedArgs {
      idSensor: None,
      sensorName: None,
      classificationMarking: None,
      sensorNumber: 0,
      shortName: None,
      dataControl: None,
      afId: None,
      asrType: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Sensor_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      active: false,
      sensorcharacteristics: None,
      sensorStats: None,
      sensorlimitsCollection: None,
      entity: None,
      idEntity: None,
      sensorObservationType: None,
      sensorType: None,
    }
  }
}

pub struct Sensor_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Sensor_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_sensorName(&mut self, sensorName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SENSORNAME, sensorName);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_sensorNumber(&mut self, sensorNumber: i32) {
    self.fbb_.push_slot::<i32>(Sensor_Abridged::VT_SENSORNUMBER, sensorNumber, 0);
  }
  #[inline]
  pub fn add_shortName(&mut self, shortName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SHORTNAME, shortName);
  }
  #[inline]
  pub fn add_dataControl(&mut self, dataControl: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_DATACONTROL, dataControl);
  }
  #[inline]
  pub fn add_afId(&mut self, afId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_AFID, afId);
  }
  #[inline]
  pub fn add_asrType(&mut self, asrType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_ASRTYPE, asrType);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Sensor_Abridged_dataMode_Enum) {
    self.fbb_.push_slot::<Sensor_Abridged_dataMode_Enum>(Sensor_Abridged::VT_DATAMODE, dataMode, Sensor_Abridged_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_active(&mut self, active: bool) {
    self.fbb_.push_slot::<bool>(Sensor_Abridged::VT_ACTIVE, active, false);
  }
  #[inline]
  pub fn add_sensorcharacteristics(&mut self, sensorcharacteristics: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SENSORCHARACTERISTICS, sensorcharacteristics);
  }
  #[inline]
  pub fn add_sensorStats(&mut self, sensorStats: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SENSORSTATS, sensorStats);
  }
  #[inline]
  pub fn add_sensorlimitsCollection(&mut self, sensorlimitsCollection: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SENSORLIMITSCOLLECTION, sensorlimitsCollection);
  }
  #[inline]
  pub fn add_entity(&mut self, entity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_ENTITY, entity);
  }
  #[inline]
  pub fn add_idEntity(&mut self, idEntity: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_IDENTITY, idEntity);
  }
  #[inline]
  pub fn add_sensorObservationType(&mut self, sensorObservationType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SENSOROBSERVATIONTYPE, sensorObservationType);
  }
  #[inline]
  pub fn add_sensorType(&mut self, sensorType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensor_Abridged::VT_SENSORTYPE, sensorType);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Sensor_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Sensor_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Sensor_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Sensor_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Sensor_Abridged");
      ds.field("idSensor", &self.idSensor());
      ds.field("sensorName", &self.sensorName());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("sensorNumber", &self.sensorNumber());
      ds.field("shortName", &self.shortName());
      ds.field("dataControl", &self.dataControl());
      ds.field("afId", &self.afId());
      ds.field("asrType", &self.asrType());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("active", &self.active());
      ds.field("sensorcharacteristics", &self.sensorcharacteristics());
      ds.field("sensorStats", &self.sensorStats());
      ds.field("sensorlimitsCollection", &self.sensorlimitsCollection());
      ds.field("entity", &self.entity());
      ds.field("idEntity", &self.idEntity());
      ds.field("sensorObservationType", &self.sensorObservationType());
      ds.field("sensorType", &self.sensorType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Sensor_AbridgedT {
  pub idSensor: Option<String>,
  pub sensorName: Option<String>,
  pub classificationMarking: Option<String>,
  pub sensorNumber: i32,
  pub shortName: Option<String>,
  pub dataControl: Option<String>,
  pub afId: Option<String>,
  pub asrType: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: Sensor_Abridged_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub active: bool,
  pub sensorcharacteristics: Option<Vec<String>>,
  pub sensorStats: Option<Vec<String>>,
  pub sensorlimitsCollection: Option<Vec<String>>,
  pub entity: Option<String>,
  pub idEntity: Option<String>,
  pub sensorObservationType: Option<String>,
  pub sensorType: Option<String>,
}
impl Default for Sensor_AbridgedT {
  fn default() -> Self {
    Self {
      idSensor: None,
      sensorName: None,
      classificationMarking: None,
      sensorNumber: 0,
      shortName: None,
      dataControl: None,
      afId: None,
      asrType: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: Sensor_Abridged_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      active: false,
      sensorcharacteristics: None,
      sensorStats: None,
      sensorlimitsCollection: None,
      entity: None,
      idEntity: None,
      sensorObservationType: None,
      sensorType: None,
    }
  }
}
impl Sensor_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Sensor_Abridged<'b>> {
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sensorName = self.sensorName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sensorNumber = self.sensorNumber;
    let shortName = self.shortName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataControl = self.dataControl.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let afId = self.afId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let asrType = self.asrType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let active = self.active;
    let sensorcharacteristics = self.sensorcharacteristics.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sensorStats = self.sensorStats.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let sensorlimitsCollection = self.sensorlimitsCollection.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let entity = self.entity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idEntity = self.idEntity.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sensorObservationType = self.sensorObservationType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sensorType = self.sensorType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Sensor_Abridged::create(_fbb, &Sensor_AbridgedArgs{
      idSensor,
      sensorName,
      classificationMarking,
      sensorNumber,
      shortName,
      dataControl,
      afId,
      asrType,
      source,
      origin,
      origNetwork,
      dataMode,
      createdAt,
      createdBy,
      active,
      sensorcharacteristics,
      sensorStats,
      sensorlimitsCollection,
      entity,
      idEntity,
      sensorObservationType,
      sensorType,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Sensor_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensor_abridged_unchecked`.
pub fn root_as_sensor_abridged(buf: &[u8]) -> Result<Sensor_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Sensor_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Sensor_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_sensor_abridged_unchecked`.
pub fn size_prefixed_root_as_sensor_abridged(buf: &[u8]) -> Result<Sensor_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Sensor_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Sensor_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensor_abridged_unchecked`.
pub fn root_as_sensor_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Sensor_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Sensor_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Sensor_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensor_abridged_unchecked`.
pub fn size_prefixed_root_as_sensor_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Sensor_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Sensor_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Sensor_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Sensor_Abridged`.
pub unsafe fn root_as_sensor_abridged_unchecked(buf: &[u8]) -> Sensor_Abridged {
  flatbuffers::root_unchecked::<Sensor_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Sensor_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Sensor_Abridged`.
pub unsafe fn size_prefixed_root_as_sensor_abridged_unchecked(buf: &[u8]) -> Sensor_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<Sensor_Abridged>(buf)
}
pub const SENSOR_ABRIDGED_IDENTIFIER: &str = "SENS";

#[inline]
pub fn sensor_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SENSOR_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn sensor_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SENSOR_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_sensor_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Sensor_Abridged<'a>>) {
  fbb.finish(root, Some(SENSOR_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_sensor_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Sensor_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(SENSOR_ABRIDGED_IDENTIFIER));
}
