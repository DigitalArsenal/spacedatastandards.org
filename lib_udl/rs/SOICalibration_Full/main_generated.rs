// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum SOICalibration_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Schema for SOI Calibration data.
pub struct SOICalibration_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SOICalibration_Full<'a> {
  type Inner = SOICalibration_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SOICalibration_Full<'a> {
  pub const VT_CALEXTINCTIONCOEFF: flatbuffers::VOffsetT = 4;
  pub const VT_CALSKYBG: flatbuffers::VOffsetT = 6;
  pub const VT_CALBGINTENSITY: flatbuffers::VOffsetT = 8;
  pub const VT_CALSPECTRALFILTERSOLARMAG: flatbuffers::VOffsetT = 10;
  pub const VT_CALZEROPOINT: flatbuffers::VOffsetT = 12;
  pub const VT_CALNUMDETECTEDSTARS: flatbuffers::VOffsetT = 14;
  pub const VT_CALNUMCORRELATEDSTARS: flatbuffers::VOffsetT = 16;
  pub const VT_CALEXTINCTIONCOEFFUNC: flatbuffers::VOffsetT = 18;
  pub const VT_CALEXTINCTIONCOEFFMAXUNC: flatbuffers::VOffsetT = 20;
  pub const VT_CALTIME: flatbuffers::VOffsetT = 22;
  pub const VT_CALTYPE: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SOICalibration_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SOICalibration_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<SOICalibration_Full<'bldr>> {
    let mut builder = SOICalibration_FullBuilder::new(_fbb);
    builder.add_calExtinctionCoeffMaxUnc(args.calExtinctionCoeffMaxUnc);
    builder.add_calExtinctionCoeffUnc(args.calExtinctionCoeffUnc);
    builder.add_calZeroPoint(args.calZeroPoint);
    builder.add_calSpectralFilterSolarMag(args.calSpectralFilterSolarMag);
    builder.add_calBgIntensity(args.calBgIntensity);
    builder.add_calSkyBg(args.calSkyBg);
    builder.add_calExtinctionCoeff(args.calExtinctionCoeff);
    if let Some(x) = args.calType { builder.add_calType(x); }
    if let Some(x) = args.calTime { builder.add_calTime(x); }
    builder.add_calNumCorrelatedStars(args.calNumCorrelatedStars);
    builder.add_calNumDetectedStars(args.calNumDetectedStars);
    builder.finish()
  }

  pub fn unpack(&self) -> SOICalibration_FullT {
    let calExtinctionCoeff = self.calExtinctionCoeff();
    let calSkyBg = self.calSkyBg();
    let calBgIntensity = self.calBgIntensity();
    let calSpectralFilterSolarMag = self.calSpectralFilterSolarMag();
    let calZeroPoint = self.calZeroPoint();
    let calNumDetectedStars = self.calNumDetectedStars();
    let calNumCorrelatedStars = self.calNumCorrelatedStars();
    let calExtinctionCoeffUnc = self.calExtinctionCoeffUnc();
    let calExtinctionCoeffMaxUnc = self.calExtinctionCoeffMaxUnc();
    let calTime = self.calTime().map(|x| {
      x.to_string()
    });
    let calType = self.calType().map(|x| {
      x.to_string()
    });
    SOICalibration_FullT {
      calExtinctionCoeff,
      calSkyBg,
      calBgIntensity,
      calSpectralFilterSolarMag,
      calZeroPoint,
      calNumDetectedStars,
      calNumCorrelatedStars,
      calExtinctionCoeffUnc,
      calExtinctionCoeffMaxUnc,
      calTime,
      calType,
    }
  }

  /// Coefficient value for how much signal would be lost to atmospheric attenuation for a star at zenith, in magnitudes per air mass.
  /// Example: /// Example: 0.2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calExtinctionCoeff(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SOICalibration_Full::VT_CALEXTINCTIONCOEFF, Some(0.0)).unwrap()}
  }
  /// Average Sky Background signals in magnitudes, at calibration. Sky Background refers to the incoming light from an apparently empty part of the night sky.
  /// Example: /// Example: 30086.25
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calSkyBg(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SOICalibration_Full::VT_CALSKYBG, Some(0.0)).unwrap()}
  }
  /// Background intensity, at calibration, specified in kilowatts per steradian per micrometer.
  /// Example: /// Example: 1.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calBgIntensity(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SOICalibration_Full::VT_CALBGINTENSITY, Some(0.0)).unwrap()}
  }
  /// In-band solar magnitudes at 1 A.U, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 19.23664587
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calSpectralFilterSolarMag(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SOICalibration_Full::VT_CALSPECTRALFILTERSOLARMAG, Some(0.0)).unwrap()}
  }
  /// Value representing the difference between the catalog magnitude and instrumental magnitude for a set of standard stars, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 25.15682157
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calZeroPoint(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SOICalibration_Full::VT_CALZEROPOINT, Some(0.0)).unwrap()}
  }
  /// Number of detected stars in the FOV with the target object, at calibration. Helps identify frames with clouds.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calNumDetectedStars(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SOICalibration_Full::VT_CALNUMDETECTEDSTARS, Some(0)).unwrap()}
  }
  /// Number of correlated stars in the FOV with the target object, at calibration. Can be 0 for narrow FOV sensors.
  /// Example: /// Example: 1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calNumCorrelatedStars(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(SOICalibration_Full::VT_CALNUMCORRELATEDSTARS, Some(0)).unwrap()}
  }
  /// Extinction coefficient uncertainty in magnitudes, at calibration, which represents the difference between the measured brightness and predicted brightness of the star with the extinction removed, making it exo-atmospheric (e.g. -5.0 to 30.0).
  /// Example: /// Example: 0.06474939
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calExtinctionCoeffUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SOICalibration_Full::VT_CALEXTINCTIONCOEFFUNC, Some(0.0)).unwrap()}
  }
  /// Maximum extinction coefficient uncertainty in magnitudes, at calibration (e.g. -5.0 to 30.0).
  /// Example: /// Example: 0.19708838
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calExtinctionCoeffMaxUnc(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SOICalibration_Full::VT_CALEXTINCTIONCOEFFMAXUNC, Some(0.0)).unwrap()}
  }
  /// Start time of calibration in ISO 8601 UTC time, with millisecond precision.
  /// Example: /// Example: 2023-01-02T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn calTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SOICalibration_Full::VT_CALTIME, None)}
  }
  /// Type of calibration (e.g. PRE, MID, POST).
  /// Example: /// Example: PRE
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn calType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SOICalibration_Full::VT_CALTYPE, None)}
  }
}

impl flatbuffers::Verifiable for SOICalibration_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<f64>("calExtinctionCoeff", Self::VT_CALEXTINCTIONCOEFF, false)?
     .visit_field::<f64>("calSkyBg", Self::VT_CALSKYBG, false)?
     .visit_field::<f64>("calBgIntensity", Self::VT_CALBGINTENSITY, false)?
     .visit_field::<f64>("calSpectralFilterSolarMag", Self::VT_CALSPECTRALFILTERSOLARMAG, false)?
     .visit_field::<f64>("calZeroPoint", Self::VT_CALZEROPOINT, false)?
     .visit_field::<i32>("calNumDetectedStars", Self::VT_CALNUMDETECTEDSTARS, false)?
     .visit_field::<i32>("calNumCorrelatedStars", Self::VT_CALNUMCORRELATEDSTARS, false)?
     .visit_field::<f64>("calExtinctionCoeffUnc", Self::VT_CALEXTINCTIONCOEFFUNC, false)?
     .visit_field::<f64>("calExtinctionCoeffMaxUnc", Self::VT_CALEXTINCTIONCOEFFMAXUNC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("calTime", Self::VT_CALTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("calType", Self::VT_CALTYPE, false)?
     .finish();
    Ok(())
  }
}
pub struct SOICalibration_FullArgs<'a> {
    pub calExtinctionCoeff: f64,
    pub calSkyBg: f64,
    pub calBgIntensity: f64,
    pub calSpectralFilterSolarMag: f64,
    pub calZeroPoint: f64,
    pub calNumDetectedStars: i32,
    pub calNumCorrelatedStars: i32,
    pub calExtinctionCoeffUnc: f64,
    pub calExtinctionCoeffMaxUnc: f64,
    pub calTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub calType: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for SOICalibration_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    SOICalibration_FullArgs {
      calExtinctionCoeff: 0.0,
      calSkyBg: 0.0,
      calBgIntensity: 0.0,
      calSpectralFilterSolarMag: 0.0,
      calZeroPoint: 0.0,
      calNumDetectedStars: 0,
      calNumCorrelatedStars: 0,
      calExtinctionCoeffUnc: 0.0,
      calExtinctionCoeffMaxUnc: 0.0,
      calTime: None,
      calType: None,
    }
  }
}

pub struct SOICalibration_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SOICalibration_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_calExtinctionCoeff(&mut self, calExtinctionCoeff: f64) {
    self.fbb_.push_slot::<f64>(SOICalibration_Full::VT_CALEXTINCTIONCOEFF, calExtinctionCoeff, 0.0);
  }
  #[inline]
  pub fn add_calSkyBg(&mut self, calSkyBg: f64) {
    self.fbb_.push_slot::<f64>(SOICalibration_Full::VT_CALSKYBG, calSkyBg, 0.0);
  }
  #[inline]
  pub fn add_calBgIntensity(&mut self, calBgIntensity: f64) {
    self.fbb_.push_slot::<f64>(SOICalibration_Full::VT_CALBGINTENSITY, calBgIntensity, 0.0);
  }
  #[inline]
  pub fn add_calSpectralFilterSolarMag(&mut self, calSpectralFilterSolarMag: f64) {
    self.fbb_.push_slot::<f64>(SOICalibration_Full::VT_CALSPECTRALFILTERSOLARMAG, calSpectralFilterSolarMag, 0.0);
  }
  #[inline]
  pub fn add_calZeroPoint(&mut self, calZeroPoint: f64) {
    self.fbb_.push_slot::<f64>(SOICalibration_Full::VT_CALZEROPOINT, calZeroPoint, 0.0);
  }
  #[inline]
  pub fn add_calNumDetectedStars(&mut self, calNumDetectedStars: i32) {
    self.fbb_.push_slot::<i32>(SOICalibration_Full::VT_CALNUMDETECTEDSTARS, calNumDetectedStars, 0);
  }
  #[inline]
  pub fn add_calNumCorrelatedStars(&mut self, calNumCorrelatedStars: i32) {
    self.fbb_.push_slot::<i32>(SOICalibration_Full::VT_CALNUMCORRELATEDSTARS, calNumCorrelatedStars, 0);
  }
  #[inline]
  pub fn add_calExtinctionCoeffUnc(&mut self, calExtinctionCoeffUnc: f64) {
    self.fbb_.push_slot::<f64>(SOICalibration_Full::VT_CALEXTINCTIONCOEFFUNC, calExtinctionCoeffUnc, 0.0);
  }
  #[inline]
  pub fn add_calExtinctionCoeffMaxUnc(&mut self, calExtinctionCoeffMaxUnc: f64) {
    self.fbb_.push_slot::<f64>(SOICalibration_Full::VT_CALEXTINCTIONCOEFFMAXUNC, calExtinctionCoeffMaxUnc, 0.0);
  }
  #[inline]
  pub fn add_calTime(&mut self, calTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SOICalibration_Full::VT_CALTIME, calTime);
  }
  #[inline]
  pub fn add_calType(&mut self, calType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SOICalibration_Full::VT_CALTYPE, calType);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SOICalibration_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SOICalibration_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SOICalibration_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SOICalibration_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SOICalibration_Full");
      ds.field("calExtinctionCoeff", &self.calExtinctionCoeff());
      ds.field("calSkyBg", &self.calSkyBg());
      ds.field("calBgIntensity", &self.calBgIntensity());
      ds.field("calSpectralFilterSolarMag", &self.calSpectralFilterSolarMag());
      ds.field("calZeroPoint", &self.calZeroPoint());
      ds.field("calNumDetectedStars", &self.calNumDetectedStars());
      ds.field("calNumCorrelatedStars", &self.calNumCorrelatedStars());
      ds.field("calExtinctionCoeffUnc", &self.calExtinctionCoeffUnc());
      ds.field("calExtinctionCoeffMaxUnc", &self.calExtinctionCoeffMaxUnc());
      ds.field("calTime", &self.calTime());
      ds.field("calType", &self.calType());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SOICalibration_FullT {
  pub calExtinctionCoeff: f64,
  pub calSkyBg: f64,
  pub calBgIntensity: f64,
  pub calSpectralFilterSolarMag: f64,
  pub calZeroPoint: f64,
  pub calNumDetectedStars: i32,
  pub calNumCorrelatedStars: i32,
  pub calExtinctionCoeffUnc: f64,
  pub calExtinctionCoeffMaxUnc: f64,
  pub calTime: Option<String>,
  pub calType: Option<String>,
}
impl Default for SOICalibration_FullT {
  fn default() -> Self {
    Self {
      calExtinctionCoeff: 0.0,
      calSkyBg: 0.0,
      calBgIntensity: 0.0,
      calSpectralFilterSolarMag: 0.0,
      calZeroPoint: 0.0,
      calNumDetectedStars: 0,
      calNumCorrelatedStars: 0,
      calExtinctionCoeffUnc: 0.0,
      calExtinctionCoeffMaxUnc: 0.0,
      calTime: None,
      calType: None,
    }
  }
}
impl SOICalibration_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SOICalibration_Full<'b>> {
    let calExtinctionCoeff = self.calExtinctionCoeff;
    let calSkyBg = self.calSkyBg;
    let calBgIntensity = self.calBgIntensity;
    let calSpectralFilterSolarMag = self.calSpectralFilterSolarMag;
    let calZeroPoint = self.calZeroPoint;
    let calNumDetectedStars = self.calNumDetectedStars;
    let calNumCorrelatedStars = self.calNumCorrelatedStars;
    let calExtinctionCoeffUnc = self.calExtinctionCoeffUnc;
    let calExtinctionCoeffMaxUnc = self.calExtinctionCoeffMaxUnc;
    let calTime = self.calTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let calType = self.calType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    SOICalibration_Full::create(_fbb, &SOICalibration_FullArgs{
      calExtinctionCoeff,
      calSkyBg,
      calBgIntensity,
      calSpectralFilterSolarMag,
      calZeroPoint,
      calNumDetectedStars,
      calNumCorrelatedStars,
      calExtinctionCoeffUnc,
      calExtinctionCoeffMaxUnc,
      calTime,
      calType,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SOICalibration_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_soicalibration_full_unchecked`.
pub fn root_as_soicalibration_full(buf: &[u8]) -> Result<SOICalibration_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SOICalibration_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SOICalibration_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_soicalibration_full_unchecked`.
pub fn size_prefixed_root_as_soicalibration_full(buf: &[u8]) -> Result<SOICalibration_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SOICalibration_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SOICalibration_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_soicalibration_full_unchecked`.
pub fn root_as_soicalibration_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SOICalibration_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SOICalibration_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SOICalibration_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_soicalibration_full_unchecked`.
pub fn size_prefixed_root_as_soicalibration_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SOICalibration_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SOICalibration_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SOICalibration_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SOICalibration_Full`.
pub unsafe fn root_as_soicalibration_full_unchecked(buf: &[u8]) -> SOICalibration_Full {
  flatbuffers::root_unchecked::<SOICalibration_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SOICalibration_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SOICalibration_Full`.
pub unsafe fn size_prefixed_root_as_soicalibration_full_unchecked(buf: &[u8]) -> SOICalibration_Full {
  flatbuffers::size_prefixed_root_unchecked::<SOICalibration_Full>(buf)
}
pub const SOICALIBRATION_FULL_IDENTIFIER: &str = "SOIC";

#[inline]
pub fn soicalibration_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SOICALIBRATION_FULL_IDENTIFIER, false)
}

#[inline]
pub fn soicalibration_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SOICALIBRATION_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_soicalibration_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SOICalibration_Full<'a>>) {
  fbb.finish(root, Some(SOICALIBRATION_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_soicalibration_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SOICalibration_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(SOICALIBRATION_FULL_IDENTIFIER));
}
