// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum DiplomaticClearanceDetails_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection of diplomatic clearance details.
pub struct DiplomaticClearanceDetails_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for DiplomaticClearanceDetails_Abridged<'a> {
  type Inner = DiplomaticClearanceDetails_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> DiplomaticClearanceDetails_Abridged<'a> {
  pub const VT_IDSORTIE: flatbuffers::VOffsetT = 4;
  pub const VT_LEGNUM: flatbuffers::VOffsetT = 6;
  pub const VT_ROUTESTRING: flatbuffers::VOffsetT = 8;
  pub const VT_VALIDSTARTTIME: flatbuffers::VOffsetT = 10;
  pub const VT_VALIDENDTIME: flatbuffers::VOffsetT = 12;
  pub const VT_CLEARANCEID: flatbuffers::VOffsetT = 14;
  pub const VT_EXTERNALCLEARANCEID: flatbuffers::VOffsetT = 16;
  pub const VT_CLEAREDCALLSIGN: flatbuffers::VOffsetT = 18;
  pub const VT_SEQUENCENUM: flatbuffers::VOffsetT = 20;
  pub const VT_COUNTRYCODE: flatbuffers::VOffsetT = 22;
  pub const VT_ALTCOUNTRYCODE: flatbuffers::VOffsetT = 24;
  pub const VT_COUNTRYNAME: flatbuffers::VOffsetT = 26;
  pub const VT_VALIDDESC: flatbuffers::VOffsetT = 28;
  pub const VT_WINDOWREMARK: flatbuffers::VOffsetT = 30;
  pub const VT_ENTRYPOINT: flatbuffers::VOffsetT = 32;
  pub const VT_ENTRYNET: flatbuffers::VOffsetT = 34;
  pub const VT_EXITPOINT: flatbuffers::VOffsetT = 36;
  pub const VT_EXITNLT: flatbuffers::VOffsetT = 38;
  pub const VT_REQICAO: flatbuffers::VOffsetT = 40;
  pub const VT_ACTION: flatbuffers::VOffsetT = 42;
  pub const VT_STATUS: flatbuffers::VOffsetT = 44;
  pub const VT_PROFILE: flatbuffers::VOffsetT = 46;
  pub const VT_REQPOINT: flatbuffers::VOffsetT = 48;
  pub const VT_CLEARANCEREMARK: flatbuffers::VOffsetT = 50;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    DiplomaticClearanceDetails_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args DiplomaticClearanceDetails_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<DiplomaticClearanceDetails_Abridged<'bldr>> {
    let mut builder = DiplomaticClearanceDetails_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.clearanceRemark { builder.add_clearanceRemark(x); }
    if let Some(x) = args.profile { builder.add_profile(x); }
    if let Some(x) = args.status { builder.add_status(x); }
    if let Some(x) = args.action { builder.add_action(x); }
    if let Some(x) = args.exitNLT { builder.add_exitNLT(x); }
    if let Some(x) = args.exitPoint { builder.add_exitPoint(x); }
    if let Some(x) = args.entryNET { builder.add_entryNET(x); }
    if let Some(x) = args.entryPoint { builder.add_entryPoint(x); }
    if let Some(x) = args.windowRemark { builder.add_windowRemark(x); }
    if let Some(x) = args.validDesc { builder.add_validDesc(x); }
    if let Some(x) = args.countryName { builder.add_countryName(x); }
    if let Some(x) = args.altCountryCode { builder.add_altCountryCode(x); }
    if let Some(x) = args.countryCode { builder.add_countryCode(x); }
    builder.add_sequenceNum(args.sequenceNum);
    if let Some(x) = args.clearedCallSign { builder.add_clearedCallSign(x); }
    if let Some(x) = args.externalClearanceId { builder.add_externalClearanceId(x); }
    if let Some(x) = args.clearanceId { builder.add_clearanceId(x); }
    if let Some(x) = args.validEndTime { builder.add_validEndTime(x); }
    if let Some(x) = args.validStartTime { builder.add_validStartTime(x); }
    if let Some(x) = args.routeString { builder.add_routeString(x); }
    builder.add_legNum(args.legNum);
    if let Some(x) = args.idSortie { builder.add_idSortie(x); }
    builder.add_reqPoint(args.reqPoint);
    builder.add_reqICAO(args.reqICAO);
    builder.finish()
  }

  pub fn unpack(&self) -> DiplomaticClearanceDetails_AbridgedT {
    let idSortie = self.idSortie().map(|x| {
      x.to_string()
    });
    let legNum = self.legNum();
    let routeString = self.routeString().map(|x| {
      x.to_string()
    });
    let validStartTime = self.validStartTime().map(|x| {
      x.to_string()
    });
    let validEndTime = self.validEndTime().map(|x| {
      x.to_string()
    });
    let clearanceId = self.clearanceId().map(|x| {
      x.to_string()
    });
    let externalClearanceId = self.externalClearanceId().map(|x| {
      x.to_string()
    });
    let clearedCallSign = self.clearedCallSign().map(|x| {
      x.to_string()
    });
    let sequenceNum = self.sequenceNum();
    let countryCode = self.countryCode().map(|x| {
      x.to_string()
    });
    let altCountryCode = self.altCountryCode().map(|x| {
      x.to_string()
    });
    let countryName = self.countryName().map(|x| {
      x.to_string()
    });
    let validDesc = self.validDesc().map(|x| {
      x.to_string()
    });
    let windowRemark = self.windowRemark().map(|x| {
      x.to_string()
    });
    let entryPoint = self.entryPoint().map(|x| {
      x.to_string()
    });
    let entryNET = self.entryNET().map(|x| {
      x.to_string()
    });
    let exitPoint = self.exitPoint().map(|x| {
      x.to_string()
    });
    let exitNLT = self.exitNLT().map(|x| {
      x.to_string()
    });
    let reqICAO = self.reqICAO();
    let action = self.action().map(|x| {
      x.to_string()
    });
    let status = self.status().map(|x| {
      x.to_string()
    });
    let profile = self.profile().map(|x| {
      x.to_string()
    });
    let reqPoint = self.reqPoint();
    let clearanceRemark = self.clearanceRemark().map(|x| {
      x.to_string()
    });
    DiplomaticClearanceDetails_AbridgedT {
      idSortie,
      legNum,
      routeString,
      validStartTime,
      validEndTime,
      clearanceId,
      externalClearanceId,
      clearedCallSign,
      sequenceNum,
      countryCode,
      altCountryCode,
      countryName,
      validDesc,
      windowRemark,
      entryPoint,
      entryNET,
      exitPoint,
      exitNLT,
      reqICAO,
      action,
      status,
      profile,
      reqPoint,
      clearanceRemark,
    }
  }

  /// Unique identifier of the Aircraft Sortie associated with this diplomatic clearance record.
  /// Example: /// Example: 207010e0-f97d-431c-8c00-7e46acfef0f5
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSortie(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_IDSORTIE, None)}
  }
  /// Identifies the Itinerary point of a sortie where an air event occurs.
  /// Example: /// Example: 825
  /// Constraints: No constraints specified.
  #[inline]
  pub fn legNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DiplomaticClearanceDetails_Abridged::VT_LEGNUM, Some(0)).unwrap()}
  }
  /// The 1801 fileable route of flight string associated with this diplomatic clearance. The route of flight string contains route designators, significant points, change of speed/altitude, change of flight rules, and cruise climbs.
  /// Example: /// Example: DCT DOH P430 BAYAN/M062F150 P430 RAMKI
  /// Constraints: Minimum length = 0, Maximum length = 4000
  #[inline]
  pub fn routeString(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_ROUTESTRING, None)}
  }
  /// The start time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn validStartTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_VALIDSTARTTIME, None)}
  }
  /// The end time of the validity of this diplomatic clearance, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn validEndTime(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_VALIDENDTIME, None)}
  }
  /// Identifier of this diplomatic clearance issued by the host country.
  /// Example: /// Example: MFMW225662GHQ
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn clearanceId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_CLEARANCEID, None)}
  }
  /// Optional clearance ID from external systems. This field has no meaning within UDL and is provided as a convenience for systems that require tracking of an internal system generated ID.
  /// Example: /// Example: aa714f4d52a37ab1a00b21af9566e379
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn externalClearanceId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_EXTERNALCLEARANCEID, None)}
  }
  /// The call sign of the sortie cleared with this diplomatic clearance.
  /// Example: /// Example: FALCN09
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn clearedCallSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_CLEAREDCALLSIGN, None)}
  }
  /// The placement of this diplomatic clearance within a sequence of clearances used on a sortie. For example, a sequence value of 3 means that it is the third diplomatic clearance the aircraft will use.
  /// Example: /// Example: 3
  /// Constraints: No constraints specified.
  #[inline]
  pub fn sequenceNum(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(DiplomaticClearanceDetails_Abridged::VT_SEQUENCENUM, Some(0)).unwrap()}
  }
  /// The DoD Standard Country Code designator for the country issuing the diplomatic clearance. This field will be set to "OTHR" if the source value does not match a UDL Country code value (ISO-3166-ALPHA-2).
  /// Example: /// Example: NL
  /// Constraints: Minimum length = 0, Maximum length = 4
  #[inline]
  pub fn countryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_COUNTRYCODE, None)}
  }
  /// Specifies an alternate country code if the data provider code is not part of an official Country Code standard such as ISO-3166 or FIPS. This field will be set to the value provided by the source and should be used for all Queries specifying a Country Code.
  /// Example: /// Example: IZ
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn altCountryCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_ALTCOUNTRYCODE, None)}
  }
  /// Name of the country issuing this diplomatic clearance.
  /// Example: /// Example: NETHERLANDS
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn countryName(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_COUNTRYNAME, None)}
  }
  /// Description of when this diplomatic clearance is valid.
  /// Example: /// Example: CY2023
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn validDesc(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_VALIDDESC, None)}
  }
  /// Remarks concerning the valid diplomatic clearance window.
  /// Example: /// Example: Period remarks
  /// Constraints: Minimum length = 0, Maximum length = 256
  #[inline]
  pub fn windowRemark(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_WINDOWREMARK, None)}
  }
  /// The navigation point name where the aircraft must enter the country.
  /// Example: /// Example: LOMOS
  /// Constraints: Minimum length = 0, Maximum length = 38
  #[inline]
  pub fn entryPoint(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_ENTRYPOINT, None)}
  }
  /// Earliest time the aircraft may enter the country, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn entryNET(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_ENTRYNET, None)}
  }
  /// The navigation point name where the aircraft must exit the country.
  /// Example: /// Example: BUDOP
  /// Constraints: Minimum length = 0, Maximum length = 38
  #[inline]
  pub fn exitPoint(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_EXITPOINT, None)}
  }
  /// Latest time the aircraft may exit the country, in ISO 8601 UTC format with millisecond precision.
  /// Example: /// Example: 2024-01-01T01:01:01.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn exitNLT(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_EXITNLT, None)}
  }
  /// Flag indicating whether the clearance request requires ICAO specific information.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reqICAO(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DiplomaticClearanceDetails_Abridged::VT_REQICAO, Some(false)).unwrap()}
  }
  /// The type of action the aircraft can take with this diplomatic clearance (e.g. O for Overfly, L for Land, etc.).
  /// Example: /// Example: O
  /// Constraints: Minimum length = 0, Maximum length = 1
  #[inline]
  pub fn action(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_ACTION, None)}
  }
  /// Indicates the current status of the diplomatic clearance request.
  /// Example: /// Example: IN WORK
  /// Constraints: Minimum length = 0, Maximum length = 16
  #[inline]
  pub fn status(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_STATUS, None)}
  }
  /// The diplomatic clearance profile name used within clearance management systems.
  /// Example: /// Example: T LAND/OFLY IATA COMPLIANT CARGO 23
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn profile(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_PROFILE, None)}
  }
  /// Flag indicating whether entry/exit points are required for clearances.
  /// Example: /// Example: True
  /// Constraints: No constraints specified.
  #[inline]
  pub fn reqPoint(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(DiplomaticClearanceDetails_Abridged::VT_REQPOINT, Some(false)).unwrap()}
  }
  /// Remarks concerning this diplomatic clearance.
  /// Example: /// Example: Clearance remarks
  /// Constraints: Minimum length = 0, Maximum length = 1024
  #[inline]
  pub fn clearanceRemark(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(DiplomaticClearanceDetails_Abridged::VT_CLEARANCEREMARK, None)}
  }
}

impl flatbuffers::Verifiable for DiplomaticClearanceDetails_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSortie", Self::VT_IDSORTIE, false)?
     .visit_field::<i32>("legNum", Self::VT_LEGNUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("routeString", Self::VT_ROUTESTRING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("validStartTime", Self::VT_VALIDSTARTTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("validEndTime", Self::VT_VALIDENDTIME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("clearanceId", Self::VT_CLEARANCEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("externalClearanceId", Self::VT_EXTERNALCLEARANCEID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("clearedCallSign", Self::VT_CLEAREDCALLSIGN, false)?
     .visit_field::<i32>("sequenceNum", Self::VT_SEQUENCENUM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryCode", Self::VT_COUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("altCountryCode", Self::VT_ALTCOUNTRYCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("countryName", Self::VT_COUNTRYNAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("validDesc", Self::VT_VALIDDESC, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("windowRemark", Self::VT_WINDOWREMARK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("entryPoint", Self::VT_ENTRYPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("entryNET", Self::VT_ENTRYNET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("exitPoint", Self::VT_EXITPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("exitNLT", Self::VT_EXITNLT, false)?
     .visit_field::<bool>("reqICAO", Self::VT_REQICAO, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("action", Self::VT_ACTION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("status", Self::VT_STATUS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("profile", Self::VT_PROFILE, false)?
     .visit_field::<bool>("reqPoint", Self::VT_REQPOINT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("clearanceRemark", Self::VT_CLEARANCEREMARK, false)?
     .finish();
    Ok(())
  }
}
pub struct DiplomaticClearanceDetails_AbridgedArgs<'a> {
    pub idSortie: Option<flatbuffers::WIPOffset<&'a str>>,
    pub legNum: i32,
    pub routeString: Option<flatbuffers::WIPOffset<&'a str>>,
    pub validStartTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub validEndTime: Option<flatbuffers::WIPOffset<&'a str>>,
    pub clearanceId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub externalClearanceId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub clearedCallSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub sequenceNum: i32,
    pub countryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub altCountryCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub countryName: Option<flatbuffers::WIPOffset<&'a str>>,
    pub validDesc: Option<flatbuffers::WIPOffset<&'a str>>,
    pub windowRemark: Option<flatbuffers::WIPOffset<&'a str>>,
    pub entryPoint: Option<flatbuffers::WIPOffset<&'a str>>,
    pub entryNET: Option<flatbuffers::WIPOffset<&'a str>>,
    pub exitPoint: Option<flatbuffers::WIPOffset<&'a str>>,
    pub exitNLT: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reqICAO: bool,
    pub action: Option<flatbuffers::WIPOffset<&'a str>>,
    pub status: Option<flatbuffers::WIPOffset<&'a str>>,
    pub profile: Option<flatbuffers::WIPOffset<&'a str>>,
    pub reqPoint: bool,
    pub clearanceRemark: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for DiplomaticClearanceDetails_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    DiplomaticClearanceDetails_AbridgedArgs {
      idSortie: None,
      legNum: 0,
      routeString: None,
      validStartTime: None,
      validEndTime: None,
      clearanceId: None,
      externalClearanceId: None,
      clearedCallSign: None,
      sequenceNum: 0,
      countryCode: None,
      altCountryCode: None,
      countryName: None,
      validDesc: None,
      windowRemark: None,
      entryPoint: None,
      entryNET: None,
      exitPoint: None,
      exitNLT: None,
      reqICAO: false,
      action: None,
      status: None,
      profile: None,
      reqPoint: false,
      clearanceRemark: None,
    }
  }
}

pub struct DiplomaticClearanceDetails_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> DiplomaticClearanceDetails_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_idSortie(&mut self, idSortie: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_IDSORTIE, idSortie);
  }
  #[inline]
  pub fn add_legNum(&mut self, legNum: i32) {
    self.fbb_.push_slot::<i32>(DiplomaticClearanceDetails_Abridged::VT_LEGNUM, legNum, 0);
  }
  #[inline]
  pub fn add_routeString(&mut self, routeString: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_ROUTESTRING, routeString);
  }
  #[inline]
  pub fn add_validStartTime(&mut self, validStartTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_VALIDSTARTTIME, validStartTime);
  }
  #[inline]
  pub fn add_validEndTime(&mut self, validEndTime: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_VALIDENDTIME, validEndTime);
  }
  #[inline]
  pub fn add_clearanceId(&mut self, clearanceId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_CLEARANCEID, clearanceId);
  }
  #[inline]
  pub fn add_externalClearanceId(&mut self, externalClearanceId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_EXTERNALCLEARANCEID, externalClearanceId);
  }
  #[inline]
  pub fn add_clearedCallSign(&mut self, clearedCallSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_CLEAREDCALLSIGN, clearedCallSign);
  }
  #[inline]
  pub fn add_sequenceNum(&mut self, sequenceNum: i32) {
    self.fbb_.push_slot::<i32>(DiplomaticClearanceDetails_Abridged::VT_SEQUENCENUM, sequenceNum, 0);
  }
  #[inline]
  pub fn add_countryCode(&mut self, countryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_COUNTRYCODE, countryCode);
  }
  #[inline]
  pub fn add_altCountryCode(&mut self, altCountryCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_ALTCOUNTRYCODE, altCountryCode);
  }
  #[inline]
  pub fn add_countryName(&mut self, countryName: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_COUNTRYNAME, countryName);
  }
  #[inline]
  pub fn add_validDesc(&mut self, validDesc: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_VALIDDESC, validDesc);
  }
  #[inline]
  pub fn add_windowRemark(&mut self, windowRemark: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_WINDOWREMARK, windowRemark);
  }
  #[inline]
  pub fn add_entryPoint(&mut self, entryPoint: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_ENTRYPOINT, entryPoint);
  }
  #[inline]
  pub fn add_entryNET(&mut self, entryNET: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_ENTRYNET, entryNET);
  }
  #[inline]
  pub fn add_exitPoint(&mut self, exitPoint: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_EXITPOINT, exitPoint);
  }
  #[inline]
  pub fn add_exitNLT(&mut self, exitNLT: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_EXITNLT, exitNLT);
  }
  #[inline]
  pub fn add_reqICAO(&mut self, reqICAO: bool) {
    self.fbb_.push_slot::<bool>(DiplomaticClearanceDetails_Abridged::VT_REQICAO, reqICAO, false);
  }
  #[inline]
  pub fn add_action(&mut self, action: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_ACTION, action);
  }
  #[inline]
  pub fn add_status(&mut self, status: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_STATUS, status);
  }
  #[inline]
  pub fn add_profile(&mut self, profile: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_PROFILE, profile);
  }
  #[inline]
  pub fn add_reqPoint(&mut self, reqPoint: bool) {
    self.fbb_.push_slot::<bool>(DiplomaticClearanceDetails_Abridged::VT_REQPOINT, reqPoint, false);
  }
  #[inline]
  pub fn add_clearanceRemark(&mut self, clearanceRemark: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(DiplomaticClearanceDetails_Abridged::VT_CLEARANCEREMARK, clearanceRemark);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> DiplomaticClearanceDetails_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    DiplomaticClearanceDetails_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<DiplomaticClearanceDetails_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for DiplomaticClearanceDetails_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("DiplomaticClearanceDetails_Abridged");
      ds.field("idSortie", &self.idSortie());
      ds.field("legNum", &self.legNum());
      ds.field("routeString", &self.routeString());
      ds.field("validStartTime", &self.validStartTime());
      ds.field("validEndTime", &self.validEndTime());
      ds.field("clearanceId", &self.clearanceId());
      ds.field("externalClearanceId", &self.externalClearanceId());
      ds.field("clearedCallSign", &self.clearedCallSign());
      ds.field("sequenceNum", &self.sequenceNum());
      ds.field("countryCode", &self.countryCode());
      ds.field("altCountryCode", &self.altCountryCode());
      ds.field("countryName", &self.countryName());
      ds.field("validDesc", &self.validDesc());
      ds.field("windowRemark", &self.windowRemark());
      ds.field("entryPoint", &self.entryPoint());
      ds.field("entryNET", &self.entryNET());
      ds.field("exitPoint", &self.exitPoint());
      ds.field("exitNLT", &self.exitNLT());
      ds.field("reqICAO", &self.reqICAO());
      ds.field("action", &self.action());
      ds.field("status", &self.status());
      ds.field("profile", &self.profile());
      ds.field("reqPoint", &self.reqPoint());
      ds.field("clearanceRemark", &self.clearanceRemark());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct DiplomaticClearanceDetails_AbridgedT {
  pub idSortie: Option<String>,
  pub legNum: i32,
  pub routeString: Option<String>,
  pub validStartTime: Option<String>,
  pub validEndTime: Option<String>,
  pub clearanceId: Option<String>,
  pub externalClearanceId: Option<String>,
  pub clearedCallSign: Option<String>,
  pub sequenceNum: i32,
  pub countryCode: Option<String>,
  pub altCountryCode: Option<String>,
  pub countryName: Option<String>,
  pub validDesc: Option<String>,
  pub windowRemark: Option<String>,
  pub entryPoint: Option<String>,
  pub entryNET: Option<String>,
  pub exitPoint: Option<String>,
  pub exitNLT: Option<String>,
  pub reqICAO: bool,
  pub action: Option<String>,
  pub status: Option<String>,
  pub profile: Option<String>,
  pub reqPoint: bool,
  pub clearanceRemark: Option<String>,
}
impl Default for DiplomaticClearanceDetails_AbridgedT {
  fn default() -> Self {
    Self {
      idSortie: None,
      legNum: 0,
      routeString: None,
      validStartTime: None,
      validEndTime: None,
      clearanceId: None,
      externalClearanceId: None,
      clearedCallSign: None,
      sequenceNum: 0,
      countryCode: None,
      altCountryCode: None,
      countryName: None,
      validDesc: None,
      windowRemark: None,
      entryPoint: None,
      entryNET: None,
      exitPoint: None,
      exitNLT: None,
      reqICAO: false,
      action: None,
      status: None,
      profile: None,
      reqPoint: false,
      clearanceRemark: None,
    }
  }
}
impl DiplomaticClearanceDetails_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<DiplomaticClearanceDetails_Abridged<'b>> {
    let idSortie = self.idSortie.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let legNum = self.legNum;
    let routeString = self.routeString.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let validStartTime = self.validStartTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let validEndTime = self.validEndTime.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let clearanceId = self.clearanceId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let externalClearanceId = self.externalClearanceId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let clearedCallSign = self.clearedCallSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let sequenceNum = self.sequenceNum;
    let countryCode = self.countryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let altCountryCode = self.altCountryCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let countryName = self.countryName.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let validDesc = self.validDesc.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let windowRemark = self.windowRemark.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let entryPoint = self.entryPoint.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let entryNET = self.entryNET.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let exitPoint = self.exitPoint.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let exitNLT = self.exitNLT.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reqICAO = self.reqICAO;
    let action = self.action.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let status = self.status.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let profile = self.profile.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let reqPoint = self.reqPoint;
    let clearanceRemark = self.clearanceRemark.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    DiplomaticClearanceDetails_Abridged::create(_fbb, &DiplomaticClearanceDetails_AbridgedArgs{
      idSortie,
      legNum,
      routeString,
      validStartTime,
      validEndTime,
      clearanceId,
      externalClearanceId,
      clearedCallSign,
      sequenceNum,
      countryCode,
      altCountryCode,
      countryName,
      validDesc,
      windowRemark,
      entryPoint,
      entryNET,
      exitPoint,
      exitNLT,
      reqICAO,
      action,
      status,
      profile,
      reqPoint,
      clearanceRemark,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `DiplomaticClearanceDetails_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_details_abridged_unchecked`.
pub fn root_as_diplomatic_clearance_details_abridged(buf: &[u8]) -> Result<DiplomaticClearanceDetails_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<DiplomaticClearanceDetails_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `DiplomaticClearanceDetails_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_diplomatic_clearance_details_abridged_unchecked`.
pub fn size_prefixed_root_as_diplomatic_clearance_details_abridged(buf: &[u8]) -> Result<DiplomaticClearanceDetails_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<DiplomaticClearanceDetails_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `DiplomaticClearanceDetails_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_details_abridged_unchecked`.
pub fn root_as_diplomatic_clearance_details_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiplomaticClearanceDetails_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<DiplomaticClearanceDetails_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `DiplomaticClearanceDetails_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_diplomatic_clearance_details_abridged_unchecked`.
pub fn size_prefixed_root_as_diplomatic_clearance_details_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<DiplomaticClearanceDetails_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<DiplomaticClearanceDetails_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a DiplomaticClearanceDetails_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `DiplomaticClearanceDetails_Abridged`.
pub unsafe fn root_as_diplomatic_clearance_details_abridged_unchecked(buf: &[u8]) -> DiplomaticClearanceDetails_Abridged {
  flatbuffers::root_unchecked::<DiplomaticClearanceDetails_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed DiplomaticClearanceDetails_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `DiplomaticClearanceDetails_Abridged`.
pub unsafe fn size_prefixed_root_as_diplomatic_clearance_details_abridged_unchecked(buf: &[u8]) -> DiplomaticClearanceDetails_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<DiplomaticClearanceDetails_Abridged>(buf)
}
pub const DIPLOMATIC_CLEARANCE_DETAILS_ABRIDGED_IDENTIFIER: &str = "DIPL";

#[inline]
pub fn diplomatic_clearance_details_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIPLOMATIC_CLEARANCE_DETAILS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn diplomatic_clearance_details_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, DIPLOMATIC_CLEARANCE_DETAILS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_diplomatic_clearance_details_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<DiplomaticClearanceDetails_Abridged<'a>>) {
  fbb.finish(root, Some(DIPLOMATIC_CLEARANCE_DETAILS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_diplomatic_clearance_details_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<DiplomaticClearanceDetails_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(DIPLOMATIC_CLEARANCE_DETAILS_ABRIDGED_IDENTIFIER));
}
