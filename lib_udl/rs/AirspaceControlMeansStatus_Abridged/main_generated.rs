// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum AirspaceControlMeansStatus_AbridgedOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Mandatory nested segment to report multiple airspace control means statuses within an ACOID.
pub struct AirspaceControlMeansStatus_Abridged<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AirspaceControlMeansStatus_Abridged<'a> {
  type Inner = AirspaceControlMeansStatus_Abridged<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AirspaceControlMeansStatus_Abridged<'a> {
  pub const VT_CMSTAT: flatbuffers::VOffsetT = 4;
  pub const VT_CMSTATID: flatbuffers::VOffsetT = 6;
  pub const VT_AIRSPACECONTROLMEANS: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AirspaceControlMeansStatus_Abridged { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AirspaceControlMeansStatus_AbridgedArgs<'args>
  ) -> flatbuffers::WIPOffset<AirspaceControlMeansStatus_Abridged<'bldr>> {
    let mut builder = AirspaceControlMeansStatus_AbridgedBuilder::new(_fbb);
    if let Some(x) = args.airspaceControlMeans { builder.add_airspaceControlMeans(x); }
    if let Some(x) = args.cmStatId { builder.add_cmStatId(x); }
    if let Some(x) = args.cmStat { builder.add_cmStat(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> AirspaceControlMeansStatus_AbridgedT {
    let cmStat = self.cmStat().map(|x| {
      x.to_string()
    });
    let cmStatId = self.cmStatId().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let airspaceControlMeans = self.airspaceControlMeans().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    AirspaceControlMeansStatus_AbridgedT {
      cmStat,
      cmStatId,
      airspaceControlMeans,
    }
  }

  /// Status of Airspace Control Means. Must be ADD, CHANGE, or DELETE.
  /// Example: /// Example: ADD
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn cmStat(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AirspaceControlMeansStatus_Abridged::VT_CMSTAT, None)}
  }
  /// Airspace control means name or designator. Mandatory if acmStat equals "DELETE," otherwise this field is prohibited.
  /// Example: /// Example: ['DESIGN:B35', 'NAME:ERMA', 'RANG:C21-C25']
  /// Constraints: No constraints specified.
  #[inline]
  pub fn cmStatId(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirspaceControlMeansStatus_Abridged::VT_CMSTATID, None)}
  }
  /// A conditional nested segment to report multiple airspace control means within a particular airspace control means status.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn airspaceControlMeans(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(AirspaceControlMeansStatus_Abridged::VT_AIRSPACECONTROLMEANS, None)}
  }
}

impl flatbuffers::Verifiable for AirspaceControlMeansStatus_Abridged<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("cmStat", Self::VT_CMSTAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("cmStatId", Self::VT_CMSTATID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("airspaceControlMeans", Self::VT_AIRSPACECONTROLMEANS, false)?
     .finish();
    Ok(())
  }
}
pub struct AirspaceControlMeansStatus_AbridgedArgs<'a> {
    pub cmStat: Option<flatbuffers::WIPOffset<&'a str>>,
    pub cmStatId: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub airspaceControlMeans: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
}
impl<'a> Default for AirspaceControlMeansStatus_AbridgedArgs<'a> {
  #[inline]
  fn default() -> Self {
    AirspaceControlMeansStatus_AbridgedArgs {
      cmStat: None,
      cmStatId: None,
      airspaceControlMeans: None,
    }
  }
}

pub struct AirspaceControlMeansStatus_AbridgedBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AirspaceControlMeansStatus_AbridgedBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_cmStat(&mut self, cmStat: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceControlMeansStatus_Abridged::VT_CMSTAT, cmStat);
  }
  #[inline]
  pub fn add_cmStatId(&mut self, cmStatId: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceControlMeansStatus_Abridged::VT_CMSTATID, cmStatId);
  }
  #[inline]
  pub fn add_airspaceControlMeans(&mut self, airspaceControlMeans: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AirspaceControlMeansStatus_Abridged::VT_AIRSPACECONTROLMEANS, airspaceControlMeans);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AirspaceControlMeansStatus_AbridgedBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AirspaceControlMeansStatus_AbridgedBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AirspaceControlMeansStatus_Abridged<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AirspaceControlMeansStatus_Abridged<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AirspaceControlMeansStatus_Abridged");
      ds.field("cmStat", &self.cmStat());
      ds.field("cmStatId", &self.cmStatId());
      ds.field("airspaceControlMeans", &self.airspaceControlMeans());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct AirspaceControlMeansStatus_AbridgedT {
  pub cmStat: Option<String>,
  pub cmStatId: Option<Vec<String>>,
  pub airspaceControlMeans: Option<Vec<String>>,
}
impl Default for AirspaceControlMeansStatus_AbridgedT {
  fn default() -> Self {
    Self {
      cmStat: None,
      cmStatId: None,
      airspaceControlMeans: None,
    }
  }
}
impl AirspaceControlMeansStatus_AbridgedT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<AirspaceControlMeansStatus_Abridged<'b>> {
    let cmStat = self.cmStat.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let cmStatId = self.cmStatId.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let airspaceControlMeans = self.airspaceControlMeans.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    AirspaceControlMeansStatus_Abridged::create(_fbb, &AirspaceControlMeansStatus_AbridgedArgs{
      cmStat,
      cmStatId,
      airspaceControlMeans,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AirspaceControlMeansStatus_Abridged`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_control_means_status_abridged_unchecked`.
pub fn root_as_airspace_control_means_status_abridged(buf: &[u8]) -> Result<AirspaceControlMeansStatus_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AirspaceControlMeansStatus_Abridged>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AirspaceControlMeansStatus_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_airspace_control_means_status_abridged_unchecked`.
pub fn size_prefixed_root_as_airspace_control_means_status_abridged(buf: &[u8]) -> Result<AirspaceControlMeansStatus_Abridged, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AirspaceControlMeansStatus_Abridged>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AirspaceControlMeansStatus_Abridged` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_control_means_status_abridged_unchecked`.
pub fn root_as_airspace_control_means_status_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirspaceControlMeansStatus_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AirspaceControlMeansStatus_Abridged<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AirspaceControlMeansStatus_Abridged` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_airspace_control_means_status_abridged_unchecked`.
pub fn size_prefixed_root_as_airspace_control_means_status_abridged_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AirspaceControlMeansStatus_Abridged<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AirspaceControlMeansStatus_Abridged<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AirspaceControlMeansStatus_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AirspaceControlMeansStatus_Abridged`.
pub unsafe fn root_as_airspace_control_means_status_abridged_unchecked(buf: &[u8]) -> AirspaceControlMeansStatus_Abridged {
  flatbuffers::root_unchecked::<AirspaceControlMeansStatus_Abridged>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AirspaceControlMeansStatus_Abridged and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AirspaceControlMeansStatus_Abridged`.
pub unsafe fn size_prefixed_root_as_airspace_control_means_status_abridged_unchecked(buf: &[u8]) -> AirspaceControlMeansStatus_Abridged {
  flatbuffers::size_prefixed_root_unchecked::<AirspaceControlMeansStatus_Abridged>(buf)
}
pub const AIRSPACE_CONTROL_MEANS_STATUS_ABRIDGED_IDENTIFIER: &str = "AIRS";

#[inline]
pub fn airspace_control_means_status_abridged_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRSPACE_CONTROL_MEANS_STATUS_ABRIDGED_IDENTIFIER, false)
}

#[inline]
pub fn airspace_control_means_status_abridged_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, AIRSPACE_CONTROL_MEANS_STATUS_ABRIDGED_IDENTIFIER, true)
}

#[inline]
pub fn finish_airspace_control_means_status_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AirspaceControlMeansStatus_Abridged<'a>>) {
  fbb.finish(root, Some(AIRSPACE_CONTROL_MEANS_STATUS_ABRIDGED_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_airspace_control_means_status_abridged_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AirspaceControlMeansStatus_Abridged<'a>>) {
  fbb.finish_size_prefixed(root, Some(AIRSPACE_CONTROL_MEANS_STATUS_ABRIDGED_IDENTIFIER));
}
