// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ISRCollectionActual_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Actual start and stop for the collection.
pub struct ISRCollectionActual_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ISRCollectionActual_Full<'a> {
  type Inner = ISRCollectionActual_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ISRCollectionActual_Full<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_START: flatbuffers::VOffsetT = 6;
  pub const VT_STOP: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ISRCollectionActual_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ISRCollectionActual_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<ISRCollectionActual_Full<'bldr>> {
    let mut builder = ISRCollectionActual_FullBuilder::new(_fbb);
    if let Some(x) = args.stop { builder.add_stop(x); }
    if let Some(x) = args.start { builder.add_start(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> ISRCollectionActual_FullT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let start = self.start().map(|x| {
      x.to_string()
    });
    let stop = self.stop().map(|x| {
      x.to_string()
    });
    ISRCollectionActual_FullT {
      id,
      start,
      stop,
    }
  }

  /// Unique Identifier of actual collection period for historical archive.
  /// Example: /// Example: ISRCOLLECTIONACTUAL-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionActual_Full::VT_ID, None)}
  }
  /// Start time the collection actually occurred, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn start(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionActual_Full::VT_START, None)}
  }
  /// Stop time the collection actually occurred, in ISO 8601 UTC format.
  /// Example: /// Example: 2021-01-19T01:01:15.001Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn stop(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(ISRCollectionActual_Full::VT_STOP, None)}
  }
}

impl flatbuffers::Verifiable for ISRCollectionActual_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("start", Self::VT_START, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("stop", Self::VT_STOP, false)?
     .finish();
    Ok(())
  }
}
pub struct ISRCollectionActual_FullArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub start: Option<flatbuffers::WIPOffset<&'a str>>,
    pub stop: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ISRCollectionActual_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    ISRCollectionActual_FullArgs {
      id: None,
      start: None,
      stop: None,
    }
  }
}

pub struct ISRCollectionActual_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ISRCollectionActual_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionActual_Full::VT_ID, id);
  }
  #[inline]
  pub fn add_start(&mut self, start: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionActual_Full::VT_START, start);
  }
  #[inline]
  pub fn add_stop(&mut self, stop: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ISRCollectionActual_Full::VT_STOP, stop);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ISRCollectionActual_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    ISRCollectionActual_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ISRCollectionActual_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ISRCollectionActual_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ISRCollectionActual_Full");
      ds.field("id", &self.id());
      ds.field("start", &self.start());
      ds.field("stop", &self.stop());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct ISRCollectionActual_FullT {
  pub id: Option<String>,
  pub start: Option<String>,
  pub stop: Option<String>,
}
impl Default for ISRCollectionActual_FullT {
  fn default() -> Self {
    Self {
      id: None,
      start: None,
      stop: None,
    }
  }
}
impl ISRCollectionActual_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<ISRCollectionActual_Full<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let start = self.start.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let stop = self.stop.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    ISRCollectionActual_Full::create(_fbb, &ISRCollectionActual_FullArgs{
      id,
      start,
      stop,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ISRCollectionActual_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_actual_full_unchecked`.
pub fn root_as_isrcollection_actual_full(buf: &[u8]) -> Result<ISRCollectionActual_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ISRCollectionActual_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ISRCollectionActual_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_isrcollection_actual_full_unchecked`.
pub fn size_prefixed_root_as_isrcollection_actual_full(buf: &[u8]) -> Result<ISRCollectionActual_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ISRCollectionActual_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ISRCollectionActual_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_actual_full_unchecked`.
pub fn root_as_isrcollection_actual_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionActual_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ISRCollectionActual_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ISRCollectionActual_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_isrcollection_actual_full_unchecked`.
pub fn size_prefixed_root_as_isrcollection_actual_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ISRCollectionActual_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ISRCollectionActual_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ISRCollectionActual_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ISRCollectionActual_Full`.
pub unsafe fn root_as_isrcollection_actual_full_unchecked(buf: &[u8]) -> ISRCollectionActual_Full {
  flatbuffers::root_unchecked::<ISRCollectionActual_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ISRCollectionActual_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ISRCollectionActual_Full`.
pub unsafe fn size_prefixed_root_as_isrcollection_actual_full_unchecked(buf: &[u8]) -> ISRCollectionActual_Full {
  flatbuffers::size_prefixed_root_unchecked::<ISRCollectionActual_Full>(buf)
}
pub const ISRCOLLECTION_ACTUAL_FULL_IDENTIFIER: &str = "ISRC";

#[inline]
pub fn isrcollection_actual_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_ACTUAL_FULL_IDENTIFIER, false)
}

#[inline]
pub fn isrcollection_actual_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, ISRCOLLECTION_ACTUAL_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_isrcollection_actual_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<ISRCollectionActual_Full<'a>>) {
  fbb.finish(root, Some(ISRCOLLECTION_ACTUAL_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_isrcollection_actual_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<ISRCollectionActual_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(ISRCOLLECTION_ACTUAL_FULL_IDENTIFIER));
}
