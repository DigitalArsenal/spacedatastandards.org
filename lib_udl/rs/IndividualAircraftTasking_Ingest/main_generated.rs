// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IndividualAircraftTasking_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Collection that specifies the naval flight operations for this ATO.
pub struct IndividualAircraftTasking_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IndividualAircraftTasking_Ingest<'a> {
  type Inner = IndividualAircraftTasking_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IndividualAircraftTasking_Ingest<'a> {
  pub const VT_NUMACFT: flatbuffers::VOffsetT = 4;
  pub const VT_ACFTTYPE: flatbuffers::VOffsetT = 6;
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 8;
  pub const VT_PRICONFIGCODE: flatbuffers::VOffsetT = 10;
  pub const VT_SECCONFIGCODE: flatbuffers::VOffsetT = 12;
  pub const VT_LINK16CALLSIGN: flatbuffers::VOffsetT = 14;
  pub const VT_TACANCHAN: flatbuffers::VOffsetT = 16;
  pub const VT_JUADDRESS: flatbuffers::VOffsetT = 18;
  pub const VT_IFFSIFMODE1CODE: flatbuffers::VOffsetT = 20;
  pub const VT_IFFSIFMODE2CODE: flatbuffers::VOffsetT = 22;
  pub const VT_IFFSIFMODE3CODE: flatbuffers::VOffsetT = 24;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IndividualAircraftTasking_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IndividualAircraftTasking_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<IndividualAircraftTasking_Ingest<'bldr>> {
    let mut builder = IndividualAircraftTasking_IngestBuilder::new(_fbb);
    if let Some(x) = args.iffSifMode3Code { builder.add_iffSifMode3Code(x); }
    if let Some(x) = args.iffSifMode2Code { builder.add_iffSifMode2Code(x); }
    if let Some(x) = args.iffSifMode1Code { builder.add_iffSifMode1Code(x); }
    if let Some(x) = args.juAddress { builder.add_juAddress(x); }
    builder.add_tacanChan(args.tacanChan);
    if let Some(x) = args.link16CallSign { builder.add_link16CallSign(x); }
    if let Some(x) = args.secConfigCode { builder.add_secConfigCode(x); }
    if let Some(x) = args.priConfigCode { builder.add_priConfigCode(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    if let Some(x) = args.acftType { builder.add_acftType(x); }
    builder.add_numAcft(args.numAcft);
    builder.finish()
  }

  pub fn unpack(&self) -> IndividualAircraftTasking_IngestT {
    let numAcft = self.numAcft();
    let acftType = self.acftType().map(|x| {
      x.to_string()
    });
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let priConfigCode = self.priConfigCode().map(|x| {
      x.to_string()
    });
    let secConfigCode = self.secConfigCode().map(|x| {
      x.to_string()
    });
    let link16CallSign = self.link16CallSign().map(|x| {
      x.to_string()
    });
    let tacanChan = self.tacanChan();
    let juAddress = self.juAddress().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let iffSifMode1Code = self.iffSifMode1Code().map(|x| {
      x.to_string()
    });
    let iffSifMode2Code = self.iffSifMode2Code().map(|x| {
      x.to_string()
    });
    let iffSifMode3Code = self.iffSifMode3Code().map(|x| {
      x.to_string()
    });
    IndividualAircraftTasking_IngestT {
      numAcft,
      acftType,
      callSign,
      priConfigCode,
      secConfigCode,
      link16CallSign,
      tacanChan,
      juAddress,
      iffSifMode1Code,
      iffSifMode2Code,
      iffSifMode3Code,
    }
  }

  /// The number of aircraft participating in this mission.
  /// Example: /// Example: 2
  /// Constraints: No constraints specified.
  #[inline]
  pub fn numAcft(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(IndividualAircraftTasking_Ingest::VT_NUMACFT, Some(0)).unwrap()}
  }
  /// The type and model number for the aircraft. The field may specify a value of an aircraft not yet assigned an aircraft code contained in the aircraft codes list.
  /// Example: /// Example: F35A
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn acftType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_ACFTTYPE, None)}
  }
  /// The call sign assigned to this mission aircraft.
  /// Example: /// Example: EAGLE47
  /// Constraints: Minimum length = 0, Maximum length = 24
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_CALLSIGN, None)}
  }
  /// The code that indicates the ordinance mix carried on this mission aircraft.
  /// Example: /// Example: 6A2W3
  /// Constraints: Minimum length = 0, Maximum length = 48
  #[inline]
  pub fn priConfigCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_PRICONFIGCODE, None)}
  }
  /// The code for the secondary ordinance mix carried on this mission aircraft.
  /// Example: /// Example: 2S2WG
  /// Constraints: Minimum length = 0, Maximum length = 48
  #[inline]
  pub fn secConfigCode(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_SECCONFIGCODE, None)}
  }
  /// The Link 16 abbreviated call sign assigned to the ACA. This is normally the first and last letter and the last two numbers of the call sign.
  /// Example: /// Example: EE47
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn link16CallSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_LINK16CALLSIGN, None)}
  }
  /// The TACAN channel assigned to this mission aircraft.
  /// Example: /// Example: 123
  /// Constraints: No constraints specified.
  #[inline]
  pub fn tacanChan(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(IndividualAircraftTasking_Ingest::VT_TACANCHAN, Some(0)).unwrap()}
  }
  /// An optional array of link 16 octal track numbers assigned as the primary JTIDS Unit (JU) address for the mission aircraft.
  /// Example: /// Example: 12345
  /// Constraints: No constraints specified.
  #[inline]
  pub fn juAddress(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(IndividualAircraftTasking_Ingest::VT_JUADDRESS, None)}
  }
  /// The mode 1 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 111
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn iffSifMode1Code(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_IFFSIFMODE1CODE, None)}
  }
  /// The mode 2 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 20147
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn iffSifMode2Code(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_IFFSIFMODE2CODE, None)}
  }
  /// The mode 3 and code of the Identification Friend or FOE (IFF) or Selective Identification Feature (SIF).
  /// Example: /// Example: 30147
  /// Constraints: Minimum length = 0, Maximum length = 8
  #[inline]
  pub fn iffSifMode3Code(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IndividualAircraftTasking_Ingest::VT_IFFSIFMODE3CODE, None)}
  }
}

impl flatbuffers::Verifiable for IndividualAircraftTasking_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i32>("numAcft", Self::VT_NUMACFT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("acftType", Self::VT_ACFTTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("priConfigCode", Self::VT_PRICONFIGCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("secConfigCode", Self::VT_SECCONFIGCODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("link16CallSign", Self::VT_LINK16CALLSIGN, false)?
     .visit_field::<i32>("tacanChan", Self::VT_TACANCHAN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("juAddress", Self::VT_JUADDRESS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("iffSifMode1Code", Self::VT_IFFSIFMODE1CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("iffSifMode2Code", Self::VT_IFFSIFMODE2CODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("iffSifMode3Code", Self::VT_IFFSIFMODE3CODE, false)?
     .finish();
    Ok(())
  }
}
pub struct IndividualAircraftTasking_IngestArgs<'a> {
    pub numAcft: i32,
    pub acftType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub priConfigCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub secConfigCode: Option<flatbuffers::WIPOffset<&'a str>>,
    pub link16CallSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub tacanChan: i32,
    pub juAddress: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub iffSifMode1Code: Option<flatbuffers::WIPOffset<&'a str>>,
    pub iffSifMode2Code: Option<flatbuffers::WIPOffset<&'a str>>,
    pub iffSifMode3Code: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for IndividualAircraftTasking_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    IndividualAircraftTasking_IngestArgs {
      numAcft: 0,
      acftType: None,
      callSign: None,
      priConfigCode: None,
      secConfigCode: None,
      link16CallSign: None,
      tacanChan: 0,
      juAddress: None,
      iffSifMode1Code: None,
      iffSifMode2Code: None,
      iffSifMode3Code: None,
    }
  }
}

pub struct IndividualAircraftTasking_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IndividualAircraftTasking_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_numAcft(&mut self, numAcft: i32) {
    self.fbb_.push_slot::<i32>(IndividualAircraftTasking_Ingest::VT_NUMACFT, numAcft, 0);
  }
  #[inline]
  pub fn add_acftType(&mut self, acftType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_ACFTTYPE, acftType);
  }
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_priConfigCode(&mut self, priConfigCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_PRICONFIGCODE, priConfigCode);
  }
  #[inline]
  pub fn add_secConfigCode(&mut self, secConfigCode: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_SECCONFIGCODE, secConfigCode);
  }
  #[inline]
  pub fn add_link16CallSign(&mut self, link16CallSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_LINK16CALLSIGN, link16CallSign);
  }
  #[inline]
  pub fn add_tacanChan(&mut self, tacanChan: i32) {
    self.fbb_.push_slot::<i32>(IndividualAircraftTasking_Ingest::VT_TACANCHAN, tacanChan, 0);
  }
  #[inline]
  pub fn add_juAddress(&mut self, juAddress: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_JUADDRESS, juAddress);
  }
  #[inline]
  pub fn add_iffSifMode1Code(&mut self, iffSifMode1Code: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_IFFSIFMODE1CODE, iffSifMode1Code);
  }
  #[inline]
  pub fn add_iffSifMode2Code(&mut self, iffSifMode2Code: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_IFFSIFMODE2CODE, iffSifMode2Code);
  }
  #[inline]
  pub fn add_iffSifMode3Code(&mut self, iffSifMode3Code: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IndividualAircraftTasking_Ingest::VT_IFFSIFMODE3CODE, iffSifMode3Code);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IndividualAircraftTasking_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IndividualAircraftTasking_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IndividualAircraftTasking_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IndividualAircraftTasking_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IndividualAircraftTasking_Ingest");
      ds.field("numAcft", &self.numAcft());
      ds.field("acftType", &self.acftType());
      ds.field("callSign", &self.callSign());
      ds.field("priConfigCode", &self.priConfigCode());
      ds.field("secConfigCode", &self.secConfigCode());
      ds.field("link16CallSign", &self.link16CallSign());
      ds.field("tacanChan", &self.tacanChan());
      ds.field("juAddress", &self.juAddress());
      ds.field("iffSifMode1Code", &self.iffSifMode1Code());
      ds.field("iffSifMode2Code", &self.iffSifMode2Code());
      ds.field("iffSifMode3Code", &self.iffSifMode3Code());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IndividualAircraftTasking_IngestT {
  pub numAcft: i32,
  pub acftType: Option<String>,
  pub callSign: Option<String>,
  pub priConfigCode: Option<String>,
  pub secConfigCode: Option<String>,
  pub link16CallSign: Option<String>,
  pub tacanChan: i32,
  pub juAddress: Option<Vec<String>>,
  pub iffSifMode1Code: Option<String>,
  pub iffSifMode2Code: Option<String>,
  pub iffSifMode3Code: Option<String>,
}
impl Default for IndividualAircraftTasking_IngestT {
  fn default() -> Self {
    Self {
      numAcft: 0,
      acftType: None,
      callSign: None,
      priConfigCode: None,
      secConfigCode: None,
      link16CallSign: None,
      tacanChan: 0,
      juAddress: None,
      iffSifMode1Code: None,
      iffSifMode2Code: None,
      iffSifMode3Code: None,
    }
  }
}
impl IndividualAircraftTasking_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IndividualAircraftTasking_Ingest<'b>> {
    let numAcft = self.numAcft;
    let acftType = self.acftType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let priConfigCode = self.priConfigCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let secConfigCode = self.secConfigCode.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let link16CallSign = self.link16CallSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let tacanChan = self.tacanChan;
    let juAddress = self.juAddress.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let iffSifMode1Code = self.iffSifMode1Code.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let iffSifMode2Code = self.iffSifMode2Code.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let iffSifMode3Code = self.iffSifMode3Code.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    IndividualAircraftTasking_Ingest::create(_fbb, &IndividualAircraftTasking_IngestArgs{
      numAcft,
      acftType,
      callSign,
      priConfigCode,
      secConfigCode,
      link16CallSign,
      tacanChan,
      juAddress,
      iffSifMode1Code,
      iffSifMode2Code,
      iffSifMode3Code,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IndividualAircraftTasking_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_individual_aircraft_tasking_ingest_unchecked`.
pub fn root_as_individual_aircraft_tasking_ingest(buf: &[u8]) -> Result<IndividualAircraftTasking_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IndividualAircraftTasking_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IndividualAircraftTasking_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_individual_aircraft_tasking_ingest_unchecked`.
pub fn size_prefixed_root_as_individual_aircraft_tasking_ingest(buf: &[u8]) -> Result<IndividualAircraftTasking_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IndividualAircraftTasking_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IndividualAircraftTasking_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_individual_aircraft_tasking_ingest_unchecked`.
pub fn root_as_individual_aircraft_tasking_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IndividualAircraftTasking_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IndividualAircraftTasking_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IndividualAircraftTasking_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_individual_aircraft_tasking_ingest_unchecked`.
pub fn size_prefixed_root_as_individual_aircraft_tasking_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IndividualAircraftTasking_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IndividualAircraftTasking_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IndividualAircraftTasking_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IndividualAircraftTasking_Ingest`.
pub unsafe fn root_as_individual_aircraft_tasking_ingest_unchecked(buf: &[u8]) -> IndividualAircraftTasking_Ingest {
  flatbuffers::root_unchecked::<IndividualAircraftTasking_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IndividualAircraftTasking_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IndividualAircraftTasking_Ingest`.
pub unsafe fn size_prefixed_root_as_individual_aircraft_tasking_ingest_unchecked(buf: &[u8]) -> IndividualAircraftTasking_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<IndividualAircraftTasking_Ingest>(buf)
}
pub const INDIVIDUAL_AIRCRAFT_TASKING_INGEST_IDENTIFIER: &str = "INDI";

#[inline]
pub fn individual_aircraft_tasking_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, INDIVIDUAL_AIRCRAFT_TASKING_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn individual_aircraft_tasking_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, INDIVIDUAL_AIRCRAFT_TASKING_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_individual_aircraft_tasking_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IndividualAircraftTasking_Ingest<'a>>) {
  fbb.finish(root, Some(INDIVIDUAL_AIRCRAFT_TASKING_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_individual_aircraft_tasking_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IndividualAircraftTasking_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(INDIVIDUAL_AIRCRAFT_TASKING_INGEST_IDENTIFIER));
}
