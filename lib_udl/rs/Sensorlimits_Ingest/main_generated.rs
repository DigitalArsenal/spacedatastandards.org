// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SENSORLIMITS_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SENSORLIMITS_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SENSORLIMITS_INGEST_DATA_MODE_ENUM: [Sensorlimits_Ingest_dataMode_Enum; 4] = [
  Sensorlimits_Ingest_dataMode_Enum::REAL,
  Sensorlimits_Ingest_dataMode_Enum::TEST,
  Sensorlimits_Ingest_dataMode_Enum::SIMULATED,
  Sensorlimits_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Sensorlimits_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Sensorlimits_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Sensorlimits_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Sensorlimits_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Sensorlimits_Ingest_dataMode_Enum {
    type Output = Sensorlimits_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Sensorlimits_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Sensorlimits_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Sensorlimits_Ingest_dataMode_Enum {}
pub enum Sensorlimits_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Sensorlimits define 0 to many limits of a particular sensor in terms of observation coverage of on-orbit objects.
pub struct Sensorlimits_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Sensorlimits_Ingest<'a> {
  type Inner = Sensorlimits_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Sensorlimits_Ingest<'a> {
  pub const VT_IDSENSORLIMITS: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 8;
  pub const VT_UPPERLEFTAZIMUTHLIMIT: flatbuffers::VOffsetT = 10;
  pub const VT_UPPERRIGHTAZIMUTHLIMIT: flatbuffers::VOffsetT = 12;
  pub const VT_LOWERRIGHTAZIMUTHLIMIT: flatbuffers::VOffsetT = 14;
  pub const VT_LOWERLEFTAZIMUTHLIMIT: flatbuffers::VOffsetT = 16;
  pub const VT_LOWERLEFTELEVATIONLIMIT: flatbuffers::VOffsetT = 18;
  pub const VT_UPPERLEFTELEVATIONLIMIT: flatbuffers::VOffsetT = 20;
  pub const VT_LOWERRIGHTELEVATIONLIMIT: flatbuffers::VOffsetT = 22;
  pub const VT_UPPERRIGHTELEVATIONLIMIT: flatbuffers::VOffsetT = 24;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 26;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 28;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 30;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 32;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 34;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Sensorlimits_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Sensorlimits_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<Sensorlimits_Ingest<'bldr>> {
    let mut builder = Sensorlimits_IngestBuilder::new(_fbb);
    builder.add_upperRightElevationLimit(args.upperRightElevationLimit);
    builder.add_lowerRightElevationLimit(args.lowerRightElevationLimit);
    builder.add_upperLeftElevationLimit(args.upperLeftElevationLimit);
    builder.add_lowerLeftElevationLimit(args.lowerLeftElevationLimit);
    builder.add_lowerLeftAzimuthLimit(args.lowerLeftAzimuthLimit);
    builder.add_lowerRightAzimuthLimit(args.lowerRightAzimuthLimit);
    builder.add_upperRightAzimuthLimit(args.upperRightAzimuthLimit);
    builder.add_upperLeftAzimuthLimit(args.upperLeftAzimuthLimit);
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.idSensorLimits { builder.add_idSensorLimits(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> Sensorlimits_IngestT {
    let idSensorLimits = self.idSensorLimits().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let upperLeftAzimuthLimit = self.upperLeftAzimuthLimit();
    let upperRightAzimuthLimit = self.upperRightAzimuthLimit();
    let lowerRightAzimuthLimit = self.lowerRightAzimuthLimit();
    let lowerLeftAzimuthLimit = self.lowerLeftAzimuthLimit();
    let lowerLeftElevationLimit = self.lowerLeftElevationLimit();
    let upperLeftElevationLimit = self.upperLeftElevationLimit();
    let lowerRightElevationLimit = self.lowerRightElevationLimit();
    let upperRightElevationLimit = self.upperRightElevationLimit();
    let source = self.source().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    Sensorlimits_IngestT {
      idSensorLimits,
      classificationMarking,
      origNetwork,
      upperLeftAzimuthLimit,
      upperRightAzimuthLimit,
      lowerRightAzimuthLimit,
      lowerLeftAzimuthLimit,
      lowerLeftElevationLimit,
      upperLeftElevationLimit,
      lowerRightElevationLimit,
      upperRightElevationLimit,
      source,
      dataMode,
      createdAt,
      createdBy,
      idSensor,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SENSORLIMITS-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn idSensorLimits(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensorlimits_Ingest::VT_IDSENSORLIMITS, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensorlimits_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensorlimits_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Leftmost or minimum upper azimuth within this sensor limit. Interpreted according to site types as beginning upper azimuth limit, left-hand upper boundary limit. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (in degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn upperLeftAzimuthLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_UPPERLEFTAZIMUTHLIMIT, Some(0.0)).unwrap()}
  }
  /// Rightmost or maximum upper azimuth within this limit. Interpreted according to site types as 2nd azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn upperRightAzimuthLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_UPPERRIGHTAZIMUTHLIMIT, Some(0.0)).unwrap()}
  }
  /// Rightmost or maximum lower azimuth within this limit. Interpreted according to site types as 2nd lower azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower right azimuth limits would be equal. (degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lowerRightAzimuthLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_LOWERRIGHTAZIMUTHLIMIT, Some(0.0)).unwrap()}
  }
  /// Leftmost or minimum lower azimuth within this limit. Interpreted according to site types as lower left azimuth limit elevation angle of axis of conical observation pattern. If the limit rectangle is parallel to the horizon, the upper and lower left azimuth limits would be equal. (degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lowerLeftAzimuthLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_LOWERLEFTAZIMUTHLIMIT, Some(0.0)).unwrap()}
  }
  /// Minimum or lower elevation within this limit. Interpreted according to site types as minimum elevation angle, constant elevation or fan beam centerline. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lowerLeftElevationLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_LOWERLEFTELEVATIONLIMIT, Some(0.0)).unwrap()}
  }
  /// Maximum or upper elevation within this limit. Interpreted according to site types as maximum elevation angle, half the apex of conical observation pattern or star. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn upperLeftElevationLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_UPPERLEFTELEVATIONLIMIT, Some(0.0)).unwrap()}
  }
  /// Minimum or lower right elevation within this limit. Interpreted according to site types as minimum right elevation angle, constant elevation or fan beam centerline. If the limit rectangle is parallel to the horizon, the left and right lower elevation limits would be equal. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn lowerRightElevationLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_LOWERRIGHTELEVATIONLIMIT, Some(0.0)).unwrap()}
  }
  /// Maximum or upper right elevation within this limit. Interpreted according to site types as maximum rightmost elevation angle, half the apex of conical observation pattern or star. If the limit rectangle is parallel to the horizon, the left and right upper elevation limits would be equal. (Degrees).
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn upperRightElevationLimit(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(Sensorlimits_Ingest::VT_UPPERRIGHTELEVATIONLIMIT, Some(0.0)).unwrap()}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensorlimits_Ingest::VT_SOURCE, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Sensorlimits_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Sensorlimits_Ingest_dataMode_Enum>(Sensorlimits_Ingest::VT_DATAMODE, Some(Sensorlimits_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensorlimits_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensorlimits_Ingest::VT_CREATEDBY, None)}
  }
  /// Unique identifier of the target sensor object.
  /// Example: /// Example: SENSORLIMITS-ID
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Sensorlimits_Ingest::VT_IDSENSOR, None)}
  }
}

impl flatbuffers::Verifiable for Sensorlimits_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensorLimits", Self::VT_IDSENSORLIMITS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<f64>("upperLeftAzimuthLimit", Self::VT_UPPERLEFTAZIMUTHLIMIT, false)?
     .visit_field::<f64>("upperRightAzimuthLimit", Self::VT_UPPERRIGHTAZIMUTHLIMIT, false)?
     .visit_field::<f64>("lowerRightAzimuthLimit", Self::VT_LOWERRIGHTAZIMUTHLIMIT, false)?
     .visit_field::<f64>("lowerLeftAzimuthLimit", Self::VT_LOWERLEFTAZIMUTHLIMIT, false)?
     .visit_field::<f64>("lowerLeftElevationLimit", Self::VT_LOWERLEFTELEVATIONLIMIT, false)?
     .visit_field::<f64>("upperLeftElevationLimit", Self::VT_UPPERLEFTELEVATIONLIMIT, false)?
     .visit_field::<f64>("lowerRightElevationLimit", Self::VT_LOWERRIGHTELEVATIONLIMIT, false)?
     .visit_field::<f64>("upperRightElevationLimit", Self::VT_UPPERRIGHTELEVATIONLIMIT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<Sensorlimits_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .finish();
    Ok(())
  }
}
pub struct Sensorlimits_IngestArgs<'a> {
    pub idSensorLimits: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub upperLeftAzimuthLimit: f64,
    pub upperRightAzimuthLimit: f64,
    pub lowerRightAzimuthLimit: f64,
    pub lowerLeftAzimuthLimit: f64,
    pub lowerLeftElevationLimit: f64,
    pub upperLeftElevationLimit: f64,
    pub lowerRightElevationLimit: f64,
    pub upperRightElevationLimit: f64,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Sensorlimits_Ingest_dataMode_Enum,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Sensorlimits_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    Sensorlimits_IngestArgs {
      idSensorLimits: None,
      classificationMarking: None,
      origNetwork: None,
      upperLeftAzimuthLimit: 0.0,
      upperRightAzimuthLimit: 0.0,
      lowerRightAzimuthLimit: 0.0,
      lowerLeftAzimuthLimit: 0.0,
      lowerLeftElevationLimit: 0.0,
      upperLeftElevationLimit: 0.0,
      lowerRightElevationLimit: 0.0,
      upperRightElevationLimit: 0.0,
      source: None,
      dataMode: Sensorlimits_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      idSensor: None,
    }
  }
}

pub struct Sensorlimits_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Sensorlimits_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_idSensorLimits(&mut self, idSensorLimits: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensorlimits_Ingest::VT_IDSENSORLIMITS, idSensorLimits);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensorlimits_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensorlimits_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_upperLeftAzimuthLimit(&mut self, upperLeftAzimuthLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_UPPERLEFTAZIMUTHLIMIT, upperLeftAzimuthLimit, 0.0);
  }
  #[inline]
  pub fn add_upperRightAzimuthLimit(&mut self, upperRightAzimuthLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_UPPERRIGHTAZIMUTHLIMIT, upperRightAzimuthLimit, 0.0);
  }
  #[inline]
  pub fn add_lowerRightAzimuthLimit(&mut self, lowerRightAzimuthLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_LOWERRIGHTAZIMUTHLIMIT, lowerRightAzimuthLimit, 0.0);
  }
  #[inline]
  pub fn add_lowerLeftAzimuthLimit(&mut self, lowerLeftAzimuthLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_LOWERLEFTAZIMUTHLIMIT, lowerLeftAzimuthLimit, 0.0);
  }
  #[inline]
  pub fn add_lowerLeftElevationLimit(&mut self, lowerLeftElevationLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_LOWERLEFTELEVATIONLIMIT, lowerLeftElevationLimit, 0.0);
  }
  #[inline]
  pub fn add_upperLeftElevationLimit(&mut self, upperLeftElevationLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_UPPERLEFTELEVATIONLIMIT, upperLeftElevationLimit, 0.0);
  }
  #[inline]
  pub fn add_lowerRightElevationLimit(&mut self, lowerRightElevationLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_LOWERRIGHTELEVATIONLIMIT, lowerRightElevationLimit, 0.0);
  }
  #[inline]
  pub fn add_upperRightElevationLimit(&mut self, upperRightElevationLimit: f64) {
    self.fbb_.push_slot::<f64>(Sensorlimits_Ingest::VT_UPPERRIGHTELEVATIONLIMIT, upperRightElevationLimit, 0.0);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensorlimits_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Sensorlimits_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<Sensorlimits_Ingest_dataMode_Enum>(Sensorlimits_Ingest::VT_DATAMODE, dataMode, Sensorlimits_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensorlimits_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensorlimits_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Sensorlimits_Ingest::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Sensorlimits_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Sensorlimits_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Sensorlimits_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Sensorlimits_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Sensorlimits_Ingest");
      ds.field("idSensorLimits", &self.idSensorLimits());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("upperLeftAzimuthLimit", &self.upperLeftAzimuthLimit());
      ds.field("upperRightAzimuthLimit", &self.upperRightAzimuthLimit());
      ds.field("lowerRightAzimuthLimit", &self.lowerRightAzimuthLimit());
      ds.field("lowerLeftAzimuthLimit", &self.lowerLeftAzimuthLimit());
      ds.field("lowerLeftElevationLimit", &self.lowerLeftElevationLimit());
      ds.field("upperLeftElevationLimit", &self.upperLeftElevationLimit());
      ds.field("lowerRightElevationLimit", &self.lowerRightElevationLimit());
      ds.field("upperRightElevationLimit", &self.upperRightElevationLimit());
      ds.field("source", &self.source());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("idSensor", &self.idSensor());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Sensorlimits_IngestT {
  pub idSensorLimits: Option<String>,
  pub classificationMarking: Option<String>,
  pub origNetwork: Option<String>,
  pub upperLeftAzimuthLimit: f64,
  pub upperRightAzimuthLimit: f64,
  pub lowerRightAzimuthLimit: f64,
  pub lowerLeftAzimuthLimit: f64,
  pub lowerLeftElevationLimit: f64,
  pub upperLeftElevationLimit: f64,
  pub lowerRightElevationLimit: f64,
  pub upperRightElevationLimit: f64,
  pub source: Option<String>,
  pub dataMode: Sensorlimits_Ingest_dataMode_Enum,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub idSensor: Option<String>,
}
impl Default for Sensorlimits_IngestT {
  fn default() -> Self {
    Self {
      idSensorLimits: None,
      classificationMarking: None,
      origNetwork: None,
      upperLeftAzimuthLimit: 0.0,
      upperRightAzimuthLimit: 0.0,
      lowerRightAzimuthLimit: 0.0,
      lowerLeftAzimuthLimit: 0.0,
      lowerLeftElevationLimit: 0.0,
      upperLeftElevationLimit: 0.0,
      lowerRightElevationLimit: 0.0,
      upperRightElevationLimit: 0.0,
      source: None,
      dataMode: Sensorlimits_Ingest_dataMode_Enum::REAL,
      createdAt: None,
      createdBy: None,
      idSensor: None,
    }
  }
}
impl Sensorlimits_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Sensorlimits_Ingest<'b>> {
    let idSensorLimits = self.idSensorLimits.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let upperLeftAzimuthLimit = self.upperLeftAzimuthLimit;
    let upperRightAzimuthLimit = self.upperRightAzimuthLimit;
    let lowerRightAzimuthLimit = self.lowerRightAzimuthLimit;
    let lowerLeftAzimuthLimit = self.lowerLeftAzimuthLimit;
    let lowerLeftElevationLimit = self.lowerLeftElevationLimit;
    let upperLeftElevationLimit = self.upperLeftElevationLimit;
    let lowerRightElevationLimit = self.lowerRightElevationLimit;
    let upperRightElevationLimit = self.upperRightElevationLimit;
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Sensorlimits_Ingest::create(_fbb, &Sensorlimits_IngestArgs{
      idSensorLimits,
      classificationMarking,
      origNetwork,
      upperLeftAzimuthLimit,
      upperRightAzimuthLimit,
      lowerRightAzimuthLimit,
      lowerLeftAzimuthLimit,
      lowerLeftElevationLimit,
      upperLeftElevationLimit,
      lowerRightElevationLimit,
      upperRightElevationLimit,
      source,
      dataMode,
      createdAt,
      createdBy,
      idSensor,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Sensorlimits_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensorlimits_ingest_unchecked`.
pub fn root_as_sensorlimits_ingest(buf: &[u8]) -> Result<Sensorlimits_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Sensorlimits_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Sensorlimits_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_sensorlimits_ingest_unchecked`.
pub fn size_prefixed_root_as_sensorlimits_ingest(buf: &[u8]) -> Result<Sensorlimits_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Sensorlimits_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Sensorlimits_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensorlimits_ingest_unchecked`.
pub fn root_as_sensorlimits_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Sensorlimits_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Sensorlimits_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Sensorlimits_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_sensorlimits_ingest_unchecked`.
pub fn size_prefixed_root_as_sensorlimits_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Sensorlimits_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Sensorlimits_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Sensorlimits_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Sensorlimits_Ingest`.
pub unsafe fn root_as_sensorlimits_ingest_unchecked(buf: &[u8]) -> Sensorlimits_Ingest {
  flatbuffers::root_unchecked::<Sensorlimits_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Sensorlimits_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Sensorlimits_Ingest`.
pub unsafe fn size_prefixed_root_as_sensorlimits_ingest_unchecked(buf: &[u8]) -> Sensorlimits_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<Sensorlimits_Ingest>(buf)
}
pub const SENSORLIMITS_INGEST_IDENTIFIER: &str = "SENS";

#[inline]
pub fn sensorlimits_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SENSORLIMITS_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn sensorlimits_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SENSORLIMITS_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_sensorlimits_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Sensorlimits_Ingest<'a>>) {
  fbb.finish(root, Some(SENSORLIMITS_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_sensorlimits_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Sensorlimits_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(SENSORLIMITS_INGEST_IDENTIFIER));
}
