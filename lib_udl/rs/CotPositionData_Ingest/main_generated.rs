// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum CotPositionData_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Schema for the CotPositionData to post.
pub struct CotPositionData_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CotPositionData_Ingest<'a> {
  type Inner = CotPositionData_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CotPositionData_Ingest<'a> {
  pub const VT_CALLSIGN: flatbuffers::VOffsetT = 4;
  pub const VT_TEAMROLE: flatbuffers::VOffsetT = 6;
  pub const VT_TEAM: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CotPositionData_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CotPositionData_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<CotPositionData_Ingest<'bldr>> {
    let mut builder = CotPositionData_IngestBuilder::new(_fbb);
    if let Some(x) = args.team { builder.add_team(x); }
    if let Some(x) = args.teamRole { builder.add_teamRole(x); }
    if let Some(x) = args.callSign { builder.add_callSign(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> CotPositionData_IngestT {
    let callSign = self.callSign().map(|x| {
      x.to_string()
    });
    let teamRole = self.teamRole().map(|x| {
      x.to_string()
    });
    let team = self.team().map(|x| {
      x.to_string()
    });
    CotPositionData_IngestT {
      callSign,
      teamRole,
      team,
    }
  }

  /// Name of the POI target Object.
  /// Example: /// Example: POI_NAME
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  #[inline]
  pub fn callSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CotPositionData_Ingest::VT_CALLSIGN, None)}
  }
  /// Team role  (Team Member| Team Lead | HQ | Sniper | Medic | Forward Observer | RTO | K9).
  /// Example: /// Example: Team Member
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  #[inline]
  pub fn teamRole(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CotPositionData_Ingest::VT_TEAMROLE, None)}
  }
  /// Description of the POI target Object.
  /// Example: /// Example: Description of the object
  /// Constraints: Minimum length = 1, Maximum length = 2147483647
  #[inline]
  pub fn team(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CotPositionData_Ingest::VT_TEAM, None)}
  }
}

impl flatbuffers::Verifiable for CotPositionData_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("callSign", Self::VT_CALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("teamRole", Self::VT_TEAMROLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("team", Self::VT_TEAM, false)?
     .finish();
    Ok(())
  }
}
pub struct CotPositionData_IngestArgs<'a> {
    pub callSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub teamRole: Option<flatbuffers::WIPOffset<&'a str>>,
    pub team: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CotPositionData_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    CotPositionData_IngestArgs {
      callSign: None,
      teamRole: None,
      team: None,
    }
  }
}

pub struct CotPositionData_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CotPositionData_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_callSign(&mut self, callSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CotPositionData_Ingest::VT_CALLSIGN, callSign);
  }
  #[inline]
  pub fn add_teamRole(&mut self, teamRole: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CotPositionData_Ingest::VT_TEAMROLE, teamRole);
  }
  #[inline]
  pub fn add_team(&mut self, team: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CotPositionData_Ingest::VT_TEAM, team);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CotPositionData_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CotPositionData_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CotPositionData_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CotPositionData_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CotPositionData_Ingest");
      ds.field("callSign", &self.callSign());
      ds.field("teamRole", &self.teamRole());
      ds.field("team", &self.team());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CotPositionData_IngestT {
  pub callSign: Option<String>,
  pub teamRole: Option<String>,
  pub team: Option<String>,
}
impl Default for CotPositionData_IngestT {
  fn default() -> Self {
    Self {
      callSign: None,
      teamRole: None,
      team: None,
    }
  }
}
impl CotPositionData_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CotPositionData_Ingest<'b>> {
    let callSign = self.callSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let teamRole = self.teamRole.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let team = self.team.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CotPositionData_Ingest::create(_fbb, &CotPositionData_IngestArgs{
      callSign,
      teamRole,
      team,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CotPositionData_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cot_position_data_ingest_unchecked`.
pub fn root_as_cot_position_data_ingest(buf: &[u8]) -> Result<CotPositionData_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CotPositionData_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CotPositionData_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_cot_position_data_ingest_unchecked`.
pub fn size_prefixed_root_as_cot_position_data_ingest(buf: &[u8]) -> Result<CotPositionData_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CotPositionData_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CotPositionData_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cot_position_data_ingest_unchecked`.
pub fn root_as_cot_position_data_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CotPositionData_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CotPositionData_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CotPositionData_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cot_position_data_ingest_unchecked`.
pub fn size_prefixed_root_as_cot_position_data_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CotPositionData_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CotPositionData_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CotPositionData_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CotPositionData_Ingest`.
pub unsafe fn root_as_cot_position_data_ingest_unchecked(buf: &[u8]) -> CotPositionData_Ingest {
  flatbuffers::root_unchecked::<CotPositionData_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CotPositionData_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CotPositionData_Ingest`.
pub unsafe fn size_prefixed_root_as_cot_position_data_ingest_unchecked(buf: &[u8]) -> CotPositionData_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<CotPositionData_Ingest>(buf)
}
pub const COT_POSITION_DATA_INGEST_IDENTIFIER: &str = "COTP";

#[inline]
pub fn cot_position_data_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, COT_POSITION_DATA_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn cot_position_data_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, COT_POSITION_DATA_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_cot_position_data_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<CotPositionData_Ingest<'a>>) {
  fbb.finish(root, Some(COT_POSITION_DATA_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_cot_position_data_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<CotPositionData_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(COT_POSITION_DATA_INGEST_IDENTIFIER));
}
