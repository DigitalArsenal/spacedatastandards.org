// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum IonoObservationScalerInfo_FullOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// The ScalerInfo record describes the person or system who interpreted the ionogram in IonoObservation.
pub struct IonoObservationScalerInfo_Full<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for IonoObservationScalerInfo_Full<'a> {
  type Inner = IonoObservationScalerInfo_Full<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> IonoObservationScalerInfo_Full<'a> {
  pub const VT_TYPE_: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_ORGANIZATION: flatbuffers::VOffsetT = 8;
  pub const VT_VERSION: flatbuffers::VOffsetT = 10;
  pub const VT_CONFIDENCESCORE: flatbuffers::VOffsetT = 12;
  pub const VT_CONFIDENCELEVEL: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    IonoObservationScalerInfo_Full { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args IonoObservationScalerInfo_FullArgs<'args>
  ) -> flatbuffers::WIPOffset<IonoObservationScalerInfo_Full<'bldr>> {
    let mut builder = IonoObservationScalerInfo_FullBuilder::new(_fbb);
    builder.add_version(args.version);
    builder.add_confidenceLevel(args.confidenceLevel);
    builder.add_confidenceScore(args.confidenceScore);
    if let Some(x) = args.organization { builder.add_organization(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> IonoObservationScalerInfo_FullT {
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let organization = self.organization().map(|x| {
      x.to_string()
    });
    let version = self.version();
    let confidenceScore = self.confidenceScore();
    let confidenceLevel = self.confidenceLevel();
    IonoObservationScalerInfo_FullT {
      type_,
      name,
      organization,
      version,
      confidenceScore,
      confidenceLevel,
    }
  }

  /// Scaler type (MANUAL, AUTOMATIC or UNKNOWN).
  /// Example: /// Example: MANUAL
  /// Constraints: Minimum length = 0, Maximum length = 9
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationScalerInfo_Full::VT_TYPE_, None)}
  }
  /// Scaler name.
  /// Example: /// Example: ARTIST-4
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationScalerInfo_Full::VT_NAME, None)}
  }
  /// Scaler organization.
  /// Example: /// Example: UML
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn organization(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(IonoObservationScalerInfo_Full::VT_ORGANIZATION, None)}
  }
  /// Scaler version.
  /// Example: /// Example: 500200.1
  /// Constraints: No constraints specified.
  #[inline]
  pub fn version(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(IonoObservationScalerInfo_Full::VT_VERSION, Some(0.0)).unwrap()}
  }
  /// Scaler confidence score.
  /// Example: /// Example: 75
  /// Constraints: No constraints specified.
  #[inline]
  pub fn confidenceScore(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(IonoObservationScalerInfo_Full::VT_CONFIDENCESCORE, Some(0)).unwrap()}
  }
  /// Scaler confidence level.
  /// Example: /// Example: 11
  /// Constraints: No constraints specified.
  #[inline]
  pub fn confidenceLevel(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(IonoObservationScalerInfo_Full::VT_CONFIDENCELEVEL, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for IonoObservationScalerInfo_Full<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("organization", Self::VT_ORGANIZATION, false)?
     .visit_field::<f64>("version", Self::VT_VERSION, false)?
     .visit_field::<i32>("confidenceScore", Self::VT_CONFIDENCESCORE, false)?
     .visit_field::<i32>("confidenceLevel", Self::VT_CONFIDENCELEVEL, false)?
     .finish();
    Ok(())
  }
}
pub struct IonoObservationScalerInfo_FullArgs<'a> {
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub organization: Option<flatbuffers::WIPOffset<&'a str>>,
    pub version: f64,
    pub confidenceScore: i32,
    pub confidenceLevel: i32,
}
impl<'a> Default for IonoObservationScalerInfo_FullArgs<'a> {
  #[inline]
  fn default() -> Self {
    IonoObservationScalerInfo_FullArgs {
      type_: None,
      name: None,
      organization: None,
      version: 0.0,
      confidenceScore: 0,
      confidenceLevel: 0,
    }
  }
}

pub struct IonoObservationScalerInfo_FullBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> IonoObservationScalerInfo_FullBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationScalerInfo_Full::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationScalerInfo_Full::VT_NAME, name);
  }
  #[inline]
  pub fn add_organization(&mut self, organization: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(IonoObservationScalerInfo_Full::VT_ORGANIZATION, organization);
  }
  #[inline]
  pub fn add_version(&mut self, version: f64) {
    self.fbb_.push_slot::<f64>(IonoObservationScalerInfo_Full::VT_VERSION, version, 0.0);
  }
  #[inline]
  pub fn add_confidenceScore(&mut self, confidenceScore: i32) {
    self.fbb_.push_slot::<i32>(IonoObservationScalerInfo_Full::VT_CONFIDENCESCORE, confidenceScore, 0);
  }
  #[inline]
  pub fn add_confidenceLevel(&mut self, confidenceLevel: i32) {
    self.fbb_.push_slot::<i32>(IonoObservationScalerInfo_Full::VT_CONFIDENCELEVEL, confidenceLevel, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> IonoObservationScalerInfo_FullBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    IonoObservationScalerInfo_FullBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<IonoObservationScalerInfo_Full<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for IonoObservationScalerInfo_Full<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("IonoObservationScalerInfo_Full");
      ds.field("type_", &self.type_());
      ds.field("name", &self.name());
      ds.field("organization", &self.organization());
      ds.field("version", &self.version());
      ds.field("confidenceScore", &self.confidenceScore());
      ds.field("confidenceLevel", &self.confidenceLevel());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct IonoObservationScalerInfo_FullT {
  pub type_: Option<String>,
  pub name: Option<String>,
  pub organization: Option<String>,
  pub version: f64,
  pub confidenceScore: i32,
  pub confidenceLevel: i32,
}
impl Default for IonoObservationScalerInfo_FullT {
  fn default() -> Self {
    Self {
      type_: None,
      name: None,
      organization: None,
      version: 0.0,
      confidenceScore: 0,
      confidenceLevel: 0,
    }
  }
}
impl IonoObservationScalerInfo_FullT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<IonoObservationScalerInfo_Full<'b>> {
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let organization = self.organization.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let version = self.version;
    let confidenceScore = self.confidenceScore;
    let confidenceLevel = self.confidenceLevel;
    IonoObservationScalerInfo_Full::create(_fbb, &IonoObservationScalerInfo_FullArgs{
      type_,
      name,
      organization,
      version,
      confidenceScore,
      confidenceLevel,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `IonoObservationScalerInfo_Full`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_scaler_info_full_unchecked`.
pub fn root_as_iono_observation_scaler_info_full(buf: &[u8]) -> Result<IonoObservationScalerInfo_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<IonoObservationScalerInfo_Full>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `IonoObservationScalerInfo_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_iono_observation_scaler_info_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_scaler_info_full(buf: &[u8]) -> Result<IonoObservationScalerInfo_Full, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<IonoObservationScalerInfo_Full>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `IonoObservationScalerInfo_Full` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_scaler_info_full_unchecked`.
pub fn root_as_iono_observation_scaler_info_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationScalerInfo_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<IonoObservationScalerInfo_Full<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `IonoObservationScalerInfo_Full` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_iono_observation_scaler_info_full_unchecked`.
pub fn size_prefixed_root_as_iono_observation_scaler_info_full_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<IonoObservationScalerInfo_Full<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<IonoObservationScalerInfo_Full<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a IonoObservationScalerInfo_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `IonoObservationScalerInfo_Full`.
pub unsafe fn root_as_iono_observation_scaler_info_full_unchecked(buf: &[u8]) -> IonoObservationScalerInfo_Full {
  flatbuffers::root_unchecked::<IonoObservationScalerInfo_Full>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed IonoObservationScalerInfo_Full and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `IonoObservationScalerInfo_Full`.
pub unsafe fn size_prefixed_root_as_iono_observation_scaler_info_full_unchecked(buf: &[u8]) -> IonoObservationScalerInfo_Full {
  flatbuffers::size_prefixed_root_unchecked::<IonoObservationScalerInfo_Full>(buf)
}
pub const IONO_OBSERVATION_SCALER_INFO_FULL_IDENTIFIER: &str = "IONO";

#[inline]
pub fn iono_observation_scaler_info_full_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_SCALER_INFO_FULL_IDENTIFIER, false)
}

#[inline]
pub fn iono_observation_scaler_info_full_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, IONO_OBSERVATION_SCALER_INFO_FULL_IDENTIFIER, true)
}

#[inline]
pub fn finish_iono_observation_scaler_info_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<IonoObservationScalerInfo_Full<'a>>) {
  fbb.finish(root, Some(IONO_OBSERVATION_SCALER_INFO_FULL_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_iono_observation_scaler_info_full_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<IonoObservationScalerInfo_Full<'a>>) {
  fbb.finish_size_prefixed(root, Some(IONO_OBSERVATION_SCALER_INFO_FULL_IDENTIFIER));
}
