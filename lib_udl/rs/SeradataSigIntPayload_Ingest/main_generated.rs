// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SERADATA_SIG_INT_PAYLOAD_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SERADATA_SIG_INT_PAYLOAD_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERADATA_SIG_INT_PAYLOAD_INGEST_DATA_MODE_ENUM: [SeradataSigIntPayload_Ingest_dataMode_Enum; 4] = [
  SeradataSigIntPayload_Ingest_dataMode_Enum::REAL,
  SeradataSigIntPayload_Ingest_dataMode_Enum::TEST,
  SeradataSigIntPayload_Ingest_dataMode_Enum::SIMULATED,
  SeradataSigIntPayload_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SeradataSigIntPayload_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SeradataSigIntPayload_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SeradataSigIntPayload_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SeradataSigIntPayload_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SeradataSigIntPayload_Ingest_dataMode_Enum {
    type Output = SeradataSigIntPayload_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SeradataSigIntPayload_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SeradataSigIntPayload_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SeradataSigIntPayload_Ingest_dataMode_Enum {}
pub enum SeradataSigIntPayload_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Details for an sigint payload from  Seradata.
pub struct SeradataSigIntPayload_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SeradataSigIntPayload_Ingest<'a> {
  type Inner = SeradataSigIntPayload_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SeradataSigIntPayload_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_SPACECRAFTID: flatbuffers::VOffsetT = 8;
  pub const VT_IDSENSOR: flatbuffers::VOffsetT = 10;
  pub const VT_HOSTEDFORCOMPANYORGID: flatbuffers::VOffsetT = 12;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 14;
  pub const VT_TYPE_: flatbuffers::VOffsetT = 16;
  pub const VT_SWATHWIDTH: flatbuffers::VOffsetT = 18;
  pub const VT_GROUNDSTATIONS: flatbuffers::VOffsetT = 20;
  pub const VT_GROUNDSTATIONLOCATIONS: flatbuffers::VOffsetT = 22;
  pub const VT_FREQUENCYCOVERAGE: flatbuffers::VOffsetT = 24;
  pub const VT_POSITIONALACCURACY: flatbuffers::VOffsetT = 26;
  pub const VT_INTERCEPTPARAMETERS: flatbuffers::VOffsetT = 28;
  pub const VT_NAME: flatbuffers::VOffsetT = 30;
  pub const VT_NOTES: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 38;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 40;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 42;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SeradataSigIntPayload_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SeradataSigIntPayload_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<SeradataSigIntPayload_Ingest<'bldr>> {
    let mut builder = SeradataSigIntPayload_IngestBuilder::new(_fbb);
    builder.add_swathWidth(args.swathWidth);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.interceptParameters { builder.add_interceptParameters(x); }
    if let Some(x) = args.positionalAccuracy { builder.add_positionalAccuracy(x); }
    if let Some(x) = args.frequencyCoverage { builder.add_frequencyCoverage(x); }
    if let Some(x) = args.groundStationLocations { builder.add_groundStationLocations(x); }
    if let Some(x) = args.groundStations { builder.add_groundStations(x); }
    if let Some(x) = args.type_ { builder.add_type_(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.hostedForCompanyOrgId { builder.add_hostedForCompanyOrgId(x); }
    if let Some(x) = args.idSensor { builder.add_idSensor(x); }
    if let Some(x) = args.spacecraftId { builder.add_spacecraftId(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> SeradataSigIntPayload_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let spacecraftId = self.spacecraftId().map(|x| {
      x.to_string()
    });
    let idSensor = self.idSensor().map(|x| {
      x.to_string()
    });
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let type_ = self.type_().map(|x| {
      x.to_string()
    });
    let swathWidth = self.swathWidth();
    let groundStations = self.groundStations().map(|x| {
      x.to_string()
    });
    let groundStationLocations = self.groundStationLocations().map(|x| {
      x.to_string()
    });
    let frequencyCoverage = self.frequencyCoverage().map(|x| {
      x.to_string()
    });
    let positionalAccuracy = self.positionalAccuracy().map(|x| {
      x.to_string()
    });
    let interceptParameters = self.interceptParameters().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    SeradataSigIntPayload_IngestT {
      id,
      classificationMarking,
      spacecraftId,
      idSensor,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      type_,
      swathWidth,
      groundStations,
      groundStationLocations,
      frequencyCoverage,
      positionalAccuracy,
      interceptParameters,
      name,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATASIGINTPAYLOAD-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn spacecraftId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_SPACECRAFTID, None)}
  }
  /// UUID of the Sensor record.
  /// Example: /// Example: 0c5ec9c0-10cd-1d35-c46b-3764c4d76e13
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idSensor(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_IDSENSOR, None)}
  }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn hostedForCompanyOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_HOSTEDFORCOMPANYORGID, None)}
  }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_MANUFACTURERORGID, None)}
  }
  /// SIGINT Payload type, e.g. Comint, Elint, etc.
  /// Example: /// Example: Comint
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn type_(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_TYPE_, None)}
  }
  /// Swath Width in kilometers.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn swathWidth(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataSigIntPayload_Ingest::VT_SWATHWIDTH, Some(0.0)).unwrap()}
  }
  /// Ground Station info for this payload.
  /// Example: /// Example: groundStations
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn groundStations(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_GROUNDSTATIONS, None)}
  }
  /// Ground Station Locations for this payload.
  /// Example: /// Example: groundStationLocations
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn groundStationLocations(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_GROUNDSTATIONLOCATIONS, None)}
  }
  /// Frequency coverage for this payload.
  /// Example: /// Example: 1.1 to 3.3
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn frequencyCoverage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_FREQUENCYCOVERAGE, None)}
  }
  /// Positional Accuracy for this payload.
  /// Example: /// Example: positionalAccuracy
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn positionalAccuracy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_POSITIONALACCURACY, None)}
  }
  /// Intercept parameters.
  /// Example: /// Example: interceptParameters
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn interceptParameters(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_INTERCEPTPARAMETERS, None)}
  }
  /// Sensor name from Seradata.
  /// Example: /// Example: Sensor Name
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_NAME, None)}
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_NOTES, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataSigIntPayload_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SeradataSigIntPayload_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SeradataSigIntPayload_Ingest_dataMode_Enum>(SeradataSigIntPayload_Ingest::VT_DATAMODE, Some(SeradataSigIntPayload_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SeradataSigIntPayload_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("spacecraftId", Self::VT_SPACECRAFTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idSensor", Self::VT_IDSENSOR, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostedForCompanyOrgId", Self::VT_HOSTEDFORCOMPANYORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("type_", Self::VT_TYPE_, false)?
     .visit_field::<f64>("swathWidth", Self::VT_SWATHWIDTH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("groundStations", Self::VT_GROUNDSTATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("groundStationLocations", Self::VT_GROUNDSTATIONLOCATIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("frequencyCoverage", Self::VT_FREQUENCYCOVERAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("positionalAccuracy", Self::VT_POSITIONALACCURACY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("interceptParameters", Self::VT_INTERCEPTPARAMETERS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<SeradataSigIntPayload_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct SeradataSigIntPayload_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub spacecraftId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idSensor: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostedForCompanyOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub type_: Option<flatbuffers::WIPOffset<&'a str>>,
    pub swathWidth: f64,
    pub groundStations: Option<flatbuffers::WIPOffset<&'a str>>,
    pub groundStationLocations: Option<flatbuffers::WIPOffset<&'a str>>,
    pub frequencyCoverage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub positionalAccuracy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub interceptParameters: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SeradataSigIntPayload_Ingest_dataMode_Enum,
}
impl<'a> Default for SeradataSigIntPayload_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    SeradataSigIntPayload_IngestArgs {
      id: None,
      classificationMarking: None,
      spacecraftId: None,
      idSensor: None,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      type_: None,
      swathWidth: 0.0,
      groundStations: None,
      groundStationLocations: None,
      frequencyCoverage: None,
      positionalAccuracy: None,
      interceptParameters: None,
      name: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataSigIntPayload_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct SeradataSigIntPayload_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SeradataSigIntPayload_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_spacecraftId(&mut self, spacecraftId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_SPACECRAFTID, spacecraftId);
  }
  #[inline]
  pub fn add_idSensor(&mut self, idSensor: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_IDSENSOR, idSensor);
  }
  #[inline]
  pub fn add_hostedForCompanyOrgId(&mut self, hostedForCompanyOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_type_(&mut self, type_: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_TYPE_, type_);
  }
  #[inline]
  pub fn add_swathWidth(&mut self, swathWidth: f64) {
    self.fbb_.push_slot::<f64>(SeradataSigIntPayload_Ingest::VT_SWATHWIDTH, swathWidth, 0.0);
  }
  #[inline]
  pub fn add_groundStations(&mut self, groundStations: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_GROUNDSTATIONS, groundStations);
  }
  #[inline]
  pub fn add_groundStationLocations(&mut self, groundStationLocations: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_GROUNDSTATIONLOCATIONS, groundStationLocations);
  }
  #[inline]
  pub fn add_frequencyCoverage(&mut self, frequencyCoverage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_FREQUENCYCOVERAGE, frequencyCoverage);
  }
  #[inline]
  pub fn add_positionalAccuracy(&mut self, positionalAccuracy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_POSITIONALACCURACY, positionalAccuracy);
  }
  #[inline]
  pub fn add_interceptParameters(&mut self, interceptParameters: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_INTERCEPTPARAMETERS, interceptParameters);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_NAME, name);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataSigIntPayload_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SeradataSigIntPayload_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<SeradataSigIntPayload_Ingest_dataMode_Enum>(SeradataSigIntPayload_Ingest::VT_DATAMODE, dataMode, SeradataSigIntPayload_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SeradataSigIntPayload_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SeradataSigIntPayload_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SeradataSigIntPayload_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SeradataSigIntPayload_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SeradataSigIntPayload_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("spacecraftId", &self.spacecraftId());
      ds.field("idSensor", &self.idSensor());
      ds.field("hostedForCompanyOrgId", &self.hostedForCompanyOrgId());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("type_", &self.type_());
      ds.field("swathWidth", &self.swathWidth());
      ds.field("groundStations", &self.groundStations());
      ds.field("groundStationLocations", &self.groundStationLocations());
      ds.field("frequencyCoverage", &self.frequencyCoverage());
      ds.field("positionalAccuracy", &self.positionalAccuracy());
      ds.field("interceptParameters", &self.interceptParameters());
      ds.field("name", &self.name());
      ds.field("notes", &self.notes());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SeradataSigIntPayload_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub spacecraftId: Option<String>,
  pub idSensor: Option<String>,
  pub hostedForCompanyOrgId: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub type_: Option<String>,
  pub swathWidth: f64,
  pub groundStations: Option<String>,
  pub groundStationLocations: Option<String>,
  pub frequencyCoverage: Option<String>,
  pub positionalAccuracy: Option<String>,
  pub interceptParameters: Option<String>,
  pub name: Option<String>,
  pub notes: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: SeradataSigIntPayload_Ingest_dataMode_Enum,
}
impl Default for SeradataSigIntPayload_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      spacecraftId: None,
      idSensor: None,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      type_: None,
      swathWidth: 0.0,
      groundStations: None,
      groundStationLocations: None,
      frequencyCoverage: None,
      positionalAccuracy: None,
      interceptParameters: None,
      name: None,
      notes: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataSigIntPayload_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl SeradataSigIntPayload_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SeradataSigIntPayload_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let spacecraftId = self.spacecraftId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idSensor = self.idSensor.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let type_ = self.type_.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let swathWidth = self.swathWidth;
    let groundStations = self.groundStations.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let groundStationLocations = self.groundStationLocations.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let frequencyCoverage = self.frequencyCoverage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let positionalAccuracy = self.positionalAccuracy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let interceptParameters = self.interceptParameters.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    SeradataSigIntPayload_Ingest::create(_fbb, &SeradataSigIntPayload_IngestArgs{
      id,
      classificationMarking,
      spacecraftId,
      idSensor,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      type_,
      swathWidth,
      groundStations,
      groundStationLocations,
      frequencyCoverage,
      positionalAccuracy,
      interceptParameters,
      name,
      notes,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SeradataSigIntPayload_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_sig_int_payload_ingest_unchecked`.
pub fn root_as_seradata_sig_int_payload_ingest(buf: &[u8]) -> Result<SeradataSigIntPayload_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SeradataSigIntPayload_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SeradataSigIntPayload_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_seradata_sig_int_payload_ingest_unchecked`.
pub fn size_prefixed_root_as_seradata_sig_int_payload_ingest(buf: &[u8]) -> Result<SeradataSigIntPayload_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SeradataSigIntPayload_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SeradataSigIntPayload_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_sig_int_payload_ingest_unchecked`.
pub fn root_as_seradata_sig_int_payload_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataSigIntPayload_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SeradataSigIntPayload_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SeradataSigIntPayload_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_sig_int_payload_ingest_unchecked`.
pub fn size_prefixed_root_as_seradata_sig_int_payload_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataSigIntPayload_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SeradataSigIntPayload_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SeradataSigIntPayload_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SeradataSigIntPayload_Ingest`.
pub unsafe fn root_as_seradata_sig_int_payload_ingest_unchecked(buf: &[u8]) -> SeradataSigIntPayload_Ingest {
  flatbuffers::root_unchecked::<SeradataSigIntPayload_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SeradataSigIntPayload_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SeradataSigIntPayload_Ingest`.
pub unsafe fn size_prefixed_root_as_seradata_sig_int_payload_ingest_unchecked(buf: &[u8]) -> SeradataSigIntPayload_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<SeradataSigIntPayload_Ingest>(buf)
}
pub const SERADATA_SIG_INT_PAYLOAD_INGEST_IDENTIFIER: &str = "SERA";

#[inline]
pub fn seradata_sig_int_payload_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_SIG_INT_PAYLOAD_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn seradata_sig_int_payload_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_SIG_INT_PAYLOAD_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_seradata_sig_int_payload_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SeradataSigIntPayload_Ingest<'a>>) {
  fbb.finish(root, Some(SERADATA_SIG_INT_PAYLOAD_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_seradata_sig_int_payload_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SeradataSigIntPayload_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(SERADATA_SIG_INT_PAYLOAD_INGEST_IDENTIFIER));
}
