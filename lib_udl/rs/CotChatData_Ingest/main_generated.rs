// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum CotChatData_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Schema for the CotChatData to post.
pub struct CotChatData_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CotChatData_Ingest<'a> {
  type Inner = CotChatData_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CotChatData_Ingest<'a> {
  pub const VT_CHATROOM: flatbuffers::VOffsetT = 4;
  pub const VT_CHATSENDERCALLSIGN: flatbuffers::VOffsetT = 6;
  pub const VT_CHATMSG: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CotChatData_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CotChatData_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<CotChatData_Ingest<'bldr>> {
    let mut builder = CotChatData_IngestBuilder::new(_fbb);
    if let Some(x) = args.chatMsg { builder.add_chatMsg(x); }
    if let Some(x) = args.chatSenderCallSign { builder.add_chatSenderCallSign(x); }
    if let Some(x) = args.chatRoom { builder.add_chatRoom(x); }
    builder.finish()
  }

  pub fn unpack(&self) -> CotChatData_IngestT {
    let chatRoom = self.chatRoom().map(|x| {
      x.to_string()
    });
    let chatSenderCallSign = self.chatSenderCallSign().map(|x| {
      x.to_string()
    });
    let chatMsg = self.chatMsg().map(|x| {
      x.to_string()
    });
    CotChatData_IngestT {
      chatRoom,
      chatSenderCallSign,
      chatMsg,
    }
  }

  /// Chat room name to send chat message to.
  /// Example: /// Example: All Chat Rooms
  /// Constraints: No constraints specified.
  #[inline]
  pub fn chatRoom(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CotChatData_Ingest::VT_CHATROOM, None)}
  }
  /// Callsign of chat sender.
  /// Example: /// Example: Pebble
  /// Constraints: No constraints specified.
  #[inline]
  pub fn chatSenderCallSign(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CotChatData_Ingest::VT_CHATSENDERCALLSIGN, None)}
  }
  /// Contents of a chat message.
  /// Example: /// Example: Mission is go
  /// Constraints: No constraints specified.
  #[inline]
  pub fn chatMsg(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(CotChatData_Ingest::VT_CHATMSG, None)}
  }
}

impl flatbuffers::Verifiable for CotChatData_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("chatRoom", Self::VT_CHATROOM, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("chatSenderCallSign", Self::VT_CHATSENDERCALLSIGN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("chatMsg", Self::VT_CHATMSG, false)?
     .finish();
    Ok(())
  }
}
pub struct CotChatData_IngestArgs<'a> {
    pub chatRoom: Option<flatbuffers::WIPOffset<&'a str>>,
    pub chatSenderCallSign: Option<flatbuffers::WIPOffset<&'a str>>,
    pub chatMsg: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for CotChatData_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    CotChatData_IngestArgs {
      chatRoom: None,
      chatSenderCallSign: None,
      chatMsg: None,
    }
  }
}

pub struct CotChatData_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CotChatData_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_chatRoom(&mut self, chatRoom: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CotChatData_Ingest::VT_CHATROOM, chatRoom);
  }
  #[inline]
  pub fn add_chatSenderCallSign(&mut self, chatSenderCallSign: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CotChatData_Ingest::VT_CHATSENDERCALLSIGN, chatSenderCallSign);
  }
  #[inline]
  pub fn add_chatMsg(&mut self, chatMsg: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CotChatData_Ingest::VT_CHATMSG, chatMsg);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CotChatData_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CotChatData_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CotChatData_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CotChatData_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CotChatData_Ingest");
      ds.field("chatRoom", &self.chatRoom());
      ds.field("chatSenderCallSign", &self.chatSenderCallSign());
      ds.field("chatMsg", &self.chatMsg());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct CotChatData_IngestT {
  pub chatRoom: Option<String>,
  pub chatSenderCallSign: Option<String>,
  pub chatMsg: Option<String>,
}
impl Default for CotChatData_IngestT {
  fn default() -> Self {
    Self {
      chatRoom: None,
      chatSenderCallSign: None,
      chatMsg: None,
    }
  }
}
impl CotChatData_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<CotChatData_Ingest<'b>> {
    let chatRoom = self.chatRoom.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let chatSenderCallSign = self.chatSenderCallSign.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let chatMsg = self.chatMsg.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    CotChatData_Ingest::create(_fbb, &CotChatData_IngestArgs{
      chatRoom,
      chatSenderCallSign,
      chatMsg,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `CotChatData_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cot_chat_data_ingest_unchecked`.
pub fn root_as_cot_chat_data_ingest(buf: &[u8]) -> Result<CotChatData_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<CotChatData_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `CotChatData_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_cot_chat_data_ingest_unchecked`.
pub fn size_prefixed_root_as_cot_chat_data_ingest(buf: &[u8]) -> Result<CotChatData_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<CotChatData_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `CotChatData_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cot_chat_data_ingest_unchecked`.
pub fn root_as_cot_chat_data_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CotChatData_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<CotChatData_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `CotChatData_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_cot_chat_data_ingest_unchecked`.
pub fn size_prefixed_root_as_cot_chat_data_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<CotChatData_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<CotChatData_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a CotChatData_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `CotChatData_Ingest`.
pub unsafe fn root_as_cot_chat_data_ingest_unchecked(buf: &[u8]) -> CotChatData_Ingest {
  flatbuffers::root_unchecked::<CotChatData_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed CotChatData_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `CotChatData_Ingest`.
pub unsafe fn size_prefixed_root_as_cot_chat_data_ingest_unchecked(buf: &[u8]) -> CotChatData_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<CotChatData_Ingest>(buf)
}
pub const COT_CHAT_DATA_INGEST_IDENTIFIER: &str = "COTC";

#[inline]
pub fn cot_chat_data_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, COT_CHAT_DATA_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn cot_chat_data_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, COT_CHAT_DATA_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_cot_chat_data_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<CotChatData_Ingest<'a>>) {
  fbb.finish(root, Some(COT_CHAT_DATA_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_cot_chat_data_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<CotChatData_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(COT_CHAT_DATA_INGEST_IDENTIFIER));
}
