// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SERADATA_NAVIGATION_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SERADATA_NAVIGATION_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SERADATA_NAVIGATION_INGEST_DATA_MODE_ENUM: [SeradataNavigation_Ingest_dataMode_Enum; 4] = [
  SeradataNavigation_Ingest_dataMode_Enum::REAL,
  SeradataNavigation_Ingest_dataMode_Enum::TEST,
  SeradataNavigation_Ingest_dataMode_Enum::SIMULATED,
  SeradataNavigation_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SeradataNavigation_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl SeradataNavigation_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SeradataNavigation_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SeradataNavigation_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SeradataNavigation_Ingest_dataMode_Enum {
    type Output = SeradataNavigation_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SeradataNavigation_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SeradataNavigation_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SeradataNavigation_Ingest_dataMode_Enum {}
pub enum SeradataNavigation_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Details for a navigation payload from  Seradata.
pub struct SeradataNavigation_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SeradataNavigation_Ingest<'a> {
  type Inner = SeradataNavigation_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SeradataNavigation_Ingest<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 6;
  pub const VT_IDNAVIGATION: flatbuffers::VOffsetT = 8;
  pub const VT_SPACECRAFTID: flatbuffers::VOffsetT = 10;
  pub const VT_HOSTEDFORCOMPANYORGID: flatbuffers::VOffsetT = 12;
  pub const VT_MANUFACTURERORGID: flatbuffers::VOffsetT = 14;
  pub const VT_PAYLOADTYPE: flatbuffers::VOffsetT = 16;
  pub const VT_MODES: flatbuffers::VOffsetT = 18;
  pub const VT_MODEFREQUENCY: flatbuffers::VOffsetT = 20;
  pub const VT_LOCATIONACCURACY: flatbuffers::VOffsetT = 22;
  pub const VT_PARTNERSPACECRAFTID: flatbuffers::VOffsetT = 24;
  pub const VT_AREACOVERAGE: flatbuffers::VOffsetT = 26;
  pub const VT_NOTES: flatbuffers::VOffsetT = 28;
  pub const VT_NAME: flatbuffers::VOffsetT = 30;
  pub const VT_CLOCKTYPE: flatbuffers::VOffsetT = 32;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 34;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 36;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 38;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 40;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 42;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SeradataNavigation_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SeradataNavigation_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<SeradataNavigation_Ingest<'bldr>> {
    let mut builder = SeradataNavigation_IngestBuilder::new(_fbb);
    builder.add_locationAccuracy(args.locationAccuracy);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.clockType { builder.add_clockType(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    if let Some(x) = args.notes { builder.add_notes(x); }
    if let Some(x) = args.areaCoverage { builder.add_areaCoverage(x); }
    if let Some(x) = args.partnerSpacecraftId { builder.add_partnerSpacecraftId(x); }
    if let Some(x) = args.modeFrequency { builder.add_modeFrequency(x); }
    if let Some(x) = args.modes { builder.add_modes(x); }
    if let Some(x) = args.payloadType { builder.add_payloadType(x); }
    if let Some(x) = args.manufacturerOrgId { builder.add_manufacturerOrgId(x); }
    if let Some(x) = args.hostedForCompanyOrgId { builder.add_hostedForCompanyOrgId(x); }
    if let Some(x) = args.spacecraftId { builder.add_spacecraftId(x); }
    if let Some(x) = args.idNavigation { builder.add_idNavigation(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> SeradataNavigation_IngestT {
    let id = self.id().map(|x| {
      x.to_string()
    });
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let idNavigation = self.idNavigation().map(|x| {
      x.to_string()
    });
    let spacecraftId = self.spacecraftId().map(|x| {
      x.to_string()
    });
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId().map(|x| {
      x.to_string()
    });
    let manufacturerOrgId = self.manufacturerOrgId().map(|x| {
      x.to_string()
    });
    let payloadType = self.payloadType().map(|x| {
      x.to_string()
    });
    let modes = self.modes().map(|x| {
      x.to_string()
    });
    let modeFrequency = self.modeFrequency().map(|x| {
      x.to_string()
    });
    let locationAccuracy = self.locationAccuracy();
    let partnerSpacecraftId = self.partnerSpacecraftId().map(|x| {
      x.to_string()
    });
    let areaCoverage = self.areaCoverage().map(|x| {
      x.to_string()
    });
    let notes = self.notes().map(|x| {
      x.to_string()
    });
    let name = self.name().map(|x| {
      x.to_string()
    });
    let clockType = self.clockType().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    SeradataNavigation_IngestT {
      id,
      classificationMarking,
      idNavigation,
      spacecraftId,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      payloadType,
      modes,
      modeFrequency,
      locationAccuracy,
      partnerSpacecraftId,
      areaCoverage,
      notes,
      name,
      clockType,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    }
  }

  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: SERADATANAVIGATION-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_ID, None)}
  }
  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// UUID of the parent Navigation record.
  /// Example: /// Example: idNavigation
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn idNavigation(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_IDNAVIGATION, None)}
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: spacecraftId
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn spacecraftId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_SPACECRAFTID, None)}
  }
  /// Hosted for company/Organization Id.
  /// Example: /// Example: hostedForCompanyOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn hostedForCompanyOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_HOSTEDFORCOMPANYORGID, None)}
  }
  /// Manufacturer Organization Id.
  /// Example: /// Example: manufacturerOrgId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn manufacturerOrgId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_MANUFACTURERORGID, None)}
  }
  /// Navigation payload type, e.g. WAAS, GAGAN, etc.
  /// Example: /// Example: WAAS
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn payloadType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_PAYLOADTYPE, None)}
  }
  /// Modes of operation.
  /// Example: /// Example: Military
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn modes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_MODES, None)}
  }
  /// Frequency for this payload.
  /// Example: /// Example: 1234
  /// Constraints: Minimum length = 0, Maximum length = 100
  #[inline]
  pub fn modeFrequency(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_MODEFREQUENCY, None)}
  }
  /// Location accuracy in meters.
  /// Example: /// Example: 1.23
  /// Constraints: No constraints specified.
  #[inline]
  pub fn locationAccuracy(&self) -> f64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f64>(SeradataNavigation_Ingest::VT_LOCATIONACCURACY, Some(0.0)).unwrap()}
  }
  /// Seradata ID of the spacecraft (SeradataSpacecraftDetails ID).
  /// Example: /// Example: partnerSpacecraftId
  /// Constraints: Minimum length = 0, Maximum length = 36
  #[inline]
  pub fn partnerSpacecraftId(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_PARTNERSPACECRAFTID, None)}
  }
  /// Area of coverage, e.g. Worldwide, India, etc.
  /// Example: /// Example: Worldwide
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn areaCoverage(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_AREACOVERAGE, None)}
  }
  /// Payload notes.
  /// Example: /// Example: Sample Notes
  /// Constraints: Minimum length = 0, Maximum length = 2147483647
  #[inline]
  pub fn notes(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_NOTES, None)}
  }
  /// Sensor name from Seradata, e.g. WAAS GEO-5, etc.
  /// Example: /// Example: WAAS GEO-5
  /// Constraints: Minimum length = 0, Maximum length = 50
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_NAME, None)}
  }
  /// Type of clock, e.g. Rubidium, Hydrogen Maser, etc.
  /// Example: /// Example: Rubidium
  /// Constraints: Minimum length = 0, Maximum length = 20
  #[inline]
  pub fn clockType(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_CLOCKTYPE, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_CREATEDAT, None)}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_CREATEDBY, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_ORIGIN, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(SeradataNavigation_Ingest::VT_ORIGNETWORK, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> SeradataNavigation_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<SeradataNavigation_Ingest_dataMode_Enum>(SeradataNavigation_Ingest::VT_DATAMODE, Some(SeradataNavigation_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SeradataNavigation_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("idNavigation", Self::VT_IDNAVIGATION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("spacecraftId", Self::VT_SPACECRAFTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("hostedForCompanyOrgId", Self::VT_HOSTEDFORCOMPANYORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("manufacturerOrgId", Self::VT_MANUFACTURERORGID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("payloadType", Self::VT_PAYLOADTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("modes", Self::VT_MODES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("modeFrequency", Self::VT_MODEFREQUENCY, false)?
     .visit_field::<f64>("locationAccuracy", Self::VT_LOCATIONACCURACY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("partnerSpacecraftId", Self::VT_PARTNERSPACECRAFTID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("areaCoverage", Self::VT_AREACOVERAGE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("notes", Self::VT_NOTES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("clockType", Self::VT_CLOCKTYPE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .visit_field::<SeradataNavigation_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .finish();
    Ok(())
  }
}
pub struct SeradataNavigation_IngestArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub idNavigation: Option<flatbuffers::WIPOffset<&'a str>>,
    pub spacecraftId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub hostedForCompanyOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub manufacturerOrgId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub payloadType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub modes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub modeFrequency: Option<flatbuffers::WIPOffset<&'a str>>,
    pub locationAccuracy: f64,
    pub partnerSpacecraftId: Option<flatbuffers::WIPOffset<&'a str>>,
    pub areaCoverage: Option<flatbuffers::WIPOffset<&'a str>>,
    pub notes: Option<flatbuffers::WIPOffset<&'a str>>,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub clockType: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: SeradataNavigation_Ingest_dataMode_Enum,
}
impl<'a> Default for SeradataNavigation_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    SeradataNavigation_IngestArgs {
      id: None,
      classificationMarking: None,
      idNavigation: None,
      spacecraftId: None,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      payloadType: None,
      modes: None,
      modeFrequency: None,
      locationAccuracy: 0.0,
      partnerSpacecraftId: None,
      areaCoverage: None,
      notes: None,
      name: None,
      clockType: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataNavigation_Ingest_dataMode_Enum::REAL,
    }
  }
}

pub struct SeradataNavigation_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SeradataNavigation_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_idNavigation(&mut self, idNavigation: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_IDNAVIGATION, idNavigation);
  }
  #[inline]
  pub fn add_spacecraftId(&mut self, spacecraftId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_SPACECRAFTID, spacecraftId);
  }
  #[inline]
  pub fn add_hostedForCompanyOrgId(&mut self, hostedForCompanyOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_HOSTEDFORCOMPANYORGID, hostedForCompanyOrgId);
  }
  #[inline]
  pub fn add_manufacturerOrgId(&mut self, manufacturerOrgId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_MANUFACTURERORGID, manufacturerOrgId);
  }
  #[inline]
  pub fn add_payloadType(&mut self, payloadType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_PAYLOADTYPE, payloadType);
  }
  #[inline]
  pub fn add_modes(&mut self, modes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_MODES, modes);
  }
  #[inline]
  pub fn add_modeFrequency(&mut self, modeFrequency: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_MODEFREQUENCY, modeFrequency);
  }
  #[inline]
  pub fn add_locationAccuracy(&mut self, locationAccuracy: f64) {
    self.fbb_.push_slot::<f64>(SeradataNavigation_Ingest::VT_LOCATIONACCURACY, locationAccuracy, 0.0);
  }
  #[inline]
  pub fn add_partnerSpacecraftId(&mut self, partnerSpacecraftId: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_PARTNERSPACECRAFTID, partnerSpacecraftId);
  }
  #[inline]
  pub fn add_areaCoverage(&mut self, areaCoverage: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_AREACOVERAGE, areaCoverage);
  }
  #[inline]
  pub fn add_notes(&mut self, notes: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_NOTES, notes);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_NAME, name);
  }
  #[inline]
  pub fn add_clockType(&mut self, clockType: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_CLOCKTYPE, clockType);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SeradataNavigation_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: SeradataNavigation_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<SeradataNavigation_Ingest_dataMode_Enum>(SeradataNavigation_Ingest::VT_DATAMODE, dataMode, SeradataNavigation_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SeradataNavigation_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SeradataNavigation_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SeradataNavigation_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SeradataNavigation_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SeradataNavigation_Ingest");
      ds.field("id", &self.id());
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("idNavigation", &self.idNavigation());
      ds.field("spacecraftId", &self.spacecraftId());
      ds.field("hostedForCompanyOrgId", &self.hostedForCompanyOrgId());
      ds.field("manufacturerOrgId", &self.manufacturerOrgId());
      ds.field("payloadType", &self.payloadType());
      ds.field("modes", &self.modes());
      ds.field("modeFrequency", &self.modeFrequency());
      ds.field("locationAccuracy", &self.locationAccuracy());
      ds.field("partnerSpacecraftId", &self.partnerSpacecraftId());
      ds.field("areaCoverage", &self.areaCoverage());
      ds.field("notes", &self.notes());
      ds.field("name", &self.name());
      ds.field("clockType", &self.clockType());
      ds.field("createdAt", &self.createdAt());
      ds.field("createdBy", &self.createdBy());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("origNetwork", &self.origNetwork());
      ds.field("dataMode", &self.dataMode());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct SeradataNavigation_IngestT {
  pub id: Option<String>,
  pub classificationMarking: Option<String>,
  pub idNavigation: Option<String>,
  pub spacecraftId: Option<String>,
  pub hostedForCompanyOrgId: Option<String>,
  pub manufacturerOrgId: Option<String>,
  pub payloadType: Option<String>,
  pub modes: Option<String>,
  pub modeFrequency: Option<String>,
  pub locationAccuracy: f64,
  pub partnerSpacecraftId: Option<String>,
  pub areaCoverage: Option<String>,
  pub notes: Option<String>,
  pub name: Option<String>,
  pub clockType: Option<String>,
  pub createdAt: Option<String>,
  pub createdBy: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub origNetwork: Option<String>,
  pub dataMode: SeradataNavigation_Ingest_dataMode_Enum,
}
impl Default for SeradataNavigation_IngestT {
  fn default() -> Self {
    Self {
      id: None,
      classificationMarking: None,
      idNavigation: None,
      spacecraftId: None,
      hostedForCompanyOrgId: None,
      manufacturerOrgId: None,
      payloadType: None,
      modes: None,
      modeFrequency: None,
      locationAccuracy: 0.0,
      partnerSpacecraftId: None,
      areaCoverage: None,
      notes: None,
      name: None,
      clockType: None,
      createdAt: None,
      createdBy: None,
      source: None,
      origin: None,
      origNetwork: None,
      dataMode: SeradataNavigation_Ingest_dataMode_Enum::REAL,
    }
  }
}
impl SeradataNavigation_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<SeradataNavigation_Ingest<'b>> {
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let idNavigation = self.idNavigation.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let spacecraftId = self.spacecraftId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let hostedForCompanyOrgId = self.hostedForCompanyOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let manufacturerOrgId = self.manufacturerOrgId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let payloadType = self.payloadType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let modes = self.modes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let modeFrequency = self.modeFrequency.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let locationAccuracy = self.locationAccuracy;
    let partnerSpacecraftId = self.partnerSpacecraftId.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let areaCoverage = self.areaCoverage.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let notes = self.notes.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let name = self.name.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let clockType = self.clockType.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    SeradataNavigation_Ingest::create(_fbb, &SeradataNavigation_IngestArgs{
      id,
      classificationMarking,
      idNavigation,
      spacecraftId,
      hostedForCompanyOrgId,
      manufacturerOrgId,
      payloadType,
      modes,
      modeFrequency,
      locationAccuracy,
      partnerSpacecraftId,
      areaCoverage,
      notes,
      name,
      clockType,
      createdAt,
      createdBy,
      source,
      origin,
      origNetwork,
      dataMode,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `SeradataNavigation_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_navigation_ingest_unchecked`.
pub fn root_as_seradata_navigation_ingest(buf: &[u8]) -> Result<SeradataNavigation_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<SeradataNavigation_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `SeradataNavigation_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_seradata_navigation_ingest_unchecked`.
pub fn size_prefixed_root_as_seradata_navigation_ingest(buf: &[u8]) -> Result<SeradataNavigation_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<SeradataNavigation_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `SeradataNavigation_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_navigation_ingest_unchecked`.
pub fn root_as_seradata_navigation_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataNavigation_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<SeradataNavigation_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `SeradataNavigation_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_seradata_navigation_ingest_unchecked`.
pub fn size_prefixed_root_as_seradata_navigation_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<SeradataNavigation_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<SeradataNavigation_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a SeradataNavigation_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `SeradataNavigation_Ingest`.
pub unsafe fn root_as_seradata_navigation_ingest_unchecked(buf: &[u8]) -> SeradataNavigation_Ingest {
  flatbuffers::root_unchecked::<SeradataNavigation_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed SeradataNavigation_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `SeradataNavigation_Ingest`.
pub unsafe fn size_prefixed_root_as_seradata_navigation_ingest_unchecked(buf: &[u8]) -> SeradataNavigation_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<SeradataNavigation_Ingest>(buf)
}
pub const SERADATA_NAVIGATION_INGEST_IDENTIFIER: &str = "SERA";

#[inline]
pub fn seradata_navigation_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_NAVIGATION_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn seradata_navigation_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, SERADATA_NAVIGATION_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_seradata_navigation_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<SeradataNavigation_Ingest<'a>>) {
  fbb.finish(root, Some(SERADATA_NAVIGATION_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_seradata_navigation_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<SeradataNavigation_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(SERADATA_NAVIGATION_INGEST_IDENTIFIER));
}
