// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_MTI_INGEST_DATA_MODE_ENUM: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_MTI_INGEST_DATA_MODE_ENUM: i8 = 3;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_MTI_INGEST_DATA_MODE_ENUM: [Mti_Ingest_dataMode_Enum; 4] = [
  Mti_Ingest_dataMode_Enum::REAL,
  Mti_Ingest_dataMode_Enum::TEST,
  Mti_Ingest_dataMode_Enum::SIMULATED,
  Mti_Ingest_dataMode_Enum::EXERCISE,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct Mti_Ingest_dataMode_Enum(pub i8);
#[allow(non_upper_case_globals)]
impl Mti_Ingest_dataMode_Enum {
  /// Data collected or produced that pertains to real-world objects, events, and analysis.
  pub const REAL: Self = Self(0);
  /// Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  pub const TEST: Self = Self(1);
  /// Synthetic data generated by a model to mimic real-world datasets.
  pub const SIMULATED: Self = Self(2);
  /// Data pertaining to a government or military exercise. The data may include both real and simulated data.
  pub const EXERCISE: Self = Self(3);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 3;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::REAL,
    Self::TEST,
    Self::SIMULATED,
    Self::EXERCISE,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::REAL => Some("REAL"),
      Self::TEST => Some("TEST"),
      Self::SIMULATED => Some("SIMULATED"),
      Self::EXERCISE => Some("EXERCISE"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for Mti_Ingest_dataMode_Enum {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for Mti_Ingest_dataMode_Enum {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for Mti_Ingest_dataMode_Enum {
    type Output = Mti_Ingest_dataMode_Enum;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for Mti_Ingest_dataMode_Enum {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for Mti_Ingest_dataMode_Enum {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Mti_Ingest_dataMode_Enum {}
pub enum Mti_IngestOffset {}
#[derive(Copy, Clone, PartialEq)]

/// /// Information on the mission and flight plans, the type and configuration of the platform, and the reference time.
pub struct Mti_Ingest<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Mti_Ingest<'a> {
  type Inner = Mti_Ingest<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Mti_Ingest<'a> {
  pub const VT_CLASSIFICATIONMARKING: flatbuffers::VOffsetT = 4;
  pub const VT_SOURCE: flatbuffers::VOffsetT = 6;
  pub const VT_ORIGIN: flatbuffers::VOffsetT = 8;
  pub const VT_ID: flatbuffers::VOffsetT = 10;
  pub const VT_DATAMODE: flatbuffers::VOffsetT = 12;
  pub const VT_CREATEDBY: flatbuffers::VOffsetT = 14;
  pub const VT_CREATEDAT: flatbuffers::VOffsetT = 16;
  pub const VT_P3: flatbuffers::VOffsetT = 18;
  pub const VT_P6: flatbuffers::VOffsetT = 20;
  pub const VT_P7: flatbuffers::VOffsetT = 22;
  pub const VT_P8: flatbuffers::VOffsetT = 24;
  pub const VT_P9: flatbuffers::VOffsetT = 26;
  pub const VT_P10: flatbuffers::VOffsetT = 28;
  pub const VT_MISSIONS: flatbuffers::VOffsetT = 30;
  pub const VT_DWELLS: flatbuffers::VOffsetT = 32;
  pub const VT_HRRS: flatbuffers::VOffsetT = 34;
  pub const VT_JOBDEFS: flatbuffers::VOffsetT = 36;
  pub const VT_FREETEXTS: flatbuffers::VOffsetT = 38;
  pub const VT_PLATFORMLOCS: flatbuffers::VOffsetT = 40;
  pub const VT_JOBREQUESTS: flatbuffers::VOffsetT = 42;
  pub const VT_ORIGNETWORK: flatbuffers::VOffsetT = 44;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Mti_Ingest { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args Mti_IngestArgs<'args>
  ) -> flatbuffers::WIPOffset<Mti_Ingest<'bldr>> {
    let mut builder = Mti_IngestBuilder::new(_fbb);
    if let Some(x) = args.origNetwork { builder.add_origNetwork(x); }
    if let Some(x) = args.jobRequests { builder.add_jobRequests(x); }
    if let Some(x) = args.platformLocs { builder.add_platformLocs(x); }
    if let Some(x) = args.freeTexts { builder.add_freeTexts(x); }
    if let Some(x) = args.jobDefs { builder.add_jobDefs(x); }
    if let Some(x) = args.hrrs { builder.add_hrrs(x); }
    if let Some(x) = args.dwells { builder.add_dwells(x); }
    if let Some(x) = args.missions { builder.add_missions(x); }
    builder.add_p10(args.p10);
    builder.add_p9(args.p9);
    if let Some(x) = args.p8 { builder.add_p8(x); }
    if let Some(x) = args.p7 { builder.add_p7(x); }
    if let Some(x) = args.p6 { builder.add_p6(x); }
    if let Some(x) = args.p3 { builder.add_p3(x); }
    if let Some(x) = args.createdAt { builder.add_createdAt(x); }
    if let Some(x) = args.createdBy { builder.add_createdBy(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    if let Some(x) = args.origin { builder.add_origin(x); }
    if let Some(x) = args.source { builder.add_source(x); }
    if let Some(x) = args.classificationMarking { builder.add_classificationMarking(x); }
    builder.add_dataMode(args.dataMode);
    builder.finish()
  }

  pub fn unpack(&self) -> Mti_IngestT {
    let classificationMarking = self.classificationMarking().map(|x| {
      x.to_string()
    });
    let source = self.source().map(|x| {
      x.to_string()
    });
    let origin = self.origin().map(|x| {
      x.to_string()
    });
    let id = self.id().map(|x| {
      x.to_string()
    });
    let dataMode = self.dataMode();
    let createdBy = self.createdBy().map(|x| {
      x.to_string()
    });
    let createdAt = self.createdAt().map(|x| {
      x.to_string()
    });
    let p3 = self.p3().map(|x| {
      x.to_string()
    });
    let p6 = self.p6().map(|x| {
      x.to_string()
    });
    let p7 = self.p7().map(|x| {
      x.to_string()
    });
    let p8 = self.p8().map(|x| {
      x.to_string()
    });
    let p9 = self.p9();
    let p10 = self.p10();
    let missions = self.missions().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let dwells = self.dwells().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let hrrs = self.hrrs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let jobDefs = self.jobDefs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let freeTexts = self.freeTexts().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let platformLocs = self.platformLocs().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let jobRequests = self.jobRequests().map(|x| {
      x.iter().map(|s| s.to_string()).collect()
    });
    let origNetwork = self.origNetwork().map(|x| {
      x.to_string()
    });
    Mti_IngestT {
      classificationMarking,
      source,
      origin,
      id,
      dataMode,
      createdBy,
      createdAt,
      p3,
      p6,
      p7,
      p8,
      p9,
      p10,
      missions,
      dwells,
      hrrs,
      jobDefs,
      freeTexts,
      platformLocs,
      jobRequests,
      origNetwork,
    }
  }

  /// Classification marking of the data in IC/CAPCO Portion-marked format.
  /// Example: /// Example: U
  /// Constraints: Minimum length = 1, Maximum length = 128
  #[inline]
  pub fn classificationMarking(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_CLASSIFICATIONMARKING, None)}
  }
  /// Source of the data.
  /// Example: /// Example: Bluestaq
  /// Constraints: Minimum length = 1, Maximum length = 64
  #[inline]
  pub fn source(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_SOURCE, None)}
  }
  /// Originating system or organization which produced the data, if different from the source. The origin may be different than the source if the source was a mediating system which forwarded the data on behalf of the origin system. If null, the source may be assumed to be the origin.
  /// Example: /// Example: THIRD_PARTY_DATASOURCE
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn origin(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_ORIGIN, None)}
  }
  /// Unique identifier of the record, auto-generated by the system.
  /// Example: /// Example: MTI-ID
  /// Constraints: Minimum length = 1, Maximum length = 36
  #[inline]
  pub fn id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_ID, None)}
  }
  /// Indicator of whether the data is EXERCISE, REAL, SIMULATED, or TEST data:
  /// EXERCISE:&nbsp;Data pertaining to a government or military exercise. The data may include both real and simulated data.
  /// REAL:&nbsp;Data collected or produced that pertains to real-world objects, events, and analysis.
  /// SIMULATED:&nbsp;Synthetic data generated by a model to mimic real-world datasets.
  /// TEST:&nbsp;Specific datasets used to evaluate compliance with specifications and requirements, and for validating technical, functional, and performance characteristics.
  /// Example: /// Example: TEST
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn dataMode(&self) -> Mti_Ingest_dataMode_Enum {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Mti_Ingest_dataMode_Enum>(Mti_Ingest::VT_DATAMODE, Some(Mti_Ingest_dataMode_Enum::REAL)).unwrap()}
  }
  /// Application user who created the row in the database, auto-populated by the system.
  /// Example: /// Example: some.user
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn createdBy(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_CREATEDBY, None)}
  }
  /// Time the row was created in the database, auto-populated by the system.
  /// Example: /// Example: 2018-01-01T16:00:00.123Z
  /// Constraints: No constraints specified.
  #[inline]
  pub fn createdAt(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_CREATEDAT, None)}
  }
  /// Nationality of the platform providing the data.
  /// Example: /// Example: NATIONALITY
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn p3(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_P3, None)}
  }
  /// Control / handling marking.
  /// Example: /// Example: MARKING
  /// Constraints: Minimum length = 0, Maximum length = 128
  #[inline]
  pub fn p6(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_P6, None)}
  }
  /// Data record exercise indicator.
  /// Example: /// Example: INDICATOR
  /// Constraints: Minimum length = 0, Maximum length = 32
  #[inline]
  pub fn p7(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_P7, None)}
  }
  /// ID of the platform providing the data (tail number for air platform, name and numerical designator for space-based platforms).
  /// Example: /// Example: P8-ID
  /// Constraints: Minimum length = 0, Maximum length = 64
  #[inline]
  pub fn p8(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_P8, None)}
  }
  /// Integer field, assigned by the platform, that uniquely identifies the mission for the platform.
  /// Example: /// Example: 45
  /// Constraints: No constraints specified.
  #[inline]
  pub fn p9(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Mti_Ingest::VT_P9, Some(0)).unwrap()}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: 45
  /// Constraints: No constraints specified.
  #[inline]
  pub fn p10(&self) -> i32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i32>(Mti_Ingest::VT_P10, Some(0)).unwrap()}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn missions(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Mti_Ingest::VT_MISSIONS, None)}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn dwells(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Mti_Ingest::VT_DWELLS, None)}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn hrrs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Mti_Ingest::VT_HRRS, None)}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn jobDefs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Mti_Ingest::VT_JOBDEFS, None)}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn freeTexts(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Mti_Ingest::VT_FREETEXTS, None)}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn platformLocs(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Mti_Ingest::VT_PLATFORMLOCS, None)}
  }
  /// A platform-assigned number identifying the specific request or task that pertains to all Dwell, HRR, and Range-Doppler segments in the packet.  Job ID is unique within a mission.
  /// Example: /// Example: No example provided.
  /// Constraints: No constraints specified.
  #[inline]
  pub fn jobRequests(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>(Mti_Ingest::VT_JOBREQUESTS, None)}
  }
  /// The originating source network on which this record was created, auto-populated by the system.
  /// Example: /// Example: ORIG
  /// Constraints: Minimum length = 1, Maximum length = 32
  #[inline]
  pub fn origNetwork(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Mti_Ingest::VT_ORIGNETWORK, None)}
  }
}

impl flatbuffers::Verifiable for Mti_Ingest<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("classificationMarking", Self::VT_CLASSIFICATIONMARKING, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("source", Self::VT_SOURCE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origin", Self::VT_ORIGIN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, false)?
     .visit_field::<Mti_Ingest_dataMode_Enum>("dataMode", Self::VT_DATAMODE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdBy", Self::VT_CREATEDBY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("createdAt", Self::VT_CREATEDAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("p3", Self::VT_P3, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("p6", Self::VT_P6, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("p7", Self::VT_P7, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("p8", Self::VT_P8, false)?
     .visit_field::<i32>("p9", Self::VT_P9, false)?
     .visit_field::<i32>("p10", Self::VT_P10, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("missions", Self::VT_MISSIONS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("dwells", Self::VT_DWELLS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("hrrs", Self::VT_HRRS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("jobDefs", Self::VT_JOBDEFS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("freeTexts", Self::VT_FREETEXTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("platformLocs", Self::VT_PLATFORMLOCS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<&'_ str>>>>("jobRequests", Self::VT_JOBREQUESTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("origNetwork", Self::VT_ORIGNETWORK, false)?
     .finish();
    Ok(())
  }
}
pub struct Mti_IngestArgs<'a> {
    pub classificationMarking: Option<flatbuffers::WIPOffset<&'a str>>,
    pub source: Option<flatbuffers::WIPOffset<&'a str>>,
    pub origin: Option<flatbuffers::WIPOffset<&'a str>>,
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub dataMode: Mti_Ingest_dataMode_Enum,
    pub createdBy: Option<flatbuffers::WIPOffset<&'a str>>,
    pub createdAt: Option<flatbuffers::WIPOffset<&'a str>>,
    pub p3: Option<flatbuffers::WIPOffset<&'a str>>,
    pub p6: Option<flatbuffers::WIPOffset<&'a str>>,
    pub p7: Option<flatbuffers::WIPOffset<&'a str>>,
    pub p8: Option<flatbuffers::WIPOffset<&'a str>>,
    pub p9: i32,
    pub p10: i32,
    pub missions: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub dwells: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub hrrs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub jobDefs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub freeTexts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub platformLocs: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub jobRequests: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<&'a str>>>>,
    pub origNetwork: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for Mti_IngestArgs<'a> {
  #[inline]
  fn default() -> Self {
    Mti_IngestArgs {
      classificationMarking: None,
      source: None,
      origin: None,
      id: None,
      dataMode: Mti_Ingest_dataMode_Enum::REAL,
      createdBy: None,
      createdAt: None,
      p3: None,
      p6: None,
      p7: None,
      p8: None,
      p9: 0,
      p10: 0,
      missions: None,
      dwells: None,
      hrrs: None,
      jobDefs: None,
      freeTexts: None,
      platformLocs: None,
      jobRequests: None,
      origNetwork: None,
    }
  }
}

pub struct Mti_IngestBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> Mti_IngestBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_classificationMarking(&mut self, classificationMarking: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_CLASSIFICATIONMARKING, classificationMarking);
  }
  #[inline]
  pub fn add_source(&mut self, source: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_SOURCE, source);
  }
  #[inline]
  pub fn add_origin(&mut self, origin: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_ORIGIN, origin);
  }
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_ID, id);
  }
  #[inline]
  pub fn add_dataMode(&mut self, dataMode: Mti_Ingest_dataMode_Enum) {
    self.fbb_.push_slot::<Mti_Ingest_dataMode_Enum>(Mti_Ingest::VT_DATAMODE, dataMode, Mti_Ingest_dataMode_Enum::REAL);
  }
  #[inline]
  pub fn add_createdBy(&mut self, createdBy: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_CREATEDBY, createdBy);
  }
  #[inline]
  pub fn add_createdAt(&mut self, createdAt: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_CREATEDAT, createdAt);
  }
  #[inline]
  pub fn add_p3(&mut self, p3: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_P3, p3);
  }
  #[inline]
  pub fn add_p6(&mut self, p6: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_P6, p6);
  }
  #[inline]
  pub fn add_p7(&mut self, p7: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_P7, p7);
  }
  #[inline]
  pub fn add_p8(&mut self, p8: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_P8, p8);
  }
  #[inline]
  pub fn add_p9(&mut self, p9: i32) {
    self.fbb_.push_slot::<i32>(Mti_Ingest::VT_P9, p9, 0);
  }
  #[inline]
  pub fn add_p10(&mut self, p10: i32) {
    self.fbb_.push_slot::<i32>(Mti_Ingest::VT_P10, p10, 0);
  }
  #[inline]
  pub fn add_missions(&mut self, missions: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_MISSIONS, missions);
  }
  #[inline]
  pub fn add_dwells(&mut self, dwells: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_DWELLS, dwells);
  }
  #[inline]
  pub fn add_hrrs(&mut self, hrrs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_HRRS, hrrs);
  }
  #[inline]
  pub fn add_jobDefs(&mut self, jobDefs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_JOBDEFS, jobDefs);
  }
  #[inline]
  pub fn add_freeTexts(&mut self, freeTexts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_FREETEXTS, freeTexts);
  }
  #[inline]
  pub fn add_platformLocs(&mut self, platformLocs: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_PLATFORMLOCS, platformLocs);
  }
  #[inline]
  pub fn add_jobRequests(&mut self, jobRequests: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<&'b  str>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_JOBREQUESTS, jobRequests);
  }
  #[inline]
  pub fn add_origNetwork(&mut self, origNetwork: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Mti_Ingest::VT_ORIGNETWORK, origNetwork);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> Mti_IngestBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    Mti_IngestBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Mti_Ingest<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Mti_Ingest<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Mti_Ingest");
      ds.field("classificationMarking", &self.classificationMarking());
      ds.field("source", &self.source());
      ds.field("origin", &self.origin());
      ds.field("id", &self.id());
      ds.field("dataMode", &self.dataMode());
      ds.field("createdBy", &self.createdBy());
      ds.field("createdAt", &self.createdAt());
      ds.field("p3", &self.p3());
      ds.field("p6", &self.p6());
      ds.field("p7", &self.p7());
      ds.field("p8", &self.p8());
      ds.field("p9", &self.p9());
      ds.field("p10", &self.p10());
      ds.field("missions", &self.missions());
      ds.field("dwells", &self.dwells());
      ds.field("hrrs", &self.hrrs());
      ds.field("jobDefs", &self.jobDefs());
      ds.field("freeTexts", &self.freeTexts());
      ds.field("platformLocs", &self.platformLocs());
      ds.field("jobRequests", &self.jobRequests());
      ds.field("origNetwork", &self.origNetwork());
      ds.finish()
  }
}
#[non_exhaustive]
#[derive(Debug, Clone, PartialEq)]
pub struct Mti_IngestT {
  pub classificationMarking: Option<String>,
  pub source: Option<String>,
  pub origin: Option<String>,
  pub id: Option<String>,
  pub dataMode: Mti_Ingest_dataMode_Enum,
  pub createdBy: Option<String>,
  pub createdAt: Option<String>,
  pub p3: Option<String>,
  pub p6: Option<String>,
  pub p7: Option<String>,
  pub p8: Option<String>,
  pub p9: i32,
  pub p10: i32,
  pub missions: Option<Vec<String>>,
  pub dwells: Option<Vec<String>>,
  pub hrrs: Option<Vec<String>>,
  pub jobDefs: Option<Vec<String>>,
  pub freeTexts: Option<Vec<String>>,
  pub platformLocs: Option<Vec<String>>,
  pub jobRequests: Option<Vec<String>>,
  pub origNetwork: Option<String>,
}
impl Default for Mti_IngestT {
  fn default() -> Self {
    Self {
      classificationMarking: None,
      source: None,
      origin: None,
      id: None,
      dataMode: Mti_Ingest_dataMode_Enum::REAL,
      createdBy: None,
      createdAt: None,
      p3: None,
      p6: None,
      p7: None,
      p8: None,
      p9: 0,
      p10: 0,
      missions: None,
      dwells: None,
      hrrs: None,
      jobDefs: None,
      freeTexts: None,
      platformLocs: None,
      jobRequests: None,
      origNetwork: None,
    }
  }
}
impl Mti_IngestT {
  pub fn pack<'b, A: flatbuffers::Allocator + 'b>(
    &self,
    _fbb: &mut flatbuffers::FlatBufferBuilder<'b, A>
  ) -> flatbuffers::WIPOffset<Mti_Ingest<'b>> {
    let classificationMarking = self.classificationMarking.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let source = self.source.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let origin = self.origin.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let id = self.id.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let dataMode = self.dataMode;
    let createdBy = self.createdBy.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let createdAt = self.createdAt.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let p3 = self.p3.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let p6 = self.p6.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let p7 = self.p7.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let p8 = self.p8.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    let p9 = self.p9;
    let p10 = self.p10;
    let missions = self.missions.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let dwells = self.dwells.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let hrrs = self.hrrs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let jobDefs = self.jobDefs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let freeTexts = self.freeTexts.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let platformLocs = self.platformLocs.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let jobRequests = self.jobRequests.as_ref().map(|x|{
      let w: Vec<_> = x.iter().map(|s| _fbb.create_string(s)).collect();_fbb.create_vector(&w)
    });
    let origNetwork = self.origNetwork.as_ref().map(|x|{
      _fbb.create_string(x)
    });
    Mti_Ingest::create(_fbb, &Mti_IngestArgs{
      classificationMarking,
      source,
      origin,
      id,
      dataMode,
      createdBy,
      createdAt,
      p3,
      p6,
      p7,
      p8,
      p9,
      p10,
      missions,
      dwells,
      hrrs,
      jobDefs,
      freeTexts,
      platformLocs,
      jobRequests,
      origNetwork,
    })
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Mti_Ingest`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_ingest_unchecked`.
pub fn root_as_mti_ingest(buf: &[u8]) -> Result<Mti_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Mti_Ingest>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Mti_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_mti_ingest_unchecked`.
pub fn size_prefixed_root_as_mti_ingest(buf: &[u8]) -> Result<Mti_Ingest, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Mti_Ingest>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Mti_Ingest` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_ingest_unchecked`.
pub fn root_as_mti_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Mti_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Mti_Ingest<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Mti_Ingest` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_mti_ingest_unchecked`.
pub fn size_prefixed_root_as_mti_ingest_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Mti_Ingest<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Mti_Ingest<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Mti_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Mti_Ingest`.
pub unsafe fn root_as_mti_ingest_unchecked(buf: &[u8]) -> Mti_Ingest {
  flatbuffers::root_unchecked::<Mti_Ingest>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Mti_Ingest and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Mti_Ingest`.
pub unsafe fn size_prefixed_root_as_mti_ingest_unchecked(buf: &[u8]) -> Mti_Ingest {
  flatbuffers::size_prefixed_root_unchecked::<Mti_Ingest>(buf)
}
pub const MTI_INGEST_IDENTIFIER: &str = "MTII";

#[inline]
pub fn mti_ingest_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_INGEST_IDENTIFIER, false)
}

#[inline]
pub fn mti_ingest_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
  flatbuffers::buffer_has_identifier(buf, MTI_INGEST_IDENTIFIER, true)
}

#[inline]
pub fn finish_mti_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<Mti_Ingest<'a>>) {
  fbb.finish(root, Some(MTI_INGEST_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_mti_ingest_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Mti_Ingest<'a>>) {
  fbb.finish_size_prefixed(root, Some(MTI_INGEST_IDENTIFIER));
}
